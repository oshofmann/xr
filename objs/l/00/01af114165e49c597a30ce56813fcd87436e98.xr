var __xr_tmp = [
"", 
"<span class=\"comment\">/* Tells if the epoll_ctl(2) operation needs an event copy from userspace */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ep_op_has_event\">ep_op_has_event</a>(int <a class=\"id\" href=\"#op\">op</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#op\">op</a> != <a class=\"id\" href=\"#EPOLL_CTL_DEL\">EPOLL_CTL_DEL</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Initialize the poll safe wake up structure */</span>", 
"static void <a class=\"id\" href=\"#ep_nested_calls_init\">ep_nested_calls_init</a>(struct <a class=\"id\" href=\"#nested_calls\">nested_calls</a> *<a class=\"id\" href=\"#ncalls\">ncalls</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#ncalls\">ncalls</a>-><a class=\"id\" href=\"#tasks_call_list\">tasks_call_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#ncalls\">ncalls</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ep_call_nested - Perform a bound (possibly) nested call, by checking</span>", 
"<span class=\"comment\"> *                  that the recursion limit is not exceeded, and that</span>", 
"<span class=\"comment\"> *                  the same nested call (by the meaning of same cookie) is</span>", 
"<span class=\"comment\"> *                  no re-entered.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @ncalls: Pointer to the nested_calls structure to be used for this call.</span>", 
"<span class=\"comment\"> * @max_nests: Maximum number of allowed nesting calls.</span>", 
"<span class=\"comment\"> * @nproc: Nested call core function pointer.</span>", 
"<span class=\"comment\"> * @priv: Opaque data to be passed to the @nproc callback.</span>", 
"<span class=\"comment\"> * @cookie: Cookie to be used to identify this nested call.</span>", 
"<span class=\"comment\"> * @ctx: This instance context.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns: Returns the code returned by the @nproc callback, or -1 if</span>", 
"<span class=\"comment\"> *          the maximum recursion limit has been exceeded.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ep_call_nested\">ep_call_nested</a>(struct <a class=\"id\" href=\"#nested_calls\">nested_calls</a> *<a class=\"id\" href=\"#ncalls\">ncalls</a>, int <a class=\"id\" href=\"#max_nests\">max_nests</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int (*<a class=\"id\" href=\"#nproc\">nproc</a>)(void *, void *, int), void *<a class=\"id\" href=\"#priv\">priv</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  void *<a class=\"id\" href=\"#cookie\">cookie</a>, void *<a class=\"id\" href=\"#ctx\">ctx</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>, <a class=\"id\" href=\"#call_nests\">call_nests</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#lsthead\">lsthead</a> = &amp;<a class=\"id\" href=\"#ncalls\">ncalls</a>-><a class=\"id\" href=\"#tasks_call_list\">tasks_call_list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#nested_call_node\">nested_call_node</a> *<a class=\"id\" href=\"#tncur\">tncur</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#nested_call_node\">nested_call_node</a> <a class=\"id\" href=\"#tnode\">tnode</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#ncalls\">ncalls</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Try to see if the current task is already inside this wakeup call.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We use a list here, since the population inside this set is always</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * very much limited.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#tncur\">tncur</a>, <a class=\"id\" href=\"#lsthead\">lsthead</a>, <a class=\"id\" href=\"#llink\">llink</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tncur\">tncur</a>-><a class=\"id\" href=\"#ctx\">ctx</a> == <a class=\"id\" href=\"#ctx\">ctx</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#tncur\">tncur</a>-><a class=\"id\" href=\"#cookie\">cookie</a> == <a class=\"id\" href=\"#cookie\">cookie</a> || ++<a class=\"id\" href=\"#call_nests\">call_nests</a> &gt; <a class=\"id\" href=\"#max_nests\">max_nests</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Ops ... loop detected or maximum nest level reached.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We abort this wake by breaking the cycle itself.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Add the current task and cookie to the list */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tnode\">tnode</a>.<a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#ctx\">ctx</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tnode\">tnode</a>.<a class=\"id\" href=\"#cookie\">cookie</a> = <a class=\"id\" href=\"#cookie\">cookie</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#tnode\">tnode</a>.<a class=\"id\" href=\"#llink\">llink</a>, <a class=\"id\" href=\"#lsthead\">lsthead</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#ncalls\">ncalls</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Call the nested function */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = (*<a class=\"id\" href=\"#nproc\">nproc</a>)(<a class=\"id\" href=\"#priv\">priv</a>, <a class=\"id\" href=\"#cookie\">cookie</a>, <a class=\"id\" href=\"#call_nests\">call_nests</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Remove the current task from the list */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#ncalls\">ncalls</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#tnode\">tnode</a>.<a class=\"id\" href=\"#llink\">llink</a>);", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#ncalls\">ncalls</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_LOCK_ALLOC\">CONFIG_DEBUG_LOCK_ALLOC</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ep_wake_up_nested\">ep_wake_up_nested</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#wqueue\">wqueue</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#events\">events</a>, int <a class=\"id\" href=\"#subclass\">subclass</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave_nested\">spin_lock_irqsave_nested</a>(&amp;<a class=\"id\" href=\"#wqueue\">wqueue</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#subclass\">subclass</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up_locked_poll\">wake_up_locked_poll</a>(<a class=\"id\" href=\"#wqueue\">wqueue</a>, <a class=\"id\" href=\"#events\">events</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#wqueue\">wqueue</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ep_wake_up_nested\">ep_wake_up_nested</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#wqueue\">wqueue</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#events\">events</a>, int <a class=\"id\" href=\"#subclass\">subclass</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up_poll\">wake_up_poll</a>(<a class=\"id\" href=\"#wqueue\">wqueue</a>, <a class=\"id\" href=\"#events\">events</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static int <a class=\"id\" href=\"#ep_poll_wakeup_proc\">ep_poll_wakeup_proc</a>(void *<a class=\"id\" href=\"#priv\">priv</a>, void *<a class=\"id\" href=\"#cookie\">cookie</a>, int <a class=\"id\" href=\"#call_nests\">call_nests</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ep_wake_up_nested\">ep_wake_up_nested</a>((<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *) <a class=\"id\" href=\"#cookie\">cookie</a>, <a class=\"id\" href=\"#POLLIN\">POLLIN</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  1 + <a class=\"id\" href=\"#call_nests\">call_nests</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Perform a safe wake up of the poll wait list. The problem is that</span>", 
"<span class=\"comment\"> * with the new callback'd wake up system, it is possible that the</span>", 
"<span class=\"comment\"> * poll callback is reentered from inside the call to wake_up() done</span>", 
"<span class=\"comment\"> * on the poll wait queue head. The rule is that we cannot reenter the</span>", 
"<span class=\"comment\"> * wake up code from the same task more than EP_MAX_NESTS times,</span>", 
"<span class=\"comment\"> * and we cannot reenter the same wait queue head at all. This will</span>", 
"<span class=\"comment\"> * enable to have a hierarchy of epoll file descriptor of no more than</span>", 
"<span class=\"comment\"> * EP_MAX_NESTS deep.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ep_poll_safewake\">ep_poll_safewake</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#wq\">wq</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#this_cpu\">this_cpu</a> = <a class=\"id\" href=\"#get_cpu\">get_cpu</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ep_call_nested\">ep_call_nested</a>(&amp;<a class=\"id\" href=\"#poll_safewake_ncalls\">poll_safewake_ncalls</a>, <a class=\"id\" href=\"#EP_MAX_NESTS\">EP_MAX_NESTS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#ep_poll_wakeup_proc\">ep_poll_wakeup_proc</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#wq\">wq</a>, (void *) (long) <a class=\"id\" href=\"#this_cpu\">this_cpu</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu\">put_cpu</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function unregisters poll callbacks from the associated file</span>", 
"<span class=\"comment\"> * descriptor.  Must be called with \"mtx\" held (or \"epmutex\" if called from</span>", 
"<span class=\"comment\"> * ep_free).</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ep_unregister_pollwait\">ep_unregister_pollwait</a>(struct <a class=\"id\" href=\"#eventpoll\">eventpoll</a> *<a class=\"id\" href=\"#ep\">ep</a>, struct <a class=\"id\" href=\"#epitem\">epitem</a> *<a class=\"id\" href=\"#epi\">epi</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#lsthead\">lsthead</a> = &amp;<a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#pwqlist\">pwqlist</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#eppoll_entry\">eppoll_entry</a> *<a class=\"id\" href=\"#pwq\">pwq</a>;", 
"", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#lsthead\">lsthead</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pwq\">pwq</a> = <a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(<a class=\"id\" href=\"#lsthead\">lsthead</a>, struct <a class=\"id\" href=\"#eppoll_entry\">eppoll_entry</a>, <a class=\"id\" href=\"#llink\">llink</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#pwq\">pwq</a>-><a class=\"id\" href=\"#llink\">llink</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remove_wait_queue\">remove_wait_queue</a>(<a class=\"id\" href=\"#pwq\">pwq</a>-><a class=\"id\" href=\"#whead\">whead</a>, &amp;<a class=\"id\" href=\"#pwq\">pwq</a>-><a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#pwq_cache\">pwq_cache</a>, <a class=\"id\" href=\"#pwq\">pwq</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ep_scan_ready_list - Scans the ready list in a way that makes possible for</span>", 
"<span class=\"comment\"> *                      the scan code, to call f_op-&gt;poll(). Also allows for</span>", 
"<span class=\"comment\"> *                      O(NumReady) performance.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @ep: Pointer to the epoll private data structure.</span>", 
"<span class=\"comment\"> * @sproc: Pointer to the scan callback.</span>", 
"<span class=\"comment\"> * @priv: Private opaque data passed to the @sproc callback.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns: The same integer error code returned by the @sproc callback.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ep_scan_ready_list\">ep_scan_ready_list</a>(struct <a class=\"id\" href=\"#eventpoll\">eventpoll</a> *<a class=\"id\" href=\"#ep\">ep</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int (*<a class=\"id\" href=\"#sproc\">sproc</a>)(struct <a class=\"id\" href=\"#eventpoll\">eventpoll</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#list_head\">list_head</a> *, void *),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      void *<a class=\"id\" href=\"#priv\">priv</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>, <a class=\"id\" href=\"#pwake\">pwake</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#epitem\">epitem</a> *<a class=\"id\" href=\"#epi\">epi</a>, *<a class=\"id\" href=\"#nepi\">nepi</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#txlist\">txlist</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We need to lock this because we could be hit by</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * eventpoll_release_file() and epoll_ctl().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#mtx\">mtx</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Steal the ready list, and re-init the original one to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * empty list. Also, set ep-&gt;ovflist to NULL so that events</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * happening while looping w/out locks, are not lost. We cannot</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * have the poll callback to queue directly on ep-&gt;rdllist,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * because we want the \"sproc\" callback to be able to do it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in a lockless way.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_splice_init\">list_splice_init</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#rdllist\">rdllist</a>, &amp;<a class=\"id\" href=\"#txlist\">txlist</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#ovflist\">ovflist</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now call the callback function.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = (*<a class=\"id\" href=\"#sproc\">sproc</a>)(<a class=\"id\" href=\"#ep\">ep</a>, &amp;<a class=\"id\" href=\"#txlist\">txlist</a>, <a class=\"id\" href=\"#priv\">priv</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * During the time we spent inside the \"sproc\" callback, some</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * other events might have been queued by the poll callback.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We re-insert them inside the main ready-list here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#nepi\">nepi</a> = <a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#ovflist\">ovflist</a>; (<a class=\"id\" href=\"#epi\">epi</a> = <a class=\"id\" href=\"#nepi\">nepi</a>) != <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#nepi\">nepi</a> = <a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#EP_UNACTIVE_PTR\">EP_UNACTIVE_PTR</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We need to check if the item is already in the list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * During the \"sproc\" callback execution time, items are</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * queued into -&gt;ovflist but the \"txlist\" might already</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * contain them, and the list_splice() below takes care of them.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ep_is_linked\">ep_is_linked</a>(&amp;<a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#rdllink\">rdllink</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#rdllink\">rdllink</a>, &amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#rdllist\">rdllist</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We need to set back ep-&gt;ovflist to EP_UNACTIVE_PTR, so that after</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * releasing the lock, events will be queued in the normal way inside</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ep-&gt;rdllist.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#ovflist\">ovflist</a> = <a class=\"id\" href=\"#EP_UNACTIVE_PTR\">EP_UNACTIVE_PTR</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Quickly re-inject items left on \"txlist\".</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_splice\">list_splice</a>(&amp;<a class=\"id\" href=\"#txlist\">txlist</a>, &amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#rdllist\">rdllist</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#rdllist\">rdllist</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Wake up (if active) both the eventpoll wait list and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the -&gt;poll() wait list (delayed after we release the lock).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#waitqueue_active\">waitqueue_active</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#wq\">wq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_locked\">wake_up_locked</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#wq\">wq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#waitqueue_active\">waitqueue_active</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#poll_wait\">poll_wait</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pwake\">pwake</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#mtx\">mtx</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We have to call this outside the lock */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pwake\">pwake</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ep_poll_safewake\">ep_poll_safewake</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#poll_wait\">poll_wait</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Removes a \"struct epitem\" from the eventpoll RB tree and deallocates</span>", 
"<span class=\"comment\"> * all the associated resources. Must be called with \"mtx\" held.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ep_remove\">ep_remove</a>(struct <a class=\"id\" href=\"#eventpoll\">eventpoll</a> *<a class=\"id\" href=\"#ep\">ep</a>, struct <a class=\"id\" href=\"#epitem\">epitem</a> *<a class=\"id\" href=\"#epi\">epi</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#ffd\">ffd</a>.<a class=\"id\" href=\"#file\">file</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Removes poll wait queue hooks. We _have_ to do this without holding</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the \"ep-&gt;lock\" otherwise a deadlock might occur. This because of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * sequence of the lock acquisition. Here we do \"ep-&gt;lock\" then the wait</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * queue head lock when unregistering the wait queue. The wakeup callback</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will run by holding the wait queue head lock and will call our callback</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that will try to get \"ep-&gt;lock\".</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ep_unregister_pollwait\">ep_unregister_pollwait</a>(<a class=\"id\" href=\"#ep\">ep</a>, <a class=\"id\" href=\"#epi\">epi</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Remove the current item from the list of epoll hooks */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_lock\">f_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ep_is_linked\">ep_is_linked</a>(&amp;<a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#fllink\">fllink</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#fllink\">fllink</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_lock\">f_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_erase\">rb_erase</a>(&amp;<a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#rbn\">rbn</a>, &amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#rbr\">rbr</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ep_is_linked\">ep_is_linked</a>(&amp;<a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#rdllink\">rdllink</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#rdllink\">rdllink</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* At this point it is safe to free the eventpoll item */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#epi_cache\">epi_cache</a>, <a class=\"id\" href=\"#epi\">epi</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#epoll_watches\">epoll_watches</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ep_free\">ep_free</a>(struct <a class=\"id\" href=\"#eventpoll\">eventpoll</a> *<a class=\"id\" href=\"#ep\">ep</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#rbp\">rbp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#epitem\">epitem</a> *<a class=\"id\" href=\"#epi\">epi</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We need to release all tasks waiting for these file */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#waitqueue_active\">waitqueue_active</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#poll_wait\">poll_wait</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ep_poll_safewake\">ep_poll_safewake</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#poll_wait\">poll_wait</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We need to lock this because we could be hit by</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * eventpoll_release_file() while we're freeing the \"struct eventpoll\".</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We do not need to hold \"ep-&gt;mtx\" here because the epoll file</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is on the way to be removed and no one has references to it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * anymore. The only hit might come from eventpoll_release_file() but</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * holding \"epmutex\" is sufficent here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#epmutex\">epmutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Walks through the whole tree by unregistering poll callbacks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#rbp\">rbp</a> = <a class=\"id\" href=\"#rb_first\">rb_first</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#rbr\">rbr</a>); <a class=\"id\" href=\"#rbp\">rbp</a>; <a class=\"id\" href=\"#rbp\">rbp</a> = <a class=\"id\" href=\"#rb_next\">rb_next</a>(<a class=\"id\" href=\"#rbp\">rbp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#epi\">epi</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#rbp\">rbp</a>, struct <a class=\"id\" href=\"#epitem\">epitem</a>, <a class=\"id\" href=\"#rbn\">rbn</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ep_unregister_pollwait\">ep_unregister_pollwait</a>(<a class=\"id\" href=\"#ep\">ep</a>, <a class=\"id\" href=\"#epi\">epi</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Walks through the whole tree by freeing each \"struct epitem\". At this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * point we are sure no poll callbacks will be lingering around, and also by</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * holding \"epmutex\" we can be sure that no file cleanup code will hit</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * us during this operation. So we can avoid the lock on \"ep-&gt;lock\".</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#rbp\">rbp</a> = <a class=\"id\" href=\"#rb_first\">rb_first</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#rbr\">rbr</a>)) != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#epi\">epi</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#rbp\">rbp</a>, struct <a class=\"id\" href=\"#epitem\">epitem</a>, <a class=\"id\" href=\"#rbn\">rbn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ep_remove\">ep_remove</a>(<a class=\"id\" href=\"#ep\">ep</a>, <a class=\"id\" href=\"#epi\">epi</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#epmutex\">epmutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_destroy\">mutex_destroy</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#mtx\">mtx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_uid\">free_uid</a>(<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#user\">user</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ep\">ep</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ep_eventpoll_release\">ep_eventpoll_release</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#eventpoll\">eventpoll</a> *<a class=\"id\" href=\"#ep\">ep</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ep\">ep</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ep_free\">ep_free</a>(<a class=\"id\" href=\"#ep\">ep</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ep_read_events_proc\">ep_read_events_proc</a>(struct <a class=\"id\" href=\"#eventpoll\">eventpoll</a> *<a class=\"id\" href=\"#ep\">ep</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       void *<a class=\"id\" href=\"#priv\">priv</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#epitem\">epitem</a> *<a class=\"id\" href=\"#epi\">epi</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#epi\">epi</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#rdllink\">rdllink</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#ffd\">ffd</a>.<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#poll\">poll</a>(<a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#ffd\">ffd</a>.<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#NULL\">NULL</a>) &amp;", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#event\">event</a>.<a class=\"id\" href=\"#events\">events</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#POLLIN\">POLLIN</a> | <a class=\"id\" href=\"#POLLRDNORM\">POLLRDNORM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Item has been dropped into the ready list by the poll</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * callback, but it's not actually ready, as far as</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * caller requested events goes. We can remove it here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#rdllink\">rdllink</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ep_poll_readyevents_proc\">ep_poll_readyevents_proc</a>(void *<a class=\"id\" href=\"#priv\">priv</a>, void *<a class=\"id\" href=\"#cookie\">cookie</a>, int <a class=\"id\" href=\"#call_nests\">call_nests</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ep_scan_ready_list\">ep_scan_ready_list</a>(<a class=\"id\" href=\"#priv\">priv</a>, <a class=\"id\" href=\"#ep_read_events_proc\">ep_read_events_proc</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"static unsigned int <a class=\"id\" href=\"#ep_eventpoll_poll\">ep_eventpoll_poll</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#poll_table\">poll_table</a> *<a class=\"id\" href=\"#wait\">wait</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pollflags\">pollflags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#eventpoll\">eventpoll</a> *<a class=\"id\" href=\"#ep\">ep</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Insert inside our poll wait queue */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#poll_wait\">poll_wait</a>(<a class=\"id\" href=\"#file\">file</a>, &amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#poll_wait\">poll_wait</a>, <a class=\"id\" href=\"#wait\">wait</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Proceed to find out if wanted events are really available inside</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the ready list. This need to be done under ep_call_nested()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * supervision, since the call to f_op-&gt;poll() done on listed files</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * could re-enter here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pollflags\">pollflags</a> = <a class=\"id\" href=\"#ep_call_nested\">ep_call_nested</a>(&amp;<a class=\"id\" href=\"#poll_readywalk_ncalls\">poll_readywalk_ncalls</a>, <a class=\"id\" href=\"#EP_MAX_NESTS\">EP_MAX_NESTS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#ep_poll_readyevents_proc\">ep_poll_readyevents_proc</a>, <a class=\"id\" href=\"#ep\">ep</a>, <a class=\"id\" href=\"#ep\">ep</a>, <a class=\"id\" href=\"#current\">current</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pollflags\">pollflags</a> != -1 ? <a class=\"id\" href=\"#pollflags\">pollflags</a> : 0;", 
"}", 
"", 
"<span class=\"comment\">/* File callbacks that implement the eventpoll file behaviour */</span>", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#eventpoll_fops\">eventpoll_fops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a><span class=\"ts\"/>= <a class=\"id\" href=\"#ep_eventpoll_release\">ep_eventpoll_release</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#poll\">poll</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ep_eventpoll_poll\">ep_eventpoll_poll</a>", 
"};", 
"", 
"<span class=\"comment\">/* Fast test to see if the file is an evenpoll file */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#is_file_epoll\">is_file_epoll</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#f\">f</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_op\">f_op</a> == &amp;<a class=\"id\" href=\"#eventpoll_fops\">eventpoll_fops</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is called from eventpoll_release() to unlink files from the eventpoll</span>", 
"<span class=\"comment\"> * interface. We need to have this facility to cleanup correctly files that are</span>", 
"<span class=\"comment\"> * closed without being removed from the eventpoll interface.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#eventpoll_release_file\">eventpoll_release_file</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#lsthead\">lsthead</a> = &amp;<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_ep_links\">f_ep_links</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#eventpoll\">eventpoll</a> *<a class=\"id\" href=\"#ep\">ep</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#epitem\">epitem</a> *<a class=\"id\" href=\"#epi\">epi</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We don't want to get \"file-&gt;f_lock\" because it is not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * necessary. It is not necessary because we're in the \"struct file\"</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cleanup path, and this means that noone is using this file anymore.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * So, for example, epoll_ctl() cannot hit here since if we reach this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * point, the file counter already went to zero and fget() would fail.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The only hit might come from ep_free() but by holding the mutex</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will correctly serialize the operation. We do need to acquire</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * \"ep-&gt;mtx\" after \"epmutex\" because ep_remove() requires it when called</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * from anywhere but ep_free().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Besides, ep_remove() acquires the lock, so we can't hold it here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#epmutex\">epmutex</a>);", 
"", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#lsthead\">lsthead</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#epi\">epi</a> = <a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(<a class=\"id\" href=\"#lsthead\">lsthead</a>, struct <a class=\"id\" href=\"#epitem\">epitem</a>, <a class=\"id\" href=\"#fllink\">fllink</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ep\">ep</a> = <a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#ep\">ep</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#fllink\">fllink</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#mtx\">mtx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ep_remove\">ep_remove</a>(<a class=\"id\" href=\"#ep\">ep</a>, <a class=\"id\" href=\"#epi\">epi</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#mtx\">mtx</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#epmutex\">epmutex</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ep_alloc\">ep_alloc</a>(struct <a class=\"id\" href=\"#eventpoll\">eventpoll</a> **<a class=\"id\" href=\"#pep\">pep</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#user_struct\">user_struct</a> *<a class=\"id\" href=\"#user\">user</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#eventpoll\">eventpoll</a> *<a class=\"id\" href=\"#ep\">ep</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#user\">user</a> = <a class=\"id\" href=\"#get_current_user\">get_current_user</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ep\">ep</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#ep\">ep</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#ep\">ep</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_uid\">free_uid</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#mtx\">mtx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_waitqueue_head\">init_waitqueue_head</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#wq\">wq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_waitqueue_head\">init_waitqueue_head</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#poll_wait\">poll_wait</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#rdllist\">rdllist</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#rbr\">rbr</a> = <a class=\"id\" href=\"#RB_ROOT\">RB_ROOT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#ovflist\">ovflist</a> = <a class=\"id\" href=\"#EP_UNACTIVE_PTR\">EP_UNACTIVE_PTR</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#user\">user</a> = <a class=\"id\" href=\"#user\">user</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#pep\">pep</a> = <a class=\"id\" href=\"#ep\">ep</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#free_uid\">free_uid</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_uid\">free_uid</a>(<a class=\"id\" href=\"#user\">user</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Search the file inside the eventpoll tree. The RB tree operations</span>", 
"<span class=\"comment\"> * are protected by the \"mtx\" mutex, and ep_find() must be called with</span>", 
"<span class=\"comment\"> * \"mtx\" held.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#epitem\">epitem</a> *<a class=\"id\" href=\"#ep_find\">ep_find</a>(struct <a class=\"id\" href=\"#eventpoll\">eventpoll</a> *<a class=\"id\" href=\"#ep\">ep</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, int <a class=\"id\" href=\"#fd\">fd</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#kcmp\">kcmp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#rbp\">rbp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#epitem\">epitem</a> *<a class=\"id\" href=\"#epi\">epi</a>, *<a class=\"id\" href=\"#epir\">epir</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#epoll_filefd\">epoll_filefd</a> <a class=\"id\" href=\"#ffd\">ffd</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ep_set_ffd\">ep_set_ffd</a>(&amp;<a class=\"id\" href=\"#ffd\">ffd</a>, <a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#fd\">fd</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#rbp\">rbp</a> = <a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#rbr\">rbr</a>.<a class=\"id\" href=\"#rb_node\">rb_node</a>; <a class=\"id\" href=\"#rbp\">rbp</a>; ) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#epi\">epi</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#rbp\">rbp</a>, struct <a class=\"id\" href=\"#epitem\">epitem</a>, <a class=\"id\" href=\"#rbn\">rbn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kcmp\">kcmp</a> = <a class=\"id\" href=\"#ep_cmp_ffd\">ep_cmp_ffd</a>(&amp;<a class=\"id\" href=\"#ffd\">ffd</a>, &amp;<a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#ffd\">ffd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kcmp\">kcmp</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rbp\">rbp</a> = <a class=\"id\" href=\"#rbp\">rbp</a>-><a class=\"id\" href=\"#rb_right\">rb_right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#kcmp\">kcmp</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rbp\">rbp</a> = <a class=\"id\" href=\"#rbp\">rbp</a>-><a class=\"id\" href=\"#rb_left\">rb_left</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#epir\">epir</a> = <a class=\"id\" href=\"#epi\">epi</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#epir\">epir</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is the callback that is passed to the wait queue wakeup</span>", 
"<span class=\"comment\"> * machanism. It is called by the stored file descriptors when they</span>", 
"<span class=\"comment\"> * have events to report.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ep_poll_callback\">ep_poll_callback</a>(<a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> *<a class=\"id\" href=\"#wait\">wait</a>, unsigned <a class=\"id\" href=\"#mode\">mode</a>, int <a class=\"id\" href=\"#sync\">sync</a>, void *<a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pwake\">pwake</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#epitem\">epitem</a> *<a class=\"id\" href=\"#epi\">epi</a> = <a class=\"id\" href=\"#ep_item_from_wait\">ep_item_from_wait</a>(<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#eventpoll\">eventpoll</a> *<a class=\"id\" href=\"#ep\">ep</a> = <a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#ep\">ep</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the event mask does not contain any poll(2) event, we consider the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * descriptor to be disabled. This condition is likely the effect of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * EPOLLONESHOT bit that disables the descriptor when an event is received,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * until the next EPOLL_CTL_MOD will be issued.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#event\">event</a>.<a class=\"id\" href=\"#events\">events</a> &amp; ~<a class=\"id\" href=\"#EP_PRIVATE_BITS\">EP_PRIVATE_BITS</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check the events coming with the callback. At this stage, not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * every device reports the events in the \"key\" parameter of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * callback. We need to be able to handle both cases here, hence the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * test for \"key\" != NULL before the event match test.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#key\">key</a> && !((unsigned long) <a class=\"id\" href=\"#key\">key</a> &amp; <a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#event\">event</a>.<a class=\"id\" href=\"#events\">events</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we are trasfering events to userspace, we can hold no locks</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (because we're accessing user memory, and because of linux f_op-&gt;poll()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * semantics). All the events that happens during that period of time are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * chained in ep-&gt;ovflist and requeued later on.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#ovflist\">ovflist</a> != <a class=\"id\" href=\"#EP_UNACTIVE_PTR\">EP_UNACTIVE_PTR</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#next\">next</a> == <a class=\"id\" href=\"#EP_UNACTIVE_PTR\">EP_UNACTIVE_PTR</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#ovflist\">ovflist</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#ovflist\">ovflist</a> = <a class=\"id\" href=\"#epi\">epi</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If this file is already in the ready list we exit soon */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ep_is_linked\">ep_is_linked</a>(&amp;<a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#rdllink\">rdllink</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#rdllink\">rdllink</a>, &amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#rdllist\">rdllist</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Wake up ( if active ) both the eventpoll wait list and the -&gt;poll()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * wait list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#waitqueue_active\">waitqueue_active</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#wq\">wq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_locked\">wake_up_locked</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#wq\">wq</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#waitqueue_active\">waitqueue_active</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#poll_wait\">poll_wait</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pwake\">pwake</a>++;", 
"", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We have to call this outside the lock */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pwake\">pwake</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ep_poll_safewake\">ep_poll_safewake</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#poll_wait\">poll_wait</a>);", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is the callback that is used to add our wait queue to the</span>", 
"<span class=\"comment\"> * target file wakeup lists.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ep_ptable_queue_proc\">ep_ptable_queue_proc</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#whead\">whead</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#poll_table\">poll_table</a> *<a class=\"id\" href=\"#pt\">pt</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#epitem\">epitem</a> *<a class=\"id\" href=\"#epi\">epi</a> = <a class=\"id\" href=\"#ep_item_from_epqueue\">ep_item_from_epqueue</a>(<a class=\"id\" href=\"#pt\">pt</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#eppoll_entry\">eppoll_entry</a> *<a class=\"id\" href=\"#pwq\">pwq</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#nwait\">nwait</a> >= 0 && (<a class=\"id\" href=\"#pwq\">pwq</a> = <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#pwq_cache\">pwq_cache</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_waitqueue_func_entry\">init_waitqueue_func_entry</a>(&amp;<a class=\"id\" href=\"#pwq\">pwq</a>-><a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#ep_poll_callback\">ep_poll_callback</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pwq\">pwq</a>-><a class=\"id\" href=\"#whead\">whead</a> = <a class=\"id\" href=\"#whead\">whead</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pwq\">pwq</a>-><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#epi\">epi</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_wait_queue\">add_wait_queue</a>(<a class=\"id\" href=\"#whead\">whead</a>, &amp;<a class=\"id\" href=\"#pwq\">pwq</a>-><a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#pwq\">pwq</a>-><a class=\"id\" href=\"#llink\">llink</a>, &amp;<a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#pwqlist\">pwqlist</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#nwait\">nwait</a>++;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We have to signal that an error occurred */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#nwait\">nwait</a> = -1;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ep_rbtree_insert\">ep_rbtree_insert</a>(struct <a class=\"id\" href=\"#eventpoll\">eventpoll</a> *<a class=\"id\" href=\"#ep\">ep</a>, struct <a class=\"id\" href=\"#epitem\">epitem</a> *<a class=\"id\" href=\"#epi\">epi</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#kcmp\">kcmp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> **<a class=\"id\" href=\"#p\">p</a> = &amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#rbr\">rbr</a>.<a class=\"id\" href=\"#rb_node\">rb_node</a>, *<a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#epitem\">epitem</a> *<a class=\"id\" href=\"#epic\">epic</a>;", 
"", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#epic\">epic</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#parent\">parent</a>, struct <a class=\"id\" href=\"#epitem\">epitem</a>, <a class=\"id\" href=\"#rbn\">rbn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kcmp\">kcmp</a> = <a class=\"id\" href=\"#ep_cmp_ffd\">ep_cmp_ffd</a>(&amp;<a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#ffd\">ffd</a>, &amp;<a class=\"id\" href=\"#epic\">epic</a>-><a class=\"id\" href=\"#ffd\">ffd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kcmp\">kcmp</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = &amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#rb_right\">rb_right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = &amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#rb_left\">rb_left</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_link_node\">rb_link_node</a>(&amp;<a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#rbn\">rbn</a>, <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_insert_color\">rb_insert_color</a>(&amp;<a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#rbn\">rbn</a>, &amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#rbr\">rbr</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Must be called with \"mtx\" held.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ep_insert\">ep_insert</a>(struct <a class=\"id\" href=\"#eventpoll\">eventpoll</a> *<a class=\"id\" href=\"#ep\">ep</a>, struct <a class=\"id\" href=\"#epoll_event\">epoll_event</a> *<a class=\"id\" href=\"#event\">event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#tfile\">tfile</a>, int <a class=\"id\" href=\"#fd\">fd</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>, <a class=\"id\" href=\"#revents\">revents</a>, <a class=\"id\" href=\"#pwake\">pwake</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#epitem\">epitem</a> *<a class=\"id\" href=\"#epi\">epi</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ep_pqueue\">ep_pqueue</a> <a class=\"id\" href=\"#epq\">epq</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#epoll_watches\">epoll_watches</a>) >=", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#max_user_watches\">max_user_watches</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>;", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#epi\">epi</a> = <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#epi_cache\">epi_cache</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Item initialization follow here ... */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#rdllink\">rdllink</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#fllink\">fllink</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#pwqlist\">pwqlist</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#ep\">ep</a> = <a class=\"id\" href=\"#ep\">ep</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ep_set_ffd\">ep_set_ffd</a>(&amp;<a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#ffd\">ffd</a>, <a class=\"id\" href=\"#tfile\">tfile</a>, <a class=\"id\" href=\"#fd\">fd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#event\">event</a> = *<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#nwait\">nwait</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#EP_UNACTIVE_PTR\">EP_UNACTIVE_PTR</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Initialize the poll table using the queue callback */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#epq\">epq</a>.<a class=\"id\" href=\"#epi\">epi</a> = <a class=\"id\" href=\"#epi\">epi</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_poll_funcptr\">init_poll_funcptr</a>(&amp;<a class=\"id\" href=\"#epq\">epq</a>.<a class=\"id\" href=\"#pt\">pt</a>, <a class=\"id\" href=\"#ep_ptable_queue_proc\">ep_ptable_queue_proc</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Attach the item to the poll hooks and get current event bits.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We can safely use the file* here because its usage count has</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * been increased by the caller of this function. Note that after</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this operation completes, the poll callback can start hitting</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the new item.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#revents\">revents</a> = <a class=\"id\" href=\"#tfile\">tfile</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#poll\">poll</a>(<a class=\"id\" href=\"#tfile\">tfile</a>, &amp;<a class=\"id\" href=\"#epq\">epq</a>.<a class=\"id\" href=\"#pt\">pt</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We have to check if something went wrong during the poll wait queue</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * install process. Namely an allocation for a wait queue failed due</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * high memory pressure.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#nwait\">nwait</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_unregister\">error_unregister</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Add the current item to the list of active epoll hook for this file */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#tfile\">tfile</a>-><a class=\"id\" href=\"#f_lock\">f_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#fllink\">fllink</a>, &amp;<a class=\"id\" href=\"#tfile\">tfile</a>-><a class=\"id\" href=\"#f_ep_links\">f_ep_links</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#tfile\">tfile</a>-><a class=\"id\" href=\"#f_lock\">f_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Add the current item to the RB tree. All RB tree operations are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * protected by \"mtx\", and ep_insert() is called with \"mtx\" held.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ep_rbtree_insert\">ep_rbtree_insert</a>(<a class=\"id\" href=\"#ep\">ep</a>, <a class=\"id\" href=\"#epi\">epi</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We have to drop the new item inside our item list to keep track of it */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If the file is already \"ready\" we drop it inside the ready list */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#revents\">revents</a> &amp; <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#events\">events</a>) && !<a class=\"id\" href=\"#ep_is_linked\">ep_is_linked</a>(&amp;<a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#rdllink\">rdllink</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#rdllink\">rdllink</a>, &amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#rdllist\">rdllist</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Notify waiting tasks that events are available */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#waitqueue_active\">waitqueue_active</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#wq\">wq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_locked\">wake_up_locked</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#wq\">wq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#waitqueue_active\">waitqueue_active</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#poll_wait\">poll_wait</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pwake\">pwake</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#user\">user</a>-><a class=\"id\" href=\"#epoll_watches\">epoll_watches</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We have to call this outside the lock */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pwake\">pwake</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ep_poll_safewake\">ep_poll_safewake</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#poll_wait\">poll_wait</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#error_unregister\">error_unregister</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ep_unregister_pollwait\">ep_unregister_pollwait</a>(<a class=\"id\" href=\"#ep\">ep</a>, <a class=\"id\" href=\"#epi\">epi</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We need to do this because an event could have been arrived on some</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * allocated wait queue. Note that we don't care about the ep-&gt;ovflist</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * list, since that is used/cleaned only inside a section bound by \"mtx\".</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * And ep_insert() is called with \"mtx\" held.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ep_is_linked\">ep_is_linked</a>(&amp;<a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#rdllink\">rdllink</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#rdllink\">rdllink</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#epi_cache\">epi_cache</a>, <a class=\"id\" href=\"#epi\">epi</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Modify the interest event mask by dropping an event if the new mask</span>", 
"<span class=\"comment\"> * has a match in the current file status. Must be called with \"mtx\" held.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ep_modify\">ep_modify</a>(struct <a class=\"id\" href=\"#eventpoll\">eventpoll</a> *<a class=\"id\" href=\"#ep\">ep</a>, struct <a class=\"id\" href=\"#epitem\">epitem</a> *<a class=\"id\" href=\"#epi\">epi</a>, struct <a class=\"id\" href=\"#epoll_event\">epoll_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pwake\">pwake</a> = 0;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#revents\">revents</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Set the new event interest mask before calling f_op-&gt;poll();</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * otherwise we might miss an event that happens between the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * f_op-&gt;poll() call and the new event set registering.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#event\">event</a>.<a class=\"id\" href=\"#events\">events</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#events\">events</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#event\">event</a>.<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#data\">data</a>; <span class=\"comment\">/* protected by mtx */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Get current event bits. We can safely use the file* here because</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * its usage count has been increased by the caller of this function.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#revents\">revents</a> = <a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#ffd\">ffd</a>.<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#poll\">poll</a>(<a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#ffd\">ffd</a>.<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the item is \"hot\" and it is not registered inside the ready</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * list, push it inside.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#revents\">revents</a> &amp; <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#events\">events</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ep_is_linked\">ep_is_linked</a>(&amp;<a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#rdllink\">rdllink</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#rdllink\">rdllink</a>, &amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#rdllist\">rdllist</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Notify waiting tasks that events are available */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#waitqueue_active\">waitqueue_active</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#wq\">wq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_locked\">wake_up_locked</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#wq\">wq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#waitqueue_active\">waitqueue_active</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#poll_wait\">poll_wait</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pwake\">pwake</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We have to call this outside the lock */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pwake\">pwake</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ep_poll_safewake\">ep_poll_safewake</a>(&amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#poll_wait\">poll_wait</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ep_send_events_proc\">ep_send_events_proc</a>(struct <a class=\"id\" href=\"#eventpoll\">eventpoll</a> *<a class=\"id\" href=\"#ep\">ep</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       void *<a class=\"id\" href=\"#priv\">priv</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ep_send_events_data\">ep_send_events_data</a> *<a class=\"id\" href=\"#esed\">esed</a> = <a class=\"id\" href=\"#priv\">priv</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#eventcnt\">eventcnt</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#revents\">revents</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#epitem\">epitem</a> *<a class=\"id\" href=\"#epi\">epi</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#epoll_event\">epoll_event</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#uevent\">uevent</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We can loop without lock because we are passed a task private list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Items cannot vanish during the loop because ep_scan_ready_list() is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * holding \"mtx\" during this call.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#eventcnt\">eventcnt</a> = 0, <a class=\"id\" href=\"#uevent\">uevent</a> = <a class=\"id\" href=\"#esed\">esed</a>-><a class=\"id\" href=\"#events\">events</a>;", 
"<span class=\"ts\"/>     !<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#head\">head</a>) && <a class=\"id\" href=\"#eventcnt\">eventcnt</a> &lt; <a class=\"id\" href=\"#esed\">esed</a>-><a class=\"id\" href=\"#maxevents\">maxevents</a>;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#epi\">epi</a> = <a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(<a class=\"id\" href=\"#head\">head</a>, struct <a class=\"id\" href=\"#epitem\">epitem</a>, <a class=\"id\" href=\"#rdllink\">rdllink</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#rdllink\">rdllink</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#revents\">revents</a> = <a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#ffd\">ffd</a>.<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#poll\">poll</a>(<a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#ffd\">ffd</a>.<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#NULL\">NULL</a>) &amp;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#event\">event</a>.<a class=\"id\" href=\"#events\">events</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If the event mask intersect the caller-requested one,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * deliver the event to userspace. Again, ep_scan_ready_list()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is holding \"mtx\", so no operations coming from userspace</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * can change the item.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#revents\">revents</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#__put_user\">__put_user</a>(<a class=\"id\" href=\"#revents\">revents</a>, &amp;<a class=\"id\" href=\"#uevent\">uevent</a>-><a class=\"id\" href=\"#events\">events</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#__put_user\">__put_user</a>(<a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#event\">event</a>.<a class=\"id\" href=\"#data\">data</a>, &amp;<a class=\"id\" href=\"#uevent\">uevent</a>-><a class=\"id\" href=\"#data\">data</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#rdllink\">rdllink</a>, <a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#eventcnt\">eventcnt</a> ? <a class=\"id\" href=\"#eventcnt\">eventcnt</a> : -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#eventcnt\">eventcnt</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uevent\">uevent</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#event\">event</a>.<a class=\"id\" href=\"#events\">events</a> &amp; <a class=\"id\" href=\"#EPOLLONESHOT\">EPOLLONESHOT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#event\">event</a>.<a class=\"id\" href=\"#events\">events</a> &= <a class=\"id\" href=\"#EP_PRIVATE_BITS\">EP_PRIVATE_BITS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else if (!(<a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#event\">event</a>.<a class=\"id\" href=\"#events\">events</a> &amp; <a class=\"id\" href=\"#EPOLLET\">EPOLLET</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If this file has been added with Level</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Trigger mode, we need to insert back inside</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the ready list, so that the next call to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * epoll_wait() will check again the events</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * availability. At this point, noone can insert</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * into ep-&gt;rdllist besides us. The epoll_ctl()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * callers are locked out by</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * ep_scan_ready_list() holding \"mtx\" and the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * poll callback will queue them in ep-&gt;ovflist.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#epi\">epi</a>-><a class=\"id\" href=\"#rdllink\">rdllink</a>, &amp;<a class=\"id\" href=\"#ep\">ep</a>-><a class=\"id\" href=\"#rdllist\">rdllist</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
];
xr_frag_insert('l/00/01af114165e49c597a30ce56813fcd87436e98.xr', __xr_tmp);
