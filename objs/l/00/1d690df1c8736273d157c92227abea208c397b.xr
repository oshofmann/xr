var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Functions related to setting various queue properties from drivers</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bio\">bio</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#blkdev\">blkdev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bootmem\">bootmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;<span class=\"ts\"/><span class=\"comment\">/* for max_pfn/max_low_pfn */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#gcd\">gcd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#lcm\">lcm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#jiffies\">jiffies</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#gfp\">gfp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"blk.h\"", 
"", 
"unsigned long <a class=\"id\" href=\"#blk_max_low_pfn\">blk_max_low_pfn</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_max_low_pfn\">blk_max_low_pfn</a>);", 
"", 
"unsigned long <a class=\"id\" href=\"#blk_max_pfn\">blk_max_pfn</a>;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_queue_prep_rq - set a prepare_request function for queue</span>", 
"<span class=\"comment\"> * @q:<span class=\"ts\"/><span class=\"ts\"/>queue</span>", 
"<span class=\"comment\"> * @pfn:<span class=\"ts\"/>prepare_request function</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It's possible for a queue to register a prepare_request callback which</span>", 
"<span class=\"comment\"> * is invoked before the request is handed to the request_fn. The goal of</span>", 
"<span class=\"comment\"> * the function is to prepare a request for I/O, it can be used to build a</span>", 
"<span class=\"comment\"> * cdb from the request data for instance.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#blk_queue_prep_rq\">blk_queue_prep_rq</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#prep_rq_fn\">prep_rq_fn</a> *<a class=\"id\" href=\"#pfn\">pfn</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#prep_rq_fn\">prep_rq_fn</a> = <a class=\"id\" href=\"#pfn\">pfn</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_queue_prep_rq\">blk_queue_prep_rq</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_queue_unprep_rq - set an unprepare_request function for queue</span>", 
"<span class=\"comment\"> * @q:<span class=\"ts\"/><span class=\"ts\"/>queue</span>", 
"<span class=\"comment\"> * @ufn:<span class=\"ts\"/>unprepare_request function</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It's possible for a queue to register an unprepare_request callback</span>", 
"<span class=\"comment\"> * which is invoked before the request is finally completed. The goal</span>", 
"<span class=\"comment\"> * of the function is to deallocate any data that was allocated in the</span>", 
"<span class=\"comment\"> * prepare_request callback.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#blk_queue_unprep_rq\">blk_queue_unprep_rq</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#unprep_rq_fn\">unprep_rq_fn</a> *<a class=\"id\" href=\"#ufn\">ufn</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#unprep_rq_fn\">unprep_rq_fn</a> = <a class=\"id\" href=\"#ufn\">ufn</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_queue_unprep_rq\">blk_queue_unprep_rq</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_queue_merge_bvec - set a merge_bvec function for queue</span>", 
"<span class=\"comment\"> * @q:<span class=\"ts\"/><span class=\"ts\"/>queue</span>", 
"<span class=\"comment\"> * @mbfn:<span class=\"ts\"/>merge_bvec_fn</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Usually queues have static limitations on the max sectors or segments that</span>", 
"<span class=\"comment\"> * we can put in a request. Stacking drivers may have some settings that</span>", 
"<span class=\"comment\"> * are dynamic, and thus we have to query the queue whether it is ok to</span>", 
"<span class=\"comment\"> * add a new bio_vec to a bio at a given offset or not. If the block device</span>", 
"<span class=\"comment\"> * has such limitations, it needs to register a merge_bvec_fn to control</span>", 
"<span class=\"comment\"> * the size of bio's sent to it. Note that a block device *must* allow a</span>", 
"<span class=\"comment\"> * single page to be added to an empty bio. The block device driver may want</span>", 
"<span class=\"comment\"> * to use the bio_split() function to deal with these bio's. By default</span>", 
"<span class=\"comment\"> * no merge_bvec_fn is defined for a queue, and only the fixed limits are</span>", 
"<span class=\"comment\"> * honored.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#blk_queue_merge_bvec\">blk_queue_merge_bvec</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#merge_bvec_fn\">merge_bvec_fn</a> *<a class=\"id\" href=\"#mbfn\">mbfn</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#merge_bvec_fn\">merge_bvec_fn</a> = <a class=\"id\" href=\"#mbfn\">mbfn</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_queue_merge_bvec\">blk_queue_merge_bvec</a>);", 
"", 
"void <a class=\"id\" href=\"#blk_queue_softirq_done\">blk_queue_softirq_done</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#softirq_done_fn\">softirq_done_fn</a> *<a class=\"id\" href=\"#fn\">fn</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#softirq_done_fn\">softirq_done_fn</a> = <a class=\"id\" href=\"#fn\">fn</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_queue_softirq_done\">blk_queue_softirq_done</a>);", 
"", 
"void <a class=\"id\" href=\"#blk_queue_rq_timeout\">blk_queue_rq_timeout</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, unsigned int <a class=\"id\" href=\"#timeout\">timeout</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#rq_timeout\">rq_timeout</a> = <a class=\"id\" href=\"#timeout\">timeout</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#blk_queue_rq_timeout\">blk_queue_rq_timeout</a>);", 
"", 
"void <a class=\"id\" href=\"#blk_queue_rq_timed_out\">blk_queue_rq_timed_out</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#rq_timed_out_fn\">rq_timed_out_fn</a> *<a class=\"id\" href=\"#fn\">fn</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#rq_timed_out_fn\">rq_timed_out_fn</a> = <a class=\"id\" href=\"#fn\">fn</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#blk_queue_rq_timed_out\">blk_queue_rq_timed_out</a>);", 
"", 
"void <a class=\"id\" href=\"#blk_queue_lld_busy\">blk_queue_lld_busy</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#lld_busy_fn\">lld_busy_fn</a> *<a class=\"id\" href=\"#fn\">fn</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#lld_busy_fn\">lld_busy_fn</a> = <a class=\"id\" href=\"#fn\">fn</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#blk_queue_lld_busy\">blk_queue_lld_busy</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_set_default_limits - reset limits to default values</span>", 
"<span class=\"comment\"> * @lim:  the queue_limits structure to reset</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *   Returns a queue_limit struct to its default state.  Can be used by</span>", 
"<span class=\"comment\"> *   stacking drivers like DM that stage table swaps and reuse an</span>", 
"<span class=\"comment\"> *   existing device queue.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#blk_set_default_limits\">blk_set_default_limits</a>(struct <a class=\"id\" href=\"#queue_limits\">queue_limits</a> *<a class=\"id\" href=\"#lim\">lim</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lim\">lim</a>-><a class=\"id\" href=\"#max_segments\">max_segments</a> = <a class=\"id\" href=\"#BLK_MAX_SEGMENTS\">BLK_MAX_SEGMENTS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lim\">lim</a>-><a class=\"id\" href=\"#seg_boundary_mask\">seg_boundary_mask</a> = <a class=\"id\" href=\"#BLK_SEG_BOUNDARY_MASK\">BLK_SEG_BOUNDARY_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lim\">lim</a>-><a class=\"id\" href=\"#max_segment_size\">max_segment_size</a> = <a class=\"id\" href=\"#BLK_MAX_SEGMENT_SIZE\">BLK_MAX_SEGMENT_SIZE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lim\">lim</a>-><a class=\"id\" href=\"#max_sectors\">max_sectors</a> = <a class=\"id\" href=\"#BLK_DEF_MAX_SECTORS\">BLK_DEF_MAX_SECTORS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lim\">lim</a>-><a class=\"id\" href=\"#max_hw_sectors\">max_hw_sectors</a> = <a class=\"id\" href=\"#INT_MAX\">INT_MAX</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lim\">lim</a>-><a class=\"id\" href=\"#max_discard_sectors\">max_discard_sectors</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lim\">lim</a>-><a class=\"id\" href=\"#discard_granularity\">discard_granularity</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lim\">lim</a>-><a class=\"id\" href=\"#discard_alignment\">discard_alignment</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lim\">lim</a>-><a class=\"id\" href=\"#discard_misaligned\">discard_misaligned</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lim\">lim</a>-><a class=\"id\" href=\"#discard_zeroes_data\">discard_zeroes_data</a> = -1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lim\">lim</a>-><a class=\"id\" href=\"#logical_block_size\">logical_block_size</a> = <a class=\"id\" href=\"#lim\">lim</a>-><a class=\"id\" href=\"#physical_block_size\">physical_block_size</a> = <a class=\"id\" href=\"#lim\">lim</a>-><a class=\"id\" href=\"#io_min\">io_min</a> = 512;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lim\">lim</a>-><a class=\"id\" href=\"#bounce_pfn\">bounce_pfn</a> = (unsigned long)(<a class=\"id\" href=\"#BLK_BOUNCE_ANY\">BLK_BOUNCE_ANY</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lim\">lim</a>-><a class=\"id\" href=\"#alignment_offset\">alignment_offset</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lim\">lim</a>-><a class=\"id\" href=\"#io_opt\">io_opt</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lim\">lim</a>-><a class=\"id\" href=\"#misaligned\">misaligned</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lim\">lim</a>-><a class=\"id\" href=\"#no_cluster\">no_cluster</a> = 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_set_default_limits\">blk_set_default_limits</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_queue_make_request - define an alternate make_request function for a device</span>", 
"<span class=\"comment\"> * @q:  the request queue for the device to be affected</span>", 
"<span class=\"comment\"> * @mfn: the alternate make_request function</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *    The normal way for &amp;struct bios to be passed to a device</span>", 
"<span class=\"comment\"> *    driver is for them to be collected into requests on a request</span>", 
"<span class=\"comment\"> *    queue, and then to allow the device driver to select requests</span>", 
"<span class=\"comment\"> *    off that queue when it is ready.  This works well for many block</span>", 
"<span class=\"comment\"> *    devices. However some block devices (typically virtual devices</span>", 
"<span class=\"comment\"> *    such as md or lvm) do not benefit from the processing on the</span>", 
"<span class=\"comment\"> *    request queue, and are served best by having the requests passed</span>", 
"<span class=\"comment\"> *    directly to them.  This can be achieved by providing a function</span>", 
"<span class=\"comment\"> *    to blk_queue_make_request().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Caveat:</span>", 
"<span class=\"comment\"> *    The driver that does this *must* be able to deal appropriately</span>", 
"<span class=\"comment\"> *    with buffers in \"highmemory\". This can be accomplished by either calling</span>", 
"<span class=\"comment\"> *    __bio_kmap_atomic() to get a temporary kernel mapping, or by calling</span>", 
"<span class=\"comment\"> *    blk_queue_bounce() to create a buffer in normal memory.</span>", 
"<span class=\"comment\"> **/</span>", 
"void <a class=\"id\" href=\"#blk_queue_make_request\">blk_queue_make_request</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#make_request_fn\">make_request_fn</a> *<a class=\"id\" href=\"#mfn\">mfn</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * set defaults</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#nr_requests\">nr_requests</a> = <a class=\"id\" href=\"#BLKDEV_MAX_RQ\">BLKDEV_MAX_RQ</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#make_request_fn\">make_request_fn</a> = <a class=\"id\" href=\"#mfn\">mfn</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_dma_alignment\">blk_queue_dma_alignment</a>(<a class=\"id\" href=\"#q\">q</a>, 511);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_congestion_threshold\">blk_queue_congestion_threshold</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#nr_batching\">nr_batching</a> = <a class=\"id\" href=\"#BLK_BATCH_REQ\">BLK_BATCH_REQ</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#unplug_thresh\">unplug_thresh</a> = 4;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* hmm */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#unplug_delay\">unplug_delay</a> = <a class=\"id\" href=\"#msecs_to_jiffies\">msecs_to_jiffies</a>(3);<span class=\"ts\"/><span class=\"comment\">/* 3 milliseconds */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#unplug_delay\">unplug_delay</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#unplug_delay\">unplug_delay</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#unplug_timer\">unplug_timer</a>.<a class=\"id\" href=\"#function\">function</a> = <a class=\"id\" href=\"#blk_unplug_timeout\">blk_unplug_timeout</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#unplug_timer\">unplug_timer</a>.<a class=\"id\" href=\"#data\">data</a> = (unsigned long)<a class=\"id\" href=\"#q\">q</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_set_default_limits\">blk_set_default_limits</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#limits\">limits</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_max_hw_sectors\">blk_queue_max_hw_sectors</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#BLK_SAFE_MAX_SECTORS\">BLK_SAFE_MAX_SECTORS</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the caller didn't supply a lock, fall back to our embedded</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * per-queue locks</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a> = &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#__queue_lock\">__queue_lock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * by default assume old behaviour and bounce for any highmem page</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_bounce_limit\">blk_queue_bounce_limit</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#BLK_BOUNCE_HIGH\">BLK_BOUNCE_HIGH</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_queue_make_request\">blk_queue_make_request</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_queue_bounce_limit - set bounce buffer limit for queue</span>", 
"<span class=\"comment\"> * @q: the request queue for the device</span>", 
"<span class=\"comment\"> * @dma_mask: the maximum address the device can handle</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *    Different hardware can have different requirements as to what pages</span>", 
"<span class=\"comment\"> *    it can do I/O directly to. A low level driver can call</span>", 
"<span class=\"comment\"> *    blk_queue_bounce_limit to have lower memory pages allocated as bounce</span>", 
"<span class=\"comment\"> *    buffers for doing I/O to pages residing above @dma_mask.</span>", 
"<span class=\"comment\"> **/</span>", 
"void <a class=\"id\" href=\"#blk_queue_bounce_limit\">blk_queue_bounce_limit</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#dma_mask\">dma_mask</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#b_pfn\">b_pfn</a> = <a class=\"id\" href=\"#dma_mask\">dma_mask</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#dma\">dma</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#bounce_gfp\">bounce_gfp</a> = <a class=\"id\" href=\"#GFP_NOIO\">GFP_NOIO</a>;", 
"#if <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> == 64", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Assume anything &lt;= 4GB can be handled by IOMMU.  Actually</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * some IOMMUs can handle everything, but I don't know of a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * way to test this here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#b_pfn\">b_pfn</a> &lt; (<a class=\"id\" href=\"#min_t\">min_t</a>(<a class=\"id\" href=\"#u64\">u64</a>, 0xffffffffUL, <a class=\"id\" href=\"#BLK_BOUNCE_HIGH\">BLK_BOUNCE_HIGH</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma\">dma</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#limits\">limits</a>.<a class=\"id\" href=\"#bounce_pfn\">bounce_pfn</a> = <a class=\"id\" href=\"#max_low_pfn\">max_low_pfn</a>;", 
"#else", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#b_pfn\">b_pfn</a> &lt; <a class=\"id\" href=\"#blk_max_low_pfn\">blk_max_low_pfn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma\">dma</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#limits\">limits</a>.<a class=\"id\" href=\"#bounce_pfn\">bounce_pfn</a> = <a class=\"id\" href=\"#b_pfn\">b_pfn</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dma\">dma</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_emergency_isa_pool\">init_emergency_isa_pool</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#bounce_gfp\">bounce_gfp</a> = <a class=\"id\" href=\"#GFP_NOIO\">GFP_NOIO</a> | <a class=\"id\" href=\"#GFP_DMA\">GFP_DMA</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#limits\">limits</a>.<a class=\"id\" href=\"#bounce_pfn\">bounce_pfn</a> = <a class=\"id\" href=\"#b_pfn\">b_pfn</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_queue_bounce_limit\">blk_queue_bounce_limit</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_queue_max_hw_sectors - set max sectors for a request for this queue</span>", 
"<span class=\"comment\"> * @q:  the request queue for the device</span>", 
"<span class=\"comment\"> * @max_hw_sectors:  max hardware sectors in the usual 512b unit</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *    Enables a low level driver to set a hard upper limit,</span>", 
"<span class=\"comment\"> *    max_hw_sectors, on the size of requests.  max_hw_sectors is set by</span>", 
"<span class=\"comment\"> *    the device driver based upon the combined capabilities of I/O</span>", 
"<span class=\"comment\"> *    controller and storage device.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *    max_sectors is a soft limit imposed by the block layer for</span>", 
"<span class=\"comment\"> *    filesystem type requests.  This value can be overridden on a</span>", 
"<span class=\"comment\"> *    per-device basis in /sys/block/&lt;device&gt;/queue/max_sectors_kb.</span>", 
"<span class=\"comment\"> *    The soft limit can not exceed max_hw_sectors.</span>", 
"<span class=\"comment\"> **/</span>", 
"void <a class=\"id\" href=\"#blk_queue_max_hw_sectors\">blk_queue_max_hw_sectors</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, unsigned int <a class=\"id\" href=\"#max_hw_sectors\">max_hw_sectors</a>)", 
"{", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#max_hw_sectors\">max_hw_sectors</a> << 9) &lt; <a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_hw_sectors\">max_hw_sectors</a> = 1 << (<a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a> - 9);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"%s: set to minimum %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#max_hw_sectors\">max_hw_sectors</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#limits\">limits</a>.<a class=\"id\" href=\"#max_hw_sectors\">max_hw_sectors</a> = <a class=\"id\" href=\"#max_hw_sectors\">max_hw_sectors</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#limits\">limits</a>.<a class=\"id\" href=\"#max_sectors\">max_sectors</a> = <a class=\"id\" href=\"#min_t\">min_t</a>(unsigned int, <a class=\"id\" href=\"#max_hw_sectors\">max_hw_sectors</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#BLK_DEF_MAX_SECTORS\">BLK_DEF_MAX_SECTORS</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_queue_max_hw_sectors\">blk_queue_max_hw_sectors</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_queue_max_discard_sectors - set max sectors for a single discard</span>", 
"<span class=\"comment\"> * @q:  the request queue for the device</span>", 
"<span class=\"comment\"> * @max_discard_sectors: maximum number of sectors to discard</span>", 
"<span class=\"comment\"> **/</span>", 
"void <a class=\"id\" href=\"#blk_queue_max_discard_sectors\">blk_queue_max_discard_sectors</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#max_discard_sectors\">max_discard_sectors</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#limits\">limits</a>.<a class=\"id\" href=\"#max_discard_sectors\">max_discard_sectors</a> = <a class=\"id\" href=\"#max_discard_sectors\">max_discard_sectors</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_queue_max_discard_sectors\">blk_queue_max_discard_sectors</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_queue_max_segments - set max hw segments for a request for this queue</span>", 
"<span class=\"comment\"> * @q:  the request queue for the device</span>", 
"<span class=\"comment\"> * @max_segments:  max number of segments</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *    Enables a low level driver to set an upper limit on the number of</span>", 
"<span class=\"comment\"> *    hw data segments in a request.</span>", 
"<span class=\"comment\"> **/</span>", 
"void <a class=\"id\" href=\"#blk_queue_max_segments\">blk_queue_max_segments</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, unsigned short <a class=\"id\" href=\"#max_segments\">max_segments</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#max_segments\">max_segments</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_segments\">max_segments</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"%s: set to minimum %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#max_segments\">max_segments</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#limits\">limits</a>.<a class=\"id\" href=\"#max_segments\">max_segments</a> = <a class=\"id\" href=\"#max_segments\">max_segments</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_queue_max_segments\">blk_queue_max_segments</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_queue_max_segment_size - set max segment size for blk_rq_map_sg</span>", 
"<span class=\"comment\"> * @q:  the request queue for the device</span>", 
"<span class=\"comment\"> * @max_size:  max size of segment in bytes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *    Enables a low level driver to set an upper limit on the size of a</span>", 
"<span class=\"comment\"> *    coalesced segment</span>", 
"<span class=\"comment\"> **/</span>", 
"void <a class=\"id\" href=\"#blk_queue_max_segment_size\">blk_queue_max_segment_size</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, unsigned int <a class=\"id\" href=\"#max_size\">max_size</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#max_size\">max_size</a> &lt; <a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_size\">max_size</a> = <a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"%s: set to minimum %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#max_size\">max_size</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#limits\">limits</a>.<a class=\"id\" href=\"#max_segment_size\">max_segment_size</a> = <a class=\"id\" href=\"#max_size\">max_size</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_queue_max_segment_size\">blk_queue_max_segment_size</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_queue_logical_block_size - set logical block size for the queue</span>", 
"<span class=\"comment\"> * @q:  the request queue for the device</span>", 
"<span class=\"comment\"> * @size:  the logical block size, in bytes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *   This should be set to the lowest possible block size that the</span>", 
"<span class=\"comment\"> *   storage device can address.  The default of 512 covers most</span>", 
"<span class=\"comment\"> *   hardware.</span>", 
"<span class=\"comment\"> **/</span>", 
"void <a class=\"id\" href=\"#blk_queue_logical_block_size\">blk_queue_logical_block_size</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, unsigned short <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#limits\">limits</a>.<a class=\"id\" href=\"#logical_block_size\">logical_block_size</a> = <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#limits\">limits</a>.<a class=\"id\" href=\"#physical_block_size\">physical_block_size</a> &lt; <a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#limits\">limits</a>.<a class=\"id\" href=\"#physical_block_size\">physical_block_size</a> = <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#limits\">limits</a>.<a class=\"id\" href=\"#io_min\">io_min</a> &lt; <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#limits\">limits</a>.<a class=\"id\" href=\"#physical_block_size\">physical_block_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#limits\">limits</a>.<a class=\"id\" href=\"#io_min\">io_min</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#limits\">limits</a>.<a class=\"id\" href=\"#physical_block_size\">physical_block_size</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_queue_logical_block_size\">blk_queue_logical_block_size</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_queue_physical_block_size - set physical block size for the queue</span>", 
"<span class=\"comment\"> * @q:  the request queue for the device</span>", 
"<span class=\"comment\"> * @size:  the physical block size, in bytes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *   This should be set to the lowest possible sector size that the</span>", 
"<span class=\"comment\"> *   hardware can operate on without reverting to read-modify-write</span>", 
"<span class=\"comment\"> *   operations.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#blk_queue_physical_block_size\">blk_queue_physical_block_size</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, unsigned short <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#limits\">limits</a>.<a class=\"id\" href=\"#physical_block_size\">physical_block_size</a> = <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#limits\">limits</a>.<a class=\"id\" href=\"#physical_block_size\">physical_block_size</a> &lt; <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#limits\">limits</a>.<a class=\"id\" href=\"#logical_block_size\">logical_block_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#limits\">limits</a>.<a class=\"id\" href=\"#physical_block_size\">physical_block_size</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#limits\">limits</a>.<a class=\"id\" href=\"#logical_block_size\">logical_block_size</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#limits\">limits</a>.<a class=\"id\" href=\"#io_min\">io_min</a> &lt; <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#limits\">limits</a>.<a class=\"id\" href=\"#physical_block_size\">physical_block_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#limits\">limits</a>.<a class=\"id\" href=\"#io_min\">io_min</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#limits\">limits</a>.<a class=\"id\" href=\"#physical_block_size\">physical_block_size</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_queue_physical_block_size\">blk_queue_physical_block_size</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_queue_alignment_offset - set physical block alignment offset</span>", 
"<span class=\"comment\"> * @q:<span class=\"ts\"/>the request queue for the device</span>", 
"<span class=\"comment\"> * @offset: alignment offset in bytes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *   Some devices are naturally misaligned to compensate for things like</span>", 
"<span class=\"comment\"> *   the legacy DOS partition table 63-sector offset.  Low-level drivers</span>", 
"<span class=\"comment\"> *   should call this function for devices whose first sector is not</span>", 
"<span class=\"comment\"> *   naturally aligned.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#blk_queue_alignment_offset\">blk_queue_alignment_offset</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, unsigned int <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#limits\">limits</a>.<a class=\"id\" href=\"#alignment_offset\">alignment_offset</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> &amp; (<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#limits\">limits</a>.<a class=\"id\" href=\"#physical_block_size\">physical_block_size</a> - 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#limits\">limits</a>.<a class=\"id\" href=\"#misaligned\">misaligned</a> = 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_queue_alignment_offset\">blk_queue_alignment_offset</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_limits_io_min - set minimum request size for a device</span>", 
"<span class=\"comment\"> * @limits: the queue limits</span>", 
"<span class=\"comment\"> * @min:  smallest I/O size in bytes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *   Some devices have an internal block size bigger than the reported</span>", 
"<span class=\"comment\"> *   hardware sector size.  This function can be used to signal the</span>", 
"<span class=\"comment\"> *   smallest I/O the device can perform without incurring a performance</span>", 
"<span class=\"comment\"> *   penalty.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#blk_limits_io_min\">blk_limits_io_min</a>(struct <a class=\"id\" href=\"#queue_limits\">queue_limits</a> *<a class=\"id\" href=\"#limits\">limits</a>, unsigned int <a class=\"id\" href=\"#min\">min</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#limits\">limits</a>-><a class=\"id\" href=\"#io_min\">io_min</a> = <a class=\"id\" href=\"#min\">min</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#limits\">limits</a>-><a class=\"id\" href=\"#io_min\">io_min</a> &lt; <a class=\"id\" href=\"#limits\">limits</a>-><a class=\"id\" href=\"#logical_block_size\">logical_block_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#limits\">limits</a>-><a class=\"id\" href=\"#io_min\">io_min</a> = <a class=\"id\" href=\"#limits\">limits</a>-><a class=\"id\" href=\"#logical_block_size\">logical_block_size</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#limits\">limits</a>-><a class=\"id\" href=\"#io_min\">io_min</a> &lt; <a class=\"id\" href=\"#limits\">limits</a>-><a class=\"id\" href=\"#physical_block_size\">physical_block_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#limits\">limits</a>-><a class=\"id\" href=\"#io_min\">io_min</a> = <a class=\"id\" href=\"#limits\">limits</a>-><a class=\"id\" href=\"#physical_block_size\">physical_block_size</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_limits_io_min\">blk_limits_io_min</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_queue_io_min - set minimum request size for the queue</span>", 
"<span class=\"comment\"> * @q:<span class=\"ts\"/>the request queue for the device</span>", 
"<span class=\"comment\"> * @min:  smallest I/O size in bytes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *   Storage devices may report a granularity or preferred minimum I/O</span>", 
"<span class=\"comment\"> *   size which is the smallest request the device can perform without</span>", 
"<span class=\"comment\"> *   incurring a performance penalty.  For disk drives this is often the</span>", 
"<span class=\"comment\"> *   physical block size.  For RAID arrays it is often the stripe chunk</span>", 
"<span class=\"comment\"> *   size.  A properly aligned multiple of minimum_io_size is the</span>", 
"<span class=\"comment\"> *   preferred request size for workloads where a high number of I/O</span>", 
"<span class=\"comment\"> *   operations is desired.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#blk_queue_io_min\">blk_queue_io_min</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, unsigned int <a class=\"id\" href=\"#min\">min</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_limits_io_min\">blk_limits_io_min</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#limits\">limits</a>, <a class=\"id\" href=\"#min\">min</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_queue_io_min\">blk_queue_io_min</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_limits_io_opt - set optimal request size for a device</span>", 
"<span class=\"comment\"> * @limits: the queue limits</span>", 
"<span class=\"comment\"> * @opt:  smallest I/O size in bytes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *   Storage devices may report an optimal I/O size, which is the</span>", 
"<span class=\"comment\"> *   device's preferred unit for sustained I/O.  This is rarely reported</span>", 
"<span class=\"comment\"> *   for disk drives.  For RAID arrays it is usually the stripe width or</span>", 
"<span class=\"comment\"> *   the internal track size.  A properly aligned multiple of</span>", 
"<span class=\"comment\"> *   optimal_io_size is the preferred request size for workloads where</span>", 
"<span class=\"comment\"> *   sustained throughput is desired.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#blk_limits_io_opt\">blk_limits_io_opt</a>(struct <a class=\"id\" href=\"#queue_limits\">queue_limits</a> *<a class=\"id\" href=\"#limits\">limits</a>, unsigned int <a class=\"id\" href=\"#opt\">opt</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#limits\">limits</a>-><a class=\"id\" href=\"#io_opt\">io_opt</a> = <a class=\"id\" href=\"#opt\">opt</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_limits_io_opt\">blk_limits_io_opt</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_queue_io_opt - set optimal request size for the queue</span>", 
"<span class=\"comment\"> * @q:<span class=\"ts\"/>the request queue for the device</span>", 
"<span class=\"comment\"> * @opt:  optimal request size in bytes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *   Storage devices may report an optimal I/O size, which is the</span>", 
"<span class=\"comment\"> *   device's preferred unit for sustained I/O.  This is rarely reported</span>", 
"<span class=\"comment\"> *   for disk drives.  For RAID arrays it is usually the stripe width or</span>", 
"<span class=\"comment\"> *   the internal track size.  A properly aligned multiple of</span>", 
"<span class=\"comment\"> *   optimal_io_size is the preferred request size for workloads where</span>", 
"<span class=\"comment\"> *   sustained throughput is desired.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#blk_queue_io_opt\">blk_queue_io_opt</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, unsigned int <a class=\"id\" href=\"#opt\">opt</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_limits_io_opt\">blk_limits_io_opt</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#limits\">limits</a>, <a class=\"id\" href=\"#opt\">opt</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_queue_io_opt\">blk_queue_io_opt</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Returns the minimum that is _not_ zero, unless both are zero.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#min_not_zero\">min_not_zero</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#r\">r</a>) (<a class=\"id\" href=\"#l\">l</a> == 0) ? <a class=\"id\" href=\"#r\">r</a> : ((<a class=\"id\" href=\"#r\">r</a> == 0) ? <a class=\"id\" href=\"#l\">l</a> : <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#r\">r</a>))", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_queue_stack_limits - inherit underlying queue limits for stacked drivers</span>", 
"<span class=\"comment\"> * @t:<span class=\"ts\"/>the stacking driver (top)</span>", 
"<span class=\"comment\"> * @b:  the underlying device (bottom)</span>", 
"<span class=\"comment\"> **/</span>", 
"void <a class=\"id\" href=\"#blk_queue_stack_limits\">blk_queue_stack_limits</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#t\">t</a>, struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#b\">b</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_stack_limits\">blk_stack_limits</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#limits\">limits</a>, &amp;<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#limits\">limits</a>, 0);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(1);", 
"<span class=\"ts\"/>else if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#QUEUE_FLAG_CLUSTER\">QUEUE_FLAG_CLUSTER</a>, &amp;<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#queue_flags\">queue_flags</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#queue_flag_clear\">queue_flag_clear</a>(<a class=\"id\" href=\"#QUEUE_FLAG_CLUSTER\">QUEUE_FLAG_CLUSTER</a>, <a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_queue_stack_limits\">blk_queue_stack_limits</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_stack_limits - adjust queue_limits for stacked devices</span>", 
"<span class=\"comment\"> * @t:<span class=\"ts\"/>the stacking driver limits (top device)</span>", 
"<span class=\"comment\"> * @b:  the underlying queue limits (bottom, component device)</span>", 
"<span class=\"comment\"> * @start:  first data sector within component device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *    This function is used by stacking drivers like MD and DM to ensure</span>", 
"<span class=\"comment\"> *    that all component devices have compatible block sizes and</span>", 
"<span class=\"comment\"> *    alignments.  The stacking driver must provide a queue_limits</span>", 
"<span class=\"comment\"> *    struct (top) and then iteratively call the stacking function for</span>", 
"<span class=\"comment\"> *    all component (bottom) devices.  The stacking function will</span>", 
"<span class=\"comment\"> *    attempt to combine the values and ensure proper alignment.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *    Returns 0 if the top and bottom queue_limits are compatible.  The</span>", 
"<span class=\"comment\"> *    top device's block sizes and alignment offsets may be adjusted to</span>", 
"<span class=\"comment\"> *    ensure alignment with the bottom device. If no compatible sizes</span>", 
"<span class=\"comment\"> *    and alignments exist, -1 is returned and the resulting top</span>", 
"<span class=\"comment\"> *    queue_limits will have the misaligned flag set to indicate that</span>", 
"<span class=\"comment\"> *    the alignment_offset is undefined.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#blk_stack_limits\">blk_stack_limits</a>(struct <a class=\"id\" href=\"#queue_limits\">queue_limits</a> *<a class=\"id\" href=\"#t\">t</a>, struct <a class=\"id\" href=\"#queue_limits\">queue_limits</a> *<a class=\"id\" href=\"#b\">b</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#start\">start</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#top\">top</a>, <a class=\"id\" href=\"#bottom\">bottom</a>, <a class=\"id\" href=\"#alignment\">alignment</a>, <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#max_sectors\">max_sectors</a> = <a class=\"id\" href=\"#min_not_zero\">min_not_zero</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#max_sectors\">max_sectors</a>, <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#max_sectors\">max_sectors</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#max_hw_sectors\">max_hw_sectors</a> = <a class=\"id\" href=\"#min_not_zero\">min_not_zero</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#max_hw_sectors\">max_hw_sectors</a>, <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#max_hw_sectors\">max_hw_sectors</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#bounce_pfn\">bounce_pfn</a> = <a class=\"id\" href=\"#min_not_zero\">min_not_zero</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#bounce_pfn\">bounce_pfn</a>, <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#bounce_pfn\">bounce_pfn</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#seg_boundary_mask\">seg_boundary_mask</a> = <a class=\"id\" href=\"#min_not_zero\">min_not_zero</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#seg_boundary_mask\">seg_boundary_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#seg_boundary_mask\">seg_boundary_mask</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#max_segments\">max_segments</a> = <a class=\"id\" href=\"#min_not_zero\">min_not_zero</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#max_segments\">max_segments</a>, <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#max_segments\">max_segments</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#max_segment_size\">max_segment_size</a> = <a class=\"id\" href=\"#min_not_zero\">min_not_zero</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#max_segment_size\">max_segment_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#max_segment_size\">max_segment_size</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#misaligned\">misaligned</a> |= <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#misaligned\">misaligned</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alignment\">alignment</a> = <a class=\"id\" href=\"#queue_limit_alignment_offset\">queue_limit_alignment_offset</a>(<a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#start\">start</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Bottom device has different alignment.  Check that it is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * compatible with the current top alignment.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#alignment_offset\">alignment_offset</a> != <a class=\"id\" href=\"#alignment\">alignment</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#top\">top</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#physical_block_size\">physical_block_size</a>, <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#io_min\">io_min</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>+ <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#alignment_offset\">alignment_offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bottom\">bottom</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#physical_block_size\">physical_block_size</a>, <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#io_min\">io_min</a>) + <a class=\"id\" href=\"#alignment\">alignment</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Verify that top and bottom intervals line up */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#top\">top</a>, <a class=\"id\" href=\"#bottom\">bottom</a>) &amp; (<a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#top\">top</a>, <a class=\"id\" href=\"#bottom\">bottom</a>) - 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#misaligned\">misaligned</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#logical_block_size\">logical_block_size</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#logical_block_size\">logical_block_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#logical_block_size\">logical_block_size</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#physical_block_size\">physical_block_size</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#physical_block_size\">physical_block_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#physical_block_size\">physical_block_size</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#io_min\">io_min</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#io_min\">io_min</a>, <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#io_min\">io_min</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#io_opt\">io_opt</a> = <a class=\"id\" href=\"#lcm\">lcm</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#io_opt\">io_opt</a>, <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#io_opt\">io_opt</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#no_cluster\">no_cluster</a> |= <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#no_cluster\">no_cluster</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#discard_zeroes_data\">discard_zeroes_data</a> &= <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#discard_zeroes_data\">discard_zeroes_data</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Physical block size a multiple of the logical block size? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#physical_block_size\">physical_block_size</a> &amp; (<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#logical_block_size\">logical_block_size</a> - 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#physical_block_size\">physical_block_size</a> = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#logical_block_size\">logical_block_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#misaligned\">misaligned</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Minimum I/O a multiple of the physical block size? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#io_min\">io_min</a> &amp; (<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#physical_block_size\">physical_block_size</a> - 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#io_min\">io_min</a> = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#physical_block_size\">physical_block_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#misaligned\">misaligned</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Optimal I/O a multiple of the physical block size? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#io_opt\">io_opt</a> &amp; (<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#physical_block_size\">physical_block_size</a> - 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#io_opt\">io_opt</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#misaligned\">misaligned</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Find lowest common alignment_offset */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#alignment_offset\">alignment_offset</a> = <a class=\"id\" href=\"#lcm\">lcm</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#alignment_offset\">alignment_offset</a>, <a class=\"id\" href=\"#alignment\">alignment</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>&amp; (<a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#physical_block_size\">physical_block_size</a>, <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#io_min\">io_min</a>) - 1);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Verify that new alignment_offset is on a logical block boundary */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#alignment_offset\">alignment_offset</a> &amp; (<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#logical_block_size\">logical_block_size</a> - 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#misaligned\">misaligned</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Discard alignment and granularity */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#discard_granularity\">discard_granularity</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alignment\">alignment</a> = <a class=\"id\" href=\"#queue_limit_discard_alignment\">queue_limit_discard_alignment</a>(<a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#start\">start</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#discard_granularity\">discard_granularity</a> != 0 &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#discard_alignment\">discard_alignment</a> != <a class=\"id\" href=\"#alignment\">alignment</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#top\">top</a> = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#discard_granularity\">discard_granularity</a> + <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#discard_alignment\">discard_alignment</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bottom\">bottom</a> = <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#discard_granularity\">discard_granularity</a> + <a class=\"id\" href=\"#alignment\">alignment</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Verify that top and bottom intervals line up */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#top\">top</a>, <a class=\"id\" href=\"#bottom\">bottom</a>) &amp; (<a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#top\">top</a>, <a class=\"id\" href=\"#bottom\">bottom</a>) - 1))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#discard_misaligned\">discard_misaligned</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#max_discard_sectors\">max_discard_sectors</a> = <a class=\"id\" href=\"#min_not_zero\">min_not_zero</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#max_discard_sectors\">max_discard_sectors</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#max_discard_sectors\">max_discard_sectors</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#discard_granularity\">discard_granularity</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#discard_granularity\">discard_granularity</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#discard_granularity\">discard_granularity</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#discard_alignment\">discard_alignment</a> = <a class=\"id\" href=\"#lcm\">lcm</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#discard_alignment\">discard_alignment</a>, <a class=\"id\" href=\"#alignment\">alignment</a>) &amp;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#discard_granularity\">discard_granularity</a> - 1);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_stack_limits\">blk_stack_limits</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bdev_stack_limits - adjust queue limits for stacked drivers</span>", 
"<span class=\"comment\"> * @t:<span class=\"ts\"/>the stacking driver limits (top device)</span>", 
"<span class=\"comment\"> * @bdev:  the component block_device (bottom)</span>", 
"<span class=\"comment\"> * @start:  first data sector within component device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *    Merges queue limits for a top device and a block_device.  Returns</span>", 
"<span class=\"comment\"> *    0 if alignment didn't change.  Returns -1 if adding the bottom</span>", 
"<span class=\"comment\"> *    device caused misalignment.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#bdev_stack_limits\">bdev_stack_limits</a>(struct <a class=\"id\" href=\"#queue_limits\">queue_limits</a> *<a class=\"id\" href=\"#t\">t</a>, struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#start\">start</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#bq\">bq</a> = <a class=\"id\" href=\"#bdev_get_queue\">bdev_get_queue</a>(<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> += <a class=\"id\" href=\"#get_start_sect\">get_start_sect</a>(<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#blk_stack_limits\">blk_stack_limits</a>(<a class=\"id\" href=\"#t\">t</a>, &amp;<a class=\"id\" href=\"#bq\">bq</a>-><a class=\"id\" href=\"#limits\">limits</a>, <a class=\"id\" href=\"#start\">start</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bdev_stack_limits\">bdev_stack_limits</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * disk_stack_limits - adjust queue limits for stacked drivers</span>", 
"<span class=\"comment\"> * @disk:  MD/DM gendisk (top)</span>", 
"<span class=\"comment\"> * @bdev:  the underlying block device (bottom)</span>", 
"<span class=\"comment\"> * @offset:  offset to beginning of data within component device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *    Merges the limits for a top level gendisk and a bottom level</span>", 
"<span class=\"comment\"> *    block_device.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#disk_stack_limits\">disk_stack_limits</a>(struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a>, struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#queue\">queue</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#b\">b</a> = <a class=\"id\" href=\"#bdev_get_queue\">bdev_get_queue</a>(<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bdev_stack_limits\">bdev_stack_limits</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#limits\">limits</a>, <a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#offset\">offset</a> >> 9) &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#top\">top</a>[<a class=\"id\" href=\"#BDEVNAME_SIZE\">BDEVNAME_SIZE</a>], <a class=\"id\" href=\"#bottom\">bottom</a>[<a class=\"id\" href=\"#BDEVNAME_SIZE\">BDEVNAME_SIZE</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disk_name\">disk_name</a>(<a class=\"id\" href=\"#disk\">disk</a>, 0, <a class=\"id\" href=\"#top\">top</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdevname\">bdevname</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#bottom\">bottom</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a> \"%s: Warning: Device %s is misaligned\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#top\">top</a>, <a class=\"id\" href=\"#bottom\">bottom</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(1);", 
"<span class=\"ts\"/>else if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#QUEUE_FLAG_CLUSTER\">QUEUE_FLAG_CLUSTER</a>, &amp;<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#queue_flags\">queue_flags</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#QUEUE_FLAG_CLUSTER\">QUEUE_FLAG_CLUSTER</a>, &amp;<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#queue_flags\">queue_flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#queue_flag_clear\">queue_flag_clear</a>(<a class=\"id\" href=\"#QUEUE_FLAG_CLUSTER\">QUEUE_FLAG_CLUSTER</a>, <a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#disk_stack_limits\">disk_stack_limits</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_queue_dma_pad - set pad mask</span>", 
"<span class=\"comment\"> * @q:     the request queue for the device</span>", 
"<span class=\"comment\"> * @mask:  pad mask</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Set dma pad mask.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Appending pad buffer to a request modifies the last entry of a</span>", 
"<span class=\"comment\"> * scatter list such that it includes the pad buffer.</span>", 
"<span class=\"comment\"> **/</span>", 
"void <a class=\"id\" href=\"#blk_queue_dma_pad\">blk_queue_dma_pad</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, unsigned int <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#dma_pad_mask\">dma_pad_mask</a> = <a class=\"id\" href=\"#mask\">mask</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_queue_dma_pad\">blk_queue_dma_pad</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_queue_update_dma_pad - update pad mask</span>", 
"<span class=\"comment\"> * @q:     the request queue for the device</span>", 
"<span class=\"comment\"> * @mask:  pad mask</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Update dma pad mask.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Appending pad buffer to a request modifies the last entry of a</span>", 
"<span class=\"comment\"> * scatter list such that it includes the pad buffer.</span>", 
"<span class=\"comment\"> **/</span>", 
"void <a class=\"id\" href=\"#blk_queue_update_dma_pad\">blk_queue_update_dma_pad</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, unsigned int <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mask\">mask</a> &gt; <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#dma_pad_mask\">dma_pad_mask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#dma_pad_mask\">dma_pad_mask</a> = <a class=\"id\" href=\"#mask\">mask</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_queue_update_dma_pad\">blk_queue_update_dma_pad</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_queue_dma_drain - Set up a drain buffer for excess dma.</span>", 
"<span class=\"comment\"> * @q:  the request queue for the device</span>", 
"<span class=\"comment\"> * @dma_drain_needed: fn which returns non-zero if drain is necessary</span>", 
"<span class=\"comment\"> * @buf:<span class=\"ts\"/>physically contiguous buffer</span>", 
"<span class=\"comment\"> * @size:<span class=\"ts\"/>size of the buffer in bytes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Some devices have excess DMA problems and can't simply discard (or</span>", 
"<span class=\"comment\"> * zero fill) the unwanted piece of the transfer.  They have to have a</span>", 
"<span class=\"comment\"> * real area of memory to transfer it into.  The use case for this is</span>", 
"<span class=\"comment\"> * ATAPI devices in DMA mode.  If the packet command causes a transfer</span>", 
"<span class=\"comment\"> * bigger than the transfer size some HBAs will lock up if there</span>", 
"<span class=\"comment\"> * aren't DMA elements to contain the excess transfer.  What this API</span>", 
"<span class=\"comment\"> * does is adjust the queue so that the buf is always appended</span>", 
"<span class=\"comment\"> * silently to the scatterlist.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note: This routine adjusts max_hw_segments to make room for appending</span>", 
"<span class=\"comment\"> * the drain buffer.  If you call blk_queue_max_segments() after calling</span>", 
"<span class=\"comment\"> * this routine, you must set the limit to one fewer than your device</span>", 
"<span class=\"comment\"> * can support otherwise there won't be room for the drain buffer.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#blk_queue_dma_drain\">blk_queue_dma_drain</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#dma_drain_needed_fn\">dma_drain_needed_fn</a> *<a class=\"id\" href=\"#dma_drain_needed\">dma_drain_needed</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       void *<a class=\"id\" href=\"#buf\">buf</a>, unsigned int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#queue_max_segments\">queue_max_segments</a>(<a class=\"id\" href=\"#q\">q</a>) &lt; 2)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* make room for appending the drain */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_max_segments\">blk_queue_max_segments</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#queue_max_segments\">queue_max_segments</a>(<a class=\"id\" href=\"#q\">q</a>) - 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#dma_drain_needed\">dma_drain_needed</a> = <a class=\"id\" href=\"#dma_drain_needed\">dma_drain_needed</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#dma_drain_buffer\">dma_drain_buffer</a> = <a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#dma_drain_size\">dma_drain_size</a> = <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#blk_queue_dma_drain\">blk_queue_dma_drain</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_queue_segment_boundary - set boundary rules for segment merging</span>", 
"<span class=\"comment\"> * @q:  the request queue for the device</span>", 
"<span class=\"comment\"> * @mask:  the memory boundary mask</span>", 
"<span class=\"comment\"> **/</span>", 
"void <a class=\"id\" href=\"#blk_queue_segment_boundary\">blk_queue_segment_boundary</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, unsigned long <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mask\">mask</a> &lt; <a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a> - 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"%s: set to minimum %lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#limits\">limits</a>.<a class=\"id\" href=\"#seg_boundary_mask\">seg_boundary_mask</a> = <a class=\"id\" href=\"#mask\">mask</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_queue_segment_boundary\">blk_queue_segment_boundary</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_queue_dma_alignment - set dma length and memory alignment</span>", 
"<span class=\"comment\"> * @q:     the request queue for the device</span>", 
"<span class=\"comment\"> * @mask:  alignment mask</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * description:</span>", 
"<span class=\"comment\"> *    set required memory and length alignment for direct dma transactions.</span>", 
"<span class=\"comment\"> *    this is used when building direct io requests for the queue.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> **/</span>", 
"void <a class=\"id\" href=\"#blk_queue_dma_alignment\">blk_queue_dma_alignment</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, int <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#dma_alignment\">dma_alignment</a> = <a class=\"id\" href=\"#mask\">mask</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_queue_dma_alignment\">blk_queue_dma_alignment</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_queue_update_dma_alignment - update dma length and memory alignment</span>", 
"<span class=\"comment\"> * @q:     the request queue for the device</span>", 
"<span class=\"comment\"> * @mask:  alignment mask</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * description:</span>", 
"<span class=\"comment\"> *    update required memory and length alignment for direct dma transactions.</span>", 
"<span class=\"comment\"> *    If the requested alignment is larger than the current alignment, then</span>", 
"<span class=\"comment\"> *    the current queue alignment is updated to the new value, otherwise it</span>", 
"<span class=\"comment\"> *    is left alone.  The design of this is to allow multiple objects</span>", 
"<span class=\"comment\"> *    (driver, device, transport etc) to set their respective</span>", 
"<span class=\"comment\"> *    alignments without having them interfere.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> **/</span>", 
"void <a class=\"id\" href=\"#blk_queue_update_dma_alignment\">blk_queue_update_dma_alignment</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, int <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#mask\">mask</a> &gt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mask\">mask</a> &gt; <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#dma_alignment\">dma_alignment</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#dma_alignment\">dma_alignment</a> = <a class=\"id\" href=\"#mask\">mask</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_queue_update_dma_alignment\">blk_queue_update_dma_alignment</a>);", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#blk_settings_init\">blk_settings_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_max_low_pfn\">blk_max_low_pfn</a> = <a class=\"id\" href=\"#max_low_pfn\">max_low_pfn</a> - 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_max_pfn\">blk_max_pfn</a> = <a class=\"id\" href=\"#max_pfn\">max_pfn</a> - 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#subsys_initcall\">subsys_initcall</a>(<a class=\"id\" href=\"#blk_settings_init\">blk_settings_init</a>);", 
];
xr_frag_insert('l/00/1d690df1c8736273d157c92227abea208c397b.xr', __xr_tmp);
