var __xr_tmp = [
"<span class=\"comment\">/* vi: set sw = 4 ts = 4: */</span>", 
"<span class=\"comment\">/*<span class=\"ts\"/>Small bzip2 deflate implementation, by Rob Landley (rob@landley.net).</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"><span class=\"ts\"/>Based on bzip2 decompression code by Julian R Seward (jseward@acm.org),</span>", 
"<span class=\"comment\"><span class=\"ts\"/>which also acknowledges contributions by Mike Burrows, David Wheeler,</span>", 
"<span class=\"comment\"><span class=\"ts\"/>Peter Fenwick, Alistair Moffat, Radford Neal, Ian H. Witten,</span>", 
"<span class=\"comment\"><span class=\"ts\"/>Robert Sedgewick, and Jon L. Bentley.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"><span class=\"ts\"/>This code is licensed under the LGPLv2:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>LGPL (http://www.gnu.org/copyleft/lgpl.html</span>", 
"<span class=\"comment\">*/</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/>Size and speed optimizations by Manuel Novoa III  (mjn3@codepoet.org).</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"><span class=\"ts\"/>More efficient reading of Huffman codes, a streamlined read_bunzip()</span>", 
"<span class=\"comment\"><span class=\"ts\"/>function, and various other tweaks.  In (limited) tests, approximately</span>", 
"<span class=\"comment\"><span class=\"ts\"/>20% faster than bzcat on x86 and about 10% faster on arm.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"><span class=\"ts\"/>Note that about 2/3 of the time is spent in read_unzip() reversing</span>", 
"<span class=\"comment\"><span class=\"ts\"/>the Burrows-Wheeler transformation.  Much of that time is delay</span>", 
"<span class=\"comment\"><span class=\"ts\"/>resulting from cache misses.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"><span class=\"ts\"/>I would ask that anyone benefiting from this work, especially those</span>", 
"<span class=\"comment\"><span class=\"ts\"/>using it in commercial products, consider making a donation to my local</span>", 
"<span class=\"comment\"><span class=\"ts\"/>non-profit hospice organization in the name of the woman I loved, who</span>", 
"<span class=\"comment\"><span class=\"ts\"/>passed away Feb. 12, 2003.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>In memory of Toni W. Hagan</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>Hospice of Acadiana, Inc.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>2600 Johnston St., Suite 200</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>Lafayette, LA 70503-3240</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>Phone (337) 232-1234 or 1-800-738-2226</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>Fax   (337) 232-1297</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>http://www.hospiceacadiana.com/</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"><span class=\"ts\"/>Manuel</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/>Made it fit for running in Linux Kernel by Alain Knaff (alain@knaff.lu)</span>", 
"<span class=\"comment\">*/</span>", 
"", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#STATIC\">STATIC</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PREBOOT\">PREBOOT</a>", 
"#else", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#decompress\">decompress</a>/<a class=\"id\" href=\"#bunzip2\">bunzip2</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* STATIC */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#decompress\">decompress</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#INT_MAX\">INT_MAX</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INT_MAX\">INT_MAX</a> 0x7fffffff", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* Constants for Huffman coding */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_GROUPS\">MAX_GROUPS</a><span class=\"ts\"/><span class=\"ts\"/>6", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GROUP_SIZE\">GROUP_SIZE</a>   <span class=\"ts\"/><span class=\"ts\"/>50<span class=\"ts\"/><span class=\"comment\">/* 64 would have been more efficient */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_HUFCODE_BITS\">MAX_HUFCODE_BITS</a> <span class=\"ts\"/>20<span class=\"ts\"/><span class=\"comment\">/* Longest Huffman code allowed */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_SYMBOLS\">MAX_SYMBOLS</a> <span class=\"ts\"/><span class=\"ts\"/>258<span class=\"ts\"/><span class=\"comment\">/* 256 literals + RUNA + RUNB */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SYMBOL_RUNA\">SYMBOL_RUNA</a><span class=\"ts\"/><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SYMBOL_RUNB\">SYMBOL_RUNB</a><span class=\"ts\"/><span class=\"ts\"/>1", 
"", 
"<span class=\"comment\">/* Status return values */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RETVAL_OK\">RETVAL_OK</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RETVAL_LAST_BLOCK\">RETVAL_LAST_BLOCK</a><span class=\"ts\"/><span class=\"ts\"/>(-1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RETVAL_NOT_BZIP_DATA\">RETVAL_NOT_BZIP_DATA</a><span class=\"ts\"/><span class=\"ts\"/>(-2)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RETVAL_UNEXPECTED_INPUT_EOF\">RETVAL_UNEXPECTED_INPUT_EOF</a><span class=\"ts\"/>(-3)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RETVAL_UNEXPECTED_OUTPUT_EOF\">RETVAL_UNEXPECTED_OUTPUT_EOF</a><span class=\"ts\"/>(-4)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RETVAL_DATA_ERROR\">RETVAL_DATA_ERROR</a><span class=\"ts\"/><span class=\"ts\"/>(-5)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RETVAL_OUT_OF_MEMORY\">RETVAL_OUT_OF_MEMORY</a><span class=\"ts\"/><span class=\"ts\"/>(-6)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RETVAL_OBSOLETE_INPUT\">RETVAL_OBSOLETE_INPUT</a><span class=\"ts\"/><span class=\"ts\"/>(-7)", 
"", 
"<span class=\"comment\">/* Other housekeeping constants */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BZIP2_IOBUF_SIZE\">BZIP2_IOBUF_SIZE</a><span class=\"ts\"/><span class=\"ts\"/>4096", 
"", 
"<span class=\"comment\">/* This is what we know about each Huffman coding group */</span>", 
"struct <a class=\"id\" href=\"#group_data\">group_data</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* We have an extra slot at the end of limit[] for a sentinal value. */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#limit\">limit</a>[<a class=\"id\" href=\"#MAX_HUFCODE_BITS\">MAX_HUFCODE_BITS</a>+1];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#base\">base</a>[<a class=\"id\" href=\"#MAX_HUFCODE_BITS\">MAX_HUFCODE_BITS</a>];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#permute\">permute</a>[<a class=\"id\" href=\"#MAX_SYMBOLS\">MAX_SYMBOLS</a>];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#minLen\">minLen</a>, <a class=\"id\" href=\"#maxLen\">maxLen</a>;", 
"};", 
"", 
"<span class=\"comment\">/* Structure holding all the housekeeping data, including IO buffers and</span>", 
"<span class=\"comment\">   memory that persists between calls to bunzip */</span>", 
"struct <a class=\"id\" href=\"#bunzip_data\">bunzip_data</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* State for interrupting output loop */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#writeCopies\">writeCopies</a>, <a class=\"id\" href=\"#writePos\">writePos</a>, <a class=\"id\" href=\"#writeRunCountdown\">writeRunCountdown</a>, <a class=\"id\" href=\"#writeCount\">writeCount</a>, <a class=\"id\" href=\"#writeCurrent\">writeCurrent</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* I/O tracking data (file handles, buffers, positions, etc.) */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#fill\">fill</a>)(void*, unsigned int);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#inbufCount\">inbufCount</a>, <a class=\"id\" href=\"#inbufPos\">inbufPos</a> <span class=\"comment\">/*, outbufPos*/</span>;", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#inbuf\">inbuf</a> <span class=\"comment\">/*,*outbuf*/</span>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#inbufBitCount\">inbufBitCount</a>, <a class=\"id\" href=\"#inbufBits\">inbufBits</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* The CRC values stored in the block header and calculated from the</span>", 
"<span class=\"comment\"><span class=\"ts\"/>data */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#crc32Table\">crc32Table</a>[256], <a class=\"id\" href=\"#headerCRC\">headerCRC</a>, <a class=\"id\" href=\"#totalCRC\">totalCRC</a>, <a class=\"id\" href=\"#writeCRC\">writeCRC</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Intermediate buffer and its size (in bytes) */</span>", 
"<span class=\"ts\"/>unsigned int *<a class=\"id\" href=\"#dbuf\">dbuf</a>, <a class=\"id\" href=\"#dbufSize\">dbufSize</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* These things are a bit too big to go on the stack */</span>", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#selectors\">selectors</a>[32768];<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* nSelectors = 15 bits */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#group_data\">group_data</a> <a class=\"id\" href=\"#groups\">groups</a>[<a class=\"id\" href=\"#MAX_GROUPS\">MAX_GROUPS</a>];<span class=\"ts\"/><span class=\"comment\">/* Huffman coding tables */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#io_error\">io_error</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* non-zero if we have IO error */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#byteCount\">byteCount</a>[256];", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#symToByte\">symToByte</a>[256], <a class=\"id\" href=\"#mtfSymbol\">mtfSymbol</a>[256];", 
"};", 
"", 
"", 
"<span class=\"comment\">/* Return the next nnn bits of input.  All reads from the compressed input</span>", 
"<span class=\"comment\">   are done through this function.  All reads are big endian */</span>", 
"static unsigned int <a class=\"id\" href=\"#INIT\">INIT</a> <a class=\"id\" href=\"#get_bits\">get_bits</a>(struct <a class=\"id\" href=\"#bunzip_data\">bunzip_data</a> *<a class=\"id\" href=\"#bd\">bd</a>, char <a class=\"id\" href=\"#bits_wanted\">bits_wanted</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#bits\">bits</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If we need to get more data from the byte buffer, do so.</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   (Loop getting one byte at a time to enforce endianness and avoid</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   unaligned access.) */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#inbufBitCount\">inbufBitCount</a> &lt; <a class=\"id\" href=\"#bits_wanted\">bits_wanted</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If we need to read more data from file into byte buffer, do</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   so */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#inbufPos\">inbufPos</a> == <a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#inbufCount\">inbufCount</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#io_error\">io_error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#inbufCount\">inbufCount</a> = <a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#fill\">fill</a>(<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#inbuf\">inbuf</a>, <a class=\"id\" href=\"#BZIP2_IOBUF_SIZE\">BZIP2_IOBUF_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#inbufCount\">inbufCount</a> <= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#io_error\">io_error</a> = <a class=\"id\" href=\"#RETVAL_UNEXPECTED_INPUT_EOF\">RETVAL_UNEXPECTED_INPUT_EOF</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#inbufPos\">inbufPos</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Avoid 32-bit overflow (dump bit buffer to top of output) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#inbufBitCount\">inbufBitCount</a> >= 24) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bits\">bits</a> = <a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#inbufBits\">inbufBits</a>&amp;((1 << <a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#inbufBitCount\">inbufBitCount</a>)-1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bits_wanted\">bits_wanted</a> -= <a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#inbufBitCount\">inbufBitCount</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bits\">bits</a> <<= <a class=\"id\" href=\"#bits_wanted\">bits_wanted</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#inbufBitCount\">inbufBitCount</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Grab next 8 bits of input from buffer. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#inbufBits\">inbufBits</a> = (<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#inbufBits\">inbufBits</a> << 8)|<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#inbuf\">inbuf</a>[<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#inbufPos\">inbufPos</a>++];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#inbufBitCount\">inbufBitCount</a> += 8;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Calculate result */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#inbufBitCount\">inbufBitCount</a> -= <a class=\"id\" href=\"#bits_wanted\">bits_wanted</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bits\">bits</a> |= (<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#inbufBits\">inbufBits</a> >> <a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#inbufBitCount\">inbufBitCount</a>)&amp;((1 << <a class=\"id\" href=\"#bits_wanted\">bits_wanted</a>)-1);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bits\">bits</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Unpacks the next block and sets up for the inverse burrows-wheeler step. */</span>", 
"", 
"static int <a class=\"id\" href=\"#INIT\">INIT</a> <a class=\"id\" href=\"#get_next_block\">get_next_block</a>(struct <a class=\"id\" href=\"#bunzip_data\">bunzip_data</a> *<a class=\"id\" href=\"#bd\">bd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#group_data\">group_data</a> *<a class=\"id\" href=\"#hufGroup\">hufGroup</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int *<a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int *<a class=\"id\" href=\"#limit\">limit</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#dbufCount\">dbufCount</a>, <a class=\"id\" href=\"#nextSym\">nextSym</a>, <a class=\"id\" href=\"#dbufSize\">dbufSize</a>, <a class=\"id\" href=\"#groupCount\">groupCount</a>, <a class=\"id\" href=\"#selector\">selector</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#k\">k</a>, <a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#runPos\">runPos</a>, <a class=\"id\" href=\"#symCount\">symCount</a>, <a class=\"id\" href=\"#symTotal\">symTotal</a>, <a class=\"id\" href=\"#nSelectors\">nSelectors</a>, *<a class=\"id\" href=\"#byteCount\">byteCount</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#uc\">uc</a>, *<a class=\"id\" href=\"#symToByte\">symToByte</a>, *<a class=\"id\" href=\"#mtfSymbol\">mtfSymbol</a>, *<a class=\"id\" href=\"#selectors\">selectors</a>;", 
"<span class=\"ts\"/>unsigned int *<a class=\"id\" href=\"#dbuf\">dbuf</a>, <a class=\"id\" href=\"#origPtr\">origPtr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dbuf\">dbuf</a> = <a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#dbuf\">dbuf</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dbufSize\">dbufSize</a> = <a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#dbufSize\">dbufSize</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#selectors\">selectors</a> = <a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#selectors\">selectors</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#byteCount\">byteCount</a> = <a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#byteCount\">byteCount</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#symToByte\">symToByte</a> = <a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#symToByte\">symToByte</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mtfSymbol\">mtfSymbol</a> = <a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#mtfSymbol\">mtfSymbol</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Read in header signature and CRC, then validate signature.</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   (last block signature means CRC is for whole file, return now) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#get_bits\">get_bits</a>(<a class=\"id\" href=\"#bd\">bd</a>, 24);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#j\">j</a> = <a class=\"id\" href=\"#get_bits\">get_bits</a>(<a class=\"id\" href=\"#bd\">bd</a>, 24);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#headerCRC\">headerCRC</a> = <a class=\"id\" href=\"#get_bits\">get_bits</a>(<a class=\"id\" href=\"#bd\">bd</a>, 32);", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#i\">i</a> == 0x177245) && (<a class=\"id\" href=\"#j\">j</a> == 0x385090))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#RETVAL_LAST_BLOCK\">RETVAL_LAST_BLOCK</a>;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#i\">i</a> != 0x314159) || (<a class=\"id\" href=\"#j\">j</a> != 0x265359))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#RETVAL_NOT_BZIP_DATA\">RETVAL_NOT_BZIP_DATA</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* We can add support for blockRandomised if anybody complains.</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   There was some code for this in busybox 1.0.0-pre3, but nobody ever</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   noticed that it didn't actually work. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#get_bits\">get_bits</a>(<a class=\"id\" href=\"#bd\">bd</a>, 1))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#RETVAL_OBSOLETE_INPUT\">RETVAL_OBSOLETE_INPUT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#origPtr\">origPtr</a> = <a class=\"id\" href=\"#get_bits\">get_bits</a>(<a class=\"id\" href=\"#bd\">bd</a>, 24);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#origPtr\">origPtr</a> &gt; <a class=\"id\" href=\"#dbufSize\">dbufSize</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#RETVAL_DATA_ERROR\">RETVAL_DATA_ERROR</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* mapping table: if some byte values are never used (encoding things</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   like ascii text), the compression code removes the gaps to have fewer</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   symbols to deal with, and writes a sparse bitfield indicating which</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   values were present.  We make a translation table to convert the</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   symbols back to the corresponding bytes. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#get_bits\">get_bits</a>(<a class=\"id\" href=\"#bd\">bd</a>, 16);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#symTotal\">symTotal</a> = 0;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 16; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a>&amp;(1 << (15-<a class=\"id\" href=\"#i\">i</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k\">k</a> = <a class=\"id\" href=\"#get_bits\">get_bits</a>(<a class=\"id\" href=\"#bd\">bd</a>, 16);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; 16; <a class=\"id\" href=\"#j\">j</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#k\">k</a>&amp;(1 << (15-<a class=\"id\" href=\"#j\">j</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#symToByte\">symToByte</a>[<a class=\"id\" href=\"#symTotal\">symTotal</a>++] = (16*<a class=\"id\" href=\"#i\">i</a>)+<a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* How many different Huffman coding groups does this block use? */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#groupCount\">groupCount</a> = <a class=\"id\" href=\"#get_bits\">get_bits</a>(<a class=\"id\" href=\"#bd\">bd</a>, 3);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#groupCount\">groupCount</a> &lt; 2 || <a class=\"id\" href=\"#groupCount\">groupCount</a> &gt; <a class=\"id\" href=\"#MAX_GROUPS\">MAX_GROUPS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#RETVAL_DATA_ERROR\">RETVAL_DATA_ERROR</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* nSelectors: Every GROUP_SIZE many symbols we select a new</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   Huffman coding group.  Read in the group selector list,</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   which is stored as MTF encoded bit runs.  (MTF = Move To</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   Front, as each value is used it's moved to the start of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   list.) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nSelectors\">nSelectors</a> = <a class=\"id\" href=\"#get_bits\">get_bits</a>(<a class=\"id\" href=\"#bd\">bd</a>, 15);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#nSelectors\">nSelectors</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#RETVAL_DATA_ERROR\">RETVAL_DATA_ERROR</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#groupCount\">groupCount</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mtfSymbol\">mtfSymbol</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nSelectors\">nSelectors</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Get next value */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#get_bits\">get_bits</a>(<a class=\"id\" href=\"#bd\">bd</a>, 1); <a class=\"id\" href=\"#j\">j</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#j\">j</a> >= <a class=\"id\" href=\"#groupCount\">groupCount</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#RETVAL_DATA_ERROR\">RETVAL_DATA_ERROR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Decode MTF to get the next selector */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uc\">uc</a> = <a class=\"id\" href=\"#mtfSymbol\">mtfSymbol</a>[<a class=\"id\" href=\"#j\">j</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>for (; <a class=\"id\" href=\"#j\">j</a>; <a class=\"id\" href=\"#j\">j</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mtfSymbol\">mtfSymbol</a>[<a class=\"id\" href=\"#j\">j</a>] = <a class=\"id\" href=\"#mtfSymbol\">mtfSymbol</a>[<a class=\"id\" href=\"#j\">j</a>-1];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mtfSymbol\">mtfSymbol</a>[0] = <a class=\"id\" href=\"#selectors\">selectors</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#uc\">uc</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Read the Huffman coding tables for each group, which code</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   for symTotal literal symbols, plus two run symbols (RUNA,</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   RUNB) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#symCount\">symCount</a> = <a class=\"id\" href=\"#symTotal\">symTotal</a>+2;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#groupCount\">groupCount</a>; <a class=\"id\" href=\"#j\">j</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#length\">length</a>[<a class=\"id\" href=\"#MAX_SYMBOLS\">MAX_SYMBOLS</a>], <a class=\"id\" href=\"#temp\">temp</a>[<a class=\"id\" href=\"#MAX_HUFCODE_BITS\">MAX_HUFCODE_BITS</a>+1];", 
"<span class=\"ts\"/><span class=\"ts\"/>int<span class=\"ts\"/><a class=\"id\" href=\"#minLen\">minLen</a>,<span class=\"ts\"/><a class=\"id\" href=\"#maxLen\">maxLen</a>, <a class=\"id\" href=\"#pp\">pp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Read Huffman code lengths for each symbol.  They're</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   stored in a way similar to mtf; record a starting</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   value for the first symbol, and an offset from the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   previous value for everys symbol after that.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   (Subtracting 1 before the loop and then adding it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   back at the end is an optimization that makes the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   test inside the loop simpler: symbol length 0</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   becomes negative, so an unsigned inequality catches</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   it.) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#get_bits\">get_bits</a>(<a class=\"id\" href=\"#bd\">bd</a>, 5)-1;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#symCount\">symCount</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (((unsigned)<a class=\"id\" href=\"#t\">t</a>) &gt; (<a class=\"id\" href=\"#MAX_HUFCODE_BITS\">MAX_HUFCODE_BITS</a>-1))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#RETVAL_DATA_ERROR\">RETVAL_DATA_ERROR</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If first bit is 0, stop.  Else</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   second bit indicates whether to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   increment or decrement the value.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   Optimization: grab 2 bits and unget</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   the second if the first was 0. */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k\">k</a> = <a class=\"id\" href=\"#get_bits\">get_bits</a>(<a class=\"id\" href=\"#bd\">bd</a>, 2);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#k\">k</a> &lt; 2) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#inbufBitCount\">inbufBitCount</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Add one if second bit 1, else</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * subtract 1.  Avoids if/else */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a> += (((<a class=\"id\" href=\"#k\">k</a>+1)&amp;2)-1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Correct for the initial -1, to get the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * final symbol length */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#t\">t</a>+1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Find largest and smallest lengths in this group */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#minLen\">minLen</a> = <a class=\"id\" href=\"#maxLen\">maxLen</a> = <a class=\"id\" href=\"#length\">length</a>[0];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#symCount\">symCount</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#length\">length</a>[<a class=\"id\" href=\"#i\">i</a>] &gt; <a class=\"id\" href=\"#maxLen\">maxLen</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#maxLen\">maxLen</a> = <a class=\"id\" href=\"#length\">length</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#length\">length</a>[<a class=\"id\" href=\"#i\">i</a>] &lt; <a class=\"id\" href=\"#minLen\">minLen</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#minLen\">minLen</a> = <a class=\"id\" href=\"#length\">length</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Calculate permute[], base[], and limit[] tables from</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * length[].</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * permute[] is the lookup table for converting</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Huffman coded symbols into decoded symbols.  base[]</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is the amount to subtract from the value of a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Huffman symbol of a given length when using</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * permute[].</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * limit[] indicates the largest numerical value a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * symbol with a given number of bits can have.  This</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is how the Huffman codes can vary in length: each</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * code with a value &gt; limit[length] needs another</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * bit.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hufGroup\">hufGroup</a> = <a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#groups\">groups</a>+<a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hufGroup\">hufGroup</a>-><a class=\"id\" href=\"#minLen\">minLen</a> = <a class=\"id\" href=\"#minLen\">minLen</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hufGroup\">hufGroup</a>-><a class=\"id\" href=\"#maxLen\">maxLen</a> = <a class=\"id\" href=\"#maxLen\">maxLen</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Note that minLen can't be smaller than 1, so we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   adjust the base and limit array pointers so we're</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   not always wasting the first entry.  We do this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   again when using them (during symbol decoding).*/</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#hufGroup\">hufGroup</a>-><a class=\"id\" href=\"#base\">base</a>-1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a> = <a class=\"id\" href=\"#hufGroup\">hufGroup</a>-><a class=\"id\" href=\"#limit\">limit</a>-1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Calculate permute[].  Concurrently, initialize</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * temp[] and limit[]. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pp\">pp</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#minLen\">minLen</a>; <a class=\"id\" href=\"#i\">i</a> <= <a class=\"id\" href=\"#maxLen\">maxLen</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#temp\">temp</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#limit\">limit</a>[<a class=\"id\" href=\"#i\">i</a>] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#t\">t</a> = 0; <a class=\"id\" href=\"#t\">t</a> &lt; <a class=\"id\" href=\"#symCount\">symCount</a>; <a class=\"id\" href=\"#t\">t</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#length\">length</a>[<a class=\"id\" href=\"#t\">t</a>] == <a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hufGroup\">hufGroup</a>-><a class=\"id\" href=\"#permute\">permute</a>[<a class=\"id\" href=\"#pp\">pp</a>++] = <a class=\"id\" href=\"#t\">t</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Count symbols coded for at each bit length */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#symCount\">symCount</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#temp\">temp</a>[<a class=\"id\" href=\"#length\">length</a>[<a class=\"id\" href=\"#i\">i</a>]]++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Calculate limit[] (the largest symbol-coding value</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *at each bit length, which is (previous limit &lt;&lt;</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *1)+symbols at this level), and base[] (number of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *symbols to ignore at each bit length, which is limit</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *minus the cumulative count of symbols coded for</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *already). */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pp\">pp</a> = <a class=\"id\" href=\"#t\">t</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#minLen\">minLen</a>; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#maxLen\">maxLen</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pp\">pp</a> += <a class=\"id\" href=\"#temp\">temp</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We read the largest possible symbol size</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   and then unget bits after determining how</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   many we need, and those extra bits could be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   set to anything.  (They're noise from</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   future symbols.)  At each level we're</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   really only interested in the first few</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   bits, so here we set all the trailing</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   to-be-ignored bits to 1 so they don't</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   affect the value &gt; limit[length]</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   comparison. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a>[<a class=\"id\" href=\"#i\">i</a>] = (<a class=\"id\" href=\"#pp\">pp</a> << (<a class=\"id\" href=\"#maxLen\">maxLen</a> - <a class=\"id\" href=\"#i\">i</a>)) - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pp\">pp</a> <<= 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a>[<a class=\"id\" href=\"#i\">i</a>+1] = <a class=\"id\" href=\"#pp\">pp</a>-(<a class=\"id\" href=\"#t\">t</a> += <a class=\"id\" href=\"#temp\">temp</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a>[<a class=\"id\" href=\"#maxLen\">maxLen</a>+1] = <a class=\"id\" href=\"#INT_MAX\">INT_MAX</a>; <span class=\"comment\">/* Sentinal value for</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    * reading next sym. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a>[<a class=\"id\" href=\"#maxLen\">maxLen</a>] = <a class=\"id\" href=\"#pp\">pp</a>+<a class=\"id\" href=\"#temp\">temp</a>[<a class=\"id\" href=\"#maxLen\">maxLen</a>]-1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a>[<a class=\"id\" href=\"#minLen\">minLen</a>] = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* We've finished reading and digesting the block header.  Now</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   read this block's Huffman coded symbols from the file and</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   undo the Huffman coding and run length encoding, saving the</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   result into dbuf[dbufCount++] = uc */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Initialize symbol occurrence counters and symbol Move To</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Front table */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 256; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#byteCount\">byteCount</a>[<a class=\"id\" href=\"#i\">i</a>] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mtfSymbol\">mtfSymbol</a>[<a class=\"id\" href=\"#i\">i</a>] = (unsigned char)<a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Loop through compressed symbols. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#runPos\">runPos</a> = <a class=\"id\" href=\"#dbufCount\">dbufCount</a> = <a class=\"id\" href=\"#symCount\">symCount</a> = <a class=\"id\" href=\"#selector\">selector</a> = 0;", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Determine which Huffman coding group to use. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#symCount\">symCount</a>--)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#symCount\">symCount</a> = <a class=\"id\" href=\"#GROUP_SIZE\">GROUP_SIZE</a>-1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#selector\">selector</a> >= <a class=\"id\" href=\"#nSelectors\">nSelectors</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#RETVAL_DATA_ERROR\">RETVAL_DATA_ERROR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hufGroup\">hufGroup</a> = <a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#groups\">groups</a>+<a class=\"id\" href=\"#selectors\">selectors</a>[<a class=\"id\" href=\"#selector\">selector</a>++];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#hufGroup\">hufGroup</a>-><a class=\"id\" href=\"#base\">base</a>-1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a> = <a class=\"id\" href=\"#hufGroup\">hufGroup</a>-><a class=\"id\" href=\"#limit\">limit</a>-1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Read next Huffman-coded symbol. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Note: It is far cheaper to read maxLen bits and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   back up than it is to read minLen bits and then an</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   additional bit at a time, testing as we go.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   Because there is a trailing last block (with file</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   CRC), there is no danger of the overread causing an</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   unexpected EOF for a valid compressed file.  As a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   further optimization, we do the read inline</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   (falling back to a call to get_bits if the buffer</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   runs dry).  The following (up to got_huff_bits:) is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   equivalent to j = get_bits(bd, hufGroup-&gt;maxLen);</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#inbufBitCount\">inbufBitCount</a> &lt; <a class=\"id\" href=\"#hufGroup\">hufGroup</a>-><a class=\"id\" href=\"#maxLen\">maxLen</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#inbufPos\">inbufPos</a> == <a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#inbufCount\">inbufCount</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#j\">j</a> = <a class=\"id\" href=\"#get_bits\">get_bits</a>(<a class=\"id\" href=\"#bd\">bd</a>, <a class=\"id\" href=\"#hufGroup\">hufGroup</a>-><a class=\"id\" href=\"#maxLen\">maxLen</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#got_huff_bits\">got_huff_bits</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#inbufBits\">inbufBits</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#inbufBits\">inbufBits</a> << 8)|<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#inbuf\">inbuf</a>[<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#inbufPos\">inbufPos</a>++];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#inbufBitCount\">inbufBitCount</a> += 8;", 
"<span class=\"ts\"/><span class=\"ts\"/>};", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#inbufBitCount\">inbufBitCount</a> -= <a class=\"id\" href=\"#hufGroup\">hufGroup</a>-><a class=\"id\" href=\"#maxLen\">maxLen</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#j\">j</a> = (<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#inbufBits\">inbufBits</a> >> <a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#inbufBitCount\">inbufBitCount</a>)&amp;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>((1 << <a class=\"id\" href=\"#hufGroup\">hufGroup</a>-><a class=\"id\" href=\"#maxLen\">maxLen</a>)-1);", 
"<a class=\"id\" href=\"#got_huff_bits\">got_huff_bits</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Figure how how many bits are in next symbol and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * unget extras */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#hufGroup\">hufGroup</a>-><a class=\"id\" href=\"#minLen\">minLen</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#j\">j</a> &gt; <a class=\"id\" href=\"#limit\">limit</a>[<a class=\"id\" href=\"#i\">i</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#inbufBitCount\">inbufBitCount</a> += (<a class=\"id\" href=\"#hufGroup\">hufGroup</a>-><a class=\"id\" href=\"#maxLen\">maxLen</a> - <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Huffman decode value to get nextSym (with bounds checking) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#i\">i</a> &gt; <a class=\"id\" href=\"#hufGroup\">hufGroup</a>-><a class=\"id\" href=\"#maxLen\">maxLen</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>|| (((unsigned)(<a class=\"id\" href=\"#j\">j</a> = (<a class=\"id\" href=\"#j\">j</a>>>(<a class=\"id\" href=\"#hufGroup\">hufGroup</a>-><a class=\"id\" href=\"#maxLen\">maxLen</a>-<a class=\"id\" href=\"#i\">i</a>))-<a class=\"id\" href=\"#base\">base</a>[<a class=\"id\" href=\"#i\">i</a>]))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>>= <a class=\"id\" href=\"#MAX_SYMBOLS\">MAX_SYMBOLS</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#RETVAL_DATA_ERROR\">RETVAL_DATA_ERROR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nextSym\">nextSym</a> = <a class=\"id\" href=\"#hufGroup\">hufGroup</a>-><a class=\"id\" href=\"#permute\">permute</a>[<a class=\"id\" href=\"#j\">j</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We have now decoded the symbol, which indicates</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   either a new literal byte, or a repeated run of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   most recent literal byte.  First, check if nextSym</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   indicates a repeated run, and if so loop collecting</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   how many times to repeat the last literal. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (((unsigned)<a class=\"id\" href=\"#nextSym\">nextSym</a>) <= <a class=\"id\" href=\"#SYMBOL_RUNB\">SYMBOL_RUNB</a>) { <span class=\"comment\">/* RUNA or RUNB */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If this is the start of a new run, zero out</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * counter */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#runPos\">runPos</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#runPos\">runPos</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Neat trick that saves 1 symbol: instead of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   or-ing 0 or 1 at each bit position, add 1</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   or 2 instead.  For example, 1011 is 1 &lt;&lt; 0</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   + 1 &lt;&lt; 1 + 2 &lt;&lt; 2.  1010 is 2 &lt;&lt; 0 + 2 &lt;&lt; 1</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   + 1 &lt;&lt; 2.  You can make any bit pattern</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   that way using 1 less symbol than the basic</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   or 0/1 method (except all bits 0, which</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   would use no symbols, but a run of length 0</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   doesn't mean anything in this context).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   Thus space is saved. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a> += (<a class=\"id\" href=\"#runPos\">runPos</a> << <a class=\"id\" href=\"#nextSym\">nextSym</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* +runPos if RUNA; +2*runPos if RUNB */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#runPos\">runPos</a> <<= 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* When we hit the first non-run symbol after a run,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   we now know how many times to repeat the last</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   literal, so append that many copies to our buffer</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   of decoded symbols (dbuf) now.  (The last literal</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   used is the one at the head of the mtfSymbol</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   array.) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#runPos\">runPos</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#runPos\">runPos</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dbufCount\">dbufCount</a>+<a class=\"id\" href=\"#t\">t</a> >= <a class=\"id\" href=\"#dbufSize\">dbufSize</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#RETVAL_DATA_ERROR\">RETVAL_DATA_ERROR</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uc\">uc</a> = <a class=\"id\" href=\"#symToByte\">symToByte</a>[<a class=\"id\" href=\"#mtfSymbol\">mtfSymbol</a>[0]];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#byteCount\">byteCount</a>[<a class=\"id\" href=\"#uc\">uc</a>] += <a class=\"id\" href=\"#t\">t</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#t\">t</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dbuf\">dbuf</a>[<a class=\"id\" href=\"#dbufCount\">dbufCount</a>++] = <a class=\"id\" href=\"#uc\">uc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Is this the terminating symbol? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nextSym\">nextSym</a> &gt; <a class=\"id\" href=\"#symTotal\">symTotal</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* At this point, nextSym indicates a new literal</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   character.  Subtract one to get the position in the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   MTF array at which this literal is currently to be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   found.  (Note that the result can't be -1 or 0,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   because 0 and 1 are RUNA and RUNB.  But another</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   instance of the first symbol in the mtf array,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   position 0, would have been handled as part of a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   run above.  Therefore 1 unused mtf position minus 2</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   non-literal nextSym values equals -1.) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dbufCount\">dbufCount</a> >= <a class=\"id\" href=\"#dbufSize\">dbufSize</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#RETVAL_DATA_ERROR\">RETVAL_DATA_ERROR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#nextSym\">nextSym</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uc\">uc</a> = <a class=\"id\" href=\"#mtfSymbol\">mtfSymbol</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Adjust the MTF array.  Since we typically expect to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *move only a small number of symbols, and are bound</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *by 256 in any case, using memmove here would</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *typically be bigger and slower due to function call</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *overhead and other assorted setup costs. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mtfSymbol\">mtfSymbol</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#mtfSymbol\">mtfSymbol</a>[<a class=\"id\" href=\"#i\">i</a>-1];", 
"<span class=\"ts\"/><span class=\"ts\"/>} while (--<a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mtfSymbol\">mtfSymbol</a>[0] = <a class=\"id\" href=\"#uc\">uc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uc\">uc</a> = <a class=\"id\" href=\"#symToByte\">symToByte</a>[<a class=\"id\" href=\"#uc\">uc</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We have our literal byte.  Save it into dbuf. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#byteCount\">byteCount</a>[<a class=\"id\" href=\"#uc\">uc</a>]++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dbuf\">dbuf</a>[<a class=\"id\" href=\"#dbufCount\">dbufCount</a>++] = (unsigned int)<a class=\"id\" href=\"#uc\">uc</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* At this point, we've read all the Huffman-coded symbols</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   (and repeated runs) for this block from the input stream,</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   and decoded them into the intermediate buffer.  There are</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   dbufCount many decoded bytes in dbuf[].  Now undo the</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   Burrows-Wheeler transform on dbuf.  See</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   http://dogma.net/markn/articles/bwt/bwt.htm</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* Turn byteCount into cumulative occurrence counts of 0 to n-1. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#j\">j</a> = 0;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 256; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k\">k</a> = <a class=\"id\" href=\"#j\">j</a>+<a class=\"id\" href=\"#byteCount\">byteCount</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#byteCount\">byteCount</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#j\">j</a> = <a class=\"id\" href=\"#k\">k</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Figure out what order dbuf would be in if we sorted it. */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#dbufCount\">dbufCount</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uc\">uc</a> = (unsigned char)(<a class=\"id\" href=\"#dbuf\">dbuf</a>[<a class=\"id\" href=\"#i\">i</a>] &amp; 0xff);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dbuf\">dbuf</a>[<a class=\"id\" href=\"#byteCount\">byteCount</a>[<a class=\"id\" href=\"#uc\">uc</a>]] |= (<a class=\"id\" href=\"#i\">i</a> << 8);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#byteCount\">byteCount</a>[<a class=\"id\" href=\"#uc\">uc</a>]++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Decode first byte by hand to initialize \"previous\" byte.</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   Note that it doesn't get output, and if the first three</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   characters are identical it doesn't qualify as a run (hence</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   writeRunCountdown = 5). */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dbufCount\">dbufCount</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#origPtr\">origPtr</a> >= <a class=\"id\" href=\"#dbufCount\">dbufCount</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#RETVAL_DATA_ERROR\">RETVAL_DATA_ERROR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#writePos\">writePos</a> = <a class=\"id\" href=\"#dbuf\">dbuf</a>[<a class=\"id\" href=\"#origPtr\">origPtr</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#writeCurrent\">writeCurrent</a> = (unsigned char)(<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#writePos\">writePos</a>&amp;0xff);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#writePos\">writePos</a> >>= 8;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#writeRunCountdown\">writeRunCountdown</a> = 5;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#writeCount\">writeCount</a> = <a class=\"id\" href=\"#dbufCount\">dbufCount</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#RETVAL_OK\">RETVAL_OK</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Undo burrows-wheeler transform on intermediate buffer to produce output.</span>", 
"<span class=\"comment\">   If start_bunzip was initialized with out_fd =-1, then up to len bytes of</span>", 
"<span class=\"comment\">   data are written to outbuf.  Return value is number of bytes written or</span>", 
"<span class=\"comment\">   error (all errors are negative numbers).  If out_fd!=-1, outbuf and len</span>", 
"<span class=\"comment\">   are ignored, data is written to out_fd and return is RETVAL_OK or error.</span>", 
"<span class=\"comment\">*/</span>", 
"", 
"static int <a class=\"id\" href=\"#INIT\">INIT</a> <a class=\"id\" href=\"#read_bunzip\">read_bunzip</a>(struct <a class=\"id\" href=\"#bunzip_data\">bunzip_data</a> *<a class=\"id\" href=\"#bd\">bd</a>, char *<a class=\"id\" href=\"#outbuf\">outbuf</a>, int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>const unsigned int *<a class=\"id\" href=\"#dbuf\">dbuf</a>;", 
];
xr_frag_insert('l/00/afa180f1cfec141f5c45c25f845f0a69aa8769.xr', __xr_tmp);
