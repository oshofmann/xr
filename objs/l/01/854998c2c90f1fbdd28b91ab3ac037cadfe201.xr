var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_ASM_GENERIC_DIV64_H\">_ASM_GENERIC_DIV64_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_ASM_GENERIC_DIV64_H\">_ASM_GENERIC_DIV64_H</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (C) 2003 Bernardo Innocenti &lt;bernie@develer.com&gt;</span>", 
"<span class=\"comment\"> * Based on former asm-ppc/div64.h and asm-m68knommu/div64.h</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The semantics of do_div() are:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * uint32_t do_div(uint64_t *n, uint32_t base)</span>", 
"<span class=\"comment\"> * {</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>uint32_t remainder = *n % base;</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>*n = *n / base;</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>return remainder;</span>", 
"<span class=\"comment\"> * }</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE: macro parameter n is evaluated multiple times,</span>", 
"<span class=\"comment\"> *       beware of side effects!</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#compiler\">compiler</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#if <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> == 64", 
"", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#n\">n</a>,<a class=\"id\" href=\"#base\">base</a>) ({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#__base\">__base</a> = (<a class=\"id\" href=\"#base\">base</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#__rem\">__rem</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__rem\">__rem</a> = ((<a class=\"id\" href=\"#uint64_t\">uint64_t</a>)(<a class=\"id\" href=\"#n\">n</a>)) % <a class=\"id\" href=\"#__base\">__base</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) = ((<a class=\"id\" href=\"#uint64_t\">uint64_t</a>)(<a class=\"id\" href=\"#n\">n</a>)) / <a class=\"id\" href=\"#__base\">__base</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__rem\">__rem</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
" })", 
"", 
"#<a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> == 32", 
"", 
"extern <a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#__div64_32\">__div64_32</a>(<a class=\"id\" href=\"#uint64_t\">uint64_t</a> *<a class=\"id\" href=\"#dividend\">dividend</a>, <a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#divisor\">divisor</a>);", 
"", 
"<span class=\"comment\">/* The unnecessary pointer compare is there</span>", 
"<span class=\"comment\"> * to check for type safety (n must be 64bit)</span>", 
"<span class=\"comment\"> */</span>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#n\">n</a>,<a class=\"id\" href=\"#base\">base</a>) ({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#__base\">__base</a> = (<a class=\"id\" href=\"#base\">base</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#__rem\">__rem</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(void)(((<a class=\"id\" href=\"#typeof\">typeof</a>((<a class=\"id\" href=\"#n\">n</a>)) *)0) == ((<a class=\"id\" href=\"#uint64_t\">uint64_t</a> *)0));<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(((<a class=\"id\" href=\"#n\">n</a>) >> 32) == 0)) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__rem\">__rem</a> = (<a class=\"id\" href=\"#uint32_t\">uint32_t</a>)(<a class=\"id\" href=\"#n\">n</a>) % <a class=\"id\" href=\"#__base\">__base</a>;<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#n\">n</a>) = (<a class=\"id\" href=\"#uint32_t\">uint32_t</a>)(<a class=\"id\" href=\"#n\">n</a>) / <a class=\"id\" href=\"#__base\">__base</a>;<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} else <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__rem\">__rem</a> = <a class=\"id\" href=\"#__div64_32\">__div64_32</a>(&amp;(<a class=\"id\" href=\"#n\">n</a>), <a class=\"id\" href=\"#__base\">__base</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__rem\">__rem</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
" })", 
"", 
"#else <span class=\"comment\">/* BITS_PER_LONG == ?? */</span>", 
"", 
"# <a class=\"id\" href=\"#error\">error</a> <a class=\"id\" href=\"#do_div\">do_div</a>() <a class=\"id\" href=\"#does\">does</a> <a class=\"id\" href=\"#not\">not</a> <a class=\"id\" href=\"#yet\">yet</a> <a class=\"id\" href=\"#support\">support</a> <a class=\"id\" href=\"#the\">the</a> <a class=\"id\" href=\"#C64\">C64</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* BITS_PER_LONG */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _ASM_GENERIC_DIV64_H */</span>", 
];
xr_frag_insert('l/01/854998c2c90f1fbdd28b91ab3ac037cadfe201.xr', __xr_tmp);
