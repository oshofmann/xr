var __xr_tmp = [
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bitops\">bitops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpumask\">cpumask</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bootmem\">bootmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"int <a class=\"id\" href=\"#__first_cpu\">__first_cpu</a>(const <a class=\"id\" href=\"#cpumask_t\">cpumask_t</a> *<a class=\"id\" href=\"#srcp\">srcp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#min_t\">min_t</a>(int, <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>, <a class=\"id\" href=\"#find_first_bit\">find_first_bit</a>(<a class=\"id\" href=\"#srcp\">srcp</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__first_cpu\">__first_cpu</a>);", 
"", 
"int <a class=\"id\" href=\"#__next_cpu\">__next_cpu</a>(int <a class=\"id\" href=\"#n\">n</a>, const <a class=\"id\" href=\"#cpumask_t\">cpumask_t</a> *<a class=\"id\" href=\"#srcp\">srcp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#min_t\">min_t</a>(int, <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>, <a class=\"id\" href=\"#find_next_bit\">find_next_bit</a>(<a class=\"id\" href=\"#srcp\">srcp</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>, <a class=\"id\" href=\"#n\">n</a>+1));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__next_cpu\">__next_cpu</a>);", 
"", 
"#if <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a> &gt; 64", 
"int <a class=\"id\" href=\"#__next_cpu_nr\">__next_cpu_nr</a>(int <a class=\"id\" href=\"#n\">n</a>, const <a class=\"id\" href=\"#cpumask_t\">cpumask_t</a> *<a class=\"id\" href=\"#srcp\">srcp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#min_t\">min_t</a>(int, <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#find_next_bit\">find_next_bit</a>(<a class=\"id\" href=\"#srcp\">srcp</a>-><a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>, <a class=\"id\" href=\"#n\">n</a>+1));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__next_cpu_nr\">__next_cpu_nr</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"int <a class=\"id\" href=\"#__any_online_cpu\">__any_online_cpu</a>(const <a class=\"id\" href=\"#cpumask_t\">cpumask_t</a> *<a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu_mask\">for_each_cpu_mask</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, *<a class=\"id\" href=\"#mask\">mask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_online\">cpu_online</a>(<a class=\"id\" href=\"#cpu\">cpu</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__any_online_cpu\">__any_online_cpu</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpumask_next_and - get the next cpu in *src1p &amp; *src2p</span>", 
"<span class=\"comment\"> * @n: the cpu prior to the place to search (ie. return will be &gt; @n)</span>", 
"<span class=\"comment\"> * @src1p: the first cpumask pointer</span>", 
"<span class=\"comment\"> * @src2p: the second cpumask pointer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns &gt;= nr_cpu_ids if no further cpus set in both.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#cpumask_next_and\">cpumask_next_and</a>(int <a class=\"id\" href=\"#n\">n</a>, const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#src1p\">src1p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#src2p\">src2p</a>)", 
"{", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#cpumask_next\">cpumask_next</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#src1p\">src1p</a>)) &lt; <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#src2p\">src2p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#n\">n</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#cpumask_next_and\">cpumask_next_and</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpumask_any_but - return a \"random\" in a cpumask, but not this one.</span>", 
"<span class=\"comment\"> * @mask: the cpumask to search</span>", 
"<span class=\"comment\"> * @cpu: the cpu to ignore.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Often used to find any cpu but smp_processor_id() in a mask.</span>", 
"<span class=\"comment\"> * Returns &gt;= nr_cpu_ids if no cpus set.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#cpumask_any_but\">cpumask_any_but</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#mask\">mask</a>, unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_check\">cpumask_check</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#mask\">mask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> != <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a>;", 
"}", 
"", 
"<span class=\"comment\">/* These are not inline because of header tangles. */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CPUMASK_OFFSTACK\">CONFIG_CPUMASK_OFFSTACK</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * alloc_cpumask_var_node - allocate a struct cpumask on a given node</span>", 
"<span class=\"comment\"> * @mask: pointer to cpumask_var_t where the cpumask is returned</span>", 
"<span class=\"comment\"> * @flags: GFP_ flags</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Only defined when CONFIG_CPUMASK_OFFSTACK=y, otherwise is</span>", 
"<span class=\"comment\"> * a nop returning a constant 1 (in &lt;linux/cpumask.h&gt;)</span>", 
"<span class=\"comment\"> * Returns TRUE if memory allocation succeeded, FALSE otherwise.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In addition, mask will be NULL if this fails.  Note that gcc is</span>", 
"<span class=\"comment\"> * usually smart enough to know that mask can never be NULL if</span>", 
"<span class=\"comment\"> * CONFIG_CPUMASK_OFFSTACK=n, so does code elimination in that case</span>", 
"<span class=\"comment\"> * too.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#alloc_cpumask_var_node\">alloc_cpumask_var_node</a>(<a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> *<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>, int <a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#kmalloc_node\">kmalloc_node</a>(<a class=\"id\" href=\"#cpumask_size\">cpumask_size</a>(), <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_PER_CPU_MAPS\">CONFIG_DEBUG_PER_CPU_MAPS</a>", 
"<span class=\"ts\"/>if (!*<a class=\"id\" href=\"#mask\">mask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"=> alloc_cpumask_var: failed!\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dump_stack\">dump_stack</a>();", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* FIXME: Bandaid to save us from old primitives which go to NR_CPUS. */</span>", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#mask\">mask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#ptr\">ptr</a> = (unsigned char *)<a class=\"id\" href=\"#cpumask_bits\">cpumask_bits</a>(*<a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#tail\">tail</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tail\">tail</a> = <a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a> - <a class=\"id\" href=\"#nr_cpumask_bits\">nr_cpumask_bits</a>) * sizeof(long);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#ptr\">ptr</a> + <a class=\"id\" href=\"#cpumask_size\">cpumask_size</a>() - <a class=\"id\" href=\"#tail\">tail</a>, 0, <a class=\"id\" href=\"#tail\">tail</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return *<a class=\"id\" href=\"#mask\">mask</a> != <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#alloc_cpumask_var_node\">alloc_cpumask_var_node</a>);", 
"", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#zalloc_cpumask_var_node\">zalloc_cpumask_var_node</a>(<a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> *<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>, int <a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#alloc_cpumask_var_node\">alloc_cpumask_var_node</a>(<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#flags\">flags</a> | <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#zalloc_cpumask_var_node\">zalloc_cpumask_var_node</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * alloc_cpumask_var - allocate a struct cpumask</span>", 
"<span class=\"comment\"> * @mask: pointer to cpumask_var_t where the cpumask is returned</span>", 
"<span class=\"comment\"> * @flags: GFP_ flags</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Only defined when CONFIG_CPUMASK_OFFSTACK=y, otherwise is</span>", 
"<span class=\"comment\"> * a nop returning a constant 1 (in &lt;linux/cpumask.h&gt;).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * See alloc_cpumask_var_node.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#alloc_cpumask_var\">alloc_cpumask_var</a>(<a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> *<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#alloc_cpumask_var_node\">alloc_cpumask_var_node</a>(<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#numa_node_id\">numa_node_id</a>());", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#alloc_cpumask_var\">alloc_cpumask_var</a>);", 
"", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#zalloc_cpumask_var\">zalloc_cpumask_var</a>(<a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> *<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#alloc_cpumask_var\">alloc_cpumask_var</a>(<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#flags\">flags</a> | <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#zalloc_cpumask_var\">zalloc_cpumask_var</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * alloc_bootmem_cpumask_var - allocate a struct cpumask from the bootmem arena.</span>", 
"<span class=\"comment\"> * @mask: pointer to cpumask_var_t where the cpumask is returned</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Only defined when CONFIG_CPUMASK_OFFSTACK=y, otherwise is</span>", 
"<span class=\"comment\"> * a nop (in &lt;linux/cpumask.h&gt;).</span>", 
"<span class=\"comment\"> * Either returns an allocated (zero-filled) cpumask, or causes the</span>", 
"<span class=\"comment\"> * system to panic.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#alloc_bootmem_cpumask_var\">alloc_bootmem_cpumask_var</a>(<a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> *<a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#alloc_bootmem\">alloc_bootmem</a>(<a class=\"id\" href=\"#cpumask_size\">cpumask_size</a>());", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * free_cpumask_var - frees memory allocated for a struct cpumask.</span>", 
"<span class=\"comment\"> * @mask: cpumask to free</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is safe on a NULL mask.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#free_cpumask_var\">free_cpumask_var</a>(<a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#mask\">mask</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#free_cpumask_var\">free_cpumask_var</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * free_bootmem_cpumask_var - frees result of alloc_bootmem_cpumask_var</span>", 
"<span class=\"comment\"> * @mask: cpumask to free</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#free_bootmem_cpumask_var\">free_bootmem_cpumask_var</a>(<a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_bootmem\">free_bootmem</a>((unsigned long)<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#cpumask_size\">cpumask_size</a>());", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/01/f1bd272f5cfc27c21f3d3c4b012f08616160be.xr', __xr_tmp);
