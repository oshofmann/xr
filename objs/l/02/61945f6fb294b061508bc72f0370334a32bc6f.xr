var __xr_tmp = [
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sigdelsetmask\">sigdelsetmask</a>(<a class=\"id\" href=\"#sigset_t\">sigset_t</a> *<a class=\"id\" href=\"#set\">set</a>, unsigned long <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set\">set</a>-><a class=\"id\" href=\"#sig\">sig</a>[0] &= ~<a class=\"id\" href=\"#mask\">mask</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#sigtestsetmask\">sigtestsetmask</a>(<a class=\"id\" href=\"#sigset_t\">sigset_t</a> *<a class=\"id\" href=\"#set\">set</a>, unsigned long <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#set\">set</a>-><a class=\"id\" href=\"#sig\">sig</a>[0] &amp; <a class=\"id\" href=\"#mask\">mask</a>) != 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#siginitset\">siginitset</a>(<a class=\"id\" href=\"#sigset_t\">sigset_t</a> *<a class=\"id\" href=\"#set\">set</a>, unsigned long <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set\">set</a>-><a class=\"id\" href=\"#sig\">sig</a>[0] = <a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#_NSIG_WORDS\">_NSIG_WORDS</a>) {", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#set\">set</a>-><a class=\"id\" href=\"#sig\">sig</a>[1], 0, sizeof(long)*(<a class=\"id\" href=\"#_NSIG_WORDS\">_NSIG_WORDS</a>-1));", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 2: <a class=\"id\" href=\"#set\">set</a>-><a class=\"id\" href=\"#sig\">sig</a>[1] = 0;", 
"<span class=\"ts\"/>case 1: ;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#siginitsetinv\">siginitsetinv</a>(<a class=\"id\" href=\"#sigset_t\">sigset_t</a> *<a class=\"id\" href=\"#set\">set</a>, unsigned long <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set\">set</a>-><a class=\"id\" href=\"#sig\">sig</a>[0] = ~<a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#_NSIG_WORDS\">_NSIG_WORDS</a>) {", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#set\">set</a>-><a class=\"id\" href=\"#sig\">sig</a>[1], -1, sizeof(long)*(<a class=\"id\" href=\"#_NSIG_WORDS\">_NSIG_WORDS</a>-1));", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 2: <a class=\"id\" href=\"#set\">set</a>-><a class=\"id\" href=\"#sig\">sig</a>[1] = -1;", 
"<span class=\"ts\"/>case 1: ;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __HAVE_ARCH_SIG_SETOPS */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#init_sigpending\">init_sigpending</a>(struct <a class=\"id\" href=\"#sigpending\">sigpending</a> *<a class=\"id\" href=\"#sig\">sig</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sigemptyset\">sigemptyset</a>(&amp;<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#signal\">signal</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#flush_sigqueue\">flush_sigqueue</a>(struct <a class=\"id\" href=\"#sigpending\">sigpending</a> *<a class=\"id\" href=\"#queue\">queue</a>);", 
"", 
"<span class=\"comment\">/* Test if 'sig' is valid signal. Use this instead of testing _NSIG directly */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#valid_signal\">valid_signal</a>(unsigned long <a class=\"id\" href=\"#sig\">sig</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sig\">sig</a> <= <a class=\"id\" href=\"#_NSIG\">_NSIG</a> ? 1 : 0;", 
"}", 
"", 
"extern int <a class=\"id\" href=\"#next_signal\">next_signal</a>(struct <a class=\"id\" href=\"#sigpending\">sigpending</a> *<a class=\"id\" href=\"#pending\">pending</a>, <a class=\"id\" href=\"#sigset_t\">sigset_t</a> *<a class=\"id\" href=\"#mask\">mask</a>);", 
"extern int <a class=\"id\" href=\"#do_send_sig_info\">do_send_sig_info</a>(int <a class=\"id\" href=\"#sig\">sig</a>, struct <a class=\"id\" href=\"#siginfo\">siginfo</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#group\">group</a>);", 
"extern int <a class=\"id\" href=\"#group_send_sig_info\">group_send_sig_info</a>(int <a class=\"id\" href=\"#sig\">sig</a>, struct <a class=\"id\" href=\"#siginfo\">siginfo</a> *<a class=\"id\" href=\"#info\">info</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>);", 
"extern int <a class=\"id\" href=\"#__group_send_sig_info\">__group_send_sig_info</a>(int, struct <a class=\"id\" href=\"#siginfo\">siginfo</a> *, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *);", 
"extern long <a class=\"id\" href=\"#do_rt_tgsigqueueinfo\">do_rt_tgsigqueueinfo</a>(<a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#tgid\">tgid</a>, <a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pid\">pid</a>, int <a class=\"id\" href=\"#sig\">sig</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#siginfo_t\">siginfo_t</a> *<a class=\"id\" href=\"#info\">info</a>);", 
"extern long <a class=\"id\" href=\"#do_sigpending\">do_sigpending</a>(void <a class=\"id\" href=\"#__user\">__user</a> *, unsigned long);", 
"extern int <a class=\"id\" href=\"#sigprocmask\">sigprocmask</a>(int, <a class=\"id\" href=\"#sigset_t\">sigset_t</a> *, <a class=\"id\" href=\"#sigset_t\">sigset_t</a> *);", 
"extern int <a class=\"id\" href=\"#show_unhandled_signals\">show_unhandled_signals</a>;", 
"", 
"struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a>;", 
"extern int <a class=\"id\" href=\"#get_signal_to_deliver\">get_signal_to_deliver</a>(<a class=\"id\" href=\"#siginfo_t\">siginfo_t</a> *<a class=\"id\" href=\"#info\">info</a>, struct <a class=\"id\" href=\"#k_sigaction\">k_sigaction</a> *<a class=\"id\" href=\"#return_ka\">return_ka</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, void *<a class=\"id\" href=\"#cookie\">cookie</a>);", 
"extern void <a class=\"id\" href=\"#exit_signals\">exit_signals</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"", 
"extern struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#sighand_cachep\">sighand_cachep</a>;", 
"", 
"int <a class=\"id\" href=\"#unhandled_signal\">unhandled_signal</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, int <a class=\"id\" href=\"#sig\">sig</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * In POSIX a signal is sent either to a specific thread (Linux task)</span>", 
"<span class=\"comment\"> * or to the process as a whole (Linux thread group).  How the signal</span>", 
"<span class=\"comment\"> * is sent determines whether it's to one thread or the whole group,</span>", 
"<span class=\"comment\"> * which determines which signal mask(s) are involved in blocking it</span>", 
"<span class=\"comment\"> * from being delivered until later.  When the signal is delivered,</span>", 
"<span class=\"comment\"> * either it's caught or ignored by a user handler or it has a default</span>", 
"<span class=\"comment\"> * effect that applies to the whole thread group (POSIX process).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The possible effects an unblocked signal set to SIG_DFL can have are:</span>", 
"<span class=\"comment\"> *   ignore<span class=\"ts\"/>- Nothing Happens</span>", 
"<span class=\"comment\"> *   terminate<span class=\"ts\"/>- kill the process, i.e. all threads in the group,</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>  similar to exit_group.  The group leader (only) reports</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>  WIFSIGNALED status to its parent.</span>", 
"<span class=\"comment\"> *   coredump<span class=\"ts\"/>- write a core dump file describing all threads using</span>", 
];
xr_frag_insert('l/02/61945f6fb294b061508bc72f0370334a32bc6f.xr', __xr_tmp);
