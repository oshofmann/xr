var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * inet fragments management</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>This program is free software; you can redistribute it and/or</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>modify it under the terms of the GNU General Public License</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>as published by the Free Software Foundation; either version</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>2 of the License, or (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>Authors:<span class=\"ts\"/>Pavel Emelyanov &lt;xemul@openvz.org&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>Started as consolidation of ipv4/ip_fragment.c,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>ipv6/reassembly. and ipv6 nf conntrack reassembly</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#random\">random</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#skbuff\">skbuff</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rtnetlink\">rtnetlink</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#inet_frag\">inet_frag</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static void <a class=\"id\" href=\"#inet_frag_secret_rebuild\">inet_frag_secret_rebuild</a>(unsigned long <a class=\"id\" href=\"#dummy\">dummy</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_frags\">inet_frags</a> *<a class=\"id\" href=\"#f\">f</a> = (struct <a class=\"id\" href=\"#inet_frags\">inet_frags</a> *)<a class=\"id\" href=\"#dummy\">dummy</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock\">write_lock</a>(&amp;<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_random_bytes\">get_random_bytes</a>(&amp;<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#rnd\">rnd</a>, sizeof(<a class=\"id\" href=\"#u32\">u32</a>));", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#INETFRAGS_HASHSZ\">INETFRAGS_HASHSZ</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_frag_queue\">inet_frag_queue</a> *<a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#p\">p</a>, *<a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry_safe\">hlist_for_each_entry_safe</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#n\">n</a>, &amp;<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#hash\">hash</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#hval\">hval</a> = <a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#hashfn\">hashfn</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hval\">hval</a> != <a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_del\">hlist_del</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Relink to new hash chain. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_add_head\">hlist_add_head</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#hash\">hash</a>[<a class=\"id\" href=\"#hval\">hval</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod_timer\">mod_timer</a>(&amp;<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#secret_timer\">secret_timer</a>, <a class=\"id\" href=\"#now\">now</a> + <a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#secret_interval\">secret_interval</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#inet_frags_init\">inet_frags_init</a>(struct <a class=\"id\" href=\"#inet_frags\">inet_frags</a> *<a class=\"id\" href=\"#f\">f</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#INETFRAGS_HASHSZ\">INETFRAGS_HASHSZ</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_HLIST_HEAD\">INIT_HLIST_HEAD</a>(&amp;<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#hash\">hash</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rwlock_init\">rwlock_init</a>(&amp;<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#rnd\">rnd</a> = (<a class=\"id\" href=\"#u32\">u32</a>) ((<a class=\"id\" href=\"#num_physpages\">num_physpages</a> ^ (<a class=\"id\" href=\"#num_physpages\">num_physpages</a>>>7)) ^", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   (<a class=\"id\" href=\"#jiffies\">jiffies</a> ^ (<a class=\"id\" href=\"#jiffies\">jiffies</a> >> 6)));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_timer\">setup_timer</a>(&amp;<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#secret_timer\">secret_timer</a>, <a class=\"id\" href=\"#inet_frag_secret_rebuild\">inet_frag_secret_rebuild</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long)<a class=\"id\" href=\"#f\">f</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#secret_timer\">secret_timer</a>.<a class=\"id\" href=\"#expires\">expires</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#secret_interval\">secret_interval</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#add_timer\">add_timer</a>(&amp;<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#secret_timer\">secret_timer</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#inet_frags_init\">inet_frags_init</a>);", 
"", 
"void <a class=\"id\" href=\"#inet_frags_init_net\">inet_frags_init_net</a>(struct <a class=\"id\" href=\"#netns_frags\">netns_frags</a> *<a class=\"id\" href=\"#nf\">nf</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nf\">nf</a>-><a class=\"id\" href=\"#nqueues\">nqueues</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#nf\">nf</a>-><a class=\"id\" href=\"#mem\">mem</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#nf\">nf</a>-><a class=\"id\" href=\"#lru_list\">lru_list</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#inet_frags_init_net\">inet_frags_init_net</a>);", 
"", 
"void <a class=\"id\" href=\"#inet_frags_fini\">inet_frags_fini</a>(struct <a class=\"id\" href=\"#inet_frags\">inet_frags</a> *<a class=\"id\" href=\"#f\">f</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#del_timer\">del_timer</a>(&amp;<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#secret_timer\">secret_timer</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#inet_frags_fini\">inet_frags_fini</a>);", 
"", 
"void <a class=\"id\" href=\"#inet_frags_exit_net\">inet_frags_exit_net</a>(struct <a class=\"id\" href=\"#netns_frags\">netns_frags</a> *<a class=\"id\" href=\"#nf\">nf</a>, struct <a class=\"id\" href=\"#inet_frags\">inet_frags</a> *<a class=\"id\" href=\"#f\">f</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nf\">nf</a>-><a class=\"id\" href=\"#low_thresh\">low_thresh</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_bh_disable\">local_bh_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inet_frag_evictor\">inet_frag_evictor</a>(<a class=\"id\" href=\"#nf\">nf</a>, <a class=\"id\" href=\"#f\">f</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_bh_enable\">local_bh_enable</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#inet_frags_exit_net\">inet_frags_exit_net</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#fq_unlink\">fq_unlink</a>(struct <a class=\"id\" href=\"#inet_frag_queue\">inet_frag_queue</a> *<a class=\"id\" href=\"#fq\">fq</a>, struct <a class=\"id\" href=\"#inet_frags\">inet_frags</a> *<a class=\"id\" href=\"#f\">f</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock\">write_lock</a>(&amp;<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_del\">hlist_del</a>(&amp;<a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#lru_list\">lru_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#net\">net</a>-><a class=\"id\" href=\"#nqueues\">nqueues</a>--;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#inet_frag_kill\">inet_frag_kill</a>(struct <a class=\"id\" href=\"#inet_frag_queue\">inet_frag_queue</a> *<a class=\"id\" href=\"#fq\">fq</a>, struct <a class=\"id\" href=\"#inet_frags\">inet_frags</a> *<a class=\"id\" href=\"#f\">f</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#del_timer\">del_timer</a>(&amp;<a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#timer\">timer</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>);", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#last_in\">last_in</a> &amp; <a class=\"id\" href=\"#INET_FRAG_COMPLETE\">INET_FRAG_COMPLETE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fq_unlink\">fq_unlink</a>(<a class=\"id\" href=\"#fq\">fq</a>, <a class=\"id\" href=\"#f\">f</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fq\">fq</a>-><a class=\"id\" href=\"#last_in\">last_in</a> |= <a class=\"id\" href=\"#INET_FRAG_COMPLETE\">INET_FRAG_COMPLETE</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#inet_frag_kill\">inet_frag_kill</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#frag_kfree_skb\">frag_kfree_skb</a>(struct <a class=\"id\" href=\"#netns_frags\">netns_frags</a> *<a class=\"id\" href=\"#nf\">nf</a>, struct <a class=\"id\" href=\"#inet_frags\">inet_frags</a> *<a class=\"id\" href=\"#f\">f</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#work\">work</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#work\">work</a> -= <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#truesize\">truesize</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_sub\">atomic_sub</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#truesize\">truesize</a>, &amp;<a class=\"id\" href=\"#nf\">nf</a>-><a class=\"id\" href=\"#mem\">mem</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#skb_free\">skb_free</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#skb_free\">skb_free</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#inet_frag_destroy\">inet_frag_destroy</a>(struct <a class=\"id\" href=\"#inet_frag_queue\">inet_frag_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#inet_frags\">inet_frags</a> *<a class=\"id\" href=\"#f\">f</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#fp\">fp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netns_frags\">netns_frags</a> *<a class=\"id\" href=\"#nf\">nf</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#last_in\">last_in</a> &amp; <a class=\"id\" href=\"#INET_FRAG_COMPLETE\">INET_FRAG_COMPLETE</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#del_timer\">del_timer</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#timer\">timer</a>) != 0);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Release all fragment data. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fp\">fp</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#fragments\">fragments</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nf\">nf</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#net\">net</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#fp\">fp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#xp\">xp</a> = <a class=\"id\" href=\"#fp\">fp</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#frag_kfree_skb\">frag_kfree_skb</a>(<a class=\"id\" href=\"#nf\">nf</a>, <a class=\"id\" href=\"#f\">f</a>, <a class=\"id\" href=\"#fp\">fp</a>, <a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fp\">fp</a> = <a class=\"id\" href=\"#xp\">xp</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#work\">work</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#work\">work</a> -= <a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#qsize\">qsize</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_sub\">atomic_sub</a>(<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#qsize\">qsize</a>, &amp;<a class=\"id\" href=\"#nf\">nf</a>-><a class=\"id\" href=\"#mem\">mem</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#destructor\">destructor</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#destructor\">destructor</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#inet_frag_destroy\">inet_frag_destroy</a>);", 
"", 
"int <a class=\"id\" href=\"#inet_frag_evictor\">inet_frag_evictor</a>(struct <a class=\"id\" href=\"#netns_frags\">netns_frags</a> *<a class=\"id\" href=\"#nf\">nf</a>, struct <a class=\"id\" href=\"#inet_frags\">inet_frags</a> *<a class=\"id\" href=\"#f\">f</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_frag_queue\">inet_frag_queue</a> *<a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#work\">work</a>, <a class=\"id\" href=\"#evicted\">evicted</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#work\">work</a> = <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#nf\">nf</a>-><a class=\"id\" href=\"#mem\">mem</a>) - <a class=\"id\" href=\"#nf\">nf</a>-><a class=\"id\" href=\"#low_thresh\">low_thresh</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#work\">work</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#nf\">nf</a>-><a class=\"id\" href=\"#lru_list\">lru_list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(&amp;<a class=\"id\" href=\"#nf\">nf</a>-><a class=\"id\" href=\"#lru_list\">lru_list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_frag_queue\">inet_frag_queue</a>, <a class=\"id\" href=\"#lru_list\">lru_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#last_in\">last_in</a> &amp; <a class=\"id\" href=\"#INET_FRAG_COMPLETE\">INET_FRAG_COMPLETE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inet_frag_kill\">inet_frag_kill</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#f\">f</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inet_frag_destroy\">inet_frag_destroy</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#f\">f</a>, &amp;<a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#evicted\">evicted</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#evicted\">evicted</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#inet_frag_evictor\">inet_frag_evictor</a>);", 
"", 
"static struct <a class=\"id\" href=\"#inet_frag_queue\">inet_frag_queue</a> *<a class=\"id\" href=\"#inet_frag_intern\">inet_frag_intern</a>(struct <a class=\"id\" href=\"#netns_frags\">netns_frags</a> *<a class=\"id\" href=\"#nf\">nf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_frag_queue\">inet_frag_queue</a> *<a class=\"id\" href=\"#qp_in\">qp_in</a>, struct <a class=\"id\" href=\"#inet_frags\">inet_frags</a> *<a class=\"id\" href=\"#f\">f</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_frag_queue\">inet_frag_queue</a> *<a class=\"id\" href=\"#qp\">qp</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#n\">n</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#hash\">hash</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock\">write_lock</a>(&amp;<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * While we stayed w/o the lock other CPU could update</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the rnd seed, so we need to re-calculate the hash</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * chain. Fortunatelly the qp_in can be used to get one.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#hashfn\">hashfn</a>(<a class=\"id\" href=\"#qp_in\">qp_in</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* With SMP race we have to recheck hash table, because</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * such entry could be created on other cpu, while we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * promoted read lock to write lock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry\">hlist_for_each_entry</a>(<a class=\"id\" href=\"#qp\">qp</a>, <a class=\"id\" href=\"#n\">n</a>, &amp;<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#hash\">hash</a>[<a class=\"id\" href=\"#hash\">hash</a>], <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#net\">net</a> == <a class=\"id\" href=\"#nf\">nf</a> && <a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#match\">match</a>(<a class=\"id\" href=\"#qp\">qp</a>, <a class=\"id\" href=\"#arg\">arg</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qp_in\">qp_in</a>-><a class=\"id\" href=\"#last_in\">last_in</a> |= <a class=\"id\" href=\"#INET_FRAG_COMPLETE\">INET_FRAG_COMPLETE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inet_frag_put\">inet_frag_put</a>(<a class=\"id\" href=\"#qp_in\">qp_in</a>, <a class=\"id\" href=\"#f\">f</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#qp\">qp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qp\">qp</a> = <a class=\"id\" href=\"#qp_in\">qp_in</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mod_timer\">mod_timer</a>(&amp;<a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#nf\">nf</a>-><a class=\"id\" href=\"#timeout\">timeout</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_add_head\">hlist_add_head</a>(&amp;<a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#hash\">hash</a>[<a class=\"id\" href=\"#hash\">hash</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#qp\">qp</a>-><a class=\"id\" href=\"#lru_list\">lru_list</a>, &amp;<a class=\"id\" href=\"#nf\">nf</a>-><a class=\"id\" href=\"#lru_list\">lru_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nf\">nf</a>-><a class=\"id\" href=\"#nqueues\">nqueues</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#qp\">qp</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#inet_frag_queue\">inet_frag_queue</a> *<a class=\"id\" href=\"#inet_frag_alloc\">inet_frag_alloc</a>(struct <a class=\"id\" href=\"#netns_frags\">netns_frags</a> *<a class=\"id\" href=\"#nf\">nf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_frags\">inet_frags</a> *<a class=\"id\" href=\"#f\">f</a>, void *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_frag_queue\">inet_frag_queue</a> *<a class=\"id\" href=\"#q\">q</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#qsize\">qsize</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#q\">q</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#constructor\">constructor</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_add\">atomic_add</a>(<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#qsize\">qsize</a>, &amp;<a class=\"id\" href=\"#nf\">nf</a>-><a class=\"id\" href=\"#mem\">mem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_timer\">setup_timer</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#frag_expire\">frag_expire</a>, (unsigned long)<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#net\">net</a> = <a class=\"id\" href=\"#nf\">nf</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#q\">q</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#inet_frag_queue\">inet_frag_queue</a> *<a class=\"id\" href=\"#inet_frag_create\">inet_frag_create</a>(struct <a class=\"id\" href=\"#netns_frags\">netns_frags</a> *<a class=\"id\" href=\"#nf\">nf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_frags\">inet_frags</a> *<a class=\"id\" href=\"#f\">f</a>, void *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_frag_queue\">inet_frag_queue</a> *<a class=\"id\" href=\"#q\">q</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#inet_frag_alloc\">inet_frag_alloc</a>(<a class=\"id\" href=\"#nf\">nf</a>, <a class=\"id\" href=\"#f\">f</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#q\">q</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#inet_frag_intern\">inet_frag_intern</a>(<a class=\"id\" href=\"#nf\">nf</a>, <a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#f\">f</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"}", 
"", 
"struct <a class=\"id\" href=\"#inet_frag_queue\">inet_frag_queue</a> *<a class=\"id\" href=\"#inet_frag_find\">inet_frag_find</a>(struct <a class=\"id\" href=\"#netns_frags\">netns_frags</a> *<a class=\"id\" href=\"#nf\">nf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_frags\">inet_frags</a> *<a class=\"id\" href=\"#f\">f</a>, void *<a class=\"id\" href=\"#key\">key</a>, unsigned int <a class=\"id\" href=\"#hash\">hash</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__releases\">__releases</a>(&amp;<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_frag_queue\">inet_frag_queue</a> *<a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry\">hlist_for_each_entry</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#n\">n</a>, &amp;<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#hash\">hash</a>[<a class=\"id\" href=\"#hash\">hash</a>], <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#net\">net</a> == <a class=\"id\" href=\"#nf\">nf</a> && <a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#match\">match</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#key\">key</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#inet_frag_create\">inet_frag_create</a>(<a class=\"id\" href=\"#nf\">nf</a>, <a class=\"id\" href=\"#f\">f</a>, <a class=\"id\" href=\"#key\">key</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#inet_frag_find\">inet_frag_find</a>);", 
];
xr_frag_insert('l/02/7fa992cbbf585ede7002b4d8d854052d0ea026.xr', __xr_tmp);
