var __xr_tmp = [
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#debugfs\">debugfs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#netlink\">netlink</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#skbuff\">skbuff</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#nl80211\">nl80211</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#if_ether\">if_ether</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ieee80211\">ieee80211</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#regulatory\">regulatory</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/* remove once we remove the wext stuff */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#iw_handler\">iw_handler</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#wireless\">wireless</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * wireless hardware capability structures</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * enum ieee80211_band - supported frequency bands</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The bands are assigned this way because the supported</span>", 
"<span class=\"comment\"> * bitrates differ in these bands.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @IEEE80211_BAND_2GHZ: 2.4GHz ISM band</span>", 
"<span class=\"comment\"> * @IEEE80211_BAND_5GHZ: around 5GHz band (4.9-5.7)</span>", 
"<span class=\"comment\"> * @IEEE80211_NUM_BANDS: number of defined bands</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#ieee80211_band\">ieee80211_band</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IEEE80211_BAND_2GHZ\">IEEE80211_BAND_2GHZ</a> = <a class=\"id\" href=\"#NL80211_BAND_2GHZ\">NL80211_BAND_2GHZ</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IEEE80211_BAND_5GHZ\">IEEE80211_BAND_5GHZ</a> = <a class=\"id\" href=\"#NL80211_BAND_5GHZ\">NL80211_BAND_5GHZ</a>,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* keep last */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IEEE80211_NUM_BANDS\">IEEE80211_NUM_BANDS</a>", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * enum ieee80211_channel_flags - channel flags</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Channel flags set by the regulatory control code.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @IEEE80211_CHAN_DISABLED: This channel is disabled.</span>", 
"<span class=\"comment\"> * @IEEE80211_CHAN_PASSIVE_SCAN: Only passive scanning is permitted</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>on this channel.</span>", 
"<span class=\"comment\"> * @IEEE80211_CHAN_NO_IBSS: IBSS is not allowed on this channel.</span>", 
"<span class=\"comment\"> * @IEEE80211_CHAN_RADAR: Radar detection is required on this channel.</span>", 
"<span class=\"comment\"> * @IEEE80211_CHAN_NO_HT40PLUS: extension channel above this channel</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>is not permitted.</span>", 
"<span class=\"comment\"> * @IEEE80211_CHAN_NO_HT40MINUS: extension channel below this channel</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>is not permitted.</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#ieee80211_channel_flags\">ieee80211_channel_flags</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IEEE80211_CHAN_DISABLED\">IEEE80211_CHAN_DISABLED</a><span class=\"ts\"/><span class=\"ts\"/>= 1<<0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IEEE80211_CHAN_PASSIVE_SCAN\">IEEE80211_CHAN_PASSIVE_SCAN</a><span class=\"ts\"/>= 1<<1,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IEEE80211_CHAN_NO_IBSS\">IEEE80211_CHAN_NO_IBSS</a><span class=\"ts\"/><span class=\"ts\"/>= 1<<2,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IEEE80211_CHAN_RADAR\">IEEE80211_CHAN_RADAR</a><span class=\"ts\"/><span class=\"ts\"/>= 1<<3,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IEEE80211_CHAN_NO_HT40PLUS\">IEEE80211_CHAN_NO_HT40PLUS</a><span class=\"ts\"/>= 1<<4,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IEEE80211_CHAN_NO_HT40MINUS\">IEEE80211_CHAN_NO_HT40MINUS</a><span class=\"ts\"/>= 1<<5,", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IEEE80211_CHAN_NO_HT40\">IEEE80211_CHAN_NO_HT40</a> \\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#IEEE80211_CHAN_NO_HT40PLUS\">IEEE80211_CHAN_NO_HT40PLUS</a> | <a class=\"id\" href=\"#IEEE80211_CHAN_NO_HT40MINUS\">IEEE80211_CHAN_NO_HT40MINUS</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct ieee80211_channel - channel definition</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This structure describes a single channel for use</span>", 
"<span class=\"comment\"> * with cfg80211.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @center_freq: center frequency in MHz</span>", 
"<span class=\"comment\"> * @hw_value: hardware-specific value for the channel</span>", 
"<span class=\"comment\"> * @flags: channel flags from &amp;enum ieee80211_channel_flags.</span>", 
"<span class=\"comment\"> * @orig_flags: channel flags at registration time, used by regulatory</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>code to support devices with additional restrictions</span>", 
"<span class=\"comment\"> * @band: band this channel belongs to.</span>", 
"<span class=\"comment\"> * @max_antenna_gain: maximum antenna gain in dBi</span>", 
"<span class=\"comment\"> * @max_power: maximum transmission power (in dBm)</span>", 
"<span class=\"comment\"> * @beacon_found: helper to regulatory code to indicate when a beacon</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>has been found on this channel. Use regulatory_hint_found_beacon()</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to enable this, this is useful only on 5 GHz band.</span>", 
"<span class=\"comment\"> * @orig_mag: internal use</span>", 
"<span class=\"comment\"> * @orig_mpwr: internal use</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ieee80211_channel\">ieee80211_channel</a> {", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#ieee80211_band\">ieee80211_band</a> <a class=\"id\" href=\"#band\">band</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#center_freq\">center_freq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#hw_value\">hw_value</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#max_antenna_gain\">max_antenna_gain</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#max_power\">max_power</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#beacon_found\">beacon_found</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#orig_flags\">orig_flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#orig_mag\">orig_mag</a>, <a class=\"id\" href=\"#orig_mpwr\">orig_mpwr</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * enum ieee80211_rate_flags - rate flags</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Hardware/specification flags for rates. These are structured</span>", 
"<span class=\"comment\"> * in a way that allows using the same bitrate structure for</span>", 
"<span class=\"comment\"> * different bands/PHY modes.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @IEEE80211_RATE_SHORT_PREAMBLE: Hardware can send with short</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>preamble on this bitrate; only relevant in 2.4GHz band and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>with CCK rates.</span>", 
"<span class=\"comment\"> * @IEEE80211_RATE_MANDATORY_A: This bitrate is a mandatory rate</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>when used with 802.11a (on the 5 GHz band); filled by the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>core code when registering the wiphy.</span>", 
"<span class=\"comment\"> * @IEEE80211_RATE_MANDATORY_B: This bitrate is a mandatory rate</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>when used with 802.11b (on the 2.4 GHz band); filled by the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>core code when registering the wiphy.</span>", 
"<span class=\"comment\"> * @IEEE80211_RATE_MANDATORY_G: This bitrate is a mandatory rate</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>when used with 802.11g (on the 2.4 GHz band); filled by the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>core code when registering the wiphy.</span>", 
"<span class=\"comment\"> * @IEEE80211_RATE_ERP_G: This is an ERP rate in 802.11g mode.</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#ieee80211_rate_flags\">ieee80211_rate_flags</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IEEE80211_RATE_SHORT_PREAMBLE\">IEEE80211_RATE_SHORT_PREAMBLE</a><span class=\"ts\"/>= 1<<0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IEEE80211_RATE_MANDATORY_A\">IEEE80211_RATE_MANDATORY_A</a><span class=\"ts\"/>= 1<<1,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IEEE80211_RATE_MANDATORY_B\">IEEE80211_RATE_MANDATORY_B</a><span class=\"ts\"/>= 1<<2,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IEEE80211_RATE_MANDATORY_G\">IEEE80211_RATE_MANDATORY_G</a><span class=\"ts\"/>= 1<<3,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IEEE80211_RATE_ERP_G\">IEEE80211_RATE_ERP_G</a><span class=\"ts\"/><span class=\"ts\"/>= 1<<4,", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct ieee80211_rate - bitrate definition</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This structure describes a bitrate that an 802.11 PHY can</span>", 
"<span class=\"comment\"> * operate with. The two values @hw_value and @hw_value_short</span>", 
"<span class=\"comment\"> * are only for driver use when pointers to this structure are</span>", 
"<span class=\"comment\"> * passed around.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @flags: rate-specific flags</span>", 
"<span class=\"comment\"> * @bitrate: bitrate in units of 100 Kbps</span>", 
"<span class=\"comment\"> * @hw_value: driver/hardware value for this rate</span>", 
"<span class=\"comment\"> * @hw_value_short: driver/hardware value for this rate when</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>short preamble is used</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ieee80211_rate\">ieee80211_rate</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#bitrate\">bitrate</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#hw_value\">hw_value</a>, <a class=\"id\" href=\"#hw_value_short\">hw_value_short</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct ieee80211_sta_ht_cap - STA's HT capabilities</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This structure describes most essential parameters needed</span>", 
"<span class=\"comment\"> * to describe 802.11n HT capabilities for an STA.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @ht_supported: is HT supported by the STA</span>", 
"<span class=\"comment\"> * @cap: HT capabilities map as described in 802.11n spec</span>", 
"<span class=\"comment\"> * @ampdu_factor: Maximum A-MPDU length factor</span>", 
"<span class=\"comment\"> * @ampdu_density: Minimum A-MPDU spacing</span>", 
"<span class=\"comment\"> * @mcs: Supported MCS rates</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ieee80211_sta_ht_cap\">ieee80211_sta_ht_cap</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#cap\">cap</a>; <span class=\"comment\">/* use IEEE80211_HT_CAP_ */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ht_supported\">ht_supported</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#ampdu_factor\">ampdu_factor</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#ampdu_density\">ampdu_density</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ieee80211_mcs_info\">ieee80211_mcs_info</a> <a class=\"id\" href=\"#mcs\">mcs</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct ieee80211_supported_band - frequency band definition</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This structure describes a frequency band a wiphy</span>", 
"<span class=\"comment\"> * is able to operate in.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @channels: Array of channels the hardware can operate in</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>in this band.</span>", 
"<span class=\"comment\"> * @band: the band this structure represents</span>", 
"<span class=\"comment\"> * @n_channels: Number of channels in @channels</span>", 
"<span class=\"comment\"> * @bitrates: Array of bitrates the hardware can operate with</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>in this band. Must be sorted to give a valid \"supported</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>rates\" IE, i.e. CCK rates first, then OFDM.</span>", 
"<span class=\"comment\"> * @n_bitrates: Number of bitrates in @bitrates</span>", 
"<span class=\"comment\"> * @ht_cap: HT capabilities in this band</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ieee80211_supported_band\">ieee80211_supported_band</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ieee80211_channel\">ieee80211_channel</a> *<a class=\"id\" href=\"#channels\">channels</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ieee80211_rate\">ieee80211_rate</a> *<a class=\"id\" href=\"#bitrates\">bitrates</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#ieee80211_band\">ieee80211_band</a> <a class=\"id\" href=\"#band\">band</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n_channels\">n_channels</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n_bitrates\">n_bitrates</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ieee80211_sta_ht_cap\">ieee80211_sta_ht_cap</a> <a class=\"id\" href=\"#ht_cap\">ht_cap</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Wireless hardware/device configuration structures and methods</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct vif_params - describes virtual interface parameters</span>", 
"<span class=\"comment\"> * @mesh_id: mesh ID to use</span>", 
"<span class=\"comment\"> * @mesh_id_len: length of the mesh ID</span>", 
"<span class=\"comment\"> * @use_4addr: use 4-address frames</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#vif_params\">vif_params</a> {", 
"       <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#mesh_id\">mesh_id</a>;", 
"       int <a class=\"id\" href=\"#mesh_id_len\">mesh_id_len</a>;", 
"       int <a class=\"id\" href=\"#use_4addr\">use_4addr</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct key_params - key information</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Information about a key</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @key: key material</span>", 
"<span class=\"comment\"> * @key_len: length of key material</span>", 
"<span class=\"comment\"> * @cipher: cipher suite selector</span>", 
"<span class=\"comment\"> * @seq: sequence counter (IV/PN) for TKIP and CCMP keys, only used</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>with the get_key() callback, must be in little endian,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>length given by @seq_len.</span>", 
"<span class=\"comment\"> * @seq_len: length of @seq.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#key_params\">key_params</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#key\">key</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#seq\">seq</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#key_len\">key_len</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#seq_len\">seq_len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#cipher\">cipher</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * enum survey_info_flags - survey information flags</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @SURVEY_INFO_NOISE_DBM: noise (in dBm) was filled in</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Used by the driver to indicate which info in &amp;struct survey_info</span>", 
"<span class=\"comment\"> * it has filled in during the get_survey().</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#survey_info_flags\">survey_info_flags</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SURVEY_INFO_NOISE_DBM\">SURVEY_INFO_NOISE_DBM</a> = 1<<0,", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct survey_info - channel survey response</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @channel: the channel this survey record reports, mandatory</span>", 
"<span class=\"comment\"> * @filled: bitflag of flags from &amp;enum survey_info_flags</span>", 
"<span class=\"comment\"> * @noise: channel noise in dBm. This and all following fields are</span>", 
"<span class=\"comment\"> *     optional</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Used by dump_survey() to report back per-channel survey information.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This structure can later be expanded with things like</span>", 
"<span class=\"comment\"> * channel duty cycle etc.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#survey_info\">survey_info</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ieee80211_channel\">ieee80211_channel</a> *<a class=\"id\" href=\"#channel\">channel</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#filled\">filled</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s8\">s8</a> <a class=\"id\" href=\"#noise\">noise</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct beacon_parameters - beacon parameters</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Used to configure the beacon for an interface.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @head: head portion of beacon (before TIM IE)</span>", 
"<span class=\"comment\"> *     or %NULL if not changed</span>", 
"<span class=\"comment\"> * @tail: tail portion of beacon (after TIM IE)</span>", 
"<span class=\"comment\"> *     or %NULL if not changed</span>", 
"<span class=\"comment\"> * @interval: beacon interval or zero if not changed</span>", 
"<span class=\"comment\"> * @dtim_period: DTIM period or zero if not changed</span>", 
"<span class=\"comment\"> * @head_len: length of @head</span>", 
"<span class=\"comment\"> * @tail_len: length of @tail</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#beacon_parameters\">beacon_parameters</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#head\">head</a>, *<a class=\"id\" href=\"#tail\">tail</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#interval\">interval</a>, <a class=\"id\" href=\"#dtim_period\">dtim_period</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#head_len\">head_len</a>, <a class=\"id\" href=\"#tail_len\">tail_len</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * enum plink_action - actions to perform in mesh peers</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @PLINK_ACTION_INVALID: action 0 is reserved</span>", 
"<span class=\"comment\"> * @PLINK_ACTION_OPEN: start mesh peer link establishment</span>", 
"<span class=\"comment\"> * @PLINK_ACTION_BLOCK: block traffic from this mesh peer</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#plink_actions\">plink_actions</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PLINK_ACTION_INVALID\">PLINK_ACTION_INVALID</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PLINK_ACTION_OPEN\">PLINK_ACTION_OPEN</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PLINK_ACTION_BLOCK\">PLINK_ACTION_BLOCK</a>,", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct station_parameters - station parameters</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Used to change and create a new station.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @vlan: vlan interface station should belong to</span>", 
"<span class=\"comment\"> * @supported_rates: supported rates in IEEE 802.11 format</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(or NULL for no change)</span>", 
"<span class=\"comment\"> * @supported_rates_len: number of supported rates</span>", 
"<span class=\"comment\"> * @sta_flags_mask: station flags that changed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(bitmask of BIT(NL80211_STA_FLAG_...))</span>", 
"<span class=\"comment\"> * @sta_flags_set: station flags values</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(bitmask of BIT(NL80211_STA_FLAG_...))</span>", 
"<span class=\"comment\"> * @listen_interval: listen interval or -1 for no change</span>", 
"<span class=\"comment\"> * @aid: AID or zero for no change</span>", 
"<span class=\"comment\"> * @plink_action: plink action to take</span>", 
"<span class=\"comment\"> * @ht_capa: HT capabilities of station</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#station_parameters\">station_parameters</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#supported_rates\">supported_rates</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#vlan\">vlan</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sta_flags_mask\">sta_flags_mask</a>, <a class=\"id\" href=\"#sta_flags_set\">sta_flags_set</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#listen_interval\">listen_interval</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#aid\">aid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#supported_rates_len\">supported_rates_len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#plink_action\">plink_action</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ieee80211_ht_cap\">ieee80211_ht_cap</a> *<a class=\"id\" href=\"#ht_capa\">ht_capa</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * enum station_info_flags - station information flags</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Used by the driver to indicate which info in &amp;struct station_info</span>", 
"<span class=\"comment\"> * it has filled in during get_station() or dump_station().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @STATION_INFO_INACTIVE_TIME: @inactive_time filled</span>", 
"<span class=\"comment\"> * @STATION_INFO_RX_BYTES: @rx_bytes filled</span>", 
"<span class=\"comment\"> * @STATION_INFO_TX_BYTES: @tx_bytes filled</span>", 
"<span class=\"comment\"> * @STATION_INFO_LLID: @llid filled</span>", 
"<span class=\"comment\"> * @STATION_INFO_PLID: @plid filled</span>", 
"<span class=\"comment\"> * @STATION_INFO_PLINK_STATE: @plink_state filled</span>", 
"<span class=\"comment\"> * @STATION_INFO_SIGNAL: @signal filled</span>", 
"<span class=\"comment\"> * @STATION_INFO_TX_BITRATE: @tx_bitrate fields are filled</span>", 
"<span class=\"comment\"> *  (tx_bitrate, tx_bitrate_flags and tx_bitrate_mcs)</span>", 
"<span class=\"comment\"> * @STATION_INFO_RX_PACKETS: @rx_packets filled</span>", 
"<span class=\"comment\"> * @STATION_INFO_TX_PACKETS: @tx_packets filled</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#station_info_flags\">station_info_flags</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#STATION_INFO_INACTIVE_TIME\">STATION_INFO_INACTIVE_TIME</a><span class=\"ts\"/>= 1<<0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#STATION_INFO_RX_BYTES\">STATION_INFO_RX_BYTES</a><span class=\"ts\"/><span class=\"ts\"/>= 1<<1,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#STATION_INFO_TX_BYTES\">STATION_INFO_TX_BYTES</a><span class=\"ts\"/><span class=\"ts\"/>= 1<<2,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#STATION_INFO_LLID\">STATION_INFO_LLID</a><span class=\"ts\"/><span class=\"ts\"/>= 1<<3,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#STATION_INFO_PLID\">STATION_INFO_PLID</a><span class=\"ts\"/><span class=\"ts\"/>= 1<<4,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#STATION_INFO_PLINK_STATE\">STATION_INFO_PLINK_STATE</a><span class=\"ts\"/>= 1<<5,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#STATION_INFO_SIGNAL\">STATION_INFO_SIGNAL</a><span class=\"ts\"/><span class=\"ts\"/>= 1<<6,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#STATION_INFO_TX_BITRATE\">STATION_INFO_TX_BITRATE</a><span class=\"ts\"/><span class=\"ts\"/>= 1<<7,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#STATION_INFO_RX_PACKETS\">STATION_INFO_RX_PACKETS</a><span class=\"ts\"/><span class=\"ts\"/>= 1<<8,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#STATION_INFO_TX_PACKETS\">STATION_INFO_TX_PACKETS</a><span class=\"ts\"/><span class=\"ts\"/>= 1<<9,", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * enum station_info_rate_flags - bitrate info flags</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Used by the driver to indicate the specific rate transmission</span>", 
"<span class=\"comment\"> * type for 802.11n transmissions.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @RATE_INFO_FLAGS_MCS: @tx_bitrate_mcs filled</span>", 
"<span class=\"comment\"> * @RATE_INFO_FLAGS_40_MHZ_WIDTH: 40 Mhz width transmission</span>", 
"<span class=\"comment\"> * @RATE_INFO_FLAGS_SHORT_GI: 400ns guard interval</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#rate_info_flags\">rate_info_flags</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RATE_INFO_FLAGS_MCS\">RATE_INFO_FLAGS_MCS</a><span class=\"ts\"/><span class=\"ts\"/>= 1<<0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RATE_INFO_FLAGS_40_MHZ_WIDTH\">RATE_INFO_FLAGS_40_MHZ_WIDTH</a><span class=\"ts\"/>= 1<<1,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RATE_INFO_FLAGS_SHORT_GI\">RATE_INFO_FLAGS_SHORT_GI</a><span class=\"ts\"/>= 1<<2,", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct rate_info - bitrate information</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Information about a receiving or transmitting bitrate</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @flags: bitflag of flags from &amp;enum rate_info_flags</span>", 
"<span class=\"comment\"> * @mcs: mcs index if struct describes a 802.11n bitrate</span>", 
"<span class=\"comment\"> * @legacy: bitrate in 100kbit/s for 802.11abg</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#rate_info\">rate_info</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#mcs\">mcs</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#legacy\">legacy</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct station_info - station information</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Station information filled by driver for get_station() and dump_station.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @filled: bitflag of flags from &amp;enum station_info_flags</span>", 
"<span class=\"comment\"> * @inactive_time: time since last station activity (tx/rx) in milliseconds</span>", 
"<span class=\"comment\"> * @rx_bytes: bytes received from this station</span>", 
"<span class=\"comment\"> * @tx_bytes: bytes transmitted to this station</span>", 
"<span class=\"comment\"> * @llid: mesh local link id</span>", 
"<span class=\"comment\"> * @plid: mesh peer link id</span>", 
"<span class=\"comment\"> * @plink_state: mesh peer link state</span>", 
"<span class=\"comment\"> * @signal: signal strength of last received packet in dBm</span>", 
"<span class=\"comment\"> * @txrate: current unicast bitrate to this station</span>", 
"<span class=\"comment\"> * @rx_packets: packets received from this station</span>", 
"<span class=\"comment\"> * @tx_packets: packets transmitted to this station</span>", 
"<span class=\"comment\"> * @generation: generation number for nl80211 dumps.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This number should increase every time the list of stations</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>changes, i.e. when a station is added or removed, so that</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>userspace can tell whether it got a consistent snapshot.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#station_info\">station_info</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#filled\">filled</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#inactive_time\">inactive_time</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#rx_bytes\">rx_bytes</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#tx_bytes\">tx_bytes</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#llid\">llid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#plid\">plid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#plink_state\">plink_state</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s8\">s8</a> <a class=\"id\" href=\"#signal\">signal</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rate_info\">rate_info</a> <a class=\"id\" href=\"#txrate\">txrate</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#rx_packets\">rx_packets</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#tx_packets\">tx_packets</a>;", 
"", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#generation\">generation</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * enum monitor_flags - monitor flags</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Monitor interface configuration flags. Note that these must be the bits</span>", 
"<span class=\"comment\"> * according to the nl80211 flags.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @MONITOR_FLAG_FCSFAIL: pass frames with bad FCS</span>", 
"<span class=\"comment\"> * @MONITOR_FLAG_PLCPFAIL: pass frames with bad PLCP</span>", 
"<span class=\"comment\"> * @MONITOR_FLAG_CONTROL: pass control frames</span>", 
"<span class=\"comment\"> * @MONITOR_FLAG_OTHER_BSS: disable BSSID filtering</span>", 
"<span class=\"comment\"> * @MONITOR_FLAG_COOK_FRAMES: report frames after processing</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#monitor_flags\">monitor_flags</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MONITOR_FLAG_FCSFAIL\">MONITOR_FLAG_FCSFAIL</a><span class=\"ts\"/><span class=\"ts\"/>= 1<<<a class=\"id\" href=\"#NL80211_MNTR_FLAG_FCSFAIL\">NL80211_MNTR_FLAG_FCSFAIL</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MONITOR_FLAG_PLCPFAIL\">MONITOR_FLAG_PLCPFAIL</a><span class=\"ts\"/><span class=\"ts\"/>= 1<<<a class=\"id\" href=\"#NL80211_MNTR_FLAG_PLCPFAIL\">NL80211_MNTR_FLAG_PLCPFAIL</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MONITOR_FLAG_CONTROL\">MONITOR_FLAG_CONTROL</a><span class=\"ts\"/><span class=\"ts\"/>= 1<<<a class=\"id\" href=\"#NL80211_MNTR_FLAG_CONTROL\">NL80211_MNTR_FLAG_CONTROL</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MONITOR_FLAG_OTHER_BSS\">MONITOR_FLAG_OTHER_BSS</a><span class=\"ts\"/><span class=\"ts\"/>= 1<<<a class=\"id\" href=\"#NL80211_MNTR_FLAG_OTHER_BSS\">NL80211_MNTR_FLAG_OTHER_BSS</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MONITOR_FLAG_COOK_FRAMES\">MONITOR_FLAG_COOK_FRAMES</a><span class=\"ts\"/>= 1<<<a class=\"id\" href=\"#NL80211_MNTR_FLAG_COOK_FRAMES\">NL80211_MNTR_FLAG_COOK_FRAMES</a>,", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * enum mpath_info_flags -  mesh path information flags</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Used by the driver to indicate which info in &amp;struct mpath_info it has filled</span>", 
"<span class=\"comment\"> * in during get_station() or dump_station().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @MPATH_INFO_FRAME_QLEN: @frame_qlen filled</span>", 
"<span class=\"comment\"> * @MPATH_INFO_SN: @sn filled</span>", 
"<span class=\"comment\"> * @MPATH_INFO_METRIC: @metric filled</span>", 
"<span class=\"comment\"> * @MPATH_INFO_EXPTIME: @exptime filled</span>", 
"<span class=\"comment\"> * @MPATH_INFO_DISCOVERY_TIMEOUT: @discovery_timeout filled</span>", 
"<span class=\"comment\"> * @MPATH_INFO_DISCOVERY_RETRIES: @discovery_retries filled</span>", 
"<span class=\"comment\"> * @MPATH_INFO_FLAGS: @flags filled</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#mpath_info_flags\">mpath_info_flags</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MPATH_INFO_FRAME_QLEN\">MPATH_INFO_FRAME_QLEN</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#BIT\">BIT</a>(0),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MPATH_INFO_SN\">MPATH_INFO_SN</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#BIT\">BIT</a>(1),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MPATH_INFO_METRIC\">MPATH_INFO_METRIC</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#BIT\">BIT</a>(2),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MPATH_INFO_EXPTIME\">MPATH_INFO_EXPTIME</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#BIT\">BIT</a>(3),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MPATH_INFO_DISCOVERY_TIMEOUT\">MPATH_INFO_DISCOVERY_TIMEOUT</a><span class=\"ts\"/>= <a class=\"id\" href=\"#BIT\">BIT</a>(4),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MPATH_INFO_DISCOVERY_RETRIES\">MPATH_INFO_DISCOVERY_RETRIES</a><span class=\"ts\"/>= <a class=\"id\" href=\"#BIT\">BIT</a>(5),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MPATH_INFO_FLAGS\">MPATH_INFO_FLAGS</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#BIT\">BIT</a>(6),", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct mpath_info - mesh path information</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Mesh path information filled by driver for get_mpath() and dump_mpath().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @filled: bitfield of flags from &amp;enum mpath_info_flags</span>", 
"<span class=\"comment\"> * @frame_qlen: number of queued frames for this destination</span>", 
"<span class=\"comment\"> * @sn: target sequence number</span>", 
"<span class=\"comment\"> * @metric: metric (cost) of this mesh path</span>", 
"<span class=\"comment\"> * @exptime: expiration time for the mesh path from now, in msecs</span>", 
"<span class=\"comment\"> * @flags: mesh path flags</span>", 
"<span class=\"comment\"> * @discovery_timeout: total mesh path discovery timeout, in msecs</span>", 
"<span class=\"comment\"> * @discovery_retries: mesh path discovery retries</span>", 
"<span class=\"comment\"> * @generation: generation number for nl80211 dumps.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This number should increase every time the list of mesh paths</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>changes, i.e. when a station is added or removed, so that</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>userspace can tell whether it got a consistent snapshot.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#mpath_info\">mpath_info</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#filled\">filled</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#frame_qlen\">frame_qlen</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sn\">sn</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#metric\">metric</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#exptime\">exptime</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#discovery_timeout\">discovery_timeout</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#discovery_retries\">discovery_retries</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#generation\">generation</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct bss_parameters - BSS parameters</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Used to change BSS parameters (mainly for AP mode).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @use_cts_prot: Whether to use CTS protection</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(0 = no, 1 = yes, -1 = do not change)</span>", 
"<span class=\"comment\"> * @use_short_preamble: Whether the use of short preambles is allowed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(0 = no, 1 = yes, -1 = do not change)</span>", 
"<span class=\"comment\"> * @use_short_slot_time: Whether the use of short slot time is allowed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(0 = no, 1 = yes, -1 = do not change)</span>", 
"<span class=\"comment\"> * @basic_rates: basic rates in IEEE 802.11 format</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(or NULL for no change)</span>", 
"<span class=\"comment\"> * @basic_rates_len: number of basic rates</span>", 
"<span class=\"comment\"> * @ap_isolate: do not forward packets between connected stations</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#bss_parameters\">bss_parameters</a> {", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#use_cts_prot\">use_cts_prot</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#use_short_preamble\">use_short_preamble</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#use_short_slot_time\">use_short_slot_time</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#basic_rates\">basic_rates</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#basic_rates_len\">basic_rates_len</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ap_isolate\">ap_isolate</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#mesh_config\">mesh_config</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* Timeouts in ms */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* Mesh plink management parameters */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#dot11MeshRetryTimeout\">dot11MeshRetryTimeout</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#dot11MeshConfirmTimeout\">dot11MeshConfirmTimeout</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#dot11MeshHoldingTimeout\">dot11MeshHoldingTimeout</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#dot11MeshMaxPeerLinks\">dot11MeshMaxPeerLinks</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a>  <a class=\"id\" href=\"#dot11MeshMaxRetries\">dot11MeshMaxRetries</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a>  <a class=\"id\" href=\"#dot11MeshTTL\">dot11MeshTTL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#auto_open_plinks\">auto_open_plinks</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* HWMP parameters */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a>  <a class=\"id\" href=\"#dot11MeshHWMPmaxPREQretries\">dot11MeshHWMPmaxPREQretries</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#path_refresh_time\">path_refresh_time</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#min_discovery_timeout\">min_discovery_timeout</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#dot11MeshHWMPactivePathTimeout\">dot11MeshHWMPactivePathTimeout</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#dot11MeshHWMPpreqMinInterval\">dot11MeshHWMPpreqMinInterval</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#dot11MeshHWMPnetDiameterTraversalTime\">dot11MeshHWMPnetDiameterTraversalTime</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a>  <a class=\"id\" href=\"#dot11MeshHWMPRootMode\">dot11MeshHWMPRootMode</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct ieee80211_txq_params - TX queue parameters</span>", 
"<span class=\"comment\"> * @queue: TX queue identifier (NL80211_TXQ_Q_*)</span>", 
"<span class=\"comment\"> * @txop: Maximum burst time in units of 32 usecs, 0 meaning disabled</span>", 
"<span class=\"comment\"> * @cwmin: Minimum contention window [a value of the form 2^n-1 in the range</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>1..32767]</span>", 
"<span class=\"comment\"> * @cwmax: Maximum contention window [a value of the form 2^n-1 in the range</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>1..32767]</span>", 
"<span class=\"comment\"> * @aifs: Arbitration interframe space [0..255]</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ieee80211_txq_params\">ieee80211_txq_params</a> {", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#nl80211_txq_q\">nl80211_txq_q</a> <a class=\"id\" href=\"#queue\">queue</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#txop\">txop</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#cwmin\">cwmin</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#cwmax\">cwmax</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#aifs\">aifs</a>;", 
"};", 
"", 
"<span class=\"comment\">/* from net/wireless.h */</span>", 
"struct <a class=\"id\" href=\"#wiphy\">wiphy</a>;", 
"", 
"<span class=\"comment\">/* from net/ieee80211.h */</span>", 
"struct <a class=\"id\" href=\"#ieee80211_channel\">ieee80211_channel</a>;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct cfg80211_ssid - SSID description</span>", 
"<span class=\"comment\"> * @ssid: the SSID</span>", 
"<span class=\"comment\"> * @ssid_len: length of the ssid</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#cfg80211_ssid\">cfg80211_ssid</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#ssid\">ssid</a>[<a class=\"id\" href=\"#IEEE80211_MAX_SSID_LEN\">IEEE80211_MAX_SSID_LEN</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#ssid_len\">ssid_len</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct cfg80211_scan_request - scan request description</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @ssids: SSIDs to scan for (active scan only)</span>", 
"<span class=\"comment\"> * @n_ssids: number of SSIDs</span>", 
"<span class=\"comment\"> * @channels: channels to scan on.</span>", 
"<span class=\"comment\"> * @n_channels: total number of channels to scan</span>", 
"<span class=\"comment\"> * @ie: optional information element(s) to add into Probe Request or %NULL</span>", 
"<span class=\"comment\"> * @ie_len: length of ie in octets</span>", 
"<span class=\"comment\"> * @wiphy: the wiphy this was for</span>", 
"<span class=\"comment\"> * @dev: the interface</span>", 
"<span class=\"comment\"> * @aborted: (internal) scan request was notified as aborted</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#cfg80211_scan_request\">cfg80211_scan_request</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfg80211_ssid\">cfg80211_ssid</a> *<a class=\"id\" href=\"#ssids\">ssids</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n_ssids\">n_ssids</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#n_channels\">n_channels</a>;", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#ie\">ie</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#ie_len\">ie_len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* internal */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#wiphy\">wiphy</a> *<a class=\"id\" href=\"#wiphy\">wiphy</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#aborted\">aborted</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* keep last */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ieee80211_channel\">ieee80211_channel</a> *<a class=\"id\" href=\"#channels\">channels</a>[0];", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * enum cfg80211_signal_type - signal type</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @CFG80211_SIGNAL_TYPE_NONE: no signal strength information available</span>", 
"<span class=\"comment\"> * @CFG80211_SIGNAL_TYPE_MBM: signal strength in mBm (100*dBm)</span>", 
"<span class=\"comment\"> * @CFG80211_SIGNAL_TYPE_UNSPEC: signal strength, increasing from 0 through 100</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#cfg80211_signal_type\">cfg80211_signal_type</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CFG80211_SIGNAL_TYPE_NONE\">CFG80211_SIGNAL_TYPE_NONE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CFG80211_SIGNAL_TYPE_MBM\">CFG80211_SIGNAL_TYPE_MBM</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CFG80211_SIGNAL_TYPE_UNSPEC\">CFG80211_SIGNAL_TYPE_UNSPEC</a>,", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct cfg80211_bss - BSS description</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This structure describes a BSS (which may also be a mesh network)</span>", 
"<span class=\"comment\"> * for use in scan results and similar.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @channel: channel this BSS is on</span>", 
"<span class=\"comment\"> * @bssid: BSSID of the BSS</span>", 
"<span class=\"comment\"> * @tsf: timestamp of last received update</span>", 
"<span class=\"comment\"> * @beacon_interval: the beacon interval as from the frame</span>", 
"<span class=\"comment\"> * @capability: the capability field in host byte order</span>", 
"<span class=\"comment\"> * @information_elements: the information elements (Note that there</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is no guarantee that these are well-formed!); this is a pointer to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>either the beacon_ies or proberesp_ies depending on whether Probe</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Response frame has been received</span>", 
"<span class=\"comment\"> * @len_information_elements: total length of the information elements</span>", 
"<span class=\"comment\"> * @beacon_ies: the information elements from the last Beacon frame</span>", 
"<span class=\"comment\"> * @len_beacon_ies: total length of the beacon_ies</span>", 
"<span class=\"comment\"> * @proberesp_ies: the information elements from the last Probe Response frame</span>", 
"<span class=\"comment\"> * @len_proberesp_ies: total length of the proberesp_ies</span>", 
"<span class=\"comment\"> * @signal: signal strength value (type depends on the wiphy's signal_type)</span>", 
"<span class=\"comment\"> * @free_priv: function pointer to free private data</span>", 
"<span class=\"comment\"> * @priv: private area for driver use, has at least wiphy-&gt;bss_priv_size bytes</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#cfg80211_bss\">cfg80211_bss</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ieee80211_channel\">ieee80211_channel</a> *<a class=\"id\" href=\"#channel\">channel</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#bssid\">bssid</a>[<a class=\"id\" href=\"#ETH_ALEN\">ETH_ALEN</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#tsf\">tsf</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#beacon_interval\">beacon_interval</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#capability\">capability</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#information_elements\">information_elements</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len_information_elements\">len_information_elements</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#beacon_ies\">beacon_ies</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len_beacon_ies\">len_beacon_ies</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#proberesp_ies\">proberesp_ies</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len_proberesp_ies\">len_proberesp_ies</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s32\">s32</a> <a class=\"id\" href=\"#signal\">signal</a>;", 
"", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#free_priv\">free_priv</a>)(struct <a class=\"id\" href=\"#cfg80211_bss\">cfg80211_bss</a> *<a class=\"id\" href=\"#bss\">bss</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#priv\">priv</a>[0] <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#__aligned__\">__aligned__</a>(sizeof(void *))));", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ieee80211_bss_get_ie - find IE with given ID</span>", 
"<span class=\"comment\"> * @bss: the bss to search</span>", 
"<span class=\"comment\"> * @ie: the IE ID</span>", 
"<span class=\"comment\"> * Returns %NULL if not found.</span>", 
"<span class=\"comment\"> */</span>", 
"const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#ieee80211_bss_get_ie\">ieee80211_bss_get_ie</a>(struct <a class=\"id\" href=\"#cfg80211_bss\">cfg80211_bss</a> *<a class=\"id\" href=\"#bss\">bss</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#ie\">ie</a>);", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct cfg80211_crypto_settings - Crypto settings</span>", 
"<span class=\"comment\"> * @wpa_versions: indicates which, if any, WPA versions are enabled</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(from enum nl80211_wpa_versions)</span>", 
"<span class=\"comment\"> * @cipher_group: group key cipher suite (or 0 if unset)</span>", 
"<span class=\"comment\"> * @n_ciphers_pairwise: number of AP supported unicast ciphers</span>", 
"<span class=\"comment\"> * @ciphers_pairwise: unicast key cipher suites</span>", 
"<span class=\"comment\"> * @n_akm_suites: number of AKM suites</span>", 
"<span class=\"comment\"> * @akm_suites: AKM suites</span>", 
"<span class=\"comment\"> * @control_port: Whether user space controls IEEE 802.1X port, i.e.,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sets/clears %NL80211_STA_FLAG_AUTHORIZED. If true, the driver is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>required to assume that the port is unauthorized until authorized by</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>user space. Otherwise, port is marked authorized by default.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#cfg80211_crypto_settings\">cfg80211_crypto_settings</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#wpa_versions\">wpa_versions</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#cipher_group\">cipher_group</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n_ciphers_pairwise\">n_ciphers_pairwise</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#ciphers_pairwise\">ciphers_pairwise</a>[<a class=\"id\" href=\"#NL80211_MAX_NR_CIPHER_SUITES\">NL80211_MAX_NR_CIPHER_SUITES</a>];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n_akm_suites\">n_akm_suites</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#akm_suites\">akm_suites</a>[<a class=\"id\" href=\"#NL80211_MAX_NR_AKM_SUITES\">NL80211_MAX_NR_AKM_SUITES</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#control_port\">control_port</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct cfg80211_auth_request - Authentication request data</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This structure provides information needed to complete IEEE 802.11</span>", 
"<span class=\"comment\"> * authentication.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @bss: The BSS to authenticate with.</span>", 
"<span class=\"comment\"> * @auth_type: Authentication type (algorithm)</span>", 
"<span class=\"comment\"> * @ie: Extra IEs to add to Authentication frame or %NULL</span>", 
"<span class=\"comment\"> * @ie_len: Length of ie buffer in octets</span>", 
"<span class=\"comment\"> * @key_len: length of WEP key for shared key authentication</span>", 
"<span class=\"comment\"> * @key_idx: index of WEP key for shared key authentication</span>", 
"<span class=\"comment\"> * @key: WEP key for shared key authentication</span>", 
"<span class=\"comment\"> * @local_state_change: This is a request for a local state only, i.e., no</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Authentication frame is to be transmitted and authentication state is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to be changed without having to wait for a response from the peer STA</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(AP).</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#cfg80211_auth_request\">cfg80211_auth_request</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfg80211_bss\">cfg80211_bss</a> *<a class=\"id\" href=\"#bss\">bss</a>;", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#ie\">ie</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#ie_len\">ie_len</a>;", 
];
xr_frag_insert('l/02/c3586d2e72c67767d791df4ad848ed4e871b1c.xr', __xr_tmp);
