var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#operstate\">operstate</a> = <a class=\"id\" href=\"#IF_OPER_DORMANT\">IF_OPER_DORMANT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IF_LINK_MODE_DEFAULT\">IF_LINK_MODE_DEFAULT</a>:", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#operstate\">operstate</a> = <a class=\"id\" href=\"#operstate\">operstate</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock_bh\">write_unlock_bh</a>(&amp;<a class=\"id\" href=\"#dev_base_lock\">dev_base_lock</a>);", 
"}", 
"", 
"", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#linkwatch_urgent_event\">linkwatch_urgent_event</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#netif_running\">netif_running</a>(<a class=\"id\" href=\"#dev\">dev</a>) && <a class=\"id\" href=\"#netif_carrier_ok\">netif_carrier_ok</a>(<a class=\"id\" href=\"#dev\">dev</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qdisc_tx_changing\">qdisc_tx_changing</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"", 
"", 
"static void <a class=\"id\" href=\"#linkwatch_add_event\">linkwatch_add_event</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#lweventlist_lock\">lweventlist_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#link_watch_list\">link_watch_list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#link_watch_list\">link_watch_list</a>, &amp;<a class=\"id\" href=\"#lweventlist\">lweventlist</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_hold\">dev_hold</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#lweventlist_lock\">lweventlist_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"", 
"static void <a class=\"id\" href=\"#linkwatch_schedule_work\">linkwatch_schedule_work</a>(int <a class=\"id\" href=\"#urgent\">urgent</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#delay\">delay</a> = <a class=\"id\" href=\"#linkwatch_nextevent\">linkwatch_nextevent</a> - <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#LW_URGENT\">LW_URGENT</a>, &amp;<a class=\"id\" href=\"#linkwatch_flags\">linkwatch_flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Minimise down-time: drop delay for up event. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#urgent\">urgent</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#test_and_set_bit\">test_and_set_bit</a>(<a class=\"id\" href=\"#LW_URGENT\">LW_URGENT</a>, &amp;<a class=\"id\" href=\"#linkwatch_flags\">linkwatch_flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delay\">delay</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If we wrap around we'll delay it by at most HZ. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#delay\">delay</a> &gt; <a class=\"id\" href=\"#HZ\">HZ</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delay\">delay</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This is true if we've scheduled it immeditately or if we don't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * need an immediate execution and it's already pending.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#schedule_delayed_work\">schedule_delayed_work</a>(&amp;<a class=\"id\" href=\"#linkwatch_work\">linkwatch_work</a>, <a class=\"id\" href=\"#delay\">delay</a>) == !<a class=\"id\" href=\"#delay\">delay</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't bother if there is nothing urgent. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#LW_URGENT\">LW_URGENT</a>, &amp;<a class=\"id\" href=\"#linkwatch_flags\">linkwatch_flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* It's already running which is good enough. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cancel_delayed_work\">cancel_delayed_work</a>(&amp;<a class=\"id\" href=\"#linkwatch_work\">linkwatch_work</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Otherwise we reschedule it again for immediate exection. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedule_delayed_work\">schedule_delayed_work</a>(&amp;<a class=\"id\" href=\"#linkwatch_work\">linkwatch_work</a>, 0);", 
"}", 
"", 
"", 
"static void <a class=\"id\" href=\"#linkwatch_do_dev\">linkwatch_do_dev</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Make sure the above read is complete since it can be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * rewritten as soon as we clear the bit below.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb__before_clear_bit\">smp_mb__before_clear_bit</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We are about to handle this device,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so new events can be accepted</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#__LINK_STATE_LINKWATCH_PENDING\">__LINK_STATE_LINKWATCH_PENDING</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#state\">state</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rfc2863_policy\">rfc2863_policy</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IFF_UP\">IFF_UP</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#netif_carrier_ok\">netif_carrier_ok</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_activate\">dev_activate</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_deactivate\">dev_deactivate</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#netdev_state_change\">netdev_state_change</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_put\">dev_put</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__linkwatch_run_queue\">__linkwatch_run_queue</a>(int <a class=\"id\" href=\"#urgent_only\">urgent_only</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#wrk\">wrk</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Limit the number of linkwatch events to one</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * per second so that a runaway driver does not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cause a storm of messages on the netlink</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * socket.  This limit does not apply to up events</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * while the device qdisc is down.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#urgent_only\">urgent_only</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#linkwatch_nextevent\">linkwatch_nextevent</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#HZ\">HZ</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Limit wrap-around effect on delay. */</span>", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#time_after\">time_after</a>(<a class=\"id\" href=\"#linkwatch_nextevent\">linkwatch_nextevent</a>, <a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#HZ\">HZ</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#linkwatch_nextevent\">linkwatch_nextevent</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#LW_URGENT\">LW_URGENT</a>, &amp;<a class=\"id\" href=\"#linkwatch_flags\">linkwatch_flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#lweventlist_lock\">lweventlist_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_splice_init\">list_splice_init</a>(&amp;<a class=\"id\" href=\"#lweventlist\">lweventlist</a>, &amp;<a class=\"id\" href=\"#wrk\">wrk</a>);", 
"", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#wrk\">wrk</a>)) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(&amp;<a class=\"id\" href=\"#wrk\">wrk</a>, struct <a class=\"id\" href=\"#net_device\">net_device</a>, <a class=\"id\" href=\"#link_watch_list\">link_watch_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#link_watch_list\">link_watch_list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#urgent_only\">urgent_only</a> && !<a class=\"id\" href=\"#linkwatch_urgent_event\">linkwatch_urgent_event</a>(<a class=\"id\" href=\"#dev\">dev</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#link_watch_list\">link_watch_list</a>, &amp;<a class=\"id\" href=\"#lweventlist\">lweventlist</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#lweventlist_lock\">lweventlist_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#linkwatch_do_dev\">linkwatch_do_dev</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#lweventlist_lock\">lweventlist_lock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#lweventlist\">lweventlist</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#linkwatch_schedule_work\">linkwatch_schedule_work</a>(0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#lweventlist_lock\">lweventlist_lock</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#linkwatch_forget_dev\">linkwatch_forget_dev</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#clean\">clean</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#lweventlist_lock\">lweventlist_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#link_watch_list\">link_watch_list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#link_watch_list\">link_watch_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clean\">clean</a> = 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#lweventlist_lock\">lweventlist_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#clean\">clean</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#linkwatch_do_dev\">linkwatch_do_dev</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"", 
"", 
"<span class=\"comment\">/* Must be called with the rtnl semaphore held */</span>", 
"void <a class=\"id\" href=\"#linkwatch_run_queue\">linkwatch_run_queue</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__linkwatch_run_queue\">__linkwatch_run_queue</a>(0);", 
"}", 
"", 
"", 
"static void <a class=\"id\" href=\"#linkwatch_event\">linkwatch_event</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#dummy\">dummy</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rtnl_lock\">rtnl_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__linkwatch_run_queue\">__linkwatch_run_queue</a>(<a class=\"id\" href=\"#time_after\">time_after</a>(<a class=\"id\" href=\"#linkwatch_nextevent\">linkwatch_nextevent</a>, <a class=\"id\" href=\"#jiffies\">jiffies</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rtnl_unlock\">rtnl_unlock</a>();", 
"}", 
"", 
"", 
"void <a class=\"id\" href=\"#linkwatch_fire_event\">linkwatch_fire_event</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#urgent\">urgent</a> = <a class=\"id\" href=\"#linkwatch_urgent_event\">linkwatch_urgent_event</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_and_set_bit\">test_and_set_bit</a>(<a class=\"id\" href=\"#__LINK_STATE_LINKWATCH_PENDING\">__LINK_STATE_LINKWATCH_PENDING</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#state\">state</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#linkwatch_add_event\">linkwatch_add_event</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>} else if (!<a class=\"id\" href=\"#urgent\">urgent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#linkwatch_schedule_work\">linkwatch_schedule_work</a>(<a class=\"id\" href=\"#urgent\">urgent</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#linkwatch_fire_event\">linkwatch_fire_event</a>);", 
];
xr_frag_insert('l/02/d8ba97469aa9c2a690366be44c9d3d594544a1.xr', __xr_tmp);
