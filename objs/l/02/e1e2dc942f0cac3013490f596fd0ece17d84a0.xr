var __xr_tmp = [
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 on success.</span>", 
"<span class=\"comment\"> * @task_setpgid:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission before setting the process group identifier of the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>process @p to @pgid.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@p contains the task_struct for process being modified.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@pgid contains the new pgid.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @task_getpgid:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission before getting the process group identifier of the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>process @p.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@p contains the task_struct for the process.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @task_getsid:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission before getting the session identifier of the process</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@p.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@p contains the task_struct for the process.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @task_getsecid:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Retrieve the security identifier of the process @p.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@p contains the task_struct for the process and place is into @secid.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>In case of failure, @secid will be set to zero.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @task_setnice:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission before setting the nice value of @p to @nice.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@p contains the task_struct of process.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@nice contains the new nice value.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @task_setioprio</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission before setting the ioprio value of @p to @ioprio.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@p contains the task_struct of process.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ioprio contains the new ioprio value</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @task_getioprio</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission before getting the ioprio value of @p.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@p contains the task_struct of process.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @task_setrlimit:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission before setting the resource limits of the current</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>process for @resource to @new_rlim.  The old resource limit values can</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>be examined by dereferencing (current-&gt;signal-&gt;rlim + resource).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@resource contains the resource whose limit is being set.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@new_rlim contains the new limits for @resource.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @task_setscheduler:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission before setting scheduling policy and/or parameters of</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>process @p based on @policy and @lp.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@p contains the task_struct for process.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@policy contains the scheduling policy.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@lp contains the scheduling parameters.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @task_getscheduler:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission before obtaining scheduling information for process</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@p.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@p contains the task_struct for process.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @task_movememory</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission before moving memory owned by process @p.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@p contains the task_struct for process.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @task_kill:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission before sending signal @sig to @p.  @info can be NULL,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the constant 1, or a pointer to a siginfo structure.  If @info is 1 or</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>SI_FROMKERNEL(info) is true, then the signal should be viewed as coming</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>from the kernel and should typically be permitted.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>SIGIO signals are handled separately by the send_sigiotask hook in</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>file_security_ops.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@p contains the task_struct for process.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@info contains the signal information.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sig contains the signal value.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@secid contains the sid of the process where the signal originated</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @task_wait:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission before allowing a process to reap a child process @p</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and collect its status information.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@p contains the task_struct for process.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @task_prctl:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission before performing a process control operation on the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>current process.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@option contains the operation.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@arg2 contains a argument.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@arg3 contains a argument.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@arg4 contains a argument.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@arg5 contains a argument.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return -ENOSYS if no-one wanted to handle this op, any other value to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>cause prctl() to return immediately with that value.</span>", 
"<span class=\"comment\"> * @task_to_inode:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Set the security attributes for an inode based on an associated task's</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>security attributes, e.g. for /proc/pid inodes.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@p contains the task_struct for the task.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@inode contains the inode structure for the inode.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Security hooks for Netlink messaging.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @netlink_send:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Save security information for a netlink message so that permission</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>checking can be performed when the message is processed.  The security</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>information can be saved using the eff_cap field of the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>netlink_skb_parms structure.  Also may be used to provide fine</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>grained control over message transmission.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sk associated sock of task sending the message.,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb contains the sk_buff structure for the netlink message.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if the information was successfully saved and message</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is allowed to be transmitted.</span>", 
"<span class=\"comment\"> * @netlink_recv:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission before processing the received netlink message in</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb contains the sk_buff structure for the netlink message.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@cap indicates the capability required</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Security hooks for Unix domain networking.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @unix_stream_connect:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permissions before establishing a Unix domain stream connection</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>between @sock and @other.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sock contains the socket structure.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@other contains the peer socket structure.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @unix_may_send:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permissions before connecting or sending datagrams from @sock to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@other.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sock contains the socket structure.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sock contains the peer socket structure.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The @unix_stream_connect and @unix_may_send hooks were necessary because</span>", 
"<span class=\"comment\"> * Linux provides an alternative to the conventional file name space for Unix</span>", 
"<span class=\"comment\"> * domain sockets.  Whereas binding and connecting to sockets in the file name</span>", 
"<span class=\"comment\"> * space is mediated by the typical file permissions (and caught by the mknod</span>", 
"<span class=\"comment\"> * and permission hooks in inode_security_ops), binding and connecting to</span>", 
"<span class=\"comment\"> * sockets in the abstract name space is completely unmediated.  Sufficient</span>", 
"<span class=\"comment\"> * control of Unix domain sockets in the abstract name space isn't possible</span>", 
"<span class=\"comment\"> * using only the socket layer hooks, since we need to know the actual target</span>", 
"<span class=\"comment\"> * socket, which is not looked up until we are inside the af_unix code.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Security hooks for socket operations.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @socket_create:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permissions prior to creating a new socket.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@family contains the requested protocol family.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@type contains the requested communications type.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@protocol contains the requested protocol.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@kern set to 1 if a kernel socket.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @socket_post_create:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This hook allows a module to update or allocate a per-socket security</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>structure. Note that the security field was not added directly to the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>socket structure, but rather, the socket security information is stored</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>in the associated inode.  Typically, the inode alloc_security hook will</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>allocate and and attach security information to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sock-&gt;inode-&gt;i_security.  This hook may be used to update the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sock-&gt;inode-&gt;i_security field with additional information that wasn't</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>available when the inode was allocated.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sock contains the newly created socket structure.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@family contains the requested protocol family.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@type contains the requested communications type.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@protocol contains the requested protocol.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@kern set to 1 if a kernel socket.</span>", 
"<span class=\"comment\"> * @socket_bind:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission before socket protocol layer bind operation is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>performed and the socket @sock is bound to the address specified in the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@address parameter.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sock contains the socket structure.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@address contains the address to bind to.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@addrlen contains the length of address.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @socket_connect:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission before socket protocol layer connect operation</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>attempts to connect socket @sock to a remote address, @address.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sock contains the socket structure.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@address contains the address of remote endpoint.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@addrlen contains the length of address.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @socket_listen:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission before socket protocol layer listen operation.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sock contains the socket structure.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@backlog contains the maximum length for the pending connection queue.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @socket_accept:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission before accepting a new connection.  Note that the new</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>socket, @newsock, has been created and some information copied to it,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>but the accept operation has not actually been performed.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sock contains the listening socket structure.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@newsock contains the newly created server socket for connection.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @socket_sendmsg:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission before transmitting a message to another socket.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sock contains the socket structure.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@msg contains the message to be transmitted.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@size contains the size of message.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @socket_recvmsg:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission before receiving a message from a socket.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sock contains the socket structure.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@msg contains the message structure.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@size contains the size of message structure.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@flags contains the operational flags.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @socket_getsockname:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission before the local address (name) of the socket object</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sock is retrieved.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sock contains the socket structure.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @socket_getpeername:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission before the remote address (name) of a socket object</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sock is retrieved.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sock contains the socket structure.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @socket_getsockopt:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permissions before retrieving the options associated with socket</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sock.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sock contains the socket structure.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@level contains the protocol level to retrieve option from.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@optname contains the name of option to retrieve.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @socket_setsockopt:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permissions before setting the options associated with socket</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sock.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sock contains the socket structure.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@level contains the protocol level to set options for.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@optname contains the name of the option to set.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @socket_shutdown:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Checks permission before all or part of a connection on the socket</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sock is shut down.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sock contains the socket structure.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@how contains the flag indicating how future sends and receives are handled.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @socket_sock_rcv_skb:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permissions on incoming network packets.  This hook is distinct</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>from Netfilter's IP input hooks since it is the first time that the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>incoming sk_buff @skb has been associated with a particular socket, @sk.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Must not sleep inside this hook because some callers hold spinlocks.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sk contains the sock (not socket) associated with the incoming sk_buff.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb contains the incoming network data.</span>", 
"<span class=\"comment\"> * @socket_getpeersec_stream:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This hook allows the security module to provide peer socket security</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>state for unix or connected tcp sockets to userspace via getsockopt</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>SO_GETPEERSEC.  For tcp sockets this can be meaningful if the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>socket is associated with an ipsec SA.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sock is the local socket.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@optval userspace memory where the security state is to be copied.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@optlen userspace int where the module should copy the actual length</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>of the security state.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@len as input is the maximum length to copy to userspace provided</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>by the caller.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if all is well, otherwise, typical getsockopt return</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>values.</span>", 
"<span class=\"comment\"> * @socket_getpeersec_dgram:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This hook allows the security module to provide peer socket security</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>state for udp sockets on a per-packet basis to userspace via</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>getsockopt SO_GETPEERSEC.  The application must first have indicated</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the IP_PASSSEC option via getsockopt.  It can then retrieve the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>security state returned by this hook for a packet via the SCM_SECURITY</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ancillary message type.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb is the skbuff for the packet being queried</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@secdata is a pointer to a buffer in which to copy the security data</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@seclen is the maximum length for @secdata</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 on success, error on failure.</span>", 
"<span class=\"comment\"> * @sk_alloc_security:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Allocate and attach a security structure to the sk-&gt;sk_security field,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>which is used to copy security attributes between local stream sockets.</span>", 
"<span class=\"comment\"> * @sk_free_security:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Deallocate security structure.</span>", 
"<span class=\"comment\"> * @sk_clone_security:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Clone/copy security structure.</span>", 
"<span class=\"comment\"> * @sk_getsecid:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Retrieve the LSM-specific secid for the sock to enable caching of network</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>authorizations.</span>", 
"<span class=\"comment\"> * @sock_graft:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Sets the socket's isec sid to the sock's sid.</span>", 
"<span class=\"comment\"> * @inet_conn_request:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Sets the openreq's sid to socket's sid with MLS portion taken from peer sid.</span>", 
"<span class=\"comment\"> * @inet_csk_clone:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Sets the new child socket's sid to the openreq sid.</span>", 
"<span class=\"comment\"> * @inet_conn_established:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Sets the connection's peersid to the secmark on skb.</span>", 
"<span class=\"comment\"> * @req_classify_flow:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Sets the flow's sid to the openreq sid.</span>", 
"<span class=\"comment\"> * @tun_dev_create:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permissions prior to creating a new TUN device.</span>", 
"<span class=\"comment\"> * @tun_dev_post_create:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This hook allows a module to update or allocate a per-socket security</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>structure.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sk contains the newly created sock structure.</span>", 
"<span class=\"comment\"> * @tun_dev_attach:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permissions prior to attaching to a persistent TUN device.  This</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>hook can also be used by the module to update any security state</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>associated with the TUN device's sock structure.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sk contains the existing sock structure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Security hooks for XFRM operations.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @xfrm_policy_alloc_security:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ctxp is a pointer to the xfrm_sec_ctx being added to Security Policy</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Database used by the XFRM system.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sec_ctx contains the security context information being provided by</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the user-level policy update program (e.g., setkey).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Allocate a security structure to the xp-&gt;security field; the security</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>field is initialized to NULL when the xfrm_policy is allocated.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if operation was successful (memory to allocate, legal context)</span>", 
"<span class=\"comment\"> * @xfrm_policy_clone_security:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@old_ctx contains an existing xfrm_sec_ctx.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@new_ctxp contains a new xfrm_sec_ctx being cloned from old.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Allocate a security structure in new_ctxp that contains the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>information from the old_ctx structure.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if operation was successful (memory to allocate).</span>", 
"<span class=\"comment\"> * @xfrm_policy_free_security:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ctx contains the xfrm_sec_ctx</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Deallocate xp-&gt;security.</span>", 
"<span class=\"comment\"> * @xfrm_policy_delete_security:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ctx contains the xfrm_sec_ctx.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Authorize deletion of xp-&gt;security.</span>", 
"<span class=\"comment\"> * @xfrm_state_alloc_security:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@x contains the xfrm_state being added to the Security Association</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Database by the XFRM system.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sec_ctx contains the security context information being provided by</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the user-level SA generation program (e.g., setkey or racoon).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@secid contains the secid from which to take the mls portion of the context.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Allocate a security structure to the x-&gt;security field; the security</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>field is initialized to NULL when the xfrm_state is allocated. Set the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>context to correspond to either sec_ctx or polsec, with the mls portion</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>taken from secid in the latter case.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if operation was successful (memory to allocate, legal context).</span>", 
"<span class=\"comment\"> * @xfrm_state_free_security:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@x contains the xfrm_state.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Deallocate x-&gt;security.</span>", 
"<span class=\"comment\"> * @xfrm_state_delete_security:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@x contains the xfrm_state.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Authorize deletion of x-&gt;security.</span>", 
"<span class=\"comment\"> * @xfrm_policy_lookup:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ctx contains the xfrm_sec_ctx for which the access control is being</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>checked.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@fl_secid contains the flow security label that is used to authorize</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>access to the policy xp.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dir contains the direction of the flow (input or output).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission when a flow selects a xfrm_policy for processing</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>XFRMs on a packet.  The hook is called when selecting either a</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>per-socket policy or a generic xfrm policy.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted, -ESRCH otherwise, or -errno</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>on other errors.</span>", 
"<span class=\"comment\"> * @xfrm_state_pol_flow_match:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@x contains the state to match.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@xp contains the policy to check for a match.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@fl contains the flow to check for a match.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 1 if there is a match.</span>", 
"<span class=\"comment\"> * @xfrm_decode_session:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb points to skb to decode.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@secid points to the flow key secid to set.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ckall says if all xfrms used should be checked for same secid.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if ckall is zero or all xfrms used have the same secid.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Security hooks affecting all Key Management operations</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @key_alloc:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Permit allocation of a key and assign security data. Note that key does</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>not have a serial number assigned at this point.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@key points to the key.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@flags is the allocation flags</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted, -ve error otherwise.</span>", 
"<span class=\"comment\"> * @key_free:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Notification of destruction; free security data.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@key points to the key.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>No return value.</span>", 
"<span class=\"comment\"> * @key_permission:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>See whether a specific operational right is granted to a process on a</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>key.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@key_ref refers to the key (key pointer + possession attribute bit).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@cred points to the credentials to provide the context against which to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>evaluate the security data on the key.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@perm describes the combination of permissions required of this key.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 1 if permission granted, 0 if permission denied and -ve it the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>normal permissions model should be effected.</span>", 
"<span class=\"comment\"> * @key_getsecurity:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Get a textual representation of the security context attached to a key</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>for the purposes of honouring KEYCTL_GETSECURITY.  This function</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>allocates the storage for the NUL-terminated string and the caller</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>should free it.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@key points to the key to be queried.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@_buffer points to a pointer that should be set to point to the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/> resulting string (if no label or an error occurs).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return the length of the string (including terminating NUL) or -ve if</span>", 
"<span class=\"comment\"> *      an error.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>May also return 0 (and a NULL buffer pointer) if there is no label.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Security hooks affecting all System V IPC operations.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @ipc_permission:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permissions for access to IPC</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ipcp contains the kernel IPC permission structure</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@flag contains the desired (requested) permission set</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @ipc_getsecid:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Get the secid associated with the ipc object.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ipcp contains the kernel IPC permission structure.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@secid contains a pointer to the location where result will be saved.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>In case of failure, @secid will be set to zero.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Security hooks for individual messages held in System V IPC message queues</span>", 
"<span class=\"comment\"> * @msg_msg_alloc_security:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Allocate and attach a security structure to the msg-&gt;security field.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The security field is initialized to NULL when the structure is first</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>created.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@msg contains the message structure to be modified.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if operation was successful and permission is granted.</span>", 
"<span class=\"comment\"> * @msg_msg_free_security:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Deallocate the security structure for this message.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@msg contains the message structure to be modified.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Security hooks for System V IPC Message Queues</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @msg_queue_alloc_security:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Allocate and attach a security structure to the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>msq-&gt;q_perm.security field. The security field is initialized to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>NULL when the structure is first created.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@msq contains the message queue structure to be modified.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if operation was successful and permission is granted.</span>", 
"<span class=\"comment\"> * @msg_queue_free_security:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Deallocate security structure for this message queue.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@msq contains the message queue structure to be modified.</span>", 
"<span class=\"comment\"> * @msg_queue_associate:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission when a message queue is requested through the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>msgget system call.  This hook is only called when returning the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>message queue identifier for an existing message queue, not when a</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>new message queue is created.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@msq contains the message queue to act upon.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@msqflg contains the operation control flags.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @msg_queue_msgctl:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission when a message control operation specified by @cmd</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is to be performed on the message queue @msq.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The @msq may be NULL, e.g. for IPC_INFO or MSG_INFO.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@msq contains the message queue to act upon.  May be NULL.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@cmd contains the operation to be performed.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @msg_queue_msgsnd:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission before a message, @msg, is enqueued on the message</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>queue, @msq.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@msq contains the message queue to send message to.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@msg contains the message to be enqueued.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@msqflg contains operational flags.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @msg_queue_msgrcv:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission before a message, @msg, is removed from the message</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>queue, @msq.  The @target task structure contains a pointer to the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>process that will be receiving the message (not equal to the current</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>process when inline receives are being performed).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@msq contains the message queue to retrieve message from.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@msg contains the message destination.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@target contains the task structure for recipient process.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@type contains the type of message requested.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@mode contains the operational flags.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Security hooks for System V Shared Memory Segments</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @shm_alloc_security:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Allocate and attach a security structure to the shp-&gt;shm_perm.security</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>field.  The security field is initialized to NULL when the structure is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>first created.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@shp contains the shared memory structure to be modified.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if operation was successful and permission is granted.</span>", 
"<span class=\"comment\"> * @shm_free_security:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Deallocate the security struct for this memory segment.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@shp contains the shared memory structure to be modified.</span>", 
"<span class=\"comment\"> * @shm_associate:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission when a shared memory region is requested through the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>shmget system call.  This hook is only called when returning the shared</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>memory region identifier for an existing region, not when a new shared</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>memory region is created.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@shp contains the shared memory structure to be modified.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@shmflg contains the operation control flags.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @shm_shmctl:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission when a shared memory control operation specified by</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@cmd is to be performed on the shared memory region @shp.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The @shp may be NULL, e.g. for IPC_INFO or SHM_INFO.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@shp contains shared memory structure to be modified.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@cmd contains the operation to be performed.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @shm_shmat:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permissions prior to allowing the shmat system call to attach the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>shared memory segment @shp to the data segment of the calling process.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The attaching address is specified by @shmaddr.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@shp contains the shared memory structure to be modified.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@shmaddr contains the address to attach memory region to.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@shmflg contains the operational flags.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Security hooks for System V Semaphores</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @sem_alloc_security:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Allocate and attach a security structure to the sma-&gt;sem_perm.security</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>field.  The security field is initialized to NULL when the structure is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>first created.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sma contains the semaphore structure</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if operation was successful and permission is granted.</span>", 
"<span class=\"comment\"> * @sem_free_security:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>deallocate security struct for this semaphore</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sma contains the semaphore structure.</span>", 
"<span class=\"comment\"> * @sem_associate:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission when a semaphore is requested through the semget</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>system call.  This hook is only called when returning the semaphore</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>identifier for an existing semaphore, not when a new one must be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>created.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sma contains the semaphore structure.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@semflg contains the operation control flags.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @sem_semctl:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission when a semaphore operation specified by @cmd is to be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>performed on the semaphore @sma.  The @sma may be NULL, e.g. for</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>IPC_INFO or SEM_INFO.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sma contains the semaphore structure.  May be NULL.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@cmd contains the operation to be performed.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @sem_semop</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permissions before performing operations on members of the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>semaphore set @sma.  If the @alter flag is nonzero, the semaphore set</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>may be modified.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sma contains the semaphore structure.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sops contains the operations to perform.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@nsops contains the number of operations to perform.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@alter contains the flag indicating whether changes are to be made.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @ptrace_access_check:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission before allowing the current process to trace the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@child process.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Security modules may also want to perform a process tracing check</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>during an execve in the set_security or apply_creds hooks of</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>tracing check during an execve in the bprm_set_creds hook of</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>binprm_security_ops if the process is being traced and its security</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>attributes would be changed by the execve.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@child contains the task_struct structure for the target process.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@mode contains the PTRACE_MODE flags indicating the form of access.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @ptrace_traceme:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check that the @parent process has sufficient permission to trace the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>current process before allowing the current process to present itself</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to the @parent process for tracing.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The parent process will still have to undergo the ptrace_access_check</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>checks before it is allowed to trace this one.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@parent contains the task_struct structure for debugger process.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @capget:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Get the @effective, @inheritable, and @permitted capability sets for</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the @target process.  The hook may also perform permission checking to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>determine if the current process is allowed to see the capability sets</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>of the @target process.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@target contains the task_struct structure for target process.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@effective contains the effective capability set.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@inheritable contains the inheritable capability set.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@permitted contains the permitted capability set.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if the capability sets were successfully obtained.</span>", 
"<span class=\"comment\"> * @capset:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Set the @effective, @inheritable, and @permitted capability sets for</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the current process.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@new contains the new credentials structure for target process.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@old contains the current credentials structure for target process.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@effective contains the effective capability set.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@inheritable contains the inheritable capability set.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@permitted contains the permitted capability set.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 and update @new if permission is granted.</span>", 
"<span class=\"comment\"> * @capable:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check whether the @tsk process has the @cap capability in the indicated</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>credentials.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@tsk contains the task_struct for the process.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@cred contains the credentials to use.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@cap contains the capability &lt;include/linux/capability.h&gt;.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@audit: Whether to write an audit message or not</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if the capability is granted for @tsk.</span>", 
"<span class=\"comment\"> * @sysctl:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission before accessing the @table sysctl variable in the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>manner specified by @op.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@table contains the ctl_table structure for the sysctl variable.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@op contains the operation (001 = search, 002 = write, 004 = read).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @syslog:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission before accessing the kernel message ring or changing</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>logging to the console.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>See the syslog(2) manual page for an explanation of the @type values.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@type contains the type of action.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@from_file indicates the context of action (if it came from /proc).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @settime:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permission to change the system time.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>struct timespec and timezone are defined in include/linux/time.h</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ts contains new time</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@tz contains new timezone</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> * @vm_enough_memory:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Check permissions for allocating a new virtual mapping.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@mm contains the mm struct it is being added to.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@pages contains the number of pages.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if permission is granted.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @secid_to_secctx:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Convert secid to security context.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@secid contains the security ID.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@secdata contains the pointer that stores the converted security context.</span>", 
"<span class=\"comment\"> * @secctx_to_secid:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Convert security context to secid.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@secid contains the pointer to the generated security ID.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@secdata contains the security context.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @release_secctx:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Release the security context.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@secdata contains the security context.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@seclen contains the length of the security context.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Security hooks for Audit</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @audit_rule_init:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Allocate and initialize an LSM audit rule structure.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@field contains the required Audit action. Fields flags are defined in include/linux/audit.h</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@op contains the operator the rule uses.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@rulestr contains the context where the rule will be applied to.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@lsmrule contains a pointer to receive the result.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 0 if @lsmrule has been successfully set,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>-EINVAL in case of an invalid rule.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @audit_rule_known:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Specifies whether given @rule contains any fields related to current LSM.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@rule contains the audit rule of interest.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 1 in case of relation found, 0 otherwise.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @audit_rule_match:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Determine if given @secid matches a rule previously approved</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>by @audit_rule_known.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@secid contains the security id in question.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@field contains the field which relates to current LSM.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@op contains the operator that will be used for matching.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@rule points to the audit rule that will be checked against.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@actx points to the audit context associated with the check.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 1 if secid matches the rule, 0 if it does not, -ERRNO on failure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @audit_rule_free:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Deallocate the LSM audit rule structure previously allocated by</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>audit_rule_init.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@rule contains the allocated rule</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @inode_notifysecctx:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Notify the security module of what the security context of an inode</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>should be.  Initializes the incore security context managed by the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>security module for this inode.  Example usage:  NFS client invokes</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>this hook to initialize the security context in its incore inode to the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>value provided by the server for the file when the server returned the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>file's attributes to the client.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>Must be called with inode-&gt;i_mutex locked.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>@inode we wish to set the security context of.</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>@ctx contains the string which we wish to set in the inode.</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>@ctxlen contains the length of @ctx.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @inode_setsecctx:</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>Change the security context of an inode.  Updates the</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>incore security context managed by the security module and invokes the</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>fs code as needed (via __vfs_setxattr_noperm) to update any backing</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>xattrs that represent the context.  Example usage:  NFS server invokes</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>this hook to change the security context in its incore inode and on the</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>backing filesystem to a value provided by the client on a SETATTR</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>operation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>Must be called with inode-&gt;i_mutex locked.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>@dentry contains the inode we wish to set the security context of.</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>@ctx contains the string which we wish to set in the inode.</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>@ctxlen contains the length of @ctx.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @inode_getsecctx:</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>Returns a string containing all relavent security context information</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>@inode we wish to set the security context of.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ctx is a pointer in which to place the allocated security context.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ctxlen points to the place to put the length of @ctx.</span>", 
"<span class=\"comment\"> * This is the main security structure.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#security_operations\">security_operations</a> {", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#name\">name</a>[<a class=\"id\" href=\"#SECURITY_NAME_MAX\">SECURITY_NAME_MAX</a> + 1];", 
"", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#ptrace_access_check\">ptrace_access_check</a>) (struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#child\">child</a>, unsigned int <a class=\"id\" href=\"#mode\">mode</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#ptrace_traceme\">ptrace_traceme</a>) (struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#capget\">capget</a>) (struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#target\">target</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#kernel_cap_t\">kernel_cap_t</a> *<a class=\"id\" href=\"#effective\">effective</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#kernel_cap_t\">kernel_cap_t</a> *<a class=\"id\" href=\"#inheritable\">inheritable</a>, <a class=\"id\" href=\"#kernel_cap_t\">kernel_cap_t</a> *<a class=\"id\" href=\"#permitted\">permitted</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#capset\">capset</a>) (struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#new\">new</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#old\">old</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       const <a class=\"id\" href=\"#kernel_cap_t\">kernel_cap_t</a> *<a class=\"id\" href=\"#effective\">effective</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       const <a class=\"id\" href=\"#kernel_cap_t\">kernel_cap_t</a> *<a class=\"id\" href=\"#inheritable\">inheritable</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       const <a class=\"id\" href=\"#kernel_cap_t\">kernel_cap_t</a> *<a class=\"id\" href=\"#permitted\">permitted</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#capable\">capable</a>) (struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#cap\">cap</a>, int <a class=\"id\" href=\"#audit\">audit</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#sysctl\">sysctl</a>) (struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#op\">op</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#quotactl\">quotactl</a>) (int <a class=\"id\" href=\"#cmds\">cmds</a>, int <a class=\"id\" href=\"#type\">type</a>, int <a class=\"id\" href=\"#id\">id</a>, struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#quota_on\">quota_on</a>) (struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#syslog\">syslog</a>) (int <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#from_file\">from_file</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#settime\">settime</a>) (struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#ts\">ts</a>, struct <a class=\"id\" href=\"#timezone\">timezone</a> *<a class=\"id\" href=\"#tz\">tz</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#vm_enough_memory\">vm_enough_memory</a>) (struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, long <a class=\"id\" href=\"#pages\">pages</a>);", 
"", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#bprm_set_creds\">bprm_set_creds</a>) (struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#bprm_check_security\">bprm_check_security</a>) (struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#bprm_secureexec\">bprm_secureexec</a>) (struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#bprm_committing_creds\">bprm_committing_creds</a>) (struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#bprm_committed_creds\">bprm_committed_creds</a>) (struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>);", 
"", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#sb_alloc_security\">sb_alloc_security</a>) (struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#sb_free_security\">sb_free_security</a>) (struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#sb_copy_data\">sb_copy_data</a>) (char *<a class=\"id\" href=\"#orig\">orig</a>, char *<a class=\"id\" href=\"#copy\">copy</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#sb_kern_mount\">sb_kern_mount</a>) (struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, int <a class=\"id\" href=\"#flags\">flags</a>, void *<a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#sb_show_options\">sb_show_options</a>) (struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#sb_statfs\">sb_statfs</a>) (struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#sb_mount\">sb_mount</a>) (char *<a class=\"id\" href=\"#dev_name\">dev_name</a>, struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> char *<a class=\"id\" href=\"#type\">type</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>, void *<a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#sb_umount\">sb_umount</a>) (struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>, int <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#sb_pivotroot\">sb_pivotroot</a>) (struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#old_path\">old_path</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#new_path\">new_path</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#sb_set_mnt_opts\">sb_set_mnt_opts</a>) (struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#security_mnt_opts\">security_mnt_opts</a> *<a class=\"id\" href=\"#opts\">opts</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#sb_clone_mnt_opts\">sb_clone_mnt_opts</a>) (const struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#oldsb\">oldsb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#newsb\">newsb</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#sb_parse_opts_str\">sb_parse_opts_str</a>) (char *<a class=\"id\" href=\"#options\">options</a>, struct <a class=\"id\" href=\"#security_mnt_opts\">security_mnt_opts</a> *<a class=\"id\" href=\"#opts\">opts</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SECURITY_PATH\">CONFIG_SECURITY_PATH</a>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#path_unlink\">path_unlink</a>) (struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#dir\">dir</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#path_mkdir\">path_mkdir</a>) (struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#dir\">dir</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, int <a class=\"id\" href=\"#mode\">mode</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#path_rmdir\">path_rmdir</a>) (struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#dir\">dir</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#path_mknod\">path_mknod</a>) (struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#dir\">dir</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, int <a class=\"id\" href=\"#mode\">mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned int <a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#path_truncate\">path_truncate</a>) (struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#path_symlink\">path_symlink</a>) (struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#dir\">dir</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const char *<a class=\"id\" href=\"#old_name\">old_name</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#path_link\">path_link</a>) (struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#old_dentry\">old_dentry</a>, struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#new_dir\">new_dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#new_dentry\">new_dentry</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#path_rename\">path_rename</a>) (struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#old_dir\">old_dir</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#old_dentry\">old_dentry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#new_dir\">new_dir</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#new_dentry\">new_dentry</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#path_chmod\">path_chmod</a>) (struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#mode_t\">mode_t</a> <a class=\"id\" href=\"#mode\">mode</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#path_chown\">path_chown</a>) (struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#uid_t\">uid_t</a> <a class=\"id\" href=\"#uid\">uid</a>, <a class=\"id\" href=\"#gid_t\">gid_t</a> <a class=\"id\" href=\"#gid\">gid</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#path_chroot\">path_chroot</a>) (struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#inode_alloc_security\">inode_alloc_security</a>) (struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#inode_free_security\">inode_free_security</a>) (struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#inode_init_security\">inode_init_security</a>) (struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    char **<a class=\"id\" href=\"#name\">name</a>, void **<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#inode_create\">inode_create</a>) (struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, int <a class=\"id\" href=\"#mode\">mode</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#inode_link\">inode_link</a>) (struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#old_dentry\">old_dentry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#new_dentry\">new_dentry</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#inode_unlink\">inode_unlink</a>) (struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#inode_symlink\">inode_symlink</a>) (struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, const char *<a class=\"id\" href=\"#old_name\">old_name</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#inode_mkdir\">inode_mkdir</a>) (struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, int <a class=\"id\" href=\"#mode\">mode</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#inode_rmdir\">inode_rmdir</a>) (struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#inode_mknod\">inode_mknod</a>) (struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#inode_rename\">inode_rename</a>) (struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#old_dir\">old_dir</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#old_dentry\">old_dentry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#new_dir\">new_dir</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#new_dentry\">new_dentry</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#inode_readlink\">inode_readlink</a>) (struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#inode_follow_link\">inode_follow_link</a>) (struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, struct <a class=\"id\" href=\"#nameidata\">nameidata</a> *<a class=\"id\" href=\"#nd\">nd</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#inode_permission\">inode_permission</a>) (struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, int <a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#inode_setattr\">inode_setattr</a>)<span class=\"ts\"/>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, struct <a class=\"id\" href=\"#iattr\">iattr</a> *<a class=\"id\" href=\"#attr\">attr</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#inode_getattr\">inode_getattr</a>) (struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#inode_setxattr\">inode_setxattr</a>) (struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const void *<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#inode_post_setxattr\">inode_post_setxattr</a>) (struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const void *<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#inode_getxattr\">inode_getxattr</a>) (struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, const char *<a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#inode_listxattr\">inode_listxattr</a>) (struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#inode_removexattr\">inode_removexattr</a>) (struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, const char *<a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#inode_need_killpriv\">inode_need_killpriv</a>) (struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#inode_killpriv\">inode_killpriv</a>) (struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#inode_getsecurity\">inode_getsecurity</a>) (const struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, const char *<a class=\"id\" href=\"#name\">name</a>, void **<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#alloc\">alloc</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#inode_setsecurity\">inode_setsecurity</a>) (struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, const char *<a class=\"id\" href=\"#name\">name</a>, const void *<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#inode_listsecurity\">inode_listsecurity</a>) (struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, char *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#buffer_size\">buffer_size</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#inode_getsecid\">inode_getsecid</a>) (const struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#secid\">secid</a>);", 
"", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#file_permission\">file_permission</a>) (struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, int <a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#file_alloc_security\">file_alloc_security</a>) (struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#file_free_security\">file_free_security</a>) (struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#file_ioctl\">file_ioctl</a>) (struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#file_mmap\">file_mmap</a>) (struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#reqprot\">reqprot</a>, unsigned long <a class=\"id\" href=\"#prot\">prot</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#flags\">flags</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#addr_only\">addr_only</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#file_mprotect\">file_mprotect</a>) (struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#reqprot\">reqprot</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#prot\">prot</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#file_lock\">file_lock</a>) (struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#file_fcntl\">file_fcntl</a>) (struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#file_set_fowner\">file_set_fowner</a>) (struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#file_send_sigiotask\">file_send_sigiotask</a>) (struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#fown_struct\">fown_struct</a> *<a class=\"id\" href=\"#fown\">fown</a>, int <a class=\"id\" href=\"#sig\">sig</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#file_receive\">file_receive</a>) (struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#dentry_open\">dentry_open</a>) (struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>);", 
"", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#task_create\">task_create</a>) (unsigned long <a class=\"id\" href=\"#clone_flags\">clone_flags</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#cred_alloc_blank\">cred_alloc_blank</a>) (struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#cred_free\">cred_free</a>) (struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#cred_prepare\">cred_prepare</a>)(struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#new\">new</a>, const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#old\">old</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#cred_transfer\">cred_transfer</a>)(struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#new\">new</a>, const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#old\">old</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#kernel_act_as\">kernel_act_as</a>)(struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#secid\">secid</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#kernel_create_files_as\">kernel_create_files_as</a>)(struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#new\">new</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#kernel_module_request\">kernel_module_request</a>)(char *<a class=\"id\" href=\"#kmod_name\">kmod_name</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#task_fix_setuid\">task_fix_setuid</a>) (struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#new\">new</a>, const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#old\">old</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#task_setpgid\">task_setpgid</a>) (struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pgid\">pgid</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#task_getpgid\">task_getpgid</a>) (struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#task_getsid\">task_getsid</a>) (struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#task_getsecid\">task_getsecid</a>) (struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#secid\">secid</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#task_setnice\">task_setnice</a>) (struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#nice\">nice</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#task_setioprio\">task_setioprio</a>) (struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#ioprio\">ioprio</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#task_getioprio\">task_getioprio</a>) (struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#task_setrlimit\">task_setrlimit</a>) (struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, unsigned int <a class=\"id\" href=\"#resource\">resource</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#rlimit\">rlimit</a> *<a class=\"id\" href=\"#new_rlim\">new_rlim</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#task_setscheduler\">task_setscheduler</a>) (struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#policy\">policy</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#sched_param\">sched_param</a> *<a class=\"id\" href=\"#lp\">lp</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#task_getscheduler\">task_getscheduler</a>) (struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#task_movememory\">task_movememory</a>) (struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#task_kill\">task_kill</a>) (struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#siginfo\">siginfo</a> *<a class=\"id\" href=\"#info\">info</a>, int <a class=\"id\" href=\"#sig\">sig</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#secid\">secid</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#task_wait\">task_wait</a>) (struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#task_prctl\">task_prctl</a>) (int <a class=\"id\" href=\"#option\">option</a>, unsigned long <a class=\"id\" href=\"#arg2\">arg2</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#arg3\">arg3</a>, unsigned long <a class=\"id\" href=\"#arg4\">arg4</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#arg5\">arg5</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#task_to_inode\">task_to_inode</a>) (struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#ipc_permission\">ipc_permission</a>) (struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *<a class=\"id\" href=\"#ipcp\">ipcp</a>, short <a class=\"id\" href=\"#flag\">flag</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#ipc_getsecid\">ipc_getsecid</a>) (struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *<a class=\"id\" href=\"#ipcp\">ipcp</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#secid\">secid</a>);", 
"", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#msg_msg_alloc_security\">msg_msg_alloc_security</a>) (struct <a class=\"id\" href=\"#msg_msg\">msg_msg</a> *<a class=\"id\" href=\"#msg\">msg</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#msg_msg_free_security\">msg_msg_free_security</a>) (struct <a class=\"id\" href=\"#msg_msg\">msg_msg</a> *<a class=\"id\" href=\"#msg\">msg</a>);", 
"", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#msg_queue_alloc_security\">msg_queue_alloc_security</a>) (struct <a class=\"id\" href=\"#msg_queue\">msg_queue</a> *<a class=\"id\" href=\"#msq\">msq</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#msg_queue_free_security\">msg_queue_free_security</a>) (struct <a class=\"id\" href=\"#msg_queue\">msg_queue</a> *<a class=\"id\" href=\"#msq\">msq</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#msg_queue_associate\">msg_queue_associate</a>) (struct <a class=\"id\" href=\"#msg_queue\">msg_queue</a> *<a class=\"id\" href=\"#msq\">msq</a>, int <a class=\"id\" href=\"#msqflg\">msqflg</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#msg_queue_msgctl\">msg_queue_msgctl</a>) (struct <a class=\"id\" href=\"#msg_queue\">msg_queue</a> *<a class=\"id\" href=\"#msq\">msq</a>, int <a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#msg_queue_msgsnd\">msg_queue_msgsnd</a>) (struct <a class=\"id\" href=\"#msg_queue\">msg_queue</a> *<a class=\"id\" href=\"#msq\">msq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#msg_msg\">msg_msg</a> *<a class=\"id\" href=\"#msg\">msg</a>, int <a class=\"id\" href=\"#msqflg\">msqflg</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#msg_queue_msgrcv\">msg_queue_msgrcv</a>) (struct <a class=\"id\" href=\"#msg_queue\">msg_queue</a> *<a class=\"id\" href=\"#msq\">msq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#msg_msg\">msg_msg</a> *<a class=\"id\" href=\"#msg\">msg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#target\">target</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> long <a class=\"id\" href=\"#type\">type</a>, int <a class=\"id\" href=\"#mode\">mode</a>);", 
"", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#shm_alloc_security\">shm_alloc_security</a>) (struct <a class=\"id\" href=\"#shmid_kernel\">shmid_kernel</a> *<a class=\"id\" href=\"#shp\">shp</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#shm_free_security\">shm_free_security</a>) (struct <a class=\"id\" href=\"#shmid_kernel\">shmid_kernel</a> *<a class=\"id\" href=\"#shp\">shp</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#shm_associate\">shm_associate</a>) (struct <a class=\"id\" href=\"#shmid_kernel\">shmid_kernel</a> *<a class=\"id\" href=\"#shp\">shp</a>, int <a class=\"id\" href=\"#shmflg\">shmflg</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#shm_shmctl\">shm_shmctl</a>) (struct <a class=\"id\" href=\"#shmid_kernel\">shmid_kernel</a> *<a class=\"id\" href=\"#shp\">shp</a>, int <a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#shm_shmat\">shm_shmat</a>) (struct <a class=\"id\" href=\"#shmid_kernel\">shmid_kernel</a> *<a class=\"id\" href=\"#shp\">shp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#shmaddr\">shmaddr</a>, int <a class=\"id\" href=\"#shmflg\">shmflg</a>);", 
"", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#sem_alloc_security\">sem_alloc_security</a>) (struct <a class=\"id\" href=\"#sem_array\">sem_array</a> *<a class=\"id\" href=\"#sma\">sma</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#sem_free_security\">sem_free_security</a>) (struct <a class=\"id\" href=\"#sem_array\">sem_array</a> *<a class=\"id\" href=\"#sma\">sma</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#sem_associate\">sem_associate</a>) (struct <a class=\"id\" href=\"#sem_array\">sem_array</a> *<a class=\"id\" href=\"#sma\">sma</a>, int <a class=\"id\" href=\"#semflg\">semflg</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#sem_semctl\">sem_semctl</a>) (struct <a class=\"id\" href=\"#sem_array\">sem_array</a> *<a class=\"id\" href=\"#sma\">sma</a>, int <a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#sem_semop\">sem_semop</a>) (struct <a class=\"id\" href=\"#sem_array\">sem_array</a> *<a class=\"id\" href=\"#sma\">sma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#sembuf\">sembuf</a> *<a class=\"id\" href=\"#sops\">sops</a>, unsigned <a class=\"id\" href=\"#nsops\">nsops</a>, int <a class=\"id\" href=\"#alter\">alter</a>);", 
"", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#netlink_send\">netlink_send</a>) (struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#netlink_recv\">netlink_recv</a>) (struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#cap\">cap</a>);", 
"", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#d_instantiate\">d_instantiate</a>) (struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#getprocattr\">getprocattr</a>) (struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, char *<a class=\"id\" href=\"#name\">name</a>, char **<a class=\"id\" href=\"#value\">value</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#setprocattr\">setprocattr</a>) (struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, char *<a class=\"id\" href=\"#name\">name</a>, void *<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#secid_to_secctx\">secid_to_secctx</a>) (<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#secid\">secid</a>, char **<a class=\"id\" href=\"#secdata\">secdata</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#seclen\">seclen</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#secctx_to_secid\">secctx_to_secid</a>) (const char *<a class=\"id\" href=\"#secdata\">secdata</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#seclen\">seclen</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#secid\">secid</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#release_secctx\">release_secctx</a>) (char *<a class=\"id\" href=\"#secdata\">secdata</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#seclen\">seclen</a>);", 
"", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#inode_notifysecctx\">inode_notifysecctx</a>)(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, void *<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#ctxlen\">ctxlen</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#inode_setsecctx\">inode_setsecctx</a>)(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, void *<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#ctxlen\">ctxlen</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#inode_getsecctx\">inode_getsecctx</a>)(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, void **<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#ctxlen\">ctxlen</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SECURITY_NETWORK\">CONFIG_SECURITY_NETWORK</a>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#unix_stream_connect\">unix_stream_connect</a>) (struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#other\">other</a>, struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#newsk\">newsk</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#unix_may_send\">unix_may_send</a>) (struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>, struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#other\">other</a>);", 
"", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#socket_create\">socket_create</a>) (int <a class=\"id\" href=\"#family\">family</a>, int <a class=\"id\" href=\"#type\">type</a>, int <a class=\"id\" href=\"#protocol\">protocol</a>, int <a class=\"id\" href=\"#kern\">kern</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#socket_post_create\">socket_post_create</a>) (struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>, int <a class=\"id\" href=\"#family\">family</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#type\">type</a>, int <a class=\"id\" href=\"#protocol\">protocol</a>, int <a class=\"id\" href=\"#kern\">kern</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#socket_bind\">socket_bind</a>) (struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#sockaddr\">sockaddr</a> *<a class=\"id\" href=\"#address\">address</a>, int <a class=\"id\" href=\"#addrlen\">addrlen</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#socket_connect\">socket_connect</a>) (struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#sockaddr\">sockaddr</a> *<a class=\"id\" href=\"#address\">address</a>, int <a class=\"id\" href=\"#addrlen\">addrlen</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#socket_listen\">socket_listen</a>) (struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>, int <a class=\"id\" href=\"#backlog\">backlog</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#socket_accept\">socket_accept</a>) (struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>, struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#newsock\">newsock</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#socket_sendmsg\">socket_sendmsg</a>) (struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#msghdr\">msghdr</a> *<a class=\"id\" href=\"#msg\">msg</a>, int <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#socket_recvmsg\">socket_recvmsg</a>) (struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#msghdr\">msghdr</a> *<a class=\"id\" href=\"#msg\">msg</a>, int <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#socket_getsockname\">socket_getsockname</a>) (struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#socket_getpeername\">socket_getpeername</a>) (struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#socket_getsockopt\">socket_getsockopt</a>) (struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>, int <a class=\"id\" href=\"#level\">level</a>, int <a class=\"id\" href=\"#optname\">optname</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#socket_setsockopt\">socket_setsockopt</a>) (struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>, int <a class=\"id\" href=\"#level\">level</a>, int <a class=\"id\" href=\"#optname\">optname</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#socket_shutdown\">socket_shutdown</a>) (struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>, int <a class=\"id\" href=\"#how\">how</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#socket_sock_rcv_skb\">socket_sock_rcv_skb</a>) (struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#socket_getpeersec_stream\">socket_getpeersec_stream</a>) (struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#optval\">optval</a>, int <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#optlen\">optlen</a>, unsigned <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#socket_getpeersec_dgram\">socket_getpeersec_dgram</a>) (struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#secid\">secid</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#sk_alloc_security\">sk_alloc_security</a>) (struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#family\">family</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#priority\">priority</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#sk_free_security\">sk_free_security</a>) (struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#sk_clone_security\">sk_clone_security</a>) (const struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#newsk\">newsk</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#sk_getsecid\">sk_getsecid</a>) (struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#secid\">secid</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#sock_graft\">sock_graft</a>) (struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#inet_conn_request\">inet_conn_request</a>) (struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#request_sock\">request_sock</a> *<a class=\"id\" href=\"#req\">req</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#inet_csk_clone\">inet_csk_clone</a>) (struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#newsk\">newsk</a>, const struct <a class=\"id\" href=\"#request_sock\">request_sock</a> *<a class=\"id\" href=\"#req\">req</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#inet_conn_established\">inet_conn_established</a>) (struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#req_classify_flow\">req_classify_flow</a>) (const struct <a class=\"id\" href=\"#request_sock\">request_sock</a> *<a class=\"id\" href=\"#req\">req</a>, struct <a class=\"id\" href=\"#flowi\">flowi</a> *<a class=\"id\" href=\"#fl\">fl</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#tun_dev_create\">tun_dev_create</a>)(void);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#tun_dev_post_create\">tun_dev_post_create</a>)(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#tun_dev_attach\">tun_dev_attach</a>)(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* CONFIG_SECURITY_NETWORK */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SECURITY_NETWORK_XFRM\">CONFIG_SECURITY_NETWORK_XFRM</a>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#xfrm_policy_alloc_security\">xfrm_policy_alloc_security</a>) (struct <a class=\"id\" href=\"#xfrm_sec_ctx\">xfrm_sec_ctx</a> **<a class=\"id\" href=\"#ctxp\">ctxp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#xfrm_user_sec_ctx\">xfrm_user_sec_ctx</a> *<a class=\"id\" href=\"#sec_ctx\">sec_ctx</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#xfrm_policy_clone_security\">xfrm_policy_clone_security</a>) (struct <a class=\"id\" href=\"#xfrm_sec_ctx\">xfrm_sec_ctx</a> *<a class=\"id\" href=\"#old_ctx\">old_ctx</a>, struct <a class=\"id\" href=\"#xfrm_sec_ctx\">xfrm_sec_ctx</a> **<a class=\"id\" href=\"#new_ctx\">new_ctx</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#xfrm_policy_free_security\">xfrm_policy_free_security</a>) (struct <a class=\"id\" href=\"#xfrm_sec_ctx\">xfrm_sec_ctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#xfrm_policy_delete_security\">xfrm_policy_delete_security</a>) (struct <a class=\"id\" href=\"#xfrm_sec_ctx\">xfrm_sec_ctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#xfrm_state_alloc_security\">xfrm_state_alloc_security</a>) (struct <a class=\"id\" href=\"#xfrm_state\">xfrm_state</a> *<a class=\"id\" href=\"#x\">x</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#xfrm_user_sec_ctx\">xfrm_user_sec_ctx</a> *<a class=\"id\" href=\"#sec_ctx\">sec_ctx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#secid\">secid</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#xfrm_state_free_security\">xfrm_state_free_security</a>) (struct <a class=\"id\" href=\"#xfrm_state\">xfrm_state</a> *<a class=\"id\" href=\"#x\">x</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#xfrm_state_delete_security\">xfrm_state_delete_security</a>) (struct <a class=\"id\" href=\"#xfrm_state\">xfrm_state</a> *<a class=\"id\" href=\"#x\">x</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#xfrm_policy_lookup\">xfrm_policy_lookup</a>) (struct <a class=\"id\" href=\"#xfrm_sec_ctx\">xfrm_sec_ctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#fl_secid\">fl_secid</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#dir\">dir</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#xfrm_state_pol_flow_match\">xfrm_state_pol_flow_match</a>) (struct <a class=\"id\" href=\"#xfrm_state\">xfrm_state</a> *<a class=\"id\" href=\"#x\">x</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#xfrm_policy\">xfrm_policy</a> *<a class=\"id\" href=\"#xp\">xp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#flowi\">flowi</a> *<a class=\"id\" href=\"#fl\">fl</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#xfrm_decode_session\">xfrm_decode_session</a>) (struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#secid\">secid</a>, int <a class=\"id\" href=\"#ckall\">ckall</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* CONFIG_SECURITY_NETWORK_XFRM */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* key management security hooks */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KEYS\">CONFIG_KEYS</a>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#key_alloc\">key_alloc</a>) (struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key\">key</a>, const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#key_free\">key_free</a>) (struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#key_permission\">key_permission</a>) (<a class=\"id\" href=\"#key_ref_t\">key_ref_t</a> <a class=\"id\" href=\"#key_ref\">key_ref</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#key_perm_t\">key_perm_t</a> <a class=\"id\" href=\"#perm\">perm</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#key_getsecurity\">key_getsecurity</a>)(struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key\">key</a>, char **<a class=\"id\" href=\"#_buffer\">_buffer</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* CONFIG_KEYS */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_AUDIT\">CONFIG_AUDIT</a>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#audit_rule_init\">audit_rule_init</a>) (<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#field\">field</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#op\">op</a>, char *<a class=\"id\" href=\"#rulestr\">rulestr</a>, void **<a class=\"id\" href=\"#lsmrule\">lsmrule</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#audit_rule_known\">audit_rule_known</a>) (struct <a class=\"id\" href=\"#audit_krule\">audit_krule</a> *<a class=\"id\" href=\"#krule\">krule</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#audit_rule_match\">audit_rule_match</a>) (<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#secid\">secid</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#field\">field</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#op\">op</a>, void *<a class=\"id\" href=\"#lsmrule\">lsmrule</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#audit_context\">audit_context</a> *<a class=\"id\" href=\"#actx\">actx</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#audit_rule_free\">audit_rule_free</a>) (void *<a class=\"id\" href=\"#lsmrule\">lsmrule</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_AUDIT */</span>", 
"};", 
"", 
"<span class=\"comment\">/* prototypes */</span>", 
"extern int <a class=\"id\" href=\"#security_init\">security_init</a>(void);", 
"extern int <a class=\"id\" href=\"#security_module_enable\">security_module_enable</a>(struct <a class=\"id\" href=\"#security_operations\">security_operations</a> *<a class=\"id\" href=\"#ops\">ops</a>);", 
"extern int <a class=\"id\" href=\"#register_security\">register_security</a>(struct <a class=\"id\" href=\"#security_operations\">security_operations</a> *<a class=\"id\" href=\"#ops\">ops</a>);", 
"", 
"<span class=\"comment\">/* Security operations */</span>", 
"int <a class=\"id\" href=\"#security_ptrace_access_check\">security_ptrace_access_check</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#child\">child</a>, unsigned int <a class=\"id\" href=\"#mode\">mode</a>);", 
"int <a class=\"id\" href=\"#security_ptrace_traceme\">security_ptrace_traceme</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#parent\">parent</a>);", 
"int <a class=\"id\" href=\"#security_capget\">security_capget</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#target\">target</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#kernel_cap_t\">kernel_cap_t</a> *<a class=\"id\" href=\"#effective\">effective</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#kernel_cap_t\">kernel_cap_t</a> *<a class=\"id\" href=\"#inheritable\">inheritable</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#kernel_cap_t\">kernel_cap_t</a> *<a class=\"id\" href=\"#permitted\">permitted</a>);", 
"int <a class=\"id\" href=\"#security_capset\">security_capset</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#new\">new</a>, const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#old\">old</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    const <a class=\"id\" href=\"#kernel_cap_t\">kernel_cap_t</a> *<a class=\"id\" href=\"#effective\">effective</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    const <a class=\"id\" href=\"#kernel_cap_t\">kernel_cap_t</a> *<a class=\"id\" href=\"#inheritable\">inheritable</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    const <a class=\"id\" href=\"#kernel_cap_t\">kernel_cap_t</a> *<a class=\"id\" href=\"#permitted\">permitted</a>);", 
"int <a class=\"id\" href=\"#security_capable\">security_capable</a>(int <a class=\"id\" href=\"#cap\">cap</a>);", 
"int <a class=\"id\" href=\"#security_real_capable\">security_real_capable</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, int <a class=\"id\" href=\"#cap\">cap</a>);", 
"int <a class=\"id\" href=\"#security_real_capable_noaudit\">security_real_capable_noaudit</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, int <a class=\"id\" href=\"#cap\">cap</a>);", 
"int <a class=\"id\" href=\"#security_sysctl\">security_sysctl</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#op\">op</a>);", 
"int <a class=\"id\" href=\"#security_quotactl\">security_quotactl</a>(int <a class=\"id\" href=\"#cmds\">cmds</a>, int <a class=\"id\" href=\"#type\">type</a>, int <a class=\"id\" href=\"#id\">id</a>, struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>);", 
"int <a class=\"id\" href=\"#security_quota_on\">security_quota_on</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"int <a class=\"id\" href=\"#security_syslog\">security_syslog</a>(int <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#from_file\">from_file</a>);", 
"int <a class=\"id\" href=\"#security_settime\">security_settime</a>(struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#ts\">ts</a>, struct <a class=\"id\" href=\"#timezone\">timezone</a> *<a class=\"id\" href=\"#tz\">tz</a>);", 
"int <a class=\"id\" href=\"#security_vm_enough_memory\">security_vm_enough_memory</a>(long <a class=\"id\" href=\"#pages\">pages</a>);", 
"int <a class=\"id\" href=\"#security_vm_enough_memory_mm\">security_vm_enough_memory_mm</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, long <a class=\"id\" href=\"#pages\">pages</a>);", 
"int <a class=\"id\" href=\"#security_vm_enough_memory_kern\">security_vm_enough_memory_kern</a>(long <a class=\"id\" href=\"#pages\">pages</a>);", 
"int <a class=\"id\" href=\"#security_bprm_set_creds\">security_bprm_set_creds</a>(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>);", 
"int <a class=\"id\" href=\"#security_bprm_check\">security_bprm_check</a>(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>);", 
"void <a class=\"id\" href=\"#security_bprm_committing_creds\">security_bprm_committing_creds</a>(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>);", 
"void <a class=\"id\" href=\"#security_bprm_committed_creds\">security_bprm_committed_creds</a>(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>);", 
"int <a class=\"id\" href=\"#security_bprm_secureexec\">security_bprm_secureexec</a>(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>);", 
"int <a class=\"id\" href=\"#security_sb_alloc\">security_sb_alloc</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>);", 
"void <a class=\"id\" href=\"#security_sb_free\">security_sb_free</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>);", 
"int <a class=\"id\" href=\"#security_sb_copy_data\">security_sb_copy_data</a>(char *<a class=\"id\" href=\"#orig\">orig</a>, char *<a class=\"id\" href=\"#copy\">copy</a>);", 
"int <a class=\"id\" href=\"#security_sb_kern_mount\">security_sb_kern_mount</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, int <a class=\"id\" href=\"#flags\">flags</a>, void *<a class=\"id\" href=\"#data\">data</a>);", 
"int <a class=\"id\" href=\"#security_sb_show_options\">security_sb_show_options</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>);", 
"int <a class=\"id\" href=\"#security_sb_statfs\">security_sb_statfs</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"int <a class=\"id\" href=\"#security_sb_mount\">security_sb_mount</a>(char *<a class=\"id\" href=\"#dev_name\">dev_name</a>, struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      char *<a class=\"id\" href=\"#type\">type</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>, void *<a class=\"id\" href=\"#data\">data</a>);", 
"int <a class=\"id\" href=\"#security_sb_umount\">security_sb_umount</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>, int <a class=\"id\" href=\"#flags\">flags</a>);", 
"int <a class=\"id\" href=\"#security_sb_pivotroot\">security_sb_pivotroot</a>(struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#old_path\">old_path</a>, struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#new_path\">new_path</a>);", 
"int <a class=\"id\" href=\"#security_sb_set_mnt_opts\">security_sb_set_mnt_opts</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, struct <a class=\"id\" href=\"#security_mnt_opts\">security_mnt_opts</a> *<a class=\"id\" href=\"#opts\">opts</a>);", 
"void <a class=\"id\" href=\"#security_sb_clone_mnt_opts\">security_sb_clone_mnt_opts</a>(const struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#oldsb\">oldsb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#newsb\">newsb</a>);", 
"int <a class=\"id\" href=\"#security_sb_parse_opts_str\">security_sb_parse_opts_str</a>(char *<a class=\"id\" href=\"#options\">options</a>, struct <a class=\"id\" href=\"#security_mnt_opts\">security_mnt_opts</a> *<a class=\"id\" href=\"#opts\">opts</a>);", 
"", 
"int <a class=\"id\" href=\"#security_inode_alloc\">security_inode_alloc</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>);", 
"void <a class=\"id\" href=\"#security_inode_free\">security_inode_free</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>);", 
"int <a class=\"id\" href=\"#security_inode_init_security\">security_inode_init_security</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  char **<a class=\"id\" href=\"#name\">name</a>, void **<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#len\">len</a>);", 
"int <a class=\"id\" href=\"#security_inode_create\">security_inode_create</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, int <a class=\"id\" href=\"#mode\">mode</a>);", 
"int <a class=\"id\" href=\"#security_inode_link\">security_inode_link</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#old_dentry\">old_dentry</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#new_dentry\">new_dentry</a>);", 
"int <a class=\"id\" href=\"#security_inode_unlink\">security_inode_unlink</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"int <a class=\"id\" href=\"#security_inode_symlink\">security_inode_symlink</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const char *<a class=\"id\" href=\"#old_name\">old_name</a>);", 
"int <a class=\"id\" href=\"#security_inode_mkdir\">security_inode_mkdir</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, int <a class=\"id\" href=\"#mode\">mode</a>);", 
"int <a class=\"id\" href=\"#security_inode_rmdir\">security_inode_rmdir</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"int <a class=\"id\" href=\"#security_inode_mknod\">security_inode_mknod</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, int <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#dev\">dev</a>);", 
"int <a class=\"id\" href=\"#security_inode_rename\">security_inode_rename</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#old_dir\">old_dir</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#old_dentry\">old_dentry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#new_dir\">new_dir</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#new_dentry\">new_dentry</a>);", 
"int <a class=\"id\" href=\"#security_inode_readlink\">security_inode_readlink</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"int <a class=\"id\" href=\"#security_inode_follow_link\">security_inode_follow_link</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, struct <a class=\"id\" href=\"#nameidata\">nameidata</a> *<a class=\"id\" href=\"#nd\">nd</a>);", 
"int <a class=\"id\" href=\"#security_inode_permission\">security_inode_permission</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, int <a class=\"id\" href=\"#mask\">mask</a>);", 
"int <a class=\"id\" href=\"#security_inode_setattr\">security_inode_setattr</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, struct <a class=\"id\" href=\"#iattr\">iattr</a> *<a class=\"id\" href=\"#attr\">attr</a>);", 
"int <a class=\"id\" href=\"#security_inode_getattr\">security_inode_getattr</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"int <a class=\"id\" href=\"#security_inode_setxattr\">security_inode_setxattr</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const void *<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#flags\">flags</a>);", 
"void <a class=\"id\" href=\"#security_inode_post_setxattr\">security_inode_post_setxattr</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const void *<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#flags\">flags</a>);", 
"int <a class=\"id\" href=\"#security_inode_getxattr\">security_inode_getxattr</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, const char *<a class=\"id\" href=\"#name\">name</a>);", 
"int <a class=\"id\" href=\"#security_inode_listxattr\">security_inode_listxattr</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"int <a class=\"id\" href=\"#security_inode_removexattr\">security_inode_removexattr</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, const char *<a class=\"id\" href=\"#name\">name</a>);", 
"int <a class=\"id\" href=\"#security_inode_need_killpriv\">security_inode_need_killpriv</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"int <a class=\"id\" href=\"#security_inode_killpriv\">security_inode_killpriv</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"int <a class=\"id\" href=\"#security_inode_getsecurity\">security_inode_getsecurity</a>(const struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, const char *<a class=\"id\" href=\"#name\">name</a>, void **<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#alloc\">alloc</a>);", 
"int <a class=\"id\" href=\"#security_inode_setsecurity\">security_inode_setsecurity</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, const char *<a class=\"id\" href=\"#name\">name</a>, const void *<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#flags\">flags</a>);", 
"int <a class=\"id\" href=\"#security_inode_listsecurity\">security_inode_listsecurity</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, char *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#buffer_size\">buffer_size</a>);", 
"void <a class=\"id\" href=\"#security_inode_getsecid\">security_inode_getsecid</a>(const struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#secid\">secid</a>);", 
"int <a class=\"id\" href=\"#security_file_permission\">security_file_permission</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, int <a class=\"id\" href=\"#mask\">mask</a>);", 
"int <a class=\"id\" href=\"#security_file_alloc\">security_file_alloc</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>);", 
"void <a class=\"id\" href=\"#security_file_free\">security_file_free</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>);", 
"int <a class=\"id\" href=\"#security_file_ioctl\">security_file_ioctl</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>, unsigned long <a class=\"id\" href=\"#arg\">arg</a>);", 
"int <a class=\"id\" href=\"#security_file_mmap\">security_file_mmap</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, unsigned long <a class=\"id\" href=\"#reqprot\">reqprot</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#prot\">prot</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#addr_only\">addr_only</a>);", 
"int <a class=\"id\" href=\"#security_file_mprotect\">security_file_mprotect</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#reqprot\">reqprot</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#prot\">prot</a>);", 
"int <a class=\"id\" href=\"#security_file_lock\">security_file_lock</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>);", 
"int <a class=\"id\" href=\"#security_file_fcntl\">security_file_fcntl</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>, unsigned long <a class=\"id\" href=\"#arg\">arg</a>);", 
"int <a class=\"id\" href=\"#security_file_set_fowner\">security_file_set_fowner</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>);", 
"int <a class=\"id\" href=\"#security_file_send_sigiotask\">security_file_send_sigiotask</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#fown_struct\">fown_struct</a> *<a class=\"id\" href=\"#fown\">fown</a>, int <a class=\"id\" href=\"#sig\">sig</a>);", 
"int <a class=\"id\" href=\"#security_file_receive\">security_file_receive</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>);", 
"int <a class=\"id\" href=\"#security_dentry_open\">security_dentry_open</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>);", 
"int <a class=\"id\" href=\"#security_task_create\">security_task_create</a>(unsigned long <a class=\"id\" href=\"#clone_flags\">clone_flags</a>);", 
"int <a class=\"id\" href=\"#security_cred_alloc_blank\">security_cred_alloc_blank</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"void <a class=\"id\" href=\"#security_cred_free\">security_cred_free</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>);", 
"int <a class=\"id\" href=\"#security_prepare_creds\">security_prepare_creds</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#new\">new</a>, const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#old\">old</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"void <a class=\"id\" href=\"#security_transfer_creds\">security_transfer_creds</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#new\">new</a>, const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#old\">old</a>);", 
"int <a class=\"id\" href=\"#security_kernel_act_as\">security_kernel_act_as</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#secid\">secid</a>);", 
"int <a class=\"id\" href=\"#security_kernel_create_files_as\">security_kernel_create_files_as</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#new\">new</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>);", 
"int <a class=\"id\" href=\"#security_kernel_module_request\">security_kernel_module_request</a>(char *<a class=\"id\" href=\"#kmod_name\">kmod_name</a>);", 
"int <a class=\"id\" href=\"#security_task_fix_setuid\">security_task_fix_setuid</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#new\">new</a>, const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#old\">old</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#flags\">flags</a>);", 
"int <a class=\"id\" href=\"#security_task_setpgid\">security_task_setpgid</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pgid\">pgid</a>);", 
"int <a class=\"id\" href=\"#security_task_getpgid\">security_task_getpgid</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>);", 
"int <a class=\"id\" href=\"#security_task_getsid\">security_task_getsid</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>);", 
"void <a class=\"id\" href=\"#security_task_getsecid\">security_task_getsecid</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#secid\">secid</a>);", 
"int <a class=\"id\" href=\"#security_task_setnice\">security_task_setnice</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#nice\">nice</a>);", 
"int <a class=\"id\" href=\"#security_task_setioprio\">security_task_setioprio</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#ioprio\">ioprio</a>);", 
"int <a class=\"id\" href=\"#security_task_getioprio\">security_task_getioprio</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>);", 
"int <a class=\"id\" href=\"#security_task_setrlimit\">security_task_setrlimit</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, unsigned int <a class=\"id\" href=\"#resource\">resource</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#rlimit\">rlimit</a> *<a class=\"id\" href=\"#new_rlim\">new_rlim</a>);", 
"int <a class=\"id\" href=\"#security_task_setscheduler\">security_task_setscheduler</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#policy\">policy</a>, struct <a class=\"id\" href=\"#sched_param\">sched_param</a> *<a class=\"id\" href=\"#lp\">lp</a>);", 
"int <a class=\"id\" href=\"#security_task_getscheduler\">security_task_getscheduler</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>);", 
"int <a class=\"id\" href=\"#security_task_movememory\">security_task_movememory</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>);", 
"int <a class=\"id\" href=\"#security_task_kill\">security_task_kill</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#siginfo\">siginfo</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#sig\">sig</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#secid\">secid</a>);", 
"int <a class=\"id\" href=\"#security_task_wait\">security_task_wait</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>);", 
"int <a class=\"id\" href=\"#security_task_prctl\">security_task_prctl</a>(int <a class=\"id\" href=\"#option\">option</a>, unsigned long <a class=\"id\" href=\"#arg2\">arg2</a>, unsigned long <a class=\"id\" href=\"#arg3\">arg3</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#arg4\">arg4</a>, unsigned long <a class=\"id\" href=\"#arg5\">arg5</a>);", 
"void <a class=\"id\" href=\"#security_task_to_inode\">security_task_to_inode</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>);", 
"int <a class=\"id\" href=\"#security_ipc_permission\">security_ipc_permission</a>(struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *<a class=\"id\" href=\"#ipcp\">ipcp</a>, short <a class=\"id\" href=\"#flag\">flag</a>);", 
"void <a class=\"id\" href=\"#security_ipc_getsecid\">security_ipc_getsecid</a>(struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *<a class=\"id\" href=\"#ipcp\">ipcp</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#secid\">secid</a>);", 
"int <a class=\"id\" href=\"#security_msg_msg_alloc\">security_msg_msg_alloc</a>(struct <a class=\"id\" href=\"#msg_msg\">msg_msg</a> *<a class=\"id\" href=\"#msg\">msg</a>);", 
"void <a class=\"id\" href=\"#security_msg_msg_free\">security_msg_msg_free</a>(struct <a class=\"id\" href=\"#msg_msg\">msg_msg</a> *<a class=\"id\" href=\"#msg\">msg</a>);", 
"int <a class=\"id\" href=\"#security_msg_queue_alloc\">security_msg_queue_alloc</a>(struct <a class=\"id\" href=\"#msg_queue\">msg_queue</a> *<a class=\"id\" href=\"#msq\">msq</a>);", 
"void <a class=\"id\" href=\"#security_msg_queue_free\">security_msg_queue_free</a>(struct <a class=\"id\" href=\"#msg_queue\">msg_queue</a> *<a class=\"id\" href=\"#msq\">msq</a>);", 
"int <a class=\"id\" href=\"#security_msg_queue_associate\">security_msg_queue_associate</a>(struct <a class=\"id\" href=\"#msg_queue\">msg_queue</a> *<a class=\"id\" href=\"#msq\">msq</a>, int <a class=\"id\" href=\"#msqflg\">msqflg</a>);", 
"int <a class=\"id\" href=\"#security_msg_queue_msgctl\">security_msg_queue_msgctl</a>(struct <a class=\"id\" href=\"#msg_queue\">msg_queue</a> *<a class=\"id\" href=\"#msq\">msq</a>, int <a class=\"id\" href=\"#cmd\">cmd</a>);", 
"int <a class=\"id\" href=\"#security_msg_queue_msgsnd\">security_msg_queue_msgsnd</a>(struct <a class=\"id\" href=\"#msg_queue\">msg_queue</a> *<a class=\"id\" href=\"#msq\">msq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#msg_msg\">msg_msg</a> *<a class=\"id\" href=\"#msg\">msg</a>, int <a class=\"id\" href=\"#msqflg\">msqflg</a>);", 
"int <a class=\"id\" href=\"#security_msg_queue_msgrcv\">security_msg_queue_msgrcv</a>(struct <a class=\"id\" href=\"#msg_queue\">msg_queue</a> *<a class=\"id\" href=\"#msq\">msq</a>, struct <a class=\"id\" href=\"#msg_msg\">msg_msg</a> *<a class=\"id\" href=\"#msg\">msg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#target\">target</a>, long <a class=\"id\" href=\"#type\">type</a>, int <a class=\"id\" href=\"#mode\">mode</a>);", 
"int <a class=\"id\" href=\"#security_shm_alloc\">security_shm_alloc</a>(struct <a class=\"id\" href=\"#shmid_kernel\">shmid_kernel</a> *<a class=\"id\" href=\"#shp\">shp</a>);", 
"void <a class=\"id\" href=\"#security_shm_free\">security_shm_free</a>(struct <a class=\"id\" href=\"#shmid_kernel\">shmid_kernel</a> *<a class=\"id\" href=\"#shp\">shp</a>);", 
"int <a class=\"id\" href=\"#security_shm_associate\">security_shm_associate</a>(struct <a class=\"id\" href=\"#shmid_kernel\">shmid_kernel</a> *<a class=\"id\" href=\"#shp\">shp</a>, int <a class=\"id\" href=\"#shmflg\">shmflg</a>);", 
"int <a class=\"id\" href=\"#security_shm_shmctl\">security_shm_shmctl</a>(struct <a class=\"id\" href=\"#shmid_kernel\">shmid_kernel</a> *<a class=\"id\" href=\"#shp\">shp</a>, int <a class=\"id\" href=\"#cmd\">cmd</a>);", 
"int <a class=\"id\" href=\"#security_shm_shmat\">security_shm_shmat</a>(struct <a class=\"id\" href=\"#shmid_kernel\">shmid_kernel</a> *<a class=\"id\" href=\"#shp\">shp</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#shmaddr\">shmaddr</a>, int <a class=\"id\" href=\"#shmflg\">shmflg</a>);", 
"int <a class=\"id\" href=\"#security_sem_alloc\">security_sem_alloc</a>(struct <a class=\"id\" href=\"#sem_array\">sem_array</a> *<a class=\"id\" href=\"#sma\">sma</a>);", 
"void <a class=\"id\" href=\"#security_sem_free\">security_sem_free</a>(struct <a class=\"id\" href=\"#sem_array\">sem_array</a> *<a class=\"id\" href=\"#sma\">sma</a>);", 
"int <a class=\"id\" href=\"#security_sem_associate\">security_sem_associate</a>(struct <a class=\"id\" href=\"#sem_array\">sem_array</a> *<a class=\"id\" href=\"#sma\">sma</a>, int <a class=\"id\" href=\"#semflg\">semflg</a>);", 
"int <a class=\"id\" href=\"#security_sem_semctl\">security_sem_semctl</a>(struct <a class=\"id\" href=\"#sem_array\">sem_array</a> *<a class=\"id\" href=\"#sma\">sma</a>, int <a class=\"id\" href=\"#cmd\">cmd</a>);", 
"int <a class=\"id\" href=\"#security_sem_semop\">security_sem_semop</a>(struct <a class=\"id\" href=\"#sem_array\">sem_array</a> *<a class=\"id\" href=\"#sma\">sma</a>, struct <a class=\"id\" href=\"#sembuf\">sembuf</a> *<a class=\"id\" href=\"#sops\">sops</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#nsops\">nsops</a>, int <a class=\"id\" href=\"#alter\">alter</a>);", 
"void <a class=\"id\" href=\"#security_d_instantiate\">security_d_instantiate</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>);", 
"int <a class=\"id\" href=\"#security_getprocattr\">security_getprocattr</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, char *<a class=\"id\" href=\"#name\">name</a>, char **<a class=\"id\" href=\"#value\">value</a>);", 
"int <a class=\"id\" href=\"#security_setprocattr\">security_setprocattr</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, char *<a class=\"id\" href=\"#name\">name</a>, void *<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>);", 
"int <a class=\"id\" href=\"#security_netlink_send\">security_netlink_send</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"int <a class=\"id\" href=\"#security_netlink_recv\">security_netlink_recv</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#cap\">cap</a>);", 
"int <a class=\"id\" href=\"#security_secid_to_secctx\">security_secid_to_secctx</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#secid\">secid</a>, char **<a class=\"id\" href=\"#secdata\">secdata</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#seclen\">seclen</a>);", 
"int <a class=\"id\" href=\"#security_secctx_to_secid\">security_secctx_to_secid</a>(const char *<a class=\"id\" href=\"#secdata\">secdata</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#seclen\">seclen</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#secid\">secid</a>);", 
"void <a class=\"id\" href=\"#security_release_secctx\">security_release_secctx</a>(char *<a class=\"id\" href=\"#secdata\">secdata</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#seclen\">seclen</a>);", 
"", 
"int <a class=\"id\" href=\"#security_inode_notifysecctx\">security_inode_notifysecctx</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, void *<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#ctxlen\">ctxlen</a>);", 
"int <a class=\"id\" href=\"#security_inode_setsecctx\">security_inode_setsecctx</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, void *<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#ctxlen\">ctxlen</a>);", 
"int <a class=\"id\" href=\"#security_inode_getsecctx\">security_inode_getsecctx</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, void **<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#ctxlen\">ctxlen</a>);", 
"#else <span class=\"comment\">/* CONFIG_SECURITY */</span>", 
"struct <a class=\"id\" href=\"#security_mnt_opts\">security_mnt_opts</a> {", 
"};", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#security_init_mnt_opts\">security_init_mnt_opts</a>(struct <a class=\"id\" href=\"#security_mnt_opts\">security_mnt_opts</a> *<a class=\"id\" href=\"#opts\">opts</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#security_free_mnt_opts\">security_free_mnt_opts</a>(struct <a class=\"id\" href=\"#security_mnt_opts\">security_mnt_opts</a> *<a class=\"id\" href=\"#opts\">opts</a>)", 
"{", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is the default capabilities functionality.  Most of these functions</span>", 
"<span class=\"comment\"> * are just stubbed out, but a few must call the proper capable code.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_init\">security_init</a>(void)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_ptrace_access_check\">security_ptrace_access_check</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#child\">child</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned int <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cap_ptrace_access_check\">cap_ptrace_access_check</a>(<a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#mode\">mode</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_ptrace_traceme\">security_ptrace_traceme</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#parent\">parent</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cap_ptrace_traceme\">cap_ptrace_traceme</a>(<a class=\"id\" href=\"#parent\">parent</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_capget\">security_capget</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#target\">target</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#kernel_cap_t\">kernel_cap_t</a> *<a class=\"id\" href=\"#effective\">effective</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#kernel_cap_t\">kernel_cap_t</a> *<a class=\"id\" href=\"#inheritable\">inheritable</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#kernel_cap_t\">kernel_cap_t</a> *<a class=\"id\" href=\"#permitted\">permitted</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cap_capget\">cap_capget</a>(<a class=\"id\" href=\"#target\">target</a>, <a class=\"id\" href=\"#effective\">effective</a>, <a class=\"id\" href=\"#inheritable\">inheritable</a>, <a class=\"id\" href=\"#permitted\">permitted</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_capset\">security_capset</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#new\">new</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#old\">old</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const <a class=\"id\" href=\"#kernel_cap_t\">kernel_cap_t</a> *<a class=\"id\" href=\"#effective\">effective</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const <a class=\"id\" href=\"#kernel_cap_t\">kernel_cap_t</a> *<a class=\"id\" href=\"#inheritable\">inheritable</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const <a class=\"id\" href=\"#kernel_cap_t\">kernel_cap_t</a> *<a class=\"id\" href=\"#permitted\">permitted</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cap_capset\">cap_capset</a>(<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#old\">old</a>, <a class=\"id\" href=\"#effective\">effective</a>, <a class=\"id\" href=\"#inheritable\">inheritable</a>, <a class=\"id\" href=\"#permitted\">permitted</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_capable\">security_capable</a>(int <a class=\"id\" href=\"#cap\">cap</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cap_capable\">cap_capable</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#current_cred\">current_cred</a>(), <a class=\"id\" href=\"#cap\">cap</a>, <a class=\"id\" href=\"#SECURITY_CAP_AUDIT\">SECURITY_CAP_AUDIT</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_real_capable\">security_real_capable</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, int <a class=\"id\" href=\"#cap\">cap</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#cap_capable\">cap_capable</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#__task_cred\">__task_cred</a>(<a class=\"id\" href=\"#tsk\">tsk</a>), <a class=\"id\" href=\"#cap\">cap</a>, <a class=\"id\" href=\"#SECURITY_CAP_AUDIT\">SECURITY_CAP_AUDIT</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a>", 
"int <a class=\"id\" href=\"#security_real_capable_noaudit\">security_real_capable_noaudit</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, int <a class=\"id\" href=\"#cap\">cap</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#cap_capable\">cap_capable</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#__task_cred\">__task_cred</a>(<a class=\"id\" href=\"#tsk\">tsk</a>), <a class=\"id\" href=\"#cap\">cap</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#SECURITY_CAP_NOAUDIT\">SECURITY_CAP_NOAUDIT</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_sysctl\">security_sysctl</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#op\">op</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_quotactl\">security_quotactl</a>(int <a class=\"id\" href=\"#cmds\">cmds</a>, int <a class=\"id\" href=\"#type\">type</a>, int <a class=\"id\" href=\"#id\">id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_quota_on\">security_quota_on</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_syslog\">security_syslog</a>(int <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#from_file\">from_file</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cap_syslog\">cap_syslog</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#from_file\">from_file</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_settime\">security_settime</a>(struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#ts\">ts</a>, struct <a class=\"id\" href=\"#timezone\">timezone</a> *<a class=\"id\" href=\"#tz\">tz</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cap_settime\">cap_settime</a>(<a class=\"id\" href=\"#ts\">ts</a>, <a class=\"id\" href=\"#tz\">tz</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_vm_enough_memory\">security_vm_enough_memory</a>(long <a class=\"id\" href=\"#pages\">pages</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cap_vm_enough_memory\">cap_vm_enough_memory</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pages\">pages</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_vm_enough_memory_mm\">security_vm_enough_memory_mm</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, long <a class=\"id\" href=\"#pages\">pages</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#mm\">mm</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cap_vm_enough_memory\">cap_vm_enough_memory</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pages\">pages</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_vm_enough_memory_kern\">security_vm_enough_memory_kern</a>(long <a class=\"id\" href=\"#pages\">pages</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* If current-&gt;mm is a kernel thread then we will pass NULL,</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   for this specific case that is fine */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cap_vm_enough_memory\">cap_vm_enough_memory</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#pages\">pages</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_bprm_set_creds\">security_bprm_set_creds</a>(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cap_bprm_set_creds\">cap_bprm_set_creds</a>(<a class=\"id\" href=\"#bprm\">bprm</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_bprm_check\">security_bprm_check</a>(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#security_bprm_committing_creds\">security_bprm_committing_creds</a>(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#security_bprm_committed_creds\">security_bprm_committed_creds</a>(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_bprm_secureexec\">security_bprm_secureexec</a>(struct <a class=\"id\" href=\"#linux_binprm\">linux_binprm</a> *<a class=\"id\" href=\"#bprm\">bprm</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cap_bprm_secureexec\">cap_bprm_secureexec</a>(<a class=\"id\" href=\"#bprm\">bprm</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_sb_alloc\">security_sb_alloc</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#security_sb_free\">security_sb_free</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{ }", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_sb_copy_data\">security_sb_copy_data</a>(char *<a class=\"id\" href=\"#orig\">orig</a>, char *<a class=\"id\" href=\"#copy\">copy</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_sb_kern_mount\">security_sb_kern_mount</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, int <a class=\"id\" href=\"#flags\">flags</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_sb_show_options\">security_sb_show_options</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_sb_statfs\">security_sb_statfs</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_sb_mount\">security_sb_mount</a>(char *<a class=\"id\" href=\"#dev_name\">dev_name</a>, struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    char *<a class=\"id\" href=\"#type\">type</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_sb_umount\">security_sb_umount</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_sb_pivotroot\">security_sb_pivotroot</a>(struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#old_path\">old_path</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#new_path\">new_path</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_sb_set_mnt_opts\">security_sb_set_mnt_opts</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#security_mnt_opts\">security_mnt_opts</a> *<a class=\"id\" href=\"#opts\">opts</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#security_sb_clone_mnt_opts\">security_sb_clone_mnt_opts</a>(const struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#oldsb\">oldsb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#newsb\">newsb</a>)", 
"{ }", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_sb_parse_opts_str\">security_sb_parse_opts_str</a>(char *<a class=\"id\" href=\"#options\">options</a>, struct <a class=\"id\" href=\"#security_mnt_opts\">security_mnt_opts</a> *<a class=\"id\" href=\"#opts\">opts</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_inode_alloc\">security_inode_alloc</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#security_inode_free\">security_inode_free</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{ }", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_inode_init_security\">security_inode_init_security</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>char **<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void **<a class=\"id\" href=\"#value\">value</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_inode_create\">security_inode_create</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_inode_link\">security_inode_link</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#old_dentry\">old_dentry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#new_dentry\">new_dentry</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_inode_unlink\">security_inode_unlink</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_inode_symlink\">security_inode_symlink</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const char *<a class=\"id\" href=\"#old_name\">old_name</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_inode_mkdir\">security_inode_mkdir</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_inode_rmdir\">security_inode_rmdir</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_inode_mknod\">security_inode_mknod</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_inode_rename\">security_inode_rename</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#old_dir\">old_dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#old_dentry\">old_dentry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#new_dir\">new_dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#new_dentry\">new_dentry</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_inode_readlink\">security_inode_readlink</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_inode_follow_link\">security_inode_follow_link</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#nameidata\">nameidata</a> *<a class=\"id\" href=\"#nd\">nd</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_inode_permission\">security_inode_permission</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, int <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_inode_setattr\">security_inode_setattr</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#iattr\">iattr</a> *<a class=\"id\" href=\"#attr\">attr</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_inode_getattr\">security_inode_getattr</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_inode_setxattr\">security_inode_setxattr</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a>, const void *<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cap_inode_setxattr\">cap_inode_setxattr</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#security_inode_post_setxattr\">security_inode_post_setxattr</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a>, const void *<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{ }", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_inode_getxattr\">security_inode_getxattr</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_inode_listxattr\">security_inode_listxattr</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_inode_removexattr\">security_inode_removexattr</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cap_inode_removexattr\">cap_inode_removexattr</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_inode_need_killpriv\">security_inode_need_killpriv</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cap_inode_need_killpriv\">cap_inode_need_killpriv</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_inode_killpriv\">security_inode_killpriv</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cap_inode_killpriv\">cap_inode_killpriv</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_inode_getsecurity\">security_inode_getsecurity</a>(const struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, const char *<a class=\"id\" href=\"#name\">name</a>, void **<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#alloc\">alloc</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_inode_setsecurity\">security_inode_setsecurity</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, const char *<a class=\"id\" href=\"#name\">name</a>, const void *<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_inode_listsecurity\">security_inode_listsecurity</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, char *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#buffer_size\">buffer_size</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#security_inode_getsecid\">security_inode_getsecid</a>(const struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#secid\">secid</a>)", 
"{", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#secid\">secid</a> = 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_file_permission\">security_file_permission</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, int <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_file_alloc\">security_file_alloc</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#security_file_free\">security_file_free</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{ }", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_file_ioctl\">security_file_ioctl</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_file_mmap\">security_file_mmap</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, unsigned long <a class=\"id\" href=\"#reqprot\">reqprot</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#prot\">prot</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#addr_only\">addr_only</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cap_file_mmap\">cap_file_mmap</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#reqprot\">reqprot</a>, <a class=\"id\" href=\"#prot\">prot</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#addr_only\">addr_only</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_file_mprotect\">security_file_mprotect</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#reqprot\">reqprot</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#prot\">prot</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_file_lock\">security_file_lock</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_file_fcntl\">security_file_fcntl</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_file_set_fowner\">security_file_set_fowner</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_file_send_sigiotask\">security_file_send_sigiotask</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#fown_struct\">fown_struct</a> *<a class=\"id\" href=\"#fown\">fown</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       int <a class=\"id\" href=\"#sig\">sig</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_file_receive\">security_file_receive</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_dentry_open\">security_dentry_open</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_task_create\">security_task_create</a>(unsigned long <a class=\"id\" href=\"#clone_flags\">clone_flags</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_cred_alloc_blank\">security_cred_alloc_blank</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#security_cred_free\">security_cred_free</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>)", 
"{ }", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_prepare_creds\">security_prepare_creds</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#new\">new</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#old\">old</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#security_transfer_creds\">security_transfer_creds</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#new\">new</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#old\">old</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_kernel_act_as\">security_kernel_act_as</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#secid\">secid</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_kernel_create_files_as\">security_kernel_create_files_as</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_kernel_module_request\">security_kernel_module_request</a>(char *<a class=\"id\" href=\"#kmod_name\">kmod_name</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_task_fix_setuid\">security_task_fix_setuid</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#new\">new</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#old\">old</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cap_task_fix_setuid\">cap_task_fix_setuid</a>(<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#old\">old</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_task_setpgid\">security_task_setpgid</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pgid\">pgid</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_task_getpgid\">security_task_getpgid</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_task_getsid\">security_task_getsid</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#security_task_getsecid\">security_task_getsecid</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#secid\">secid</a>)", 
"{", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#secid\">secid</a> = 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_task_setnice\">security_task_setnice</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#nice\">nice</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cap_task_setnice\">cap_task_setnice</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#nice\">nice</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_task_setioprio\">security_task_setioprio</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#ioprio\">ioprio</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cap_task_setioprio\">cap_task_setioprio</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#ioprio\">ioprio</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_task_getioprio\">security_task_getioprio</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_task_setrlimit\">security_task_setrlimit</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned int <a class=\"id\" href=\"#resource\">resource</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#rlimit\">rlimit</a> *<a class=\"id\" href=\"#new_rlim\">new_rlim</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_task_setscheduler\">security_task_setscheduler</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#policy\">policy</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#sched_param\">sched_param</a> *<a class=\"id\" href=\"#lp\">lp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cap_task_setscheduler\">cap_task_setscheduler</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#policy\">policy</a>, <a class=\"id\" href=\"#lp\">lp</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_task_getscheduler\">security_task_getscheduler</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#security_task_movememory\">security_task_movememory</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
];
xr_frag_insert('l/02/e1e2dc942f0cac3013490f596fd0ece17d84a0.xr', __xr_tmp);
