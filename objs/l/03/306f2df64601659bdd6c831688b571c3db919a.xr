var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Simple NUMA memory policy for the Linux kernel.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright 2003,2004 Andi Kleen, SuSE Labs.</span>", 
"<span class=\"comment\"> * (C) Copyright 2005 Christoph Lameter, Silicon Graphics, Inc.</span>", 
"<span class=\"comment\"> * Subject to the GNU Public License, version 2.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NUMA policy allows the user to give hints in which node(s) memory should</span>", 
"<span class=\"comment\"> * be allocated.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Support four policies per VMA and per process:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The VMA policy has priority over the process policy for a page fault.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * interleave     Allocate memory interleaved over a set of nodes,</span>", 
"<span class=\"comment\"> *                with normal fallback if it fails.</span>", 
"<span class=\"comment\"> *                For VMA based allocations this interleaves based on the</span>", 
"<span class=\"comment\"> *                offset into the backing object or offset into the mapping</span>", 
"<span class=\"comment\"> *                for anonymous memory. For process policy an process counter</span>", 
"<span class=\"comment\"> *                is used.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * bind           Only allocate memory on a specific set of nodes,</span>", 
"<span class=\"comment\"> *                no fallback.</span>", 
"<span class=\"comment\"> *                FIXME: memory is allocated starting with the first node</span>", 
"<span class=\"comment\"> *                to the last. It would be better if bind would truly restrict</span>", 
"<span class=\"comment\"> *                the allocation to memory nodes instead</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * preferred       Try a specific node first before normal fallback.</span>", 
"<span class=\"comment\"> *                As a special case node -1 here means do the allocation</span>", 
"<span class=\"comment\"> *                on the local CPU. This is normally identical to default,</span>", 
"<span class=\"comment\"> *                but useful to set in a VMA when you have a non default</span>", 
"<span class=\"comment\"> *                process policy.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * default        Allocate on the local node first, or when on a VMA</span>", 
"<span class=\"comment\"> *                use the process policy. This is what Linux always did</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>  in a NUMA aware kernel and still does by, ahem, default.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The process policy is applied for most non interrupt memory allocations</span>", 
"<span class=\"comment\"> * in that process' context. Interrupts ignore the policies and always</span>", 
"<span class=\"comment\"> * try to allocate on the local CPU. The VMA policy is only applied for memory</span>", 
"<span class=\"comment\"> * allocations for a VMA in the VM.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Currently there are a few corner cases in swapping where the policy</span>", 
"<span class=\"comment\"> * is not applied, but the majority should be handled. When process policy</span>", 
"<span class=\"comment\"> * is used it is not remembered over swap outs/swap ins.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Only the highest zone in the zone hierarchy gets policied. Allocations</span>", 
"<span class=\"comment\"> * requesting a lower zone just use default policy. This implies that</span>", 
"<span class=\"comment\"> * on systems with highmem kernel lowmem allocation don't get policied.</span>", 
"<span class=\"comment\"> * Same with GFP_DMA allocations.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For shmfs/tmpfs/hugetlbfs shared memory the policy is shared between</span>", 
"<span class=\"comment\"> * all users and remembered even when nobody has memory mapped.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* Notebook:</span>", 
"<span class=\"comment\">   fix mmap readahead to honour policy and enable policy for any page cache</span>", 
"<span class=\"comment\">   object</span>", 
"<span class=\"comment\">   statistics for bigpages</span>", 
"<span class=\"comment\">   global policy for page cache? currently it uses process policy. Requires</span>", 
"<span class=\"comment\">   first item above.</span>", 
"<span class=\"comment\">   handle mremap for shared memory (currently ignored for the policy)</span>", 
"<span class=\"comment\">   grows down?</span>", 
"<span class=\"comment\">   make bind policy root only? It can trigger oom much faster and the</span>", 
"<span class=\"comment\">   kernel is not always grateful with that.</span>", 
"<span class=\"comment\">*/</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mempolicy\">mempolicy</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#highmem\">highmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hugetlb\">hugetlb</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#nodemask\">nodemask</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpuset\">cpuset</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#nsproxy\">nsproxy</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#compat\">compat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#swap\">swap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#seq_file\">seq_file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#proc_fs\">proc_fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#migrate\">migrate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ksm\">ksm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rmap\">rmap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#security\">security</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#syscalls\">syscalls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ctype\">ctype</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm_inline\">mm_inline</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#tlbflush\">tlbflush</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"internal.h\"", 
"", 
"<span class=\"comment\">/* Internal flags */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MPOL_MF_DISCONTIG_OK\">MPOL_MF_DISCONTIG_OK</a> (<a class=\"id\" href=\"#MPOL_MF_INTERNAL\">MPOL_MF_INTERNAL</a> << 0)<span class=\"ts\"/><span class=\"comment\">/* Skip checks for continuous vmas */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MPOL_MF_INVERT\">MPOL_MF_INVERT</a> (<a class=\"id\" href=\"#MPOL_MF_INTERNAL\">MPOL_MF_INTERNAL</a> << 1)<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Invert check for nodemask */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MPOL_MF_STATS\">MPOL_MF_STATS</a> (<a class=\"id\" href=\"#MPOL_MF_INTERNAL\">MPOL_MF_INTERNAL</a> << 2)<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Gather statistics */</span>", 
"", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#policy_cache\">policy_cache</a>;", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#sn_cache\">sn_cache</a>;", 
"", 
"<span class=\"comment\">/* Highest zone. An specific allocation for a zone below that is not</span>", 
"<span class=\"comment\">   policied. */</span>", 
"enum <a class=\"id\" href=\"#zone_type\">zone_type</a> <a class=\"id\" href=\"#policy_zone\">policy_zone</a> = 0;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * run-time system-wide default policy =&gt; local allocation</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> <a class=\"id\" href=\"#default_policy\">default_policy</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#refcnt\">refcnt</a> = <a class=\"id\" href=\"#ATOMIC_INIT\">ATOMIC_INIT</a>(1), <span class=\"comment\">/* never free it */</span>", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#MPOL_PREFERRED\">MPOL_PREFERRED</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#MPOL_F_LOCAL\">MPOL_F_LOCAL</a>,", 
"};", 
"", 
"static const struct <a class=\"id\" href=\"#mempolicy_operations\">mempolicy_operations</a> {", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#create\">create</a>)(struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#pol\">pol</a>, const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodes\">nodes</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If read-side task has no lock to protect task-&gt;mempolicy, write-side</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * task will rebind the task-&gt;mempolicy by two step. The first step is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * setting all the newly nodes, and the second step is cleaning all the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * disallowed nodes. In this way, we can avoid finding no node to alloc</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we have a lock to protect task-&gt;mempolicy in read-side, we do</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * rebind directly.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * step:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * <span class=\"ts\"/>MPOL_REBIND_ONCE - do rebind work at once</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * <span class=\"ts\"/>MPOL_REBIND_STEP1 - set all the newly nodes</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * <span class=\"ts\"/>MPOL_REBIND_STEP2 - clean all the disallowed nodes</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#rebind\">rebind</a>)(struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#pol\">pol</a>, const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodes\">nodes</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#mpol_rebind_step\">mpol_rebind_step</a> <a class=\"id\" href=\"#step\">step</a>);", 
"} <a class=\"id\" href=\"#mpol_ops\">mpol_ops</a>[<a class=\"id\" href=\"#MPOL_MAX\">MPOL_MAX</a>];", 
"", 
"<span class=\"comment\">/* Check that the nodemask contains at least one populated zone */</span>", 
"static int <a class=\"id\" href=\"#is_valid_nodemask\">is_valid_nodemask</a>(const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodemask\">nodemask</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nd\">nd</a>, <a class=\"id\" href=\"#k\">k</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_node_mask\">for_each_node_mask</a>(<a class=\"id\" href=\"#nd\">nd</a>, *<a class=\"id\" href=\"#nodemask\">nodemask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#z\">z</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#k\">k</a> = 0; <a class=\"id\" href=\"#k\">k</a> <= <a class=\"id\" href=\"#policy_zone\">policy_zone</a>; <a class=\"id\" href=\"#k\">k</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#z\">z</a> = &amp;<a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#nd\">nd</a>)-><a class=\"id\" href=\"#node_zones\">node_zones</a>[<a class=\"id\" href=\"#k\">k</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#z\">z</a>-><a class=\"id\" href=\"#present_pages\">present_pages</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#mpol_store_user_nodemask\">mpol_store_user_nodemask</a>(const struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#pol\">pol</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MPOL_MODE_FLAGS\">MPOL_MODE_FLAGS</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#mpol_relative_nodemask\">mpol_relative_nodemask</a>(<a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#ret\">ret</a>, const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#orig\">orig</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#rel\">rel</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodes_fold\">nodes_fold</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, *<a class=\"id\" href=\"#orig\">orig</a>, <a class=\"id\" href=\"#nodes_weight\">nodes_weight</a>(*<a class=\"id\" href=\"#rel\">rel</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodes_onto\">nodes_onto</a>(*<a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, *<a class=\"id\" href=\"#rel\">rel</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#mpol_new_interleave\">mpol_new_interleave</a>(struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#pol\">pol</a>, const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodes\">nodes</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nodes_empty\">nodes_empty</a>(*<a class=\"id\" href=\"#nodes\">nodes</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#nodes\">nodes</a> = *<a class=\"id\" href=\"#nodes\">nodes</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#mpol_new_preferred\">mpol_new_preferred</a>(struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#pol\">pol</a>, const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodes\">nodes</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#nodes\">nodes</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#MPOL_F_LOCAL\">MPOL_F_LOCAL</a>;<span class=\"ts\"/><span class=\"comment\">/* local allocation */</span>", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#nodes_empty\">nodes_empty</a>(*<a class=\"id\" href=\"#nodes\">nodes</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*  no allowed nodes */</span>", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#preferred_node\">preferred_node</a> = <a class=\"id\" href=\"#first_node\">first_node</a>(*<a class=\"id\" href=\"#nodes\">nodes</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#mpol_new_bind\">mpol_new_bind</a>(struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#pol\">pol</a>, const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodes\">nodes</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_valid_nodemask\">is_valid_nodemask</a>(<a class=\"id\" href=\"#nodes\">nodes</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#nodes\">nodes</a> = *<a class=\"id\" href=\"#nodes\">nodes</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * mpol_set_nodemask is called after mpol_new() to set up the nodemask, if</span>", 
"<span class=\"comment\"> * any, for the new policy.  mpol_new() has already validated the nodes</span>", 
"<span class=\"comment\"> * parameter with respect to the policy mode and flags.  But, we need to</span>", 
"<span class=\"comment\"> * handle an empty nodemask with MPOL_PREFERRED here.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Must be called holding task's alloc_lock to protect task's mems_allowed</span>", 
"<span class=\"comment\"> * and mempolicy.  May also be called holding the mmap_semaphore for write.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#mpol_set_nodemask\">mpol_set_nodemask</a>(struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#pol\">pol</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodes\">nodes</a>, struct <a class=\"id\" href=\"#nodemask_scratch\">nodemask_scratch</a> *<a class=\"id\" href=\"#nsc\">nsc</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* if mode is MPOL_DEFAULT, pol is NULL. This is right. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pol\">pol</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"comment\">/* Check N_HIGH_MEMORY */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodes_and\">nodes_and</a>(<a class=\"id\" href=\"#nsc\">nsc</a>-><a class=\"id\" href=\"#mask1\">mask1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#cpuset_current_mems_allowed\">cpuset_current_mems_allowed</a>, <a class=\"id\" href=\"#node_states\">node_states</a>[<a class=\"id\" href=\"#N_HIGH_MEMORY\">N_HIGH_MEMORY</a>]);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(!<a class=\"id\" href=\"#nodes\">nodes</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#mode\">mode</a> == <a class=\"id\" href=\"#MPOL_PREFERRED\">MPOL_PREFERRED</a> && <a class=\"id\" href=\"#nodes_empty\">nodes_empty</a>(*<a class=\"id\" href=\"#nodes\">nodes</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodes\">nodes</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;<span class=\"ts\"/><span class=\"comment\">/* explicit local allocation */</span>", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MPOL_F_RELATIVE_NODES\">MPOL_F_RELATIVE_NODES</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mpol_relative_nodemask\">mpol_relative_nodemask</a>(&amp;<a class=\"id\" href=\"#nsc\">nsc</a>-><a class=\"id\" href=\"#mask2\">mask2</a>, <a class=\"id\" href=\"#nodes\">nodes</a>,&amp;<a class=\"id\" href=\"#nsc\">nsc</a>-><a class=\"id\" href=\"#mask1\">mask1</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodes_and\">nodes_and</a>(<a class=\"id\" href=\"#nsc\">nsc</a>-><a class=\"id\" href=\"#mask2\">mask2</a>, *<a class=\"id\" href=\"#nodes\">nodes</a>, <a class=\"id\" href=\"#nsc\">nsc</a>-><a class=\"id\" href=\"#mask1\">mask1</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mpol_store_user_nodemask\">mpol_store_user_nodemask</a>(<a class=\"id\" href=\"#pol\">pol</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#w\">w</a>.<a class=\"id\" href=\"#user_nodemask\">user_nodemask</a> = *<a class=\"id\" href=\"#nodes\">nodes</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#w\">w</a>.<a class=\"id\" href=\"#cpuset_mems_allowed\">cpuset_mems_allowed</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpuset_current_mems_allowed\">cpuset_current_mems_allowed</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nodes\">nodes</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#mpol_ops\">mpol_ops</a>[<a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#mode\">mode</a>].<a class=\"id\" href=\"#create\">create</a>(<a class=\"id\" href=\"#pol\">pol</a>, &amp;<a class=\"id\" href=\"#nsc\">nsc</a>-><a class=\"id\" href=\"#mask2\">mask2</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#mpol_ops\">mpol_ops</a>[<a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#mode\">mode</a>].<a class=\"id\" href=\"#create\">create</a>(<a class=\"id\" href=\"#pol\">pol</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function just creates a new policy, does some check and simple</span>", 
"<span class=\"comment\"> * initialization. You must invoke mpol_set_nodemask() to set nodes.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#mpol_new\">mpol_new</a>(unsigned short <a class=\"id\" href=\"#mode\">mode</a>, unsigned short <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodes\">nodes</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#policy\">policy</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"setting mode %d flags %d nodes[0] %lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#nodes\">nodes</a> ? <a class=\"id\" href=\"#nodes_addr\">nodes_addr</a>(*<a class=\"id\" href=\"#nodes\">nodes</a>)[0] : -1);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mode\">mode</a> == <a class=\"id\" href=\"#MPOL_DEFAULT\">MPOL_DEFAULT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nodes\">nodes</a> && !<a class=\"id\" href=\"#nodes_empty\">nodes_empty</a>(*<a class=\"id\" href=\"#nodes\">nodes</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;<span class=\"ts\"/><span class=\"comment\">/* simply delete any existing policy */</span>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(!<a class=\"id\" href=\"#nodes\">nodes</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * MPOL_PREFERRED cannot be used with MPOL_F_STATIC_NODES or</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * MPOL_F_RELATIVE_NODES if the nodemask is empty (local allocation).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * All other modes require a valid pointer to a non-empty nodemask.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mode\">mode</a> == <a class=\"id\" href=\"#MPOL_PREFERRED\">MPOL_PREFERRED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nodes_empty\">nodes_empty</a>(*<a class=\"id\" href=\"#nodes\">nodes</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (((<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MPOL_F_STATIC_NODES\">MPOL_F_STATIC_NODES</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MPOL_F_RELATIVE_NODES\">MPOL_F_RELATIVE_NODES</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#nodes_empty\">nodes_empty</a>(*<a class=\"id\" href=\"#nodes\">nodes</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#policy\">policy</a> = <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#policy_cache\">policy_cache</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#policy\">policy</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#mode\">mode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#policy\">policy</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Slow path of a mpol destructor. */</span>", 
"void <a class=\"id\" href=\"#__mpol_put\">__mpol_put</a>(struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#policy_cache\">policy_cache</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#mpol_rebind_default\">mpol_rebind_default</a>(struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#pol\">pol</a>, const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodes\">nodes</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#mpol_rebind_step\">mpol_rebind_step</a> <a class=\"id\" href=\"#step\">step</a>)", 
"{", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * step:</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>MPOL_REBIND_ONCE  - do rebind work at once</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>MPOL_REBIND_STEP1 - set all the newly nodes</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>MPOL_REBIND_STEP2 - clean all the disallowed nodes</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#mpol_rebind_nodemask\">mpol_rebind_nodemask</a>(struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#pol\">pol</a>, const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodes\">nodes</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> enum <a class=\"id\" href=\"#mpol_rebind_step\">mpol_rebind_step</a> <a class=\"id\" href=\"#step\">step</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MPOL_F_STATIC_NODES\">MPOL_F_STATIC_NODES</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodes_and\">nodes_and</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#w\">w</a>.<a class=\"id\" href=\"#user_nodemask\">user_nodemask</a>, *<a class=\"id\" href=\"#nodes\">nodes</a>);", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MPOL_F_RELATIVE_NODES\">MPOL_F_RELATIVE_NODES</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mpol_relative_nodemask\">mpol_relative_nodemask</a>(&amp;<a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#w\">w</a>.<a class=\"id\" href=\"#user_nodemask\">user_nodemask</a>, <a class=\"id\" href=\"#nodes\">nodes</a>);", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * if step == 1, we use -&gt;w.cpuset_mems_allowed to cache the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * result</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#step\">step</a> == <a class=\"id\" href=\"#MPOL_REBIND_ONCE\">MPOL_REBIND_ONCE</a> || <a class=\"id\" href=\"#step\">step</a> == <a class=\"id\" href=\"#MPOL_REBIND_STEP1\">MPOL_REBIND_STEP1</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodes_remap\">nodes_remap</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#nodes\">nodes</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#w\">w</a>.<a class=\"id\" href=\"#cpuset_mems_allowed\">cpuset_mems_allowed</a>, *<a class=\"id\" href=\"#nodes\">nodes</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#w\">w</a>.<a class=\"id\" href=\"#cpuset_mems_allowed\">cpuset_mems_allowed</a> = <a class=\"id\" href=\"#step\">step</a> ? <a class=\"id\" href=\"#tmp\">tmp</a> : *<a class=\"id\" href=\"#nodes\">nodes</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#step\">step</a> == <a class=\"id\" href=\"#MPOL_REBIND_STEP2\">MPOL_REBIND_STEP2</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#w\">w</a>.<a class=\"id\" href=\"#cpuset_mems_allowed\">cpuset_mems_allowed</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#w\">w</a>.<a class=\"id\" href=\"#cpuset_mems_allowed\">cpuset_mems_allowed</a> = *<a class=\"id\" href=\"#nodes\">nodes</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nodes_empty\">nodes_empty</a>(<a class=\"id\" href=\"#tmp\">tmp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = *<a class=\"id\" href=\"#nodes\">nodes</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#step\">step</a> == <a class=\"id\" href=\"#MPOL_REBIND_STEP1\">MPOL_REBIND_STEP1</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodes_or\">nodes_or</a>(<a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#nodes\">nodes</a>, <a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#nodes\">nodes</a>, <a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#step\">step</a> == <a class=\"id\" href=\"#MPOL_REBIND_ONCE\">MPOL_REBIND_ONCE</a> || <a class=\"id\" href=\"#step\">step</a> == <a class=\"id\" href=\"#MPOL_REBIND_STEP2\">MPOL_REBIND_STEP2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#nodes\">nodes</a> = <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#node_isset\">node_isset</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#il_next\">il_next</a>, <a class=\"id\" href=\"#tmp\">tmp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#il_next\">il_next</a> = <a class=\"id\" href=\"#next_node\">next_node</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#il_next\">il_next</a>, <a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#il_next\">il_next</a> >= <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#il_next\">il_next</a> = <a class=\"id\" href=\"#first_node\">first_node</a>(<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#il_next\">il_next</a> >= <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#il_next\">il_next</a> = <a class=\"id\" href=\"#numa_node_id\">numa_node_id</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#mpol_rebind_preferred\">mpol_rebind_preferred</a>(struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#pol\">pol</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodes\">nodes</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  enum <a class=\"id\" href=\"#mpol_rebind_step\">mpol_rebind_step</a> <a class=\"id\" href=\"#step\">step</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MPOL_F_STATIC_NODES\">MPOL_F_STATIC_NODES</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#first_node\">first_node</a>(<a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#w\">w</a>.<a class=\"id\" href=\"#user_nodemask\">user_nodemask</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#node_isset\">node_isset</a>(<a class=\"id\" href=\"#node\">node</a>, *<a class=\"id\" href=\"#nodes\">nodes</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#preferred_node\">preferred_node</a> = <a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#MPOL_F_LOCAL\">MPOL_F_LOCAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#MPOL_F_LOCAL\">MPOL_F_LOCAL</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MPOL_F_RELATIVE_NODES\">MPOL_F_RELATIVE_NODES</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mpol_relative_nodemask\">mpol_relative_nodemask</a>(&amp;<a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#w\">w</a>.<a class=\"id\" href=\"#user_nodemask\">user_nodemask</a>, <a class=\"id\" href=\"#nodes\">nodes</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#preferred_node\">preferred_node</a> = <a class=\"id\" href=\"#first_node\">first_node</a>(<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/>} else if (!(<a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MPOL_F_LOCAL\">MPOL_F_LOCAL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#preferred_node\">preferred_node</a> = <a class=\"id\" href=\"#node_remap\">node_remap</a>(<a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#preferred_node\">preferred_node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#w\">w</a>.<a class=\"id\" href=\"#cpuset_mems_allowed\">cpuset_mems_allowed</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   *<a class=\"id\" href=\"#nodes\">nodes</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#w\">w</a>.<a class=\"id\" href=\"#cpuset_mems_allowed\">cpuset_mems_allowed</a> = *<a class=\"id\" href=\"#nodes\">nodes</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * mpol_rebind_policy - Migrate a policy to a different set of nodes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If read-side task has no lock to protect task-&gt;mempolicy, write-side</span>", 
"<span class=\"comment\"> * task will rebind the task-&gt;mempolicy by two step. The first step is</span>", 
"<span class=\"comment\"> * setting all the newly nodes, and the second step is cleaning all the</span>", 
"<span class=\"comment\"> * disallowed nodes. In this way, we can avoid finding no node to alloc</span>", 
"<span class=\"comment\"> * page.</span>", 
"<span class=\"comment\"> * If we have a lock to protect task-&gt;mempolicy in read-side, we do</span>", 
"<span class=\"comment\"> * rebind directly.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * step:</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>MPOL_REBIND_ONCE  - do rebind work at once</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>MPOL_REBIND_STEP1 - set all the newly nodes</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>MPOL_REBIND_STEP2 - clean all the disallowed nodes</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#mpol_rebind_policy\">mpol_rebind_policy</a>(struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#pol\">pol</a>, const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#newmask\">newmask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#mpol_rebind_step\">mpol_rebind_step</a> <a class=\"id\" href=\"#step\">step</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pol\">pol</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mpol_store_user_nodemask\">mpol_store_user_nodemask</a>(<a class=\"id\" href=\"#pol\">pol</a>) && <a class=\"id\" href=\"#step\">step</a> == 0 &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#nodes_equal\">nodes_equal</a>(<a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#w\">w</a>.<a class=\"id\" href=\"#cpuset_mems_allowed\">cpuset_mems_allowed</a>, *<a class=\"id\" href=\"#newmask\">newmask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#step\">step</a> == <a class=\"id\" href=\"#MPOL_REBIND_STEP1\">MPOL_REBIND_STEP1</a> && (<a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MPOL_F_REBINDING\">MPOL_F_REBINDING</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#step\">step</a> == <a class=\"id\" href=\"#MPOL_REBIND_STEP2\">MPOL_REBIND_STEP2</a> && !(<a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MPOL_F_REBINDING\">MPOL_F_REBINDING</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#step\">step</a> == <a class=\"id\" href=\"#MPOL_REBIND_STEP1\">MPOL_REBIND_STEP1</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#MPOL_F_REBINDING\">MPOL_F_REBINDING</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#step\">step</a> == <a class=\"id\" href=\"#MPOL_REBIND_STEP2\">MPOL_REBIND_STEP2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#MPOL_F_REBINDING\">MPOL_F_REBINDING</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#step\">step</a> >= <a class=\"id\" href=\"#MPOL_REBIND_NSTEP\">MPOL_REBIND_NSTEP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mpol_ops\">mpol_ops</a>[<a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#mode\">mode</a>].<a class=\"id\" href=\"#rebind\">rebind</a>(<a class=\"id\" href=\"#pol\">pol</a>, <a class=\"id\" href=\"#newmask\">newmask</a>, <a class=\"id\" href=\"#step\">step</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Wrapper for mpol_rebind_policy() that just requires task</span>", 
"<span class=\"comment\"> * pointer, and updates task mempolicy.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called with task's alloc_lock held.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#mpol_rebind_task\">mpol_rebind_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#new\">new</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#mpol_rebind_step\">mpol_rebind_step</a> <a class=\"id\" href=\"#step\">step</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mpol_rebind_policy\">mpol_rebind_policy</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#mempolicy\">mempolicy</a>, <a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#step\">step</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Rebind each vma in mm to new nodemask.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Call holding a reference to mm.  Takes mm-&gt;mmap_sem during call.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#mpol_rebind_mm\">mpol_rebind_mm</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#new\">new</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap\">mmap</a>; <a class=\"id\" href=\"#vma\">vma</a>; <a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mpol_rebind_policy\">mpol_rebind_policy</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_policy\">vm_policy</a>, <a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#MPOL_REBIND_ONCE\">MPOL_REBIND_ONCE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#mempolicy_operations\">mempolicy_operations</a> <a class=\"id\" href=\"#mpol_ops\">mpol_ops</a>[<a class=\"id\" href=\"#MPOL_MAX\">MPOL_MAX</a>] = {", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#MPOL_DEFAULT\">MPOL_DEFAULT</a>] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#rebind\">rebind</a> = <a class=\"id\" href=\"#mpol_rebind_default\">mpol_rebind_default</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#MPOL_INTERLEAVE\">MPOL_INTERLEAVE</a>] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#create\">create</a> = <a class=\"id\" href=\"#mpol_new_interleave\">mpol_new_interleave</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#rebind\">rebind</a> = <a class=\"id\" href=\"#mpol_rebind_nodemask\">mpol_rebind_nodemask</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#MPOL_PREFERRED\">MPOL_PREFERRED</a>] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#create\">create</a> = <a class=\"id\" href=\"#mpol_new_preferred\">mpol_new_preferred</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#rebind\">rebind</a> = <a class=\"id\" href=\"#mpol_rebind_preferred\">mpol_rebind_preferred</a>,", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#MPOL_BIND\">MPOL_BIND</a>] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#create\">create</a> = <a class=\"id\" href=\"#mpol_new_bind\">mpol_new_bind</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#rebind\">rebind</a> = <a class=\"id\" href=\"#mpol_rebind_nodemask\">mpol_rebind_nodemask</a>,", 
"<span class=\"ts\"/>},", 
"};", 
"", 
"static void <a class=\"id\" href=\"#gather_stats\">gather_stats</a>(struct <a class=\"id\" href=\"#page\">page</a> *, void *, int <a class=\"id\" href=\"#pte_dirty\">pte_dirty</a>);", 
"static void <a class=\"id\" href=\"#migrate_page_add\">migrate_page_add</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#pagelist\">pagelist</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"comment\">/* Scan through pages checking if pages follow certain conditions. */</span>", 
"static int <a class=\"id\" href=\"#check_pte_range\">check_pte_range</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodes\">nodes</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#private\">private</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#orig_pte\">orig_pte</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#pte\">pte</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#ptl\">ptl</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#orig_pte\">orig_pte</a> = <a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#pte_offset_map_lock\">pte_offset_map_lock</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#addr\">addr</a>, &amp;<a class=\"id\" href=\"#ptl\">ptl</a>);", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#nid\">nid</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pte_present\">pte_present</a>(*<a class=\"id\" href=\"#pte\">pte</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#vm_normal_page\">vm_normal_page</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>, *<a class=\"id\" href=\"#pte\">pte</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * vm_normal_page() filters out zero pages, but there might</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * still be PageReserved pages to skip, perhaps in a VDSO.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * And we cannot move PageKsm pages sensibly or safely yet.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageReserved\">PageReserved</a>(<a class=\"id\" href=\"#page\">page</a>) || <a class=\"id\" href=\"#PageKsm\">PageKsm</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nid\">nid</a> = <a class=\"id\" href=\"#page_to_nid\">page_to_nid</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#node_isset\">node_isset</a>(<a class=\"id\" href=\"#nid\">nid</a>, *<a class=\"id\" href=\"#nodes\">nodes</a>) == !!(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MPOL_MF_INVERT\">MPOL_MF_INVERT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MPOL_MF_STATS\">MPOL_MF_STATS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gather_stats\">gather_stats</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#private\">private</a>, <a class=\"id\" href=\"#pte_dirty\">pte_dirty</a>(*<a class=\"id\" href=\"#pte\">pte</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#flags\">flags</a> &amp; (<a class=\"id\" href=\"#MPOL_MF_MOVE\">MPOL_MF_MOVE</a> | <a class=\"id\" href=\"#MPOL_MF_MOVE_ALL\">MPOL_MF_MOVE_ALL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#migrate_page_add\">migrate_page_add</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#private\">private</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#pte\">pte</a>++, <a class=\"id\" href=\"#addr\">addr</a> += <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, <a class=\"id\" href=\"#addr\">addr</a> != <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap_unlock\">pte_unmap_unlock</a>(<a class=\"id\" href=\"#orig_pte\">orig_pte</a>, <a class=\"id\" href=\"#ptl\">ptl</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#addr\">addr</a> != <a class=\"id\" href=\"#end\">end</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#check_pmd_range\">check_pmd_range</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#pud\">pud</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodes\">nodes</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#private\">private</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd\">pmd</a> = <a class=\"id\" href=\"#pmd_offset\">pmd_offset</a>(<a class=\"id\" href=\"#pud\">pud</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#pmd_addr_end\">pmd_addr_end</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pmd_none_or_clear_bad\">pmd_none_or_clear_bad</a>(<a class=\"id\" href=\"#pmd\">pmd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#check_pte_range\">check_pte_range</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#nodes\">nodes</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#private\">private</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#pmd\">pmd</a>++, <a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#addr\">addr</a> != <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#check_pud_range\">check_pud_range</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodes\">nodes</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#private\">private</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#pud\">pud</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud\">pud</a> = <a class=\"id\" href=\"#pud_offset\">pud_offset</a>(<a class=\"id\" href=\"#pgd\">pgd</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#pud_addr_end\">pud_addr_end</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pud_none_or_clear_bad\">pud_none_or_clear_bad</a>(<a class=\"id\" href=\"#pud\">pud</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#check_pmd_range\">check_pmd_range</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#pud\">pud</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#nodes\">nodes</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#private\">private</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#pud\">pud</a>++, <a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#addr\">addr</a> != <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#check_pgd_range\">check_pgd_range</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodes\">nodes</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#private\">private</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd\">pgd</a> = <a class=\"id\" href=\"#pgd_offset\">pgd_offset</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#pgd_addr_end\">pgd_addr_end</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pgd_none_or_clear_bad\">pgd_none_or_clear_bad</a>(<a class=\"id\" href=\"#pgd\">pgd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#check_pud_range\">check_pud_range</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#pgd\">pgd</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#nodes\">nodes</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#private\">private</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#pgd\">pgd</a>++, <a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#addr\">addr</a> != <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check if all pages in a range are on a set of nodes.</span>", 
"<span class=\"comment\"> * If pagelist != NULL then isolate pages from the LRU and</span>", 
"<span class=\"comment\"> * put them on the pagelist.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *", 
"<a class=\"id\" href=\"#check_range\">check_range</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodes\">nodes</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>, void *<a class=\"id\" href=\"#private\">private</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#first\">first</a>, *<a class=\"id\" href=\"#vma\">vma</a>, *<a class=\"id\" href=\"#prev\">prev</a>;", 
"", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#find_vma\">find_vma</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#first\">first</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EFAULT\">EFAULT</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#first\">first</a>; <a class=\"id\" href=\"#vma\">vma</a> && <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> &lt; <a class=\"id\" href=\"#end\">end</a>; <a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MPOL_MF_DISCONTIG_OK\">MPOL_MF_DISCONTIG_OK</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a> && <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> &lt; <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EFAULT\">EFAULT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#prev\">prev</a> && <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> &lt; <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EFAULT\">EFAULT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_vm_hugetlb_page\">is_vm_hugetlb_page</a>(<a class=\"id\" href=\"#vma\">vma</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    ((<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MPOL_MF_STRICT\">MPOL_MF_STRICT</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>     ((<a class=\"id\" href=\"#flags\">flags</a> &amp; (<a class=\"id\" href=\"#MPOL_MF_MOVE\">MPOL_MF_MOVE</a> | <a class=\"id\" href=\"#MPOL_MF_MOVE_ALL\">MPOL_MF_MOVE_ALL</a>)) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma_migratable\">vma_migratable</a>(<a class=\"id\" href=\"#vma\">vma</a>)))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#endvma\">endvma</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#endvma\">endvma</a> &gt; <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#endvma\">endvma</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> &gt; <a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#check_pgd_range\">check_pgd_range</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#endvma\">endvma</a>, <a class=\"id\" href=\"#nodes\">nodes</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#private\">private</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#first\">first</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Apply policy to a single VMA */</span>", 
"static int <a class=\"id\" href=\"#policy_vma\">policy_vma</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#new\">new</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_policy\">vm_policy</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"vma %lx-%lx/%lx vm_ops %p vm_file %p set_policy %p\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a> ? <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a>-><a class=\"id\" href=\"#set_policy\">set_policy</a> : <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a> && <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a>-><a class=\"id\" href=\"#set_policy\">set_policy</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a>-><a class=\"id\" href=\"#set_policy\">set_policy</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mpol_get\">mpol_get</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_policy\">vm_policy</a> = <a class=\"id\" href=\"#new\">new</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mpol_put\">mpol_put</a>(<a class=\"id\" href=\"#old\">old</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Step 2: apply policy to a range and do splits. */</span>", 
"static int <a class=\"id\" href=\"#mbind_range\">mbind_range</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, unsigned long <a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       unsigned long <a class=\"id\" href=\"#end\">end</a>, struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#new_pol\">new_pol</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#pgoff\">pgoff</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#vmstart\">vmstart</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#vmend\">vmend</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#find_vma_prev\">find_vma_prev</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#start\">start</a>, &amp;<a class=\"id\" href=\"#prev\">prev</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#vma\">vma</a> || <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> &gt; <a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/>for (; <a class=\"id\" href=\"#vma\">vma</a> && <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> &lt; <a class=\"id\" href=\"#end\">end</a>; <a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vmstart\">vmstart</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vmend\">vmend</a>   = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgoff\">pgoff</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a> + ((<a class=\"id\" href=\"#start\">start</a> - <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#vma_merge\">vma_merge</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#vmstart\">vmstart</a>, <a class=\"id\" href=\"#vmend\">vmend</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>, <a class=\"id\" href=\"#pgoff\">pgoff</a>, <a class=\"id\" href=\"#new_pol\">new_pol</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#prev\">prev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> != <a class=\"id\" href=\"#vmstart\">vmstart</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#split_vma\">split_vma</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#vmstart\">vmstart</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> != <a class=\"id\" href=\"#vmend\">vmend</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#split_vma\">split_vma</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#vmend\">vmend</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#policy_vma\">policy_vma</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#new_pol\">new_pol</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Update task-&gt;flags PF_MEMPOLICY bit: set iff non-default</span>", 
"<span class=\"comment\"> * mempolicy.  Allows more rapid checking of this (combined perhaps</span>", 
"<span class=\"comment\"> * with other PF_* flag bits) on memory allocation hot code paths.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If called from outside this file, the task 'p' should -only- be</span>", 
"<span class=\"comment\"> * a newly forked child not yet visible on the task list, because</span>", 
"<span class=\"comment\"> * manipulating the task flags of a visible task is not safe.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The above limitation is why this routine has the funny name</span>", 
"<span class=\"comment\"> * mpol_fix_fork_child_flag().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It is also safe to call this with a task pointer of current,</span>", 
"<span class=\"comment\"> * which the static wrapper mpol_set_task_struct_flag() does,</span>", 
"<span class=\"comment\"> * for use within this file.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#mpol_fix_fork_child_flag\">mpol_fix_fork_child_flag</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mempolicy\">mempolicy</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#PF_MEMPOLICY\">PF_MEMPOLICY</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#PF_MEMPOLICY\">PF_MEMPOLICY</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#mpol_set_task_struct_flag\">mpol_set_task_struct_flag</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mpol_fix_fork_child_flag\">mpol_fix_fork_child_flag</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Set the process memory policy */</span>", 
"static long <a class=\"id\" href=\"#do_set_mempolicy\">do_set_mempolicy</a>(unsigned short <a class=\"id\" href=\"#mode\">mode</a>, unsigned short <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodes\">nodes</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#new\">new</a>, *<a class=\"id\" href=\"#old\">old</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NODEMASK_SCRATCH\">NODEMASK_SCRATCH</a>(<a class=\"id\" href=\"#scratch\">scratch</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#scratch\">scratch</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#mpol_new\">mpol_new</a>(<a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#nodes\">nodes</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#new\">new</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * prevent changing our mempolicy while show_numa_maps()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is using it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note:  do_set_mempolicy() can be called at init time</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * with no 'mm'.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mm\">mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_lock\">task_lock</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#mpol_set_nodemask\">mpol_set_nodemask</a>(<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#nodes\">nodes</a>, <a class=\"id\" href=\"#scratch\">scratch</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_unlock\">task_unlock</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mm\">mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mpol_put\">mpol_put</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mempolicy\">mempolicy</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mempolicy\">mempolicy</a> = <a class=\"id\" href=\"#new\">new</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mpol_set_task_struct_flag\">mpol_set_task_struct_flag</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new\">new</a> && <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#mode\">mode</a> == <a class=\"id\" href=\"#MPOL_INTERLEAVE\">MPOL_INTERLEAVE</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#nodes_weight\">nodes_weight</a>(<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#nodes\">nodes</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#il_next\">il_next</a> = <a class=\"id\" href=\"#first_node\">first_node</a>(<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#nodes\">nodes</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_unlock\">task_unlock</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mm\">mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mpol_put\">mpol_put</a>(<a class=\"id\" href=\"#old\">old</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NODEMASK_SCRATCH_FREE\">NODEMASK_SCRATCH_FREE</a>(<a class=\"id\" href=\"#scratch\">scratch</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return nodemask for policy for get_mempolicy() query</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called with task's alloc_lock held</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#get_policy_nodemask\">get_policy_nodemask</a>(struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodes\">nodes</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodes_clear\">nodes_clear</a>(*<a class=\"id\" href=\"#nodes\">nodes</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> == &amp;<a class=\"id\" href=\"#default_policy\">default_policy</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mode\">mode</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MPOL_BIND\">MPOL_BIND</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Fall through */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MPOL_INTERLEAVE\">MPOL_INTERLEAVE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#nodes\">nodes</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#nodes\">nodes</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MPOL_PREFERRED\">MPOL_PREFERRED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MPOL_F_LOCAL\">MPOL_F_LOCAL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node_set\">node_set</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#preferred_node\">preferred_node</a>, *<a class=\"id\" href=\"#nodes\">nodes</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* else return empty node mask for local allocation */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#lookup_node\">lookup_node</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#get_user_pages\">get_user_pages</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a> &amp; <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>, 1, 0, 0, &amp;<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#page_to_nid\">page_to_nid</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Retrieve NUMA policy */</span>", 
"static long <a class=\"id\" href=\"#do_get_mempolicy\">do_get_mempolicy</a>(int *<a class=\"id\" href=\"#policy\">policy</a>, <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nmask\">nmask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#pol\">pol</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mempolicy\">mempolicy</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp;", 
"<span class=\"ts\"/><span class=\"ts\"/>~(unsigned long)(<a class=\"id\" href=\"#MPOL_F_NODE\">MPOL_F_NODE</a>|<a class=\"id\" href=\"#MPOL_F_ADDR\">MPOL_F_ADDR</a>|<a class=\"id\" href=\"#MPOL_F_MEMS_ALLOWED\">MPOL_F_MEMS_ALLOWED</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MPOL_F_MEMS_ALLOWED\">MPOL_F_MEMS_ALLOWED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; (<a class=\"id\" href=\"#MPOL_F_NODE\">MPOL_F_NODE</a>|<a class=\"id\" href=\"#MPOL_F_ADDR\">MPOL_F_ADDR</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#policy\">policy</a> = 0;<span class=\"ts\"/><span class=\"comment\">/* just so it's initialized */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_lock\">task_lock</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#nmask\">nmask</a>  = <a class=\"id\" href=\"#cpuset_current_mems_allowed\">cpuset_current_mems_allowed</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_unlock\">task_unlock</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MPOL_F_ADDR\">MPOL_F_ADDR</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Do NOT fall back to task policy if the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * vma/shared policy at addr is NULL.  We</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * want to return MPOL_DEFAULT in this case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#find_vma_intersection\">find_vma_intersection</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#addr\">addr</a>+1);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#vma\">vma</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a> && <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a>-><a class=\"id\" href=\"#get_policy\">get_policy</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pol\">pol</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a>-><a class=\"id\" href=\"#get_policy\">get_policy</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pol\">pol</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_policy\">vm_policy</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#addr\">addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pol\">pol</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pol\">pol</a> = &amp;<a class=\"id\" href=\"#default_policy\">default_policy</a>;<span class=\"ts\"/><span class=\"comment\">/* indicates default behavior */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MPOL_F_NODE\">MPOL_F_NODE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MPOL_F_ADDR\">MPOL_F_ADDR</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#lookup_node\">lookup_node</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#policy\">policy</a> = <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#pol\">pol</a> == <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mempolicy\">mempolicy</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#mode\">mode</a> == <a class=\"id\" href=\"#MPOL_INTERLEAVE\">MPOL_INTERLEAVE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#policy\">policy</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#il_next\">il_next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#policy\">policy</a> = <a class=\"id\" href=\"#pol\">pol</a> == &amp;<a class=\"id\" href=\"#default_policy\">default_policy</a> ? <a class=\"id\" href=\"#MPOL_DEFAULT\">MPOL_DEFAULT</a> :", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#mode\">mode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Internal mempolicy flags must be masked off before exposing</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the policy to userspace.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#policy\">policy</a> |= (<a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MPOL_MODE_FLAGS\">MPOL_MODE_FLAGS</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nmask\">nmask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mpol_store_user_nodemask\">mpol_store_user_nodemask</a>(<a class=\"id\" href=\"#pol\">pol</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#nmask\">nmask</a> = <a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#w\">w</a>.<a class=\"id\" href=\"#user_nodemask\">user_nodemask</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_lock\">task_lock</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_policy_nodemask\">get_policy_nodemask</a>(<a class=\"id\" href=\"#pol\">pol</a>, <a class=\"id\" href=\"#nmask\">nmask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_unlock\">task_unlock</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mpol_cond_put\">mpol_cond_put</a>(<a class=\"id\" href=\"#pol\">pol</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
];
xr_frag_insert('l/03/306f2df64601659bdd6c831688b571c3db919a.xr', __xr_tmp);
