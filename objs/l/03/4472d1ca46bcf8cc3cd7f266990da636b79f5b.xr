var __xr_tmp = [
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#LIST_HEAD_INIT\">LIST_HEAD_INIT</a>(<a class=\"id\" href=\"#name\">name</a>)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#list\">list</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Insert a new entry between two known consecutive entries.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is only for internal list manipulation where we know</span>", 
"<span class=\"comment\"> * the prev/next entries already!</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_LIST\">CONFIG_DEBUG_LIST</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__list_add\">__list_add</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#new\">new</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#prev\">prev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#next\">next</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#new\">new</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#new\">new</a>;", 
"}", 
"#else", 
"extern void <a class=\"id\" href=\"#__list_add\">__list_add</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#new\">new</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#prev\">prev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#next\">next</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * list_add - add a new entry</span>", 
"<span class=\"comment\"> * @new: new entry to be added</span>", 
"<span class=\"comment\"> * @head: list head to add it after</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Insert a new entry after the specified head.</span>", 
"<span class=\"comment\"> * This is good for implementing stacks.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#list_add\">list_add</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#new\">new</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__list_add\">__list_add</a>(<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#next\">next</a>);", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * list_add_tail - add a new entry</span>", 
"<span class=\"comment\"> * @new: new entry to be added</span>", 
"<span class=\"comment\"> * @head: list head to add it before</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Insert a new entry before the specified head.</span>", 
"<span class=\"comment\"> * This is useful for implementing queues.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#new\">new</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__list_add\">__list_add</a>(<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#head\">head</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Delete a list entry by making the prev/next entries</span>", 
"<span class=\"comment\"> * point to each other.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is only for internal list manipulation where we know</span>", 
"<span class=\"comment\"> * the prev/next entries already!</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__list_del\">__list_del</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> * <a class=\"id\" href=\"#prev\">prev</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> * <a class=\"id\" href=\"#next\">next</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * list_del - deletes entry from list.</span>", 
"<span class=\"comment\"> * @entry: the element to delete from the list.</span>", 
"<span class=\"comment\"> * Note: list_empty() on entry does not return true after this, the entry is</span>", 
"<span class=\"comment\"> * in an undefined state.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_LIST\">CONFIG_DEBUG_LIST</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#list_del\">list_del</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#entry\">entry</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__list_del\">__list_del</a>(<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#LIST_POISON1\">LIST_POISON1</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#LIST_POISON2\">LIST_POISON2</a>;", 
"}", 
"#else", 
"extern void <a class=\"id\" href=\"#list_del\">list_del</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#entry\">entry</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * list_replace - replace old entry by new one</span>", 
"<span class=\"comment\"> * @old : the element to be replaced</span>", 
"<span class=\"comment\"> * @new : the new element to insert</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If @old was empty, it will be overwritten.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#list_replace\">list_replace</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#old\">old</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#new\">new</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#new\">new</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#new\">new</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#list_replace_init\">list_replace_init</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#old\">old</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#new\">new</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_replace\">list_replace</a>(<a class=\"id\" href=\"#old\">old</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(<a class=\"id\" href=\"#old\">old</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * list_del_init - deletes entry from list and reinitialize it.</span>", 
"<span class=\"comment\"> * @entry: the element to delete from the list.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#list_del_init\">list_del_init</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#entry\">entry</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__list_del\">__list_del</a>(<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * list_move - delete from one list and add as another's head</span>", 
"<span class=\"comment\"> * @list: the entry to move</span>", 
"<span class=\"comment\"> * @head: the head that will precede our entry</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#list_move\">list_move</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__list_del\">__list_del</a>(<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(<a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#head\">head</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * list_move_tail - delete from one list and add as another's tail</span>", 
"<span class=\"comment\"> * @list: the entry to move</span>", 
"<span class=\"comment\"> * @head: the head that will follow our entry</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#list_move_tail\">list_move_tail</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__list_del\">__list_del</a>(<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(<a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#head\">head</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * list_is_last - tests whether @list is the last entry in list @head</span>", 
"<span class=\"comment\"> * @list: the entry to test</span>", 
"<span class=\"comment\"> * @head: the head of the list</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#list_is_last\">list_is_last</a>(const struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#next\">next</a> == <a class=\"id\" href=\"#head\">head</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * list_empty - tests whether a list is empty</span>", 
"<span class=\"comment\"> * @head: the list to test.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#list_empty\">list_empty</a>(const struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#next\">next</a> == <a class=\"id\" href=\"#head\">head</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * list_empty_careful - tests whether a list is empty and not being modified</span>", 
"<span class=\"comment\"> * @head: the list to test</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * tests whether a list is empty _and_ checks that no other CPU might be</span>", 
"<span class=\"comment\"> * in the process of modifying either member (next or prev)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE: using list_empty_careful() without synchronization</span>", 
"<span class=\"comment\"> * can only be safe if the only activity that can happen</span>", 
"<span class=\"comment\"> * to the list entry is list_del_init(). Eg. it cannot be used</span>", 
"<span class=\"comment\"> * if another CPU could re-list_add() it.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#list_empty_careful\">list_empty_careful</a>(const struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#next\">next</a> == <a class=\"id\" href=\"#head\">head</a>) && (<a class=\"id\" href=\"#next\">next</a> == <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#prev\">prev</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * list_rotate_left - rotate the list to the left</span>", 
"<span class=\"comment\"> * @head: the head of the list</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#list_rotate_left\">list_rotate_left</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#first\">first</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#head\">head</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move_tail\">list_move_tail</a>(<a class=\"id\" href=\"#first\">first</a>, <a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * list_is_singular - tests whether a list has just one entry.</span>", 
"<span class=\"comment\"> * @head: the list to test.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#list_is_singular\">list_is_singular</a>(const struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#head\">head</a>) && (<a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#next\">next</a> == <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#prev\">prev</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__list_cut_position\">__list_cut_position</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#entry\">entry</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#new_first\">new_first</a> = <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#new_first\">new_first</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_first\">new_first</a>-><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#head\">head</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * list_cut_position - cut a list into two</span>", 
"<span class=\"comment\"> * @list: a new list to add all removed entries</span>", 
"<span class=\"comment\"> * @head: a list with entries</span>", 
"<span class=\"comment\"> * @entry: an entry within head, could be the head itself</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and if so we won't cut the list</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This helper moves the initial part of @head, up to and</span>", 
"<span class=\"comment\"> * including @entry, from @head to @list. You should</span>", 
"<span class=\"comment\"> * pass on @entry an element you know is on @head. @list</span>", 
"<span class=\"comment\"> * should be an empty list or a list you do not care about</span>", 
"<span class=\"comment\"> * losing its data.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#list_cut_position\">list_cut_position</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#entry\">entry</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#head\">head</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list_is_singular\">list_is_singular</a>(<a class=\"id\" href=\"#head\">head</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#next\">next</a> != <a class=\"id\" href=\"#entry\">entry</a> && <a class=\"id\" href=\"#head\">head</a> != <a class=\"id\" href=\"#entry\">entry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#entry\">entry</a> == <a class=\"id\" href=\"#head\">head</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__list_cut_position\">__list_cut_position</a>(<a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#entry\">entry</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__list_splice\">__list_splice</a>(const struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#prev\">prev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#next\">next</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#last\">last</a> = <a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#prev\">prev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#first\">first</a>-><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#first\">first</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#last\">last</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#last\">last</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * list_splice - join two lists, this is designed for stacks</span>", 
"<span class=\"comment\"> * @list: the new list to add.</span>", 
"<span class=\"comment\"> * @head: the place to add it in the first list.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#list_splice\">list_splice</a>(const struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#list\">list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__list_splice\">__list_splice</a>(<a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#next\">next</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * list_splice_tail - join two lists, each list being a queue</span>", 
"<span class=\"comment\"> * @list: the new list to add.</span>", 
"<span class=\"comment\"> * @head: the place to add it in the first list.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#list_splice_tail\">list_splice_tail</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#list\">list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__list_splice\">__list_splice</a>(<a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#head\">head</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * list_splice_init - join two lists and reinitialise the emptied list.</span>", 
"<span class=\"comment\"> * @list: the new list to add.</span>", 
"<span class=\"comment\"> * @head: the place to add it in the first list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The list at @list is reinitialised</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#list_splice_init\">list_splice_init</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#list\">list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__list_splice\">__list_splice</a>(<a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * list_splice_tail_init - join two lists and reinitialise the emptied list</span>", 
"<span class=\"comment\"> * @list: the new list to add.</span>", 
"<span class=\"comment\"> * @head: the place to add it in the first list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Each of the lists is a queue.</span>", 
"<span class=\"comment\"> * The list at @list is reinitialised</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#list_splice_tail_init\">list_splice_tail_init</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#list\">list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__list_splice\">__list_splice</a>(<a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * list_entry - get the struct for this entry</span>", 
"<span class=\"comment\"> * @ptr:<span class=\"ts\"/>the &amp;struct list_head pointer.</span>", 
"<span class=\"comment\"> * @type:<span class=\"ts\"/>the type of the struct this is embedded in.</span>", 
"<span class=\"comment\"> * @member:<span class=\"ts\"/>the name of the list_struct within the struct.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#member\">member</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#member\">member</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * list_first_entry - get the first element from a list</span>", 
"<span class=\"comment\"> * @ptr:<span class=\"ts\"/>the list head to take the element from.</span>", 
"<span class=\"comment\"> * @type:<span class=\"ts\"/>the type of the struct this is embedded in.</span>", 
"<span class=\"comment\"> * @member:<span class=\"ts\"/>the name of the list_struct within the struct.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note, that list is expected to be not empty.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#member\">member</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_entry\">list_entry</a>((<a class=\"id\" href=\"#ptr\">ptr</a>)-><a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#member\">member</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * list_for_each<span class=\"ts\"/>-<span class=\"ts\"/>iterate over a list</span>", 
"<span class=\"comment\"> * @pos:<span class=\"ts\"/>the &amp;struct list_head to use as a loop cursor.</span>", 
"<span class=\"comment\"> * @head:<span class=\"ts\"/>the head for your list.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#list_for_each\">list_for_each</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#head\">head</a>) \\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pos\">pos</a> = (<a class=\"id\" href=\"#head\">head</a>)-><a class=\"id\" href=\"#next\">next</a>; <a class=\"id\" href=\"#prefetch\">prefetch</a>(<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#next\">next</a>), <a class=\"id\" href=\"#pos\">pos</a> != (<a class=\"id\" href=\"#head\">head</a>); \\", 
"        <span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#next\">next</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __list_for_each<span class=\"ts\"/>-<span class=\"ts\"/>iterate over a list</span>", 
"<span class=\"comment\"> * @pos:<span class=\"ts\"/>the &amp;struct list_head to use as a loop cursor.</span>", 
"<span class=\"comment\"> * @head:<span class=\"ts\"/>the head for your list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This variant differs from list_for_each() in that it's the</span>", 
"<span class=\"comment\"> * simplest possible list iteration code, no prefetching is done.</span>", 
"<span class=\"comment\"> * Use this for code that knows the list to be very short (empty</span>", 
"<span class=\"comment\"> * or 1 entry) most of the time.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__list_for_each\">__list_for_each</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#head\">head</a>) \\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pos\">pos</a> = (<a class=\"id\" href=\"#head\">head</a>)-><a class=\"id\" href=\"#next\">next</a>; <a class=\"id\" href=\"#pos\">pos</a> != (<a class=\"id\" href=\"#head\">head</a>); <a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#next\">next</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * list_for_each_prev<span class=\"ts\"/>-<span class=\"ts\"/>iterate over a list backwards</span>", 
"<span class=\"comment\"> * @pos:<span class=\"ts\"/>the &amp;struct list_head to use as a loop cursor.</span>", 
"<span class=\"comment\"> * @head:<span class=\"ts\"/>the head for your list.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#list_for_each_prev\">list_for_each_prev</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#head\">head</a>) \\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pos\">pos</a> = (<a class=\"id\" href=\"#head\">head</a>)-><a class=\"id\" href=\"#prev\">prev</a>; <a class=\"id\" href=\"#prefetch\">prefetch</a>(<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#prev\">prev</a>), <a class=\"id\" href=\"#pos\">pos</a> != (<a class=\"id\" href=\"#head\">head</a>); \\", 
"        <span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#prev\">prev</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * list_for_each_safe - iterate over a list safe against removal of list entry</span>", 
"<span class=\"comment\"> * @pos:<span class=\"ts\"/>the &amp;struct list_head to use as a loop cursor.</span>", 
"<span class=\"comment\"> * @n:<span class=\"ts\"/><span class=\"ts\"/>another &amp;struct list_head to use as temporary storage</span>", 
"<span class=\"comment\"> * @head:<span class=\"ts\"/>the head for your list.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#list_for_each_safe\">list_for_each_safe</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#head\">head</a>) \\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pos\">pos</a> = (<a class=\"id\" href=\"#head\">head</a>)-><a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#next\">next</a>; <a class=\"id\" href=\"#pos\">pos</a> != (<a class=\"id\" href=\"#head\">head</a>); \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#next\">next</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * list_for_each_prev_safe - iterate over a list backwards safe against removal of list entry</span>", 
"<span class=\"comment\"> * @pos:<span class=\"ts\"/>the &amp;struct list_head to use as a loop cursor.</span>", 
"<span class=\"comment\"> * @n:<span class=\"ts\"/><span class=\"ts\"/>another &amp;struct list_head to use as temporary storage</span>", 
"<span class=\"comment\"> * @head:<span class=\"ts\"/>the head for your list.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#list_for_each_prev_safe\">list_for_each_prev_safe</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#head\">head</a>) \\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pos\">pos</a> = (<a class=\"id\" href=\"#head\">head</a>)-><a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#prev\">prev</a>; \\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#prefetch\">prefetch</a>(<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#prev\">prev</a>), <a class=\"id\" href=\"#pos\">pos</a> != (<a class=\"id\" href=\"#head\">head</a>); \\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#prev\">prev</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * list_for_each_entry<span class=\"ts\"/>-<span class=\"ts\"/>iterate over list of given type</span>", 
"<span class=\"comment\"> * @pos:<span class=\"ts\"/>the type * to use as a loop cursor.</span>", 
"<span class=\"comment\"> * @head:<span class=\"ts\"/>the head for your list.</span>", 
"<span class=\"comment\"> * @member:<span class=\"ts\"/>the name of the list_struct within the struct.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#member\">member</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>((<a class=\"id\" href=\"#head\">head</a>)-><a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#typeof\">typeof</a>(*<a class=\"id\" href=\"#pos\">pos</a>), <a class=\"id\" href=\"#member\">member</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#prefetch\">prefetch</a>(<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#member\">member</a>.<a class=\"id\" href=\"#next\">next</a>), &amp;<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#member\">member</a> != (<a class=\"id\" href=\"#head\">head</a>); <span class=\"ts\"/>\\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#member\">member</a>.<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#typeof\">typeof</a>(*<a class=\"id\" href=\"#pos\">pos</a>), <a class=\"id\" href=\"#member\">member</a>))", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * list_for_each_entry_reverse - iterate backwards over list of given type.</span>", 
"<span class=\"comment\"> * @pos:<span class=\"ts\"/>the type * to use as a loop cursor.</span>", 
"<span class=\"comment\"> * @head:<span class=\"ts\"/>the head for your list.</span>", 
"<span class=\"comment\"> * @member:<span class=\"ts\"/>the name of the list_struct within the struct.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#list_for_each_entry_reverse\">list_for_each_entry_reverse</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#member\">member</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>((<a class=\"id\" href=\"#head\">head</a>)-><a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#typeof\">typeof</a>(*<a class=\"id\" href=\"#pos\">pos</a>), <a class=\"id\" href=\"#member\">member</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#prefetch\">prefetch</a>(<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#member\">member</a>.<a class=\"id\" href=\"#prev\">prev</a>), &amp;<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#member\">member</a> != (<a class=\"id\" href=\"#head\">head</a>); <span class=\"ts\"/>\\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#member\">member</a>.<a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#typeof\">typeof</a>(*<a class=\"id\" href=\"#pos\">pos</a>), <a class=\"id\" href=\"#member\">member</a>))", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * list_prepare_entry - prepare a pos entry for use in list_for_each_entry_continue()</span>", 
"<span class=\"comment\"> * @pos:<span class=\"ts\"/>the type * to use as a start point</span>", 
"<span class=\"comment\"> * @head:<span class=\"ts\"/>the head of the list</span>", 
"<span class=\"comment\"> * @member:<span class=\"ts\"/>the name of the list_struct within the struct.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Prepares a pos entry for use as a start point in list_for_each_entry_continue().</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#list_prepare_entry\">list_prepare_entry</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#member\">member</a>) \\", 
"<span class=\"ts\"/>((<a class=\"id\" href=\"#pos\">pos</a>) ? : <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#typeof\">typeof</a>(*<a class=\"id\" href=\"#pos\">pos</a>), <a class=\"id\" href=\"#member\">member</a>))", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * list_for_each_entry_continue - continue iteration over list of given type</span>", 
"<span class=\"comment\"> * @pos:<span class=\"ts\"/>the type * to use as a loop cursor.</span>", 
"<span class=\"comment\"> * @head:<span class=\"ts\"/>the head for your list.</span>", 
"<span class=\"comment\"> * @member:<span class=\"ts\"/>the name of the list_struct within the struct.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Continue to iterate over list of given type, continuing after</span>", 
"<span class=\"comment\"> * the current position.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#list_for_each_entry_continue\">list_for_each_entry_continue</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#member\">member</a>) <span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#member\">member</a>.<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#typeof\">typeof</a>(*<a class=\"id\" href=\"#pos\">pos</a>), <a class=\"id\" href=\"#member\">member</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#prefetch\">prefetch</a>(<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#member\">member</a>.<a class=\"id\" href=\"#next\">next</a>), &amp;<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#member\">member</a> != (<a class=\"id\" href=\"#head\">head</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#member\">member</a>.<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#typeof\">typeof</a>(*<a class=\"id\" href=\"#pos\">pos</a>), <a class=\"id\" href=\"#member\">member</a>))", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * list_for_each_entry_continue_reverse - iterate backwards from the given point</span>", 
"<span class=\"comment\"> * @pos:<span class=\"ts\"/>the type * to use as a loop cursor.</span>", 
"<span class=\"comment\"> * @head:<span class=\"ts\"/>the head for your list.</span>", 
"<span class=\"comment\"> * @member:<span class=\"ts\"/>the name of the list_struct within the struct.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Start to iterate over list of given type backwards, continuing after</span>", 
"<span class=\"comment\"> * the current position.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#list_for_each_entry_continue_reverse\">list_for_each_entry_continue_reverse</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#member\">member</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#member\">member</a>.<a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#typeof\">typeof</a>(*<a class=\"id\" href=\"#pos\">pos</a>), <a class=\"id\" href=\"#member\">member</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#prefetch\">prefetch</a>(<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#member\">member</a>.<a class=\"id\" href=\"#prev\">prev</a>), &amp;<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#member\">member</a> != (<a class=\"id\" href=\"#head\">head</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#member\">member</a>.<a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#typeof\">typeof</a>(*<a class=\"id\" href=\"#pos\">pos</a>), <a class=\"id\" href=\"#member\">member</a>))", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * list_for_each_entry_from - iterate over list of given type from the current point</span>", 
"<span class=\"comment\"> * @pos:<span class=\"ts\"/>the type * to use as a loop cursor.</span>", 
"<span class=\"comment\"> * @head:<span class=\"ts\"/>the head for your list.</span>", 
"<span class=\"comment\"> * @member:<span class=\"ts\"/>the name of the list_struct within the struct.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Iterate over list of given type, continuing from current position.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#list_for_each_entry_from\">list_for_each_entry_from</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#member\">member</a>) <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>for (; <a class=\"id\" href=\"#prefetch\">prefetch</a>(<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#member\">member</a>.<a class=\"id\" href=\"#next\">next</a>), &amp;<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#member\">member</a> != (<a class=\"id\" href=\"#head\">head</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#member\">member</a>.<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#typeof\">typeof</a>(*<a class=\"id\" href=\"#pos\">pos</a>), <a class=\"id\" href=\"#member\">member</a>))", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * list_for_each_entry_safe - iterate over list of given type safe against removal of list entry</span>", 
"<span class=\"comment\"> * @pos:<span class=\"ts\"/>the type * to use as a loop cursor.</span>", 
"<span class=\"comment\"> * @n:<span class=\"ts\"/><span class=\"ts\"/>another type * to use as temporary storage</span>", 
"<span class=\"comment\"> * @head:<span class=\"ts\"/>the head for your list.</span>", 
"<span class=\"comment\"> * @member:<span class=\"ts\"/>the name of the list_struct within the struct.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#member\">member</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>((<a class=\"id\" href=\"#head\">head</a>)-><a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#typeof\">typeof</a>(*<a class=\"id\" href=\"#pos\">pos</a>), <a class=\"id\" href=\"#member\">member</a>),<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#member\">member</a>.<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#typeof\">typeof</a>(*<a class=\"id\" href=\"#pos\">pos</a>), <a class=\"id\" href=\"#member\">member</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>     &amp;<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#member\">member</a> != (<a class=\"id\" href=\"#head\">head</a>); <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#member\">member</a>.<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#typeof\">typeof</a>(*<a class=\"id\" href=\"#n\">n</a>), <a class=\"id\" href=\"#member\">member</a>))", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * list_for_each_entry_safe_continue - continue list iteration safe against removal</span>", 
"<span class=\"comment\"> * @pos:<span class=\"ts\"/>the type * to use as a loop cursor.</span>", 
"<span class=\"comment\"> * @n:<span class=\"ts\"/><span class=\"ts\"/>another type * to use as temporary storage</span>", 
"<span class=\"comment\"> * @head:<span class=\"ts\"/>the head for your list.</span>", 
"<span class=\"comment\"> * @member:<span class=\"ts\"/>the name of the list_struct within the struct.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Iterate over list of given type, continuing after current point,</span>", 
"<span class=\"comment\"> * safe against removal of list entry.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#list_for_each_entry_safe_continue\">list_for_each_entry_safe_continue</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#member\">member</a>) <span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#member\">member</a>.<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#typeof\">typeof</a>(*<a class=\"id\" href=\"#pos\">pos</a>), <a class=\"id\" href=\"#member\">member</a>), <span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#member\">member</a>.<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#typeof\">typeof</a>(*<a class=\"id\" href=\"#pos\">pos</a>), <a class=\"id\" href=\"#member\">member</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>     &amp;<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#member\">member</a> != (<a class=\"id\" href=\"#head\">head</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#member\">member</a>.<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#typeof\">typeof</a>(*<a class=\"id\" href=\"#n\">n</a>), <a class=\"id\" href=\"#member\">member</a>))", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * list_for_each_entry_safe_from - iterate over list from current point safe against removal</span>", 
"<span class=\"comment\"> * @pos:<span class=\"ts\"/>the type * to use as a loop cursor.</span>", 
"<span class=\"comment\"> * @n:<span class=\"ts\"/><span class=\"ts\"/>another type * to use as temporary storage</span>", 
"<span class=\"comment\"> * @head:<span class=\"ts\"/>the head for your list.</span>", 
"<span class=\"comment\"> * @member:<span class=\"ts\"/>the name of the list_struct within the struct.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Iterate over list of given type from current point, safe against</span>", 
"<span class=\"comment\"> * removal of list entry.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#list_for_each_entry_safe_from\">list_for_each_entry_safe_from</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#member\">member</a>) <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#member\">member</a>.<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#typeof\">typeof</a>(*<a class=\"id\" href=\"#pos\">pos</a>), <a class=\"id\" href=\"#member\">member</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>     &amp;<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#member\">member</a> != (<a class=\"id\" href=\"#head\">head</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#member\">member</a>.<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#typeof\">typeof</a>(*<a class=\"id\" href=\"#n\">n</a>), <a class=\"id\" href=\"#member\">member</a>))", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * list_for_each_entry_safe_reverse - iterate backwards over list safe against removal</span>", 
"<span class=\"comment\"> * @pos:<span class=\"ts\"/>the type * to use as a loop cursor.</span>", 
"<span class=\"comment\"> * @n:<span class=\"ts\"/><span class=\"ts\"/>another type * to use as temporary storage</span>", 
"<span class=\"comment\"> * @head:<span class=\"ts\"/>the head for your list.</span>", 
"<span class=\"comment\"> * @member:<span class=\"ts\"/>the name of the list_struct within the struct.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Iterate backwards over list of given type, safe against removal</span>", 
"<span class=\"comment\"> * of list entry.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#list_for_each_entry_safe_reverse\">list_for_each_entry_safe_reverse</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#member\">member</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>((<a class=\"id\" href=\"#head\">head</a>)-><a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#typeof\">typeof</a>(*<a class=\"id\" href=\"#pos\">pos</a>), <a class=\"id\" href=\"#member\">member</a>),<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#member\">member</a>.<a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#typeof\">typeof</a>(*<a class=\"id\" href=\"#pos\">pos</a>), <a class=\"id\" href=\"#member\">member</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>     &amp;<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#member\">member</a> != (<a class=\"id\" href=\"#head\">head</a>); <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#member\">member</a>.<a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#typeof\">typeof</a>(*<a class=\"id\" href=\"#n\">n</a>), <a class=\"id\" href=\"#member\">member</a>))", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * list_safe_reset_next - reset a stale list_for_each_entry_safe loop</span>", 
"<span class=\"comment\"> * @pos:<span class=\"ts\"/>the loop cursor used in the list_for_each_entry_safe loop</span>", 
"<span class=\"comment\"> * @n:<span class=\"ts\"/><span class=\"ts\"/>temporary storage used in list_for_each_entry_safe</span>", 
"<span class=\"comment\"> * @member:<span class=\"ts\"/>the name of the list_struct within the struct.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * list_safe_reset_next is not safe to use in general if the list may be</span>", 
"<span class=\"comment\"> * modified concurrently (eg. the lock is dropped in the loop body). An</span>", 
"<span class=\"comment\"> * exception to this is if the cursor element (pos) is pinned in the list,</span>", 
"<span class=\"comment\"> * and list_safe_reset_next is called after re-taking the lock and before</span>", 
"<span class=\"comment\"> * completing the current iteration of the loop body.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#list_safe_reset_next\">list_safe_reset_next</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#member\">member</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#member\">member</a>.<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#typeof\">typeof</a>(*<a class=\"id\" href=\"#pos\">pos</a>), <a class=\"id\" href=\"#member\">member</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Double linked lists with a single pointer list head.</span>", 
"<span class=\"comment\"> * Mostly useful for hash tables where the two pointer list head is</span>", 
"<span class=\"comment\"> * too wasteful.</span>", 
"<span class=\"comment\"> * You lose the ability to access the tail in O(1).</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HLIST_HEAD_INIT\">HLIST_HEAD_INIT</a> { .<a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#NULL\">NULL</a> }", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HLIST_HEAD\">HLIST_HEAD</a>(<a class=\"id\" href=\"#name\">name</a>) struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> <a class=\"id\" href=\"#name\">name</a> = {  .<a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#NULL\">NULL</a> }", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INIT_HLIST_HEAD\">INIT_HLIST_HEAD</a>(<a class=\"id\" href=\"#ptr\">ptr</a>) ((<a class=\"id\" href=\"#ptr\">ptr</a>)-><a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#INIT_HLIST_NODE\">INIT_HLIST_NODE</a>(struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#h\">h</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#pprev\">pprev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#hlist_unhashed\">hlist_unhashed</a>(const struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#h\">h</a>)", 
"{", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#pprev\">pprev</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#hlist_empty\">hlist_empty</a>(const struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#h\">h</a>)", 
"{", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#first\">first</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__hlist_del\">__hlist_del</a>(struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> **<a class=\"id\" href=\"#pprev\">pprev</a> = <a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#pprev\">pprev</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#pprev\">pprev</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#pprev\">pprev</a> = <a class=\"id\" href=\"#pprev\">pprev</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#hlist_del\">hlist_del</a>(struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__hlist_del\">__hlist_del</a>(<a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#LIST_POISON1\">LIST_POISON1</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#pprev\">pprev</a> = <a class=\"id\" href=\"#LIST_POISON2\">LIST_POISON2</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#hlist_del_init\">hlist_del_init</a>(struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#hlist_unhashed\">hlist_unhashed</a>(<a class=\"id\" href=\"#n\">n</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__hlist_del\">__hlist_del</a>(<a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_HLIST_NODE\">INIT_HLIST_NODE</a>(<a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#hlist_add_head\">hlist_add_head</a>(struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#n\">n</a>, struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#h\">h</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#first\">first</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#first\">first</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#first\">first</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first\">first</a>-><a class=\"id\" href=\"#pprev\">pprev</a> = &amp;<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#pprev\">pprev</a> = &amp;<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#first\">first</a>;", 
"}", 
"", 
"<span class=\"comment\">/* next must be != NULL */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#hlist_add_before\">hlist_add_before</a>(struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#n\">n</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#next\">next</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#pprev\">pprev</a> = <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#pprev\">pprev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#pprev\">pprev</a> = &amp;<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>*(<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#pprev\">pprev</a>) = <a class=\"id\" href=\"#n\">n</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#hlist_add_after\">hlist_add_after</a>(struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#n\">n</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#next\">next</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#pprev\">pprev</a> = &amp;<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/>if(<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#pprev\">pprev</a>  = &amp;<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Move a list from one list head to another. Fixup the pprev</span>", 
"<span class=\"comment\"> * reference of the first entry if it exists.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#hlist_move_list\">hlist_move_list</a>(struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#old\">old</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#new\">new</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#first\">first</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#first\">first</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#first\">first</a>-><a class=\"id\" href=\"#pprev\">pprev</a> = &amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#first\">first</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#hlist_entry\">hlist_entry</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#member\">member</a>) <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#ptr\">ptr</a>,<a class=\"id\" href=\"#type\">type</a>,<a class=\"id\" href=\"#member\">member</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#hlist_for_each\">hlist_for_each</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#head\">head</a>) \\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pos\">pos</a> = (<a class=\"id\" href=\"#head\">head</a>)-><a class=\"id\" href=\"#first\">first</a>; <a class=\"id\" href=\"#pos\">pos</a> && ({ <a class=\"id\" href=\"#prefetch\">prefetch</a>(<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#next\">next</a>); 1; }); \\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#next\">next</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#hlist_for_each_safe\">hlist_for_each_safe</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#head\">head</a>) \\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pos\">pos</a> = (<a class=\"id\" href=\"#head\">head</a>)-><a class=\"id\" href=\"#first\">first</a>; <a class=\"id\" href=\"#pos\">pos</a> && ({ <a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#next\">next</a>; 1; }); \\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#n\">n</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * hlist_for_each_entry<span class=\"ts\"/>- iterate over list of given type</span>", 
"<span class=\"comment\"> * @tpos:<span class=\"ts\"/>the type * to use as a loop cursor.</span>", 
"<span class=\"comment\"> * @pos:<span class=\"ts\"/>the &amp;struct hlist_node to use as a loop cursor.</span>", 
"<span class=\"comment\"> * @head:<span class=\"ts\"/>the head for your list.</span>", 
"<span class=\"comment\"> * @member:<span class=\"ts\"/>the name of the hlist_node within the struct.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#hlist_for_each_entry\">hlist_for_each_entry</a>(<a class=\"id\" href=\"#tpos\">tpos</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#member\">member</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pos\">pos</a> = (<a class=\"id\" href=\"#head\">head</a>)-><a class=\"id\" href=\"#first\">first</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#pos\">pos</a> && ({ <a class=\"id\" href=\"#prefetch\">prefetch</a>(<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#next\">next</a>); 1;}) &&<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \\", 
"<span class=\"ts\"/><span class=\"ts\"/>({ <a class=\"id\" href=\"#tpos\">tpos</a> = <a class=\"id\" href=\"#hlist_entry\">hlist_entry</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#typeof\">typeof</a>(*<a class=\"id\" href=\"#tpos\">tpos</a>), <a class=\"id\" href=\"#member\">member</a>); 1;}); \\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#next\">next</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * hlist_for_each_entry_continue - iterate over a hlist continuing after current point</span>", 
"<span class=\"comment\"> * @tpos:<span class=\"ts\"/>the type * to use as a loop cursor.</span>", 
"<span class=\"comment\"> * @pos:<span class=\"ts\"/>the &amp;struct hlist_node to use as a loop cursor.</span>", 
"<span class=\"comment\"> * @member:<span class=\"ts\"/>the name of the hlist_node within the struct.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#hlist_for_each_entry_continue\">hlist_for_each_entry_continue</a>(<a class=\"id\" href=\"#tpos\">tpos</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#member\">member</a>)<span class=\"ts\"/><span class=\"ts\"/> \\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pos\">pos</a> = (<a class=\"id\" href=\"#pos\">pos</a>)-><a class=\"id\" href=\"#next\">next</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#pos\">pos</a> && ({ <a class=\"id\" href=\"#prefetch\">prefetch</a>(<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#next\">next</a>); 1;}) &&<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \\", 
"<span class=\"ts\"/><span class=\"ts\"/>({ <a class=\"id\" href=\"#tpos\">tpos</a> = <a class=\"id\" href=\"#hlist_entry\">hlist_entry</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#typeof\">typeof</a>(*<a class=\"id\" href=\"#tpos\">tpos</a>), <a class=\"id\" href=\"#member\">member</a>); 1;}); \\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#next\">next</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * hlist_for_each_entry_from - iterate over a hlist continuing from current point</span>", 
"<span class=\"comment\"> * @tpos:<span class=\"ts\"/>the type * to use as a loop cursor.</span>", 
"<span class=\"comment\"> * @pos:<span class=\"ts\"/>the &amp;struct hlist_node to use as a loop cursor.</span>", 
"<span class=\"comment\"> * @member:<span class=\"ts\"/>the name of the hlist_node within the struct.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#hlist_for_each_entry_from\">hlist_for_each_entry_from</a>(<a class=\"id\" href=\"#tpos\">tpos</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#member\">member</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \\", 
"<span class=\"ts\"/>for (; <a class=\"id\" href=\"#pos\">pos</a> && ({ <a class=\"id\" href=\"#prefetch\">prefetch</a>(<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#next\">next</a>); 1;}) &&<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \\", 
"<span class=\"ts\"/><span class=\"ts\"/>({ <a class=\"id\" href=\"#tpos\">tpos</a> = <a class=\"id\" href=\"#hlist_entry\">hlist_entry</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#typeof\">typeof</a>(*<a class=\"id\" href=\"#tpos\">tpos</a>), <a class=\"id\" href=\"#member\">member</a>); 1;}); \\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#next\">next</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * hlist_for_each_entry_safe - iterate over list of given type safe against removal of list entry</span>", 
"<span class=\"comment\"> * @tpos:<span class=\"ts\"/>the type * to use as a loop cursor.</span>", 
"<span class=\"comment\"> * @pos:<span class=\"ts\"/>the &amp;struct hlist_node to use as a loop cursor.</span>", 
"<span class=\"comment\"> * @n:<span class=\"ts\"/><span class=\"ts\"/>another &amp;struct hlist_node to use as temporary storage</span>", 
"<span class=\"comment\"> * @head:<span class=\"ts\"/>the head for your list.</span>", 
"<span class=\"comment\"> * @member:<span class=\"ts\"/>the name of the hlist_node within the struct.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#hlist_for_each_entry_safe\">hlist_for_each_entry_safe</a>(<a class=\"id\" href=\"#tpos\">tpos</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#member\">member</a>) <span class=\"ts\"/><span class=\"ts\"/> \\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pos\">pos</a> = (<a class=\"id\" href=\"#head\">head</a>)-><a class=\"id\" href=\"#first\">first</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#pos\">pos</a> && ({ <a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#next\">next</a>; 1; }) && <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \\", 
"<span class=\"ts\"/><span class=\"ts\"/>({ <a class=\"id\" href=\"#tpos\">tpos</a> = <a class=\"id\" href=\"#hlist_entry\">hlist_entry</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#typeof\">typeof</a>(*<a class=\"id\" href=\"#tpos\">tpos</a>), <a class=\"id\" href=\"#member\">member</a>); 1;}); \\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#n\">n</a>)", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/03/4472d1ca46bcf8cc3cd7f266990da636b79f5b.xr', __xr_tmp);
