var __xr_tmp = [
"<span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> |= <a class=\"id\" href=\"#APIC_SPIV_APIC_ENABLED\">APIC_SPIV_APIC_ENABLED</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Some unknown Intel IO/APIC (or APIC) errata is biting us with</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * certain networking cards. If high frequency interrupts are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * happening on a particular IOAPIC pin, plus the IOAPIC routing</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * entry is masked/unmasked at a high rate as well then sooner or</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * later IOAPIC line gets 'stuck', no more interrupts are received</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * from the device. If focus CPU is disabled then the hang goes</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * away, oh well :-(</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * [ This bug can be reproduced easily with a level-triggered</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   PCI Ne2000 networking cards and PII/PIII processors, dual</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   BX chipset. ]</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Actually disabling the focus CPU check just makes the hang less</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * frequent as it makes the interrupt distributon model be more</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * like LRU than MRU (the short-term load is more even across CPUs).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * See also the comment in end_level_ioapic_irq().  --macro</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - enable focus processor (bit==0)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - 64bit mode always use processor focus</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   so no need to set it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> &= ~<a class=\"id\" href=\"#APIC_SPIV_FOCUS_DISABLED\">APIC_SPIV_FOCUS_DISABLED</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Set spurious IRQ vector</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> |= <a class=\"id\" href=\"#SPURIOUS_APIC_VECTOR\">SPURIOUS_APIC_VECTOR</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_SPIV\">APIC_SPIV</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Set up LVT0, LVT1:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * set up through-local-APIC on the BP's LINT0. This is not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * strictly necessary in pure symmetric-IO mode, but sometimes</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we delegate interrupts to the 8259A.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * TODO: set up through-local-APIC from through-I/O-APIC? --macro</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_LVT0\">APIC_LVT0</a>) &amp; <a class=\"id\" href=\"#APIC_LVT_MASKED\">APIC_LVT_MASKED</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>() && (<a class=\"id\" href=\"#pic_mode\">pic_mode</a> || !<a class=\"id\" href=\"#value\">value</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#APIC_DM_EXTINT\">APIC_DM_EXTINT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_printk\">apic_printk</a>(<a class=\"id\" href=\"#APIC_VERBOSE\">APIC_VERBOSE</a>, \"enabled ExtINT on CPU#%d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#APIC_DM_EXTINT\">APIC_DM_EXTINT</a> | <a class=\"id\" href=\"#APIC_LVT_MASKED\">APIC_LVT_MASKED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_printk\">apic_printk</a>(<a class=\"id\" href=\"#APIC_VERBOSE\">APIC_VERBOSE</a>, \"masked ExtINT on CPU#%d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_LVT0\">APIC_LVT0</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * only the BP should see the LINT1 NMI signal, obviously.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#APIC_DM_NMI\">APIC_DM_NMI</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#APIC_DM_NMI\">APIC_DM_NMI</a> | <a class=\"id\" href=\"#APIC_LVT_MASKED\">APIC_LVT_MASKED</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#lapic_is_integrated\">lapic_is_integrated</a>())<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 82489DX */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> |= <a class=\"id\" href=\"#APIC_LVT_LEVEL_TRIGGER\">APIC_LVT_LEVEL_TRIGGER</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_LVT1\">APIC_LVT1</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_MCE_INTEL\">CONFIG_X86_MCE_INTEL</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* Recheck CMCI information after local APIC is up on CPU #0 */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>() == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmci_recheck\">cmci_recheck</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#end_local_APIC_setup\">end_local_APIC_setup</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lapic_setup_esr\">lapic_setup_esr</a>();", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Disable the local apic timer */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_LVTT\">APIC_LVTT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> |= (<a class=\"id\" href=\"#APIC_LVT_MASKED\">APIC_LVT_MASKED</a> | <a class=\"id\" href=\"#LOCAL_TIMER_VECTOR\">LOCAL_TIMER_VECTOR</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_LVTT\">APIC_LVTT</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_apic_nmi_watchdog\">setup_apic_nmi_watchdog</a>(<a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_pm_activate\">apic_pm_activate</a>();", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_X2APIC\">CONFIG_X86_X2APIC</a>", 
"void <a class=\"id\" href=\"#check_x2apic\">check_x2apic</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#x2apic_enabled\">x2apic_enabled</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"x2apic enabled by BIOS, switching to x2apic ops\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#x2apic_preenabled\">x2apic_preenabled</a> = <a class=\"id\" href=\"#x2apic_mode\">x2apic_mode</a> = 1;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#enable_x2apic\">enable_x2apic</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#msr\">msr</a>, <a class=\"id\" href=\"#msr2\">msr2</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#x2apic_mode\">x2apic_mode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdmsr\">rdmsr</a>(<a class=\"id\" href=\"#MSR_IA32_APICBASE\">MSR_IA32_APICBASE</a>, <a class=\"id\" href=\"#msr\">msr</a>, <a class=\"id\" href=\"#msr2\">msr2</a>);", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#msr\">msr</a> &amp; <a class=\"id\" href=\"#X2APIC_ENABLE\">X2APIC_ENABLE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk_once\">printk_once</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Enabling x2apic\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wrmsr\">wrmsr</a>(<a class=\"id\" href=\"#MSR_IA32_APICBASE\">MSR_IA32_APICBASE</a>, <a class=\"id\" href=\"#msr\">msr</a> | <a class=\"id\" href=\"#X2APIC_ENABLE\">X2APIC_ENABLE</a>, 0);", 
"<span class=\"ts\"/>}", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_X86_X2APIC */</span>", 
"", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#enable_IR\">enable_IR</a>(void)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_INTR_REMAP\">CONFIG_INTR_REMAP</a>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#intr_remapping_supported\">intr_remapping_supported</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"intr-remapping not supported\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#x2apic_preenabled\">x2apic_preenabled</a> && <a class=\"id\" href=\"#skip_ioapic_setup\">skip_ioapic_setup</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Skipped enabling intr-remap because of skipping \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"io-apic setup\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#enable_intr_remapping\">enable_intr_remapping</a>(<a class=\"id\" href=\"#x2apic_supported\">x2apic_supported</a>()))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Enabled Interrupt-remapping\\n\");", 
"", 
"<span class=\"ts\"/>return 1;", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#enable_IR_x2apic\">enable_IR_x2apic</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#IO_APIC_route_entry\">IO_APIC_route_entry</a> **<a class=\"id\" href=\"#ioapic_entries\">ioapic_entries</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#x2apic_enabled\">x2apic_enabled</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#dmar_table_init_ret\">dmar_table_init_ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dmar_table_init_ret\">dmar_table_init_ret</a> = <a class=\"id\" href=\"#dmar_table_init\">dmar_table_init</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dmar_table_init_ret\">dmar_table_init_ret</a> && !<a class=\"id\" href=\"#x2apic_supported\">x2apic_supported</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ioapic_entries\">ioapic_entries</a> = <a class=\"id\" href=\"#alloc_ioapic_entries\">alloc_ioapic_entries</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ioapic_entries\">ioapic_entries</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_err\">pr_err</a>(\"Allocate ioapic_entries failed\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#save_IO_APIC_setup\">save_IO_APIC_setup</a>(<a class=\"id\" href=\"#ioapic_entries\">ioapic_entries</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Saving IO-APIC state failed: %d\\n\", <a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#legacy_pic\">legacy_pic</a>-><a class=\"id\" href=\"#mask_all\">mask_all</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mask_IO_APIC_setup\">mask_IO_APIC_setup</a>(<a class=\"id\" href=\"#ioapic_entries\">ioapic_entries</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dmar_table_init_ret\">dmar_table_init_ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#enable_IR\">enable_IR</a>();", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* IR is required if there is APIC ID &gt; 255 even when running</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * under KVM</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#max_physical_apicid\">max_physical_apicid</a> &gt; 255 || !<a class=\"id\" href=\"#kvm_para_available\">kvm_para_available</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#nox2apic\">nox2apic</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * without IR all CPUs can be addressed by IOAPIC/MSI</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * only in physical mode</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#x2apic_force_phys\">x2apic_force_phys</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x2apic_enabled\">x2apic_enabled</a> = 1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#x2apic_supported\">x2apic_supported</a>() && !<a class=\"id\" href=\"#x2apic_mode\">x2apic_mode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#x2apic_mode\">x2apic_mode</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enable_x2apic\">enable_x2apic</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Enabled x2apic\\n\");", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#nox2apic\">nox2apic</a>:", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>) <span class=\"comment\">/* IR enabling failed */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#restore_IO_APIC_setup\">restore_IO_APIC_setup</a>(<a class=\"id\" href=\"#ioapic_entries\">ioapic_entries</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#legacy_pic\">legacy_pic</a>-><a class=\"id\" href=\"#restore_mask\">restore_mask</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ioapic_entries\">ioapic_entries</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_ioapic_entries\">free_ioapic_entries</a>(<a class=\"id\" href=\"#ioapic_entries\">ioapic_entries</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#x2apic_enabled\">x2apic_enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#x2apic_preenabled\">x2apic_preenabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"x2apic: enabled by BIOS but kernel init failed.\");", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#cpu_has_x2apic\">cpu_has_x2apic</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Not enabling x2apic, Intr-remapping init failed.\\n\");", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Detect and enable local APICs on non-SMP boards.</span>", 
"<span class=\"comment\"> * Original code written by Keir Fraser.</span>", 
"<span class=\"comment\"> * On AMD64 we trust the BIOS - if it says no APIC it is likely</span>", 
"<span class=\"comment\"> * not correctly set up (usually the APIC timer won't work etc.)</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#detect_init_APIC\">detect_init_APIC</a>(void)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpu_has_apic\">cpu_has_apic</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"No local APIC present\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mp_lapic_addr\">mp_lapic_addr</a> = <a class=\"id\" href=\"#APIC_DEFAULT_PHYS_BASE\">APIC_DEFAULT_PHYS_BASE</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#else", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Detect and initialize APIC</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#detect_init_APIC\">detect_init_APIC</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#features\">features</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Disabled by kernel option? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#disable_apic\">disable_apic</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86_vendor\">x86_vendor</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#X86_VENDOR_AMD\">X86_VENDOR_AMD</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86\">x86</a> == 6 && <a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86_model\">x86_model</a> &gt; 1) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86\">x86</a> >= 15))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_apic\">no_apic</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#X86_VENDOR_INTEL\">X86_VENDOR_INTEL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86\">x86</a> == 6 || <a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86\">x86</a> == 15 ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86\">x86</a> == 5 && <a class=\"id\" href=\"#cpu_has_apic\">cpu_has_apic</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_apic\">no_apic</a>;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_apic\">no_apic</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpu_has_apic\">cpu_has_apic</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Over-ride BIOS and try to enable the local APIC only if</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * \"lapic\" specified.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#force_enable_local_apic\">force_enable_local_apic</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Local APIC disabled by BIOS -- \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"you can enable it with \\\"lapic\\\"\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Some BIOSes disable the local APIC in the APIC_BASE</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * MSR. This can only be done in software for Intel P6 or later</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and AMD K7 (Model &gt; 1) or later.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdmsr\">rdmsr</a>(<a class=\"id\" href=\"#MSR_IA32_APICBASE\">MSR_IA32_APICBASE</a>, <a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#h\">h</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#l\">l</a> &amp; <a class=\"id\" href=\"#MSR_IA32_APICBASE_ENABLE\">MSR_IA32_APICBASE_ENABLE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Local APIC disabled by BIOS -- reenabling.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a> &= ~<a class=\"id\" href=\"#MSR_IA32_APICBASE_BASE\">MSR_IA32_APICBASE_BASE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a> |= <a class=\"id\" href=\"#MSR_IA32_APICBASE_ENABLE\">MSR_IA32_APICBASE_ENABLE</a> | <a class=\"id\" href=\"#APIC_DEFAULT_PHYS_BASE\">APIC_DEFAULT_PHYS_BASE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wrmsr\">wrmsr</a>(<a class=\"id\" href=\"#MSR_IA32_APICBASE\">MSR_IA32_APICBASE</a>, <a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#h\">h</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enabled_via_apicbase\">enabled_via_apicbase</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The APIC feature bit should now be enabled</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in `cpuid'</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#features\">features</a> = <a class=\"id\" href=\"#cpuid_edx\">cpuid_edx</a>(1);", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#features\">features</a> &amp; (1 << <a class=\"id\" href=\"#X86_FEATURE_APIC\">X86_FEATURE_APIC</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"Could not enable APIC!\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_cap\">set_cpu_cap</a>(&amp;<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>, <a class=\"id\" href=\"#X86_FEATURE_APIC\">X86_FEATURE_APIC</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mp_lapic_addr\">mp_lapic_addr</a> = <a class=\"id\" href=\"#APIC_DEFAULT_PHYS_BASE\">APIC_DEFAULT_PHYS_BASE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The BIOS may have set up the APIC at some other address */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdmsr\">rdmsr</a>(<a class=\"id\" href=\"#MSR_IA32_APICBASE\">MSR_IA32_APICBASE</a>, <a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#h\">h</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#l\">l</a> &amp; <a class=\"id\" href=\"#MSR_IA32_APICBASE_ENABLE\">MSR_IA32_APICBASE_ENABLE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mp_lapic_addr\">mp_lapic_addr</a> = <a class=\"id\" href=\"#l\">l</a> &amp; <a class=\"id\" href=\"#MSR_IA32_APICBASE_BASE\">MSR_IA32_APICBASE_BASE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Found and enabled local APIC!\\n\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_pm_activate\">apic_pm_activate</a>();", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#no_apic\">no_apic</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"No local APIC present or hardware disabled\\n\");", 
"<span class=\"ts\"/>return -1;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#early_init_lapic_mapping\">early_init_lapic_mapping</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If no local APIC can be found then go out</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * : it means there is no mpatable and MADT</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#smp_found_config\">smp_found_config</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_fixmap_nocache\">set_fixmap_nocache</a>(<a class=\"id\" href=\"#FIX_APIC_BASE\">FIX_APIC_BASE</a>, <a class=\"id\" href=\"#mp_lapic_addr\">mp_lapic_addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_printk\">apic_printk</a>(<a class=\"id\" href=\"#APIC_VERBOSE\">APIC_VERBOSE</a>, \"mapped APIC to %16lx (%16lx)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#APIC_BASE\">APIC_BASE</a>, <a class=\"id\" href=\"#mp_lapic_addr\">mp_lapic_addr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Fetch the APIC ID of the BSP in case we have a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * default configuration (or the MP table is broken).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#boot_cpu_physical_apicid\">boot_cpu_physical_apicid</a> = <a class=\"id\" href=\"#read_apic_id\">read_apic_id</a>();", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * init_apic_mappings - initialize APIC mappings</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#init_apic_mappings\">init_apic_mappings</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#new_apicid\">new_apicid</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#x2apic_mode\">x2apic_mode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#boot_cpu_physical_apicid\">boot_cpu_physical_apicid</a> = <a class=\"id\" href=\"#read_apic_id\">read_apic_id</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If no local APIC can be found return early */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#smp_found_config\">smp_found_config</a> && <a class=\"id\" href=\"#detect_init_APIC\">detect_init_APIC</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* lets NOP'ify apic operations */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"APIC: disable apic facility\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_disable\">apic_disable</a>();", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_phys\">apic_phys</a> = <a class=\"id\" href=\"#mp_lapic_addr\">mp_lapic_addr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * acpi lapic path already maps that address in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * acpi_register_lapic_address()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#acpi_lapic\">acpi_lapic</a> && !<a class=\"id\" href=\"#smp_found_config\">smp_found_config</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_fixmap_nocache\">set_fixmap_nocache</a>(<a class=\"id\" href=\"#FIX_APIC_BASE\">FIX_APIC_BASE</a>, <a class=\"id\" href=\"#apic_phys\">apic_phys</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_printk\">apic_printk</a>(<a class=\"id\" href=\"#APIC_VERBOSE\">APIC_VERBOSE</a>, \"mapped APIC to %08lx (%08lx)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#APIC_BASE\">APIC_BASE</a>, <a class=\"id\" href=\"#apic_phys\">apic_phys</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Fetch the APIC ID of the BSP in case we have a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * default configuration (or the MP table is broken).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_apicid\">new_apicid</a> = <a class=\"id\" href=\"#read_apic_id\">read_apic_id</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#boot_cpu_physical_apicid\">boot_cpu_physical_apicid</a> != <a class=\"id\" href=\"#new_apicid\">new_apicid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#boot_cpu_physical_apicid\">boot_cpu_physical_apicid</a> = <a class=\"id\" href=\"#new_apicid\">new_apicid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * yeah -- we lie about apic_version</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * in case if apic was disabled via boot option</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * but it's not a problem for SMP compiled kernel</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * since smp_sanity_check is prepared for such a case</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and disable smp mode</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_version\">apic_version</a>[<a class=\"id\" href=\"#new_apicid\">new_apicid</a>] =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#GET_APIC_VERSION\">GET_APIC_VERSION</a>(<a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_LVR\">APIC_LVR</a>));", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This initializes the IO-APIC and APIC hardware if this is</span>", 
"<span class=\"comment\"> * a UP kernel.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#apic_version\">apic_version</a>[<a class=\"id\" href=\"#MAX_APICS\">MAX_APICS</a>];", 
"", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#APIC_init_uniprocessor\">APIC_init_uniprocessor</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#disable_apic\">disable_apic</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Apic disabled\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpu_has_apic\">cpu_has_apic</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disable_apic\">disable_apic</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Apic disabled by BIOS\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"#else", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#smp_found_config\">smp_found_config</a> && !<a class=\"id\" href=\"#cpu_has_apic\">cpu_has_apic</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Complain if the BIOS pretends there is one.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpu_has_apic\">cpu_has_apic</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#APIC_INTEGRATED\">APIC_INTEGRATED</a>(<a class=\"id\" href=\"#apic_version\">apic_version</a>[<a class=\"id\" href=\"#boot_cpu_physical_apicid\">boot_cpu_physical_apicid</a>])) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_err\">pr_err</a>(\"BIOS bug, local APIC 0x%x not detected!...\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#boot_cpu_physical_apicid\">boot_cpu_physical_apicid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#enable_IR_x2apic\">enable_IR_x2apic</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#default_setup_apic_routing\">default_setup_apic_routing</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#verify_local_APIC\">verify_local_APIC</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#connect_bsp_APIC\">connect_bsp_APIC</a>();", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_ID\">APIC_ID</a>, <a class=\"id\" href=\"#SET_APIC_ID\">SET_APIC_ID</a>(<a class=\"id\" href=\"#boot_cpu_physical_apicid\">boot_cpu_physical_apicid</a>));", 
"#else", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Hack: In case of kdump, after a crash, kernel might be booting</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * on a cpu with non-zero lapic id. But boot_cpu_physical_apicid</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * might be zero if read from MP tables. Get it from LAPIC.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"# <a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CRASH_DUMP\">CONFIG_CRASH_DUMP</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#boot_cpu_physical_apicid\">boot_cpu_physical_apicid</a> = <a class=\"id\" href=\"#read_apic_id\">read_apic_id</a>();", 
"# <a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#physid_set_mask_of_physid\">physid_set_mask_of_physid</a>(<a class=\"id\" href=\"#boot_cpu_physical_apicid\">boot_cpu_physical_apicid</a>, &amp;<a class=\"id\" href=\"#phys_cpu_present_map\">phys_cpu_present_map</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_local_APIC\">setup_local_APIC</a>();", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_IO_APIC\">CONFIG_X86_IO_APIC</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now enable IO-APICs, actually call clear_IO_APIC</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We need clear_IO_APIC before enabling error vector</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#skip_ioapic_setup\">skip_ioapic_setup</a> && <a class=\"id\" href=\"#nr_ioapics\">nr_ioapics</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enable_IO_APIC\">enable_IO_APIC</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end_local_APIC_setup\">end_local_APIC_setup</a>();", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_IO_APIC\">CONFIG_X86_IO_APIC</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#smp_found_config\">smp_found_config</a> && !<a class=\"id\" href=\"#skip_ioapic_setup\">skip_ioapic_setup</a> && <a class=\"id\" href=\"#nr_ioapics\">nr_ioapics</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#setup_IO_APIC\">setup_IO_APIC</a>();", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_ioapics\">nr_ioapics</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#localise_nmi_watchdog\">localise_nmi_watchdog</a>();", 
"<span class=\"ts\"/>}", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#localise_nmi_watchdog\">localise_nmi_watchdog</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x86_init\">x86_init</a>.<a class=\"id\" href=\"#timers\">timers</a>.<a class=\"id\" href=\"#setup_percpu_clockev\">setup_percpu_clockev</a>();", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_nmi_watchdog\">check_nmi_watchdog</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Local APIC interrupts</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This interrupt should _never_ happen with our APIC/SMP architecture</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#smp_spurious_interrupt\">smp_spurious_interrupt</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#v\">v</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#exit_idle\">exit_idle</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#irq_enter\">irq_enter</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check if this really is a spurious interrupt and ACK it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if it is a vectored one.  Just in case...</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Spurious interrupts should not be ACKed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_ISR\">APIC_ISR</a> + ((<a class=\"id\" href=\"#SPURIOUS_APIC_VECTOR\">SPURIOUS_APIC_VECTOR</a> &amp; ~0x1f) >> 1));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#v\">v</a> &amp; (1 << (<a class=\"id\" href=\"#SPURIOUS_APIC_VECTOR\">SPURIOUS_APIC_VECTOR</a> &amp; 0x1f)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ack_APIC_irq\">ack_APIC_irq</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inc_irq_stat\">inc_irq_stat</a>(<a class=\"id\" href=\"#irq_spurious_count\">irq_spurious_count</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* see sw-dev-man vol 3, chapter 7.4.13.5 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"spurious APIC interrupt on CPU#%d, \"", 
"<span class=\"ts\"/><span class=\"ts\"/>\"should never happen.\\n\", <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"<span class=\"ts\"/><a class=\"id\" href=\"#irq_exit\">irq_exit</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This interrupt should never happen with our APIC/SMP architecture</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#smp_error_interrupt\">smp_error_interrupt</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#v\">v</a>, <a class=\"id\" href=\"#v1\">v1</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#exit_idle\">exit_idle</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#irq_enter\">irq_enter</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/* First tickle the hardware, only then report what went on. -- REW */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_ESR\">APIC_ESR</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_ESR\">APIC_ESR</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#v1\">v1</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_ESR\">APIC_ESR</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ack_APIC_irq\">ack_APIC_irq</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#irq_err_count\">irq_err_count</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Here is what the APIC error bits mean:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 0: Send CS error</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 1: Receive CS error</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 2: Send accept error</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 3: Receive accept error</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 4: Reserved</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 5: Send illegal vector</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 6: Received illegal vector</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 7: Illegal register address</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"APIC error on CPU%d: %02x(%02x)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>(), <a class=\"id\" href=\"#v\">v</a> , <a class=\"id\" href=\"#v1\">v1</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#irq_exit\">irq_exit</a>();", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * connect_bsp_APIC - attach the APIC to the interrupt system</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#connect_bsp_APIC\">connect_bsp_APIC</a>(void)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pic_mode\">pic_mode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Do not trust the local APIC being empty at bootup.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_local_APIC\">clear_local_APIC</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * PIC mode, enable APIC mode in the IMCR, i.e.  connect BSP's</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * local APIC to INT and NMI lines.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_printk\">apic_printk</a>(<a class=\"id\" href=\"#APIC_VERBOSE\">APIC_VERBOSE</a>, \"leaving PIC mode, \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"enabling APIC mode.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#imcr_pic_to_apic\">imcr_pic_to_apic</a>();", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#enable_apic_mode\">enable_apic_mode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#enable_apic_mode\">enable_apic_mode</a>();", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * disconnect_bsp_APIC - detach the APIC from the interrupt system</span>", 
"<span class=\"comment\"> * @virt_wire_setup:<span class=\"ts\"/>indicates, whether virtual wire mode is selected</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Virtual wire mode is necessary to deliver legacy interrupts even when the</span>", 
"<span class=\"comment\"> * APIC is disabled.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#disconnect_bsp_APIC\">disconnect_bsp_APIC</a>(int <a class=\"id\" href=\"#virt_wire_setup\">virt_wire_setup</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#value\">value</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pic_mode\">pic_mode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Put the board back into PIC mode (has an effect only on</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * certain older boards).  Note that APIC interrupts, including</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * IPIs, won't work beyond this point!  The only exception are</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * INIT IPIs.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_printk\">apic_printk</a>(<a class=\"id\" href=\"#APIC_VERBOSE\">APIC_VERBOSE</a>, \"disabling APIC mode, \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"entering PIC mode.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#imcr_apic_to_pic\">imcr_apic_to_pic</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Go back to Virtual Wire compatibility mode */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* For the spurious interrupt use vector F, and enable it */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_SPIV\">APIC_SPIV</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> &= ~<a class=\"id\" href=\"#APIC_VECTOR_MASK\">APIC_VECTOR_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> |= <a class=\"id\" href=\"#APIC_SPIV_APIC_ENABLED\">APIC_SPIV_APIC_ENABLED</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> |= 0xf;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_SPIV\">APIC_SPIV</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#virt_wire_setup\">virt_wire_setup</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * For LVT0 make it edge triggered, active high,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * external and enabled</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_LVT0\">APIC_LVT0</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> &= ~(<a class=\"id\" href=\"#APIC_MODE_MASK\">APIC_MODE_MASK</a> | <a class=\"id\" href=\"#APIC_SEND_PENDING\">APIC_SEND_PENDING</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#APIC_INPUT_POLARITY\">APIC_INPUT_POLARITY</a> | <a class=\"id\" href=\"#APIC_LVT_REMOTE_IRR\">APIC_LVT_REMOTE_IRR</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#APIC_LVT_LEVEL_TRIGGER\">APIC_LVT_LEVEL_TRIGGER</a> | <a class=\"id\" href=\"#APIC_LVT_MASKED\">APIC_LVT_MASKED</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> |= <a class=\"id\" href=\"#APIC_LVT_REMOTE_IRR\">APIC_LVT_REMOTE_IRR</a> | <a class=\"id\" href=\"#APIC_SEND_PENDING\">APIC_SEND_PENDING</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#SET_APIC_DELIVERY_MODE\">SET_APIC_DELIVERY_MODE</a>(<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#APIC_MODE_EXTINT\">APIC_MODE_EXTINT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_LVT0\">APIC_LVT0</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Disable LVT0 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_LVT0\">APIC_LVT0</a>, <a class=\"id\" href=\"#APIC_LVT_MASKED\">APIC_LVT_MASKED</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For LVT1 make it edge triggered, active high,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * nmi and enabled</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_LVT1\">APIC_LVT1</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> &= ~(<a class=\"id\" href=\"#APIC_MODE_MASK\">APIC_MODE_MASK</a> | <a class=\"id\" href=\"#APIC_SEND_PENDING\">APIC_SEND_PENDING</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#APIC_INPUT_POLARITY\">APIC_INPUT_POLARITY</a> | <a class=\"id\" href=\"#APIC_LVT_REMOTE_IRR\">APIC_LVT_REMOTE_IRR</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#APIC_LVT_LEVEL_TRIGGER\">APIC_LVT_LEVEL_TRIGGER</a> | <a class=\"id\" href=\"#APIC_LVT_MASKED\">APIC_LVT_MASKED</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> |= <a class=\"id\" href=\"#APIC_LVT_REMOTE_IRR\">APIC_LVT_REMOTE_IRR</a> | <a class=\"id\" href=\"#APIC_SEND_PENDING\">APIC_SEND_PENDING</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#SET_APIC_DELIVERY_MODE\">SET_APIC_DELIVERY_MODE</a>(<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#APIC_MODE_NMI\">APIC_MODE_NMI</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_LVT1\">APIC_LVT1</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#generic_processor_info\">generic_processor_info</a>(int <a class=\"id\" href=\"#apicid\">apicid</a>, int <a class=\"id\" href=\"#version\">version</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Validate version</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#version\">version</a> == 0x0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"BIOS bug, APIC version is 0 for CPU#%d! \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"fixing up to 0x10. (tell your hw vendor)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#version\">version</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#version\">version</a> = 0x10;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_version\">apic_version</a>[<a class=\"id\" href=\"#apicid\">apicid</a>] = <a class=\"id\" href=\"#version\">version</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#num_processors\">num_processors</a> >= <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#max\">max</a> = <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#thiscpu\">thiscpu</a> = <a class=\"id\" href=\"#max\">max</a> + <a class=\"id\" href=\"#disabled_cpus\">disabled_cpus</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"ACPI: NR_CPUS/possible_cpus limit of %i reached.\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"  Processor %d/0x%x ignored.\\n\", <a class=\"id\" href=\"#max\">max</a>, <a class=\"id\" href=\"#thiscpu\">thiscpu</a>, <a class=\"id\" href=\"#apicid\">apicid</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disabled_cpus\">disabled_cpus</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#num_processors\">num_processors</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#cpumask_next_zero\">cpumask_next_zero</a>(-1, <a class=\"id\" href=\"#cpu_present_mask\">cpu_present_mask</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#version\">version</a> != <a class=\"id\" href=\"#apic_version\">apic_version</a>[<a class=\"id\" href=\"#boot_cpu_physical_apicid\">boot_cpu_physical_apicid</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ONCE\">WARN_ONCE</a>(1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"ACPI: apic version mismatch, bootcpu: %x cpu %d: %x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_version\">apic_version</a>[<a class=\"id\" href=\"#boot_cpu_physical_apicid\">boot_cpu_physical_apicid</a>], <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#version\">version</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#physid_set\">physid_set</a>(<a class=\"id\" href=\"#apicid\">apicid</a>, <a class=\"id\" href=\"#phys_cpu_present_map\">phys_cpu_present_map</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#apicid\">apicid</a> == <a class=\"id\" href=\"#boot_cpu_physical_apicid\">boot_cpu_physical_apicid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * x86_bios_cpu_apicid is required to have processors listed</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * in same order as logical cpu numbers. Hence the first</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * entry is BSP, and so on.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#apicid\">apicid</a> &gt; <a class=\"id\" href=\"#max_physical_apicid\">max_physical_apicid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_physical_apicid\">max_physical_apicid</a> = <a class=\"id\" href=\"#apicid\">apicid</a>;", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#early_per_cpu\">early_per_cpu</a>(<a class=\"id\" href=\"#x86_cpu_to_apicid\">x86_cpu_to_apicid</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) = <a class=\"id\" href=\"#apicid\">apicid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#early_per_cpu\">early_per_cpu</a>(<a class=\"id\" href=\"#x86_bios_cpu_apicid\">x86_bios_cpu_apicid</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) = <a class=\"id\" href=\"#apicid\">apicid</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_possible\">set_cpu_possible</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_present\">set_cpu_present</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#hard_smp_processor_id\">hard_smp_processor_id</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#read_apic_id\">read_apic_id</a>();", 
"}", 
"", 
"void <a class=\"id\" href=\"#default_init_apic_ldr\">default_init_apic_ldr</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#val\">val</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_DFR\">APIC_DFR</a>, <a class=\"id\" href=\"#APIC_DFR_VALUE\">APIC_DFR_VALUE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_LDR\">APIC_LDR</a>) &amp; ~<a class=\"id\" href=\"#APIC_LDR_MASK\">APIC_LDR_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> |= <a class=\"id\" href=\"#SET_APIC_LOGICAL_ID\">SET_APIC_LOGICAL_ID</a>(1UL << <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_LDR\">APIC_LDR</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"int <a class=\"id\" href=\"#default_apicid_to_node\">default_apicid_to_node</a>(int <a class=\"id\" href=\"#logical_apicid\">logical_apicid</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#apicid_2_node\">apicid_2_node</a>[<a class=\"id\" href=\"#hard_smp_processor_id\">hard_smp_processor_id</a>()];", 
"#else", 
"<span class=\"ts\"/>return 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Power management</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PM\">CONFIG_PM</a>", 
"", 
"static struct {", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 'active' is true if the local APIC was enabled by us and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not the BIOS; this signifies that we are also responsible</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for disabling it before entering apm/acpi suspend</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#active\">active</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* r/w apic fields */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#apic_id\">apic_id</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#apic_taskpri\">apic_taskpri</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#apic_ldr\">apic_ldr</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#apic_dfr\">apic_dfr</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#apic_spiv\">apic_spiv</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#apic_lvtt\">apic_lvtt</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#apic_lvtpc\">apic_lvtpc</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#apic_lvt0\">apic_lvt0</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#apic_lvt1\">apic_lvt1</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#apic_lvterr\">apic_lvterr</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#apic_tmict\">apic_tmict</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#apic_tdcr\">apic_tdcr</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#apic_thmr\">apic_thmr</a>;", 
"} <a class=\"id\" href=\"#apic_pm_state\">apic_pm_state</a>;", 
"", 
"static int <a class=\"id\" href=\"#lapic_suspend\">lapic_suspend</a>(struct <a class=\"id\" href=\"#sys_device\">sys_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pm_message_t\">pm_message_t</a> <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#maxlvt\">maxlvt</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#apic_pm_state\">apic_pm_state</a>.<a class=\"id\" href=\"#active\">active</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#maxlvt\">maxlvt</a> = <a class=\"id\" href=\"#lapic_get_maxlvt\">lapic_get_maxlvt</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_pm_state\">apic_pm_state</a>.<a class=\"id\" href=\"#apic_id\">apic_id</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_ID\">APIC_ID</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_pm_state\">apic_pm_state</a>.<a class=\"id\" href=\"#apic_taskpri\">apic_taskpri</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_TASKPRI\">APIC_TASKPRI</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_pm_state\">apic_pm_state</a>.<a class=\"id\" href=\"#apic_ldr\">apic_ldr</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_LDR\">APIC_LDR</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_pm_state\">apic_pm_state</a>.<a class=\"id\" href=\"#apic_dfr\">apic_dfr</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_DFR\">APIC_DFR</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_pm_state\">apic_pm_state</a>.<a class=\"id\" href=\"#apic_spiv\">apic_spiv</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_SPIV\">APIC_SPIV</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_pm_state\">apic_pm_state</a>.<a class=\"id\" href=\"#apic_lvtt\">apic_lvtt</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_LVTT\">APIC_LVTT</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#maxlvt\">maxlvt</a> >= 4)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_pm_state\">apic_pm_state</a>.<a class=\"id\" href=\"#apic_lvtpc\">apic_lvtpc</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_LVTPC\">APIC_LVTPC</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_pm_state\">apic_pm_state</a>.<a class=\"id\" href=\"#apic_lvt0\">apic_lvt0</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_LVT0\">APIC_LVT0</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_pm_state\">apic_pm_state</a>.<a class=\"id\" href=\"#apic_lvt1\">apic_lvt1</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_LVT1\">APIC_LVT1</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_pm_state\">apic_pm_state</a>.<a class=\"id\" href=\"#apic_lvterr\">apic_lvterr</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_LVTERR\">APIC_LVTERR</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_pm_state\">apic_pm_state</a>.<a class=\"id\" href=\"#apic_tmict\">apic_tmict</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_TMICT\">APIC_TMICT</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_pm_state\">apic_pm_state</a>.<a class=\"id\" href=\"#apic_tdcr\">apic_tdcr</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_TDCR\">APIC_TDCR</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_THERMAL_VECTOR\">CONFIG_X86_THERMAL_VECTOR</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#maxlvt\">maxlvt</a> >= 5)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_pm_state\">apic_pm_state</a>.<a class=\"id\" href=\"#apic_thmr\">apic_thmr</a> = <a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_LVTTHMR\">APIC_LVTTHMR</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disable_local_APIC\">disable_local_APIC</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#intr_remapping_enabled\">intr_remapping_enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disable_intr_remapping\">disable_intr_remapping</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#lapic_resume\">lapic_resume</a>(struct <a class=\"id\" href=\"#sys_device\">sys_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#h\">h</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#maxlvt\">maxlvt</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#IO_APIC_route_entry\">IO_APIC_route_entry</a> **<a class=\"id\" href=\"#ioapic_entries\">ioapic_entries</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#apic_pm_state\">apic_pm_state</a>.<a class=\"id\" href=\"#active\">active</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#intr_remapping_enabled\">intr_remapping_enabled</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ioapic_entries\">ioapic_entries</a> = <a class=\"id\" href=\"#alloc_ioapic_entries\">alloc_ioapic_entries</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ioapic_entries\">ioapic_entries</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN\">WARN</a>(1, \"Alloc ioapic_entries in lapic resume failed.\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#restore\">restore</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#save_IO_APIC_setup\">save_IO_APIC_setup</a>(<a class=\"id\" href=\"#ioapic_entries\">ioapic_entries</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN\">WARN</a>(1, \"Saving IO-APIC state failed: %d\\n\", <a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_ioapic_entries\">free_ioapic_entries</a>(<a class=\"id\" href=\"#ioapic_entries\">ioapic_entries</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#restore\">restore</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask_IO_APIC_setup\">mask_IO_APIC_setup</a>(<a class=\"id\" href=\"#ioapic_entries\">ioapic_entries</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#legacy_pic\">legacy_pic</a>-><a class=\"id\" href=\"#mask_all\">mask_all</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#x2apic_mode\">x2apic_mode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enable_x2apic\">enable_x2apic</a>();", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Make sure the APICBASE points to the right address</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * FIXME! This will be wrong if we ever support suspend on</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * SMP! We'll need to do this as part of the CPU restore!</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdmsr\">rdmsr</a>(<a class=\"id\" href=\"#MSR_IA32_APICBASE\">MSR_IA32_APICBASE</a>, <a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#h\">h</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a> &= ~<a class=\"id\" href=\"#MSR_IA32_APICBASE_BASE\">MSR_IA32_APICBASE_BASE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a> |= <a class=\"id\" href=\"#MSR_IA32_APICBASE_ENABLE\">MSR_IA32_APICBASE_ENABLE</a> | <a class=\"id\" href=\"#mp_lapic_addr\">mp_lapic_addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wrmsr\">wrmsr</a>(<a class=\"id\" href=\"#MSR_IA32_APICBASE\">MSR_IA32_APICBASE</a>, <a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#h\">h</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#maxlvt\">maxlvt</a> = <a class=\"id\" href=\"#lapic_get_maxlvt\">lapic_get_maxlvt</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_LVTERR\">APIC_LVTERR</a>, <a class=\"id\" href=\"#ERROR_APIC_VECTOR\">ERROR_APIC_VECTOR</a> | <a class=\"id\" href=\"#APIC_LVT_MASKED\">APIC_LVT_MASKED</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_ID\">APIC_ID</a>, <a class=\"id\" href=\"#apic_pm_state\">apic_pm_state</a>.<a class=\"id\" href=\"#apic_id\">apic_id</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_DFR\">APIC_DFR</a>, <a class=\"id\" href=\"#apic_pm_state\">apic_pm_state</a>.<a class=\"id\" href=\"#apic_dfr\">apic_dfr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_LDR\">APIC_LDR</a>, <a class=\"id\" href=\"#apic_pm_state\">apic_pm_state</a>.<a class=\"id\" href=\"#apic_ldr\">apic_ldr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_TASKPRI\">APIC_TASKPRI</a>, <a class=\"id\" href=\"#apic_pm_state\">apic_pm_state</a>.<a class=\"id\" href=\"#apic_taskpri\">apic_taskpri</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_SPIV\">APIC_SPIV</a>, <a class=\"id\" href=\"#apic_pm_state\">apic_pm_state</a>.<a class=\"id\" href=\"#apic_spiv\">apic_spiv</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_LVT0\">APIC_LVT0</a>, <a class=\"id\" href=\"#apic_pm_state\">apic_pm_state</a>.<a class=\"id\" href=\"#apic_lvt0\">apic_lvt0</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_LVT1\">APIC_LVT1</a>, <a class=\"id\" href=\"#apic_pm_state\">apic_pm_state</a>.<a class=\"id\" href=\"#apic_lvt1\">apic_lvt1</a>);", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_X86_MCE_P4THERMAL\">CONFIG_X86_MCE_P4THERMAL</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_X86_MCE_INTEL\">CONFIG_X86_MCE_INTEL</a>)", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#maxlvt\">maxlvt</a> >= 5)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_LVTTHMR\">APIC_LVTTHMR</a>, <a class=\"id\" href=\"#apic_pm_state\">apic_pm_state</a>.<a class=\"id\" href=\"#apic_thmr\">apic_thmr</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#maxlvt\">maxlvt</a> >= 4)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_LVTPC\">APIC_LVTPC</a>, <a class=\"id\" href=\"#apic_pm_state\">apic_pm_state</a>.<a class=\"id\" href=\"#apic_lvtpc\">apic_lvtpc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_LVTT\">APIC_LVTT</a>, <a class=\"id\" href=\"#apic_pm_state\">apic_pm_state</a>.<a class=\"id\" href=\"#apic_lvtt\">apic_lvtt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_TDCR\">APIC_TDCR</a>, <a class=\"id\" href=\"#apic_pm_state\">apic_pm_state</a>.<a class=\"id\" href=\"#apic_tdcr\">apic_tdcr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_TMICT\">APIC_TMICT</a>, <a class=\"id\" href=\"#apic_pm_state\">apic_pm_state</a>.<a class=\"id\" href=\"#apic_tmict\">apic_tmict</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_ESR\">APIC_ESR</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_ESR\">APIC_ESR</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_LVTERR\">APIC_LVTERR</a>, <a class=\"id\" href=\"#apic_pm_state\">apic_pm_state</a>.<a class=\"id\" href=\"#apic_lvterr\">apic_lvterr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_write\">apic_write</a>(<a class=\"id\" href=\"#APIC_ESR\">APIC_ESR</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_read\">apic_read</a>(<a class=\"id\" href=\"#APIC_ESR\">APIC_ESR</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#intr_remapping_enabled\">intr_remapping_enabled</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reenable_intr_remapping\">reenable_intr_remapping</a>(<a class=\"id\" href=\"#x2apic_mode\">x2apic_mode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#legacy_pic\">legacy_pic</a>-><a class=\"id\" href=\"#restore_mask\">restore_mask</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#restore_IO_APIC_setup\">restore_IO_APIC_setup</a>(<a class=\"id\" href=\"#ioapic_entries\">ioapic_entries</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_ioapic_entries\">free_ioapic_entries</a>(<a class=\"id\" href=\"#ioapic_entries\">ioapic_entries</a>);", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#restore\">restore</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This device has no shutdown method - fully functioning local APICs</span>", 
"<span class=\"comment\"> * are needed on every CPU up until machine_halt/restart/poweroff.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static struct <a class=\"id\" href=\"#sysdev_class\">sysdev_class</a> <a class=\"id\" href=\"#lapic_sysclass\">lapic_sysclass</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>= \"lapic\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#resume\">resume</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#lapic_resume\">lapic_resume</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#suspend\">suspend</a><span class=\"ts\"/>= <a class=\"id\" href=\"#lapic_suspend\">lapic_suspend</a>,", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#sys_device\">sys_device</a> <a class=\"id\" href=\"#device_lapic\">device_lapic</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#id\">id</a><span class=\"ts\"/>= 0,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#cls\">cls</a><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#lapic_sysclass\">lapic_sysclass</a>,", 
"};", 
"", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#apic_pm_activate\">apic_pm_activate</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic_pm_state\">apic_pm_state</a>.<a class=\"id\" href=\"#active\">active</a> = 1;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#init_lapic_sysfs\">init_lapic_sysfs</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpu_has_apic\">cpu_has_apic</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"comment\">/* XXX: remove suspend/resume procs if !apic_pm_state.active? */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#sysdev_class_register\">sysdev_class_register</a>(&amp;<a class=\"id\" href=\"#lapic_sysclass\">lapic_sysclass</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#sysdev_register\">sysdev_register</a>(&amp;<a class=\"id\" href=\"#device_lapic\">device_lapic</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/* local apic needs to resume before other devices access its registers. */</span>", 
"<a class=\"id\" href=\"#core_initcall\">core_initcall</a>(<a class=\"id\" href=\"#init_lapic_sysfs\">init_lapic_sysfs</a>);", 
"", 
"#else<span class=\"ts\"/><span class=\"comment\">/* CONFIG_PM */</span>", 
"", 
"static void <a class=\"id\" href=\"#apic_pm_activate\">apic_pm_activate</a>(void) { }", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* CONFIG_PM */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"", 
"static int <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#apic_cluster_num\">apic_cluster_num</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#clusters\">clusters</a>, <a class=\"id\" href=\"#zeros\">zeros</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#bios_cpu_apicid\">bios_cpu_apicid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DECLARE_BITMAP\">DECLARE_BITMAP</a>(<a class=\"id\" href=\"#clustermap\">clustermap</a>, <a class=\"id\" href=\"#NUM_APIC_CLUSTERS\">NUM_APIC_CLUSTERS</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bios_cpu_apicid\">bios_cpu_apicid</a> = <a class=\"id\" href=\"#early_per_cpu_ptr\">early_per_cpu_ptr</a>(<a class=\"id\" href=\"#x86_bios_cpu_apicid\">x86_bios_cpu_apicid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_zero\">bitmap_zero</a>(<a class=\"id\" href=\"#clustermap\">clustermap</a>, <a class=\"id\" href=\"#NUM_APIC_CLUSTERS\">NUM_APIC_CLUSTERS</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* are we being called early in kernel startup? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bios_cpu_apicid\">bios_cpu_apicid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#bios_cpu_apicid\">bios_cpu_apicid</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_present\">cpu_present</a>(<a class=\"id\" href=\"#i\">i</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#x86_bios_cpu_apicid\">x86_bios_cpu_apicid</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#id\">id</a> != <a class=\"id\" href=\"#BAD_APICID\">BAD_APICID</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_bit\">__set_bit</a>(<a class=\"id\" href=\"#APIC_CLUSTERID\">APIC_CLUSTERID</a>(<a class=\"id\" href=\"#id\">id</a>), <a class=\"id\" href=\"#clustermap\">clustermap</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Problem:  Partially populated chassis may not have CPUs in some of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the APIC clusters they have been allocated.  Only present CPUs have</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * x86_bios_cpu_apicid entries, thus causing zeroes in the bitmap.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Since clusters are allocated sequentially, count zeros only if</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * they are bounded by ones.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clusters\">clusters</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zeros\">zeros</a> = 0;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#NUM_APIC_CLUSTERS\">NUM_APIC_CLUSTERS</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#clustermap\">clustermap</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clusters\">clusters</a> += 1 + <a class=\"id\" href=\"#zeros\">zeros</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zeros\">zeros</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#zeros\">zeros</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#clusters\">clusters</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__cpuinitdata\">__cpuinitdata</a> <a class=\"id\" href=\"#multi_checked\">multi_checked</a>;", 
"static int <a class=\"id\" href=\"#__cpuinitdata\">__cpuinitdata</a> <a class=\"id\" href=\"#multi\">multi</a>;", 
"", 
"static int <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#set_multi\">set_multi</a>(const struct <a class=\"id\" href=\"#dmi_system_id\">dmi_system_id</a> *<a class=\"id\" href=\"#d\">d</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#multi\">multi</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"APIC: %s detected, Multi Chassis\\n\", <a class=\"id\" href=\"#d\">d</a>-><a class=\"id\" href=\"#ident\">ident</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#multi\">multi</a> = 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static const <a class=\"id\" href=\"#__cpuinitconst\">__cpuinitconst</a> struct <a class=\"id\" href=\"#dmi_system_id\">dmi_system_id</a> <a class=\"id\" href=\"#multi_dmi_table\">multi_dmi_table</a>[] = {", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#callback\">callback</a> = <a class=\"id\" href=\"#set_multi\">set_multi</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#ident\">ident</a> = \"IBM System Summit2\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#matches\">matches</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMI_MATCH\">DMI_MATCH</a>(<a class=\"id\" href=\"#DMI_SYS_VENDOR\">DMI_SYS_VENDOR</a>, \"IBM\"),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMI_MATCH\">DMI_MATCH</a>(<a class=\"id\" href=\"#DMI_PRODUCT_NAME\">DMI_PRODUCT_NAME</a>, \"Summit2\"),", 
"<span class=\"ts\"/><span class=\"ts\"/>},", 
"<span class=\"ts\"/>},", 
"<span class=\"ts\"/>{}", 
"};", 
"", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#dmi_check_multi\">dmi_check_multi</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#multi_checked\">multi_checked</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dmi_check_system\">dmi_check_system</a>(<a class=\"id\" href=\"#multi_dmi_table\">multi_dmi_table</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#multi_checked\">multi_checked</a> = 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * apic_is_clustered_box() -- Check if we can expect good TSC</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Thus far, the major user of this is IBM's Summit2 series:</span>", 
"<span class=\"comment\"> * Clustered boxes may have unsynced TSC problems if they are</span>", 
"<span class=\"comment\"> * multi-chassis.</span>", 
"<span class=\"comment\"> * Use DMI to check them</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> int <a class=\"id\" href=\"#apic_is_clustered_box\">apic_is_clustered_box</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dmi_check_multi\">dmi_check_multi</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#multi\">multi</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_vsmp_box\">is_vsmp_box</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ScaleMP vSMPowered boxes have one cluster per board and TSCs are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not guaranteed to be synced between boards</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#apic_cluster_num\">apic_cluster_num</a>() &gt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * APIC command line parameters</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#setup_disableapic\">setup_disableapic</a>(char *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disable_apic\">disable_apic</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_clear_cpu_cap\">setup_clear_cpu_cap</a>(<a class=\"id\" href=\"#X86_FEATURE_APIC\">X86_FEATURE_APIC</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#early_param\">early_param</a>(\"disableapic\", <a class=\"id\" href=\"#setup_disableapic\">setup_disableapic</a>);", 
"", 
"<span class=\"comment\">/* same as disableapic, for compatibility */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#setup_nolapic\">setup_nolapic</a>(char *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#setup_disableapic\">setup_disableapic</a>(<a class=\"id\" href=\"#arg\">arg</a>);", 
"}", 
"<a class=\"id\" href=\"#early_param\">early_param</a>(\"nolapic\", <a class=\"id\" href=\"#setup_nolapic\">setup_nolapic</a>);", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#parse_lapic_timer_c2_ok\">parse_lapic_timer_c2_ok</a>(char *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_apic_timer_c2_ok\">local_apic_timer_c2_ok</a> = 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#early_param\">early_param</a>(\"lapic_timer_c2_ok\", <a class=\"id\" href=\"#parse_lapic_timer_c2_ok\">parse_lapic_timer_c2_ok</a>);", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#parse_disable_apic_timer\">parse_disable_apic_timer</a>(char *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disable_apic_timer\">disable_apic_timer</a> = 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#early_param\">early_param</a>(\"noapictimer\", <a class=\"id\" href=\"#parse_disable_apic_timer\">parse_disable_apic_timer</a>);", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#parse_nolapic_timer\">parse_nolapic_timer</a>(char *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disable_apic_timer\">disable_apic_timer</a> = 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#early_param\">early_param</a>(\"nolapic_timer\", <a class=\"id\" href=\"#parse_nolapic_timer\">parse_nolapic_timer</a>);", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#apic_set_verbosity\">apic_set_verbosity</a>(char *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#arg\">arg</a>)  {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skip_ioapic_setup\">skip_ioapic_setup</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(\"debug\", <a class=\"id\" href=\"#arg\">arg</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_verbosity\">apic_verbosity</a> = <a class=\"id\" href=\"#APIC_DEBUG\">APIC_DEBUG</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(\"verbose\", <a class=\"id\" href=\"#arg\">arg</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_verbosity\">apic_verbosity</a> = <a class=\"id\" href=\"#APIC_VERBOSE\">APIC_VERBOSE</a>;", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"APIC Verbosity level %s not recognised\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" use apic=verbose or apic=debug\\n\", <a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#early_param\">early_param</a>(\"apic\", <a class=\"id\" href=\"#apic_set_verbosity\">apic_set_verbosity</a>);", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#lapic_insert_resource\">lapic_insert_resource</a>(void)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#apic_phys\">apic_phys</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Put local APIC into the resource map. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lapic_resource\">lapic_resource</a>.<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#apic_phys\">apic_phys</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lapic_resource\">lapic_resource</a>.<a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#lapic_resource\">lapic_resource</a>.<a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#insert_resource\">insert_resource</a>(&amp;<a class=\"id\" href=\"#iomem_resource\">iomem_resource</a>, &amp;<a class=\"id\" href=\"#lapic_resource\">lapic_resource</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * need call insert after e820_reserve_resources()</span>", 
"<span class=\"comment\"> * that is using request_resource</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#late_initcall\">late_initcall</a>(<a class=\"id\" href=\"#lapic_insert_resource\">lapic_insert_resource</a>);", 
];
xr_frag_insert('l/03/53fe2c86ff5b333b33a96ffc47ee1673d56414.xr', __xr_tmp);
