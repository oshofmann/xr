var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Written by Mark Hemment, 1996 (markhe@nextd.demon.co.uk).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (C) SGI 2006, Christoph Lameter</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>Cleaned up and restructured to ease the addition of alternative</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>implementations of SLAB allocators.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_SLAB_H\">_LINUX_SLAB_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#_LINUX_SLAB_H\">_LINUX_SLAB_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#gfp\">gfp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Flags to pass to kmem_cache_create().</span>", 
"<span class=\"comment\"> * The ones marked DEBUG are only valid if CONFIG_SLAB_DEBUG is set.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SLAB_DEBUG_FREE\">SLAB_DEBUG_FREE</a><span class=\"ts\"/><span class=\"ts\"/>0x00000100UL<span class=\"ts\"/><span class=\"comment\">/* DEBUG: Perform (expensive) checks on free */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SLAB_RED_ZONE\">SLAB_RED_ZONE</a><span class=\"ts\"/><span class=\"ts\"/>0x00000400UL<span class=\"ts\"/><span class=\"comment\">/* DEBUG: Red zone objs in a cache */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SLAB_POISON\">SLAB_POISON</a><span class=\"ts\"/><span class=\"ts\"/>0x00000800UL<span class=\"ts\"/><span class=\"comment\">/* DEBUG: Poison objects */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SLAB_HWCACHE_ALIGN\">SLAB_HWCACHE_ALIGN</a><span class=\"ts\"/>0x00002000UL<span class=\"ts\"/><span class=\"comment\">/* Align objs on cache lines */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SLAB_CACHE_DMA\">SLAB_CACHE_DMA</a><span class=\"ts\"/><span class=\"ts\"/>0x00004000UL<span class=\"ts\"/><span class=\"comment\">/* Use GFP_DMA memory */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SLAB_STORE_USER\">SLAB_STORE_USER</a><span class=\"ts\"/><span class=\"ts\"/>0x00010000UL<span class=\"ts\"/><span class=\"comment\">/* DEBUG: Store the last owner for bug hunting */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a><span class=\"ts\"/><span class=\"ts\"/>0x00040000UL<span class=\"ts\"/><span class=\"comment\">/* Panic if kmem_cache_create() fails */</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * SLAB_DESTROY_BY_RCU - **WARNING** READ THIS!</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This delays freeing the SLAB page by a grace period, it does _NOT_</span>", 
"<span class=\"comment\"> * delay object freeing. This means that if you do kmem_cache_free()</span>", 
"<span class=\"comment\"> * that memory location is free to be reused at any time. Thus it may</span>", 
"<span class=\"comment\"> * be possible to see another object there in the same RCU grace period.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This feature only ensures the memory location backing the object</span>", 
"<span class=\"comment\"> * stays valid, the trick to using this is relying on an independent</span>", 
"<span class=\"comment\"> * object validation pass. Something like:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  rcu_read_lock()</span>", 
"<span class=\"comment\"> * again:</span>", 
"<span class=\"comment\"> *  obj = lockless_lookup(key);</span>", 
"<span class=\"comment\"> *  if (obj) {</span>", 
"<span class=\"comment\"> *    if (!try_get_ref(obj)) // might fail for free objects</span>", 
"<span class=\"comment\"> *      goto again;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *    if (obj-&gt;key != key) { // not the object we expected</span>", 
"<span class=\"comment\"> *      put_ref(obj);</span>", 
"<span class=\"comment\"> *      goto again;</span>", 
"<span class=\"comment\"> *    }</span>", 
"<span class=\"comment\"> *  }</span>", 
"<span class=\"comment\"> *  rcu_read_unlock();</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * See also the comment on struct slab_rcu in mm/slab.c.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SLAB_DESTROY_BY_RCU\">SLAB_DESTROY_BY_RCU</a><span class=\"ts\"/>0x00080000UL<span class=\"ts\"/><span class=\"comment\">/* Defer freeing slabs to RCU */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SLAB_MEM_SPREAD\">SLAB_MEM_SPREAD</a><span class=\"ts\"/><span class=\"ts\"/>0x00100000UL<span class=\"ts\"/><span class=\"comment\">/* Spread some memory over cpuset */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SLAB_TRACE\">SLAB_TRACE</a><span class=\"ts\"/><span class=\"ts\"/>0x00200000UL<span class=\"ts\"/><span class=\"comment\">/* Trace allocations and frees */</span>", 
"", 
"<span class=\"comment\">/* Flag to prevent checks on free */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_OBJECTS\">CONFIG_DEBUG_OBJECTS</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SLAB_DEBUG_OBJECTS\">SLAB_DEBUG_OBJECTS</a><span class=\"ts\"/>0x00400000UL", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SLAB_DEBUG_OBJECTS\">SLAB_DEBUG_OBJECTS</a><span class=\"ts\"/>0x00000000UL", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SLAB_NOLEAKTRACE\">SLAB_NOLEAKTRACE</a><span class=\"ts\"/>0x00800000UL<span class=\"ts\"/><span class=\"comment\">/* Avoid kmemleak tracing */</span>", 
"", 
"<span class=\"comment\">/* Don't track use of uninitialized memory */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KMEMCHECK\">CONFIG_KMEMCHECK</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SLAB_NOTRACK\">SLAB_NOTRACK</a><span class=\"ts\"/><span class=\"ts\"/>0x01000000UL", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SLAB_NOTRACK\">SLAB_NOTRACK</a><span class=\"ts\"/><span class=\"ts\"/>0x00000000UL", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FAILSLAB\">CONFIG_FAILSLAB</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SLAB_FAILSLAB\">SLAB_FAILSLAB</a><span class=\"ts\"/><span class=\"ts\"/>0x02000000UL<span class=\"ts\"/><span class=\"comment\">/* Fault injection mark */</span>", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SLAB_FAILSLAB\">SLAB_FAILSLAB</a><span class=\"ts\"/><span class=\"ts\"/>0x00000000UL", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* The following flags affect the page allocator grouping pages by mobility */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SLAB_RECLAIM_ACCOUNT\">SLAB_RECLAIM_ACCOUNT</a><span class=\"ts\"/>0x00020000UL<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Objects are reclaimable */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SLAB_TEMPORARY\">SLAB_TEMPORARY</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SLAB_RECLAIM_ACCOUNT\">SLAB_RECLAIM_ACCOUNT</a><span class=\"ts\"/><span class=\"comment\">/* Objects are short-lived */</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ZERO_SIZE_PTR will be returned for zero sized kmalloc requests.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Dereferencing ZERO_SIZE_PTR will lead to a distinct access fault.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ZERO_SIZE_PTR can be passed to kfree though in the same way that NULL can.</span>", 
"<span class=\"comment\"> * Both make kfree a no-op.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ZERO_SIZE_PTR\">ZERO_SIZE_PTR</a> ((void *)16)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ZERO_OR_NULL_PTR\">ZERO_OR_NULL_PTR</a>(<a class=\"id\" href=\"#x\">x</a>) ((unsigned long)(<a class=\"id\" href=\"#x\">x</a>) <= \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long)<a class=\"id\" href=\"#ZERO_SIZE_PTR\">ZERO_SIZE_PTR</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * struct kmem_cache related prototypes</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#kmem_cache_init\">kmem_cache_init</a>(void);", 
"int <a class=\"id\" href=\"#slab_is_available\">slab_is_available</a>(void);", 
"", 
"struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(const char *, <a class=\"id\" href=\"#size_t\">size_t</a>, <a class=\"id\" href=\"#size_t\">size_t</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void (*)(void *));", 
"void <a class=\"id\" href=\"#kmem_cache_destroy\">kmem_cache_destroy</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *);", 
"int <a class=\"id\" href=\"#kmem_cache_shrink\">kmem_cache_shrink</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *);", 
"void <a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *, void *);", 
"unsigned int <a class=\"id\" href=\"#kmem_cache_size\">kmem_cache_size</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *);", 
"const char *<a class=\"id\" href=\"#kmem_cache_name\">kmem_cache_name</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *);", 
"int <a class=\"id\" href=\"#kern_ptr_validate\">kern_ptr_validate</a>(const void *<a class=\"id\" href=\"#ptr\">ptr</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>);", 
"int <a class=\"id\" href=\"#kmem_ptr_validate\">kmem_ptr_validate</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, const void *<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Please use this macro to create slab caches. Simply specify the</span>", 
"<span class=\"comment\"> * name of the structure and maybe some flags that are listed above.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The alignment of the struct determines object alignment. If you</span>", 
"<span class=\"comment\"> * f.e. add ____cacheline_aligned_in_smp to the struct declaration</span>", 
"<span class=\"comment\"> * then the objects will be properly aligned in SMP configurations.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KMEM_CACHE\">KMEM_CACHE</a>(<a class=\"id\" href=\"#__struct\">__struct</a>, <a class=\"id\" href=\"#__flags\">__flags</a>) <a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(#<a class=\"id\" href=\"#__struct\">__struct</a>,\\", 
"<span class=\"ts\"/><span class=\"ts\"/>sizeof(struct <a class=\"id\" href=\"#__struct\">__struct</a>), <a class=\"id\" href=\"#__alignof__\">__alignof__</a>(struct <a class=\"id\" href=\"#__struct\">__struct</a>),\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#__flags\">__flags</a>), <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The largest kmalloc size supported by the slab allocators is</span>", 
"<span class=\"comment\"> * 32 megabyte (2^25) or the maximum allocatable page order if that is</span>", 
"<span class=\"comment\"> * less than 32 MB.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * WARNING: Its not easy to increase this value since the allocators have</span>", 
"<span class=\"comment\"> * to do various tricks to work around compiler limitations in order to</span>", 
"<span class=\"comment\"> * ensure proper constant folding.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KMALLOC_SHIFT_HIGH\">KMALLOC_SHIFT_HIGH</a><span class=\"ts\"/>((<a class=\"id\" href=\"#MAX_ORDER\">MAX_ORDER</a> + <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a> - 1) <= 25 ? \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#MAX_ORDER\">MAX_ORDER</a> + <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a> - 1) : 25)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KMALLOC_MAX_SIZE\">KMALLOC_MAX_SIZE</a><span class=\"ts\"/>(1UL << <a class=\"id\" href=\"#KMALLOC_SHIFT_HIGH\">KMALLOC_SHIFT_HIGH</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KMALLOC_MAX_ORDER\">KMALLOC_MAX_ORDER</a><span class=\"ts\"/>(<a class=\"id\" href=\"#KMALLOC_SHIFT_HIGH\">KMALLOC_SHIFT_HIGH</a> - <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Common kmalloc functions provided by all allocators</span>", 
"<span class=\"comment\"> */</span>", 
"void * <a class=\"id\" href=\"#__must_check\">__must_check</a> <a class=\"id\" href=\"#__krealloc\">__krealloc</a>(const void *, <a class=\"id\" href=\"#size_t\">size_t</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a>);", 
"void * <a class=\"id\" href=\"#__must_check\">__must_check</a> <a class=\"id\" href=\"#krealloc\">krealloc</a>(const void *, <a class=\"id\" href=\"#size_t\">size_t</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a>);", 
"void <a class=\"id\" href=\"#kfree\">kfree</a>(const void *);", 
"void <a class=\"id\" href=\"#kzfree\">kzfree</a>(const void *);", 
"<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#ksize\">ksize</a>(const void *);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Allocator specific definitions. These are mainly used to establish optimized</span>", 
"<span class=\"comment\"> * ways to convert kmalloc() calls to kmem_cache_alloc() invocations by</span>", 
"<span class=\"comment\"> * selecting the appropriate general cache at compile time.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Allocators must define at least:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>kmem_cache_alloc()</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>__kmalloc()</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>kmalloc()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Those wishing to support NUMA must also define:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>kmem_cache_alloc_node()</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>kmalloc_node()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * See each allocator definition file for additional comments and</span>", 
"<span class=\"comment\"> * implementation notes.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SLUB\">CONFIG_SLUB</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slub_def\">slub_def</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SLOB\">CONFIG_SLOB</a>)", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slob_def\">slob_def</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#else", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab_def\">slab_def</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kcalloc - allocate memory for an array. The memory is set to zero.</span>", 
"<span class=\"comment\"> * @n: number of elements.</span>", 
"<span class=\"comment\"> * @size: element size.</span>", 
"<span class=\"comment\"> * @flags: the type of memory to allocate.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The @flags argument may be one of:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * %GFP_USER - Allocate memory on behalf of user.  May sleep.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * %GFP_KERNEL - Allocate normal kernel ram.  May sleep.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * %GFP_ATOMIC - Allocation will not sleep.  May use emergency pools.</span>", 
"<span class=\"comment\"> *   For example, use this inside interrupt handlers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * %GFP_HIGHUSER - Allocate pages from high memory.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * %GFP_NOIO - Do not do any I/O at all while trying to get memory.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * %GFP_NOFS - Do not make any fs calls while trying to get memory.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * %GFP_NOWAIT - Allocation will not sleep.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * %GFP_THISNODE - Allocate node-local memory only.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * %GFP_DMA - Allocation suitable for DMA.</span>", 
"<span class=\"comment\"> *   Should only be used for kmalloc() caches. Otherwise, use a</span>", 
"<span class=\"comment\"> *   slab created with SLAB_DMA.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Also it is possible to set different flags by OR'ing</span>", 
"<span class=\"comment\"> * in one or more of the following additional @flags:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * %__GFP_COLD - Request cache-cold pages instead of</span>", 
"<span class=\"comment\"> *   trying to return cache-warm pages.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * %__GFP_HIGH - This allocation has high priority and may use emergency pools.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * %__GFP_NOFAIL - Indicate that this allocation is in no way allowed to fail</span>", 
"<span class=\"comment\"> *   (think twice before using).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * %__GFP_NORETRY - If memory is not immediately available,</span>", 
"<span class=\"comment\"> *   then give up at once.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * %__GFP_NOWARN - If allocation fails, don't issue any warnings.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * %__GFP_REPEAT - If allocation fails initially, try once more before failing.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * There are other flags available as well, but these are not intended</span>", 
"<span class=\"comment\"> * for general use, and so are not documented here. For a full list of</span>", 
"<span class=\"comment\"> * potential flags, always refer to linux/gfp.h.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *<a class=\"id\" href=\"#kcalloc\">kcalloc</a>(<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> != 0 && <a class=\"id\" href=\"#n\">n</a> &gt; <a class=\"id\" href=\"#ULONG_MAX\">ULONG_MAX</a> / <a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__kmalloc\">__kmalloc</a>(<a class=\"id\" href=\"#n\">n</a> * <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#flags\">flags</a> | <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>);", 
"}", 
"", 
"#if !<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>) && !<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SLOB\">CONFIG_SLOB</a>)", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kmalloc_node - allocate memory from a specific node</span>", 
"<span class=\"comment\"> * @size: how many bytes of memory are required.</span>", 
"<span class=\"comment\"> * @flags: the type of memory to allocate (see kcalloc).</span>", 
"<span class=\"comment\"> * @node: node to allocate from.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * kmalloc() for non-local nodes, used to allocate from a specific node</span>", 
"<span class=\"comment\"> * if available. Equivalent to kmalloc() in the non-NUMA single-node</span>", 
"<span class=\"comment\"> * case.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *<a class=\"id\" href=\"#kmalloc_node\">kmalloc_node</a>(<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>, int <a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *<a class=\"id\" href=\"#__kmalloc_node\">__kmalloc_node</a>(<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>, int <a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__kmalloc\">__kmalloc</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"void *<a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *, <a class=\"id\" href=\"#gfp_t\">gfp_t</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *<a class=\"id\" href=\"#kmem_cache_alloc_node\">kmem_cache_alloc_node</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>, int <a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !CONFIG_NUMA &amp;&amp; !CONFIG_SLOB */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * kmalloc_track_caller is a special version of kmalloc that records the</span>", 
"<span class=\"comment\"> * calling function of the routine calling it for slab leak tracking instead</span>", 
"<span class=\"comment\"> * of just the calling function (confusing, eh?).</span>", 
"<span class=\"comment\"> * It's useful when the call to kmalloc comes from a widely-used standard</span>", 
"<span class=\"comment\"> * allocator where we care about the real place the memory allocation</span>", 
"<span class=\"comment\"> * request comes from.</span>", 
"<span class=\"comment\"> */</span>", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_DEBUG_SLAB\">CONFIG_DEBUG_SLAB</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SLUB\">CONFIG_SLUB</a>) || \\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SLAB\">CONFIG_SLAB</a>) && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_TRACING\">CONFIG_TRACING</a>))", 
"extern void *<a class=\"id\" href=\"#__kmalloc_track_caller\">__kmalloc_track_caller</a>(<a class=\"id\" href=\"#size_t\">size_t</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a>, unsigned long);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#kmalloc_track_caller\">kmalloc_track_caller</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#flags\">flags</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__kmalloc_track_caller\">__kmalloc_track_caller</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#_RET_IP_\">_RET_IP_</a>)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#kmalloc_track_caller\">kmalloc_track_caller</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#flags\">flags</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__kmalloc\">__kmalloc</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#flags\">flags</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* DEBUG_SLAB */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * kmalloc_node_track_caller is a special version of kmalloc_node that</span>", 
"<span class=\"comment\"> * records the calling function of the routine calling it for slab leak</span>", 
"<span class=\"comment\"> * tracking instead of just the calling function (confusing, eh?).</span>", 
"<span class=\"comment\"> * It's useful when the call to kmalloc_node comes from a widely-used</span>", 
"<span class=\"comment\"> * standard allocator where we care about the real place the memory</span>", 
"<span class=\"comment\"> * allocation request comes from.</span>", 
"<span class=\"comment\"> */</span>", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_DEBUG_SLAB\">CONFIG_DEBUG_SLAB</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SLUB\">CONFIG_SLUB</a>) || \\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SLAB\">CONFIG_SLAB</a>) && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_TRACING\">CONFIG_TRACING</a>))", 
"extern void *<a class=\"id\" href=\"#__kmalloc_node_track_caller\">__kmalloc_node_track_caller</a>(<a class=\"id\" href=\"#size_t\">size_t</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a>, int, unsigned long);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#kmalloc_node_track_caller\">kmalloc_node_track_caller</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#node\">node</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__kmalloc_node_track_caller\">__kmalloc_node_track_caller</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#node\">node</a>, \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#_RET_IP_\">_RET_IP_</a>)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#kmalloc_node_track_caller\">kmalloc_node_track_caller</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#node\">node</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__kmalloc_node\">__kmalloc_node</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#node\">node</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#else <span class=\"comment\">/* CONFIG_NUMA */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#kmalloc_node_track_caller\">kmalloc_node_track_caller</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#node\">node</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmalloc_track_caller\">kmalloc_track_caller</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#flags\">flags</a>)", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_NUMA */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Shortcuts</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *<a class=\"id\" href=\"#kmem_cache_zalloc\">kmem_cache_zalloc</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#k\">k</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#k\">k</a>, <a class=\"id\" href=\"#flags\">flags</a> | <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kzalloc - allocate memory. The memory is set to zero.</span>", 
"<span class=\"comment\"> * @size: how many bytes of memory are required.</span>", 
"<span class=\"comment\"> * @flags: the type of memory to allocate (see kmalloc).</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *<a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#flags\">flags</a> | <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kzalloc_node - allocate zeroed memory from a particular memory node.</span>", 
"<span class=\"comment\"> * @size: how many bytes of memory are required.</span>", 
"<span class=\"comment\"> * @flags: the type of memory to allocate (see kmalloc).</span>", 
"<span class=\"comment\"> * @node: memory node from which to allocate</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *<a class=\"id\" href=\"#kzalloc_node\">kzalloc_node</a>(<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>, int <a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kmalloc_node\">kmalloc_node</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#flags\">flags</a> | <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#kmem_cache_init_late\">kmem_cache_init_late</a>(void);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* _LINUX_SLAB_H */</span>", 
];
xr_frag_insert('l/03/59b6890d3a4d742e2b95b8ffb27afea6f3c5c4.xr', __xr_tmp);
