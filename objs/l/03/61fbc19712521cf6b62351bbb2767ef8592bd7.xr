var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * PCI HotPlug Core Functions</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 1995,2001 Compaq Computer Corporation</span>", 
"<span class=\"comment\"> * Copyright (C) 2001 Greg Kroah-Hartman (greg@kroah.com)</span>", 
"<span class=\"comment\"> * Copyright (C) 2001 IBM Corp.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * All rights reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> * the Free Software Foundation; either version 2 of the License, or (at</span>", 
"<span class=\"comment\"> * your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful, but</span>", 
"<span class=\"comment\"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE, GOOD TITLE or</span>", 
"<span class=\"comment\"> * NON INFRINGEMENT.  See the GNU General Public License for more</span>", 
"<span class=\"comment\"> * details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> * along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Send feedback to &lt;kristen.c.accardi@intel.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_PCI_HOTPLUG_H\">_PCI_HOTPLUG_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_PCI_HOTPLUG_H\">_PCI_HOTPLUG_H</a>", 
"", 
"<span class=\"comment\">/* These values come from the PCI Express Spec */</span>", 
"enum <a class=\"id\" href=\"#pcie_link_width\">pcie_link_width</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PCIE_LNK_WIDTH_RESRV\">PCIE_LNK_WIDTH_RESRV</a><span class=\"ts\"/>= 0x00,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PCIE_LNK_X1\">PCIE_LNK_X1</a><span class=\"ts\"/><span class=\"ts\"/>= 0x01,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PCIE_LNK_X2\">PCIE_LNK_X2</a><span class=\"ts\"/><span class=\"ts\"/>= 0x02,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PCIE_LNK_X4\">PCIE_LNK_X4</a><span class=\"ts\"/><span class=\"ts\"/>= 0x04,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PCIE_LNK_X8\">PCIE_LNK_X8</a><span class=\"ts\"/><span class=\"ts\"/>= 0x08,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PCIE_LNK_X12\">PCIE_LNK_X12</a><span class=\"ts\"/><span class=\"ts\"/>= 0x0C,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PCIE_LNK_X16\">PCIE_LNK_X16</a><span class=\"ts\"/><span class=\"ts\"/>= 0x10,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PCIE_LNK_X32\">PCIE_LNK_X32</a><span class=\"ts\"/><span class=\"ts\"/>= 0x20,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PCIE_LNK_WIDTH_UNKNOWN\">PCIE_LNK_WIDTH_UNKNOWN</a>  = 0xFF,", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct hotplug_slot_ops -the callbacks that the hotplug pci core can use</span>", 
"<span class=\"comment\"> * @owner: The module owner of this structure</span>", 
"<span class=\"comment\"> * @mod_name: The module name (KBUILD_MODNAME) of this structure</span>", 
"<span class=\"comment\"> * @enable_slot: Called when the user wants to enable a specific pci slot</span>", 
"<span class=\"comment\"> * @disable_slot: Called when the user wants to disable a specific pci slot</span>", 
"<span class=\"comment\"> * @set_attention_status: Called to set the specific slot's attention LED to</span>", 
"<span class=\"comment\"> * the specified value</span>", 
"<span class=\"comment\"> * @hardware_test: Called to run a specified hardware test on the specified</span>", 
"<span class=\"comment\"> * slot.</span>", 
"<span class=\"comment\"> * @get_power_status: Called to get the current power status of a slot.</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>If this field is NULL, the value passed in the struct hotplug_slot_info</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>will be used when this value is requested by a user.</span>", 
"<span class=\"comment\"> * @get_attention_status: Called to get the current attention status of a slot.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If this field is NULL, the value passed in the struct hotplug_slot_info</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>will be used when this value is requested by a user.</span>", 
"<span class=\"comment\"> * @get_latch_status: Called to get the current latch status of a slot.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If this field is NULL, the value passed in the struct hotplug_slot_info</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>will be used when this value is requested by a user.</span>", 
"<span class=\"comment\"> * @get_adapter_status: Called to get see if an adapter is present in the slot or not.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If this field is NULL, the value passed in the struct hotplug_slot_info</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>will be used when this value is requested by a user.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The table of function pointers that is passed to the hotplug pci core by a</span>", 
"<span class=\"comment\"> * hotplug pci driver.  These functions are called by the hotplug pci core when</span>", 
"<span class=\"comment\"> * the user wants to do something to a specific slot (query it for information,</span>", 
"<span class=\"comment\"> * set an LED, enable / disable power, etc.)</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#hotplug_slot_ops\">hotplug_slot_ops</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#owner\">owner</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#mod_name\">mod_name</a>;", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#enable_slot\">enable_slot</a>)<span class=\"ts\"/><span class=\"ts\"/>(struct <a class=\"id\" href=\"#hotplug_slot\">hotplug_slot</a> *<a class=\"id\" href=\"#slot\">slot</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#disable_slot\">disable_slot</a>)<span class=\"ts\"/><span class=\"ts\"/>(struct <a class=\"id\" href=\"#hotplug_slot\">hotplug_slot</a> *<a class=\"id\" href=\"#slot\">slot</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#set_attention_status\">set_attention_status</a>)<span class=\"ts\"/>(struct <a class=\"id\" href=\"#hotplug_slot\">hotplug_slot</a> *<a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#value\">value</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#hardware_test\">hardware_test</a>)<span class=\"ts\"/><span class=\"ts\"/>(struct <a class=\"id\" href=\"#hotplug_slot\">hotplug_slot</a> *<a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#value\">value</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#get_power_status\">get_power_status</a>)<span class=\"ts\"/><span class=\"ts\"/>(struct <a class=\"id\" href=\"#hotplug_slot\">hotplug_slot</a> *<a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#value\">value</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#get_attention_status\">get_attention_status</a>)<span class=\"ts\"/>(struct <a class=\"id\" href=\"#hotplug_slot\">hotplug_slot</a> *<a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#value\">value</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#get_latch_status\">get_latch_status</a>)<span class=\"ts\"/><span class=\"ts\"/>(struct <a class=\"id\" href=\"#hotplug_slot\">hotplug_slot</a> *<a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#value\">value</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#get_adapter_status\">get_adapter_status</a>)<span class=\"ts\"/>(struct <a class=\"id\" href=\"#hotplug_slot\">hotplug_slot</a> *<a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#value\">value</a>);", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct hotplug_slot_info - used to notify the hotplug pci core of the state of the slot</span>", 
"<span class=\"comment\"> * @power_status: if power is enabled or not (1/0)</span>", 
"<span class=\"comment\"> * @attention_status: if the attention light is enabled or not (1/0)</span>", 
"<span class=\"comment\"> * @latch_status: if the latch (if any) is open or closed (1/0)</span>", 
"<span class=\"comment\"> * @adapter_status: if there is a pci board present in the slot or not (1/0)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Used to notify the hotplug pci core of the status of a specific slot.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#hotplug_slot_info\">hotplug_slot_info</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><a class=\"id\" href=\"#power_status\">power_status</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><a class=\"id\" href=\"#attention_status\">attention_status</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><a class=\"id\" href=\"#latch_status\">latch_status</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><a class=\"id\" href=\"#adapter_status\">adapter_status</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct hotplug_slot - used to register a physical slot with the hotplug pci core</span>", 
"<span class=\"comment\"> * @ops: pointer to the &amp;struct hotplug_slot_ops to be used for this slot</span>", 
"<span class=\"comment\"> * @info: pointer to the &amp;struct hotplug_slot_info for the initial values for</span>", 
"<span class=\"comment\"> * this slot.</span>", 
"<span class=\"comment\"> * @release: called during pci_hp_deregister to free memory allocated in a</span>", 
"<span class=\"comment\"> * hotplug_slot structure.</span>", 
"<span class=\"comment\"> * @private: used by the hotplug pci controller driver to store whatever it</span>", 
"<span class=\"comment\"> * needs.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#hotplug_slot\">hotplug_slot</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hotplug_slot_ops\">hotplug_slot_ops</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ops\">ops</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hotplug_slot_info\">hotplug_slot_info</a><span class=\"ts\"/>*<a class=\"id\" href=\"#info\">info</a>;", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#release\">release</a>) (struct <a class=\"id\" href=\"#hotplug_slot\">hotplug_slot</a> *<a class=\"id\" href=\"#slot\">slot</a>);", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#private\">private</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Variables below this are for use only by the hotplug pci core. */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slot_list\">slot_list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_slot\">pci_slot</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#pci_slot\">pci_slot</a>;", 
"};", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#to_hotplug_slot\">to_hotplug_slot</a>(<a class=\"id\" href=\"#n\">n</a>) <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#n\">n</a>, struct <a class=\"id\" href=\"#hotplug_slot\">hotplug_slot</a>, <a class=\"id\" href=\"#kobj\">kobj</a>)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> const char *<a class=\"id\" href=\"#hotplug_slot_name\">hotplug_slot_name</a>(const struct <a class=\"id\" href=\"#hotplug_slot\">hotplug_slot</a> *<a class=\"id\" href=\"#slot\">slot</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pci_slot_name\">pci_slot_name</a>(<a class=\"id\" href=\"#slot\">slot</a>-><a class=\"id\" href=\"#pci_slot\">pci_slot</a>);", 
"}", 
"", 
"extern int <a class=\"id\" href=\"#__pci_hp_register\">__pci_hp_register</a>(struct <a class=\"id\" href=\"#hotplug_slot\">hotplug_slot</a> *<a class=\"id\" href=\"#slot\">slot</a>, struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#pbus\">pbus</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#nr\">nr</a>, const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#owner\">owner</a>, const char *<a class=\"id\" href=\"#mod_name\">mod_name</a>);", 
"extern int <a class=\"id\" href=\"#pci_hp_deregister\">pci_hp_deregister</a>(struct <a class=\"id\" href=\"#hotplug_slot\">hotplug_slot</a> *<a class=\"id\" href=\"#slot\">slot</a>);", 
"extern int <a class=\"id\" href=\"#__must_check\">__must_check</a> <a class=\"id\" href=\"#pci_hp_change_slot_info\">pci_hp_change_slot_info</a><span class=\"ts\"/>(struct <a class=\"id\" href=\"#hotplug_slot\">hotplug_slot</a> *<a class=\"id\" href=\"#slot\">slot</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#hotplug_slot_info\">hotplug_slot_info</a> *<a class=\"id\" href=\"#info\">info</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#pci_hp_register\">pci_hp_register</a>(struct <a class=\"id\" href=\"#hotplug_slot\">hotplug_slot</a> *<a class=\"id\" href=\"#slot\">slot</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#pbus\">pbus</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#devnr\">devnr</a>, const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__pci_hp_register\">__pci_hp_register</a>(<a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#pbus\">pbus</a>, <a class=\"id\" href=\"#devnr\">devnr</a>, <a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>, <a class=\"id\" href=\"#KBUILD_MODNAME\">KBUILD_MODNAME</a>);", 
"}", 
"", 
"<span class=\"comment\">/* PCI Setting Record (Type 0) */</span>", 
"struct <a class=\"id\" href=\"#hpp_type0\">hpp_type0</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#revision\">revision</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a>  <a class=\"id\" href=\"#cache_line_size\">cache_line_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a>  <a class=\"id\" href=\"#latency_timer\">latency_timer</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a>  <a class=\"id\" href=\"#enable_serr\">enable_serr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a>  <a class=\"id\" href=\"#enable_perr\">enable_perr</a>;", 
"};", 
"", 
"<span class=\"comment\">/* PCI-X Setting Record (Type 1) */</span>", 
"struct <a class=\"id\" href=\"#hpp_type1\">hpp_type1</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#revision\">revision</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a>  <a class=\"id\" href=\"#max_mem_read\">max_mem_read</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a>  <a class=\"id\" href=\"#avg_max_split\">avg_max_split</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#tot_max_split\">tot_max_split</a>;", 
"};", 
"", 
"<span class=\"comment\">/* PCI Express Setting Record (Type 2) */</span>", 
"struct <a class=\"id\" href=\"#hpp_type2\">hpp_type2</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#revision\">revision</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#unc_err_mask_and\">unc_err_mask_and</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#unc_err_mask_or\">unc_err_mask_or</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#unc_err_sever_and\">unc_err_sever_and</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#unc_err_sever_or\">unc_err_sever_or</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#cor_err_mask_and\">cor_err_mask_and</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#cor_err_mask_or\">cor_err_mask_or</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#adv_err_cap_and\">adv_err_cap_and</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#adv_err_cap_or\">adv_err_cap_or</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#pci_exp_devctl_and\">pci_exp_devctl_and</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#pci_exp_devctl_or\">pci_exp_devctl_or</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#pci_exp_lnkctl_and\">pci_exp_lnkctl_and</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#pci_exp_lnkctl_or\">pci_exp_lnkctl_or</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sec_unc_err_sever_and\">sec_unc_err_sever_and</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sec_unc_err_sever_or\">sec_unc_err_sever_or</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sec_unc_err_mask_and\">sec_unc_err_mask_and</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sec_unc_err_mask_or\">sec_unc_err_mask_or</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#hotplug_params\">hotplug_params</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hpp_type0\">hpp_type0</a> *<a class=\"id\" href=\"#t0\">t0</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Type0: NULL if not available */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hpp_type1\">hpp_type1</a> *<a class=\"id\" href=\"#t1\">t1</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Type1: NULL if not available */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hpp_type2\">hpp_type2</a> *<a class=\"id\" href=\"#t2\">t2</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Type2: NULL if not available */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hpp_type0\">hpp_type0</a> <a class=\"id\" href=\"#type0_data\">type0_data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hpp_type1\">hpp_type1</a> <a class=\"id\" href=\"#type1_data\">type1_data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hpp_type2\">hpp_type2</a> <a class=\"id\" href=\"#type2_data\">type2_data</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_ACPI\">CONFIG_ACPI</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#acpi\">acpi</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#acpi\">acpi</a>/<a class=\"id\" href=\"#acpi_bus\">acpi_bus</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"int <a class=\"id\" href=\"#pci_get_hp_params\">pci_get_hp_params</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#hotplug_params\">hotplug_params</a> *<a class=\"id\" href=\"#hpp\">hpp</a>);", 
"int <a class=\"id\" href=\"#acpi_get_hp_hw_control_from_firmware\">acpi_get_hp_hw_control_from_firmware</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#flags\">flags</a>);", 
"int <a class=\"id\" href=\"#acpi_pci_check_ejectable\">acpi_pci_check_ejectable</a>(struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#pbus\">pbus</a>, <a class=\"id\" href=\"#acpi_handle\">acpi_handle</a> <a class=\"id\" href=\"#handle\">handle</a>);", 
"int <a class=\"id\" href=\"#acpi_pci_detect_ejectable\">acpi_pci_detect_ejectable</a>(<a class=\"id\" href=\"#acpi_handle\">acpi_handle</a> <a class=\"id\" href=\"#handle\">handle</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#pci_get_hp_params\">pci_get_hp_params</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#hotplug_params\">hotplug_params</a> *<a class=\"id\" href=\"#hpp\">hpp</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"void <a class=\"id\" href=\"#pci_configure_slot\">pci_configure_slot</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
];
xr_frag_insert('l/03/61fbc19712521cf6b62351bbb2767ef8592bd7.xr', __xr_tmp);
