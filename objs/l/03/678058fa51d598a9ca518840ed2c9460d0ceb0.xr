var __xr_tmp = [
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk_for_each_from\">sk_for_each_from</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#node\">node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_sock\">inet_sock</a> *<a class=\"id\" href=\"#inet\">inet</a> = <a class=\"id\" href=\"#inet_sk\">inet_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#net_eq\">net_eq</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#net\">net</a>) && <a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#inet_num\">inet_num</a> == <a class=\"id\" href=\"#num\">num</a><span class=\"ts\"/>&&", 
"<span class=\"ts\"/><span class=\"ts\"/>    !(<a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#inet_daddr\">inet_daddr</a> && <a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#inet_daddr\">inet_daddr</a> != <a class=\"id\" href=\"#raddr\">raddr</a>) <span class=\"ts\"/>&&", 
"<span class=\"ts\"/><span class=\"ts\"/>    !(<a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#inet_rcv_saddr\">inet_rcv_saddr</a> && <a class=\"id\" href=\"#inet\">inet</a>-><a class=\"id\" href=\"#inet_rcv_saddr\">inet_rcv_saddr</a> != <a class=\"id\" href=\"#laddr\">laddr</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    !(<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_bound_dev_if\">sk_bound_dev_if</a> && <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_bound_dev_if\">sk_bound_dev_if</a> != <a class=\"id\" href=\"#dif\">dif</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found\">found</a>; <span class=\"comment\">/* gotcha */</span>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<a class=\"id\" href=\"#found\">found</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sk\">sk</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0 - deliver</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>1 - block</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#__inline__\">__inline__</a> int <a class=\"id\" href=\"#icmp_filter\">icmp_filter</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#type\">type</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pskb_may_pull\">pskb_may_pull</a>(<a class=\"id\" href=\"#skb\">skb</a>, sizeof(struct <a class=\"id\" href=\"#icmphdr\">icmphdr</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#icmp_hdr\">icmp_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> &lt; 32) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#raw_sk\">raw_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#filter\">filter</a>.<a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return ((1 << <a class=\"id\" href=\"#type\">type</a>) &amp; <a class=\"id\" href=\"#data\">data</a>) != 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Do not block unknown ICMP types */</span>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* IP input processing comes here for RAW socket delivery.</span>", 
"<span class=\"comment\"> * Caller owns SKB, so we must make clones.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RFC 1122: SHOULD pass TOS value up to the transport layer.</span>", 
"<span class=\"comment\"> * -&gt; It does. And not only TOS, but all IP header.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#raw_v4_input\">raw_v4_input</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#iphdr\">iphdr</a> *<a class=\"id\" href=\"#iph\">iph</a>, int <a class=\"id\" href=\"#hash\">hash</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#delivered\">delivered</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#raw_v4_hashinfo\">raw_v4_hashinfo</a>.<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = &amp;<a class=\"id\" href=\"#raw_v4_hashinfo\">raw_v4_hashinfo</a>.<a class=\"id\" href=\"#ht\">ht</a>[<a class=\"id\" href=\"#hash\">hash</a>];", 
];
xr_frag_insert('l/03/678058fa51d598a9ca518840ed2c9460d0ceb0.xr', __xr_tmp);
