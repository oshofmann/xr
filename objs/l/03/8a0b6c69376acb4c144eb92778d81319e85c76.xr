var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * fs/mpage.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2002, Linus Torvalds.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Contains functions related to preparing and submitting BIOs which contain</span>", 
"<span class=\"comment\"> * multiple pagecache pages.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 15May2002<span class=\"ts\"/>Andrew Morton</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Initial version</span>", 
"<span class=\"comment\"> * 27Jun2002<span class=\"ts\"/>axboe@suse.de</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>use bio_add_page() to build bio's just the right size</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kdev_t\">kdev_t</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#gfp\">gfp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bio\">bio</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#buffer_head\">buffer_head</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#blkdev\">blkdev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#highmem\">highmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#prefetch\">prefetch</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mpage\">mpage</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#writeback\">writeback</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#backing\">backing</a>-<a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pagevec\">pagevec</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * I/O completion handler for multipage BIOs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The mpage code never puts partial pages into a BIO (except for end-of-file).</span>", 
"<span class=\"comment\"> * If a page does not map to a contiguous run of blocks then it simply falls</span>", 
"<span class=\"comment\"> * back to block_read_full_page().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Why is this?  If a page's completion depends on a number of different BIOs</span>", 
"<span class=\"comment\"> * which can complete in any order (or at the same time) then determining the</span>", 
"<span class=\"comment\"> * status of that page is hard.  See end_buffer_async_read() for the details.</span>", 
"<span class=\"comment\"> * There is no point in duplicating all that complexity.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#mpage_end_io_read\">mpage_end_io_read</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>, int <a class=\"id\" href=\"#err\">err</a>)", 
"{", 
"<span class=\"ts\"/>const int <a class=\"id\" href=\"#uptodate\">uptodate</a> = <a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#BIO_UPTODATE\">BIO_UPTODATE</a>, &amp;<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_flags\">bi_flags</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio_vec\">bio_vec</a> *<a class=\"id\" href=\"#bvec\">bvec</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_io_vec\">bi_io_vec</a> + <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_vcnt\">bi_vcnt</a> - 1;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#bvec\">bvec</a>-><a class=\"id\" href=\"#bv_page\">bv_page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (--<a class=\"id\" href=\"#bvec\">bvec</a> >= <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_io_vec\">bi_io_vec</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prefetchw\">prefetchw</a>(&amp;<a class=\"id\" href=\"#bvec\">bvec</a>-><a class=\"id\" href=\"#bv_page\">bv_page</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#uptodate\">uptodate</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageUptodate\">SetPageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ClearPageUptodate\">ClearPageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageError\">SetPageError</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#bvec\">bvec</a> >= <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_io_vec\">bi_io_vec</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio_put\">bio_put</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#mpage_end_io_write\">mpage_end_io_write</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>, int <a class=\"id\" href=\"#err\">err</a>)", 
"{", 
"<span class=\"ts\"/>const int <a class=\"id\" href=\"#uptodate\">uptodate</a> = <a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#BIO_UPTODATE\">BIO_UPTODATE</a>, &amp;<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_flags\">bi_flags</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio_vec\">bio_vec</a> *<a class=\"id\" href=\"#bvec\">bvec</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_io_vec\">bi_io_vec</a> + <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_vcnt\">bi_vcnt</a> - 1;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#bvec\">bvec</a>-><a class=\"id\" href=\"#bv_page\">bv_page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (--<a class=\"id\" href=\"#bvec\">bvec</a> >= <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_io_vec\">bi_io_vec</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prefetchw\">prefetchw</a>(&amp;<a class=\"id\" href=\"#bvec\">bvec</a>-><a class=\"id\" href=\"#bv_page\">bv_page</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#uptodate\">uptodate</a>){", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageError\">SetPageError</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#AS_EIO\">AS_EIO</a>, &amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end_page_writeback\">end_page_writeback</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#bvec\">bvec</a> >= <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_io_vec\">bi_io_vec</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio_put\">bio_put</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#mpage_bio_submit\">mpage_bio_submit</a>(int <a class=\"id\" href=\"#rw\">rw</a>, struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_end_io\">bi_end_io</a> = <a class=\"id\" href=\"#mpage_end_io_read\">mpage_end_io_read</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rw\">rw</a> == <a class=\"id\" href=\"#WRITE\">WRITE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_end_io\">bi_end_io</a> = <a class=\"id\" href=\"#mpage_end_io_write\">mpage_end_io_write</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#submit_bio\">submit_bio</a>(<a class=\"id\" href=\"#rw\">rw</a>, <a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#bio\">bio</a> *", 
"<a class=\"id\" href=\"#mpage_alloc\">mpage_alloc</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#first_sector\">first_sector</a>, int <a class=\"id\" href=\"#nr_vecs\">nr_vecs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_flags\">gfp_flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#bio_alloc\">bio_alloc</a>(<a class=\"id\" href=\"#gfp_flags\">gfp_flags</a>, <a class=\"id\" href=\"#nr_vecs\">nr_vecs</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bio\">bio</a> == <a class=\"id\" href=\"#NULL\">NULL</a> && (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PF_MEMALLOC\">PF_MEMALLOC</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>while (!<a class=\"id\" href=\"#bio\">bio</a> && (<a class=\"id\" href=\"#nr_vecs\">nr_vecs</a> /= 2))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#bio_alloc\">bio_alloc</a>(<a class=\"id\" href=\"#gfp_flags\">gfp_flags</a>, <a class=\"id\" href=\"#nr_vecs\">nr_vecs</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bio\">bio</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_bdev\">bi_bdev</a> = <a class=\"id\" href=\"#bdev\">bdev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_sector\">bi_sector</a> = <a class=\"id\" href=\"#first_sector\">first_sector</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bio\">bio</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * support function for mpage_readpages.  The fs supplied get_block might</span>", 
"<span class=\"comment\"> * return an up to date buffer.  This is used to map that buffer into</span>", 
"<span class=\"comment\"> * the page, which allows readpage to avoid triggering a duplicate call</span>", 
"<span class=\"comment\"> * to get_block.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The idea is to avoid adding buffers to pages that don't already have</span>", 
"<span class=\"comment\"> * them.  So when the buffer is up to date and the page size == block size,</span>", 
"<span class=\"comment\"> * this marks the page up to date instead of adding new buffers.</span>", 
"<span class=\"comment\"> */</span>", 
"static void ", 
"<a class=\"id\" href=\"#map_buffer_to_page\">map_buffer_to_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>, int <a class=\"id\" href=\"#page_block\">page_block</a>) ", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#page_bh\">page_bh</a>, *<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#block\">block</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page_has_buffers\">page_has_buffers</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * don't make any buffers if there is only one buffer on</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the page and the page just needs to be set up to date</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a> == <a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a> && ", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageUptodate\">SetPageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>);    ", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#create_empty_buffers\">create_empty_buffers</a>(<a class=\"id\" href=\"#page\">page</a>, 1 << <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a>, 0);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#page_buffers\">page_buffers</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_bh\">page_bh</a> = <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#block\">block</a> == <a class=\"id\" href=\"#page_block\">page_block</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_bh\">page_bh</a>-><a class=\"id\" href=\"#b_state\">b_state</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_state\">b_state</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_bh\">page_bh</a>-><a class=\"id\" href=\"#b_bdev\">b_bdev</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_bdev\">b_bdev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_bh\">page_bh</a>-><a class=\"id\" href=\"#b_blocknr\">b_blocknr</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_blocknr\">b_blocknr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_bh\">page_bh</a> = <a class=\"id\" href=\"#page_bh\">page_bh</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block\">block</a>++;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#page_bh\">page_bh</a> != <a class=\"id\" href=\"#head\">head</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is the worker routine which does all the work of mapping the disk</span>", 
"<span class=\"comment\"> * blocks and constructs largest possible bios, submits them for IO if the</span>", 
"<span class=\"comment\"> * blocks are not contiguous on the disk.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We pass a buffer_head back and forth and use its buffer_mapped() flag to</span>", 
"<span class=\"comment\"> * represent the validity of its disk mapping and to decide when to do the next</span>", 
"<span class=\"comment\"> * get_block() call.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#bio\">bio</a> *", 
"<a class=\"id\" href=\"#do_mpage_readpage\">do_mpage_readpage</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, unsigned <a class=\"id\" href=\"#nr_pages\">nr_pages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> *<a class=\"id\" href=\"#last_block_in_bio\">last_block_in_bio</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#map_bh\">map_bh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#first_logical_block\">first_logical_block</a>, <a class=\"id\" href=\"#get_block_t\">get_block_t</a> <a class=\"id\" href=\"#get_block\">get_block</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>const unsigned <a class=\"id\" href=\"#blkbits\">blkbits</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a>;", 
"<span class=\"ts\"/>const unsigned <a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a> = <a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a> >> <a class=\"id\" href=\"#blkbits\">blkbits</a>;", 
"<span class=\"ts\"/>const unsigned <a class=\"id\" href=\"#blocksize\">blocksize</a> = 1 << <a class=\"id\" href=\"#blkbits\">blkbits</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#block_in_file\">block_in_file</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#last_block\">last_block</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#last_block_in_file\">last_block_in_file</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#blocks\">blocks</a>[<a class=\"id\" href=\"#MAX_BUF_PER_PAGE\">MAX_BUF_PER_PAGE</a>];", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#page_block\">page_block</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#first_hole\">first_hole</a> = <a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#fully_mapped\">fully_mapped</a> = 1;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#nblocks\">nblocks</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#relative_block\">relative_block</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page_has_buffers\">page_has_buffers</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#confused\">confused</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#block_in_file\">block_in_file</a> = (<a class=\"id\" href=\"#sector_t\">sector_t</a>)<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a> << (<a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a> - <a class=\"id\" href=\"#blkbits\">blkbits</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#last_block\">last_block</a> = <a class=\"id\" href=\"#block_in_file\">block_in_file</a> + <a class=\"id\" href=\"#nr_pages\">nr_pages</a> * <a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#last_block_in_file\">last_block_in_file</a> = (<a class=\"id\" href=\"#i_size_read\">i_size_read</a>(<a class=\"id\" href=\"#inode\">inode</a>) + <a class=\"id\" href=\"#blocksize\">blocksize</a> - 1) >> <a class=\"id\" href=\"#blkbits\">blkbits</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#last_block\">last_block</a> &gt; <a class=\"id\" href=\"#last_block_in_file\">last_block_in_file</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_block\">last_block</a> = <a class=\"id\" href=\"#last_block_in_file\">last_block_in_file</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_block\">page_block</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Map blocks using the result from the previous get_blocks call first.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nblocks\">nblocks</a> = <a class=\"id\" href=\"#map_bh\">map_bh</a>-><a class=\"id\" href=\"#b_size\">b_size</a> >> <a class=\"id\" href=\"#blkbits\">blkbits</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_mapped\">buffer_mapped</a>(<a class=\"id\" href=\"#map_bh\">map_bh</a>) && <a class=\"id\" href=\"#block_in_file\">block_in_file</a> &gt; *<a class=\"id\" href=\"#first_logical_block\">first_logical_block</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_in_file\">block_in_file</a> &lt; (*<a class=\"id\" href=\"#first_logical_block\">first_logical_block</a> + <a class=\"id\" href=\"#nblocks\">nblocks</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#map_offset\">map_offset</a> = <a class=\"id\" href=\"#block_in_file\">block_in_file</a> - *<a class=\"id\" href=\"#first_logical_block\">first_logical_block</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#last\">last</a> = <a class=\"id\" href=\"#nblocks\">nblocks</a> - <a class=\"id\" href=\"#map_offset\">map_offset</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#relative_block\">relative_block</a> = 0; ; <a class=\"id\" href=\"#relative_block\">relative_block</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#relative_block\">relative_block</a> == <a class=\"id\" href=\"#last\">last</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_mapped\">clear_buffer_mapped</a>(<a class=\"id\" href=\"#map_bh\">map_bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page_block\">page_block</a> == <a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blocks\">blocks</a>[<a class=\"id\" href=\"#page_block\">page_block</a>] = <a class=\"id\" href=\"#map_bh\">map_bh</a>-><a class=\"id\" href=\"#b_blocknr\">b_blocknr</a> + <a class=\"id\" href=\"#map_offset\">map_offset</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#relative_block\">relative_block</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_block\">page_block</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_in_file\">block_in_file</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdev\">bdev</a> = <a class=\"id\" href=\"#map_bh\">map_bh</a>-><a class=\"id\" href=\"#b_bdev\">b_bdev</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Then do more get_blocks calls until we are done with this page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map_bh\">map_bh</a>-><a class=\"id\" href=\"#b_page\">b_page</a> = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#page_block\">page_block</a> &lt; <a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map_bh\">map_bh</a>-><a class=\"id\" href=\"#b_state\">b_state</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map_bh\">map_bh</a>-><a class=\"id\" href=\"#b_size\">b_size</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#block_in_file\">block_in_file</a> &lt; <a class=\"id\" href=\"#last_block\">last_block</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map_bh\">map_bh</a>-><a class=\"id\" href=\"#b_size\">b_size</a> = (<a class=\"id\" href=\"#last_block\">last_block</a>-<a class=\"id\" href=\"#block_in_file\">block_in_file</a>) << <a class=\"id\" href=\"#blkbits\">blkbits</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#get_block\">get_block</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#block_in_file\">block_in_file</a>, <a class=\"id\" href=\"#map_bh\">map_bh</a>, 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#confused\">confused</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#first_logical_block\">first_logical_block</a> = <a class=\"id\" href=\"#block_in_file\">block_in_file</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_mapped\">buffer_mapped</a>(<a class=\"id\" href=\"#map_bh\">map_bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fully_mapped\">fully_mapped</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#first_hole\">first_hole</a> == <a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first_hole\">first_hole</a> = <a class=\"id\" href=\"#page_block\">page_block</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_block\">page_block</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_in_file\">block_in_file</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* some filesystems will copy data into the page during</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the get_block call, in which case we don't want to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * read it again.  map_buffer_to_page copies the data</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we just collected from get_block into the page's buffers</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * so readpage doesn't have to repeat the get_block call</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#map_bh\">map_bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map_buffer_to_page\">map_buffer_to_page</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#map_bh\">map_bh</a>, <a class=\"id\" href=\"#page_block\">page_block</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#confused\">confused</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#first_hole\">first_hole</a> != <a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#confused\">confused</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* hole -&gt; non-hole */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Contiguous blocks? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page_block\">page_block</a> && <a class=\"id\" href=\"#blocks\">blocks</a>[<a class=\"id\" href=\"#page_block\">page_block</a>-1] != <a class=\"id\" href=\"#map_bh\">map_bh</a>-><a class=\"id\" href=\"#b_blocknr\">b_blocknr</a>-1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#confused\">confused</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nblocks\">nblocks</a> = <a class=\"id\" href=\"#map_bh\">map_bh</a>-><a class=\"id\" href=\"#b_size\">b_size</a> >> <a class=\"id\" href=\"#blkbits\">blkbits</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#relative_block\">relative_block</a> = 0; ; <a class=\"id\" href=\"#relative_block\">relative_block</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#relative_block\">relative_block</a> == <a class=\"id\" href=\"#nblocks\">nblocks</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_mapped\">clear_buffer_mapped</a>(<a class=\"id\" href=\"#map_bh\">map_bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#page_block\">page_block</a> == <a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blocks\">blocks</a>[<a class=\"id\" href=\"#page_block\">page_block</a>] = <a class=\"id\" href=\"#map_bh\">map_bh</a>-><a class=\"id\" href=\"#b_blocknr\">b_blocknr</a>+<a class=\"id\" href=\"#relative_block\">relative_block</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_block\">page_block</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_in_file\">block_in_file</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdev\">bdev</a> = <a class=\"id\" href=\"#map_bh\">map_bh</a>-><a class=\"id\" href=\"#b_bdev\">b_bdev</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#first_hole\">first_hole</a> != <a class=\"id\" href=\"#blocks_per_page\">blocks_per_page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zero_user_segment\">zero_user_segment</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#first_hole\">first_hole</a> << <a class=\"id\" href=\"#blkbits\">blkbits</a>, <a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#first_hole\">first_hole</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageUptodate\">SetPageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#fully_mapped\">fully_mapped</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageMappedToDisk\">SetPageMappedToDisk</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This page will go to BIO.  Do we need to send this BIO off first?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bio\">bio</a> && (*<a class=\"id\" href=\"#last_block_in_bio\">last_block_in_bio</a> != <a class=\"id\" href=\"#blocks\">blocks</a>[0] - 1))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#mpage_bio_submit\">mpage_bio_submit</a>(<a class=\"id\" href=\"#READ\">READ</a>, <a class=\"id\" href=\"#bio\">bio</a>);", 
"", 
"<a class=\"id\" href=\"#alloc_new\">alloc_new</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bio\">bio</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#mpage_alloc\">mpage_alloc</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#blocks\">blocks</a>[0] << (<a class=\"id\" href=\"#blkbits\">blkbits</a> - 9),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <span class=\"ts\"/><a class=\"id\" href=\"#min_t\">min_t</a>(int, <a class=\"id\" href=\"#nr_pages\">nr_pages</a>, <a class=\"id\" href=\"#bio_get_nr_vecs\">bio_get_nr_vecs</a>(<a class=\"id\" href=\"#bdev\">bdev</a>)),", 
];
xr_frag_insert('l/03/8a0b6c69376acb4c144eb92778d81319e85c76.xr', __xr_tmp);
