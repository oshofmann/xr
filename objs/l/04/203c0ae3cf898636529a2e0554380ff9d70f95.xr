var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/fs/namei.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 1991, 1992  Linus Torvalds</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Some corrections by tytso.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* [Feb 1997 T. Schoebel-Theuer] Complete rewrite of the pathname</span>", 
"<span class=\"comment\"> * lookup logic.</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"comment\">/* [Feb-Apr 2000, AV] Rewrite to the new namespace architecture.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#namei\">namei</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pagemap\">pagemap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fsnotify\">fsnotify</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#personality\">personality</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#security\">security</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ima\">ima</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#syscalls\">syscalls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mount\">mount</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#audit\">audit</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#capability\">capability</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fcntl\">fcntl</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#device_cgroup\">device_cgroup</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs_struct\">fs_struct</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"internal.h\"", 
"", 
"<span class=\"comment\">/* [Feb-1997 T. Schoebel-Theuer]</span>", 
"<span class=\"comment\"> * Fundamental changes in the pathname lookup mechanisms (namei)</span>", 
"<span class=\"comment\"> * were necessary because of omirr.  The reason is that omirr needs</span>", 
"<span class=\"comment\"> * to know the _real_ pathname, not the user-supplied one, in case</span>", 
"<span class=\"comment\"> * of symlinks (and also when transname replacements occur).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The new code replaces the old recursive symlink resolution with</span>", 
"<span class=\"comment\"> * an iterative one (in case of non-nested symlink chains).  It does</span>", 
"<span class=\"comment\"> * this with calls to &lt;fs&gt;_follow_link().</span>", 
"<span class=\"comment\"> * As a side effect, dir_namei(), _namei() and follow_link() are now </span>", 
"<span class=\"comment\"> * replaced with a single function lookup_dentry() that can handle all </span>", 
"<span class=\"comment\"> * the special cases of the former code.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * With the new dcache, the pathname is stored at each inode, at least as</span>", 
"<span class=\"comment\"> * long as the refcount of the inode is positive.  As a side effect, the</span>", 
"<span class=\"comment\"> * size of the dcache depends on the inode cache and thus is dynamic.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * [29-Apr-1998 C. Scott Ananian] Updated above description of symlink</span>", 
"<span class=\"comment\"> * resolution to correspond with current state of the code.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that the symlink resolution is not *completely* iterative.</span>", 
"<span class=\"comment\"> * There is still a significant amount of tail- and mid- recursion in</span>", 
"<span class=\"comment\"> * the algorithm.  Also, note that &lt;fs&gt;_readlink() is not used in</span>", 
"<span class=\"comment\"> * lookup_dentry(): lookup_dentry() on the result of &lt;fs&gt;_readlink()</span>", 
"<span class=\"comment\"> * may return different results than &lt;fs&gt;_follow_link().  Many virtual</span>", 
"<span class=\"comment\"> * filesystems (including /proc) exhibit this behavior.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* [24-Feb-97 T. Schoebel-Theuer] Side effects caused by new implementation:</span>", 
"<span class=\"comment\"> * New symlink semantics: when open() is called with flags O_CREAT | O_EXCL</span>", 
"<span class=\"comment\"> * and the name already exists in form of a symlink, try to create the new</span>", 
"<span class=\"comment\"> * name indicated by the symlink. The old code always complained that the</span>", 
"<span class=\"comment\"> * name already exists, due to not following the symlink even if its target</span>", 
"<span class=\"comment\"> * is nonexistent.  The new semantics affects also mknod() and link() when</span>", 
"<span class=\"comment\"> * the name is a symlink pointing to a non-existant name.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * I don't know which semantics is the right one, since I have no access</span>", 
"<span class=\"comment\"> * to standards. But I found by trial that HP-UX 9.0 has the full \"new\"</span>", 
"<span class=\"comment\"> * semantics implemented, while SunOS 4.1.1 and Solaris (SunOS 5.4) have the</span>", 
"<span class=\"comment\"> * \"old\" one. Personally, I think the new semantics is much more logical.</span>", 
"<span class=\"comment\"> * Note that \"ln old new\" where \"new\" is a symlink pointing to a non-existing</span>", 
"<span class=\"comment\"> * file does succeed in both HP-UX and SunOs, but not in Solaris</span>", 
"<span class=\"comment\"> * and in the old Linux semantics.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* [16-Dec-97 Kevin Buhr] For security reasons, we change some symlink</span>", 
"<span class=\"comment\"> * semantics.  See the comments in \"open_namei\" and \"do_link\" below.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * [10-Sep-98 Alan Modra] Another symlink change.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* [Feb-Apr 2000 AV] Complete rewrite. Rules for symlinks:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>inside the path - always follow.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>in the last component in creation/removal/renaming - never follow.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>if LOOKUP_FOLLOW passed - follow.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>if the pathname has trailing slashes - follow.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>otherwise - don't follow.</span>", 
"<span class=\"comment\"> * (applied in that order).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * [Jun 2000 AV] Inconsistent behaviour of open() in case if flags==O_CREAT</span>", 
"<span class=\"comment\"> * restored for 2.4. This is the last surviving part of old 4.2BSD bug.</span>", 
"<span class=\"comment\"> * During the 2.4 we need to fix the userland stuff depending on it -</span>", 
"<span class=\"comment\"> * hopefully we will be able to get rid of that wart in 2.5. So far only</span>", 
"<span class=\"comment\"> * XEmacs seems to be relying on it...</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * [Sep 2001 AV] Single-semaphore locking scheme (kudos to David Holland)</span>", 
"<span class=\"comment\"> * implemented.  Let's see if raised priority of -&gt;s_vfs_rename_mutex gives</span>", 
"<span class=\"comment\"> * any extra contention...</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* In order to reduce some races, while at the same time doing additional</span>", 
"<span class=\"comment\"> * checking and hopefully speeding things up, we copy filenames to the</span>", 
"<span class=\"comment\"> * kernel data space before using them..</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * POSIX.1 2.4: an empty pathname is invalid (ENOENT).</span>", 
"<span class=\"comment\"> * PATH_MAX includes the nul terminator --RR.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#do_getname\">do_getname</a>(const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#filename\">filename</a>, char *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#PATH_MAX\">PATH_MAX</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#segment_eq\">segment_eq</a>(<a class=\"id\" href=\"#get_fs\">get_fs</a>(), <a class=\"id\" href=\"#KERNEL_DS\">KERNEL_DS</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((unsigned long) <a class=\"id\" href=\"#filename\">filename</a> >= <a class=\"id\" href=\"#TASK_SIZE\">TASK_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#TASK_SIZE\">TASK_SIZE</a> - (unsigned long) <a class=\"id\" href=\"#filename\">filename</a> &lt; <a class=\"id\" href=\"#PATH_MAX\">PATH_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#TASK_SIZE\">TASK_SIZE</a> - (unsigned long) <a class=\"id\" href=\"#filename\">filename</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#strncpy_from_user\">strncpy_from_user</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#filename\">filename</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> &lt; <a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENAMETOOLONG\">ENAMETOOLONG</a>;", 
"<span class=\"ts\"/>} else if (!<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"char * <a class=\"id\" href=\"#getname\">getname</a>(const char <a class=\"id\" href=\"#__user\">__user</a> * <a class=\"id\" href=\"#filename\">filename</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#tmp\">tmp</a>, *<a class=\"id\" href=\"#result\">result</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#__getname\">__getname</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a>)  {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#do_getname\">do_getname</a>(<a class=\"id\" href=\"#filename\">filename</a>, <a class=\"id\" href=\"#tmp\">tmp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__putname\">__putname</a>(<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#retval\">retval</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#audit_getname\">audit_getname</a>(<a class=\"id\" href=\"#result\">result</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_AUDITSYSCALL\">CONFIG_AUDITSYSCALL</a>", 
"void <a class=\"id\" href=\"#putname\">putname</a>(const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#audit_dummy_context\">audit_dummy_context</a>()))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_putname\">audit_putname</a>(<a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__putname\">__putname</a>(<a class=\"id\" href=\"#name\">name</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#putname\">putname</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This does basic POSIX ACL permission checking</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#acl_permission_check\">acl_permission_check</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, int <a class=\"id\" href=\"#mask\">mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#check_acl\">check_acl</a>)(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, int <a class=\"id\" href=\"#mask\">mask</a>))", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#umode_t\">umode_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> &= <a class=\"id\" href=\"#MAY_READ\">MAY_READ</a> | <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a> | <a class=\"id\" href=\"#MAY_EXEC\">MAY_EXEC</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#current_fsuid\">current_fsuid</a>() == <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_uid\">i_uid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a> >>= 6;", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_POSIXACL\">IS_POSIXACL</a>(<a class=\"id\" href=\"#inode\">inode</a>) && (<a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#S_IRWXG\">S_IRWXG</a>) && <a class=\"id\" href=\"#check_acl\">check_acl</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#check_acl\">check_acl</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> != -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#in_group_p\">in_group_p</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_gid\">i_gid</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a> >>= 3;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the DACs are ok we don't need any capability check.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#mask\">mask</a> &amp; ~<a class=\"id\" href=\"#mode\">mode</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EACCES\">EACCES</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * generic_permission  -  check for access rights on a Posix-like filesystem</span>", 
"<span class=\"comment\"> * @inode:<span class=\"ts\"/>inode to check access rights for</span>", 
"<span class=\"comment\"> * @mask:<span class=\"ts\"/>right to check for (%MAY_READ, %MAY_WRITE, %MAY_EXEC)</span>", 
"<span class=\"comment\"> * @check_acl:<span class=\"ts\"/>optional callback to check for Posix ACLs</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Used to check for read/write/execute permissions on a file.</span>", 
"<span class=\"comment\"> * We use \"fsuid\" for this, letting us set arbitrary permissions</span>", 
"<span class=\"comment\"> * for filesystem access without changing the \"normal\" uids which</span>", 
"<span class=\"comment\"> * are used for other things..</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#generic_permission\">generic_permission</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, int <a class=\"id\" href=\"#mask\">mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#check_acl\">check_acl</a>)(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, int <a class=\"id\" href=\"#mask\">mask</a>))", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Do the basic POSIX ACL permission checks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#acl_permission_check\">acl_permission_check</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#check_acl\">check_acl</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> != -<a class=\"id\" href=\"#EACCES\">EACCES</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Read/write DACs are always overridable.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Executable DACs are overridable if at least one exec bit is set.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#mask\">mask</a> &amp; <a class=\"id\" href=\"#MAY_EXEC\">MAY_EXEC</a>) || <a class=\"id\" href=\"#execute_ok\">execute_ok</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_DAC_OVERRIDE\">CAP_DAC_OVERRIDE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Searching includes executable on directories, else just read.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> &= <a class=\"id\" href=\"#MAY_READ\">MAY_READ</a> | <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a> | <a class=\"id\" href=\"#MAY_EXEC\">MAY_EXEC</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mask\">mask</a> == <a class=\"id\" href=\"#MAY_READ\">MAY_READ</a> || (<a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>) && !(<a class=\"id\" href=\"#mask\">mask</a> &amp; <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_DAC_READ_SEARCH\">CAP_DAC_READ_SEARCH</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EACCES\">EACCES</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * inode_permission  -  check for access rights to a given inode</span>", 
"<span class=\"comment\"> * @inode:<span class=\"ts\"/>inode to check permission on</span>", 
"<span class=\"comment\"> * @mask:<span class=\"ts\"/>right to check for (%MAY_READ, %MAY_WRITE, %MAY_EXEC)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Used to check for read/write/execute permissions on an inode.</span>", 
"<span class=\"comment\"> * We use \"fsuid\" for this, letting us set arbitrary permissions</span>", 
"<span class=\"comment\"> * for filesystem access without changing the \"normal\" uids which</span>", 
"<span class=\"comment\"> * are used for other things.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#inode_permission\">inode_permission</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, int <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mask\">mask</a> &amp; <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#umode_t\">umode_t</a> <a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Nobody gets write access to a read-only fs.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_RDONLY\">IS_RDONLY</a>(<a class=\"id\" href=\"#inode\">inode</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#S_ISREG\">S_ISREG</a>(<a class=\"id\" href=\"#mode\">mode</a>) || <a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#mode\">mode</a>) || <a class=\"id\" href=\"#S_ISLNK\">S_ISLNK</a>(<a class=\"id\" href=\"#mode\">mode</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EROFS\">EROFS</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Nobody gets write access to an immutable file.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_IMMUTABLE\">IS_IMMUTABLE</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EACCES\">EACCES</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a>-><a class=\"id\" href=\"#permission\">permission</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a>-><a class=\"id\" href=\"#permission\">permission</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#generic_permission\">generic_permission</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a>-><a class=\"id\" href=\"#check_acl\">check_acl</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#devcgroup_inode_permission\">devcgroup_inode_permission</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#security_inode_permission\">security_inode_permission</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * file_permission  -  check for additional access rights to a given file</span>", 
"<span class=\"comment\"> * @file:<span class=\"ts\"/>file to check access rights for</span>", 
"<span class=\"comment\"> * @mask:<span class=\"ts\"/>right to check for (%MAY_READ, %MAY_WRITE, %MAY_EXEC)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Used to check for read/write/execute permissions on an already opened</span>", 
"<span class=\"comment\"> * file.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Do not use this function in new code.  All access checks should</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>be done using inode_permission().</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#file_permission\">file_permission</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, int <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#inode_permission\">inode_permission</a>(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * get_write_access() gets write permission for a file.</span>", 
"<span class=\"comment\"> * put_write_access() releases this write permission.</span>", 
"<span class=\"comment\"> * This is used for regular files.</span>", 
"<span class=\"comment\"> * We cannot support write (and maybe mmap read-write shared) accesses and</span>", 
"<span class=\"comment\"> * MAP_DENYWRITE mmappings simultaneously. The i_writecount field of an inode</span>", 
"<span class=\"comment\"> * can have the following values:</span>", 
"<span class=\"comment\"> * 0: no writers, no VM_DENYWRITE mappings</span>", 
"<span class=\"comment\"> * &lt; 0: (-i_writecount) vm_area_structs with VM_DENYWRITE set exist</span>", 
"<span class=\"comment\"> * &gt; 0: (i_writecount) users are writing to the file.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Normally we operate on that counter with atomic_{inc,dec} and it's safe</span>", 
"<span class=\"comment\"> * except for the cases where we don't hold i_writecount yet. Then we need to</span>", 
"<span class=\"comment\"> * use {get,deny}_write_access() - these functions check the sign and refuse</span>", 
"<span class=\"comment\"> * to do the change if sign is wrong. Exclusion between them is provided by</span>", 
"<span class=\"comment\"> * the inode-&gt;i_lock spinlock.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#get_write_access\">get_write_access</a>(struct <a class=\"id\" href=\"#inode\">inode</a> * <a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_lock\">i_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_writecount\">i_writecount</a>) &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_lock\">i_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ETXTBSY\">ETXTBSY</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_writecount\">i_writecount</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_lock\">i_lock</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#deny_write_access\">deny_write_access</a>(struct <a class=\"id\" href=\"#file\">file</a> * <a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_lock\">i_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_writecount\">i_writecount</a>) &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_lock\">i_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ETXTBSY\">ETXTBSY</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_writecount\">i_writecount</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_lock\">i_lock</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * path_get - get a reference to a path</span>", 
"<span class=\"comment\"> * @path: path to get the reference to</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Given a path increment the reference count to the dentry and the vfsmount.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#path_get\">path_get</a>(struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mntget\">mntget</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dget\">dget</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#path_get\">path_get</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * path_put - put a reference to a path</span>", 
"<span class=\"comment\"> * @path: path to put the reference to</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Given a path decrement the reference count to the dentry and the vfsmount.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#path_put\">path_put</a>(struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mntput\">mntput</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#path_put\">path_put</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * release_open_intent - free up open intent resources</span>", 
"<span class=\"comment\"> * @nd: pointer to nameidata</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#release_open_intent\">release_open_intent</a>(struct <a class=\"id\" href=\"#nameidata\">nameidata</a> *<a class=\"id\" href=\"#nd\">nd</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#intent\">intent</a>.<a class=\"id\" href=\"#open\">open</a>.<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_filp\">put_filp</a>(<a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#intent\">intent</a>.<a class=\"id\" href=\"#open\">open</a>.<a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fput\">fput</a>(<a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#intent\">intent</a>.<a class=\"id\" href=\"#open\">open</a>.<a class=\"id\" href=\"#file\">file</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#dentry\">dentry</a> *", 
"<a class=\"id\" href=\"#do_revalidate\">do_revalidate</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, struct <a class=\"id\" href=\"#nameidata\">nameidata</a> *<a class=\"id\" href=\"#nd\">nd</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_op\">d_op</a>-><a class=\"id\" href=\"#d_revalidate\">d_revalidate</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#nd\">nd</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#status\">status</a> <= 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The dentry failed validation.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If d_revalidate returned 0 attempt to invalidate</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the dentry otherwise d_revalidate is asking us</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to return a fail status.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#status\">status</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#d_invalidate\">d_invalidate</a>(<a class=\"id\" href=\"#dentry\">dentry</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dentry\">dentry</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * force_reval_path - force revalidation of a dentry</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In some situations the path walking code will trust dentries without</span>", 
"<span class=\"comment\"> * revalidating them. This causes problems for filesystems that depend on</span>", 
"<span class=\"comment\"> * d_revalidate to handle file opens (e.g. NFSv4). When FS_REVAL_DOT is set</span>", 
"<span class=\"comment\"> * (which indicates that it's possible for the dentry to go stale), force</span>", 
"<span class=\"comment\"> * a d_revalidate call before proceeding.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if the revalidation was successful. If the revalidation fails,</span>", 
"<span class=\"comment\"> * either return the error returned by d_revalidate or -ESTALE if the</span>", 
"<span class=\"comment\"> * revalidation it just returned 0. If d_revalidate returns 0, we attempt to</span>", 
"<span class=\"comment\"> * invalidate the dentry. It's up to the caller to handle putting references</span>", 
"<span class=\"comment\"> * to the path if necessary.</span>", 
"<span class=\"comment\"> */</span>", 
"static int", 
"<a class=\"id\" href=\"#force_reval_path\">force_reval_path</a>(struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>, struct <a class=\"id\" href=\"#nameidata\">nameidata</a> *<a class=\"id\" href=\"#nd\">nd</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * only check on filesystems where it's possible for the dentry to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * become stale. It's assumed that if this flag is set then the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * d_revalidate op will also be defined.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_sb\">d_sb</a>-><a class=\"id\" href=\"#s_type\">s_type</a>-><a class=\"id\" href=\"#fs_flags\">fs_flags</a> &amp; <a class=\"id\" href=\"#FS_REVAL_DOT\">FS_REVAL_DOT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_op\">d_op</a>-><a class=\"id\" href=\"#d_revalidate\">d_revalidate</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#nd\">nd</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#status\">status</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d_invalidate\">d_invalidate</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = -<a class=\"id\" href=\"#ESTALE\">ESTALE</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#status\">status</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Short-cut version of permission(), for calling on directories</span>", 
"<span class=\"comment\"> * during pathname resolution.  Combines parts of permission()</span>", 
"<span class=\"comment\"> * and generic_permission(), and tests ONLY for MAY_EXEC permission.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If appropriate, check DAC only.  If not appropriate, or</span>", 
"<span class=\"comment\"> * short-cut DAC fails, then call -&gt;permission() to do more</span>", 
"<span class=\"comment\"> * complete permission check.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#exec_permission\">exec_permission</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a>-><a class=\"id\" href=\"#permission\">permission</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a>-><a class=\"id\" href=\"#permission\">permission</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#MAY_EXEC\">MAY_EXEC</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#ok\">ok</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#acl_permission_check\">acl_permission_check</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#MAY_EXEC\">MAY_EXEC</a>, <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a>-><a class=\"id\" href=\"#check_acl\">check_acl</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#ok\">ok</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_DAC_OVERRIDE\">CAP_DAC_OVERRIDE</a>) || <a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_DAC_READ_SEARCH\">CAP_DAC_READ_SEARCH</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#ok\">ok</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<a class=\"id\" href=\"#ok\">ok</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#security_inode_permission\">security_inode_permission</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#MAY_EXEC\">MAY_EXEC</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#__always_inline\">__always_inline</a> void <a class=\"id\" href=\"#set_root\">set_root</a>(struct <a class=\"id\" href=\"#nameidata\">nameidata</a> *<a class=\"id\" href=\"#nd\">nd</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#root\">root</a>.<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_fs_root\">get_fs_root</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#fs\">fs</a>, &amp;<a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#root\">root</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#link_path_walk\">link_path_walk</a>(const char *, struct <a class=\"id\" href=\"#nameidata\">nameidata</a> *);", 
"", 
"static <a class=\"id\" href=\"#__always_inline\">__always_inline</a> int <a class=\"id\" href=\"#__vfs_follow_link\">__vfs_follow_link</a>(struct <a class=\"id\" href=\"#nameidata\">nameidata</a> *<a class=\"id\" href=\"#nd\">nd</a>, const char *<a class=\"id\" href=\"#link\">link</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#link\">link</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#link\">link</a> == '/') {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_root\">set_root</a>(<a class=\"id\" href=\"#nd\">nd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#path_put\">path_put</a>(&amp;<a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#path\">path</a> = <a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#root\">root</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#path_get\">path_get</a>(&amp;<a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#root\">root</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#link_path_walk\">link_path_walk</a>(<a class=\"id\" href=\"#link\">link</a>, <a class=\"id\" href=\"#nd\">nd</a>);", 
"<a class=\"id\" href=\"#fail\">fail</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path_put\">path_put</a>(&amp;<a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#link\">link</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#path_put_conditional\">path_put_conditional</a>(struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>, struct <a class=\"id\" href=\"#nameidata\">nameidata</a> *<a class=\"id\" href=\"#nd\">nd</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a> != <a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mntput\">mntput</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#path_to_nameidata\">path_to_nameidata</a>(struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>, struct <a class=\"id\" href=\"#nameidata\">nameidata</a> *<a class=\"id\" href=\"#nd\">nd</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(<a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#mnt\">mnt</a> != <a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mntput\">mntput</a>(<a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#__always_inline\">__always_inline</a> int", 
"<a class=\"id\" href=\"#__do_follow_link\">__do_follow_link</a>(struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>, struct <a class=\"id\" href=\"#nameidata\">nameidata</a> *<a class=\"id\" href=\"#nd\">nd</a>, void **<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#touch_atime\">touch_atime</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a>, <a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nd_set_link\">nd_set_link</a>(<a class=\"id\" href=\"#nd\">nd</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a> != <a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#path_to_nameidata\">path_to_nameidata</a>(<a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#nd\">nd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dget\">dget</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mntget\">mntget</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#last_type\">last_type</a> = <a class=\"id\" href=\"#LAST_BIND\">LAST_BIND</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a>-><a class=\"id\" href=\"#follow_link\">follow_link</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#nd\">nd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(*<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(*<a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#nd_get_link\">nd_get_link</a>(<a class=\"id\" href=\"#nd\">nd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#s\">s</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#__vfs_follow_link\">__vfs_follow_link</a>(<a class=\"id\" href=\"#nd\">nd</a>, <a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#last_type\">last_type</a> == <a class=\"id\" href=\"#LAST_BIND\">LAST_BIND</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#force_reval_path\">force_reval_path</a>(&amp;<a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#nd\">nd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#path_put\">path_put</a>(&amp;<a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This limits recursive symlink follows to 8, while</span>", 
"<span class=\"comment\"> * limiting consecutive symlinks to 40.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Without that kind of total limit, nasty chains of consecutive</span>", 
"<span class=\"comment\"> * symlinks can cause almost arbitrarily long lookups. </span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#do_follow_link\">do_follow_link</a>(struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>, struct <a class=\"id\" href=\"#nameidata\">nameidata</a> *<a class=\"id\" href=\"#nd\">nd</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#cookie\">cookie</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ELOOP\">ELOOP</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#link_count\">link_count</a> >= <a class=\"id\" href=\"#MAX_NESTED_LINKS\">MAX_NESTED_LINKS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#loop\">loop</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#total_link_count\">total_link_count</a> >= 40)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#loop\">loop</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#depth\">depth</a> >= <a class=\"id\" href=\"#MAX_NESTED_LINKS\">MAX_NESTED_LINKS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#security_inode_follow_link\">security_inode_follow_link</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#nd\">nd</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#loop\">loop</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#link_count\">link_count</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#total_link_count\">total_link_count</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#depth\">depth</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#__do_follow_link\">__do_follow_link</a>(<a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#nd\">nd</a>, &amp;<a class=\"id\" href=\"#cookie\">cookie</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#cookie\">cookie</a>) && <a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a>-><a class=\"id\" href=\"#put_link\">put_link</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a>-><a class=\"id\" href=\"#put_link\">put_link</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#nd\">nd</a>, <a class=\"id\" href=\"#cookie\">cookie</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path_put\">path_put</a>(<a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#link_count\">link_count</a>--;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#depth\">depth</a>--;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<a class=\"id\" href=\"#loop\">loop</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path_put_conditional\">path_put_conditional</a>(<a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#nd\">nd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path_put\">path_put</a>(&amp;<a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#follow_up\">follow_up</a>(struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#mountpoint\">mountpoint</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#br_read_lock\">br_read_lock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_parent\">mnt_parent</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#parent\">parent</a> == <a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#br_read_unlock\">br_read_unlock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mntget\">mntget</a>(<a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mountpoint\">mountpoint</a> = <a class=\"id\" href=\"#dget\">dget</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_mountpoint\">mnt_mountpoint</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#br_read_unlock\">br_read_unlock</a>(<a class=\"id\" href=\"#vfsmount_lock\">vfsmount_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#mountpoint\">mountpoint</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mntput\">mntput</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/* no need for dcache_lock, as serialization is taken care in</span>", 
"<span class=\"comment\"> * namespace.c</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__follow_mount\">__follow_mount</a>(struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a> = 0;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#d_mountpoint\">d_mountpoint</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mounted\">mounted</a> = <a class=\"id\" href=\"#lookup_mnt\">lookup_mnt</a>(<a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#mounted\">mounted</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mntput\">mntput</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#mounted\">mounted</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#dget\">dget</a>(<a class=\"id\" href=\"#mounted\">mounted</a>-><a class=\"id\" href=\"#mnt_root\">mnt_root</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#follow_mount\">follow_mount</a>(struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>)", 
"{", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#d_mountpoint\">d_mountpoint</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mounted\">mounted</a> = <a class=\"id\" href=\"#lookup_mnt\">lookup_mnt</a>(<a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#mounted\">mounted</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mntput\">mntput</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#mounted\">mounted</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#dget\">dget</a>(<a class=\"id\" href=\"#mounted\">mounted</a>-><a class=\"id\" href=\"#mnt_root\">mnt_root</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* no need for dcache_lock, as serialization is taken care in</span>", 
"<span class=\"comment\"> * namespace.c</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#follow_down\">follow_down</a>(struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mounted\">mounted</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mounted\">mounted</a> = <a class=\"id\" href=\"#lookup_mnt\">lookup_mnt</a>(<a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mounted\">mounted</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mntput\">mntput</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#mounted\">mounted</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#dget\">dget</a>(<a class=\"id\" href=\"#mounted\">mounted</a>-><a class=\"id\" href=\"#mnt_root\">mnt_root</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#__always_inline\">__always_inline</a> void <a class=\"id\" href=\"#follow_dotdot\">follow_dotdot</a>(struct <a class=\"id\" href=\"#nameidata\">nameidata</a> *<a class=\"id\" href=\"#nd\">nd</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_root\">set_root</a>(<a class=\"id\" href=\"#nd\">nd</a>);", 
"", 
"<span class=\"ts\"/>while(1) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a> == <a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#root\">root</a>.<a class=\"id\" href=\"#dentry\">dentry</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#mnt\">mnt</a> == <a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#root\">root</a>.<a class=\"id\" href=\"#mnt\">mnt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a> != <a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_root\">mnt_root</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* rare case of legitimate dget_parent()... */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#dget_parent\">dget_parent</a>(<a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(<a class=\"id\" href=\"#old\">old</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#follow_up\">follow_up</a>(&amp;<a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#path\">path</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#follow_mount\">follow_mount</a>(&amp;<a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#path\">path</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Allocate a dentry with name and parent, and perform a parent</span>", 
"<span class=\"comment\"> * directory -&gt;lookup on it. Returns the new dentry, or ERR_PTR</span>", 
"<span class=\"comment\"> * on error. parent-&gt;d_inode-&gt;i_mutex must be held. d_lookup must</span>", 
"<span class=\"comment\"> * have verified that no child exists while under i_mutex.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#d_alloc_and_lookup\">d_alloc_and_lookup</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#parent\">parent</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#qstr\">qstr</a> *<a class=\"id\" href=\"#name\">name</a>, struct <a class=\"id\" href=\"#nameidata\">nameidata</a> *<a class=\"id\" href=\"#nd\">nd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#old\">old</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't create child dentry for a dead directory. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#IS_DEADDIR\">IS_DEADDIR</a>(<a class=\"id\" href=\"#inode\">inode</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOENT\">ENOENT</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#d_alloc\">d_alloc</a>(<a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#dentry\">dentry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a>-><a class=\"id\" href=\"#lookup\">lookup</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#nd\">nd</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#old\">old</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#old\">old</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dentry\">dentry</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  It's more convoluted than I'd like it to be, but... it's still fairly</span>", 
"<span class=\"comment\"> *  small and for now I'd prefer to have fast path as straight as possible.</span>", 
"<span class=\"comment\"> *  It _is_ time-critical.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#do_lookup\">do_lookup</a>(struct <a class=\"id\" href=\"#nameidata\">nameidata</a> *<a class=\"id\" href=\"#nd\">nd</a>, struct <a class=\"id\" href=\"#qstr\">qstr</a> *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, *<a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * See if the low-level filesystem might want</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to use its own hash..</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_op\">d_op</a> && <a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_op\">d_op</a>-><a class=\"id\" href=\"#d_hash\">d_hash</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_op\">d_op</a>-><a class=\"id\" href=\"#d_hash\">d_hash</a>(<a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Rename seqlock is not required here because in the off chance</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of a false negative due to a concurrent rename, we're going to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * do the non-racy lookup, below.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#__d_lookup\">__d_lookup</a>(<a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#need_lookup\">need_lookup</a>;", 
"<a class=\"id\" href=\"#found\">found</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_op\">d_op</a> && <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_op\">d_op</a>-><a class=\"id\" href=\"#d_revalidate\">d_revalidate</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#need_revalidate\">need_revalidate</a>;", 
"<a class=\"id\" href=\"#done\">done</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#mnt\">mnt</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#dentry\">dentry</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__follow_mount\">__follow_mount</a>(<a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#need_lookup\">need_lookup</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dir\">dir</a> = <a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * First re-do the cached lookup just in case it was created</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * while we waited for the directory semaphore, or the first</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * lookup failed due to an unrelated rename.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This could use version numbering or similar to avoid unnecessary</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cache lookups, but then we'd have to do the first lookup in the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * non-racy way. However in the common case here, everything should</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be hot in cache, so would it be a big win?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#d_lookup\">d_lookup</a>(<a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#dentry\">dentry</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#d_alloc_and_lookup\">d_alloc_and_lookup</a>(<a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#nd\">nd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#dentry\">dentry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Uhhuh! Nasty case: the cache was re-populated while</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we waited on the semaphore. Need to revalidate.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#found\">found</a>;", 
"", 
"<a class=\"id\" href=\"#need_revalidate\">need_revalidate</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#do_revalidate\">do_revalidate</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#nd\">nd</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#need_lookup\">need_lookup</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#dentry\">dentry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"", 
"<a class=\"id\" href=\"#fail\">fail</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is a temporary kludge to deal with \"automount\" symlinks; proper</span>", 
"<span class=\"comment\"> * solution is to trigger them on follow_mount(), so that do_lookup()</span>", 
"<span class=\"comment\"> * would DTRT.  To be killed before 2.6.34-final.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#follow_on_final\">follow_on_final</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, unsigned <a class=\"id\" href=\"#lookup_flags\">lookup_flags</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#inode\">inode</a> && <a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a>-><a class=\"id\" href=\"#follow_link\">follow_link</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#lookup_flags\">lookup_flags</a> &amp; <a class=\"id\" href=\"#LOOKUP_FOLLOW\">LOOKUP_FOLLOW</a>) || <a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>));", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Name resolution.</span>", 
"<span class=\"comment\"> * This is the basic name resolution function, turning a pathname into</span>", 
"<span class=\"comment\"> * the final dentry. We expect 'base' to be positive and a directory.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 and nd will have valid dentry and mnt on success.</span>", 
"<span class=\"comment\"> * Returns error and drops reference to input namei data on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#link_path_walk\">link_path_walk</a>(const char *<a class=\"id\" href=\"#name\">name</a>, struct <a class=\"id\" href=\"#nameidata\">nameidata</a> *<a class=\"id\" href=\"#nd\">nd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#path\">path</a> <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#lookup_flags\">lookup_flags</a> = <a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#name\">name</a>=='/')", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#name\">name</a>++;", 
"<span class=\"ts\"/>if (!*<a class=\"id\" href=\"#name\">name</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#return_reval\">return_reval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#depth\">depth</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lookup_flags\">lookup_flags</a> = <a class=\"id\" href=\"#LOOKUP_FOLLOW\">LOOKUP_FOLLOW</a> | (<a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#LOOKUP_CONTINUE\">LOOKUP_CONTINUE</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* At this point we know we have a real path component. */</span>", 
"<span class=\"ts\"/>for(;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#hash\">hash</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#qstr\">qstr</a> <a class=\"id\" href=\"#this\">this</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#c\">c</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#LOOKUP_CONTINUE\">LOOKUP_CONTINUE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#exec_permission\">exec_permission</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
" <span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = *(const unsigned char *)<a class=\"id\" href=\"#name\">name</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#init_name_hash\">init_name_hash</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#name\">name</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#partial_name_hash\">partial_name_hash</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#hash\">hash</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = *(const unsigned char *)<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} while (<a class=\"id\" href=\"#c\">c</a> && (<a class=\"id\" href=\"#c\">c</a> != '/'));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#name\">name</a> - (const char *) <a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#end_name_hash\">end_name_hash</a>(<a class=\"id\" href=\"#hash\">hash</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* remove trailing slashes? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#c\">c</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#last_component\">last_component</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (*++<a class=\"id\" href=\"#name\">name</a> == '/');", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!*<a class=\"id\" href=\"#name\">name</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#last_with_slashes\">last_with_slashes</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * \".\" and \"..\" are special - \"..\" especially so because it has</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to be able to know about the current root directory and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * parent relationships.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#name\">name</a>[0] == '.') switch (<a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case 2:<span class=\"ts\"/>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#name\">name</a>[1] != '.')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#follow_dotdot\">follow_dotdot</a>(<a class=\"id\" href=\"#nd\">nd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fallthrough */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case 1:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This does the actual lookups.. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#do_lookup\">do_lookup</a>(<a class=\"id\" href=\"#nd\">nd</a>, &amp;<a class=\"id\" href=\"#this\">this</a>, &amp;<a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#next\">next</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#inode\">inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_dput\">out_dput</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a>-><a class=\"id\" href=\"#follow_link\">follow_link</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#do_follow_link\">do_follow_link</a>(&amp;<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#nd\">nd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#return_err\">return_err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#inode\">inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#path_to_nameidata\">path_to_nameidata</a>(&amp;<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#nd\">nd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOTDIR\">ENOTDIR</a>; ", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a>-><a class=\"id\" href=\"#lookup\">lookup</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* here ends the main loop */</span>", 
"", 
"<a class=\"id\" href=\"#last_with_slashes\">last_with_slashes</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lookup_flags\">lookup_flags</a> |= <a class=\"id\" href=\"#LOOKUP_FOLLOW\">LOOKUP_FOLLOW</a> | <a class=\"id\" href=\"#LOOKUP_DIRECTORY\">LOOKUP_DIRECTORY</a>;", 
"<a class=\"id\" href=\"#last_component\">last_component</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Clear LOOKUP_CONTINUE iff it was previously unset */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#flags\">flags</a> &= <a class=\"id\" href=\"#lookup_flags\">lookup_flags</a> | ~<a class=\"id\" href=\"#LOOKUP_CONTINUE\">LOOKUP_CONTINUE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#lookup_flags\">lookup_flags</a> &amp; <a class=\"id\" href=\"#LOOKUP_PARENT\">LOOKUP_PARENT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#lookup_parent\">lookup_parent</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#name\">name</a>[0] == '.') switch (<a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case 2:<span class=\"ts\"/>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#name\">name</a>[1] != '.')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#follow_dotdot\">follow_dotdot</a>(<a class=\"id\" href=\"#nd\">nd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fallthrough */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case 1:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#return_reval\">return_reval</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#do_lookup\">do_lookup</a>(<a class=\"id\" href=\"#nd\">nd</a>, &amp;<a class=\"id\" href=\"#this\">this</a>, &amp;<a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#next\">next</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#follow_on_final\">follow_on_final</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#lookup_flags\">lookup_flags</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#do_follow_link\">do_follow_link</a>(&amp;<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#nd\">nd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#return_err\">return_err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#path_to_nameidata\">path_to_nameidata</a>(&amp;<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#nd\">nd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#inode\">inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#lookup_flags\">lookup_flags</a> &amp; <a class=\"id\" href=\"#LOOKUP_DIRECTORY\">LOOKUP_DIRECTORY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOTDIR\">ENOTDIR</a>; ", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a>-><a class=\"id\" href=\"#lookup\">lookup</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#return_base\">return_base</a>;", 
"<a class=\"id\" href=\"#lookup_parent\">lookup_parent</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#last\">last</a> = <a class=\"id\" href=\"#this\">this</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#last_type\">last_type</a> = <a class=\"id\" href=\"#LAST_NORM\">LAST_NORM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#name\">name</a>[0] != '.')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#return_base\">return_base</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#len\">len</a> == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#last_type\">last_type</a> = <a class=\"id\" href=\"#LAST_DOT\">LAST_DOT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#len\">len</a> == 2 && <a class=\"id\" href=\"#this\">this</a>.<a class=\"id\" href=\"#name\">name</a>[1] == '.')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#last_type\">last_type</a> = <a class=\"id\" href=\"#LAST_DOTDOT\">LAST_DOTDOT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#return_base\">return_base</a>;", 
"<a class=\"id\" href=\"#return_reval\">return_reval</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We bypassed the ordinary revalidation routines.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We may need to check the cached dentry for staleness.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a> && <a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_sb\">d_sb</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_sb\">d_sb</a>-><a class=\"id\" href=\"#s_type\">s_type</a>-><a class=\"id\" href=\"#fs_flags\">fs_flags</a> &amp; <a class=\"id\" href=\"#FS_REVAL_DOT\">FS_REVAL_DOT</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ESTALE\">ESTALE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Note: we do not d_invalidate() */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_op\">d_op</a>-><a class=\"id\" href=\"#d_revalidate\">d_revalidate</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#nd\">nd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#return_base\">return_base</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<a class=\"id\" href=\"#out_dput\">out_dput</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#path_put_conditional\">path_put_conditional</a>(&amp;<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#nd\">nd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path_put\">path_put</a>(&amp;<a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#path\">path</a>);", 
"<a class=\"id\" href=\"#return_err\">return_err</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#path_walk\">path_walk</a>(const char *<a class=\"id\" href=\"#name\">name</a>, struct <a class=\"id\" href=\"#nameidata\">nameidata</a> *<a class=\"id\" href=\"#nd\">nd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#path\">path</a> <a class=\"id\" href=\"#save\">save</a> = <a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#path\">path</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#total_link_count\">total_link_count</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* make sure the stuff we saved doesn't go away */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path_get\">path_get</a>(&amp;<a class=\"id\" href=\"#save\">save</a>);", 
];
xr_frag_insert('l/04/203c0ae3cf898636529a2e0554380ff9d70f95.xr', __xr_tmp);
