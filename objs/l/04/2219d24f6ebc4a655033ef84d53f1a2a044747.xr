var __xr_tmp = [
"<span class=\"ts\"/><a class=\"id\" href=\"#ticks\">ticks</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#FM_MAXTICKS\">FM_MAXTICKS</a>, <a class=\"id\" href=\"#ticks\">ticks</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#ticks\">ticks</a>-- &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fmp\">fmp</a>-><a class=\"id\" href=\"#val\">val</a> = (<a class=\"id\" href=\"#FM_COEF\">FM_COEF</a> * <a class=\"id\" href=\"#fmp\">fmp</a>-><a class=\"id\" href=\"#val\">val</a>) / <a class=\"id\" href=\"#FM_SCALE\">FM_SCALE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fmp\">fmp</a>-><a class=\"id\" href=\"#time\">time</a> = <a class=\"id\" href=\"#now\">now</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fmp\">fmp</a>-><a class=\"id\" href=\"#val\">val</a> += ((<a class=\"id\" href=\"#FM_SCALE\">FM_SCALE</a> - <a class=\"id\" href=\"#FM_COEF\">FM_COEF</a>) * <a class=\"id\" href=\"#fmp\">fmp</a>-><a class=\"id\" href=\"#cnt\">cnt</a>) / <a class=\"id\" href=\"#FM_SCALE\">FM_SCALE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fmp\">fmp</a>-><a class=\"id\" href=\"#cnt\">cnt</a> = 0;", 
"}", 
"", 
"<span class=\"comment\">/* Process any previous ticks, then bump cnt by one (times scale). */</span>", 
"static void <a class=\"id\" href=\"#fmeter_markevent\">fmeter_markevent</a>(struct <a class=\"id\" href=\"#fmeter\">fmeter</a> *<a class=\"id\" href=\"#fmp\">fmp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#fmp\">fmp</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fmeter_update\">fmeter_update</a>(<a class=\"id\" href=\"#fmp\">fmp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fmp\">fmp</a>-><a class=\"id\" href=\"#cnt\">cnt</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#FM_MAXCNT\">FM_MAXCNT</a>, <a class=\"id\" href=\"#fmp\">fmp</a>-><a class=\"id\" href=\"#cnt\">cnt</a> + <a class=\"id\" href=\"#FM_SCALE\">FM_SCALE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#fmp\">fmp</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Process any previous ticks, then return current value. */</span>", 
"static int <a class=\"id\" href=\"#fmeter_getrate\">fmeter_getrate</a>(struct <a class=\"id\" href=\"#fmeter\">fmeter</a> *<a class=\"id\" href=\"#fmp\">fmp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#val\">val</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#fmp\">fmp</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fmeter_update\">fmeter_update</a>(<a class=\"id\" href=\"#fmp\">fmp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#fmp\">fmp</a>-><a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#fmp\">fmp</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#val\">val</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Protected by cgroup_lock */</span>", 
"static <a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> <a class=\"id\" href=\"#cpus_attach\">cpus_attach</a>;", 
"", 
"<span class=\"comment\">/* Called by cgroups to determine if a cpuset is usable; cgroup_mutex held */</span>", 
"static int <a class=\"id\" href=\"#cpuset_can_attach\">cpuset_can_attach</a>(struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>, struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cont\">cont</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#threadgroup\">threadgroup</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuset\">cpuset</a> *<a class=\"id\" href=\"#cs\">cs</a> = <a class=\"id\" href=\"#cgroup_cs\">cgroup_cs</a>(<a class=\"id\" href=\"#cont\">cont</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_empty\">cpumask_empty</a>(<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cpus_allowed\">cpus_allowed</a>) || <a class=\"id\" href=\"#nodes_empty\">nodes_empty</a>(<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#mems_allowed\">mems_allowed</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Kthreads bound to specific cpus cannot be moved to a new cpuset; we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cannot change their cpu affinity and isolating such threads by their</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * set of allowed nodes is unnecessary.  Thus, cpusets are not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * applicable for such threads.  This prevents checking for success of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * set_cpus_allowed_ptr() on all attached tasks before cpus_allowed may</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be changed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PF_THREAD_BOUND\">PF_THREAD_BOUND</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#security_task_setscheduler\">security_task_setscheduler</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, 0, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#threadgroup\">threadgroup</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#c\">c</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#c\">c</a>, &amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread_group\">thread_group</a>, <a class=\"id\" href=\"#thread_group\">thread_group</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#security_task_setscheduler\">security_task_setscheduler</a>(<a class=\"id\" href=\"#c\">c</a>, 0, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#cpuset_attach_task\">cpuset_attach_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#to\">to</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#cpuset\">cpuset</a> *<a class=\"id\" href=\"#cs\">cs</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * can_attach beforehand should guarantee that this doesn't fail.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * TODO: have a better way to handle failure here</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#set_cpus_allowed_ptr\">set_cpus_allowed_ptr</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#cpus_attach\">cpus_attach</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuset_change_task_nodemask\">cpuset_change_task_nodemask</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#to\">to</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuset_update_task_spread_flag\">cpuset_update_task_spread_flag</a>(<a class=\"id\" href=\"#cs\">cs</a>, <a class=\"id\" href=\"#tsk\">tsk</a>);", 
"", 
"}", 
"", 
"static void <a class=\"id\" href=\"#cpuset_attach\">cpuset_attach</a>(struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>, struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cont\">cont</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#oldcont\">oldcont</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#threadgroup\">threadgroup</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuset\">cpuset</a> *<a class=\"id\" href=\"#cs\">cs</a> = <a class=\"id\" href=\"#cgroup_cs\">cgroup_cs</a>(<a class=\"id\" href=\"#cont\">cont</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuset\">cpuset</a> *<a class=\"id\" href=\"#oldcs\">oldcs</a> = <a class=\"id\" href=\"#cgroup_cs\">cgroup_cs</a>(<a class=\"id\" href=\"#oldcont\">oldcont</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NODEMASK_ALLOC\">NODEMASK_ALLOC</a>(<a class=\"id\" href=\"#nodemask_t\">nodemask_t</a>, <a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NODEMASK_ALLOC\">NODEMASK_ALLOC</a>(<a class=\"id\" href=\"#nodemask_t\">nodemask_t</a>, <a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#from\">from</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || <a class=\"id\" href=\"#to\">to</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#alloc_fail\">alloc_fail</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cs\">cs</a> == &amp;<a class=\"id\" href=\"#top_cpuset\">top_cpuset</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_copy\">cpumask_copy</a>(<a class=\"id\" href=\"#cpus_attach\">cpus_attach</a>, <a class=\"id\" href=\"#cpu_possible_mask\">cpu_possible_mask</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#guarantee_online_cpus\">guarantee_online_cpus</a>(<a class=\"id\" href=\"#cs\">cs</a>, <a class=\"id\" href=\"#cpus_attach\">cpus_attach</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#guarantee_online_mems\">guarantee_online_mems</a>(<a class=\"id\" href=\"#cs\">cs</a>, <a class=\"id\" href=\"#to\">to</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* do per-task migration stuff possibly for each in the threadgroup */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuset_attach_task\">cpuset_attach_task</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#cs\">cs</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#threadgroup\">threadgroup</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#c\">c</a>, &amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread_group\">thread_group</a>, <a class=\"id\" href=\"#thread_group\">thread_group</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpuset_attach_task\">cpuset_attach_task</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#cs\">cs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* change mm; only needs to be done once even if threadgroup */</span>", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#from\">from</a> = <a class=\"id\" href=\"#oldcs\">oldcs</a>-><a class=\"id\" href=\"#mems_allowed\">mems_allowed</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#to\">to</a> = <a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#mems_allowed\">mems_allowed</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#get_task_mm\">get_task_mm</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mm\">mm</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mpol_rebind_mm\">mpol_rebind_mm</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#to\">to</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_memory_migrate\">is_memory_migrate</a>(<a class=\"id\" href=\"#cs\">cs</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpuset_migrate_mm\">cpuset_migrate_mm</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#to\">to</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mmput\">mmput</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#alloc_fail\">alloc_fail</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NODEMASK_FREE\">NODEMASK_FREE</a>(<a class=\"id\" href=\"#from\">from</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NODEMASK_FREE\">NODEMASK_FREE</a>(<a class=\"id\" href=\"#to\">to</a>);", 
"}", 
"", 
"<span class=\"comment\">/* The various types of files and directories in a cpuset file system */</span>", 
"", 
"typedef enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FILE_MEMORY_MIGRATE\">FILE_MEMORY_MIGRATE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FILE_CPULIST\">FILE_CPULIST</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FILE_MEMLIST\">FILE_MEMLIST</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FILE_CPU_EXCLUSIVE\">FILE_CPU_EXCLUSIVE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FILE_MEM_EXCLUSIVE\">FILE_MEM_EXCLUSIVE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FILE_MEM_HARDWALL\">FILE_MEM_HARDWALL</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FILE_SCHED_LOAD_BALANCE\">FILE_SCHED_LOAD_BALANCE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FILE_SCHED_RELAX_DOMAIN_LEVEL\">FILE_SCHED_RELAX_DOMAIN_LEVEL</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FILE_MEMORY_PRESSURE_ENABLED\">FILE_MEMORY_PRESSURE_ENABLED</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FILE_MEMORY_PRESSURE\">FILE_MEMORY_PRESSURE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FILE_SPREAD_PAGE\">FILE_SPREAD_PAGE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FILE_SPREAD_SLAB\">FILE_SPREAD_SLAB</a>,", 
"} <a class=\"id\" href=\"#cpuset_filetype_t\">cpuset_filetype_t</a>;", 
"", 
"static int <a class=\"id\" href=\"#cpuset_write_u64\">cpuset_write_u64</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuset\">cpuset</a> *<a class=\"id\" href=\"#cs\">cs</a> = <a class=\"id\" href=\"#cgroup_cs\">cgroup_cs</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuset_filetype_t\">cpuset_filetype_t</a> <a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cgroup_lock_live_group\">cgroup_lock_live_group</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FILE_CPU_EXCLUSIVE\">FILE_CPU_EXCLUSIVE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#update_flag\">update_flag</a>(<a class=\"id\" href=\"#CS_CPU_EXCLUSIVE\">CS_CPU_EXCLUSIVE</a>, <a class=\"id\" href=\"#cs\">cs</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FILE_MEM_EXCLUSIVE\">FILE_MEM_EXCLUSIVE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#update_flag\">update_flag</a>(<a class=\"id\" href=\"#CS_MEM_EXCLUSIVE\">CS_MEM_EXCLUSIVE</a>, <a class=\"id\" href=\"#cs\">cs</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FILE_MEM_HARDWALL\">FILE_MEM_HARDWALL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#update_flag\">update_flag</a>(<a class=\"id\" href=\"#CS_MEM_HARDWALL\">CS_MEM_HARDWALL</a>, <a class=\"id\" href=\"#cs\">cs</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FILE_SCHED_LOAD_BALANCE\">FILE_SCHED_LOAD_BALANCE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#update_flag\">update_flag</a>(<a class=\"id\" href=\"#CS_SCHED_LOAD_BALANCE\">CS_SCHED_LOAD_BALANCE</a>, <a class=\"id\" href=\"#cs\">cs</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FILE_MEMORY_MIGRATE\">FILE_MEMORY_MIGRATE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#update_flag\">update_flag</a>(<a class=\"id\" href=\"#CS_MEMORY_MIGRATE\">CS_MEMORY_MIGRATE</a>, <a class=\"id\" href=\"#cs\">cs</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FILE_MEMORY_PRESSURE_ENABLED\">FILE_MEMORY_PRESSURE_ENABLED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpuset_memory_pressure_enabled\">cpuset_memory_pressure_enabled</a> = !!<a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FILE_MEMORY_PRESSURE\">FILE_MEMORY_PRESSURE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#EACCES\">EACCES</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FILE_SPREAD_PAGE\">FILE_SPREAD_PAGE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#update_flag\">update_flag</a>(<a class=\"id\" href=\"#CS_SPREAD_PAGE\">CS_SPREAD_PAGE</a>, <a class=\"id\" href=\"#cs\">cs</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FILE_SPREAD_SLAB\">FILE_SPREAD_SLAB</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#update_flag\">update_flag</a>(<a class=\"id\" href=\"#CS_SPREAD_SLAB\">CS_SPREAD_SLAB</a>, <a class=\"id\" href=\"#cs\">cs</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_unlock\">cgroup_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#cpuset_write_s64\">cpuset_write_s64</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>, <a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuset\">cpuset</a> *<a class=\"id\" href=\"#cs\">cs</a> = <a class=\"id\" href=\"#cgroup_cs\">cgroup_cs</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuset_filetype_t\">cpuset_filetype_t</a> <a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cgroup_lock_live_group\">cgroup_lock_live_group</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FILE_SCHED_RELAX_DOMAIN_LEVEL\">FILE_SCHED_RELAX_DOMAIN_LEVEL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#update_relax_domain_level\">update_relax_domain_level</a>(<a class=\"id\" href=\"#cs\">cs</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_unlock\">cgroup_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Common handling for a write to a \"cpus\" or \"mems\" file.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#cpuset_write_resmask\">cpuset_write_resmask</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>, struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuset\">cpuset</a> *<a class=\"id\" href=\"#cs\">cs</a> = <a class=\"id\" href=\"#cgroup_cs\">cgroup_cs</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuset\">cpuset</a> *<a class=\"id\" href=\"#trialcs\">trialcs</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cgroup_lock_live_group\">cgroup_lock_live_group</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trialcs\">trialcs</a> = <a class=\"id\" href=\"#alloc_trial_cpuset\">alloc_trial_cpuset</a>(<a class=\"id\" href=\"#cs\">cs</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#trialcs\">trialcs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#private\">private</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FILE_CPULIST\">FILE_CPULIST</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#update_cpumask\">update_cpumask</a>(<a class=\"id\" href=\"#cs\">cs</a>, <a class=\"id\" href=\"#trialcs\">trialcs</a>, <a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FILE_MEMLIST\">FILE_MEMLIST</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#update_nodemask\">update_nodemask</a>(<a class=\"id\" href=\"#cs\">cs</a>, <a class=\"id\" href=\"#trialcs\">trialcs</a>, <a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_trial_cpuset\">free_trial_cpuset</a>(<a class=\"id\" href=\"#trialcs\">trialcs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_unlock\">cgroup_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * These ascii lists should be read in a single call, by using a user</span>", 
"<span class=\"comment\"> * buffer large enough to hold the entire map.  If read in smaller</span>", 
"<span class=\"comment\"> * chunks, there is no guarantee of atomicity.  Since the display format</span>", 
"<span class=\"comment\"> * used, list of ranges of sequential numbers, is variable length,</span>", 
"<span class=\"comment\"> * and since these maps can change value dynamically, one could read</span>", 
"<span class=\"comment\"> * gibberish by doing partial reads while a list was changing.</span>", 
"<span class=\"comment\"> * A single large read to a buffer that crosses a page boundary is</span>", 
"<span class=\"comment\"> * ok, because the result being copied to user land is not recomputed</span>", 
"<span class=\"comment\"> * across a page fault.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#cpuset_sprintf_cpulist\">cpuset_sprintf_cpulist</a>(char *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#cpuset\">cpuset</a> *<a class=\"id\" href=\"#cs\">cs</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#callback_mutex\">callback_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#cpulist_scnprintf\">cpulist_scnprintf</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, <a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cpus_allowed\">cpus_allowed</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#callback_mutex\">callback_mutex</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#cpuset_sprintf_memlist\">cpuset_sprintf_memlist</a>(char *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#cpuset\">cpuset</a> *<a class=\"id\" href=\"#cs\">cs</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NODEMASK_ALLOC\">NODEMASK_ALLOC</a>(<a class=\"id\" href=\"#nodemask_t\">nodemask_t</a>, <a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mask\">mask</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#callback_mutex\">callback_mutex</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#mems_allowed\">mems_allowed</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#callback_mutex\">callback_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#nodelist_scnprintf\">nodelist_scnprintf</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, *<a class=\"id\" href=\"#mask\">mask</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NODEMASK_FREE\">NODEMASK_FREE</a>(<a class=\"id\" href=\"#mask\">mask</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#cpuset_common_file_read\">cpuset_common_file_read</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cont\">cont</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#nbytes\">nbytes</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuset\">cpuset</a> *<a class=\"id\" href=\"#cs\">cs</a> = <a class=\"id\" href=\"#cgroup_cs\">cgroup_cs</a>(<a class=\"id\" href=\"#cont\">cont</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuset_filetype_t\">cpuset_filetype_t</a> <a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#retval\">retval</a> = 0;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#s\">s</a>;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#page\">page</a> = (char *)<a class=\"id\" href=\"#__get_free_page\">__get_free_page</a>(<a class=\"id\" href=\"#GFP_TEMPORARY\">GFP_TEMPORARY</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FILE_CPULIST\">FILE_CPULIST</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a> += <a class=\"id\" href=\"#cpuset_sprintf_cpulist\">cpuset_sprintf_cpulist</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#cs\">cs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FILE_MEMLIST\">FILE_MEMLIST</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a> += <a class=\"id\" href=\"#cpuset_sprintf_memlist\">cpuset_sprintf_memlist</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#cs\">cs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#s\">s</a>++ = '\\n';", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#simple_read_from_buffer\">simple_read_from_buffer</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#nbytes\">nbytes</a>, <a class=\"id\" href=\"#ppos\">ppos</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#s\">s</a> - <a class=\"id\" href=\"#page\">page</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_page\">free_page</a>((unsigned long)<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#cpuset_read_u64\">cpuset_read_u64</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cont\">cont</a>, struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuset\">cpuset</a> *<a class=\"id\" href=\"#cs\">cs</a> = <a class=\"id\" href=\"#cgroup_cs\">cgroup_cs</a>(<a class=\"id\" href=\"#cont\">cont</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuset_filetype_t\">cpuset_filetype_t</a> <a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FILE_CPU_EXCLUSIVE\">FILE_CPU_EXCLUSIVE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#is_cpu_exclusive\">is_cpu_exclusive</a>(<a class=\"id\" href=\"#cs\">cs</a>);", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FILE_MEM_EXCLUSIVE\">FILE_MEM_EXCLUSIVE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#is_mem_exclusive\">is_mem_exclusive</a>(<a class=\"id\" href=\"#cs\">cs</a>);", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FILE_MEM_HARDWALL\">FILE_MEM_HARDWALL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#is_mem_hardwall\">is_mem_hardwall</a>(<a class=\"id\" href=\"#cs\">cs</a>);", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FILE_SCHED_LOAD_BALANCE\">FILE_SCHED_LOAD_BALANCE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#is_sched_load_balance\">is_sched_load_balance</a>(<a class=\"id\" href=\"#cs\">cs</a>);", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FILE_MEMORY_MIGRATE\">FILE_MEMORY_MIGRATE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#is_memory_migrate\">is_memory_migrate</a>(<a class=\"id\" href=\"#cs\">cs</a>);", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FILE_MEMORY_PRESSURE_ENABLED\">FILE_MEMORY_PRESSURE_ENABLED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#cpuset_memory_pressure_enabled\">cpuset_memory_pressure_enabled</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FILE_MEMORY_PRESSURE\">FILE_MEMORY_PRESSURE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#fmeter_getrate\">fmeter_getrate</a>(&amp;<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#fmeter\">fmeter</a>);", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FILE_SPREAD_PAGE\">FILE_SPREAD_PAGE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#is_spread_page\">is_spread_page</a>(<a class=\"id\" href=\"#cs\">cs</a>);", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FILE_SPREAD_SLAB\">FILE_SPREAD_SLAB</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#is_spread_slab\">is_spread_slab</a>(<a class=\"id\" href=\"#cs\">cs</a>);", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Unreachable but makes gcc happy */</span>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#cpuset_read_s64\">cpuset_read_s64</a>(struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cont\">cont</a>, struct <a class=\"id\" href=\"#cftype\">cftype</a> *<a class=\"id\" href=\"#cft\">cft</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuset\">cpuset</a> *<a class=\"id\" href=\"#cs\">cs</a> = <a class=\"id\" href=\"#cgroup_cs\">cgroup_cs</a>(<a class=\"id\" href=\"#cont\">cont</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuset_filetype_t\">cpuset_filetype_t</a> <a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#cft\">cft</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FILE_SCHED_RELAX_DOMAIN_LEVEL\">FILE_SCHED_RELAX_DOMAIN_LEVEL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#relax_domain_level\">relax_domain_level</a>;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Unrechable but makes gcc happy */</span>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * for the common functions, 'private' gives the type of file</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static struct <a class=\"id\" href=\"#cftype\">cftype</a> <a class=\"id\" href=\"#files\">files</a>[] = {", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"cpus\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a> = <a class=\"id\" href=\"#cpuset_common_file_read\">cpuset_common_file_read</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#write_string\">write_string</a> = <a class=\"id\" href=\"#cpuset_write_resmask\">cpuset_write_resmask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#max_write_len\">max_write_len</a> = (100U + 6 * <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#FILE_CPULIST\">FILE_CPULIST</a>,", 
"<span class=\"ts\"/>},", 
"", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"mems\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a> = <a class=\"id\" href=\"#cpuset_common_file_read\">cpuset_common_file_read</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#write_string\">write_string</a> = <a class=\"id\" href=\"#cpuset_write_resmask\">cpuset_write_resmask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#max_write_len\">max_write_len</a> = (100U + 6 * <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#FILE_MEMLIST\">FILE_MEMLIST</a>,", 
"<span class=\"ts\"/>},", 
"", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"cpu_exclusive\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#read_u64\">read_u64</a> = <a class=\"id\" href=\"#cpuset_read_u64\">cpuset_read_u64</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#write_u64\">write_u64</a> = <a class=\"id\" href=\"#cpuset_write_u64\">cpuset_write_u64</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#FILE_CPU_EXCLUSIVE\">FILE_CPU_EXCLUSIVE</a>,", 
"<span class=\"ts\"/>},", 
"", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"mem_exclusive\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#read_u64\">read_u64</a> = <a class=\"id\" href=\"#cpuset_read_u64\">cpuset_read_u64</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#write_u64\">write_u64</a> = <a class=\"id\" href=\"#cpuset_write_u64\">cpuset_write_u64</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#FILE_MEM_EXCLUSIVE\">FILE_MEM_EXCLUSIVE</a>,", 
"<span class=\"ts\"/>},", 
"", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"mem_hardwall\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#read_u64\">read_u64</a> = <a class=\"id\" href=\"#cpuset_read_u64\">cpuset_read_u64</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#write_u64\">write_u64</a> = <a class=\"id\" href=\"#cpuset_write_u64\">cpuset_write_u64</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#FILE_MEM_HARDWALL\">FILE_MEM_HARDWALL</a>,", 
"<span class=\"ts\"/>},", 
"", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"sched_load_balance\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#read_u64\">read_u64</a> = <a class=\"id\" href=\"#cpuset_read_u64\">cpuset_read_u64</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#write_u64\">write_u64</a> = <a class=\"id\" href=\"#cpuset_write_u64\">cpuset_write_u64</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#FILE_SCHED_LOAD_BALANCE\">FILE_SCHED_LOAD_BALANCE</a>,", 
"<span class=\"ts\"/>},", 
"", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"sched_relax_domain_level\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#read_s64\">read_s64</a> = <a class=\"id\" href=\"#cpuset_read_s64\">cpuset_read_s64</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#write_s64\">write_s64</a> = <a class=\"id\" href=\"#cpuset_write_s64\">cpuset_write_s64</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#FILE_SCHED_RELAX_DOMAIN_LEVEL\">FILE_SCHED_RELAX_DOMAIN_LEVEL</a>,", 
"<span class=\"ts\"/>},", 
"", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"memory_migrate\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#read_u64\">read_u64</a> = <a class=\"id\" href=\"#cpuset_read_u64\">cpuset_read_u64</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#write_u64\">write_u64</a> = <a class=\"id\" href=\"#cpuset_write_u64\">cpuset_write_u64</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#FILE_MEMORY_MIGRATE\">FILE_MEMORY_MIGRATE</a>,", 
"<span class=\"ts\"/>},", 
"", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"memory_pressure\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#read_u64\">read_u64</a> = <a class=\"id\" href=\"#cpuset_read_u64\">cpuset_read_u64</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#write_u64\">write_u64</a> = <a class=\"id\" href=\"#cpuset_write_u64\">cpuset_write_u64</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#FILE_MEMORY_PRESSURE\">FILE_MEMORY_PRESSURE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>,", 
"<span class=\"ts\"/>},", 
"", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"memory_spread_page\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#read_u64\">read_u64</a> = <a class=\"id\" href=\"#cpuset_read_u64\">cpuset_read_u64</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#write_u64\">write_u64</a> = <a class=\"id\" href=\"#cpuset_write_u64\">cpuset_write_u64</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#FILE_SPREAD_PAGE\">FILE_SPREAD_PAGE</a>,", 
"<span class=\"ts\"/>},", 
"", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"memory_spread_slab\",", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#read_u64\">read_u64</a> = <a class=\"id\" href=\"#cpuset_read_u64\">cpuset_read_u64</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#write_u64\">write_u64</a> = <a class=\"id\" href=\"#cpuset_write_u64\">cpuset_write_u64</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#FILE_SPREAD_SLAB\">FILE_SPREAD_SLAB</a>,", 
"<span class=\"ts\"/>},", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#cftype\">cftype</a> <a class=\"id\" href=\"#cft_memory_pressure_enabled\">cft_memory_pressure_enabled</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"memory_pressure_enabled\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read_u64\">read_u64</a> = <a class=\"id\" href=\"#cpuset_read_u64\">cpuset_read_u64</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write_u64\">write_u64</a> = <a class=\"id\" href=\"#cpuset_write_u64\">cpuset_write_u64</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#FILE_MEMORY_PRESSURE_ENABLED\">FILE_MEMORY_PRESSURE_ENABLED</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#cpuset_populate\">cpuset_populate</a>(struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>, struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cont\">cont</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#cgroup_add_files\">cgroup_add_files</a>(<a class=\"id\" href=\"#cont\">cont</a>, <a class=\"id\" href=\"#ss\">ss</a>, <a class=\"id\" href=\"#files\">files</a>, <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#files\">files</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* memory_pressure_enabled is in root cpuset only */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cont\">cont</a>-><a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#cgroup_add_file\">cgroup_add_file</a>(<a class=\"id\" href=\"#cont\">cont</a>, <a class=\"id\" href=\"#ss\">ss</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      &amp;<a class=\"id\" href=\"#cft_memory_pressure_enabled\">cft_memory_pressure_enabled</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * post_clone() is called at the end of cgroup_clone().</span>", 
"<span class=\"comment\"> * 'cgroup' was just created automatically as a result of</span>", 
"<span class=\"comment\"> * a cgroup_clone(), and the current task is about to</span>", 
"<span class=\"comment\"> * be moved into 'cgroup'.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Currently we refuse to set up the cgroup - thereby</span>", 
"<span class=\"comment\"> * refusing the task to be entered, and as a result refusing</span>", 
"<span class=\"comment\"> * the sys_unshare() or clone() which initiated it - if any</span>", 
"<span class=\"comment\"> * sibling cpusets have exclusive cpus or mem.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If this becomes a problem for some users who wish to</span>", 
"<span class=\"comment\"> * allow that scenario, then cpuset_post_clone() could be</span>", 
"<span class=\"comment\"> * changed to grant parent-&gt;cpus_allowed-sibling_cpus_exclusive</span>", 
"<span class=\"comment\"> * (and likewise for mems) to the new cgroup. Called with cgroup_mutex</span>", 
"<span class=\"comment\"> * held.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#cpuset_post_clone\">cpuset_post_clone</a>(struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgroup\">cgroup</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#parent\">parent</a>, *<a class=\"id\" href=\"#child\">child</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuset\">cpuset</a> *<a class=\"id\" href=\"#cs\">cs</a>, *<a class=\"id\" href=\"#parent_cs\">parent_cs</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#cgroup\">cgroup</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#child\">child</a>, &amp;<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#children\">children</a>, <a class=\"id\" href=\"#sibling\">sibling</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cs\">cs</a> = <a class=\"id\" href=\"#cgroup_cs\">cgroup_cs</a>(<a class=\"id\" href=\"#child\">child</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_mem_exclusive\">is_mem_exclusive</a>(<a class=\"id\" href=\"#cs\">cs</a>) || <a class=\"id\" href=\"#is_cpu_exclusive\">is_cpu_exclusive</a>(<a class=\"id\" href=\"#cs\">cs</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cs\">cs</a> = <a class=\"id\" href=\"#cgroup_cs\">cgroup_cs</a>(<a class=\"id\" href=\"#cgroup\">cgroup</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parent_cs\">parent_cs</a> = <a class=\"id\" href=\"#cgroup_cs\">cgroup_cs</a>(<a class=\"id\" href=\"#parent\">parent</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#mems_allowed\">mems_allowed</a> = <a class=\"id\" href=\"#parent_cs\">parent_cs</a>-><a class=\"id\" href=\"#mems_allowed\">mems_allowed</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_copy\">cpumask_copy</a>(<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cpus_allowed\">cpus_allowed</a>, <a class=\"id\" href=\"#parent_cs\">parent_cs</a>-><a class=\"id\" href=\"#cpus_allowed\">cpus_allowed</a>);", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>cpuset_create - create a cpuset</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ss:<span class=\"ts\"/>cpuset cgroup subsystem</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>cont:<span class=\"ts\"/>control group that the new cpuset will be part of</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#cpuset_create\">cpuset_create</a>(", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cont\">cont</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuset\">cpuset</a> *<a class=\"id\" href=\"#cs\">cs</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuset\">cpuset</a> *<a class=\"id\" href=\"#parent\">parent</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cont\">cont</a>-><a class=\"id\" href=\"#parent\">parent</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#top_cpuset\">top_cpuset</a>.<a class=\"id\" href=\"#css\">css</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#cgroup_cs\">cgroup_cs</a>(<a class=\"id\" href=\"#cont\">cont</a>-><a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cs\">cs</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#cs\">cs</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cs\">cs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#alloc_cpumask_var\">alloc_cpumask_var</a>(&amp;<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cpus_allowed\">cpus_allowed</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#cs\">cs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#flags\">flags</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_spread_page\">is_spread_page</a>(<a class=\"id\" href=\"#parent\">parent</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#CS_SPREAD_PAGE\">CS_SPREAD_PAGE</a>, &amp;<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_spread_slab\">is_spread_slab</a>(<a class=\"id\" href=\"#parent\">parent</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#CS_SPREAD_SLAB\">CS_SPREAD_SLAB</a>, &amp;<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#CS_SCHED_LOAD_BALANCE\">CS_SCHED_LOAD_BALANCE</a>, &amp;<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear\">cpumask_clear</a>(<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cpus_allowed\">cpus_allowed</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodes_clear\">nodes_clear</a>(<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#mems_allowed\">mems_allowed</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fmeter_init\">fmeter_init</a>(&amp;<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#fmeter\">fmeter</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#relax_domain_level\">relax_domain_level</a> = -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#number_of_cpusets\">number_of_cpusets</a>++;", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#css\">css</a> ;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If the cpuset being removed has its flag 'sched_load_balance'</span>", 
"<span class=\"comment\"> * enabled, then simulate turning sched_load_balance off, which</span>", 
"<span class=\"comment\"> * will call async_rebuild_sched_domains().</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#cpuset_destroy\">cpuset_destroy</a>(struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>, struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cont\">cont</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuset\">cpuset</a> *<a class=\"id\" href=\"#cs\">cs</a> = <a class=\"id\" href=\"#cgroup_cs\">cgroup_cs</a>(<a class=\"id\" href=\"#cont\">cont</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_sched_load_balance\">is_sched_load_balance</a>(<a class=\"id\" href=\"#cs\">cs</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_flag\">update_flag</a>(<a class=\"id\" href=\"#CS_SCHED_LOAD_BALANCE\">CS_SCHED_LOAD_BALANCE</a>, <a class=\"id\" href=\"#cs\">cs</a>, 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#number_of_cpusets\">number_of_cpusets</a>--;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_cpumask_var\">free_cpumask_var</a>(<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#cpus_allowed\">cpus_allowed</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#cs\">cs</a>);", 
"}", 
"", 
"struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> <a class=\"id\" href=\"#cpuset_subsys\">cpuset_subsys</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"cpuset\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#create\">create</a> = <a class=\"id\" href=\"#cpuset_create\">cpuset_create</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#destroy\">destroy</a> = <a class=\"id\" href=\"#cpuset_destroy\">cpuset_destroy</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#can_attach\">can_attach</a> = <a class=\"id\" href=\"#cpuset_can_attach\">cpuset_can_attach</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#attach\">attach</a> = <a class=\"id\" href=\"#cpuset_attach\">cpuset_attach</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#populate\">populate</a> = <a class=\"id\" href=\"#cpuset_populate\">cpuset_populate</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#post_clone\">post_clone</a> = <a class=\"id\" href=\"#cpuset_post_clone\">cpuset_post_clone</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#subsys_id\">subsys_id</a> = <a class=\"id\" href=\"#cpuset_subsys_id\">cpuset_subsys_id</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#early_init\">early_init</a> = 1,", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpuset_init - initialize cpusets at system boot</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: Initialize top_cpuset and the cpuset internal file system,</span>", 
"<span class=\"comment\"> **/</span>", 
"", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#cpuset_init\">cpuset_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#alloc_cpumask_var\">alloc_cpumask_var</a>(&amp;<a class=\"id\" href=\"#top_cpuset\">top_cpuset</a>.<a class=\"id\" href=\"#cpus_allowed\">cpus_allowed</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_setall\">cpumask_setall</a>(<a class=\"id\" href=\"#top_cpuset\">top_cpuset</a>.<a class=\"id\" href=\"#cpus_allowed\">cpus_allowed</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodes_setall\">nodes_setall</a>(<a class=\"id\" href=\"#top_cpuset\">top_cpuset</a>.<a class=\"id\" href=\"#mems_allowed\">mems_allowed</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fmeter_init\">fmeter_init</a>(&amp;<a class=\"id\" href=\"#top_cpuset\">top_cpuset</a>.<a class=\"id\" href=\"#fmeter\">fmeter</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#CS_SCHED_LOAD_BALANCE\">CS_SCHED_LOAD_BALANCE</a>, &amp;<a class=\"id\" href=\"#top_cpuset\">top_cpuset</a>.<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#top_cpuset\">top_cpuset</a>.<a class=\"id\" href=\"#relax_domain_level\">relax_domain_level</a> = -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#register_filesystem\">register_filesystem</a>(&amp;<a class=\"id\" href=\"#cpuset_fs_type\">cpuset_fs_type</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#alloc_cpumask_var\">alloc_cpumask_var</a>(&amp;<a class=\"id\" href=\"#cpus_attach\">cpus_attach</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#number_of_cpusets\">number_of_cpusets</a> = 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpuset_do_move_task - move a given task to another cpuset</span>", 
"<span class=\"comment\"> * @tsk: pointer to task_struct the task to move</span>", 
"<span class=\"comment\"> * @scan: struct cgroup_scanner contained in its struct cpuset_hotplug_scanner</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called by cgroup_scan_tasks() for each task in a cgroup.</span>", 
"<span class=\"comment\"> * Return nonzero to stop the walk through the tasks.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#cpuset_do_move_task\">cpuset_do_move_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_scanner\">cgroup_scanner</a> *<a class=\"id\" href=\"#scan\">scan</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#new_cgroup\">new_cgroup</a> = <a class=\"id\" href=\"#scan\">scan</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_attach_task\">cgroup_attach_task</a>(<a class=\"id\" href=\"#new_cgroup\">new_cgroup</a>, <a class=\"id\" href=\"#tsk\">tsk</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * move_member_tasks_to_cpuset - move tasks from one cpuset to another</span>", 
"<span class=\"comment\"> * @from: cpuset in which the tasks currently reside</span>", 
"<span class=\"comment\"> * @to: cpuset to which the tasks will be moved</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called with cgroup_mutex held</span>", 
"<span class=\"comment\"> * callback_mutex must not be held, as cpuset_attach() will take it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The cgroup_scan_tasks() function will scan all the tasks in a cgroup,</span>", 
"<span class=\"comment\"> * calling callback functions for each.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#move_member_tasks_to_cpuset\">move_member_tasks_to_cpuset</a>(struct <a class=\"id\" href=\"#cpuset\">cpuset</a> *<a class=\"id\" href=\"#from\">from</a>, struct <a class=\"id\" href=\"#cpuset\">cpuset</a> *<a class=\"id\" href=\"#to\">to</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_scanner\">cgroup_scanner</a> <a class=\"id\" href=\"#scan\">scan</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scan\">scan</a>.<a class=\"id\" href=\"#cg\">cg</a> = <a class=\"id\" href=\"#from\">from</a>-><a class=\"id\" href=\"#css\">css</a>.<a class=\"id\" href=\"#cgroup\">cgroup</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scan\">scan</a>.<a class=\"id\" href=\"#test_task\">test_task</a> = <a class=\"id\" href=\"#NULL\">NULL</a>; <span class=\"comment\">/* select all tasks in cgroup */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scan\">scan</a>.<a class=\"id\" href=\"#process_task\">process_task</a> = <a class=\"id\" href=\"#cpuset_do_move_task\">cpuset_do_move_task</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scan\">scan</a>.<a class=\"id\" href=\"#heap\">heap</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scan\">scan</a>.<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#css\">css</a>.<a class=\"id\" href=\"#cgroup\">cgroup</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cgroup_scan_tasks\">cgroup_scan_tasks</a>(&amp;<a class=\"id\" href=\"#scan\">scan</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"move_member_tasks_to_cpuset: \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"cgroup_scan_tasks failed\\n\");", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If CPU and/or memory hotplug handlers, below, unplug any CPUs</span>", 
"<span class=\"comment\"> * or memory nodes, we need to walk over the cpuset hierarchy,</span>", 
"<span class=\"comment\"> * removing that CPU or node from all cpusets.  If this removes the</span>", 
"<span class=\"comment\"> * last CPU or node from a cpuset, then move the tasks in the empty</span>", 
"<span class=\"comment\"> * cpuset to its next-highest non-empty parent.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called with cgroup_mutex held</span>", 
"<span class=\"comment\"> * callback_mutex must not be held, as cpuset_attach() will take it.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#remove_tasks_in_empty_cpuset\">remove_tasks_in_empty_cpuset</a>(struct <a class=\"id\" href=\"#cpuset\">cpuset</a> *<a class=\"id\" href=\"#cs\">cs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuset\">cpuset</a> *<a class=\"id\" href=\"#parent\">parent</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The cgroup's css_sets list is in use if there are tasks</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in the cpuset; the list is empty if there are none;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the cs-&gt;css.refcnt seems always 0.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#css\">css</a>.<a class=\"id\" href=\"#cgroup\">cgroup</a>-><a class=\"id\" href=\"#css_sets\">css_sets</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Find its next-highest non-empty parent, (top cpuset</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * has online cpus, so can't be empty).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#cs\">cs</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#cpumask_empty\">cpumask_empty</a>(<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#cpus_allowed\">cpus_allowed</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodes_empty\">nodes_empty</a>(<a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#mems_allowed\">mems_allowed</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#move_member_tasks_to_cpuset\">move_member_tasks_to_cpuset</a>(<a class=\"id\" href=\"#cs\">cs</a>, <a class=\"id\" href=\"#parent\">parent</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Walk the specified cpuset subtree and look for empty cpusets.</span>", 
"<span class=\"comment\"> * The tasks of such cpuset must be moved to a parent cpuset.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called with cgroup_mutex held.  We take callback_mutex to modify</span>", 
"<span class=\"comment\"> * cpus_allowed and mems_allowed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This walk processes the tree from top to bottom, completing one layer</span>", 
"<span class=\"comment\"> * before dropping down to the next.  It always processes a node before</span>", 
"<span class=\"comment\"> * any of its children.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For now, since we lack memory hot unplug, we'll never see a cpuset</span>", 
"<span class=\"comment\"> * that has tasks along with an empty 'mems'.  But if we did see such</span>", 
"<span class=\"comment\"> * a cpuset, we'd handle it just like we do if its 'cpus' was empty.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#scan_for_empty_cpusets\">scan_for_empty_cpusets</a>(struct <a class=\"id\" href=\"#cpuset\">cpuset</a> *<a class=\"id\" href=\"#root\">root</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#queue\">queue</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuset\">cpuset</a> *<a class=\"id\" href=\"#cp\">cp</a>;<span class=\"ts\"/><span class=\"comment\">/* scans cpusets being updated */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuset\">cpuset</a> *<a class=\"id\" href=\"#child\">child</a>;<span class=\"ts\"/><span class=\"comment\">/* scans child cpusets of cp */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cont\">cont</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NODEMASK_ALLOC\">NODEMASK_ALLOC</a>(<a class=\"id\" href=\"#nodemask_t\">nodemask_t</a>, <a class=\"id\" href=\"#oldmems\">oldmems</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#oldmems\">oldmems</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>((struct <a class=\"id\" href=\"#list_head\">list_head</a> *)&amp;<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#stack_list\">stack_list</a>, &amp;<a class=\"id\" href=\"#queue\">queue</a>);", 
"", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#queue\">queue</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a> = <a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(&amp;<a class=\"id\" href=\"#queue\">queue</a>, struct <a class=\"id\" href=\"#cpuset\">cpuset</a>, <a class=\"id\" href=\"#stack_list\">stack_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(<a class=\"id\" href=\"#queue\">queue</a>.<a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#cont\">cont</a>, &amp;<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#css\">css</a>.<a class=\"id\" href=\"#cgroup\">cgroup</a>-><a class=\"id\" href=\"#children\">children</a>, <a class=\"id\" href=\"#sibling\">sibling</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#child\">child</a> = <a class=\"id\" href=\"#cgroup_cs\">cgroup_cs</a>(<a class=\"id\" href=\"#cont\">cont</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#stack_list\">stack_list</a>, &amp;<a class=\"id\" href=\"#queue\">queue</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Continue past cpusets with all cpus, mems online */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_subset\">cpumask_subset</a>(<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#cpus_allowed\">cpus_allowed</a>, <a class=\"id\" href=\"#cpu_active_mask\">cpu_active_mask</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#nodes_subset\">nodes_subset</a>(<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#mems_allowed\">mems_allowed</a>, <a class=\"id\" href=\"#node_states\">node_states</a>[<a class=\"id\" href=\"#N_HIGH_MEMORY\">N_HIGH_MEMORY</a>]))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#oldmems\">oldmems</a> = <a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#mems_allowed\">mems_allowed</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Remove offline cpus and mems from this cpuset. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#callback_mutex\">callback_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_and\">cpumask_and</a>(<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#cpus_allowed\">cpus_allowed</a>, <a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#cpus_allowed\">cpus_allowed</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#cpu_active_mask\">cpu_active_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodes_and\">nodes_and</a>(<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#mems_allowed\">mems_allowed</a>, <a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#mems_allowed\">mems_allowed</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node_states\">node_states</a>[<a class=\"id\" href=\"#N_HIGH_MEMORY\">N_HIGH_MEMORY</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#callback_mutex\">callback_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Move tasks from the empty cpuset to a parent */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_empty\">cpumask_empty</a>(<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#cpus_allowed\">cpus_allowed</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#nodes_empty\">nodes_empty</a>(<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#mems_allowed\">mems_allowed</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remove_tasks_in_empty_cpuset\">remove_tasks_in_empty_cpuset</a>(<a class=\"id\" href=\"#cp\">cp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_tasks_cpumask\">update_tasks_cpumask</a>(<a class=\"id\" href=\"#cp\">cp</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
];
xr_frag_insert('l/04/2219d24f6ebc4a655033ef84d53f1a2a044747.xr', __xr_tmp);
