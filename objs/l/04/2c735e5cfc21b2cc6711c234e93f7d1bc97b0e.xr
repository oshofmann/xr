var __xr_tmp = [
"<span class=\"comment\">/* audit.c -- Auditing support</span>", 
"<span class=\"comment\"> * Gateway between the kernel (e.g., selinux) and the user-space audit daemon.</span>", 
"<span class=\"comment\"> * System-call specific features have moved to auditsc.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright 2003-2007 Red Hat Inc., Durham, North Carolina.</span>", 
"<span class=\"comment\"> * All Rights Reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> * the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\"> * (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> * GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> * along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Written by Rickard E. (Rik) Faith &lt;faith@redhat.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Goals: 1) Integrate fully with Security Modules.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>  2) Minimal run-time overhead:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>     a) Minimal when syscall auditing is disabled (audit_enable=0).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>     b) Small when syscall auditing is enabled and no audit record</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>is generated (defer as much work as possible to record</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>generation time):</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>i) context is allocated,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>ii) names from getname are stored without a copy, and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>iii) inode information stored from path_lookup.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>  3) Ability to disable syscall auditing at boot time (audit=0).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>  4) Usable by other parts of the kernel (if audit_log* is called,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>     then a syscall record will be generated automatically for the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>     current syscall).</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>  5) Netlink interface to user-space.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>  6) Support low-overhead kernel-based filtering to minimize the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>     information that must be passed to user-space.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Example user-space utilities: http://people.redhat.com/sgrubb/audit/</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#atomic\">atomic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#err\">err</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kthread\">kthread</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#audit\">audit</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#sock\">sock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#netlink\">netlink</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#skbuff\">skbuff</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#netlink\">netlink</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#freezer\">freezer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#tty\">tty</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"audit.h\"", 
"", 
"<span class=\"comment\">/* No auditing will take place until audit_initialized == AUDIT_INITIALIZED.</span>", 
"<span class=\"comment\"> * (Initialization happens after skb_init is called.) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#AUDIT_DISABLED\">AUDIT_DISABLED</a><span class=\"ts\"/><span class=\"ts\"/>-1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#AUDIT_UNINITIALIZED\">AUDIT_UNINITIALIZED</a><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#AUDIT_INITIALIZED\">AUDIT_INITIALIZED</a><span class=\"ts\"/>1", 
"static int<span class=\"ts\"/><a class=\"id\" href=\"#audit_initialized\">audit_initialized</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#AUDIT_OFF\">AUDIT_OFF</a><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#AUDIT_ON\">AUDIT_ON</a><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#AUDIT_LOCKED\">AUDIT_LOCKED</a><span class=\"ts\"/>2", 
"int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_enabled\">audit_enabled</a>;", 
"int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_ever_enabled\">audit_ever_enabled</a>;", 
"", 
"<span class=\"comment\">/* Default state when kernel boots without any parameters. */</span>", 
"static int<span class=\"ts\"/><a class=\"id\" href=\"#audit_default\">audit_default</a>;", 
"", 
"<span class=\"comment\">/* If auditing cannot proceed, audit_failure selects what happens. */</span>", 
"static int<span class=\"ts\"/><a class=\"id\" href=\"#audit_failure\">audit_failure</a> = <a class=\"id\" href=\"#AUDIT_FAIL_PRINTK\">AUDIT_FAIL_PRINTK</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If audit records are to be written to the netlink socket, audit_pid</span>", 
"<span class=\"comment\"> * contains the pid of the auditd process and audit_nlk_pid contains</span>", 
"<span class=\"comment\"> * the pid to use to send netlink messages to that process.</span>", 
"<span class=\"comment\"> */</span>", 
"int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_pid\">audit_pid</a>;", 
"static int<span class=\"ts\"/><a class=\"id\" href=\"#audit_nlk_pid\">audit_nlk_pid</a>;", 
"", 
"<span class=\"comment\">/* If audit_rate_limit is non-zero, limit the rate of sending audit records</span>", 
"<span class=\"comment\"> * to that number per second.  This prevents DoS attacks, but results in</span>", 
"<span class=\"comment\"> * audit records being dropped. */</span>", 
"static int<span class=\"ts\"/><a class=\"id\" href=\"#audit_rate_limit\">audit_rate_limit</a>;", 
"", 
"<span class=\"comment\">/* Number of outstanding audit_buffers allowed. */</span>", 
"static int<span class=\"ts\"/><a class=\"id\" href=\"#audit_backlog_limit\">audit_backlog_limit</a> = 64;", 
"static int<span class=\"ts\"/><a class=\"id\" href=\"#audit_backlog_wait_time\">audit_backlog_wait_time</a> = 60 * <a class=\"id\" href=\"#HZ\">HZ</a>;", 
"static int<span class=\"ts\"/><a class=\"id\" href=\"#audit_backlog_wait_overflow\">audit_backlog_wait_overflow</a> = 0;", 
"", 
"<span class=\"comment\">/* The identity of the user shutting down the audit system. */</span>", 
"<a class=\"id\" href=\"#uid_t\">uid_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_sig_uid\">audit_sig_uid</a> = -1;", 
"<a class=\"id\" href=\"#pid_t\">pid_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_sig_pid\">audit_sig_pid</a> = -1;", 
"<a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_sig_sid\">audit_sig_sid</a> = 0;", 
"", 
"<span class=\"comment\">/* Records can be lost in several ways:</span>", 
"<span class=\"comment\">   0) [suppressed in audit_alloc]</span>", 
"<span class=\"comment\">   1) out of memory in audit_log_start [kmalloc of struct audit_buffer]</span>", 
"<span class=\"comment\">   2) out of memory in audit_log_move [alloc_skb]</span>", 
"<span class=\"comment\">   3) suppressed due to audit_rate_limit</span>", 
"<span class=\"comment\">   4) suppressed due to audit_backlog_limit</span>", 
"<span class=\"comment\">*/</span>", 
"static <a class=\"id\" href=\"#atomic_t\">atomic_t</a>    <a class=\"id\" href=\"#audit_lost\">audit_lost</a> = <a class=\"id\" href=\"#ATOMIC_INIT\">ATOMIC_INIT</a>(0);", 
"", 
"<span class=\"comment\">/* The netlink socket. */</span>", 
"static struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#audit_sock\">audit_sock</a>;", 
"", 
"<span class=\"comment\">/* Hash for inode-based rules */</span>", 
"struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#audit_inode_hash\">audit_inode_hash</a>[<a class=\"id\" href=\"#AUDIT_INODE_BUCKETS\">AUDIT_INODE_BUCKETS</a>];", 
"", 
"<span class=\"comment\">/* The audit_freelist is a list of pre-allocated audit buffers (if more</span>", 
"<span class=\"comment\"> * than AUDIT_MAXFREE are in use, the audit buffer is freed instead of</span>", 
"<span class=\"comment\"> * being placed on the freelist). */</span>", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#audit_freelist_lock\">audit_freelist_lock</a>);", 
"static int<span class=\"ts\"/>   <a class=\"id\" href=\"#audit_freelist_count\">audit_freelist_count</a>;", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#audit_freelist\">audit_freelist</a>);", 
"", 
"static struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> <a class=\"id\" href=\"#audit_skb_queue\">audit_skb_queue</a>;", 
"<span class=\"comment\">/* queue of skbs to send to auditd when/if it comes back */</span>", 
"static struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> <a class=\"id\" href=\"#audit_skb_hold_queue\">audit_skb_hold_queue</a>;", 
"static struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#kauditd_task\">kauditd_task</a>;", 
"static <a class=\"id\" href=\"#DECLARE_WAIT_QUEUE_HEAD\">DECLARE_WAIT_QUEUE_HEAD</a>(<a class=\"id\" href=\"#kauditd_wait\">kauditd_wait</a>);", 
"static <a class=\"id\" href=\"#DECLARE_WAIT_QUEUE_HEAD\">DECLARE_WAIT_QUEUE_HEAD</a>(<a class=\"id\" href=\"#audit_backlog_wait\">audit_backlog_wait</a>);", 
"", 
"<span class=\"comment\">/* Serialize requests from userspace. */</span>", 
"<a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#audit_cmd_mutex\">audit_cmd_mutex</a>);", 
"", 
"<span class=\"comment\">/* AUDIT_BUFSIZ is the size of the temporary buffer used for formatting</span>", 
"<span class=\"comment\"> * audit records.  Since printk uses a 1024 byte buffer, this buffer</span>", 
"<span class=\"comment\"> * should be at least that large. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#AUDIT_BUFSIZ\">AUDIT_BUFSIZ</a> 1024", 
"", 
"<span class=\"comment\">/* AUDIT_MAXFREE is the number of empty audit_buffers we keep on the</span>", 
"<span class=\"comment\"> * audit_freelist.  Doing so eliminates many kmalloc/kfree calls. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#AUDIT_MAXFREE\">AUDIT_MAXFREE</a>  (2*<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>)", 
"", 
"<span class=\"comment\">/* The audit_buffer is used when formatting an audit record.  The caller</span>", 
"<span class=\"comment\"> * locks briefly to get the record off the freelist or to allocate the</span>", 
"<span class=\"comment\"> * buffer, and locks briefly to send the buffer to the netlink layer or</span>", 
"<span class=\"comment\"> * to place it on a transmit queue.  Multiple audit_buffers can be in</span>", 
"<span class=\"comment\"> * use simultaneously. */</span>", 
"struct <a class=\"id\" href=\"#audit_buffer\">audit_buffer</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a>     <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a>       *<a class=\"id\" href=\"#skb\">skb</a>;<span class=\"ts\"/><span class=\"comment\">/* formatted skb ready to send */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_context\">audit_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>;<span class=\"ts\"/><span class=\"comment\">/* NULL or associated context */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#audit_reply\">audit_reply</a> {", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>;", 
"};", 
"", 
"static void <a class=\"id\" href=\"#audit_set_pid\">audit_set_pid</a>(struct <a class=\"id\" href=\"#audit_buffer\">audit_buffer</a> *<a class=\"id\" href=\"#ab\">ab</a>, <a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pid\">pid</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ab\">ab</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#nlmsghdr\">nlmsghdr</a> *<a class=\"id\" href=\"#nlh\">nlh</a> = <a class=\"id\" href=\"#nlmsg_hdr\">nlmsg_hdr</a>(<a class=\"id\" href=\"#ab\">ab</a>-><a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nlh\">nlh</a>-><a class=\"id\" href=\"#nlmsg_pid\">nlmsg_pid</a> = <a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#audit_panic\">audit_panic</a>(const char *<a class=\"id\" href=\"#message\">message</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#audit_failure\">audit_failure</a>)", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AUDIT_FAIL_SILENT\">AUDIT_FAIL_SILENT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AUDIT_FAIL_PRINTK\">AUDIT_FAIL_PRINTK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#printk_ratelimit\">printk_ratelimit</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"audit: %s\\n\", <a class=\"id\" href=\"#message\">message</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#AUDIT_FAIL_PANIC\">AUDIT_FAIL_PANIC</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* test audit_pid since printk is always losey, why bother? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#audit_pid\">audit_pid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"audit: %s\\n\", <a class=\"id\" href=\"#message\">message</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#audit_rate_check\">audit_rate_check</a>(void)", 
"{", 
"<span class=\"ts\"/>static unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#last_check\">last_check</a> = 0;", 
"<span class=\"ts\"/>static int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#messages\">messages</a>   = 0;", 
"<span class=\"ts\"/>static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#now\">now</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#elapsed\">elapsed</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a><span class=\"ts\"/>   = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#audit_rate_limit\">audit_rate_limit</a>) return 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (++<a class=\"id\" href=\"#messages\">messages</a> &lt; <a class=\"id\" href=\"#audit_rate_limit\">audit_rate_limit</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = 1;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#now\">now</a>     = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#elapsed\">elapsed</a> = <a class=\"id\" href=\"#now\">now</a> - <a class=\"id\" href=\"#last_check\">last_check</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#elapsed\">elapsed</a> &gt; <a class=\"id\" href=\"#HZ\">HZ</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_check\">last_check</a> = <a class=\"id\" href=\"#now\">now</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#messages\">messages</a>   = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a>     = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * audit_log_lost - conditionally log lost audit message event</span>", 
"<span class=\"comment\"> * @message: the message stating reason for lost audit message</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Emit at least 1 message per second, even if audit_rate_check is</span>", 
"<span class=\"comment\"> * throttling.</span>", 
"<span class=\"comment\"> * Always increment the lost messages counter.</span>", 
"<span class=\"comment\">*/</span>", 
"void <a class=\"id\" href=\"#audit_log_lost\">audit_log_lost</a>(const char *<a class=\"id\" href=\"#message\">message</a>)", 
"{", 
"<span class=\"ts\"/>static unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#last_msg\">last_msg</a> = 0;", 
"<span class=\"ts\"/>static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#now\">now</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print\">print</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#audit_lost\">audit_lost</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#print\">print</a> = (<a class=\"id\" href=\"#audit_failure\">audit_failure</a> == <a class=\"id\" href=\"#AUDIT_FAIL_PANIC\">AUDIT_FAIL_PANIC</a> || !<a class=\"id\" href=\"#audit_rate_limit\">audit_rate_limit</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#print\">print</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#now\">now</a> - <a class=\"id\" href=\"#last_msg\">last_msg</a> &gt; <a class=\"id\" href=\"#HZ\">HZ</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print\">print</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_msg\">last_msg</a> = <a class=\"id\" href=\"#now\">now</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#print\">print</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#printk_ratelimit\">printk_ratelimit</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"audit: audit_lost=%d audit_rate_limit=%d \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"audit_backlog_limit=%d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#audit_lost\">audit_lost</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_rate_limit\">audit_rate_limit</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_backlog_limit\">audit_backlog_limit</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_panic\">audit_panic</a>(<a class=\"id\" href=\"#message\">message</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#audit_log_config_change\">audit_log_config_change</a>(char *<a class=\"id\" href=\"#function_name\">function_name</a>, int <a class=\"id\" href=\"#new\">new</a>, int <a class=\"id\" href=\"#old\">old</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#uid_t\">uid_t</a> <a class=\"id\" href=\"#loginuid\">loginuid</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sessionid\">sessionid</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sid\">sid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#allow_changes\">allow_changes</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_buffer\">audit_buffer</a> *<a class=\"id\" href=\"#ab\">ab</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ab\">ab</a> = <a class=\"id\" href=\"#audit_log_start\">audit_log_start</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, <a class=\"id\" href=\"#AUDIT_CONFIG_CHANGE\">AUDIT_CONFIG_CHANGE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(<a class=\"id\" href=\"#ab\">ab</a>, \"%s=%d old=%d auid=%u ses=%u\", <a class=\"id\" href=\"#function_name\">function_name</a>, <a class=\"id\" href=\"#new\">new</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#old\">old</a>, <a class=\"id\" href=\"#loginuid\">loginuid</a>, <a class=\"id\" href=\"#sessionid\">sessionid</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sid\">sid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#security_secid_to_secctx\">security_secid_to_secctx</a>(<a class=\"id\" href=\"#sid\">sid</a>, &amp;<a class=\"id\" href=\"#ctx\">ctx</a>, &amp;<a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(<a class=\"id\" href=\"#ab\">ab</a>, \" sid=%u\", <a class=\"id\" href=\"#sid\">sid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#allow_changes\">allow_changes</a> = 0; <span class=\"comment\">/* Something weird, deny request */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(<a class=\"id\" href=\"#ab\">ab</a>, \" subj=%s\", <a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#security_release_secctx\">security_release_secctx</a>(<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(<a class=\"id\" href=\"#ab\">ab</a>, \" res=%d\", <a class=\"id\" href=\"#allow_changes\">allow_changes</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#audit_log_end\">audit_log_end</a>(<a class=\"id\" href=\"#ab\">ab</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#audit_do_config_change\">audit_do_config_change</a>(char *<a class=\"id\" href=\"#function_name\">function_name</a>, int *<a class=\"id\" href=\"#to_change\">to_change</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#uid_t\">uid_t</a> <a class=\"id\" href=\"#loginuid\">loginuid</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sessionid\">sessionid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sid\">sid</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#allow_changes\">allow_changes</a>, <a class=\"id\" href=\"#rc\">rc</a> = 0, <a class=\"id\" href=\"#old\">old</a> = *<a class=\"id\" href=\"#to_change\">to_change</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* check if we are locked */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#audit_enabled\">audit_enabled</a> == <a class=\"id\" href=\"#AUDIT_LOCKED\">AUDIT_LOCKED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#allow_changes\">allow_changes</a> = 0;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#allow_changes\">allow_changes</a> = 1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#audit_enabled\">audit_enabled</a> != <a class=\"id\" href=\"#AUDIT_OFF\">AUDIT_OFF</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#audit_log_config_change\">audit_log_config_change</a>(<a class=\"id\" href=\"#function_name\">function_name</a>, <a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#old\">old</a>, <a class=\"id\" href=\"#loginuid\">loginuid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#sessionid\">sessionid</a>, <a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#allow_changes\">allow_changes</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#allow_changes\">allow_changes</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If we are allowed, make the change */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#allow_changes\">allow_changes</a> == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#to_change\">to_change</a> = <a class=\"id\" href=\"#new\">new</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Not allowed, update reason */</span>", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#rc\">rc</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#audit_set_rate_limit\">audit_set_rate_limit</a>(int <a class=\"id\" href=\"#limit\">limit</a>, <a class=\"id\" href=\"#uid_t\">uid_t</a> <a class=\"id\" href=\"#loginuid\">loginuid</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sessionid\">sessionid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sid\">sid</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#audit_do_config_change\">audit_do_config_change</a>(\"audit_rate_limit\", &amp;<a class=\"id\" href=\"#audit_rate_limit\">audit_rate_limit</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#limit\">limit</a>, <a class=\"id\" href=\"#loginuid\">loginuid</a>, <a class=\"id\" href=\"#sessionid\">sessionid</a>, <a class=\"id\" href=\"#sid\">sid</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#audit_set_backlog_limit\">audit_set_backlog_limit</a>(int <a class=\"id\" href=\"#limit\">limit</a>, <a class=\"id\" href=\"#uid_t\">uid_t</a> <a class=\"id\" href=\"#loginuid\">loginuid</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sessionid\">sessionid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sid\">sid</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#audit_do_config_change\">audit_do_config_change</a>(\"audit_backlog_limit\", &amp;<a class=\"id\" href=\"#audit_backlog_limit\">audit_backlog_limit</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#limit\">limit</a>, <a class=\"id\" href=\"#loginuid\">loginuid</a>, <a class=\"id\" href=\"#sessionid\">sessionid</a>, <a class=\"id\" href=\"#sid\">sid</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#audit_set_enabled\">audit_set_enabled</a>(int <a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#uid_t\">uid_t</a> <a class=\"id\" href=\"#loginuid\">loginuid</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sessionid\">sessionid</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sid\">sid</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#state\">state</a> &lt; <a class=\"id\" href=\"#AUDIT_OFF\">AUDIT_OFF</a> || <a class=\"id\" href=\"#state\">state</a> &gt; <a class=\"id\" href=\"#AUDIT_LOCKED\">AUDIT_LOCKED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> =  <a class=\"id\" href=\"#audit_do_config_change\">audit_do_config_change</a>(\"audit_enabled\", &amp;<a class=\"id\" href=\"#audit_enabled\">audit_enabled</a>, <a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#loginuid\">loginuid</a>, <a class=\"id\" href=\"#sessionid\">sessionid</a>, <a class=\"id\" href=\"#sid\">sid</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_ever_enabled\">audit_ever_enabled</a> |= !!<a class=\"id\" href=\"#state\">state</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#audit_set_failure\">audit_set_failure</a>(int <a class=\"id\" href=\"#state\">state</a>, <a class=\"id\" href=\"#uid_t\">uid_t</a> <a class=\"id\" href=\"#loginuid\">loginuid</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sessionid\">sessionid</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sid\">sid</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#state\">state</a> != <a class=\"id\" href=\"#AUDIT_FAIL_SILENT\">AUDIT_FAIL_SILENT</a>", 
"<span class=\"ts\"/>    && <a class=\"id\" href=\"#state\">state</a> != <a class=\"id\" href=\"#AUDIT_FAIL_PRINTK\">AUDIT_FAIL_PRINTK</a>", 
"<span class=\"ts\"/>    && <a class=\"id\" href=\"#state\">state</a> != <a class=\"id\" href=\"#AUDIT_FAIL_PANIC\">AUDIT_FAIL_PANIC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#audit_do_config_change\">audit_do_config_change</a>(\"audit_failure\", &amp;<a class=\"id\" href=\"#audit_failure\">audit_failure</a>, <a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#loginuid\">loginuid</a>, <a class=\"id\" href=\"#sessionid\">sessionid</a>, <a class=\"id\" href=\"#sid\">sid</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Queue skbs to be sent to auditd when/if it comes back.  These skbs should</span>", 
"<span class=\"comment\"> * already have been sent via prink/syslog and so if these messages are dropped</span>", 
"<span class=\"comment\"> * it is not a huge concern since we already passed the audit_log_lost()</span>", 
"<span class=\"comment\"> * notification and stuff.  This is just nice to get audit messages during</span>", 
"<span class=\"comment\"> * boot before auditd is running or messages generated while auditd is stopped.</span>", 
"<span class=\"comment\"> * This only holds messages is audit_default is set, aka booting with audit=1</span>", 
"<span class=\"comment\"> * or building your kernel that way.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#audit_hold_skb\">audit_hold_skb</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#audit_default\">audit_default</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#skb_queue_len\">skb_queue_len</a>(&amp;<a class=\"id\" href=\"#audit_skb_hold_queue\">audit_skb_hold_queue</a>) &lt; <a class=\"id\" href=\"#audit_backlog_limit\">audit_backlog_limit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_queue_tail\">skb_queue_tail</a>(&amp;<a class=\"id\" href=\"#audit_skb_hold_queue\">audit_skb_hold_queue</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * For one reason or another this nlh isn't getting delivered to the userspace</span>", 
"<span class=\"comment\"> * audit daemon, just send it to printk.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#audit_printk_skb\">audit_printk_skb</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#nlmsghdr\">nlmsghdr</a> *<a class=\"id\" href=\"#nlh\">nlh</a> = <a class=\"id\" href=\"#nlmsg_hdr\">nlmsg_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#NLMSG_DATA\">NLMSG_DATA</a>(<a class=\"id\" href=\"#nlh\">nlh</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nlh\">nlh</a>-><a class=\"id\" href=\"#nlmsg_type\">nlmsg_type</a> != <a class=\"id\" href=\"#AUDIT_EOE\">AUDIT_EOE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#printk_ratelimit\">printk_ratelimit</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a> \"type=%d %s\\n\", <a class=\"id\" href=\"#nlh\">nlh</a>-><a class=\"id\" href=\"#nlmsg_type\">nlmsg_type</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_lost\">audit_log_lost</a>(\"printk limit exceeded\\n\");", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#audit_hold_skb\">audit_hold_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#kauditd_send_skb\">kauditd_send_skb</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* take a reference in case we can't send it and we want to hold it */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_get\">skb_get</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#netlink_unicast\">netlink_unicast</a>(<a class=\"id\" href=\"#audit_sock\">audit_sock</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#audit_nlk_pid\">audit_nlk_pid</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#err\">err</a> != -<a class=\"id\" href=\"#ECONNREFUSED\">ECONNREFUSED</a>); <span class=\"comment\">/* Shouldn't happen */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"audit: *NO* daemon at audit_pid=%d\\n\", <a class=\"id\" href=\"#audit_pid\">audit_pid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_lost\">audit_log_lost</a>(\"auditd dissapeared\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_pid\">audit_pid</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we might get lucky and get this in the next auditd */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_hold_skb\">audit_hold_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* drop the extra reference if sent ok */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#consume_skb\">consume_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#kauditd_thread\">kauditd_thread</a>(void *<a class=\"id\" href=\"#dummy\">dummy</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_freezable\">set_freezable</a>();", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#kthread_should_stop\">kthread_should_stop</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * if auditd just started drain the queue of messages already</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * sent to syslog/printk.  remember loss here is ok.  we already</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * called audit_log_lost() if it didn't go out normally.  so the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * race between the skb_dequeue and the next check for audit_pid</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * doesn't matter.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * if you ever find kauditd to be too slow we can get a perf win</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * by doing our own locking and keeping better track if there</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * are messages in this queue.  I don't see the need now, but</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * in 5 years when I want to play with this again I'll see this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * note and still have no friggin idea what i'm thinking today.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#audit_default\">audit_default</a> && <a class=\"id\" href=\"#audit_pid\">audit_pid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#skb_dequeue\">skb_dequeue</a>(&amp;<a class=\"id\" href=\"#audit_skb_hold_queue\">audit_skb_hold_queue</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#skb\">skb</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#skb\">skb</a> && <a class=\"id\" href=\"#audit_pid\">audit_pid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kauditd_send_skb\">kauditd_send_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#skb_dequeue\">skb_dequeue</a>(&amp;<a class=\"id\" href=\"#audit_skb_hold_queue\">audit_skb_hold_queue</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#skb_dequeue\">skb_dequeue</a>(&amp;<a class=\"id\" href=\"#audit_skb_queue\">audit_skb_queue</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up\">wake_up</a>(&amp;<a class=\"id\" href=\"#audit_backlog_wait\">audit_backlog_wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#audit_pid\">audit_pid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kauditd_send_skb\">kauditd_send_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_printk_skb\">audit_printk_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DECLARE_WAITQUEUE\">DECLARE_WAITQUEUE</a>(<a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_current_state\">set_current_state</a>(<a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_wait_queue\">add_wait_queue</a>(&amp;<a class=\"id\" href=\"#kauditd_wait\">kauditd_wait</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#skb_queue_len\">skb_queue_len</a>(&amp;<a class=\"id\" href=\"#audit_skb_queue\">audit_skb_queue</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#try_to_freeze\">try_to_freeze</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remove_wait_queue\">remove_wait_queue</a>(&amp;<a class=\"id\" href=\"#kauditd_wait\">kauditd_wait</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#audit_prepare_user_tty\">audit_prepare_user_tty</a>(<a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#uid_t\">uid_t</a> <a class=\"id\" href=\"#loginuid\">loginuid</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sessionid\">sessionid</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#find_task_by_vpid\">find_task_by_vpid</a>(<a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ESRCH\">ESRCH</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#audit_tty\">audit_tty</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#siglock\">siglock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tty_audit_push_task\">tty_audit_push_task</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#loginuid\">loginuid</a>, <a class=\"id\" href=\"#sessionid\">sessionid</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#audit_send_list\">audit_send_list</a>(void *<a class=\"id\" href=\"#_dest\">_dest</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_netlink_list\">audit_netlink_list</a> *<a class=\"id\" href=\"#dest\">dest</a> = <a class=\"id\" href=\"#_dest\">_dest</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#dest\">dest</a>-><a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* wait for parent to finish and send an ACK */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#audit_cmd_mutex\">audit_cmd_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#audit_cmd_mutex\">audit_cmd_mutex</a>);", 
"", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#__skb_dequeue\">__skb_dequeue</a>(&amp;<a class=\"id\" href=\"#dest\">dest</a>-><a class=\"id\" href=\"#q\">q</a>)) != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#netlink_unicast\">netlink_unicast</a>(<a class=\"id\" href=\"#audit_sock\">audit_sock</a>, <a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#pid\">pid</a>, 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#dest\">dest</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#audit_make_reply\">audit_make_reply</a>(int <a class=\"id\" href=\"#pid\">pid</a>, int <a class=\"id\" href=\"#seq\">seq</a>, int <a class=\"id\" href=\"#type\">type</a>, int <a class=\"id\" href=\"#done\">done</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#multi\">multi</a>, void *<a class=\"id\" href=\"#payload\">payload</a>, int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a><span class=\"ts\"/>*<a class=\"id\" href=\"#skb\">skb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#nlmsghdr\">nlmsghdr</a><span class=\"ts\"/>*<a class=\"id\" href=\"#nlh\">nlh</a>;", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#multi\">multi</a> ? <a class=\"id\" href=\"#NLM_F_MULTI\">NLM_F_MULTI</a> : 0;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>     = <a class=\"id\" href=\"#done\">done</a>  ? <a class=\"id\" href=\"#NLMSG_DONE\">NLMSG_DONE</a>  : <a class=\"id\" href=\"#type\">type</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#nlmsg_new\">nlmsg_new</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#skb\">skb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nlh\">nlh</a><span class=\"ts\"/>= <a class=\"id\" href=\"#NLMSG_NEW\">NLMSG_NEW</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#seq\">seq</a>, <a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a><span class=\"ts\"/>= <a class=\"id\" href=\"#NLMSG_DATA\">NLMSG_DATA</a>(<a class=\"id\" href=\"#nlh\">nlh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#payload\">payload</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>;", 
"", 
"<a class=\"id\" href=\"#nlmsg_failure\">nlmsg_failure</a>:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Used by NLMSG_NEW */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#audit_send_reply_thread\">audit_send_reply_thread</a>(void *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_reply\">audit_reply</a> *<a class=\"id\" href=\"#reply\">reply</a> = (struct <a class=\"id\" href=\"#audit_reply\">audit_reply</a> *)<a class=\"id\" href=\"#arg\">arg</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#audit_cmd_mutex\">audit_cmd_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#audit_cmd_mutex\">audit_cmd_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Ignore failure. It'll only happen if the sender goes away,</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   because our timeout is set to infinite. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netlink_unicast\">netlink_unicast</a>(<a class=\"id\" href=\"#audit_sock\">audit_sock</a>, <a class=\"id\" href=\"#reply\">reply</a>-><a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#reply\">reply</a>-><a class=\"id\" href=\"#pid\">pid</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#reply\">reply</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * audit_send_reply - send an audit reply message via netlink</span>", 
"<span class=\"comment\"> * @pid: process id to send reply to</span>", 
"<span class=\"comment\"> * @seq: sequence number</span>", 
"<span class=\"comment\"> * @type: audit message type</span>", 
"<span class=\"comment\"> * @done: done (last) flag</span>", 
"<span class=\"comment\"> * @multi: multi-part message flag</span>", 
"<span class=\"comment\"> * @payload: payload data</span>", 
];
xr_frag_insert('l/04/2c735e5cfc21b2cc6711c234e93f7d1bc97b0e.xr', __xr_tmp);
