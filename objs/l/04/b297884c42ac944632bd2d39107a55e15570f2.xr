var __xr_tmp = [
"", 
"static int <a class=\"id\" href=\"#irq_wait_for_interrupt\">irq_wait_for_interrupt</a>(struct <a class=\"id\" href=\"#irqaction\">irqaction</a> *<a class=\"id\" href=\"#action\">action</a>)", 
"{", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#kthread_should_stop\">kthread_should_stop</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_current_state\">set_current_state</a>(<a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#test_and_clear_bit\">test_and_clear_bit</a>(<a class=\"id\" href=\"#IRQTF_RUNTHREAD\">IRQTF_RUNTHREAD</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#action\">action</a>-><a class=\"id\" href=\"#thread_flags\">thread_flags</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return -1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Oneshot interrupts keep the irq line masked until the threaded</span>", 
"<span class=\"comment\"> * handler finished. unmask if the interrupt has not been disabled and</span>", 
"<span class=\"comment\"> * is marked MASKED.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#irq_finalize_oneshot\">irq_finalize_oneshot</a>(unsigned int <a class=\"id\" href=\"#irq\">irq</a>, struct <a class=\"id\" href=\"#irq_desc\">irq_desc</a> *<a class=\"id\" href=\"#desc\">desc</a>)", 
"{", 
"<a class=\"id\" href=\"#again\">again</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chip_bus_lock\">chip_bus_lock</a>(<a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#desc\">desc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irq\">raw_spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Implausible though it may be we need to protect us against</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the following scenario:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The thread is faster done than the hard interrupt handler</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * on the other CPU. If we unmask the irq line then the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * interrupt can come in again and masks the line, leaves due</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to IRQ_INPROGRESS and the irq line is masked forever.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#IRQ_INPROGRESS\">IRQ_INPROGRESS</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irq\">raw_spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chip_bus_sync_unlock\">chip_bus_sync_unlock</a>(<a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#desc\">desc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#IRQ_DISABLED\">IRQ_DISABLED</a>) && (<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#IRQ_MASKED\">IRQ_MASKED</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#status\">status</a> &= ~<a class=\"id\" href=\"#IRQ_MASKED\">IRQ_MASKED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#unmask\">unmask</a>(<a class=\"id\" href=\"#irq\">irq</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irq\">raw_spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chip_bus_sync_unlock\">chip_bus_sync_unlock</a>(<a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#desc\">desc</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check whether we need to change the affinity of the interrupt thread.</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#irq_thread_check_affinity\">irq_thread_check_affinity</a>(struct <a class=\"id\" href=\"#irq_desc\">irq_desc</a> *<a class=\"id\" href=\"#desc\">desc</a>, struct <a class=\"id\" href=\"#irqaction\">irqaction</a> *<a class=\"id\" href=\"#action\">action</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> <a class=\"id\" href=\"#mask\">mask</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_and_clear_bit\">test_and_clear_bit</a>(<a class=\"id\" href=\"#IRQTF_AFFINITY\">IRQTF_AFFINITY</a>, &amp;<a class=\"id\" href=\"#action\">action</a>-><a class=\"id\" href=\"#thread_flags\">thread_flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In case we are out of memory we set IRQTF_AFFINITY again and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * try again next time</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#alloc_cpumask_var\">alloc_cpumask_var</a>(&amp;<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#IRQTF_AFFINITY\">IRQTF_AFFINITY</a>, &amp;<a class=\"id\" href=\"#action\">action</a>-><a class=\"id\" href=\"#thread_flags\">thread_flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irq\">raw_spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_copy\">cpumask_copy</a>(<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#affinity\">affinity</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irq\">raw_spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_cpus_allowed_ptr\">set_cpus_allowed_ptr</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_cpumask_var\">free_cpumask_var</a>(<a class=\"id\" href=\"#mask\">mask</a>);", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#irq_thread_check_affinity\">irq_thread_check_affinity</a>(struct <a class=\"id\" href=\"#irq_desc\">irq_desc</a> *<a class=\"id\" href=\"#desc\">desc</a>, struct <a class=\"id\" href=\"#irqaction\">irqaction</a> *<a class=\"id\" href=\"#action\">action</a>) { }", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Interrupt handler thread</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#irq_thread\">irq_thread</a>(void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_param\">sched_param</a> <a class=\"id\" href=\"#param\">param</a> = { .<a class=\"id\" href=\"#sched_priority\">sched_priority</a> = <a class=\"id\" href=\"#MAX_USER_RT_PRIO\">MAX_USER_RT_PRIO</a>/2, };", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#irqaction\">irqaction</a> *<a class=\"id\" href=\"#action\">action</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#irq_desc\">irq_desc</a> *<a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#irq_to_desc\">irq_to_desc</a>(<a class=\"id\" href=\"#action\">action</a>-><a class=\"id\" href=\"#irq\">irq</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#wake\">wake</a>, <a class=\"id\" href=\"#oneshot\">oneshot</a> = <a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#IRQ_ONESHOT\">IRQ_ONESHOT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sched_setscheduler\">sched_setscheduler</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#SCHED_FIFO\">SCHED_FIFO</a>, &amp;<a class=\"id\" href=\"#param\">param</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#irqaction\">irqaction</a> = <a class=\"id\" href=\"#action\">action</a>;", 
"", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#irq_wait_for_interrupt\">irq_wait_for_interrupt</a>(<a class=\"id\" href=\"#action\">action</a>)) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#irq_thread_check_affinity\">irq_thread_check_affinity</a>(<a class=\"id\" href=\"#desc\">desc</a>, <a class=\"id\" href=\"#action\">action</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#threads_active\">threads_active</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irq\">raw_spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#IRQ_DISABLED\">IRQ_DISABLED</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * CHECKME: We might need a dedicated</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * IRQ_THREAD_PENDING flag here, which</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * retriggers the thread in check_irq_resend()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * but AFAICT IRQ_PENDING should be fine as it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * retriggers the interrupt itself --- tglx</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#status\">status</a> |= <a class=\"id\" href=\"#IRQ_PENDING\">IRQ_PENDING</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irq\">raw_spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irq\">raw_spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#action\">action</a>-><a class=\"id\" href=\"#thread_fn\">thread_fn</a>(<a class=\"id\" href=\"#action\">action</a>-><a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#action\">action</a>-><a class=\"id\" href=\"#dev_id\">dev_id</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#oneshot\">oneshot</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#irq_finalize_oneshot\">irq_finalize_oneshot</a>(<a class=\"id\" href=\"#action\">action</a>-><a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#desc\">desc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake\">wake</a> = <a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#threads_active\">threads_active</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#wake\">wake</a> && <a class=\"id\" href=\"#waitqueue_active\">waitqueue_active</a>(&amp;<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#wait_for_threads\">wait_for_threads</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up\">wake_up</a>(&amp;<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#wait_for_threads\">wait_for_threads</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Clear irqaction. Otherwise exit_irq_thread() would make</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * fuzz about an active irq thread going into nirvana.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#irqaction\">irqaction</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called from do_exit()</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#exit_irq_thread\">exit_irq_thread</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#irqaction\">irqaction</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/>       \"exiting task \\\"%s\\\" (%d) is an active IRQ thread (irq %d)\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#comm\">comm</a> ? <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#comm\">comm</a> : \"\", <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#irqaction\">irqaction</a>-><a class=\"id\" href=\"#irq\">irq</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Set the THREAD DIED flag to prevent further wakeups of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * soon to be gone threaded handler.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#IRQTF_DIED\">IRQTF_DIED</a>, &amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#irqaction\">irqaction</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Internal function to register an irqaction - typically used to</span>", 
"<span class=\"comment\"> * allocate special interrupts that are part of the architecture.</span>", 
"<span class=\"comment\"> */</span>", 
"static int", 
"<a class=\"id\" href=\"#__setup_irq\">__setup_irq</a>(unsigned int <a class=\"id\" href=\"#irq\">irq</a>, struct <a class=\"id\" href=\"#irq_desc\">irq_desc</a> *<a class=\"id\" href=\"#desc\">desc</a>, struct <a class=\"id\" href=\"#irqaction\">irqaction</a> *<a class=\"id\" href=\"#new\">new</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#irqaction\">irqaction</a> *<a class=\"id\" href=\"#old\">old</a>, **<a class=\"id\" href=\"#old_ptr\">old_ptr</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#old_name\">old_name</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nested\">nested</a>, <a class=\"id\" href=\"#shared\">shared</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#desc\">desc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#chip\">chip</a> == &amp;<a class=\"id\" href=\"#no_irq_chip\">no_irq_chip</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSYS\">ENOSYS</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Some drivers like serial.c use request_irq() heavily,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so we have to be careful not to interfere with a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * running system.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IRQF_SAMPLE_RANDOM\">IRQF_SAMPLE_RANDOM</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This function might sleep, we want to call it first,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * outside of the atomic block.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Yes, this might clear the entropy pool if the wrong</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * driver is attempted to be loaded, without actually</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * installing a new handler, but is this really a problem,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * only the sysadmin is able to do this.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rand_initialize_irq\">rand_initialize_irq</a>(<a class=\"id\" href=\"#irq\">irq</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Oneshot interrupts are not allowed with shared */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IRQF_ONESHOT\">IRQF_ONESHOT</a>) && (<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IRQF_SHARED\">IRQF_SHARED</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check whether the interrupt nests into another interrupt</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * thread.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nested\">nested</a> = <a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#IRQ_NESTED_THREAD\">IRQ_NESTED_THREAD</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nested\">nested</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#thread_fn\">thread_fn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Replace the primary handler which was provided from</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the driver for non nested interrupt handling by the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * dummy function which warns when called.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#handler\">handler</a> = <a class=\"id\" href=\"#irq_nested_primary_handler\">irq_nested_primary_handler</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Create a handler thread when a thread function is supplied</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and the interrupt does not nest into another interrupt</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * thread.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#thread_fn\">thread_fn</a> && !<a class=\"id\" href=\"#nested\">nested</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#kthread_create\">kthread_create</a>(<a class=\"id\" href=\"#irq_thread\">irq_thread</a>, <a class=\"id\" href=\"#new\">new</a>, \"irq/%d-%s\", <a class=\"id\" href=\"#irq\">irq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#t\">t</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We keep the reference to the task struct even if</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the thread dies to avoid that the interrupt code</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * references an already freed task_struct.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_task_struct\">get_task_struct</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#thread\">thread</a> = <a class=\"id\" href=\"#t\">t</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The following block of code has to be executed atomically</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_ptr\">old_ptr</a> = &amp;<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#action\">action</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old\">old</a> = *<a class=\"id\" href=\"#old_ptr\">old_ptr</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#old\">old</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Can't share interrupts unless both agree to and are</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the same type (level, edge, polarity). So both flag</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * fields must have IRQF_SHARED set and the bits which</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * set the trigger type must match.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!((<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#flags\">flags</a>) &amp; <a class=\"id\" href=\"#IRQF_SHARED\">IRQF_SHARED</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    ((<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#flags\">flags</a> ^ <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#flags\">flags</a>) &amp; <a class=\"id\" href=\"#IRQF_TRIGGER_MASK\">IRQF_TRIGGER_MASK</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old_name\">old_name</a> = <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#mismatch\">mismatch</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IRQ_PER_CPU\">CONFIG_IRQ_PER_CPU</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* All handlers must agree on per-cpuness */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IRQF_PERCPU\">IRQF_PERCPU</a>) !=", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IRQF_PERCPU\">IRQF_PERCPU</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#mismatch\">mismatch</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* add new interrupt at end of irq queue */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old_ptr\">old_ptr</a> = &amp;<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old\">old</a> = *<a class=\"id\" href=\"#old_ptr\">old_ptr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} while (<a class=\"id\" href=\"#old\">old</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shared\">shared</a> = 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#shared\">shared</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#irq_chip_set_defaults\">irq_chip_set_defaults</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#chip\">chip</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_waitqueue_head\">init_waitqueue_head</a>(&amp;<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#wait_for_threads\">wait_for_threads</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Setup the type (level, edge polarity) if configured: */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IRQF_TRIGGER_MASK\">IRQF_TRIGGER_MASK</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__irq_set_trigger\">__irq_set_trigger</a>(<a class=\"id\" href=\"#desc\">desc</a>, <a class=\"id\" href=\"#irq\">irq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IRQF_TRIGGER_MASK\">IRQF_TRIGGER_MASK</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_thread\">out_thread</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#compat_irq_chip_set_default_handler\">compat_irq_chip_set_default_handler</a>(<a class=\"id\" href=\"#desc\">desc</a>);", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IRQ_PER_CPU\">CONFIG_IRQ_PER_CPU</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IRQF_PERCPU\">IRQF_PERCPU</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#status\">status</a> |= <a class=\"id\" href=\"#IRQ_PER_CPU\">IRQ_PER_CPU</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#status\">status</a> &= ~(<a class=\"id\" href=\"#IRQ_AUTODETECT\">IRQ_AUTODETECT</a> | <a class=\"id\" href=\"#IRQ_WAITING\">IRQ_WAITING</a> | <a class=\"id\" href=\"#IRQ_ONESHOT\">IRQ_ONESHOT</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#IRQ_INPROGRESS\">IRQ_INPROGRESS</a> | <a class=\"id\" href=\"#IRQ_SPURIOUS_DISABLED\">IRQ_SPURIOUS_DISABLED</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IRQF_ONESHOT\">IRQF_ONESHOT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#status\">status</a> |= <a class=\"id\" href=\"#IRQ_ONESHOT\">IRQ_ONESHOT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#IRQ_NOAUTOEN\">IRQ_NOAUTOEN</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#depth\">depth</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#status\">status</a> &= ~<a class=\"id\" href=\"#IRQ_DISABLED\">IRQ_DISABLED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#startup\">startup</a>(<a class=\"id\" href=\"#irq\">irq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Undo nested disables: */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#depth\">depth</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Exclude IRQ from balancing if requested */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IRQF_NOBALANCING\">IRQF_NOBALANCING</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#status\">status</a> |= <a class=\"id\" href=\"#IRQ_NO_BALANCING\">IRQ_NO_BALANCING</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Set default affinity mask once everything is setup */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#setup_affinity\">setup_affinity</a>(<a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#desc\">desc</a>);", 
"", 
"<span class=\"ts\"/>} else if ((<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IRQF_TRIGGER_MASK\">IRQF_TRIGGER_MASK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&& (<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IRQF_TRIGGER_MASK\">IRQF_TRIGGER_MASK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>!= (<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#IRQ_TYPE_SENSE_MASK\">IRQ_TYPE_SENSE_MASK</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* hope the handler works with the actual trigger mode... */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"IRQ %d uses trigger mode %d; requested %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#irq\">irq</a>, (int)(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#IRQ_TYPE_SENSE_MASK\">IRQ_TYPE_SENSE_MASK</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(int)(<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IRQF_TRIGGER_MASK\">IRQF_TRIGGER_MASK</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#irq\">irq</a> = <a class=\"id\" href=\"#irq\">irq</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#old_ptr\">old_ptr</a> = <a class=\"id\" href=\"#new\">new</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Reset broken irq detection when installing new handler */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#irq_count\">irq_count</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#irqs_unhandled\">irqs_unhandled</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check whether we disabled the irq via the spurious handler</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * before. Reenable it and give it another chance.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#shared\">shared</a> && (<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#IRQ_SPURIOUS_DISABLED\">IRQ_SPURIOUS_DISABLED</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#status\">status</a> &= ~<a class=\"id\" href=\"#IRQ_SPURIOUS_DISABLED\">IRQ_SPURIOUS_DISABLED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__enable_irq\">__enable_irq</a>(<a class=\"id\" href=\"#desc\">desc</a>, <a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Strictly no need to wake it up, but hung_task complains</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * when no hard interrupt wakes the thread up.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#thread\">thread</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_process\">wake_up_process</a>(<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#thread\">thread</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_irq_proc\">register_irq_proc</a>(<a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#desc\">desc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#dir\">dir</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_handler_proc\">register_handler_proc</a>(<a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#mismatch\">mismatch</a>:", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_SHIRQ\">CONFIG_DEBUG_SHIRQ</a>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IRQF_PROBE_SHARED\">IRQF_PROBE_SHARED</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"IRQ handler type mismatch for IRQ %d\\n\", <a class=\"id\" href=\"#irq\">irq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#old_name\">old_name</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"current handler: %s\\n\", <a class=\"id\" href=\"#old_name\">old_name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dump_stack\">dump_stack</a>();", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"", 
"<a class=\"id\" href=\"#out_thread\">out_thread</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#thread\">thread</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#thread\">thread</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#thread\">thread</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#IRQTF_DIED\">IRQTF_DIED</a>, &amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#thread_flags\">thread_flags</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kthread_stop\">kthread_stop</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_task_struct\">put_task_struct</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>setup_irq - setup an interrupt</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@irq: Interrupt line to setup</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@act: irqaction for the interrupt</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Used to statically setup interrupts in the early boot process.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#setup_irq\">setup_irq</a>(unsigned int <a class=\"id\" href=\"#irq\">irq</a>, struct <a class=\"id\" href=\"#irqaction\">irqaction</a> *<a class=\"id\" href=\"#act\">act</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#irq_desc\">irq_desc</a> *<a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#irq_to_desc\">irq_to_desc</a>(<a class=\"id\" href=\"#irq\">irq</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__setup_irq\">__setup_irq</a>(<a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#desc\">desc</a>, <a class=\"id\" href=\"#act\">act</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#setup_irq\">setup_irq</a>);", 
"", 
" <span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Internal function to unregister an irqaction - used to free</span>", 
"<span class=\"comment\"> * regular and special interrupts that are part of the architecture.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#irqaction\">irqaction</a> *<a class=\"id\" href=\"#__free_irq\">__free_irq</a>(unsigned int <a class=\"id\" href=\"#irq\">irq</a>, void *<a class=\"id\" href=\"#dev_id\">dev_id</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#irq_desc\">irq_desc</a> *<a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#irq_to_desc\">irq_to_desc</a>(<a class=\"id\" href=\"#irq\">irq</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#irqaction\">irqaction</a> *<a class=\"id\" href=\"#action\">action</a>, **<a class=\"id\" href=\"#action_ptr\">action_ptr</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN\">WARN</a>(<a class=\"id\" href=\"#in_interrupt\">in_interrupt</a>(), \"Trying to free IRQ %d from IRQ context!\\n\", <a class=\"id\" href=\"#irq\">irq</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#desc\">desc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * There can be multiple actions per IRQ descriptor, find the right</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * one based on the dev_id:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#action_ptr\">action_ptr</a> = &amp;<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#action\">action</a>;", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#action\">action</a> = *<a class=\"id\" href=\"#action_ptr\">action_ptr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#action\">action</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN\">WARN</a>(1, \"Trying to free already-free IRQ %d\\n\", <a class=\"id\" href=\"#irq\">irq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#action\">action</a>-><a class=\"id\" href=\"#dev_id\">dev_id</a> == <a class=\"id\" href=\"#dev_id\">dev_id</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#action_ptr\">action_ptr</a> = &amp;<a class=\"id\" href=\"#action\">action</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Found it - now remove it from the list of entries: */</span>", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#action_ptr\">action_ptr</a> = <a class=\"id\" href=\"#action\">action</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Currently used only by UML, might disappear one day: */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_IRQ_RELEASE_METHOD\">CONFIG_IRQ_RELEASE_METHOD</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#release\">release</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#release\">release</a>(<a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#dev_id\">dev_id</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If this was the last handler, shut down the IRQ line: */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#action\">action</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#status\">status</a> |= <a class=\"id\" href=\"#IRQ_DISABLED\">IRQ_DISABLED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#shutdown\">shutdown</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#shutdown\">shutdown</a>(<a class=\"id\" href=\"#irq\">irq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#disable\">disable</a>(<a class=\"id\" href=\"#irq\">irq</a>);", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* make sure affinity_hint is cleaned up */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#affinity_hint\">affinity_hint</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#affinity_hint\">affinity_hint</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_handler_proc\">unregister_handler_proc</a>(<a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#action\">action</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Make sure it's not being used on another CPU: */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synchronize_irq\">synchronize_irq</a>(<a class=\"id\" href=\"#irq\">irq</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_SHIRQ\">CONFIG_DEBUG_SHIRQ</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It's a shared IRQ -- the driver ought to be prepared for an IRQ</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * event to happen even now it's being freed, so let's make sure that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is so by doing an extra call to the handler ....</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ( We do this after actually deregistering it, to make sure that a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   'real' IRQ doesn't run in * parallel with our fake. )</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#action\">action</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#IRQF_SHARED\">IRQF_SHARED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#action\">action</a>-><a class=\"id\" href=\"#handler\">handler</a>(<a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#dev_id\">dev_id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#action\">action</a>-><a class=\"id\" href=\"#thread\">thread</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#IRQTF_DIED\">IRQTF_DIED</a>, &amp;<a class=\"id\" href=\"#action\">action</a>-><a class=\"id\" href=\"#thread_flags\">thread_flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kthread_stop\">kthread_stop</a>(<a class=\"id\" href=\"#action\">action</a>-><a class=\"id\" href=\"#thread\">thread</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_task_struct\">put_task_struct</a>(<a class=\"id\" href=\"#action\">action</a>-><a class=\"id\" href=\"#thread\">thread</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#action\">action</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>remove_irq - free an interrupt</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@irq: Interrupt line to free</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@act: irqaction for the interrupt</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Used to remove interrupts statically setup by the early boot process.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#remove_irq\">remove_irq</a>(unsigned int <a class=\"id\" href=\"#irq\">irq</a>, struct <a class=\"id\" href=\"#irqaction\">irqaction</a> *<a class=\"id\" href=\"#act\">act</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__free_irq\">__free_irq</a>(<a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#act\">act</a>-><a class=\"id\" href=\"#dev_id\">dev_id</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#remove_irq\">remove_irq</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>free_irq - free an interrupt allocated with request_irq</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@irq: Interrupt line to free</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev_id: Device identity to free</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Remove an interrupt handler. The handler is removed and if the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>interrupt line is no longer in use by any driver it is disabled.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>On a shared IRQ the caller must ensure the interrupt is disabled</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>on the card it drives before calling this function. The function</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>does not return until any executing interrupts for this IRQ</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>have completed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function must not be called from interrupt context.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#free_irq\">free_irq</a>(unsigned int <a class=\"id\" href=\"#irq\">irq</a>, void *<a class=\"id\" href=\"#dev_id\">dev_id</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#irq_desc\">irq_desc</a> *<a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#irq_to_desc\">irq_to_desc</a>(<a class=\"id\" href=\"#irq\">irq</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#desc\">desc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chip_bus_lock\">chip_bus_lock</a>(<a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#desc\">desc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#__free_irq\">__free_irq</a>(<a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#dev_id\">dev_id</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chip_bus_sync_unlock\">chip_bus_sync_unlock</a>(<a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#desc\">desc</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#free_irq\">free_irq</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>request_threaded_irq - allocate an interrupt line</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@irq: Interrupt line to allocate</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@handler: Function to be called when the IRQ occurs.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>  Primary handler for threaded interrupts</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>  If NULL and thread_fn != NULL the default</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>  primary handler is installed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@thread_fn: Function called from the irq handler thread</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>    If NULL, no irq thread is created</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@irqflags: Interrupt type flags</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@devname: An ascii name for the claiming device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev_id: A cookie passed back to the handler function</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This call allocates interrupt resources and enables the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>interrupt line and IRQ handling. From the point this</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>call is made your handler function may be invoked. Since</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>your handler function must clear any interrupt the board</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>raises, you must take care both to initialise your hardware</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and to set up the interrupt handler in the right order.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If you want to set up a threaded irq handler for your device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>then you need to supply @handler and @thread_fn. @handler ist</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>still called in hard interrupt context and has to check</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>whether the interrupt originates from the device. If yes it</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>needs to disable the interrupt on the device and return</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>IRQ_WAKE_THREAD which will wake up the handler thread and run</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@thread_fn. This split handler design is necessary to support</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>shared interrupts.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Dev_id must be globally unique. Normally the address of the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>device data structure is used as the cookie. Since the handler</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>receives this value it makes sense to use it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If your interrupt is shared you must pass a non NULL dev_id</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>as this is required when freeing the interrupt.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Flags:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>IRQF_SHARED<span class=\"ts\"/><span class=\"ts\"/>Interrupt is shared</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>IRQF_SAMPLE_RANDOM<span class=\"ts\"/>The interrupt can be used for entropy</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>IRQF_TRIGGER_*<span class=\"ts\"/><span class=\"ts\"/>Specify active edge(s) or level</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#request_threaded_irq\">request_threaded_irq</a>(unsigned int <a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#irq_handler_t\">irq_handler_t</a> <a class=\"id\" href=\"#handler\">handler</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#irq_handler_t\">irq_handler_t</a> <a class=\"id\" href=\"#thread_fn\">thread_fn</a>, unsigned long <a class=\"id\" href=\"#irqflags\">irqflags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const char *<a class=\"id\" href=\"#devname\">devname</a>, void *<a class=\"id\" href=\"#dev_id\">dev_id</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#irqaction\">irqaction</a> *<a class=\"id\" href=\"#action\">action</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#irq_desc\">irq_desc</a> *<a class=\"id\" href=\"#desc\">desc</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Sanity-check: shared interrupts must pass in a real dev-ID,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * otherwise we'll have trouble later trying to figure out</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * which interrupt is which (messes up the interrupt freeing</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * logic etc).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#irqflags\">irqflags</a> &amp; <a class=\"id\" href=\"#IRQF_SHARED\">IRQF_SHARED</a>) && !<a class=\"id\" href=\"#dev_id\">dev_id</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#irq_to_desc\">irq_to_desc</a>(<a class=\"id\" href=\"#irq\">irq</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#desc\">desc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#IRQ_NOREQUEST\">IRQ_NOREQUEST</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#handler\">handler</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#thread_fn\">thread_fn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handler\">handler</a> = <a class=\"id\" href=\"#irq_default_primary_handler\">irq_default_primary_handler</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#action\">action</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#irqaction\">irqaction</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#action\">action</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#action\">action</a>-><a class=\"id\" href=\"#handler\">handler</a> = <a class=\"id\" href=\"#handler\">handler</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#action\">action</a>-><a class=\"id\" href=\"#thread_fn\">thread_fn</a> = <a class=\"id\" href=\"#thread_fn\">thread_fn</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#action\">action</a>-><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#irqflags\">irqflags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#action\">action</a>-><a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#devname\">devname</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#action\">action</a>-><a class=\"id\" href=\"#dev_id\">dev_id</a> = <a class=\"id\" href=\"#dev_id\">dev_id</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chip_bus_lock\">chip_bus_lock</a>(<a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#desc\">desc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#__setup_irq\">__setup_irq</a>(<a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#desc\">desc</a>, <a class=\"id\" href=\"#action\">action</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chip_bus_sync_unlock\">chip_bus_sync_unlock</a>(<a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#desc\">desc</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#action\">action</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_SHIRQ\">CONFIG_DEBUG_SHIRQ</a>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#retval\">retval</a> && (<a class=\"id\" href=\"#irqflags\">irqflags</a> &amp; <a class=\"id\" href=\"#IRQF_SHARED\">IRQF_SHARED</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * It's a shared IRQ -- the driver ought to be prepared for it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to happen immediately, so let's make sure....</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We disable the irq to make sure that a 'real' IRQ doesn't</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * run in parallel with our fake.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disable_irq\">disable_irq</a>(<a class=\"id\" href=\"#irq\">irq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handler\">handler</a>(<a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#dev_id\">dev_id</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enable_irq\">enable_irq</a>(<a class=\"id\" href=\"#irq\">irq</a>);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#request_threaded_irq\">request_threaded_irq</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>request_any_context_irq - allocate an interrupt line</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@irq: Interrupt line to allocate</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@handler: Function to be called when the IRQ occurs.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>  Threaded handler for threaded interrupts.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@flags: Interrupt type flags</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@name: An ascii name for the claiming device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev_id: A cookie passed back to the handler function</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This call allocates interrupt resources and enables the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>interrupt line and IRQ handling. It selects either a</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>hardirq or threaded handling method depending on the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>context.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>On failure, it returns a negative value. On success,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>it returns either IRQC_IS_HARDIRQ or IRQC_IS_NESTED.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#request_any_context_irq\">request_any_context_irq</a>(unsigned int <a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#irq_handler_t\">irq_handler_t</a> <a class=\"id\" href=\"#handler\">handler</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long <a class=\"id\" href=\"#flags\">flags</a>, const char *<a class=\"id\" href=\"#name\">name</a>, void *<a class=\"id\" href=\"#dev_id\">dev_id</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#irq_desc\">irq_desc</a> *<a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#irq_to_desc\">irq_to_desc</a>(<a class=\"id\" href=\"#irq\">irq</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#desc\">desc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#IRQ_NESTED_THREAD\">IRQ_NESTED_THREAD</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#request_threaded_irq\">request_threaded_irq</a>(<a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#handler\">handler</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#dev_id\">dev_id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return !<a class=\"id\" href=\"#ret\">ret</a> ? <a class=\"id\" href=\"#IRQC_IS_NESTED\">IRQC_IS_NESTED</a> : <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#request_irq\">request_irq</a>(<a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#handler\">handler</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#dev_id\">dev_id</a>);", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#ret\">ret</a> ? <a class=\"id\" href=\"#IRQC_IS_HARDIRQ\">IRQC_IS_HARDIRQ</a> : <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#request_any_context_irq\">request_any_context_irq</a>);", 
];
xr_frag_insert('l/04/b297884c42ac944632bd2d39107a55e15570f2.xr', __xr_tmp);
