var __xr_tmp = [
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Module Name: evgpeutil - GPE utilities</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *****************************************************************************/</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (C) 2000 - 2010, Intel Corp.</span>", 
"<span class=\"comment\"> * All rights reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Redistribution and use in source and binary forms, with or without</span>", 
"<span class=\"comment\"> * modification, are permitted provided that the following conditions</span>", 
"<span class=\"comment\"> * are met:</span>", 
"<span class=\"comment\"> * 1. Redistributions of source code must retain the above copyright</span>", 
"<span class=\"comment\"> *    notice, this list of conditions, and the following disclaimer,</span>", 
"<span class=\"comment\"> *    without modification.</span>", 
"<span class=\"comment\"> * 2. Redistributions in binary form must reproduce at minimum a disclaimer</span>", 
"<span class=\"comment\"> *    substantially similar to the \"NO WARRANTY\" disclaimer below</span>", 
"<span class=\"comment\"> *    (\"Disclaimer\") and any redistribution must be conditioned upon</span>", 
"<span class=\"comment\"> *    including a substantially similar Disclaimer requirement for further</span>", 
"<span class=\"comment\"> *    binary redistribution.</span>", 
"<span class=\"comment\"> * 3. Neither the names of the above-listed copyright holders nor the names</span>", 
"<span class=\"comment\"> *    of any contributors may be used to endorse or promote products derived</span>", 
"<span class=\"comment\"> *    from this software without specific prior written permission.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Alternatively, this software may be distributed under the terms of the</span>", 
"<span class=\"comment\"> * GNU General Public License (\"GPL\") version 2 as published by the Free</span>", 
"<span class=\"comment\"> * Software Foundation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NO WARRANTY</span>", 
"<span class=\"comment\"> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span>", 
"<span class=\"comment\"> * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span>", 
"<span class=\"comment\"> * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR</span>", 
"<span class=\"comment\"> * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span>", 
"<span class=\"comment\"> * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span>", 
"<span class=\"comment\"> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS</span>", 
"<span class=\"comment\"> * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</span>", 
"<span class=\"comment\"> * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,</span>", 
"<span class=\"comment\"> * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING</span>", 
"<span class=\"comment\"> * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE</span>", 
"<span class=\"comment\"> * POSSIBILITY OF SUCH DAMAGES.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#acpi\">acpi</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"accommon.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acevents.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_COMPONENT\">_COMPONENT</a>          <a class=\"id\" href=\"#ACPI_EVENTS\">ACPI_EVENTS</a>", 
"<a class=\"id\" href=\"#ACPI_MODULE_NAME\">ACPI_MODULE_NAME</a>(\"evgpeutil\")", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ev_walk_gpe_list</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  gpe_walk_callback   - Routine called for each GPE block</span>", 
"<span class=\"comment\"> *              Context             - Value passed to callback</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Walk the GPE lists.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ev_walk_gpe_list\">acpi_ev_walk_gpe_list</a>(<a class=\"id\" href=\"#acpi_gpe_callback\">acpi_gpe_callback</a> <a class=\"id\" href=\"#gpe_walk_callback\">gpe_walk_callback</a>, void *<a class=\"id\" href=\"#context\">context</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_gpe_block_info\">acpi_gpe_block_info</a> *<a class=\"id\" href=\"#gpe_block\">gpe_block</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_gpe_xrupt_info\">acpi_gpe_xrupt_info</a> *<a class=\"id\" href=\"#gpe_xrupt_info\">gpe_xrupt_info</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_OK\">AE_OK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_cpu_flags\">acpi_cpu_flags</a> <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ev_walk_gpe_list\">ev_walk_gpe_list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#acpi_os_acquire_lock\">acpi_os_acquire_lock</a>(<a class=\"id\" href=\"#acpi_gbl_gpe_lock\">acpi_gbl_gpe_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Walk the interrupt level descriptor list */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gpe_xrupt_info\">gpe_xrupt_info</a> = <a class=\"id\" href=\"#acpi_gbl_gpe_xrupt_list_head\">acpi_gbl_gpe_xrupt_list_head</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#gpe_xrupt_info\">gpe_xrupt_info</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Walk all Gpe Blocks attached to this interrupt level */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpe_block\">gpe_block</a> = <a class=\"id\" href=\"#gpe_xrupt_info\">gpe_xrupt_info</a>-><a class=\"id\" href=\"#gpe_block_list_head\">gpe_block_list_head</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#gpe_block\">gpe_block</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* One callback per GPE block */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#gpe_walk_callback\">gpe_walk_callback</a>(<a class=\"id\" href=\"#gpe_xrupt_info\">gpe_xrupt_info</a>, <a class=\"id\" href=\"#gpe_block\">gpe_block</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#context\">context</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> == <a class=\"id\" href=\"#AE_CTRL_END\">AE_CTRL_END</a>) {<span class=\"ts\"/><span class=\"comment\">/* Callback abort */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_OK\">AE_OK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock_and_exit\">unlock_and_exit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpe_block\">gpe_block</a> = <a class=\"id\" href=\"#gpe_block\">gpe_block</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpe_xrupt_info\">gpe_xrupt_info</a> = <a class=\"id\" href=\"#gpe_xrupt_info\">gpe_xrupt_info</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>}", 
"", 
"      <a class=\"id\" href=\"#unlock_and_exit\">unlock_and_exit</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_release_lock\">acpi_os_release_lock</a>(<a class=\"id\" href=\"#acpi_gbl_gpe_lock\">acpi_gbl_gpe_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ev_valid_gpe_event</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  gpe_event_info              - Info for this GPE</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      TRUE if the gpe_event is valid</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Validate a GPE event. DO NOT CALL FROM INTERRUPT LEVEL.</span>", 
"<span class=\"comment\"> *              Should be called only when the GPE lists are semaphore locked</span>", 
"<span class=\"comment\"> *              and not subject to change.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#acpi_ev_valid_gpe_event\">acpi_ev_valid_gpe_event</a>(struct <a class=\"id\" href=\"#acpi_gpe_event_info\">acpi_gpe_event_info</a> *<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_gpe_xrupt_info\">acpi_gpe_xrupt_info</a> *<a class=\"id\" href=\"#gpe_xrupt_block\">gpe_xrupt_block</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_gpe_block_info\">acpi_gpe_block_info</a> *<a class=\"id\" href=\"#gpe_block\">gpe_block</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_ENTRY\">ACPI_FUNCTION_ENTRY</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* No need for spin lock since we are not changing any list elements */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Walk the GPE interrupt levels */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gpe_xrupt_block\">gpe_xrupt_block</a> = <a class=\"id\" href=\"#acpi_gbl_gpe_xrupt_list_head\">acpi_gbl_gpe_xrupt_list_head</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#gpe_xrupt_block\">gpe_xrupt_block</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpe_block\">gpe_block</a> = <a class=\"id\" href=\"#gpe_xrupt_block\">gpe_xrupt_block</a>-><a class=\"id\" href=\"#gpe_block_list_head\">gpe_block_list_head</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Walk the GPE blocks on this interrupt level */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#gpe_block\">gpe_block</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((&amp;<a class=\"id\" href=\"#gpe_block\">gpe_block</a>-><a class=\"id\" href=\"#event_info\">event_info</a>[0] <= <a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (&amp;<a class=\"id\" href=\"#gpe_block\">gpe_block</a>-><a class=\"id\" href=\"#event_info\">event_info</a>[<a class=\"id\" href=\"#gpe_block\">gpe_block</a>-><a class=\"id\" href=\"#gpe_count\">gpe_count</a>] &gt;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#TRUE\">TRUE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpe_block\">gpe_block</a> = <a class=\"id\" href=\"#gpe_block\">gpe_block</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpe_xrupt_block\">gpe_xrupt_block</a> = <a class=\"id\" href=\"#gpe_xrupt_block\">gpe_xrupt_block</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#FALSE\">FALSE</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ev_get_gpe_xrupt_block</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  interrupt_number     - Interrupt for a GPE block</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      A GPE interrupt block</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Get or Create a GPE interrupt block. There is one interrupt</span>", 
"<span class=\"comment\"> *              block per unique interrupt level used for GPEs. Should be</span>", 
"<span class=\"comment\"> *              called only when the GPE lists are semaphore locked and not</span>", 
"<span class=\"comment\"> *              subject to change.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"struct <a class=\"id\" href=\"#acpi_gpe_xrupt_info\">acpi_gpe_xrupt_info</a> *<a class=\"id\" href=\"#acpi_ev_get_gpe_xrupt_block\">acpi_ev_get_gpe_xrupt_block</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#interrupt_number\">interrupt_number</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_gpe_xrupt_info\">acpi_gpe_xrupt_info</a> *<a class=\"id\" href=\"#next_gpe_xrupt\">next_gpe_xrupt</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_gpe_xrupt_info\">acpi_gpe_xrupt_info</a> *<a class=\"id\" href=\"#gpe_xrupt\">gpe_xrupt</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_cpu_flags\">acpi_cpu_flags</a> <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ev_get_gpe_xrupt_block\">ev_get_gpe_xrupt_block</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* No need for lock since we are not changing any list elements here */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next_gpe_xrupt\">next_gpe_xrupt</a> = <a class=\"id\" href=\"#acpi_gbl_gpe_xrupt_list_head\">acpi_gbl_gpe_xrupt_list_head</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#next_gpe_xrupt\">next_gpe_xrupt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#next_gpe_xrupt\">next_gpe_xrupt</a>-><a class=\"id\" href=\"#interrupt_number\">interrupt_number</a> == <a class=\"id\" href=\"#interrupt_number\">interrupt_number</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_PTR\">return_PTR</a>(<a class=\"id\" href=\"#next_gpe_xrupt\">next_gpe_xrupt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_gpe_xrupt\">next_gpe_xrupt</a> = <a class=\"id\" href=\"#next_gpe_xrupt\">next_gpe_xrupt</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Not found, must allocate a new xrupt descriptor */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gpe_xrupt\">gpe_xrupt</a> = <a class=\"id\" href=\"#ACPI_ALLOCATE_ZEROED\">ACPI_ALLOCATE_ZEROED</a>(sizeof(struct <a class=\"id\" href=\"#acpi_gpe_xrupt_info\">acpi_gpe_xrupt_info</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#gpe_xrupt\">gpe_xrupt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_PTR\">return_PTR</a>(<a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gpe_xrupt\">gpe_xrupt</a>-><a class=\"id\" href=\"#interrupt_number\">interrupt_number</a> = <a class=\"id\" href=\"#interrupt_number\">interrupt_number</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Install new interrupt descriptor with spin lock */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#acpi_os_acquire_lock\">acpi_os_acquire_lock</a>(<a class=\"id\" href=\"#acpi_gbl_gpe_lock\">acpi_gbl_gpe_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_gbl_gpe_xrupt_list_head\">acpi_gbl_gpe_xrupt_list_head</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_gpe_xrupt\">next_gpe_xrupt</a> = <a class=\"id\" href=\"#acpi_gbl_gpe_xrupt_list_head\">acpi_gbl_gpe_xrupt_list_head</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#next_gpe_xrupt\">next_gpe_xrupt</a>-><a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_gpe_xrupt\">next_gpe_xrupt</a> = <a class=\"id\" href=\"#next_gpe_xrupt\">next_gpe_xrupt</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_gpe_xrupt\">next_gpe_xrupt</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#gpe_xrupt\">gpe_xrupt</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpe_xrupt\">gpe_xrupt</a>-><a class=\"id\" href=\"#previous\">previous</a> = <a class=\"id\" href=\"#next_gpe_xrupt\">next_gpe_xrupt</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_gpe_xrupt_list_head\">acpi_gbl_gpe_xrupt_list_head</a> = <a class=\"id\" href=\"#gpe_xrupt\">gpe_xrupt</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_release_lock\">acpi_os_release_lock</a>(<a class=\"id\" href=\"#acpi_gbl_gpe_lock\">acpi_gbl_gpe_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Install new interrupt handler if not SCI_INT */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#interrupt_number\">interrupt_number</a> != <a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#sci_interrupt\">sci_interrupt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_os_install_interrupt_handler\">acpi_os_install_interrupt_handler</a>(<a class=\"id\" href=\"#interrupt_number\">interrupt_number</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#acpi_ev_gpe_xrupt_handler\">acpi_ev_gpe_xrupt_handler</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#gpe_xrupt\">gpe_xrupt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"Could not install GPE interrupt handler at level 0x%X\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#interrupt_number\">interrupt_number</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_PTR\">return_PTR</a>(<a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_PTR\">return_PTR</a>(<a class=\"id\" href=\"#gpe_xrupt\">gpe_xrupt</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ev_delete_gpe_xrupt</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  gpe_xrupt       - A GPE interrupt info block</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Remove and free a gpe_xrupt block. Remove an associated</span>", 
"<span class=\"comment\"> *              interrupt handler if not the SCI interrupt.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_ev_delete_gpe_xrupt\">acpi_ev_delete_gpe_xrupt</a>(struct <a class=\"id\" href=\"#acpi_gpe_xrupt_info\">acpi_gpe_xrupt_info</a> *<a class=\"id\" href=\"#gpe_xrupt\">gpe_xrupt</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_cpu_flags\">acpi_cpu_flags</a> <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ev_delete_gpe_xrupt\">ev_delete_gpe_xrupt</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We never want to remove the SCI interrupt handler */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#gpe_xrupt\">gpe_xrupt</a>-><a class=\"id\" href=\"#interrupt_number\">interrupt_number</a> == <a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#sci_interrupt\">sci_interrupt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpe_xrupt\">gpe_xrupt</a>-><a class=\"id\" href=\"#gpe_block_list_head\">gpe_block_list_head</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Disable this interrupt */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_os_remove_interrupt_handler\">acpi_os_remove_interrupt_handler</a>(<a class=\"id\" href=\"#gpe_xrupt\">gpe_xrupt</a>-><a class=\"id\" href=\"#interrupt_number\">interrupt_number</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#acpi_ev_gpe_xrupt_handler\">acpi_ev_gpe_xrupt_handler</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Unlink the interrupt block with lock */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#acpi_os_acquire_lock\">acpi_os_acquire_lock</a>(<a class=\"id\" href=\"#acpi_gbl_gpe_lock\">acpi_gbl_gpe_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#gpe_xrupt\">gpe_xrupt</a>-><a class=\"id\" href=\"#previous\">previous</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpe_xrupt\">gpe_xrupt</a>-><a class=\"id\" href=\"#previous\">previous</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#gpe_xrupt\">gpe_xrupt</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* No previous, update list head */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_gpe_xrupt_list_head\">acpi_gbl_gpe_xrupt_list_head</a> = <a class=\"id\" href=\"#gpe_xrupt\">gpe_xrupt</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#gpe_xrupt\">gpe_xrupt</a>-><a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpe_xrupt\">gpe_xrupt</a>-><a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#previous\">previous</a> = <a class=\"id\" href=\"#gpe_xrupt\">gpe_xrupt</a>-><a class=\"id\" href=\"#previous\">previous</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_release_lock\">acpi_os_release_lock</a>(<a class=\"id\" href=\"#acpi_gbl_gpe_lock\">acpi_gbl_gpe_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Free the block */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FREE\">ACPI_FREE</a>(<a class=\"id\" href=\"#gpe_xrupt\">gpe_xrupt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ev_delete_gpe_handlers</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  gpe_xrupt_info      - GPE Interrupt info</span>", 
"<span class=\"comment\"> *              gpe_block           - Gpe Block info</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Delete all Handler objects found in the GPE data structs.</span>", 
"<span class=\"comment\"> *              Used only prior to termination.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ev_delete_gpe_handlers\">acpi_ev_delete_gpe_handlers</a>(struct <a class=\"id\" href=\"#acpi_gpe_xrupt_info\">acpi_gpe_xrupt_info</a> *<a class=\"id\" href=\"#gpe_xrupt_info\">gpe_xrupt_info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#acpi_gpe_block_info\">acpi_gpe_block_info</a> *<a class=\"id\" href=\"#gpe_block\">gpe_block</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    void *<a class=\"id\" href=\"#context\">context</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_gpe_event_info\">acpi_gpe_event_info</a> *<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#j\">j</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ev_delete_gpe_handlers\">ev_delete_gpe_handlers</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Examine each GPE Register within the block */</span>", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#gpe_block\">gpe_block</a>-><a class=\"id\" href=\"#register_count\">register_count</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Now look at the individual GPEs in this byte register */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#ACPI_GPE_REGISTER_WIDTH\">ACPI_GPE_REGISTER_WIDTH</a>; <a class=\"id\" href=\"#j\">j</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a> = &amp;<a class=\"id\" href=\"#gpe_block\">gpe_block</a>-><a class=\"id\" href=\"#event_info\">event_info</a>[((<a class=\"id\" href=\"#acpi_size\">acpi_size</a>) <a class=\"id\" href=\"#i\">i</a> *", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_GPE_REGISTER_WIDTH\">ACPI_GPE_REGISTER_WIDTH</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>+ <a class=\"id\" href=\"#j\">j</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ACPI_GPE_DISPATCH_MASK\">ACPI_GPE_DISPATCH_MASK</a>) ==", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_GPE_DISPATCH_HANDLER\">ACPI_GPE_DISPATCH_HANDLER</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FREE\">ACPI_FREE</a>(<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>-><a class=\"id\" href=\"#dispatch\">dispatch</a>.<a class=\"id\" href=\"#handler\">handler</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>-><a class=\"id\" href=\"#dispatch\">dispatch</a>.<a class=\"id\" href=\"#handler\">handler</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>-><a class=\"id\" href=\"#flags\">flags</a> &=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    ~<a class=\"id\" href=\"#ACPI_GPE_DISPATCH_MASK\">ACPI_GPE_DISPATCH_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"}", 
];
xr_frag_insert('l/05/3d44c7b204132c4e33f88ceaf0d1001d8c6e18.xr', __xr_tmp);
