var __xr_tmp = [
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timekeeper\">timekeeper</a>.<a class=\"id\" href=\"#xtime_nsec\">xtime_nsec</a> = (<a class=\"id\" href=\"#s64\">s64</a>)<a class=\"id\" href=\"#xtime\">xtime</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> << <a class=\"id\" href=\"#timekeeper\">timekeeper</a>.<a class=\"id\" href=\"#shift\">shift</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * With NO_HZ we may have to accumulate many cycle_intervals</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (think \"ticks\") worth of time at once. To do this efficiently,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we calculate the largest doubling multiple of cycle_intervals</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that is smaller then the offset. We then accumulate that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * chunk in one go, and then try to consume the next smaller</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * doubled multiple.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shift\">shift</a> = <a class=\"id\" href=\"#ilog2\">ilog2</a>(<a class=\"id\" href=\"#offset\">offset</a>) - <a class=\"id\" href=\"#ilog2\">ilog2</a>(<a class=\"id\" href=\"#timekeeper\">timekeeper</a>.<a class=\"id\" href=\"#cycle_interval\">cycle_interval</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shift\">shift</a> = <a class=\"id\" href=\"#max\">max</a>(0, <a class=\"id\" href=\"#shift\">shift</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Bound shift to one less then what overflows tick_length */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#maxshift\">maxshift</a> = (8*sizeof(<a class=\"id\" href=\"#tick_length\">tick_length</a>) - (<a class=\"id\" href=\"#ilog2\">ilog2</a>(<a class=\"id\" href=\"#tick_length\">tick_length</a>)+1)) - 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shift\">shift</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#shift\">shift</a>, <a class=\"id\" href=\"#maxshift\">maxshift</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#offset\">offset</a> >= <a class=\"id\" href=\"#timekeeper\">timekeeper</a>.<a class=\"id\" href=\"#cycle_interval\">cycle_interval</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#logarithmic_accumulation\">logarithmic_accumulation</a>(<a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#shift\">shift</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if(<a class=\"id\" href=\"#offset\">offset</a> &lt; <a class=\"id\" href=\"#timekeeper\">timekeeper</a>.<a class=\"id\" href=\"#cycle_interval\">cycle_interval</a><<<a class=\"id\" href=\"#shift\">shift</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shift\">shift</a>--;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* correct the clock when NTP error is too big */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timekeeping_adjust\">timekeeping_adjust</a>(<a class=\"id\" href=\"#offset\">offset</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Since in the loop above, we accumulate any amount of time</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in xtime_nsec over a second into xtime.tv_sec, its possible for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * xtime_nsec to be fairly small after the loop. Further, if we're</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * slightly speeding the clocksource up in timekeeping_adjust(),</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * its possible the required corrective factor to xtime_nsec could</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cause it to underflow.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now, we cannot simply roll the accumulated second back, since</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the NTP subsystem has been notified via second_overflow. So</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * instead we push xtime_nsec forward by the amount we underflowed,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and add that amount into the error.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We'll correct this error next time through this function, when</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * xtime_nsec is not as small.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>((<a class=\"id\" href=\"#s64\">s64</a>)<a class=\"id\" href=\"#timekeeper\">timekeeper</a>.<a class=\"id\" href=\"#xtime_nsec\">xtime_nsec</a> &lt; 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#neg\">neg</a> = -(<a class=\"id\" href=\"#s64\">s64</a>)<a class=\"id\" href=\"#timekeeper\">timekeeper</a>.<a class=\"id\" href=\"#xtime_nsec\">xtime_nsec</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timekeeper\">timekeeper</a>.<a class=\"id\" href=\"#xtime_nsec\">xtime_nsec</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timekeeper\">timekeeper</a>.<a class=\"id\" href=\"#ntp_error\">ntp_error</a> += <a class=\"id\" href=\"#neg\">neg</a> << <a class=\"id\" href=\"#timekeeper\">timekeeper</a>.<a class=\"id\" href=\"#ntp_error_shift\">ntp_error_shift</a>;", 
"<span class=\"ts\"/>}", 
"", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Store full nanoseconds into xtime after rounding it up and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * add the remainder to the error difference.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xtime\">xtime</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> =<span class=\"ts\"/>((<a class=\"id\" href=\"#s64\">s64</a>) <a class=\"id\" href=\"#timekeeper\">timekeeper</a>.<a class=\"id\" href=\"#xtime_nsec\">xtime_nsec</a> >> <a class=\"id\" href=\"#timekeeper\">timekeeper</a>.<a class=\"id\" href=\"#shift\">shift</a>) + 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timekeeper\">timekeeper</a>.<a class=\"id\" href=\"#xtime_nsec\">xtime_nsec</a> -= (<a class=\"id\" href=\"#s64\">s64</a>) <a class=\"id\" href=\"#xtime\">xtime</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> << <a class=\"id\" href=\"#timekeeper\">timekeeper</a>.<a class=\"id\" href=\"#shift\">shift</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timekeeper\">timekeeper</a>.<a class=\"id\" href=\"#ntp_error\">ntp_error</a> +=<span class=\"ts\"/><a class=\"id\" href=\"#timekeeper\">timekeeper</a>.<a class=\"id\" href=\"#xtime_nsec\">xtime_nsec</a> <<", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timekeeper\">timekeeper</a>.<a class=\"id\" href=\"#ntp_error_shift\">ntp_error_shift</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Finally, make sure that after the rounding</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * xtime.tv_nsec isn't larger then NSEC_PER_SEC</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#xtime\">xtime</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> >= <a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xtime\">xtime</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> -= <a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xtime\">xtime</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#second_overflow\">second_overflow</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* check to see if there is a new clocksource to use */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_vsyscall\">update_vsyscall</a>(&amp;<a class=\"id\" href=\"#xtime\">xtime</a>, &amp;<a class=\"id\" href=\"#wall_to_monotonic\">wall_to_monotonic</a>, <a class=\"id\" href=\"#timekeeper\">timekeeper</a>.<a class=\"id\" href=\"#clock\">clock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timekeeper\">timekeeper</a>.<a class=\"id\" href=\"#mult\">mult</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * getboottime - Return the real time of system boot.</span>", 
"<span class=\"comment\"> * @ts:<span class=\"ts\"/><span class=\"ts\"/>pointer to the timespec to be set</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the time of day in a timespec.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is based on the wall_to_monotonic offset and the total suspend</span>", 
"<span class=\"comment\"> * time. Calls to settimeofday will affect the value returned (which</span>", 
"<span class=\"comment\"> * basically means that however wrong your real time clock is at boot time,</span>", 
"<span class=\"comment\"> * you get the right time here).</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#getboottime\">getboottime</a>(struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#ts\">ts</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#boottime\">boottime</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a> = <a class=\"id\" href=\"#wall_to_monotonic\">wall_to_monotonic</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a> + <a class=\"id\" href=\"#total_sleep_time\">total_sleep_time</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> = <a class=\"id\" href=\"#wall_to_monotonic\">wall_to_monotonic</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> + <a class=\"id\" href=\"#total_sleep_time\">total_sleep_time</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a>", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_normalized_timespec\">set_normalized_timespec</a>(<a class=\"id\" href=\"#ts\">ts</a>, -<a class=\"id\" href=\"#boottime\">boottime</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a>, -<a class=\"id\" href=\"#boottime\">boottime</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#getboottime\">getboottime</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * monotonic_to_bootbased - Convert the monotonic time to boot based.</span>", 
"<span class=\"comment\"> * @ts:<span class=\"ts\"/><span class=\"ts\"/>pointer to the timespec to be converted</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#monotonic_to_bootbased\">monotonic_to_bootbased</a>(struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#ts\">ts</a>)", 
"{", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#ts\">ts</a> = <a class=\"id\" href=\"#timespec_add\">timespec_add</a>(*<a class=\"id\" href=\"#ts\">ts</a>, <a class=\"id\" href=\"#total_sleep_time\">total_sleep_time</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#monotonic_to_bootbased\">monotonic_to_bootbased</a>);", 
"", 
"unsigned long <a class=\"id\" href=\"#get_seconds\">get_seconds</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#xtime\">xtime</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#get_seconds\">get_seconds</a>);", 
"", 
"struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#__current_kernel_time\">__current_kernel_time</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#xtime\">xtime</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#__get_wall_to_monotonic\">__get_wall_to_monotonic</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#wall_to_monotonic\">wall_to_monotonic</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#current_kernel_time\">current_kernel_time</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#now\">now</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#seq\">seq</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq\">seq</a> = <a class=\"id\" href=\"#read_seqbegin\">read_seqbegin</a>(&amp;<a class=\"id\" href=\"#xtime_lock\">xtime_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#xtime\">xtime</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#read_seqretry\">read_seqretry</a>(&amp;<a class=\"id\" href=\"#xtime_lock\">xtime_lock</a>, <a class=\"id\" href=\"#seq\">seq</a>));", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#now\">now</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#current_kernel_time\">current_kernel_time</a>);", 
"", 
"struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#get_monotonic_coarse\">get_monotonic_coarse</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#now\">now</a>, <a class=\"id\" href=\"#mono\">mono</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#seq\">seq</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq\">seq</a> = <a class=\"id\" href=\"#read_seqbegin\">read_seqbegin</a>(&amp;<a class=\"id\" href=\"#xtime_lock\">xtime_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#xtime\">xtime</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mono\">mono</a> = <a class=\"id\" href=\"#wall_to_monotonic\">wall_to_monotonic</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#read_seqretry\">read_seqretry</a>(&amp;<a class=\"id\" href=\"#xtime_lock\">xtime_lock</a>, <a class=\"id\" href=\"#seq\">seq</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_normalized_timespec\">set_normalized_timespec</a>(&amp;<a class=\"id\" href=\"#now\">now</a>, <a class=\"id\" href=\"#now\">now</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a> + <a class=\"id\" href=\"#mono\">mono</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#now\">now</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> + <a class=\"id\" href=\"#mono\">mono</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#now\">now</a>;", 
"}", 
];
xr_frag_insert('l/05/6214aa1de70201d724b8e3f8642949e24e49b3.xr', __xr_tmp);
