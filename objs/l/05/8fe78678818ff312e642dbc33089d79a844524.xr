var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  Generic cache management functions. Everything is arch-specific,  </span>", 
"<span class=\"comment\"> *  but this header exists to make sure the defines/functions can be</span>", 
"<span class=\"comment\"> *  used in a generic way.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  2000-11-13  Arjan van de Ven   &lt;arjan@fenrus.demon.nl&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_PREFETCH_H\">_LINUX_PREFETCH_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_PREFETCH_H\">_LINUX_PREFETCH_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#processor\">processor</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#cache\">cache</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/>prefetch(x) attempts to pre-emptively get the memory pointed to</span>", 
"<span class=\"comment\"><span class=\"ts\"/>by address \"x\" into the CPU L1 cache. </span>", 
"<span class=\"comment\"><span class=\"ts\"/>prefetch(x) should not cause any kind of exception, prefetch(0) is</span>", 
"<span class=\"comment\"><span class=\"ts\"/>specifically ok.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"><span class=\"ts\"/>prefetch() should be defined by the architecture, if not, the </span>", 
"<span class=\"comment\"><span class=\"ts\"/>#define below provides a no-op define.<span class=\"ts\"/></span>", 
"<span class=\"comment\"><span class=\"ts\"/></span>", 
"<span class=\"comment\"><span class=\"ts\"/>There are 3 prefetch() macros:</span>", 
"<span class=\"comment\"><span class=\"ts\"/></span>", 
"<span class=\"comment\"><span class=\"ts\"/>prefetch(x)  <span class=\"ts\"/>- prefetches the cacheline at \"x\" for read</span>", 
"<span class=\"comment\"><span class=\"ts\"/>prefetchw(x)<span class=\"ts\"/>- prefetches the cacheline at \"x\" for write</span>", 
"<span class=\"comment\"><span class=\"ts\"/>spin_lock_prefetch(x) - prefetches the spinlock *x for taking</span>", 
"<span class=\"comment\"><span class=\"ts\"/></span>", 
"<span class=\"comment\"><span class=\"ts\"/>there is also PREFETCH_STRIDE which is the architecure-prefered </span>", 
"<span class=\"comment\"><span class=\"ts\"/>\"lookahead\" size for prefetching streamed operations.</span>", 
"<span class=\"comment\"><span class=\"ts\"/></span>", 
"<span class=\"comment\">*/</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#ARCH_HAS_PREFETCH\">ARCH_HAS_PREFETCH</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#prefetch\">prefetch</a>(<a class=\"id\" href=\"#x\">x</a>) <a class=\"id\" href=\"#__builtin_prefetch\">__builtin_prefetch</a>(<a class=\"id\" href=\"#x\">x</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#ARCH_HAS_PREFETCHW\">ARCH_HAS_PREFETCHW</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#prefetchw\">prefetchw</a>(<a class=\"id\" href=\"#x\">x</a>) <a class=\"id\" href=\"#__builtin_prefetch\">__builtin_prefetch</a>(<a class=\"id\" href=\"#x\">x</a>,1)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#ARCH_HAS_SPINLOCK_PREFETCH\">ARCH_HAS_SPINLOCK_PREFETCH</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#spin_lock_prefetch\">spin_lock_prefetch</a>(<a class=\"id\" href=\"#x\">x</a>) <a class=\"id\" href=\"#prefetchw\">prefetchw</a>(<a class=\"id\" href=\"#x\">x</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#PREFETCH_STRIDE\">PREFETCH_STRIDE</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PREFETCH_STRIDE\">PREFETCH_STRIDE</a> (4*<a class=\"id\" href=\"#L1_CACHE_BYTES\">L1_CACHE_BYTES</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#prefetch_range\">prefetch_range</a>(void *<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#ARCH_HAS_PREFETCH\">ARCH_HAS_PREFETCH</a>", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#cp\">cp</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#cp\">cp</a> = <a class=\"id\" href=\"#addr\">addr</a>; <a class=\"id\" href=\"#cp\">cp</a> &lt; <a class=\"id\" href=\"#end\">end</a>; <a class=\"id\" href=\"#cp\">cp</a> += <a class=\"id\" href=\"#PREFETCH_STRIDE\">PREFETCH_STRIDE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prefetch\">prefetch</a>(<a class=\"id\" href=\"#cp\">cp</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/05/8fe78678818ff312e642dbc33089d79a844524.xr', __xr_tmp);
