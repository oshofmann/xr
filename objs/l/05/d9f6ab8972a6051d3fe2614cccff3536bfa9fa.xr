var __xr_tmp = [
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#vm_flags\">vm_flags</a>;<span class=\"ts\"/><span class=\"comment\">/* VMA vm_flags */</span>", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#vm_start\">vm_start</a>;<span class=\"ts\"/><span class=\"comment\">/* start address of region */</span>", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#vm_end\">vm_end</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* region initialised to here */</span>", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#vm_top\">vm_top</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* region allocated to here */</span>", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a>;<span class=\"ts\"/><span class=\"comment\">/* the offset in vm_file corresponding to vm_start */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a><span class=\"ts\"/>*<a class=\"id\" href=\"#vm_file\">vm_file</a>;<span class=\"ts\"/><span class=\"comment\">/* the backing file or NULL */</span>", 
"", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vm_usage\">vm_usage</a>;<span class=\"ts\"/><span class=\"comment\">/* region usage count (access under nommu_region_sem) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vm_icache_flushed\">vm_icache_flushed</a> : 1; <span class=\"comment\">/* true if the icache has been flushed for</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>* this region */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This struct defines a memory VMM memory area. There is one of these</span>", 
"<span class=\"comment\"> * per VM-area/task.  A VM area is any part of the process virtual memory</span>", 
"<span class=\"comment\"> * space that has a special rule for the page-fault handlers (ie a shared</span>", 
"<span class=\"comment\"> * library, the executable area etc).</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> * <a class=\"id\" href=\"#vm_mm\">vm_mm</a>;<span class=\"ts\"/><span class=\"comment\">/* The address space we belong to. */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#vm_start\">vm_start</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Our start address within vm_mm. */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#vm_end\">vm_end</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The first byte after our end address</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   within vm_mm. */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* linked list of VM areas per task, sorted by address */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vm_next\">vm_next</a>, *<a class=\"id\" href=\"#vm_prev\">vm_prev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#vm_page_prot\">vm_page_prot</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Access permissions of this VMA. */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#vm_flags\">vm_flags</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Flags, see mm.h. */</span>", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> <a class=\"id\" href=\"#vm_rb\">vm_rb</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For areas with an address space and backing store,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * linkage into the address_space-&gt;i_mmap prio tree, or</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * linkage to the list of like vmas hanging off its node, or</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * linkage of vma in the address_space-&gt;i_mmap_nonlinear list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>union {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#parent\">parent</a>;<span class=\"ts\"/><span class=\"comment\">/* aligns with prio_tree_node parent */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} <a class=\"id\" href=\"#vm_set\">vm_set</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#raw_prio_tree_node\">raw_prio_tree_node</a> <a class=\"id\" href=\"#prio_tree_node\">prio_tree_node</a>;", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#shared\">shared</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A file's MAP_PRIVATE vma can be in both i_mmap tree and anon_vma</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * list, after a COW of one of the file pages.<span class=\"ts\"/>A MAP_SHARED vma</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * can only be in the i_mmap tree.  An anonymous MAP_PRIVATE, stack</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * or brk vma (with NULL file) can only be in an anon_vma list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#anon_vma_chain\">anon_vma_chain</a>; <span class=\"comment\">/* Serialized by mmap_sem &amp;</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  * page_table_lock */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#anon_vma\">anon_vma</a> *<a class=\"id\" href=\"#anon_vma\">anon_vma</a>;<span class=\"ts\"/><span class=\"comment\">/* Serialized by page_table_lock */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Function pointers to deal with this struct. */</span>", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#vm_operations_struct\">vm_operations_struct</a> *<a class=\"id\" href=\"#vm_ops\">vm_ops</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Information about our backing store: */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Offset (within vm_file) in PAGE_SIZE</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   units, *not* PAGE_CACHE_SIZE */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> * <a class=\"id\" href=\"#vm_file\">vm_file</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* File we map to (can be NULL). */</span>", 
"<span class=\"ts\"/>void * <a class=\"id\" href=\"#vm_private_data\">vm_private_data</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* was vm_pte (shared mem) */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#vm_truncate_count\">vm_truncate_count</a>;<span class=\"comment\">/* truncate_count or restart_addr */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_MMU\">CONFIG_MMU</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_region\">vm_region</a> *<a class=\"id\" href=\"#vm_region\">vm_region</a>;<span class=\"ts\"/><span class=\"comment\">/* NOMMU mapping region */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#vm_policy\">vm_policy</a>;<span class=\"ts\"/><span class=\"comment\">/* NUMA policy for the VMA */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"struct <a class=\"id\" href=\"#core_thread\">core_thread</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#core_thread\">core_thread</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#core_state\">core_state</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#nr_threads\">nr_threads</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#core_thread\">core_thread</a> <a class=\"id\" href=\"#dumper\">dumper</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#completion\">completion</a> <a class=\"id\" href=\"#startup\">startup</a>;", 
"};", 
"", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MM_FILEPAGES\">MM_FILEPAGES</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MM_ANONPAGES\">MM_ANONPAGES</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MM_SWAPENTS\">MM_SWAPENTS</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NR_MM_COUNTERS\">NR_MM_COUNTERS</a>", 
"};", 
"", 
"#if <a class=\"id\" href=\"#USE_SPLIT_PTLOCKS\">USE_SPLIT_PTLOCKS</a> && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_MMU\">CONFIG_MMU</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SPLIT_RSS_COUNTING\">SPLIT_RSS_COUNTING</a>", 
"struct <a class=\"id\" href=\"#mm_rss_stat\">mm_rss_stat</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_long_t\">atomic_long_t</a> <a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#NR_MM_COUNTERS\">NR_MM_COUNTERS</a>];", 
"};", 
"<span class=\"comment\">/* per-thread cached information, */</span>", 
"struct <a class=\"id\" href=\"#task_rss_stat\">task_rss_stat</a> {", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#events\">events</a>;<span class=\"ts\"/><span class=\"comment\">/* for synchronization threshold */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#NR_MM_COUNTERS\">NR_MM_COUNTERS</a>];", 
"};", 
"#else  <span class=\"comment\">/* !USE_SPLIT_PTLOCKS */</span>", 
"struct <a class=\"id\" href=\"#mm_rss_stat\">mm_rss_stat</a> {", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#NR_MM_COUNTERS\">NR_MM_COUNTERS</a>];", 
"};", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !USE_SPLIT_PTLOCKS */</span>", 
"", 
"struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> * <a class=\"id\" href=\"#mmap\">mmap</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* list of VMAs */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_root\">rb_root</a> <a class=\"id\" href=\"#mm_rb\">mm_rb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> * <a class=\"id\" href=\"#mmap_cache\">mmap_cache</a>;<span class=\"ts\"/><span class=\"comment\">/* last find_vma result */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MMU\">CONFIG_MMU</a>", 
"<span class=\"ts\"/>unsigned long (*<a class=\"id\" href=\"#get_unmapped_area\">get_unmapped_area</a>) (struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pgoff\">pgoff</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#unmap_area\">unmap_area</a>) (struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mmap_base\">mmap_base</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* base of mmap area */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#task_size\">task_size</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* size of task vm space */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#cached_hole_size\">cached_hole_size</a>; <span class=\"ts\"/><span class=\"comment\">/* if non-zero, the largest hole below free_area_cache */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#free_area_cache\">free_area_cache</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* first hole of size cached_hole_size or larger */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_t\">pgd_t</a> * <a class=\"id\" href=\"#pgd\">pgd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#mm_users\">mm_users</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* How many users with user space? */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#mm_count\">mm_count</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* How many references to \"struct mm_struct\" (users count as 1) */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#map_count\">map_count</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* number of VMAs */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rw_semaphore\">rw_semaphore</a> <a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#page_table_lock\">page_table_lock</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Protects page tables and some counters */</span>", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#mmlist\">mmlist</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* List of maybe swapped mm's.<span class=\"ts\"/>These are globally strung</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * together off init_mm.mmlist, and are protected</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * by mmlist_lock</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"", 
"", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#hiwater_rss\">hiwater_rss</a>;<span class=\"ts\"/><span class=\"comment\">/* High-watermark of RSS usage */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#hiwater_vm\">hiwater_vm</a>;<span class=\"ts\"/><span class=\"comment\">/* High-water virtual memory usage */</span>", 
"", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#total_vm\">total_vm</a>, <a class=\"id\" href=\"#locked_vm\">locked_vm</a>, <a class=\"id\" href=\"#shared_vm\">shared_vm</a>, <a class=\"id\" href=\"#exec_vm\">exec_vm</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#stack_vm\">stack_vm</a>, <a class=\"id\" href=\"#reserved_vm\">reserved_vm</a>, <a class=\"id\" href=\"#def_flags\">def_flags</a>, <a class=\"id\" href=\"#nr_ptes\">nr_ptes</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start_code\">start_code</a>, <a class=\"id\" href=\"#end_code\">end_code</a>, <a class=\"id\" href=\"#start_data\">start_data</a>, <a class=\"id\" href=\"#end_data\">end_data</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start_brk\">start_brk</a>, <a class=\"id\" href=\"#brk\">brk</a>, <a class=\"id\" href=\"#start_stack\">start_stack</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#arg_start\">arg_start</a>, <a class=\"id\" href=\"#arg_end\">arg_end</a>, <a class=\"id\" href=\"#env_start\">env_start</a>, <a class=\"id\" href=\"#env_end\">env_end</a>;", 
"", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#saved_auxv\">saved_auxv</a>[<a class=\"id\" href=\"#AT_VECTOR_SIZE\">AT_VECTOR_SIZE</a>]; <span class=\"comment\">/* for /proc/PID/auxv */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Special counters, in some configurations protected by the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * page_table_lock, in other configurations by being atomic.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_rss_stat\">mm_rss_stat</a> <a class=\"id\" href=\"#rss_stat\">rss_stat</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#linux_binfmt\">linux_binfmt</a> *<a class=\"id\" href=\"#binfmt\">binfmt</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_t\">cpumask_t</a> <a class=\"id\" href=\"#cpu_vm_mask\">cpu_vm_mask</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Architecture-specific MM context */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm_context_t\">mm_context_t</a> <a class=\"id\" href=\"#context\">context</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Swap token stuff */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Last value of global fault stamp as seen by this process.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In other words, this value gives an indication of how long</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it has been since this task got the token.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Look at mm/thrash.c</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#faultstamp\">faultstamp</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#token_priority\">token_priority</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#last_interval\">last_interval</a>;", 
"", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>; <span class=\"comment\">/* Must use atomic bitops to access the bits */</span>", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#core_state\">core_state</a> *<a class=\"id\" href=\"#core_state\">core_state</a>; <span class=\"comment\">/* coredumping support */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_AIO\">CONFIG_AIO</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ioctx_lock\">ioctx_lock</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a><span class=\"ts\"/><a class=\"id\" href=\"#ioctx_list\">ioctx_list</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MM_OWNER\">CONFIG_MM_OWNER</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * \"owner\" points to a task that is regarded as the canonical</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * user/owner of this mm. All of the following must be true in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * order for it to be changed:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * current == mm-&gt;owner</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * current-&gt;mm != mm</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * new_owner-&gt;mm == mm</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * new_owner-&gt;alloc_lock is held</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#owner\">owner</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROC_FS\">CONFIG_PROC_FS</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* store ref to file /proc/&lt;pid&gt;/exe symlink points to */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#exe_file\">exe_file</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#num_exe_file_vmas\">num_exe_file_vmas</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MMU_NOTIFIER\">CONFIG_MMU_NOTIFIER</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mmu_notifier_mm\">mmu_notifier_mm</a> *<a class=\"id\" href=\"#mmu_notifier_mm\">mmu_notifier_mm</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"<span class=\"comment\">/* Future-safe accessor for struct mm_struct's cpu_vm_mask. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#mm_cpumask\">mm_cpumask</a>(<a class=\"id\" href=\"#mm\">mm</a>) (&amp;(<a class=\"id\" href=\"#mm\">mm</a>)-><a class=\"id\" href=\"#cpu_vm_mask\">cpu_vm_mask</a>)", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _LINUX_MM_TYPES_H */</span>", 
];
xr_frag_insert('l/05/d9f6ab8972a6051d3fe2614cccff3536bfa9fa.xr', __xr_tmp);
