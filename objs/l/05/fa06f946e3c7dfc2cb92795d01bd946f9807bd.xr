var __xr_tmp = [
"#<a class=\"id\" href=\"#include\">include</a> \"audit.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fsnotify_backend\">fsnotify_backend</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#namei\">namei</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mount\">mount</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kthread\">kthread</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#audit_tree\">audit_tree</a>;", 
"struct <a class=\"id\" href=\"#audit_chunk\">audit_chunk</a>;", 
"", 
"struct <a class=\"id\" href=\"#audit_tree\">audit_tree</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#goner\">goner</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_chunk\">audit_chunk</a> *<a class=\"id\" href=\"#root\">root</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#chunks\">chunks</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#rules\">rules</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#same_root\">same_root</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#pathname\">pathname</a>[];", 
"};", 
"", 
"struct <a class=\"id\" href=\"#audit_chunk\">audit_chunk</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#hash\">hash</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> <a class=\"id\" href=\"#mark\">mark</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#trees\">trees</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* with root here */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#dead\">dead</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_long_t\">atomic_long_t</a> <a class=\"id\" href=\"#refs\">refs</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#node\">node</a> {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_tree\">audit_tree</a> *<a class=\"id\" href=\"#owner\">owner</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#index\">index</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* index; upper bit indicates 'will prune' */</span>", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#owners\">owners</a>[];", 
"};", 
"", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#tree_list\">tree_list</a>);", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#prune_list\">prune_list</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * One struct chunk is attached to each inode of interest.</span>", 
"<span class=\"comment\"> * We replace struct chunk on tagging/untagging.</span>", 
"<span class=\"comment\"> * Rules have pointer to struct audit_tree.</span>", 
"<span class=\"comment\"> * Rules have struct list_head rlist forming a list of rules over</span>", 
"<span class=\"comment\"> * the same tree.</span>", 
"<span class=\"comment\"> * References to struct chunk are collected at audit_inode{,_child}()</span>", 
"<span class=\"comment\"> * time and used in AUDIT_TREE rule matching.</span>", 
"<span class=\"comment\"> * These references are dropped at the same time we are calling</span>", 
"<span class=\"comment\"> * audit_free_names(), etc.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Cyclic lists galore:</span>", 
"<span class=\"comment\"> * tree.chunks anchors chunk.owners[].list<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>hash_lock</span>", 
"<span class=\"comment\"> * tree.rules anchors rule.rlist<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>audit_filter_mutex</span>", 
"<span class=\"comment\"> * chunk.trees anchors tree.same_root<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>hash_lock</span>", 
"<span class=\"comment\"> * chunk.hash is a hash with middle bits of watch.inode as</span>", 
"<span class=\"comment\"> * a hash function.<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>RCU, hash_lock</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * tree is refcounted; one reference for \"some rules on rules_list refer to</span>", 
"<span class=\"comment\"> * it\", one for each chunk with pointer to it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * chunk is refcounted by embedded fsnotify_mark + .refs (non-zero refcount</span>", 
"<span class=\"comment\"> * of watch contributes 1 to .refs).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * node.index allows to get from node.list to containing chunk.</span>", 
"<span class=\"comment\"> * MSB of that sucker is stolen to mark taggings that we might have to</span>", 
"<span class=\"comment\"> * revert - several operations have very unpleasant cleanup logics and</span>", 
"<span class=\"comment\"> * that makes a difference.  Some.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#audit_tree_group\">audit_tree_group</a>;", 
"", 
"static struct <a class=\"id\" href=\"#audit_tree\">audit_tree</a> *<a class=\"id\" href=\"#alloc_tree\">alloc_tree</a>(const char *<a class=\"id\" href=\"#s\">s</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_tree\">audit_tree</a> *<a class=\"id\" href=\"#tree\">tree</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tree\">tree</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(struct <a class=\"id\" href=\"#audit_tree\">audit_tree</a>) + <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#s\">s</a>) + 1, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tree\">tree</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#count\">count</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#goner\">goner</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#chunks\">chunks</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#rules\">rules</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#same_root\">same_root</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#pathname\">pathname</a>, <a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tree\">tree</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#get_tree\">get_tree</a>(struct <a class=\"id\" href=\"#audit_tree\">audit_tree</a> *<a class=\"id\" href=\"#tree\">tree</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#count\">count</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__put_tree\">__put_tree</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#rcu\">rcu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_tree\">audit_tree</a> *<a class=\"id\" href=\"#tree\">tree</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#rcu\">rcu</a>, struct <a class=\"id\" href=\"#audit_tree\">audit_tree</a>, <a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#tree\">tree</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#put_tree\">put_tree</a>(struct <a class=\"id\" href=\"#audit_tree\">audit_tree</a> *<a class=\"id\" href=\"#tree\">tree</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#count\">count</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#__put_tree\">__put_tree</a>);", 
"}", 
"", 
"<span class=\"comment\">/* to avoid bringing the entire thing in audit.h */</span>", 
"const char *<a class=\"id\" href=\"#audit_tree_path\">audit_tree_path</a>(struct <a class=\"id\" href=\"#audit_tree\">audit_tree</a> *<a class=\"id\" href=\"#tree\">tree</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#pathname\">pathname</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#free_chunk\">free_chunk</a>(struct <a class=\"id\" href=\"#audit_chunk\">audit_chunk</a> *<a class=\"id\" href=\"#chunk\">chunk</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#count\">count</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#owners\">owners</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#owner\">owner</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_tree\">put_tree</a>(<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#owners\">owners</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#owner\">owner</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#chunk\">chunk</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#audit_put_chunk\">audit_put_chunk</a>(struct <a class=\"id\" href=\"#audit_chunk\">audit_chunk</a> *<a class=\"id\" href=\"#chunk\">chunk</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_long_dec_and_test\">atomic_long_dec_and_test</a>(&amp;<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#refs\">refs</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_chunk\">free_chunk</a>(<a class=\"id\" href=\"#chunk\">chunk</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__put_chunk\">__put_chunk</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#rcu\">rcu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_chunk\">audit_chunk</a> *<a class=\"id\" href=\"#chunk\">chunk</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#rcu\">rcu</a>, struct <a class=\"id\" href=\"#audit_chunk\">audit_chunk</a>, <a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#audit_put_chunk\">audit_put_chunk</a>(<a class=\"id\" href=\"#chunk\">chunk</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#audit_tree_destroy_watch\">audit_tree_destroy_watch</a>(struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#entry\">entry</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_chunk\">audit_chunk</a> *<a class=\"id\" href=\"#chunk\">chunk</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#entry\">entry</a>, struct <a class=\"id\" href=\"#audit_chunk\">audit_chunk</a>, <a class=\"id\" href=\"#mark\">mark</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#__put_chunk\">__put_chunk</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#audit_chunk\">audit_chunk</a> *<a class=\"id\" href=\"#alloc_chunk\">alloc_chunk</a>(int <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_chunk\">audit_chunk</a> *<a class=\"id\" href=\"#chunk\">chunk</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#audit_chunk\">audit_chunk</a>, <a class=\"id\" href=\"#owners\">owners</a>) + <a class=\"id\" href=\"#count\">count</a> * sizeof(struct <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#chunk\">chunk</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#hash\">hash</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#trees\">trees</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_long_set\">atomic_long_set</a>(&amp;<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#refs\">refs</a>, 1);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#count\">count</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#owners\">owners</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#owners\">owners</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_init_mark\">fsnotify_init_mark</a>(&amp;<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#mark\">mark</a>, <a class=\"id\" href=\"#audit_tree_destroy_watch\">audit_tree_destroy_watch</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#chunk\">chunk</a>;", 
"}", 
"", 
"enum {<a class=\"id\" href=\"#HASH_SIZE\">HASH_SIZE</a> = 128};", 
"static struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#chunk_hash_heads\">chunk_hash_heads</a>[<a class=\"id\" href=\"#HASH_SIZE\">HASH_SIZE</a>];", 
"static <a class=\"id\" href=\"#__cacheline_aligned_in_smp\">__cacheline_aligned_in_smp</a> <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#hash_lock\">hash_lock</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#chunk_hash\">chunk_hash</a>(const struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#n\">n</a> = (unsigned long)<a class=\"id\" href=\"#inode\">inode</a> / <a class=\"id\" href=\"#L1_CACHE_BYTES\">L1_CACHE_BYTES</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#chunk_hash_heads\">chunk_hash_heads</a> + <a class=\"id\" href=\"#n\">n</a> % <a class=\"id\" href=\"#HASH_SIZE\">HASH_SIZE</a>;", 
"}", 
"", 
"<span class=\"comment\">/* hash_lock &amp; entry-&gt;lock is held by caller */</span>", 
"static void <a class=\"id\" href=\"#insert_hash\">insert_hash</a>(struct <a class=\"id\" href=\"#audit_chunk\">audit_chunk</a> *<a class=\"id\" href=\"#chunk\">chunk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#entry\">entry</a> = &amp;<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#mark\">mark</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#i\">i</a>.<a class=\"id\" href=\"#inode\">inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#chunk_hash\">chunk_hash</a>(<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#i\">i</a>.<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_rcu\">list_add_rcu</a>(&amp;<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#hash\">hash</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"}", 
"", 
"<span class=\"comment\">/* called under rcu_read_lock */</span>", 
"struct <a class=\"id\" href=\"#audit_chunk\">audit_chunk</a> *<a class=\"id\" href=\"#audit_tree_lookup\">audit_tree_lookup</a>(const struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#chunk_hash\">chunk_hash</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_chunk\">audit_chunk</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#hash\">hash</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* mark.inode may have gone NULL, but who cares? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mark\">mark</a>.<a class=\"id\" href=\"#i\">i</a>.<a class=\"id\" href=\"#inode\">inode</a> == <a class=\"id\" href=\"#inode\">inode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_long_inc\">atomic_long_inc</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#refs\">refs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#audit_tree_match\">audit_tree_match</a>(struct <a class=\"id\" href=\"#audit_chunk\">audit_chunk</a> *<a class=\"id\" href=\"#chunk\">chunk</a>, struct <a class=\"id\" href=\"#audit_tree\">audit_tree</a> *<a class=\"id\" href=\"#tree\">tree</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#n\">n</a> = 0; <a class=\"id\" href=\"#n\">n</a> &lt; <a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#count\">count</a>; <a class=\"id\" href=\"#n\">n</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#owners\">owners</a>[<a class=\"id\" href=\"#n\">n</a>].<a class=\"id\" href=\"#owner\">owner</a> == <a class=\"id\" href=\"#tree\">tree</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* tagging and untagging inodes with trees */</span>", 
"", 
"static struct <a class=\"id\" href=\"#audit_chunk\">audit_chunk</a> *<a class=\"id\" href=\"#find_chunk\">find_chunk</a>(struct <a class=\"id\" href=\"#node\">node</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#index\">index</a> &amp; ~(1U<<31);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> -= <a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#audit_chunk\">audit_chunk</a>, <a class=\"id\" href=\"#owners\">owners</a>[0]);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#untag_chunk\">untag_chunk</a>(struct <a class=\"id\" href=\"#node\">node</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_chunk\">audit_chunk</a> *<a class=\"id\" href=\"#chunk\">chunk</a> = <a class=\"id\" href=\"#find_chunk\">find_chunk</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#entry\">entry</a> = &amp;<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#mark\">mark</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_chunk\">audit_chunk</a> *<a class=\"id\" href=\"#new\">new</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_tree\">audit_tree</a> *<a class=\"id\" href=\"#owner\">owner</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#count\">count</a> - 1;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_get_mark\">fsnotify_get_mark</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hash_lock\">hash_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#dead\">dead</a> || !<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#i\">i</a>.<a class=\"id\" href=\"#inode\">inode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#owner\">owner</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#owner\">owner</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#dead\">dead</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hash_lock\">hash_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#trees\">trees</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#owner\">owner</a>-><a class=\"id\" href=\"#root\">root</a> == <a class=\"id\" href=\"#chunk\">chunk</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#owner\">owner</a>-><a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#hash\">hash</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hash_lock\">hash_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_destroy_mark\">fsnotify_destroy_mark</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_put_mark\">fsnotify_put_mark</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#alloc_chunk\">alloc_chunk</a>(<a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#new\">new</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Fallback\">Fallback</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_duplicate_mark\">fsnotify_duplicate_mark</a>(&amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#mark\">mark</a>, <a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fsnotify_add_mark\">fsnotify_add_mark</a>(&amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#mark\">mark</a>, <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#mark\">mark</a>.<a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#mark\">mark</a>.<a class=\"id\" href=\"#i\">i</a>.<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_chunk\">free_chunk</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Fallback\">Fallback</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#dead\">dead</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hash_lock\">hash_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_replace_init\">list_replace_init</a>(&amp;<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#trees\">trees</a>, &amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#trees\">trees</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#owner\">owner</a>-><a class=\"id\" href=\"#root\">root</a> == <a class=\"id\" href=\"#chunk\">chunk</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#owner\">owner</a>-><a class=\"id\" href=\"#same_root\">same_root</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#owner\">owner</a>-><a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> <= <a class=\"id\" href=\"#size\">size</a>; <a class=\"id\" href=\"#i\">i</a>++, <a class=\"id\" href=\"#j\">j</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_tree\">audit_tree</a> *<a class=\"id\" href=\"#s\">s</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (&amp;<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#owners\">owners</a>[<a class=\"id\" href=\"#j\">j</a>] == <a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#owners\">owners</a>[<a class=\"id\" href=\"#j\">j</a>].<a class=\"id\" href=\"#owner\">owner</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#owners\">owners</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#owner\">owner</a> = <a class=\"id\" href=\"#s\">s</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#owners\">owners</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#owners\">owners</a>[<a class=\"id\" href=\"#j\">j</a>].<a class=\"id\" href=\"#index\">index</a> - <a class=\"id\" href=\"#j\">j</a> + <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#s\">s</a>) <span class=\"comment\">/* result of earlier fallback */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_tree\">get_tree</a>(<a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_replace_init\">list_replace_init</a>(&amp;<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#owners\">owners</a>[<a class=\"id\" href=\"#j\">j</a>].<a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#owners\">owners</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_replace_rcu\">list_replace_rcu</a>(&amp;<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#hash\">hash</a>, &amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#hash\">hash</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#owner\">owner</a>, &amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#trees\">trees</a>, <a class=\"id\" href=\"#same_root\">same_root</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#owner\">owner</a>-><a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#new\">new</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hash_lock\">hash_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_destroy_mark\">fsnotify_destroy_mark</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_put_mark\">fsnotify_put_mark</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<a class=\"id\" href=\"#Fallback\">Fallback</a>:", 
"<span class=\"ts\"/><span class=\"comment\">// do the best we can</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hash_lock\">hash_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#owner\">owner</a>-><a class=\"id\" href=\"#root\">root</a> == <a class=\"id\" href=\"#chunk\">chunk</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#owner\">owner</a>-><a class=\"id\" href=\"#same_root\">same_root</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#owner\">owner</a>-><a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#owner\">owner</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_tree\">put_tree</a>(<a class=\"id\" href=\"#owner\">owner</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hash_lock\">hash_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_put_mark\">fsnotify_put_mark</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hash_lock\">hash_lock</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#create_chunk\">create_chunk</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#audit_tree\">audit_tree</a> *<a class=\"id\" href=\"#tree\">tree</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_chunk\">audit_chunk</a> *<a class=\"id\" href=\"#chunk\">chunk</a> = <a class=\"id\" href=\"#alloc_chunk\">alloc_chunk</a>(1);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#chunk\">chunk</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = &amp;<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#mark\">mark</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fsnotify_add_mark\">fsnotify_add_mark</a>(<a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#audit_tree_group\">audit_tree_group</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_chunk\">free_chunk</a>(<a class=\"id\" href=\"#chunk\">chunk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hash_lock\">hash_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#goner\">goner</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hash_lock\">hash_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#dead\">dead</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_destroy_mark\">fsnotify_destroy_mark</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_put_mark\">fsnotify_put_mark</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#owners\">owners</a>[0].<a class=\"id\" href=\"#index\">index</a> = (1U << 31);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#owners\">owners</a>[0].<a class=\"id\" href=\"#owner\">owner</a> = <a class=\"id\" href=\"#tree\">tree</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_tree\">get_tree</a>(<a class=\"id\" href=\"#tree\">tree</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#owners\">owners</a>[0].<a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#chunks\">chunks</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#root\">root</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#chunk\">chunk</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#same_root\">same_root</a>, &amp;<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#trees\">trees</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#insert_hash\">insert_hash</a>(<a class=\"id\" href=\"#chunk\">chunk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hash_lock\">hash_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* the first tagged inode becomes root of tree */</span>", 
"static int <a class=\"id\" href=\"#tag_chunk\">tag_chunk</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#audit_tree\">audit_tree</a> *<a class=\"id\" href=\"#tree\">tree</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#old_entry\">old_entry</a>, *<a class=\"id\" href=\"#chunk_entry\">chunk_entry</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_tree\">audit_tree</a> *<a class=\"id\" href=\"#owner\">owner</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_chunk\">audit_chunk</a> *<a class=\"id\" href=\"#chunk\">chunk</a>, *<a class=\"id\" href=\"#old\">old</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#node\">node</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_entry\">old_entry</a> = <a class=\"id\" href=\"#fsnotify_find_inode_mark\">fsnotify_find_inode_mark</a>(<a class=\"id\" href=\"#audit_tree_group\">audit_tree_group</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#old_entry\">old_entry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#create_chunk\">create_chunk</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#tree\">tree</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#old_entry\">old_entry</a>, struct <a class=\"id\" href=\"#audit_chunk\">audit_chunk</a>, <a class=\"id\" href=\"#mark\">mark</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* are we already there? */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hash_lock\">hash_lock</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#n\">n</a> = 0; <a class=\"id\" href=\"#n\">n</a> &lt; <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#count\">count</a>; <a class=\"id\" href=\"#n\">n</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#owners\">owners</a>[<a class=\"id\" href=\"#n\">n</a>].<a class=\"id\" href=\"#owner\">owner</a> == <a class=\"id\" href=\"#tree\">tree</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hash_lock\">hash_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_put_mark\">fsnotify_put_mark</a>(<a class=\"id\" href=\"#old_entry\">old_entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hash_lock\">hash_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a> = <a class=\"id\" href=\"#alloc_chunk\">alloc_chunk</a>(<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#count\">count</a> + 1);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#chunk\">chunk</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_put_mark\">fsnotify_put_mark</a>(<a class=\"id\" href=\"#old_entry\">old_entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chunk_entry\">chunk_entry</a> = &amp;<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#mark\">mark</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#old_entry\">old_entry</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#old_entry\">old_entry</a>-><a class=\"id\" href=\"#i\">i</a>.<a class=\"id\" href=\"#inode\">inode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* old_entry is being shot, lets just lie */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#old_entry\">old_entry</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_put_mark\">fsnotify_put_mark</a>(<a class=\"id\" href=\"#old_entry\">old_entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_chunk\">free_chunk</a>(<a class=\"id\" href=\"#chunk\">chunk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_duplicate_mark\">fsnotify_duplicate_mark</a>(<a class=\"id\" href=\"#chunk_entry\">chunk_entry</a>, <a class=\"id\" href=\"#old_entry\">old_entry</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fsnotify_add_mark\">fsnotify_add_mark</a>(<a class=\"id\" href=\"#chunk_entry\">chunk_entry</a>, <a class=\"id\" href=\"#chunk_entry\">chunk_entry</a>-><a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#chunk_entry\">chunk_entry</a>-><a class=\"id\" href=\"#i\">i</a>.<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#old_entry\">old_entry</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_chunk\">free_chunk</a>(<a class=\"id\" href=\"#chunk\">chunk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_put_mark\">fsnotify_put_mark</a>(<a class=\"id\" href=\"#old_entry\">old_entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* even though we hold old_entry-&gt;lock, this is safe since chunk_entry-&gt;lock could NEVER have been grabbed before */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#chunk_entry\">chunk_entry</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hash_lock\">hash_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we now hold old_entry-&gt;lock, chunk_entry-&gt;lock, and hash_lock */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#goner\">goner</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hash_lock\">hash_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#dead\">dead</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#chunk_entry\">chunk_entry</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#old_entry\">old_entry</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_destroy_mark\">fsnotify_destroy_mark</a>(<a class=\"id\" href=\"#chunk_entry\">chunk_entry</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_put_mark\">fsnotify_put_mark</a>(<a class=\"id\" href=\"#chunk_entry\">chunk_entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_put_mark\">fsnotify_put_mark</a>(<a class=\"id\" href=\"#old_entry\">old_entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_replace_init\">list_replace_init</a>(&amp;<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#trees\">trees</a>, &amp;<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#trees\">trees</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#n\">n</a> = 0, <a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#owners\">owners</a>; <a class=\"id\" href=\"#n\">n</a> &lt; <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#count\">count</a>; <a class=\"id\" href=\"#n\">n</a>++, <a class=\"id\" href=\"#p\">p</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_tree\">audit_tree</a> *<a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#owners\">owners</a>[<a class=\"id\" href=\"#n\">n</a>].<a class=\"id\" href=\"#owner\">owner</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#owner\">owner</a> = <a class=\"id\" href=\"#s\">s</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#owners\">owners</a>[<a class=\"id\" href=\"#n\">n</a>].<a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#s\">s</a>) <span class=\"comment\">/* result of fallback in untag */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_tree\">get_tree</a>(<a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_replace_init\">list_replace_init</a>(&amp;<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#owners\">owners</a>[<a class=\"id\" href=\"#n\">n</a>].<a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#index\">index</a> = (<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#count\">count</a> - 1) | (1U<<31);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#owner\">owner</a> = <a class=\"id\" href=\"#tree\">tree</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_tree\">get_tree</a>(<a class=\"id\" href=\"#tree\">tree</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#chunks\">chunks</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_replace_rcu\">list_replace_rcu</a>(&amp;<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#hash\">hash</a>, &amp;<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#hash\">hash</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#owner\">owner</a>, &amp;<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#trees\">trees</a>, <a class=\"id\" href=\"#same_root\">same_root</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#owner\">owner</a>-><a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#chunk\">chunk</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#dead\">dead</a> = 1;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#root\">root</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#chunk\">chunk</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#same_root\">same_root</a>, &amp;<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#trees\">trees</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hash_lock\">hash_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#chunk_entry\">chunk_entry</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#old_entry\">old_entry</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_destroy_mark\">fsnotify_destroy_mark</a>(<a class=\"id\" href=\"#old_entry\">old_entry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_put_mark\">fsnotify_put_mark</a>(<a class=\"id\" href=\"#old_entry\">old_entry</a>); <span class=\"comment\">/* pair to fsnotify_find mark_entry */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_put_mark\">fsnotify_put_mark</a>(<a class=\"id\" href=\"#old_entry\">old_entry</a>); <span class=\"comment\">/* and kill it */</span>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#kill_rules\">kill_rules</a>(struct <a class=\"id\" href=\"#audit_tree\">audit_tree</a> *<a class=\"id\" href=\"#tree\">tree</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_krule\">audit_krule</a> *<a class=\"id\" href=\"#rule\">rule</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_entry\">audit_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_buffer\">audit_buffer</a> *<a class=\"id\" href=\"#ab\">ab</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#rule\">rule</a>, <a class=\"id\" href=\"#next\">next</a>, &amp;<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#rules\">rules</a>, <a class=\"id\" href=\"#rlist\">rlist</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#rule\">rule</a>, struct <a class=\"id\" href=\"#audit_entry\">audit_entry</a>, <a class=\"id\" href=\"#rule\">rule</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#rule\">rule</a>-><a class=\"id\" href=\"#rlist\">rlist</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rule\">rule</a>-><a class=\"id\" href=\"#tree\">tree</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* not a half-baked one */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ab\">ab</a> = <a class=\"id\" href=\"#audit_log_start\">audit_log_start</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, <a class=\"id\" href=\"#AUDIT_CONFIG_CHANGE\">AUDIT_CONFIG_CHANGE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(<a class=\"id\" href=\"#ab\">ab</a>, \"op=\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_string\">audit_log_string</a>(<a class=\"id\" href=\"#ab\">ab</a>, \"remove rule\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(<a class=\"id\" href=\"#ab\">ab</a>, \" dir=\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_untrustedstring\">audit_log_untrustedstring</a>(<a class=\"id\" href=\"#ab\">ab</a>, <a class=\"id\" href=\"#rule\">rule</a>-><a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#pathname\">pathname</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_key\">audit_log_key</a>(<a class=\"id\" href=\"#ab\">ab</a>, <a class=\"id\" href=\"#rule\">rule</a>-><a class=\"id\" href=\"#filterkey\">filterkey</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(<a class=\"id\" href=\"#ab\">ab</a>, \" list=%d res=1\", <a class=\"id\" href=\"#rule\">rule</a>-><a class=\"id\" href=\"#listnr\">listnr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_end\">audit_log_end</a>(<a class=\"id\" href=\"#ab\">ab</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rule\">rule</a>-><a class=\"id\" href=\"#tree\">tree</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#rule\">rule</a>.<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#rcu\">rcu</a>, <a class=\"id\" href=\"#audit_free_rule_rcu\">audit_free_rule_rcu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * finish killing struct audit_tree</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#prune_one\">prune_one</a>(struct <a class=\"id\" href=\"#audit_tree\">audit_tree</a> *<a class=\"id\" href=\"#victim\">victim</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hash_lock\">hash_lock</a>);", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#victim\">victim</a>-><a class=\"id\" href=\"#chunks\">chunks</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#node\">node</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#victim\">victim</a>-><a class=\"id\" href=\"#chunks\">chunks</a>.<a class=\"id\" href=\"#next\">next</a>, struct <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#untag_chunk\">untag_chunk</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hash_lock\">hash_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_tree\">put_tree</a>(<a class=\"id\" href=\"#victim\">victim</a>);", 
"}", 
"", 
"<span class=\"comment\">/* trim the uncommitted chunks from tree */</span>", 
"", 
"static void <a class=\"id\" href=\"#trim_marked\">trim_marked</a>(struct <a class=\"id\" href=\"#audit_tree\">audit_tree</a> *<a class=\"id\" href=\"#tree\">tree</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#p\">p</a>, *<a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hash_lock\">hash_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#goner\">goner</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hash_lock\">hash_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* reorder */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#chunks\">chunks</a>.<a class=\"id\" href=\"#next\">next</a>; <a class=\"id\" href=\"#p\">p</a> != &amp;<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#chunks\">chunks</a>; <a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#q\">q</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#node\">node</a> *<a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#index\">index</a> &amp; (1U<<31)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#chunks\">chunks</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#chunks\">chunks</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#node\">node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#chunks\">chunks</a>.<a class=\"id\" href=\"#next\">next</a>, struct <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* have we run out of marked? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#index\">index</a> &amp; (1U<<31)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#untag_chunk\">untag_chunk</a>(<a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#root\">root</a> && !<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#goner\">goner</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#goner\">goner</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hash_lock\">hash_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#audit_filter_mutex\">audit_filter_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kill_rules\">kill_rules</a>(<a class=\"id\" href=\"#tree\">tree</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#audit_filter_mutex\">audit_filter_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prune_one\">prune_one</a>(<a class=\"id\" href=\"#tree\">tree</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hash_lock\">hash_lock</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#audit_schedule_prune\">audit_schedule_prune</a>(void);", 
"", 
"<span class=\"comment\">/* called with audit_filter_mutex */</span>", 
"int <a class=\"id\" href=\"#audit_remove_tree_rule\">audit_remove_tree_rule</a>(struct <a class=\"id\" href=\"#audit_krule\">audit_krule</a> *<a class=\"id\" href=\"#rule\">rule</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_tree\">audit_tree</a> *<a class=\"id\" href=\"#tree\">tree</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tree\">tree</a> = <a class=\"id\" href=\"#rule\">rule</a>-><a class=\"id\" href=\"#tree\">tree</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tree\">tree</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hash_lock\">hash_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#rule\">rule</a>-><a class=\"id\" href=\"#rlist\">rlist</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#rules\">rules</a>) && !<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#goner\">goner</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#same_root\">same_root</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#goner\">goner</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move\">list_move</a>(&amp;<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#prune_list\">prune_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rule\">rule</a>-><a class=\"id\" href=\"#tree\">tree</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hash_lock\">hash_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_schedule_prune\">audit_schedule_prune</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rule\">rule</a>-><a class=\"id\" href=\"#tree\">tree</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hash_lock\">hash_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#compare_root\">compare_root</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>, void *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_root\">mnt_root</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a> == <a class=\"id\" href=\"#arg\">arg</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#audit_trim_trees\">audit_trim_trees</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#cursor\">cursor</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#audit_filter_mutex\">audit_filter_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#cursor\">cursor</a>, &amp;<a class=\"id\" href=\"#tree_list\">tree_list</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#cursor\">cursor</a>.<a class=\"id\" href=\"#next\">next</a> != &amp;<a class=\"id\" href=\"#tree_list\">tree_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_tree\">audit_tree</a> *<a class=\"id\" href=\"#tree\">tree</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#path\">path</a> <a class=\"id\" href=\"#path\">path</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#root_mnt\">root_mnt</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#node\">node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tree\">tree</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#cursor\">cursor</a>.<a class=\"id\" href=\"#next\">next</a>, struct <a class=\"id\" href=\"#audit_tree\">audit_tree</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_tree\">get_tree</a>(<a class=\"id\" href=\"#tree\">tree</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#cursor\">cursor</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#cursor\">cursor</a>, &amp;<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#audit_filter_mutex\">audit_filter_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#kern_path\">kern_path</a>(<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#pathname\">pathname</a>, 0, &amp;<a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#skip_it\">skip_it</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#root_mnt\">root_mnt</a> = <a class=\"id\" href=\"#collect_mounts\">collect_mounts</a>(&amp;<a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#path_put\">path_put</a>(&amp;<a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#root_mnt\">root_mnt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#skip_it\">skip_it</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hash_lock\">hash_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#chunks\">chunks</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_chunk\">audit_chunk</a> *<a class=\"id\" href=\"#chunk\">chunk</a> = <a class=\"id\" href=\"#find_chunk\">find_chunk</a>(<a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* this could be NULL if the watch is dieing else where... */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#mark\">mark</a>.<a class=\"id\" href=\"#i\">i</a>.<a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#index\">index</a> |= 1U<<31;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#iterate_mounts\">iterate_mounts</a>(<a class=\"id\" href=\"#compare_root\">compare_root</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#root_mnt\">root_mnt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#index\">index</a> &= ~(1U<<31);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hash_lock\">hash_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trim_marked\">trim_marked</a>(<a class=\"id\" href=\"#tree\">tree</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_tree\">put_tree</a>(<a class=\"id\" href=\"#tree\">tree</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drop_collected_mounts\">drop_collected_mounts</a>(<a class=\"id\" href=\"#root_mnt\">root_mnt</a>);", 
"<a class=\"id\" href=\"#skip_it\">skip_it</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#audit_filter_mutex\">audit_filter_mutex</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#cursor\">cursor</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#audit_filter_mutex\">audit_filter_mutex</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#audit_make_tree\">audit_make_tree</a>(struct <a class=\"id\" href=\"#audit_krule\">audit_krule</a> *<a class=\"id\" href=\"#rule\">rule</a>, char *<a class=\"id\" href=\"#pathname\">pathname</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#op\">op</a>)", 
"{", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pathname\">pathname</a>[0] != '/' ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#rule\">rule</a>-><a class=\"id\" href=\"#listnr\">listnr</a> != <a class=\"id\" href=\"#AUDIT_FILTER_EXIT\">AUDIT_FILTER_EXIT</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#op\">op</a> != <a class=\"id\" href=\"#Audit_equal\">Audit_equal</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#rule\">rule</a>-><a class=\"id\" href=\"#inode_f\">inode_f</a> || <a class=\"id\" href=\"#rule\">rule</a>-><a class=\"id\" href=\"#watch\">watch</a> || <a class=\"id\" href=\"#rule\">rule</a>-><a class=\"id\" href=\"#tree\">tree</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rule\">rule</a>-><a class=\"id\" href=\"#tree\">tree</a> = <a class=\"id\" href=\"#alloc_tree\">alloc_tree</a>(<a class=\"id\" href=\"#pathname\">pathname</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rule\">rule</a>-><a class=\"id\" href=\"#tree\">tree</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"void <a class=\"id\" href=\"#audit_put_tree\">audit_put_tree</a>(struct <a class=\"id\" href=\"#audit_tree\">audit_tree</a> *<a class=\"id\" href=\"#tree\">tree</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_tree\">put_tree</a>(<a class=\"id\" href=\"#tree\">tree</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#tag_mount\">tag_mount</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>, void *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tag_chunk\">tag_chunk</a>(<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_root\">mnt_root</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"}", 
"", 
"<span class=\"comment\">/* called with audit_filter_mutex */</span>", 
"int <a class=\"id\" href=\"#audit_add_tree_rule\">audit_add_tree_rule</a>(struct <a class=\"id\" href=\"#audit_krule\">audit_krule</a> *<a class=\"id\" href=\"#rule\">rule</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_tree\">audit_tree</a> *<a class=\"id\" href=\"#seed\">seed</a> = <a class=\"id\" href=\"#rule\">rule</a>-><a class=\"id\" href=\"#tree\">tree</a>, *<a class=\"id\" href=\"#tree\">tree</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#path\">path</a> <a class=\"id\" href=\"#path\">path</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#tree\">tree</a>, &amp;<a class=\"id\" href=\"#tree_list\">tree_list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#seed\">seed</a>-><a class=\"id\" href=\"#pathname\">pathname</a>, <a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#pathname\">pathname</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_tree\">put_tree</a>(<a class=\"id\" href=\"#seed\">seed</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rule\">rule</a>-><a class=\"id\" href=\"#tree\">tree</a> = <a class=\"id\" href=\"#tree\">tree</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#rule\">rule</a>-><a class=\"id\" href=\"#rlist\">rlist</a>, &amp;<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#rules\">rules</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tree\">tree</a> = <a class=\"id\" href=\"#seed\">seed</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#tree_list\">tree_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#rule\">rule</a>-><a class=\"id\" href=\"#rlist\">rlist</a>, &amp;<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#rules\">rules</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* do not set rule-&gt;tree yet */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#audit_filter_mutex\">audit_filter_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#kern_path\">kern_path</a>(<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#pathname\">pathname</a>, 0, &amp;<a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Err\">Err</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#collect_mounts\">collect_mounts</a>(&amp;<a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path_put\">path_put</a>(&amp;<a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mnt\">mnt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Err\">Err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_tree\">get_tree</a>(<a class=\"id\" href=\"#tree\">tree</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#iterate_mounts\">iterate_mounts</a>(<a class=\"id\" href=\"#tag_mount\">tag_mount</a>, <a class=\"id\" href=\"#tree\">tree</a>, <a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drop_collected_mounts\">drop_collected_mounts</a>(<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#node\">node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hash_lock\">hash_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#chunks\">chunks</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#index\">index</a> &= ~(1U<<31);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hash_lock\">hash_lock</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trim_marked\">trim_marked</a>(<a class=\"id\" href=\"#tree\">tree</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#Err\">Err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#audit_filter_mutex\">audit_filter_mutex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#rule\">rule</a>-><a class=\"id\" href=\"#rlist\">rlist</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_tree\">put_tree</a>(<a class=\"id\" href=\"#tree\">tree</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rule\">rule</a>-><a class=\"id\" href=\"#tree\">tree</a> = <a class=\"id\" href=\"#tree\">tree</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_tree\">put_tree</a>(<a class=\"id\" href=\"#tree\">tree</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"<a class=\"id\" href=\"#Err\">Err</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#audit_filter_mutex\">audit_filter_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#rules\">rules</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_tree\">put_tree</a>(<a class=\"id\" href=\"#tree\">tree</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#audit_tag_tree\">audit_tag_tree</a>(char *<a class=\"id\" href=\"#old\">old</a>, char *<a class=\"id\" href=\"#new\">new</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#cursor\">cursor</a>, <a class=\"id\" href=\"#barrier\">barrier</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#failed\">failed</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#path\">path</a> <a class=\"id\" href=\"#path1\">path1</a>, <a class=\"id\" href=\"#path2\">path2</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#tagged\">tagged</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#kern_path\">kern_path</a>(<a class=\"id\" href=\"#new\">new</a>, 0, &amp;<a class=\"id\" href=\"#path2\">path2</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tagged\">tagged</a> = <a class=\"id\" href=\"#collect_mounts\">collect_mounts</a>(&amp;<a class=\"id\" href=\"#path2\">path2</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path_put\">path_put</a>(&amp;<a class=\"id\" href=\"#path2\">path2</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tagged\">tagged</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#kern_path\">kern_path</a>(<a class=\"id\" href=\"#old\">old</a>, 0, &amp;<a class=\"id\" href=\"#path1\">path1</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drop_collected_mounts\">drop_collected_mounts</a>(<a class=\"id\" href=\"#tagged\">tagged</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#audit_filter_mutex\">audit_filter_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#barrier\">barrier</a>, &amp;<a class=\"id\" href=\"#tree_list\">tree_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#cursor\">cursor</a>, &amp;<a class=\"id\" href=\"#barrier\">barrier</a>);", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#cursor\">cursor</a>.<a class=\"id\" href=\"#next\">next</a> != &amp;<a class=\"id\" href=\"#tree_list\">tree_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_tree\">audit_tree</a> *<a class=\"id\" href=\"#tree\">tree</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#good_one\">good_one</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tree\">tree</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#cursor\">cursor</a>.<a class=\"id\" href=\"#next\">next</a>, struct <a class=\"id\" href=\"#audit_tree\">audit_tree</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_tree\">get_tree</a>(<a class=\"id\" href=\"#tree\">tree</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#cursor\">cursor</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#cursor\">cursor</a>, &amp;<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#audit_filter_mutex\">audit_filter_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#kern_path\">kern_path</a>(<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#pathname\">pathname</a>, 0, &amp;<a class=\"id\" href=\"#path2\">path2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#good_one\">good_one</a> = <a class=\"id\" href=\"#path_is_under\">path_is_under</a>(&amp;<a class=\"id\" href=\"#path1\">path1</a>, &amp;<a class=\"id\" href=\"#path2\">path2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#path_put\">path_put</a>(&amp;<a class=\"id\" href=\"#path2\">path2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#good_one\">good_one</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_tree\">put_tree</a>(<a class=\"id\" href=\"#tree\">tree</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#audit_filter_mutex\">audit_filter_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#failed\">failed</a> = <a class=\"id\" href=\"#iterate_mounts\">iterate_mounts</a>(<a class=\"id\" href=\"#tag_mount\">tag_mount</a>, <a class=\"id\" href=\"#tree\">tree</a>, <a class=\"id\" href=\"#tagged\">tagged</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#failed\">failed</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_tree\">put_tree</a>(<a class=\"id\" href=\"#tree\">tree</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#audit_filter_mutex\">audit_filter_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#audit_filter_mutex\">audit_filter_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hash_lock\">hash_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#goner\">goner</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#tree_list\">tree_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hash_lock\">hash_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_tree\">put_tree</a>(<a class=\"id\" href=\"#tree\">tree</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#barrier\">barrier</a>.<a class=\"id\" href=\"#prev\">prev</a> != &amp;<a class=\"id\" href=\"#tree_list\">tree_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_tree\">audit_tree</a> *<a class=\"id\" href=\"#tree\">tree</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tree\">tree</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#barrier\">barrier</a>.<a class=\"id\" href=\"#prev\">prev</a>, struct <a class=\"id\" href=\"#audit_tree\">audit_tree</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_tree\">get_tree</a>(<a class=\"id\" href=\"#tree\">tree</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#barrier\">barrier</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#audit_filter_mutex\">audit_filter_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#failed\">failed</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#node\">node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hash_lock\">hash_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#chunks\">chunks</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#index\">index</a> &= ~(1U<<31);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hash_lock\">hash_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trim_marked\">trim_marked</a>(<a class=\"id\" href=\"#tree\">tree</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_tree\">put_tree</a>(<a class=\"id\" href=\"#tree\">tree</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#audit_filter_mutex\">audit_filter_mutex</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#barrier\">barrier</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#cursor\">cursor</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#audit_filter_mutex\">audit_filter_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path_put\">path_put</a>(&amp;<a class=\"id\" href=\"#path1\">path1</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drop_collected_mounts\">drop_collected_mounts</a>(<a class=\"id\" href=\"#tagged\">tagged</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#failed\">failed</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * That gets run when evict_chunk() ends up needing to kill audit_tree.</span>", 
"<span class=\"comment\"> * Runs from a separate thread.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#prune_tree_thread\">prune_tree_thread</a>(void *<a class=\"id\" href=\"#unused\">unused</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#audit_cmd_mutex\">audit_cmd_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#audit_filter_mutex\">audit_filter_mutex</a>);", 
"", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#prune_list\">prune_list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_tree\">audit_tree</a> *<a class=\"id\" href=\"#victim\">victim</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#victim\">victim</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#prune_list\">prune_list</a>.<a class=\"id\" href=\"#next\">next</a>, struct <a class=\"id\" href=\"#audit_tree\">audit_tree</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#victim\">victim</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#audit_filter_mutex\">audit_filter_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prune_one\">prune_one</a>(<a class=\"id\" href=\"#victim\">victim</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#audit_filter_mutex\">audit_filter_mutex</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#audit_filter_mutex\">audit_filter_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#audit_cmd_mutex\">audit_cmd_mutex</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#audit_schedule_prune\">audit_schedule_prune</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kthread_run\">kthread_run</a>(<a class=\"id\" href=\"#prune_tree_thread\">prune_tree_thread</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, \"audit_prune_tree\");", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ... and that one is done if evict_chunk() decides to delay until the end</span>", 
"<span class=\"comment\"> * of syscall.  Runs synchronously.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#audit_kill_trees\">audit_kill_trees</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#audit_cmd_mutex\">audit_cmd_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#audit_filter_mutex\">audit_filter_mutex</a>);", 
"", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#list\">list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_tree\">audit_tree</a> *<a class=\"id\" href=\"#victim\">victim</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#victim\">victim</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#next\">next</a>, struct <a class=\"id\" href=\"#audit_tree\">audit_tree</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kill_rules\">kill_rules</a>(<a class=\"id\" href=\"#victim\">victim</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#victim\">victim</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#audit_filter_mutex\">audit_filter_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prune_one\">prune_one</a>(<a class=\"id\" href=\"#victim\">victim</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#audit_filter_mutex\">audit_filter_mutex</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#audit_filter_mutex\">audit_filter_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#audit_cmd_mutex\">audit_cmd_mutex</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  Here comes the stuff asynchronous to auditctl operations</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#evict_chunk\">evict_chunk</a>(struct <a class=\"id\" href=\"#audit_chunk\">audit_chunk</a> *<a class=\"id\" href=\"#chunk\">chunk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_tree\">audit_tree</a> *<a class=\"id\" href=\"#owner\">owner</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#postponed\">postponed</a> = <a class=\"id\" href=\"#audit_killed_trees\">audit_killed_trees</a>();", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#need_prune\">need_prune</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#dead\">dead</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#dead\">dead</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#audit_filter_mutex\">audit_filter_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hash_lock\">hash_lock</a>);", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#trees\">trees</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#owner\">owner</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#trees\">trees</a>.<a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#audit_tree\">audit_tree</a>, <a class=\"id\" href=\"#same_root\">same_root</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#owner\">owner</a>-><a class=\"id\" href=\"#goner\">goner</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#owner\">owner</a>-><a class=\"id\" href=\"#root\">root</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#owner\">owner</a>-><a class=\"id\" href=\"#same_root\">same_root</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hash_lock\">hash_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#postponed\">postponed</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kill_rules\">kill_rules</a>(<a class=\"id\" href=\"#owner\">owner</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move\">list_move</a>(&amp;<a class=\"id\" href=\"#owner\">owner</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#prune_list\">prune_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#need_prune\">need_prune</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move\">list_move</a>(&amp;<a class=\"id\" href=\"#owner\">owner</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#postponed\">postponed</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hash_lock\">hash_lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#hash\">hash</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#n\">n</a> = 0; <a class=\"id\" href=\"#n\">n</a> &lt; <a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#count\">count</a>; <a class=\"id\" href=\"#n\">n</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#owners\">owners</a>[<a class=\"id\" href=\"#n\">n</a>].<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hash_lock\">hash_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#need_prune\">need_prune</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_schedule_prune\">audit_schedule_prune</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#audit_filter_mutex\">audit_filter_mutex</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#audit_tree_handle_event\">audit_tree_handle_event</a>(struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#inode_mark\">inode_mark</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#vfsmonut_mark\">vfsmonut_mark</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#fsnotify_event\">fsnotify_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#audit_tree_freeing_mark\">audit_tree_freeing_mark</a>(struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#entry\">entry</a>, struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#audit_chunk\">audit_chunk</a> *<a class=\"id\" href=\"#chunk\">chunk</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#entry\">entry</a>, struct <a class=\"id\" href=\"#audit_chunk\">audit_chunk</a>, <a class=\"id\" href=\"#mark\">mark</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#evict_chunk\">evict_chunk</a>(<a class=\"id\" href=\"#chunk\">chunk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_put_mark\">fsnotify_put_mark</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#audit_tree_send_event\">audit_tree_send_event</a>(struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#inode_mark\">inode_mark</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#vfsmount_mark\">vfsmount_mark</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#mask\">mask</a>, void *<a class=\"id\" href=\"#data\">data</a>, int <a class=\"id\" href=\"#data_type\">data_type</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#fsnotify_ops\">fsnotify_ops</a> <a class=\"id\" href=\"#audit_tree_ops\">audit_tree_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#handle_event\">handle_event</a> = <a class=\"id\" href=\"#audit_tree_handle_event\">audit_tree_handle_event</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#should_send_event\">should_send_event</a> = <a class=\"id\" href=\"#audit_tree_send_event\">audit_tree_send_event</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#free_group_priv\">free_group_priv</a> = <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#free_event_priv\">free_event_priv</a> = <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#freeing_mark\">freeing_mark</a> = <a class=\"id\" href=\"#audit_tree_freeing_mark\">audit_tree_freeing_mark</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#audit_tree_init\">audit_tree_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#audit_tree_group\">audit_tree_group</a> = <a class=\"id\" href=\"#fsnotify_alloc_group\">fsnotify_alloc_group</a>(&amp;<a class=\"id\" href=\"#audit_tree_ops\">audit_tree_ops</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#audit_tree_group\">audit_tree_group</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_panic\">audit_panic</a>(\"cannot initialize fsnotify group for rectree watches\");", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#HASH_SIZE\">HASH_SIZE</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#chunk_hash_heads\">chunk_hash_heads</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#__initcall\">__initcall</a>(<a class=\"id\" href=\"#audit_tree_init\">audit_tree_init</a>);", 
];
xr_frag_insert('l/05/fa06f946e3c7dfc2cb92795d01bd946f9807bd.xr', __xr_tmp);
