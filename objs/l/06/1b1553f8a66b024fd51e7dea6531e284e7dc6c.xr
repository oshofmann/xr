var __xr_tmp = [
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext4_alloc_branch\">ext4_alloc_branch</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#m_lblk\">m_lblk</a>, <a class=\"id\" href=\"#indirect_blks\">indirect_blks</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#goal\">goal</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offsets\">offsets</a> + (<a class=\"id\" href=\"#partial\">partial</a> - <a class=\"id\" href=\"#chain\">chain</a>), <a class=\"id\" href=\"#partial\">partial</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The ext4_splice_branch call will free and forget any buffers</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * on the new chain if there is a failure, but that risks using</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * up transaction credits, especially for bitmaps where the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * credits cannot be returned.  Can we handle this somehow?  We</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * may need to return -EAGAIN upwards in the worst case.  --sct</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext4_splice_branch\">ext4_splice_branch</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#m_lblk\">m_lblk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#partial\">partial</a>, <a class=\"id\" href=\"#indirect_blks\">indirect_blks</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup\">cleanup</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#m_flags\">m_flags</a> |= <a class=\"id\" href=\"#EXT4_MAP_NEW\">EXT4_MAP_NEW</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_update_inode_fsync_trans\">ext4_update_inode_fsync_trans</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, 1);", 
"<a class=\"id\" href=\"#got_it\">got_it</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#m_flags\">m_flags</a> |= <a class=\"id\" href=\"#EXT4_MAP_MAPPED\">EXT4_MAP_MAPPED</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#m_pblk\">m_pblk</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#chain\">chain</a>[<a class=\"id\" href=\"#depth\">depth</a>-1].<a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#m_len\">m_len</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> &gt; <a class=\"id\" href=\"#blocks_to_boundary\">blocks_to_boundary</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#m_flags\">m_flags</a> |= <a class=\"id\" href=\"#EXT4_MAP_BOUNDARY\">EXT4_MAP_BOUNDARY</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Clean up and exit */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#partial\">partial</a> = <a class=\"id\" href=\"#chain\">chain</a> + <a class=\"id\" href=\"#depth\">depth</a> - 1;<span class=\"ts\"/><span class=\"comment\">/* the whole chain */</span>", 
"<a class=\"id\" href=\"#cleanup\">cleanup</a>:", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#partial\">partial</a> &gt; <a class=\"id\" href=\"#chain\">chain</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#partial\">partial</a>-><a class=\"id\" href=\"#bh\">bh</a>, \"call brelse\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#partial\">partial</a>-><a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#partial\">partial</a>--;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_QUOTA\">CONFIG_QUOTA</a>", 
"<a class=\"id\" href=\"#qsize_t\">qsize_t</a> *<a class=\"id\" href=\"#ext4_get_reserved_space\">ext4_get_reserved_space</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#EXT4_I\">EXT4_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_reserved_quota\">i_reserved_quota</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Calculate the number of metadata blocks need to reserve</span>", 
"<span class=\"comment\"> * to allocate a new block at @lblocks for non extent file based file</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ext4_indirect_calc_metadata_amount\">ext4_indirect_calc_metadata_amount</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#lblock\">lblock</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_inode_info\">ext4_inode_info</a> *<a class=\"id\" href=\"#ei\">ei</a> = <a class=\"id\" href=\"#EXT4_I\">EXT4_I</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#dind_mask\">dind_mask</a> = ~((<a class=\"id\" href=\"#sector_t\">sector_t</a>)<a class=\"id\" href=\"#EXT4_ADDR_PER_BLOCK\">EXT4_ADDR_PER_BLOCK</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>) - 1);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#blk_bits\">blk_bits</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#lblock\">lblock</a> &lt; <a class=\"id\" href=\"#EXT4_NDIR_BLOCKS\">EXT4_NDIR_BLOCKS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lblock\">lblock</a> -= <a class=\"id\" href=\"#EXT4_NDIR_BLOCKS\">EXT4_NDIR_BLOCKS</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_da_metadata_calc_len\">i_da_metadata_calc_len</a> &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#lblock\">lblock</a> &amp; <a class=\"id\" href=\"#dind_mask\">dind_mask</a>) == <a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_da_metadata_calc_last_lblock\">i_da_metadata_calc_last_lblock</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_da_metadata_calc_len\">i_da_metadata_calc_len</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_da_metadata_calc_last_lblock\">i_da_metadata_calc_last_lblock</a> = <a class=\"id\" href=\"#lblock\">lblock</a> &amp; <a class=\"id\" href=\"#dind_mask\">dind_mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_da_metadata_calc_len\">i_da_metadata_calc_len</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_bits\">blk_bits</a> = <a class=\"id\" href=\"#order_base_2\">order_base_2</a>(<a class=\"id\" href=\"#lblock\">lblock</a>);", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#blk_bits\">blk_bits</a> / <a class=\"id\" href=\"#EXT4_ADDR_PER_BLOCK_BITS\">EXT4_ADDR_PER_BLOCK_BITS</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>)) + 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Calculate the number of metadata blocks need to reserve</span>", 
"<span class=\"comment\"> * to allocate a block located at @lblock</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ext4_calc_metadata_amount\">ext4_calc_metadata_amount</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#lblock\">lblock</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ext4_test_inode_flag\">ext4_test_inode_flag</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#EXT4_INODE_EXTENTS\">EXT4_INODE_EXTENTS</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ext4_ext_calc_metadata_amount\">ext4_ext_calc_metadata_amount</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#lblock\">lblock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ext4_indirect_calc_metadata_amount\">ext4_indirect_calc_metadata_amount</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#lblock\">lblock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called with i_data_sem down, which is important since we can call</span>", 
"<span class=\"comment\"> * ext4_discard_preallocations() from here.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ext4_da_update_reserve_space\">ext4_da_update_reserve_space</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#used\">used</a>, int <a class=\"id\" href=\"#quota_claim\">quota_claim</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_sb_info\">ext4_sb_info</a> *<a class=\"id\" href=\"#sbi\">sbi</a> = <a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_inode_info\">ext4_inode_info</a> *<a class=\"id\" href=\"#ei\">ei</a> = <a class=\"id\" href=\"#EXT4_I\">EXT4_I</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_block_reservation_lock\">i_block_reservation_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_ext4_da_update_reserve_space\">trace_ext4_da_update_reserve_space</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#used\">used</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#used\">used</a> &gt; <a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_reserved_data_blocks\">i_reserved_data_blocks</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_msg\">ext4_msg</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a>, \"%s: ino %lu, used %d \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"with only %d reserved data blocks\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a>, <a class=\"id\" href=\"#used\">used</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_reserved_data_blocks\">i_reserved_data_blocks</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#used\">used</a> = <a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_reserved_data_blocks\">i_reserved_data_blocks</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Update per-inode reservations */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_reserved_data_blocks\">i_reserved_data_blocks</a> -= <a class=\"id\" href=\"#used\">used</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_reserved_meta_blocks\">i_reserved_meta_blocks</a> -= <a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_allocated_meta_blocks\">i_allocated_meta_blocks</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#percpu_counter_sub\">percpu_counter_sub</a>(&amp;<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_dirtyblocks_counter\">s_dirtyblocks_counter</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#used\">used</a> + <a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_allocated_meta_blocks\">i_allocated_meta_blocks</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_allocated_meta_blocks\">i_allocated_meta_blocks</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_reserved_data_blocks\">i_reserved_data_blocks</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We can release all of the reserved metadata blocks</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * only when we have written all of the delayed</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * allocation blocks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#percpu_counter_sub\">percpu_counter_sub</a>(&amp;<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_dirtyblocks_counter\">s_dirtyblocks_counter</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_reserved_meta_blocks\">i_reserved_meta_blocks</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_reserved_meta_blocks\">i_reserved_meta_blocks</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_da_metadata_calc_len\">i_da_metadata_calc_len</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#EXT4_I\">EXT4_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_block_reservation_lock\">i_block_reservation_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Update quota subsystem for data blocks */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#quota_claim\">quota_claim</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dquot_claim_block\">dquot_claim_block</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#used\">used</a>);", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We did fallocate with an offset that is already delayed</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * allocated. So on delayed allocated writeback we should</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * not re-claim the quota for fallocated blocks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dquot_release_reservation_block\">dquot_release_reservation_block</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#used\">used</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we have done all the pending block allocations and if</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * there aren't any writers on the inode, we can discard the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * inode's preallocations.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_reserved_data_blocks\">i_reserved_data_blocks</a> == 0) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_writecount\">i_writecount</a>) == 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_discard_preallocations\">ext4_discard_preallocations</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__check_block_validity\">__check_block_validity</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, const char *<a class=\"id\" href=\"#func\">func</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#line\">line</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_map_blocks\">ext4_map_blocks</a> *<a class=\"id\" href=\"#map\">map</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ext4_data_block_valid\">ext4_data_block_valid</a>(<a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>), <a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#m_pblk\">m_pblk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#m_len\">m_len</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_error_inode\">ext4_error_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#func\">func</a>, <a class=\"id\" href=\"#line\">line</a>, <a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#m_pblk\">m_pblk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"lblock %lu mapped to illegal pblock \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"(length %d)\", (unsigned long) <a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#m_lblk\">m_lblk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#m_len\">m_len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#check_block_validity\">check_block_validity</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#map\">map</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__check_block_validity\">__check_block_validity</a>((<a class=\"id\" href=\"#inode\">inode</a>), <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#__LINE__\">__LINE__</a>, (<a class=\"id\" href=\"#map\">map</a>))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return the number of contiguous dirty pages in a given inode</span>", 
"<span class=\"comment\"> * starting at page frame idx.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#ext4_num_dirty_pages\">ext4_num_dirty_pages</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#idx\">idx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned int <a class=\"id\" href=\"#max_pages\">max_pages</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pagevec\">pagevec</a> <a class=\"id\" href=\"#pvec\">pvec</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#num\">num</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#nr_pages\">nr_pages</a>, <a class=\"id\" href=\"#done\">done</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#max_pages\">max_pages</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pagevec_init\">pagevec_init</a>(&amp;<a class=\"id\" href=\"#pvec\">pvec</a>, 0);", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#done\">done</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#idx\">idx</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a> = <a class=\"id\" href=\"#pagevec_lookup_tag\">pagevec_lookup_tag</a>(&amp;<a class=\"id\" href=\"#pvec\">pvec</a>, <a class=\"id\" href=\"#mapping\">mapping</a>, &amp;<a class=\"id\" href=\"#index\">index</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#PAGECACHE_TAG_DIRTY\">PAGECACHE_TAG_DIRTY</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      (<a class=\"id\" href=\"#pgoff_t\">pgoff_t</a>)<a class=\"id\" href=\"#PAGEVEC_SIZE\">PAGEVEC_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_pages\">nr_pages</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_pages\">nr_pages</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pvec\">pvec</a>.<a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>, *<a class=\"id\" href=\"#head\">head</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_page\">lock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a> != <a class=\"id\" href=\"#mapping\">mapping</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#PageDirty\">PageDirty</a>(<a class=\"id\" href=\"#page\">page</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#PageWriteback\">PageWriteback</a>(<a class=\"id\" href=\"#page\">page</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a> != <a class=\"id\" href=\"#idx\">idx</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#done\">done</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page_has_buffers\">page_has_buffers</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#page_buffers\">page_buffers</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_delay\">buffer_delay</a>(<a class=\"id\" href=\"#bh\">bh</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#buffer_unwritten\">buffer_unwritten</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#done\">done</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} while (!<a class=\"id\" href=\"#done\">done</a> && (<a class=\"id\" href=\"#bh\">bh</a> != <a class=\"id\" href=\"#head\">head</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#done\">done</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#num\">num</a> >= <a class=\"id\" href=\"#max_pages\">max_pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pagevec_release\">pagevec_release</a>(&amp;<a class=\"id\" href=\"#pvec\">pvec</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#num\">num</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The ext4_map_blocks() function tries to look up the requested blocks,</span>", 
"<span class=\"comment\"> * and returns if the blocks are already mapped.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Otherwise it takes the write lock of the i_data_sem and allocate blocks</span>", 
"<span class=\"comment\"> * and store the allocated blocks in the result buffer head and mark it</span>", 
"<span class=\"comment\"> * mapped.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If file type is extents based, it will call ext4_ext_map_blocks(),</span>", 
"<span class=\"comment\"> * Otherwise, call with ext4_ind_map_blocks() to handle indirect mapping</span>", 
"<span class=\"comment\"> * based files</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * On success, it returns the number of blocks being mapped or allocate.</span>", 
"<span class=\"comment\"> * if create==0 and the blocks are pre-allocated and uninitialized block,</span>", 
"<span class=\"comment\"> * the result buffer head is unmapped. If the create ==1, it will make sure</span>", 
"<span class=\"comment\"> * the buffer head is mapped.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It returns 0 if plain look up failed (blocks have not been allocated), in</span>", 
"<span class=\"comment\"> * that casem, buffer head is unmapped</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It returns the error in case of allocation failure.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ext4_map_blocks\">ext4_map_blocks</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#ext4_map_blocks\">ext4_map_blocks</a> *<a class=\"id\" href=\"#map\">map</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#m_flags\">m_flags</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext_debug\">ext_debug</a>(\"ext4_map_blocks(): inode %lu, flag %d, max_blocks %u,\"", 
"<span class=\"ts\"/><span class=\"ts\"/>  \"logical block %lu\\n\", <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#m_len\">m_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  (unsigned long) <a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#m_lblk\">m_lblk</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Try to see if we can get the block without requesting a new</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * file system block.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>((&amp;<a class=\"id\" href=\"#EXT4_I\">EXT4_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_data_sem\">i_data_sem</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ext4_test_inode_flag\">ext4_test_inode_flag</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#EXT4_INODE_EXTENTS\">EXT4_INODE_EXTENTS</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#ext4_ext_map_blocks\">ext4_ext_map_blocks</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#map\">map</a>, 0);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#ext4_ind_map_blocks\">ext4_ind_map_blocks</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#map\">map</a>, 0);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>((&amp;<a class=\"id\" href=\"#EXT4_I\">EXT4_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_data_sem\">i_data_sem</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> &gt; 0 && <a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#m_flags\">m_flags</a> &amp; <a class=\"id\" href=\"#EXT4_MAP_MAPPED\">EXT4_MAP_MAPPED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#check_block_validity\">check_block_validity</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#map\">map</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If it is only a block(s) look up */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#EXT4_GET_BLOCKS_CREATE\">EXT4_GET_BLOCKS_CREATE</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Returns if the blocks have already allocated</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note that if blocks have been preallocated</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ext4_ext_get_block() returns th create = 0</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * with buffer head unmapped.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> &gt; 0 && <a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#m_flags\">m_flags</a> &amp; <a class=\"id\" href=\"#EXT4_MAP_MAPPED\">EXT4_MAP_MAPPED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * When we call get_blocks without the create flag, the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * BH_Unwritten flag could have gotten set if the blocks</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * requested were part of a uninitialized extent.  We need to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * clear this flag now that we are committed to convert all or</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * part of the uninitialized extent to be an initialized</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * extent.  This is because we need to avoid the combination</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of BH_Unwritten and BH_Mapped flags being simultaneously</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * set on the buffer_head.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#m_flags\">m_flags</a> &= ~<a class=\"id\" href=\"#EXT4_MAP_UNWRITTEN\">EXT4_MAP_UNWRITTEN</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * New blocks allocate and/or writing to uninitialized extent</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will possibly result in updating i_data, so we take</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the write lock of i_data_sem, and call get_blocks()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * with create == 1 flag.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>((&amp;<a class=\"id\" href=\"#EXT4_I\">EXT4_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_data_sem\">i_data_sem</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if the caller is from delayed allocation writeout path</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we have already reserved fs blocks for allocation</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * let the underlying get_block() function know to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * avoid double accounting</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#EXT4_GET_BLOCKS_DELALLOC_RESERVE\">EXT4_GET_BLOCKS_DELALLOC_RESERVE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT4_I\">EXT4_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_delalloc_reserved_flag\">i_delalloc_reserved_flag</a> = 1;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We need to check for EXT4 here because migrate</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * could have changed the inode type in between</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ext4_test_inode_flag\">ext4_test_inode_flag</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#EXT4_INODE_EXTENTS\">EXT4_INODE_EXTENTS</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#ext4_ext_map_blocks\">ext4_ext_map_blocks</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#map\">map</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#ext4_ind_map_blocks\">ext4_ind_map_blocks</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#map\">map</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> &gt; 0 && <a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#m_flags\">m_flags</a> &amp; <a class=\"id\" href=\"#EXT4_MAP_NEW\">EXT4_MAP_NEW</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We allocated new blocks which will result in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * i_data's format changing.  Force the migrate</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * to fail by clearing migrate flags</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_clear_inode_state\">ext4_clear_inode_state</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#EXT4_STATE_EXT_MIGRATE\">EXT4_STATE_EXT_MIGRATE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Update reserved blocks/metadata blocks after successful</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * block allocation which had been deferred till now. We don't</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * support fallocate for non extent files. So we can update</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * reserve space here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#retval\">retval</a> &gt; 0) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#EXT4_GET_BLOCKS_DELALLOC_RESERVE\">EXT4_GET_BLOCKS_DELALLOC_RESERVE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_da_update_reserve_space\">ext4_da_update_reserve_space</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#retval\">retval</a>, 1);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#EXT4_GET_BLOCKS_DELALLOC_RESERVE\">EXT4_GET_BLOCKS_DELALLOC_RESERVE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT4_I\">EXT4_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_delalloc_reserved_flag\">i_delalloc_reserved_flag</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>((&amp;<a class=\"id\" href=\"#EXT4_I\">EXT4_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_data_sem\">i_data_sem</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> &gt; 0 && <a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#m_flags\">m_flags</a> &amp; <a class=\"id\" href=\"#EXT4_MAP_MAPPED\">EXT4_MAP_MAPPED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#check_block_validity\">check_block_validity</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#map\">map</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Maximum number of blocks we map for direct IO at once. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DIO_MAX_BLOCKS\">DIO_MAX_BLOCKS</a> 4096", 
"", 
"static int <a class=\"id\" href=\"#_ext4_get_block\">_ext4_get_block</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#iblock\">iblock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a> = <a class=\"id\" href=\"#ext4_journal_current_handle\">ext4_journal_current_handle</a>();", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_map_blocks\">ext4_map_blocks</a> <a class=\"id\" href=\"#map\">map</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0, <a class=\"id\" href=\"#started\">started</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#dio_credits\">dio_credits</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a>.<a class=\"id\" href=\"#m_lblk\">m_lblk</a> = <a class=\"id\" href=\"#iblock\">iblock</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a>.<a class=\"id\" href=\"#m_len\">m_len</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_size\">b_size</a> >> <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> && !<a class=\"id\" href=\"#handle\">handle</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Direct IO write... */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#map\">map</a>.<a class=\"id\" href=\"#m_len\">m_len</a> &gt; <a class=\"id\" href=\"#DIO_MAX_BLOCKS\">DIO_MAX_BLOCKS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a>.<a class=\"id\" href=\"#m_len\">m_len</a> = <a class=\"id\" href=\"#DIO_MAX_BLOCKS\">DIO_MAX_BLOCKS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dio_credits\">dio_credits</a> = <a class=\"id\" href=\"#ext4_chunk_trans_blocks\">ext4_chunk_trans_blocks</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#map\">map</a>.<a class=\"id\" href=\"#m_len\">m_len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a> = <a class=\"id\" href=\"#ext4_journal_start\">ext4_journal_start</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#dio_credits\">dio_credits</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#handle\">handle</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#started\">started</a> = 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ext4_map_blocks\">ext4_map_blocks</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, &amp;<a class=\"id\" href=\"#map\">map</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map_bh\">map_bh</a>(<a class=\"id\" href=\"#bh\">bh</a>, <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#map\">map</a>.<a class=\"id\" href=\"#m_pblk\">m_pblk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_state\">b_state</a> = (<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_state\">b_state</a> &amp; ~<a class=\"id\" href=\"#EXT4_MAP_FLAGS\">EXT4_MAP_FLAGS</a>) | <a class=\"id\" href=\"#map\">map</a>.<a class=\"id\" href=\"#m_flags\">m_flags</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_size\">b_size</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a> * <a class=\"id\" href=\"#map\">map</a>.<a class=\"id\" href=\"#m_len\">m_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#started\">started</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_journal_stop\">ext4_journal_stop</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#ext4_get_block\">ext4_get_block</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#iblock\">iblock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>, int <a class=\"id\" href=\"#create\">create</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#_ext4_get_block\">_ext4_get_block</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#iblock\">iblock</a>, <a class=\"id\" href=\"#bh\">bh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#create\">create</a> ? <a class=\"id\" href=\"#EXT4_GET_BLOCKS_CREATE\">EXT4_GET_BLOCKS_CREATE</a> : 0);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * `handle' can be NULL if create is zero</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#ext4_getblk\">ext4_getblk</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_lblk_t\">ext4_lblk_t</a> <a class=\"id\" href=\"#block\">block</a>, int <a class=\"id\" href=\"#create\">create</a>, int *<a class=\"id\" href=\"#errp\">errp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_map_blocks\">ext4_map_blocks</a> <a class=\"id\" href=\"#map\">map</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#fatal\">fatal</a> = 0, <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT\">J_ASSERT</a>(<a class=\"id\" href=\"#handle\">handle</a> != <a class=\"id\" href=\"#NULL\">NULL</a> || <a class=\"id\" href=\"#create\">create</a> == 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a>.<a class=\"id\" href=\"#m_lblk\">m_lblk</a> = <a class=\"id\" href=\"#block\">block</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a>.<a class=\"id\" href=\"#m_len\">m_len</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext4_map_blocks\">ext4_map_blocks</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, &amp;<a class=\"id\" href=\"#map\">map</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#create\">create</a> ? <a class=\"id\" href=\"#EXT4_GET_BLOCKS_CREATE\">EXT4_GET_BLOCKS_CREATE</a> : 0);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#errp\">errp</a> = <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#errp\">errp</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#sb_getblk\">sb_getblk</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#map\">map</a>.<a class=\"id\" href=\"#m_pblk\">m_pblk</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bh\">bh</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#errp\">errp</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#map\">map</a>.<a class=\"id\" href=\"#m_flags\">m_flags</a> &amp; <a class=\"id\" href=\"#EXT4_MAP_NEW\">EXT4_MAP_NEW</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT\">J_ASSERT</a>(<a class=\"id\" href=\"#create\">create</a> != 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT\">J_ASSERT</a>(<a class=\"id\" href=\"#handle\">handle</a> != <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Now that we do not always journal data, we should</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * keep in mind whether this should always journal the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * new buffer as metadata.  For now, regular file</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * writes use ext4_get_block instead, so it's not a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * problem.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_buffer\">lock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh\">bh</a>, \"call get_create_access\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fatal\">fatal</a> = <a class=\"id\" href=\"#ext4_journal_get_create_access\">ext4_journal_get_create_access</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#fatal\">fatal</a> && !<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>, 0, <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_uptodate\">set_buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_buffer\">unlock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh\">bh</a>, \"call ext4_handle_dirty_metadata\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext4_handle_dirty_metadata\">ext4_handle_dirty_metadata</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#fatal\">fatal</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fatal\">fatal</a> = <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh\">bh</a>, \"not a new buffer\");", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fatal\">fatal</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#errp\">errp</a> = <a class=\"id\" href=\"#fatal\">fatal</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bh\">bh</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#ext4_bread\">ext4_bread</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#ext4_lblk_t\">ext4_lblk_t</a> <a class=\"id\" href=\"#block\">block</a>, int <a class=\"id\" href=\"#create\">create</a>, int *<a class=\"id\" href=\"#err\">err</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#ext4_getblk\">ext4_getblk</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#create\">create</a>, <a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bh\">bh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ll_rw_block\">ll_rw_block</a>(<a class=\"id\" href=\"#READ_META\">READ_META</a>, 1, &amp;<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_on_buffer\">wait_on_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_bh\">put_bh</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#walk_page_buffers\">walk_page_buffers</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#head\">head</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned <a class=\"id\" href=\"#from\">from</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned <a class=\"id\" href=\"#to\">to</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int *<a class=\"id\" href=\"#partial\">partial</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int (*<a class=\"id\" href=\"#fn\">fn</a>)(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>))", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#block_start\">block_start</a>, <a class=\"id\" href=\"#block_end\">block_end</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#blocksize\">blocksize</a> = <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#b_size\">b_size</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>, <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#block_start\">block_start</a> = 0;", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#ret\">ret</a> == 0 && (<a class=\"id\" href=\"#bh\">bh</a> != <a class=\"id\" href=\"#head\">head</a> || !<a class=\"id\" href=\"#block_start\">block_start</a>);", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#block_start\">block_start</a> = <a class=\"id\" href=\"#block_end\">block_end</a>, <a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_end\">block_end</a> = <a class=\"id\" href=\"#block_start\">block_start</a> + <a class=\"id\" href=\"#blocksize\">blocksize</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#block_end\">block_end</a> <= <a class=\"id\" href=\"#from\">from</a> || <a class=\"id\" href=\"#block_start\">block_start</a> >= <a class=\"id\" href=\"#to\">to</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#partial\">partial</a> && !<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#partial\">partial</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = (*<a class=\"id\" href=\"#fn\">fn</a>)(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * To preserve ordering, it is essential that the hole instantiation and</span>", 
"<span class=\"comment\"> * the data write be encapsulated in a single transaction.  We cannot</span>", 
"<span class=\"comment\"> * close off a transaction and start a new one between the ext4_get_block()</span>", 
"<span class=\"comment\"> * and the commit_write().  So doing the jbd2_journal_start at the start of</span>", 
"<span class=\"comment\"> * prepare_write() is the right place.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Also, this function can nest inside ext4_writepage() -&gt;</span>", 
"<span class=\"comment\"> * block_write_full_page(). In that case, we *know* that ext4_writepage()</span>", 
"<span class=\"comment\"> * has generated enough buffer credits to do the whole page.  So we won't</span>", 
"<span class=\"comment\"> * block on the journal in that case, which is good, because the caller may</span>", 
"<span class=\"comment\"> * be PF_MEMALLOC.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * By accident, ext4 can be reentered when a transaction is open via</span>", 
"<span class=\"comment\"> * quota file writes.  If we were to commit the transaction while thus</span>", 
"<span class=\"comment\"> * reentered, there can be a deadlock - we would be holding a quota</span>", 
"<span class=\"comment\"> * lock, and the commit would never complete if another thread had a</span>", 
"<span class=\"comment\"> * transaction open and was blocking on the quota lock - a ranking</span>", 
"<span class=\"comment\"> * violation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * So what we do is to rely on the fact that jbd2_journal_stop/journal_start</span>", 
"<span class=\"comment\"> * will _not_ run commit under these circumstances because handle-&gt;h_ref</span>", 
"<span class=\"comment\"> * is elevated.  We'll still have enough credits for the tiny quotafile</span>", 
"<span class=\"comment\"> * write.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#do_journal_get_write_access\">do_journal_get_write_access</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#dirty\">dirty</a> = <a class=\"id\" href=\"#buffer_dirty\">buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_mapped\">buffer_mapped</a>(<a class=\"id\" href=\"#bh\">bh</a>) || <a class=\"id\" href=\"#buffer_freed\">buffer_freed</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * __block_prepare_write() could have dirtied some buffers. Clean</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the dirty bit as jbd2_journal_get_write_access() could complain</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * otherwise about fs integrity issues. Setting of the dirty bit</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * by __block_prepare_write() isn't a real problem here as we clear</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the bit before releasing a page lock and thus writeback cannot</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ever write the buffer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dirty\">dirty</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_dirty\">clear_buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ext4_journal_get_write_access\">ext4_journal_get_write_access</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a> && <a class=\"id\" href=\"#dirty\">dirty</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ext4_handle_dirty_metadata\">ext4_handle_dirty_metadata</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Truncate blocks that were not used by write. We have to truncate the</span>", 
"<span class=\"comment\"> * pagecache as well so that corresponding buffers get properly unmapped.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ext4_truncate_failed_write\">ext4_truncate_failed_write</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#truncate_inode_pages\">truncate_inode_pages</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>, <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_truncate\">ext4_truncate</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ext4_get_block_write\">ext4_get_block_write</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#iblock\">iblock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh_result\">bh_result</a>, int <a class=\"id\" href=\"#create\">create</a>);", 
"static int <a class=\"id\" href=\"#ext4_write_begin\">ext4_write_begin</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>, unsigned <a class=\"id\" href=\"#len\">len</a>, unsigned <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pagep\">pagep</a>, void **<a class=\"id\" href=\"#fsdata\">fsdata</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#needed_blocks\">needed_blocks</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retries\">retries</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#to\">to</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_ext4_write_begin\">trace_ext4_write_begin</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Reserve one block more for addition to orphan list in case</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we allocate blocks but write fails for some reason</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#needed_blocks\">needed_blocks</a> = <a class=\"id\" href=\"#ext4_writepage_trans_blocks\">ext4_writepage_trans_blocks</a>(<a class=\"id\" href=\"#inode\">inode</a>) + 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#pos\">pos</a> >> <a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#from\">from</a> = <a class=\"id\" href=\"#pos\">pos</a> &amp; (<a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a> - 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a> = <a class=\"id\" href=\"#from\">from</a> + <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a> = <a class=\"id\" href=\"#ext4_journal_start\">ext4_journal_start</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#needed_blocks\">needed_blocks</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#handle\">handle</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We cannot recurse into the filesystem as the transaction is already</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * started */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#AOP_FLAG_NOFS\">AOP_FLAG_NOFS</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#grab_cache_page_write_begin\">grab_cache_page_write_begin</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#index\">index</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_journal_stop\">ext4_journal_stop</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#pagep\">pagep</a> = <a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ext4_should_dioread_nolock\">ext4_should_dioread_nolock</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__block_write_begin\">__block_write_begin</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#ext4_get_block_write\">ext4_get_block_write</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__block_write_begin\">__block_write_begin</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#ext4_get_block\">ext4_get_block</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a> && <a class=\"id\" href=\"#ext4_should_journal_data\">ext4_should_journal_data</a>(<a class=\"id\" href=\"#inode\">inode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#walk_page_buffers\">walk_page_buffers</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#page_buffers\">page_buffers</a>(<a class=\"id\" href=\"#page\">page</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#do_journal_get_write_access\">do_journal_get_write_access</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * __block_write_begin may have instantiated a few blocks</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * outside i_size.  Trim these off again. Don't need</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * i_size_read because we hold i_mutex.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Add inode to orphan list in case we crash before</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * truncate finishes</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a> && <a class=\"id\" href=\"#ext4_can_truncate\">ext4_can_truncate</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_orphan_add\">ext4_orphan_add</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_journal_stop\">ext4_journal_stop</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_truncate_failed_write\">ext4_truncate_failed_write</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If truncate failed early the inode might</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * still be on the orphan list; we need to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * make sure the inode is removed from the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * orphan list in that case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_nlink\">i_nlink</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_orphan_del\">ext4_orphan_del</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a> && <a class=\"id\" href=\"#ext4_should_retry_alloc\">ext4_should_retry_alloc</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, &amp;<a class=\"id\" href=\"#retries\">retries</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/* For write_end() in data=journal mode */</span>", 
"static int <a class=\"id\" href=\"#write_end_fn\">write_end_fn</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_mapped\">buffer_mapped</a>(<a class=\"id\" href=\"#bh\">bh</a>) || <a class=\"id\" href=\"#buffer_freed\">buffer_freed</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_uptodate\">set_buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ext4_handle_dirty_metadata\">ext4_handle_dirty_metadata</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ext4_generic_write_end\">ext4_generic_write_end</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>, unsigned <a class=\"id\" href=\"#len\">len</a>, unsigned <a class=\"id\" href=\"#copied\">copied</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, void *<a class=\"id\" href=\"#fsdata\">fsdata</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i_size_changed\">i_size_changed</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a> = <a class=\"id\" href=\"#ext4_journal_current_handle\">ext4_journal_current_handle</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#copied\">copied</a> = <a class=\"id\" href=\"#block_write_end\">block_write_end</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#copied\">copied</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#fsdata\">fsdata</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * No need to use i_size_read() here, the i_size</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cannot change under us because we hold i_mutex.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * But it's important to update i_size while still holding page lock:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * page writeout could otherwise come in and zero beyond i_size.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#copied\">copied</a> &gt; <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_size_write\">i_size_write</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#copied\">copied</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_size_changed\">i_size_changed</a> = 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#copied\">copied</a> &gt;  <a class=\"id\" href=\"#EXT4_I\">EXT4_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_disksize\">i_disksize</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We need to mark inode dirty even if</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * new_i_size is less that inode-&gt;i_size</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * bu greater than i_disksize.(hint delalloc)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_update_i_disksize\">ext4_update_i_disksize</a>(<a class=\"id\" href=\"#inode\">inode</a>, (<a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#copied\">copied</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_size_changed\">i_size_changed</a> = 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Don't mark the inode dirty under page lock. First, it unnecessarily</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * makes the holding time of page lock longer. Second, it forces lock</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ordering of page lock and transaction start for journaling</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * filesystems.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i_size_changed\">i_size_changed</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_mark_inode_dirty\">ext4_mark_inode_dirty</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#copied\">copied</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We need to pick up the new inode size which generic_commit_write gave us</span>", 
"<span class=\"comment\"> * `file' can be NULL - eg, when called from page_symlink().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ext4 never places buffers on inode-&gt;i_mapping-&gt;private_list.  metadata</span>", 
"<span class=\"comment\"> * buffers are managed internally.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ext4_ordered_write_end\">ext4_ordered_write_end</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>, unsigned <a class=\"id\" href=\"#len\">len</a>, unsigned <a class=\"id\" href=\"#copied\">copied</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, void *<a class=\"id\" href=\"#fsdata\">fsdata</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a> = <a class=\"id\" href=\"#ext4_journal_current_handle\">ext4_journal_current_handle</a>();", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0, <a class=\"id\" href=\"#ret2\">ret2</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_ext4_ordered_write_end\">trace_ext4_ordered_write_end</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#copied\">copied</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ext4_jbd2_file_inode\">ext4_jbd2_file_inode</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret2\">ret2</a> = <a class=\"id\" href=\"#ext4_generic_write_end\">ext4_generic_write_end</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#copied\">copied</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#fsdata\">fsdata</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copied\">copied</a> = <a class=\"id\" href=\"#ret2\">ret2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a> && <a class=\"id\" href=\"#ext4_can_truncate\">ext4_can_truncate</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* if we have allocated more blocks and copied</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * less. We will have blocks allocated outside</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * inode-&gt;i_size. So truncate them</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_orphan_add\">ext4_orphan_add</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret2\">ret2</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ret2\">ret2</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret2\">ret2</a> = <a class=\"id\" href=\"#ext4_journal_stop\">ext4_journal_stop</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ret2\">ret2</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_truncate_failed_write\">ext4_truncate_failed_write</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If truncate failed early the inode might still be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * on the orphan list; we need to make sure the inode</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is removed from the orphan list in that case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_nlink\">i_nlink</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_orphan_del\">ext4_orphan_del</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>}", 
"", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a> ? <a class=\"id\" href=\"#ret\">ret</a> : <a class=\"id\" href=\"#copied\">copied</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ext4_writeback_write_end\">ext4_writeback_write_end</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>, unsigned <a class=\"id\" href=\"#len\">len</a>, unsigned <a class=\"id\" href=\"#copied\">copied</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, void *<a class=\"id\" href=\"#fsdata\">fsdata</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a> = <a class=\"id\" href=\"#ext4_journal_current_handle\">ext4_journal_current_handle</a>();", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0, <a class=\"id\" href=\"#ret2\">ret2</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_ext4_writeback_write_end\">trace_ext4_writeback_write_end</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#copied\">copied</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret2\">ret2</a> = <a class=\"id\" href=\"#ext4_generic_write_end\">ext4_generic_write_end</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#copied\">copied</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#fsdata\">fsdata</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#copied\">copied</a> = <a class=\"id\" href=\"#ret2\">ret2</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a> && <a class=\"id\" href=\"#ext4_can_truncate\">ext4_can_truncate</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* if we have allocated more blocks and copied</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * less. We will have blocks allocated outside</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * inode-&gt;i_size. So truncate them</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_orphan_add\">ext4_orphan_add</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret2\">ret2</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ret2\">ret2</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret2\">ret2</a> = <a class=\"id\" href=\"#ext4_journal_stop\">ext4_journal_stop</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ret2\">ret2</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_truncate_failed_write\">ext4_truncate_failed_write</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If truncate failed early the inode might still be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * on the orphan list; we need to make sure the inode</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is removed from the orphan list in that case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_nlink\">i_nlink</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_orphan_del\">ext4_orphan_del</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a> ? <a class=\"id\" href=\"#ret\">ret</a> : <a class=\"id\" href=\"#copied\">copied</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ext4_journalled_write_end\">ext4_journalled_write_end</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>, unsigned <a class=\"id\" href=\"#len\">len</a>, unsigned <a class=\"id\" href=\"#copied\">copied</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, void *<a class=\"id\" href=\"#fsdata\">fsdata</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a> = <a class=\"id\" href=\"#ext4_journal_current_handle\">ext4_journal_current_handle</a>();", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0, <a class=\"id\" href=\"#ret2\">ret2</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#partial\">partial</a> = 0;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#to\">to</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#new_i_size\">new_i_size</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_ext4_journalled_write_end\">trace_ext4_journalled_write_end</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#copied\">copied</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#from\">from</a> = <a class=\"id\" href=\"#pos\">pos</a> &amp; (<a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a> - 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a> = <a class=\"id\" href=\"#from\">from</a> + <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copied\">copied</a> &lt; <a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#PageUptodate\">PageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copied\">copied</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_zero_new_buffers\">page_zero_new_buffers</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#from\">from</a>+<a class=\"id\" href=\"#copied\">copied</a>, <a class=\"id\" href=\"#to\">to</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#walk_page_buffers\">walk_page_buffers</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#page_buffers\">page_buffers</a>(<a class=\"id\" href=\"#page\">page</a>), <a class=\"id\" href=\"#from\">from</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a>, &amp;<a class=\"id\" href=\"#partial\">partial</a>, <a class=\"id\" href=\"#write_end_fn\">write_end_fn</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#partial\">partial</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageUptodate\">SetPageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_i_size\">new_i_size</a> = <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#copied\">copied</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_i_size\">new_i_size</a> &gt; <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_size_write\">i_size_write</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#pos\">pos</a>+<a class=\"id\" href=\"#copied\">copied</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_set_inode_state\">ext4_set_inode_state</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#EXT4_STATE_JDATA\">EXT4_STATE_JDATA</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_i_size\">new_i_size</a> &gt; <a class=\"id\" href=\"#EXT4_I\">EXT4_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_disksize\">i_disksize</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_update_i_disksize\">ext4_update_i_disksize</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#new_i_size\">new_i_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret2\">ret2</a> = <a class=\"id\" href=\"#ext4_mark_inode_dirty\">ext4_mark_inode_dirty</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ret2\">ret2</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a> && <a class=\"id\" href=\"#ext4_can_truncate\">ext4_can_truncate</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* if we have allocated more blocks and copied</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * less. We will have blocks allocated outside</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * inode-&gt;i_size. So truncate them</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_orphan_add\">ext4_orphan_add</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret2\">ret2</a> = <a class=\"id\" href=\"#ext4_journal_stop\">ext4_journal_stop</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ret2\">ret2</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_truncate_failed_write\">ext4_truncate_failed_write</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If truncate failed early the inode might still be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * on the orphan list; we need to make sure the inode</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is removed from the orphan list in that case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_nlink\">i_nlink</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_orphan_del\">ext4_orphan_del</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a> ? <a class=\"id\" href=\"#ret\">ret</a> : <a class=\"id\" href=\"#copied\">copied</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Reserve a single block located at lblock</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ext4_da_reserve_space\">ext4_da_reserve_space</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#lblock\">lblock</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retries\">retries</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_sb_info\">ext4_sb_info</a> *<a class=\"id\" href=\"#sbi\">sbi</a> = <a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_inode_info\">ext4_inode_info</a> *<a class=\"id\" href=\"#ei\">ei</a> = <a class=\"id\" href=\"#EXT4_I\">EXT4_I</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#md_needed\">md_needed</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * recalculate the amount of metadata blocks to reserve</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in order to allocate nrblocks</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * worse case is one extent per block</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<a class=\"id\" href=\"#repeat\">repeat</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_block_reservation_lock\">i_block_reservation_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#md_needed\">md_needed</a> = <a class=\"id\" href=\"#ext4_calc_metadata_amount\">ext4_calc_metadata_amount</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#lblock\">lblock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_ext4_da_reserve_space\">trace_ext4_da_reserve_space</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#md_needed\">md_needed</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_block_reservation_lock\">i_block_reservation_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We will charge metadata quota at writeout time; this saves</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * us from metadata over-estimation, though we may go over by</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a small amount in the end.  Here we just reserve for data.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#dquot_reserve_block\">dquot_reserve_block</a>(<a class=\"id\" href=\"#inode\">inode</a>, 1);", 
];
xr_frag_insert('l/06/1b1553f8a66b024fd51e7dea6531e284e7dc6c.xr', __xr_tmp);
