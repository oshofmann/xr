var __xr_tmp = [
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ar\">ar</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#simple_transaction_read\">simple_transaction_read</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#simple_transaction_argresp\">simple_transaction_argresp</a> *<a class=\"id\" href=\"#ar\">ar</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ar\">ar</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#simple_read_from_buffer\">simple_read_from_buffer</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#ar\">ar</a>-><a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#ar\">ar</a>-><a class=\"id\" href=\"#size\">size</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#simple_transaction_release\">simple_transaction_release</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_page\">free_page</a>((unsigned long)<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Simple attribute files */</span>", 
"", 
"struct <a class=\"id\" href=\"#simple_attr\">simple_attr</a> {", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#get\">get</a>)(void *, <a class=\"id\" href=\"#u64\">u64</a> *);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#set\">set</a>)(void *, <a class=\"id\" href=\"#u64\">u64</a>);", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#get_buf\">get_buf</a>[24];<span class=\"ts\"/><span class=\"comment\">/* enough to store a u64 and \"\\n\\0\" */</span>", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#set_buf\">set_buf</a>[24];", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#fmt\">fmt</a>;<span class=\"ts\"/><span class=\"comment\">/* format for read operation */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mutex\">mutex</a> <a class=\"id\" href=\"#mutex\">mutex</a>;<span class=\"ts\"/><span class=\"comment\">/* protects access to these buffers */</span>", 
"};", 
"", 
"<span class=\"comment\">/* simple_attr_open is called by an actual attribute open file operation</span>", 
"<span class=\"comment\"> * to set the attribute specific access operations. */</span>", 
"int <a class=\"id\" href=\"#simple_attr_open\">simple_attr_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     int (*<a class=\"id\" href=\"#get\">get</a>)(void *, <a class=\"id\" href=\"#u64\">u64</a> *), int (*<a class=\"id\" href=\"#set\">set</a>)(void *, <a class=\"id\" href=\"#u64\">u64</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>     const char *<a class=\"id\" href=\"#fmt\">fmt</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#simple_attr\">simple_attr</a> *<a class=\"id\" href=\"#attr\">attr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#attr\">attr</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#attr\">attr</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#attr\">attr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#get\">get</a> = <a class=\"id\" href=\"#get\">get</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#set\">set</a> = <a class=\"id\" href=\"#set\">set</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_private\">i_private</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#fmt\">fmt</a> = <a class=\"id\" href=\"#fmt\">fmt</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a> = <a class=\"id\" href=\"#attr\">attr</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nonseekable_open\">nonseekable_open</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#file\">file</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#simple_attr_release\">simple_attr_release</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* read from the buffer that is filled with the get function */</span>", 
"<a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#simple_attr_read\">simple_attr_read</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#simple_attr\">simple_attr</a> *<a class=\"id\" href=\"#attr\">attr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#attr\">attr</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#get\">get</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EACCES\">EACCES</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#mutex_lock_interruptible\">mutex_lock_interruptible</a>(&amp;<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#ppos\">ppos</a>) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* continued read */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#get_buf\">get_buf</a>);", 
"<span class=\"ts\"/>} else {<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* first read */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#get\">get</a>(<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#data\">data</a>, &amp;<a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#scnprintf\">scnprintf</a>(<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#get_buf\">get_buf</a>, sizeof(<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#get_buf\">get_buf</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#fmt\">fmt</a>, (unsigned long long)<a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#simple_read_from_buffer\">simple_read_from_buffer</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#ppos\">ppos</a>, <a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#get_buf\">get_buf</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/* interpret the buffer as a number to call the set function with */</span>", 
"<a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#simple_attr_write\">simple_attr_write</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#simple_attr\">simple_attr</a> *<a class=\"id\" href=\"#attr\">attr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#attr\">attr</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#set\">set</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EACCES\">EACCES</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#mutex_lock_interruptible\">mutex_lock_interruptible</a>(&amp;<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#min\">min</a>(sizeof(<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#set_buf\">set_buf</a>) - 1, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#set_buf\">set_buf</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size\">size</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#set_buf\">set_buf</a>[<a class=\"id\" href=\"#size\">size</a>] = '\\0';", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#simple_strtol\">simple_strtol</a>(<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#set_buf\">set_buf</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#set\">set</a>(<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#len\">len</a>; <span class=\"comment\">/* on success, claim we got the whole input */</span>", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * generic_fh_to_dentry - generic helper for the fh_to_dentry export operation</span>", 
"<span class=\"comment\"> * @sb:<span class=\"ts\"/><span class=\"ts\"/>filesystem to do the file handle conversion on</span>", 
"<span class=\"comment\"> * @fid:<span class=\"ts\"/>file handle to convert</span>", 
"<span class=\"comment\"> * @fh_len:<span class=\"ts\"/>length of the file handle in bytes</span>", 
"<span class=\"comment\"> * @fh_type:<span class=\"ts\"/>type of file handle</span>", 
"<span class=\"comment\"> * @get_inode:<span class=\"ts\"/>filesystem callback to retrieve inode</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function decodes @fid as long as it has one of the well-known</span>", 
"<span class=\"comment\"> * Linux filehandle types and calls @get_inode on it to retrieve the</span>", 
"<span class=\"comment\"> * inode for the object specified in the file handle.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#generic_fh_to_dentry\">generic_fh_to_dentry</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, struct <a class=\"id\" href=\"#fid\">fid</a> *<a class=\"id\" href=\"#fid\">fid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#fh_len\">fh_len</a>, int <a class=\"id\" href=\"#fh_type\">fh_type</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *(*<a class=\"id\" href=\"#get_inode\">get_inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#ino\">ino</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#gen\">gen</a>))", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fh_len\">fh_len</a> &lt; 2)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#fh_type\">fh_type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FILEID_INO32_GEN\">FILEID_INO32_GEN</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FILEID_INO32_GEN_PARENT\">FILEID_INO32_GEN_PARENT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#get_inode\">get_inode</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#fid\">fid</a>-><a class=\"id\" href=\"#i32\">i32</a>.<a class=\"id\" href=\"#ino\">ino</a>, <a class=\"id\" href=\"#fid\">fid</a>-><a class=\"id\" href=\"#i32\">i32</a>.<a class=\"id\" href=\"#gen\">gen</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#d_obtain_alias\">d_obtain_alias</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#generic_fh_to_dentry\">generic_fh_to_dentry</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * generic_fh_to_dentry - generic helper for the fh_to_parent export operation</span>", 
"<span class=\"comment\"> * @sb:<span class=\"ts\"/><span class=\"ts\"/>filesystem to do the file handle conversion on</span>", 
"<span class=\"comment\"> * @fid:<span class=\"ts\"/>file handle to convert</span>", 
"<span class=\"comment\"> * @fh_len:<span class=\"ts\"/>length of the file handle in bytes</span>", 
"<span class=\"comment\"> * @fh_type:<span class=\"ts\"/>type of file handle</span>", 
"<span class=\"comment\"> * @get_inode:<span class=\"ts\"/>filesystem callback to retrieve inode</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function decodes @fid as long as it has one of the well-known</span>", 
"<span class=\"comment\"> * Linux filehandle types and calls @get_inode on it to retrieve the</span>", 
"<span class=\"comment\"> * inode for the _parent_ object specified in the file handle if it</span>", 
"<span class=\"comment\"> * is specified in the file handle, or NULL otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#generic_fh_to_parent\">generic_fh_to_parent</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, struct <a class=\"id\" href=\"#fid\">fid</a> *<a class=\"id\" href=\"#fid\">fid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#fh_len\">fh_len</a>, int <a class=\"id\" href=\"#fh_type\">fh_type</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *(*<a class=\"id\" href=\"#get_inode\">get_inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#ino\">ino</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#gen\">gen</a>))", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fh_len\">fh_len</a> <= 2)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#fh_type\">fh_type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#FILEID_INO32_GEN_PARENT\">FILEID_INO32_GEN_PARENT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#get_inode\">get_inode</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#fid\">fid</a>-><a class=\"id\" href=\"#i32\">i32</a>.<a class=\"id\" href=\"#parent_ino\">parent_ino</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  (<a class=\"id\" href=\"#fh_len\">fh_len</a> &gt; 3 ? <a class=\"id\" href=\"#fid\">fid</a>-><a class=\"id\" href=\"#i32\">i32</a>.<a class=\"id\" href=\"#parent_gen\">parent_gen</a> : 0));", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#d_obtain_alias\">d_obtain_alias</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#generic_fh_to_parent\">generic_fh_to_parent</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * generic_file_fsync - generic fsync implementation for simple filesystems</span>", 
"<span class=\"comment\"> * @file:<span class=\"ts\"/>file to synchronize</span>", 
"<span class=\"comment\"> * @datasync:<span class=\"ts\"/>only synchronize essential metadata if true</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is a generic implementation of the fsync method for simple</span>", 
"<span class=\"comment\"> * filesystems which track all non-inode metadata in the buffers list</span>", 
"<span class=\"comment\"> * hanging off the address_space structure.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#generic_file_fsync\">generic_file_fsync</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, int <a class=\"id\" href=\"#datasync\">datasync</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a> <a class=\"id\" href=\"#wbc\">wbc</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#sync_mode\">sync_mode</a> = <a class=\"id\" href=\"#WB_SYNC_ALL\">WB_SYNC_ALL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#nr_to_write\">nr_to_write</a> = 0, <span class=\"comment\">/* metadata-only; caller takes care of data */</span>", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#sync_mapping_buffers\">sync_mapping_buffers</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>);", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> &amp; <a class=\"id\" href=\"#I_DIRTY\">I_DIRTY</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#datasync\">datasync</a> && !(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> &amp; <a class=\"id\" href=\"#I_DIRTY_DATASYNC\">I_DIRTY_DATASYNC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#sync_inode\">sync_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>, &amp;<a class=\"id\" href=\"#wbc\">wbc</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#generic_file_fsync\">generic_file_fsync</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * No-op implementation of -&gt;fsync for in-memory filesystems.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#noop_fsync\">noop_fsync</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, int <a class=\"id\" href=\"#datasync\">datasync</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dcache_dir_close\">dcache_dir_close</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dcache_dir_lseek\">dcache_dir_lseek</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dcache_dir_open\">dcache_dir_open</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dcache_readdir\">dcache_readdir</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#generic_read_dir\">generic_read_dir</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#get_sb_pseudo\">get_sb_pseudo</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#simple_write_begin\">simple_write_begin</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#simple_write_end\">simple_write_end</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#simple_dir_inode_operations\">simple_dir_inode_operations</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#simple_dir_operations\">simple_dir_operations</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#simple_empty\">simple_empty</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#simple_fill_super\">simple_fill_super</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#simple_getattr\">simple_getattr</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#simple_link\">simple_link</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#simple_lookup\">simple_lookup</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#simple_pin_fs\">simple_pin_fs</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#simple_readpage\">simple_readpage</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#simple_release_fs\">simple_release_fs</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#simple_rename\">simple_rename</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#simple_rmdir\">simple_rmdir</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#simple_statfs\">simple_statfs</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#noop_fsync\">noop_fsync</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#simple_unlink\">simple_unlink</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#simple_read_from_buffer\">simple_read_from_buffer</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#simple_write_to_buffer\">simple_write_to_buffer</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#memory_read_from_buffer\">memory_read_from_buffer</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#simple_transaction_set\">simple_transaction_set</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#simple_transaction_get\">simple_transaction_get</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#simple_transaction_read\">simple_transaction_read</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#simple_transaction_release\">simple_transaction_release</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#simple_attr_open\">simple_attr_open</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#simple_attr_release\">simple_attr_release</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#simple_attr_read\">simple_attr_read</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#simple_attr_write\">simple_attr_write</a>);", 
];
xr_frag_insert('l/06/21bc7607d8d3114ab837adca129670d06184af.xr', __xr_tmp);
