var __xr_tmp = [
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pm_cap\">pm_cap</a> + <a class=\"id\" href=\"#PCI_PM_CTRL\">PCI_PM_CTRL</a>, &amp;<a class=\"id\" href=\"#pmcsr\">pmcsr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#current_state\">current_state</a> = (<a class=\"id\" href=\"#pmcsr\">pmcsr</a> &amp; <a class=\"id\" href=\"#PCI_PM_CTRL_STATE_MASK\">PCI_PM_CTRL_STATE_MASK</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#current_state\">current_state</a> = <a class=\"id\" href=\"#state\">state</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_platform_power_transition - Use platform to change device power state</span>", 
"<span class=\"comment\"> * @dev: PCI device to handle.</span>", 
"<span class=\"comment\"> * @state: State to put the device into.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#pci_platform_power_transition\">pci_platform_power_transition</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pci_power_t\">pci_power_t</a> <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#platform_pci_power_manageable\">platform_pci_power_manageable</a>(<a class=\"id\" href=\"#dev\">dev</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#platform_pci_set_power_state\">platform_pci_set_power_state</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#state\">state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_update_current_state\">pci_update_current_state</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#state\">state</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Fall back to PCI_D0 if native PM is not supported */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pm_cap\">pm_cap</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#current_state\">current_state</a> = <a class=\"id\" href=\"#PCI_D0\">PCI_D0</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __pci_start_power_transition - Start power transition of a PCI device</span>", 
"<span class=\"comment\"> * @dev: PCI device to handle.</span>", 
"<span class=\"comment\"> * @state: State to put the device into.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__pci_start_power_transition\">__pci_start_power_transition</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pci_power_t\">pci_power_t</a> <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#PCI_D0\">PCI_D0</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_platform_power_transition\">pci_platform_power_transition</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_D0\">PCI_D0</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __pci_complete_power_transition - Complete power transition of a PCI device</span>", 
"<span class=\"comment\"> * @dev: PCI device to handle.</span>", 
"<span class=\"comment\"> * @state: State to put the device into.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function should not be called directly by device drivers.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__pci_complete_power_transition\">__pci_complete_power_transition</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pci_power_t\">pci_power_t</a> <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#state\">state</a> >= <a class=\"id\" href=\"#PCI_D0\">PCI_D0</a> ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_platform_power_transition\">pci_platform_power_transition</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#state\">state</a>) : -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__pci_complete_power_transition\">__pci_complete_power_transition</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_set_power_state - Set the power state of a PCI device</span>", 
"<span class=\"comment\"> * @dev: PCI device to handle.</span>", 
"<span class=\"comment\"> * @state: PCI power state (D0, D1, D2, D3hot) to put the device into.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Transition a device to a new power state, using the platform firmware and/or</span>", 
"<span class=\"comment\"> * the device's PCI PM registers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN VALUE:</span>", 
"<span class=\"comment\"> * -EINVAL if the requested state is invalid.</span>", 
"<span class=\"comment\"> * -EIO if device does not support PCI PM or its PM capabilities register has a</span>", 
"<span class=\"comment\"> * wrong version, or device doesn't support the requested state.</span>", 
"<span class=\"comment\"> * 0 if device already is in the requested state.</span>", 
"<span class=\"comment\"> * 0 if device's power state has been successfully changed.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#pci_set_power_state\">pci_set_power_state</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pci_power_t\">pci_power_t</a> <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* bound the state we're entering */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#state\">state</a> &gt; <a class=\"id\" href=\"#PCI_D3hot\">PCI_D3hot</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#PCI_D3hot\">PCI_D3hot</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#state\">state</a> &lt; <a class=\"id\" href=\"#PCI_D0\">PCI_D0</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#PCI_D0\">PCI_D0</a>;", 
"<span class=\"ts\"/>else if ((<a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#PCI_D1\">PCI_D1</a> || <a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#PCI_D2\">PCI_D2</a>) && <a class=\"id\" href=\"#pci_no_d1d2\">pci_no_d1d2</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If the device or the parent bridge do not support PCI PM,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * ignore the request if we're doing anything other than putting</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it into D0 (which would only happen on boot).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__pci_start_power_transition\">__pci_start_power_transition</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#state\">state</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* This device is quirked not to be put into D3, so</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   don't put it in D3 */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#PCI_D3hot\">PCI_D3hot</a> && (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev_flags\">dev_flags</a> &amp; <a class=\"id\" href=\"#PCI_DEV_FLAGS_NO_D3\">PCI_DEV_FLAGS_NO_D3</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#pci_raw_set_power_state\">pci_raw_set_power_state</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#state\">state</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#__pci_complete_power_transition\">__pci_complete_power_transition</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#state\">state</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = 0;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_choose_state - Choose the power state of a PCI device</span>", 
"<span class=\"comment\"> * @dev: PCI device to be suspended</span>", 
"<span class=\"comment\"> * @state: target sleep state for the whole system. This is the value</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>that is passed to suspend() function.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns PCI power state suitable for given device and given system</span>", 
"<span class=\"comment\"> * message.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<a class=\"id\" href=\"#pci_power_t\">pci_power_t</a> <a class=\"id\" href=\"#pci_choose_state\">pci_choose_state</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pm_message_t\">pm_message_t</a> <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_power_t\">pci_power_t</a> <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pci_find_capability\">pci_find_capability</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_CAP_ID_PM\">PCI_CAP_ID_PM</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PCI_D0\">PCI_D0</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#platform_pci_choose_state\">platform_pci_choose_state</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> != <a class=\"id\" href=\"#PCI_POWER_ERROR\">PCI_POWER_ERROR</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#state\">state</a>.<a class=\"id\" href=\"#event\">event</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PM_EVENT_ON\">PM_EVENT_ON</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PCI_D0\">PCI_D0</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PM_EVENT_FREEZE\">PM_EVENT_FREEZE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PM_EVENT_PRETHAW\">PM_EVENT_PRETHAW</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* REVISIT both freeze and pre-thaw \"should\" use D0 */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PM_EVENT_SUSPEND\">PM_EVENT_SUSPEND</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PM_EVENT_HIBERNATE\">PM_EVENT_HIBERNATE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PCI_D3hot\">PCI_D3hot</a>;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"unrecognized suspend event %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#state\">state</a>.<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#PCI_D0\">PCI_D0</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#pci_choose_state\">pci_choose_state</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PCI_EXP_SAVE_REGS\">PCI_EXP_SAVE_REGS</a><span class=\"ts\"/>7", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pcie_cap_has_devctl\">pcie_cap_has_devctl</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#flags\">flags</a>)<span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pcie_cap_has_lnkctl\">pcie_cap_has_lnkctl</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#flags\">flags</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PCI_EXP_FLAGS_VERS\">PCI_EXP_FLAGS_VERS</a>) &gt; 1 ||<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/> (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#PCI_EXP_TYPE_ROOT_PORT\">PCI_EXP_TYPE_ROOT_PORT</a> ||<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#PCI_EXP_TYPE_ENDPOINT\">PCI_EXP_TYPE_ENDPOINT</a> ||<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#PCI_EXP_TYPE_LEG_END\">PCI_EXP_TYPE_LEG_END</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pcie_cap_has_sltctl\">pcie_cap_has_sltctl</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#flags\">flags</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PCI_EXP_FLAGS_VERS\">PCI_EXP_FLAGS_VERS</a>) &gt; 1 ||<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/> ((<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#PCI_EXP_TYPE_ROOT_PORT\">PCI_EXP_TYPE_ROOT_PORT</a>) ||<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>  (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#PCI_EXP_TYPE_DOWNSTREAM\">PCI_EXP_TYPE_DOWNSTREAM</a> &&<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>   (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PCI_EXP_FLAGS_SLOT\">PCI_EXP_FLAGS_SLOT</a>))))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pcie_cap_has_rtctl\">pcie_cap_has_rtctl</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#flags\">flags</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PCI_EXP_FLAGS_VERS\">PCI_EXP_FLAGS_VERS</a>) &gt; 1 ||<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/> (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#PCI_EXP_TYPE_ROOT_PORT\">PCI_EXP_TYPE_ROOT_PORT</a> ||<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#PCI_EXP_TYPE_RC_EC\">PCI_EXP_TYPE_RC_EC</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pcie_cap_has_devctl2\">pcie_cap_has_devctl2</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#flags\">flags</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PCI_EXP_FLAGS_VERS\">PCI_EXP_FLAGS_VERS</a>) &gt; 1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pcie_cap_has_lnkctl2\">pcie_cap_has_lnkctl2</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#flags\">flags</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PCI_EXP_FLAGS_VERS\">PCI_EXP_FLAGS_VERS</a>) &gt; 1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pcie_cap_has_sltctl2\">pcie_cap_has_sltctl2</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#flags\">flags</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PCI_EXP_FLAGS_VERS\">PCI_EXP_FLAGS_VERS</a>) &gt; 1)", 
"", 
"static int <a class=\"id\" href=\"#pci_save_pcie_state\">pci_save_pcie_state</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#i\">i</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_cap_saved_state\">pci_cap_saved_state</a> *<a class=\"id\" href=\"#save_state\">save_state</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#cap\">cap</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pci_pcie_cap\">pci_pcie_cap</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pos\">pos</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#save_state\">save_state</a> = <a class=\"id\" href=\"#pci_find_saved_cap\">pci_find_saved_cap</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_CAP_ID_EXP\">PCI_CAP_ID_EXP</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#save_state\">save_state</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_err\">dev_err</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"buffer not found in %s\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cap\">cap</a> = (<a class=\"id\" href=\"#u16\">u16</a> *)&amp;<a class=\"id\" href=\"#save_state\">save_state</a>-><a class=\"id\" href=\"#data\">data</a>[0];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_EXP_FLAGS\">PCI_EXP_FLAGS</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pcie_cap_has_devctl\">pcie_cap_has_devctl</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pcie_type\">pcie_type</a>, <a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_EXP_DEVCTL\">PCI_EXP_DEVCTL</a>, &amp;<a class=\"id\" href=\"#cap\">cap</a>[<a class=\"id\" href=\"#i\">i</a>++]);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pcie_cap_has_lnkctl\">pcie_cap_has_lnkctl</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pcie_type\">pcie_type</a>, <a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_EXP_LNKCTL\">PCI_EXP_LNKCTL</a>, &amp;<a class=\"id\" href=\"#cap\">cap</a>[<a class=\"id\" href=\"#i\">i</a>++]);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pcie_cap_has_sltctl\">pcie_cap_has_sltctl</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pcie_type\">pcie_type</a>, <a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_EXP_SLTCTL\">PCI_EXP_SLTCTL</a>, &amp;<a class=\"id\" href=\"#cap\">cap</a>[<a class=\"id\" href=\"#i\">i</a>++]);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pcie_cap_has_rtctl\">pcie_cap_has_rtctl</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pcie_type\">pcie_type</a>, <a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_EXP_RTCTL\">PCI_EXP_RTCTL</a>, &amp;<a class=\"id\" href=\"#cap\">cap</a>[<a class=\"id\" href=\"#i\">i</a>++]);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pcie_cap_has_devctl2\">pcie_cap_has_devctl2</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pcie_type\">pcie_type</a>, <a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_EXP_DEVCTL2\">PCI_EXP_DEVCTL2</a>, &amp;<a class=\"id\" href=\"#cap\">cap</a>[<a class=\"id\" href=\"#i\">i</a>++]);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pcie_cap_has_lnkctl2\">pcie_cap_has_lnkctl2</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pcie_type\">pcie_type</a>, <a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_EXP_LNKCTL2\">PCI_EXP_LNKCTL2</a>, &amp;<a class=\"id\" href=\"#cap\">cap</a>[<a class=\"id\" href=\"#i\">i</a>++]);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pcie_cap_has_sltctl2\">pcie_cap_has_sltctl2</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pcie_type\">pcie_type</a>, <a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_EXP_SLTCTL2\">PCI_EXP_SLTCTL2</a>, &amp;<a class=\"id\" href=\"#cap\">cap</a>[<a class=\"id\" href=\"#i\">i</a>++]);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#pci_restore_pcie_state\">pci_restore_pcie_state</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a> = 0, <a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_cap_saved_state\">pci_cap_saved_state</a> *<a class=\"id\" href=\"#save_state\">save_state</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#cap\">cap</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#save_state\">save_state</a> = <a class=\"id\" href=\"#pci_find_saved_cap\">pci_find_saved_cap</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_CAP_ID_EXP\">PCI_CAP_ID_EXP</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pci_find_capability\">pci_find_capability</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_CAP_ID_EXP\">PCI_CAP_ID_EXP</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#save_state\">save_state</a> || <a class=\"id\" href=\"#pos\">pos</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cap\">cap</a> = (<a class=\"id\" href=\"#u16\">u16</a> *)&amp;<a class=\"id\" href=\"#save_state\">save_state</a>-><a class=\"id\" href=\"#data\">data</a>[0];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_EXP_FLAGS\">PCI_EXP_FLAGS</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pcie_cap_has_devctl\">pcie_cap_has_devctl</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pcie_type\">pcie_type</a>, <a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_word\">pci_write_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_EXP_DEVCTL\">PCI_EXP_DEVCTL</a>, <a class=\"id\" href=\"#cap\">cap</a>[<a class=\"id\" href=\"#i\">i</a>++]);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pcie_cap_has_lnkctl\">pcie_cap_has_lnkctl</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pcie_type\">pcie_type</a>, <a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_word\">pci_write_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_EXP_LNKCTL\">PCI_EXP_LNKCTL</a>, <a class=\"id\" href=\"#cap\">cap</a>[<a class=\"id\" href=\"#i\">i</a>++]);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pcie_cap_has_sltctl\">pcie_cap_has_sltctl</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pcie_type\">pcie_type</a>, <a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_word\">pci_write_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_EXP_SLTCTL\">PCI_EXP_SLTCTL</a>, <a class=\"id\" href=\"#cap\">cap</a>[<a class=\"id\" href=\"#i\">i</a>++]);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pcie_cap_has_rtctl\">pcie_cap_has_rtctl</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pcie_type\">pcie_type</a>, <a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_word\">pci_write_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_EXP_RTCTL\">PCI_EXP_RTCTL</a>, <a class=\"id\" href=\"#cap\">cap</a>[<a class=\"id\" href=\"#i\">i</a>++]);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pcie_cap_has_devctl2\">pcie_cap_has_devctl2</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pcie_type\">pcie_type</a>, <a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_word\">pci_write_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_EXP_DEVCTL2\">PCI_EXP_DEVCTL2</a>, <a class=\"id\" href=\"#cap\">cap</a>[<a class=\"id\" href=\"#i\">i</a>++]);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pcie_cap_has_lnkctl2\">pcie_cap_has_lnkctl2</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pcie_type\">pcie_type</a>, <a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_word\">pci_write_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_EXP_LNKCTL2\">PCI_EXP_LNKCTL2</a>, <a class=\"id\" href=\"#cap\">cap</a>[<a class=\"id\" href=\"#i\">i</a>++]);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pcie_cap_has_sltctl2\">pcie_cap_has_sltctl2</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pcie_type\">pcie_type</a>, <a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_word\">pci_write_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_EXP_SLTCTL2\">PCI_EXP_SLTCTL2</a>, <a class=\"id\" href=\"#cap\">cap</a>[<a class=\"id\" href=\"#i\">i</a>++]);", 
"}", 
"", 
"", 
"static int <a class=\"id\" href=\"#pci_save_pcix_state\">pci_save_pcix_state</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_cap_saved_state\">pci_cap_saved_state</a> *<a class=\"id\" href=\"#save_state\">save_state</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pci_find_capability\">pci_find_capability</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_CAP_ID_PCIX\">PCI_CAP_ID_PCIX</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#save_state\">save_state</a> = <a class=\"id\" href=\"#pci_find_saved_cap\">pci_find_saved_cap</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_CAP_ID_PCIX\">PCI_CAP_ID_PCIX</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#save_state\">save_state</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_err\">dev_err</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"buffer not found in %s\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_X_CMD\">PCI_X_CMD</a>, (<a class=\"id\" href=\"#u16\">u16</a> *)<a class=\"id\" href=\"#save_state\">save_state</a>-><a class=\"id\" href=\"#data\">data</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#pci_restore_pcix_state\">pci_restore_pcix_state</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a> = 0, <a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_cap_saved_state\">pci_cap_saved_state</a> *<a class=\"id\" href=\"#save_state\">save_state</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#cap\">cap</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#save_state\">save_state</a> = <a class=\"id\" href=\"#pci_find_saved_cap\">pci_find_saved_cap</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_CAP_ID_PCIX\">PCI_CAP_ID_PCIX</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pci_find_capability\">pci_find_capability</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_CAP_ID_PCIX\">PCI_CAP_ID_PCIX</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#save_state\">save_state</a> || <a class=\"id\" href=\"#pos\">pos</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cap\">cap</a> = (<a class=\"id\" href=\"#u16\">u16</a> *)&amp;<a class=\"id\" href=\"#save_state\">save_state</a>-><a class=\"id\" href=\"#data\">data</a>[0];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_word\">pci_write_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_X_CMD\">PCI_X_CMD</a>, <a class=\"id\" href=\"#cap\">cap</a>[<a class=\"id\" href=\"#i\">i</a>++]);", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_save_state - save the PCI configuration space of a device before suspending</span>", 
"<span class=\"comment\"> * @dev: - PCI device that we're dealing with</span>", 
"<span class=\"comment\"> */</span>", 
"int", 
"<a class=\"id\" href=\"#pci_save_state\">pci_save_state</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* XXX: 100% dword access ok here? */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 16; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#i\">i</a> * 4, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#saved_config_space\">saved_config_space</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#state_saved\">state_saved</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#pci_save_pcie_state\">pci_save_pcie_state</a>(<a class=\"id\" href=\"#dev\">dev</a>)) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#pci_save_pcix_state\">pci_save_pcix_state</a>(<a class=\"id\" href=\"#dev\">dev</a>)) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/** </span>", 
"<span class=\"comment\"> * pci_restore_state - Restore the saved state of a PCI device</span>", 
"<span class=\"comment\"> * @dev: - PCI device that we're dealing with</span>", 
"<span class=\"comment\"> */</span>", 
"int ", 
"<a class=\"id\" href=\"#pci_restore_state\">pci_restore_state</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#val\">val</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#state_saved\">state_saved</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* PCI Express register must be restored first */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_restore_pcie_state\">pci_restore_pcie_state</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The Base Address register should be programmed before the command</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * register(s)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 15; <a class=\"id\" href=\"#i\">i</a> >= 0; <a class=\"id\" href=\"#i\">i</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#i\">i</a> * 4, &amp;<a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> != <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#saved_config_space\">saved_config_space</a>[<a class=\"id\" href=\"#i\">i</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_printk\">dev_printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"restoring config \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"space at offset %#x (was %#x, writing %#x)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#val\">val</a>, (int)<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#saved_config_space\">saved_config_space</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>,<a class=\"id\" href=\"#i\">i</a> * 4,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#saved_config_space\">saved_config_space</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_restore_pcix_state\">pci_restore_pcix_state</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_restore_msi_state\">pci_restore_msi_state</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_restore_iov_state\">pci_restore_iov_state</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#state_saved\">state_saved</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#do_pci_enable_device\">do_pci_enable_device</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#bars\">bars</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#pci_set_power_state\">pci_set_power_state</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_D0\">PCI_D0</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0 && <a class=\"id\" href=\"#err\">err</a> != -<a class=\"id\" href=\"#EIO\">EIO</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#pcibios_enable_device\">pcibios_enable_device</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#bars\">bars</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_fixup_device\">pci_fixup_device</a>(<a class=\"id\" href=\"#pci_fixup_enable\">pci_fixup_enable</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_reenable_device - Resume abandoned device</span>", 
"<span class=\"comment\"> * @dev: PCI device to be resumed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Note this function is a backend of pci_default_resume and is not supposed</span>", 
"<span class=\"comment\"> *  to be called by normal code, write proper resume handler and use it instead.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#pci_reenable_device\">pci_reenable_device</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_is_enabled\">pci_is_enabled</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#do_pci_enable_device\">do_pci_enable_device</a>(<a class=\"id\" href=\"#dev\">dev</a>, (1 << <a class=\"id\" href=\"#PCI_NUM_RESOURCES\">PCI_NUM_RESOURCES</a>) - 1);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__pci_enable_device_flags\">__pci_enable_device_flags</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#bars\">bars</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_add_return\">atomic_add_return</a>(1, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#enable_cnt\">enable_cnt</a>) &gt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* already enabled */</span>", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#DEVICE_COUNT_RESOURCE\">DEVICE_COUNT_RESOURCE</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#resource\">resource</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#flags\">flags</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bars\">bars</a> |= (1 << <a class=\"id\" href=\"#i\">i</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#do_pci_enable_device\">do_pci_enable_device</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#bars\">bars</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#enable_cnt\">enable_cnt</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_enable_device_io - Initialize a device for use with IO space</span>", 
"<span class=\"comment\"> * @dev: PCI device to be initialized</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Initialize device before it's used by a driver. Ask low-level code</span>", 
"<span class=\"comment\"> *  to enable I/O resources. Wake up the device if it was suspended.</span>", 
"<span class=\"comment\"> *  Beware, this function can fail.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#pci_enable_device_io\">pci_enable_device_io</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__pci_enable_device_flags\">__pci_enable_device_flags</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#IORESOURCE_IO\">IORESOURCE_IO</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_enable_device_mem - Initialize a device for use with Memory space</span>", 
"<span class=\"comment\"> * @dev: PCI device to be initialized</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Initialize device before it's used by a driver. Ask low-level code</span>", 
"<span class=\"comment\"> *  to enable Memory resources. Wake up the device if it was suspended.</span>", 
"<span class=\"comment\"> *  Beware, this function can fail.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#pci_enable_device_mem\">pci_enable_device_mem</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__pci_enable_device_flags\">__pci_enable_device_flags</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#IORESOURCE_MEM\">IORESOURCE_MEM</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_enable_device - Initialize device before it's used by a driver.</span>", 
"<span class=\"comment\"> * @dev: PCI device to be initialized</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Initialize device before it's used by a driver. Ask low-level code</span>", 
"<span class=\"comment\"> *  to enable I/O and memory. Wake up the device if it was suspended.</span>", 
"<span class=\"comment\"> *  Beware, this function can fail.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Note we don't actually enable the device many times if we call</span>", 
"<span class=\"comment\"> *  this function repeatedly (we just increment the count).</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#pci_enable_device\">pci_enable_device</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__pci_enable_device_flags\">__pci_enable_device_flags</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#IORESOURCE_MEM\">IORESOURCE_MEM</a> | <a class=\"id\" href=\"#IORESOURCE_IO\">IORESOURCE_IO</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Managed PCI resources.  This manages device on/off, intx/msi/msix</span>", 
"<span class=\"comment\"> * on/off and BAR regions.  pci_dev itself records msi/msix status, so</span>", 
"<span class=\"comment\"> * there's no need to track it separately.  pci_devres is initialized</span>", 
"<span class=\"comment\"> * when a device is enabled using managed PCI device enable interface.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#pci_devres\">pci_devres</a> {", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#enabled\">enabled</a>:1;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#pinned\">pinned</a>:1;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#orig_intx\">orig_intx</a>:1;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#restore_intx\">restore_intx</a>:1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#region_mask\">region_mask</a>;", 
"};", 
"", 
"static void <a class=\"id\" href=\"#pcim_release\">pcim_release</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#gendev\">gendev</a>, void *<a class=\"id\" href=\"#res\">res</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#gendev\">gendev</a>, struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_devres\">pci_devres</a> *<a class=\"id\" href=\"#this\">this</a> = <a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#msi_enabled\">msi_enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_disable_msi\">pci_disable_msi</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#msix_enabled\">msix_enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_disable_msix\">pci_disable_msix</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#DEVICE_COUNT_RESOURCE\">DEVICE_COUNT_RESOURCE</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#region_mask\">region_mask</a> &amp; (1 << <a class=\"id\" href=\"#i\">i</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_release_region\">pci_release_region</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#restore_intx\">restore_intx</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_intx\">pci_intx</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#orig_intx\">orig_intx</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#enabled\">enabled</a> && !<a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#pinned\">pinned</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_disable_device\">pci_disable_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#pci_devres\">pci_devres</a> * <a class=\"id\" href=\"#get_pci_dr\">get_pci_dr</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_devres\">pci_devres</a> *<a class=\"id\" href=\"#dr\">dr</a>, *<a class=\"id\" href=\"#new_dr\">new_dr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dr\">dr</a> = <a class=\"id\" href=\"#devres_find\">devres_find</a>(&amp;<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pcim_release\">pcim_release</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dr\">dr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#dr\">dr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_dr\">new_dr</a> = <a class=\"id\" href=\"#devres_alloc\">devres_alloc</a>(<a class=\"id\" href=\"#pcim_release\">pcim_release</a>, sizeof(*<a class=\"id\" href=\"#new_dr\">new_dr</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#new_dr\">new_dr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#devres_get\">devres_get</a>(&amp;<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#new_dr\">new_dr</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#pci_devres\">pci_devres</a> * <a class=\"id\" href=\"#find_pci_dr\">find_pci_dr</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_is_managed\">pci_is_managed</a>(<a class=\"id\" href=\"#pdev\">pdev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#devres_find\">devres_find</a>(&amp;<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pcim_release\">pcim_release</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pcim_enable_device - Managed pci_enable_device()</span>", 
"<span class=\"comment\"> * @pdev: PCI device to be initialized</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Managed pci_enable_device().</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#pcim_enable_device\">pcim_enable_device</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_devres\">pci_devres</a> *<a class=\"id\" href=\"#dr\">dr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dr\">dr</a> = <a class=\"id\" href=\"#get_pci_dr\">get_pci_dr</a>(<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#dr\">dr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dr\">dr</a>-><a class=\"id\" href=\"#enabled\">enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#pci_enable_device\">pci_enable_device</a>(<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rc\">rc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#is_managed\">is_managed</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dr\">dr</a>-><a class=\"id\" href=\"#enabled\">enabled</a> = 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pcim_pin_device - Pin managed PCI device</span>", 
"<span class=\"comment\"> * @pdev: PCI device to pin</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Pin managed PCI device @pdev.  Pinned device won't be disabled on</span>", 
"<span class=\"comment\"> * driver detach.  @pdev must have been enabled with</span>", 
"<span class=\"comment\"> * pcim_enable_device().</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#pcim_pin_device\">pcim_pin_device</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_devres\">pci_devres</a> *<a class=\"id\" href=\"#dr\">dr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dr\">dr</a> = <a class=\"id\" href=\"#find_pci_dr\">find_pci_dr</a>(<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#dr\">dr</a> || !<a class=\"id\" href=\"#dr\">dr</a>-><a class=\"id\" href=\"#enabled\">enabled</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dr\">dr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dr\">dr</a>-><a class=\"id\" href=\"#pinned\">pinned</a> = 1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pcibios_disable_device - disable arch specific PCI resources for device dev</span>", 
"<span class=\"comment\"> * @dev: the PCI device to disable</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Disables architecture specific PCI resources for the device. This</span>", 
"<span class=\"comment\"> * is the default implementation. Architecture implementations can</span>", 
"<span class=\"comment\"> * override this.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__attribute__\">__attribute__</a> ((<a class=\"id\" href=\"#weak\">weak</a>)) <a class=\"id\" href=\"#pcibios_disable_device\">pcibios_disable_device</a> (struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>) {}", 
"", 
"static void <a class=\"id\" href=\"#do_pci_disable_device\">do_pci_disable_device</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#pci_command\">pci_command</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_COMMAND\">PCI_COMMAND</a>, &amp;<a class=\"id\" href=\"#pci_command\">pci_command</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_command\">pci_command</a> &amp; <a class=\"id\" href=\"#PCI_COMMAND_MASTER\">PCI_COMMAND_MASTER</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_command\">pci_command</a> &= ~<a class=\"id\" href=\"#PCI_COMMAND_MASTER\">PCI_COMMAND_MASTER</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_word\">pci_write_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_COMMAND\">PCI_COMMAND</a>, <a class=\"id\" href=\"#pci_command\">pci_command</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcibios_disable_device\">pcibios_disable_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_disable_enabled_device - Disable device without updating enable_cnt</span>", 
"<span class=\"comment\"> * @dev: PCI device to disable</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE: This function is a backend of PCI power management routines and is</span>", 
"<span class=\"comment\"> * not supposed to be called drivers.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#pci_disable_enabled_device\">pci_disable_enabled_device</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_is_enabled\">pci_is_enabled</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_pci_disable_device\">do_pci_disable_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_disable_device - Disable PCI device after use</span>", 
"<span class=\"comment\"> * @dev: PCI device to be disabled</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Signal to the system that the PCI device is not in use by the system</span>", 
"<span class=\"comment\"> * anymore.  This only involves disabling PCI bus-mastering, if active.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note we don't actually disable the device until all callers of</span>", 
"<span class=\"comment\"> * pci_enable_device() have called pci_disable_device().</span>", 
"<span class=\"comment\"> */</span>", 
"void", 
"<a class=\"id\" href=\"#pci_disable_device\">pci_disable_device</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_devres\">pci_devres</a> *<a class=\"id\" href=\"#dr\">dr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dr\">dr</a> = <a class=\"id\" href=\"#find_pci_dr\">find_pci_dr</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dr\">dr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dr\">dr</a>-><a class=\"id\" href=\"#enabled\">enabled</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_sub_return\">atomic_sub_return</a>(1, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#enable_cnt\">enable_cnt</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_pci_disable_device\">do_pci_disable_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#is_busmaster\">is_busmaster</a> = 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pcibios_set_pcie_reset_state - set reset state for device dev</span>", 
"<span class=\"comment\"> * @dev: the PCIe device reset</span>", 
"<span class=\"comment\"> * @state: Reset state to enter into</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Sets the PCIe reset state for the device. This is the default</span>", 
"<span class=\"comment\"> * implementation. Architecture implementations can override this.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__attribute__\">__attribute__</a> ((<a class=\"id\" href=\"#weak\">weak</a>)) <a class=\"id\" href=\"#pcibios_set_pcie_reset_state\">pcibios_set_pcie_reset_state</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#pcie_reset_state\">pcie_reset_state</a> <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_set_pcie_reset_state - set reset state for device dev</span>", 
"<span class=\"comment\"> * @dev: the PCIe device reset</span>", 
"<span class=\"comment\"> * @state: Reset state to enter into</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Sets the PCI reset state for the device.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#pci_set_pcie_reset_state\">pci_set_pcie_reset_state</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, enum <a class=\"id\" href=\"#pcie_reset_state\">pcie_reset_state</a> <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pcibios_set_pcie_reset_state\">pcibios_set_pcie_reset_state</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#state\">state</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_check_pme_status - Check if given device has generated PME.</span>", 
"<span class=\"comment\"> * @dev: Device to check.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Check the PME status of the device and if set, clear it and clear PME enable</span>", 
"<span class=\"comment\"> * (if set).  Return 'true' if PME status and PME enable were both set or</span>", 
"<span class=\"comment\"> * 'false' otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#pci_check_pme_status\">pci_check_pme_status</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pmcsr_pos\">pmcsr_pos</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#pmcsr\">pmcsr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pm_cap\">pm_cap</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmcsr_pos\">pmcsr_pos</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pm_cap\">pm_cap</a> + <a class=\"id\" href=\"#PCI_PM_CTRL\">PCI_PM_CTRL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pmcsr_pos\">pmcsr_pos</a>, &amp;<a class=\"id\" href=\"#pmcsr\">pmcsr</a>);", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#pmcsr\">pmcsr</a> &amp; <a class=\"id\" href=\"#PCI_PM_CTRL_PME_STATUS\">PCI_PM_CTRL_PME_STATUS</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Clear PME status. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmcsr\">pmcsr</a> |= <a class=\"id\" href=\"#PCI_PM_CTRL_PME_STATUS\">PCI_PM_CTRL_PME_STATUS</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pmcsr\">pmcsr</a> &amp; <a class=\"id\" href=\"#PCI_PM_CTRL_PME_ENABLE\">PCI_PM_CTRL_PME_ENABLE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Disable PME to avoid interrupt flood. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pmcsr\">pmcsr</a> &= ~<a class=\"id\" href=\"#PCI_PM_CTRL_PME_ENABLE\">PCI_PM_CTRL_PME_ENABLE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_word\">pci_write_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pmcsr_pos\">pmcsr_pos</a>, <a class=\"id\" href=\"#pmcsr\">pmcsr</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Time to wait before the system can be put into a sleep state after reporting</span>", 
"<span class=\"comment\"> * a wakeup event signaled by a PCI device.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PCI_WAKEUP_COOLDOWN\">PCI_WAKEUP_COOLDOWN</a><span class=\"ts\"/>100", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_wakeup_event - Report a wakeup event related to a given PCI device.</span>", 
"<span class=\"comment\"> * @dev: Device to report the wakeup event for.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#pci_wakeup_event\">pci_wakeup_event</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#device_may_wakeup\">device_may_wakeup</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pm_wakeup_event\">pm_wakeup_event</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_WAKEUP_COOLDOWN\">PCI_WAKEUP_COOLDOWN</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_pme_wakeup - Wake up a PCI device if its PME Status bit is set.</span>", 
"<span class=\"comment\"> * @dev: Device to handle.</span>", 
"<span class=\"comment\"> * @ign: Ignored.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Check if @dev has generated PME and queue a resume request for it in that</span>", 
"<span class=\"comment\"> * case.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#pci_pme_wakeup\">pci_pme_wakeup</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#ign\">ign</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_check_pme_status\">pci_check_pme_status</a>(<a class=\"id\" href=\"#dev\">dev</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pm_request_resume\">pm_request_resume</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_wakeup_event\">pci_wakeup_event</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_pme_wakeup_bus - Walk given bus and wake up devices on it, if necessary.</span>", 
"<span class=\"comment\"> * @bus: Top bus of the subtree to walk.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#pci_pme_wakeup_bus\">pci_pme_wakeup_bus</a>(struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bus\">bus</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_walk_bus\">pci_walk_bus</a>(<a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#pci_pme_wakeup\">pci_pme_wakeup</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_pme_capable - check the capability of PCI device to generate PME#</span>", 
"<span class=\"comment\"> * @dev: PCI device to handle.</span>", 
"<span class=\"comment\"> * @state: PCI state from which device will issue PME#.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#pci_pme_capable\">pci_pme_capable</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pci_power_t\">pci_power_t</a> <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pm_cap\">pm_cap</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/>return !!(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pme_support\">pme_support</a> &amp; (1 << <a class=\"id\" href=\"#state\">state</a>));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_pme_active - enable or disable PCI device's PME# function</span>", 
"<span class=\"comment\"> * @dev: PCI device to handle.</span>", 
"<span class=\"comment\"> * @enable: 'true' to enable PME# generation; 'false' to disable it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The caller must verify that the device is capable of generating PME# before</span>", 
"<span class=\"comment\"> * calling this function with @enable equal to 'true'.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#pci_pme_active\">pci_pme_active</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#enable\">enable</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#pmcsr\">pmcsr</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pm_cap\">pm_cap</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pm_cap\">pm_cap</a> + <a class=\"id\" href=\"#PCI_PM_CTRL\">PCI_PM_CTRL</a>, &amp;<a class=\"id\" href=\"#pmcsr\">pmcsr</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Clear PME_Status by writing 1 to it and enable PME# */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmcsr\">pmcsr</a> |= <a class=\"id\" href=\"#PCI_PM_CTRL_PME_STATUS\">PCI_PM_CTRL_PME_STATUS</a> | <a class=\"id\" href=\"#PCI_PM_CTRL_PME_ENABLE\">PCI_PM_CTRL_PME_ENABLE</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#enable\">enable</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pmcsr\">pmcsr</a> &= ~<a class=\"id\" href=\"#PCI_PM_CTRL_PME_ENABLE\">PCI_PM_CTRL_PME_ENABLE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_word\">pci_write_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pm_cap\">pm_cap</a> + <a class=\"id\" href=\"#PCI_PM_CTRL\">PCI_PM_CTRL</a>, <a class=\"id\" href=\"#pmcsr\">pmcsr</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_printk\">dev_printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"PME# %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enable\">enable</a> ? \"enabled\" : \"disabled\");", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __pci_enable_wake - enable PCI device as wakeup event source</span>", 
"<span class=\"comment\"> * @dev: PCI device affected</span>", 
"<span class=\"comment\"> * @state: PCI state from which device will issue wakeup events</span>", 
"<span class=\"comment\"> * @runtime: True if the events are to be generated at run time</span>", 
"<span class=\"comment\"> * @enable: True to enable event generation; false to disable</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This enables the device as a wakeup event source, or disables it.</span>", 
"<span class=\"comment\"> * When such events involves platform-specific hooks, those hooks are</span>", 
"<span class=\"comment\"> * called automatically by this routine.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Devices with legacy power management (no standard PCI PM capabilities)</span>", 
"<span class=\"comment\"> * always require such platform hooks.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN VALUE:</span>", 
"<span class=\"comment\"> * 0 is returned on success</span>", 
"<span class=\"comment\"> * -EINVAL is returned if device is not supposed to wake up the system</span>", 
"<span class=\"comment\"> * Error code depending on the platform is returned if both the platform and</span>", 
"<span class=\"comment\"> * the native mechanism fail to enable the generation of wake-up events</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__pci_enable_wake\">__pci_enable_wake</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pci_power_t\">pci_power_t</a> <a class=\"id\" href=\"#state\">state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#runtime\">runtime</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#enable\">enable</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#enable\">enable</a> && !<a class=\"id\" href=\"#runtime\">runtime</a> && !<a class=\"id\" href=\"#device_may_wakeup\">device_may_wakeup</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't do the same thing twice in a row for one device. */</span>", 
"<span class=\"ts\"/>if (!!<a class=\"id\" href=\"#enable\">enable</a> == !!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#wakeup_prepared\">wakeup_prepared</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * According to \"PCI System Architecture\" 4th ed. by Tom Shanley &amp; Don</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Anderson we should be doing PME# wake enable followed by ACPI wake</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * enable.  To disable wake-up we call the platform first, for symmetry.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#enable\">enable</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_pme_capable\">pci_pme_capable</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#state\">state</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_pme_active\">pci_pme_active</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#runtime\">runtime</a> ? <a class=\"id\" href=\"#platform_pci_run_wake\">platform_pci_run_wake</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#true\">true</a>) :", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#platform_pci_sleep_wake\">platform_pci_sleep_wake</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#wakeup_prepared\">wakeup_prepared</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#runtime\">runtime</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#platform_pci_run_wake\">platform_pci_run_wake</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#platform_pci_sleep_wake\">platform_pci_sleep_wake</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_pme_active\">pci_pme_active</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#wakeup_prepared\">wakeup_prepared</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__pci_enable_wake\">__pci_enable_wake</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_wake_from_d3 - enable/disable device to wake up from D3_hot or D3_cold</span>", 
"<span class=\"comment\"> * @dev: PCI device to prepare</span>", 
"<span class=\"comment\"> * @enable: True to enable wake-up event generation; false to disable</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Many drivers want the device to wake up the system from D3_hot or D3_cold</span>", 
"<span class=\"comment\"> * and this function allows them to set that up cleanly - pci_enable_wake()</span>", 
"<span class=\"comment\"> * should not be called twice in a row to enable wake-up due to PCI PM vs ACPI</span>", 
"<span class=\"comment\"> * ordering constraints.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function only returns error code if the device is not capable of</span>", 
"<span class=\"comment\"> * generating PME# from both D3_hot and D3_cold, and the platform is unable to</span>", 
"<span class=\"comment\"> * enable wake-up power for it.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#pci_wake_from_d3\">pci_wake_from_d3</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#enable\">enable</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pci_pme_capable\">pci_pme_capable</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_D3cold\">PCI_D3cold</a>) ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_enable_wake\">pci_enable_wake</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_D3cold\">PCI_D3cold</a>, <a class=\"id\" href=\"#enable\">enable</a>) :", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_enable_wake\">pci_enable_wake</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_D3hot\">PCI_D3hot</a>, <a class=\"id\" href=\"#enable\">enable</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_target_state - find an appropriate low power state for a given PCI dev</span>", 
"<span class=\"comment\"> * @dev: PCI device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Use underlying platform code to find a supported low power state for @dev.</span>", 
"<span class=\"comment\"> * If the platform can't manage @dev, return the deepest state from which it</span>", 
"<span class=\"comment\"> * can generate wake events, based on any available PME info.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#pci_power_t\">pci_power_t</a> <a class=\"id\" href=\"#pci_target_state\">pci_target_state</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_power_t\">pci_power_t</a> <a class=\"id\" href=\"#target_state\">target_state</a> = <a class=\"id\" href=\"#PCI_D3hot\">PCI_D3hot</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#platform_pci_power_manageable\">platform_pci_power_manageable</a>(<a class=\"id\" href=\"#dev\">dev</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Call the platform to choose the target state of the device</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and enable wake-up from this state if supported.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_power_t\">pci_power_t</a> <a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#platform_pci_choose_state\">platform_pci_choose_state</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#state\">state</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#PCI_POWER_ERROR\">PCI_POWER_ERROR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#PCI_UNKNOWN\">PCI_UNKNOWN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#PCI_D1\">PCI_D1</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#PCI_D2\">PCI_D2</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_no_d1d2\">pci_no_d1d2</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#target_state\">target_state</a> = <a class=\"id\" href=\"#state\">state</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else if (!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pm_cap\">pm_cap</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#target_state\">target_state</a> = <a class=\"id\" href=\"#PCI_D0\">PCI_D0</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#device_may_wakeup\">device_may_wakeup</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Find the deepest state from which the device can generate</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * wake-up events, make it the target state and enable device</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to generate PME#.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pme_support\">pme_support</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#target_state\">target_state</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      && !(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pme_support\">pme_support</a> &amp; (1 << <a class=\"id\" href=\"#target_state\">target_state</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#target_state\">target_state</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#target_state\">target_state</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_prepare_to_sleep - prepare PCI device for system-wide transition into a sleep state</span>", 
"<span class=\"comment\"> * @dev: Device to handle.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Choose the power state appropriate for the device depending on whether</span>", 
"<span class=\"comment\"> * it can wake up the system and/or is power manageable by the platform</span>", 
"<span class=\"comment\"> * (PCI_D3hot is the default) and put the device into that state.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#pci_prepare_to_sleep\">pci_prepare_to_sleep</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_power_t\">pci_power_t</a> <a class=\"id\" href=\"#target_state\">target_state</a> = <a class=\"id\" href=\"#pci_target_state\">pci_target_state</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#target_state\">target_state</a> == <a class=\"id\" href=\"#PCI_POWER_ERROR\">PCI_POWER_ERROR</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_enable_wake\">pci_enable_wake</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#target_state\">target_state</a>, <a class=\"id\" href=\"#device_may_wakeup\">device_may_wakeup</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#pci_set_power_state\">pci_set_power_state</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#target_state\">target_state</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_enable_wake\">pci_enable_wake</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#target_state\">target_state</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_back_from_sleep - turn PCI device on during system-wide transition into working state</span>", 
"<span class=\"comment\"> * @dev: Device to handle.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Disable device's system wake-up capability and put it into D0.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#pci_back_from_sleep\">pci_back_from_sleep</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_enable_wake\">pci_enable_wake</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_D0\">PCI_D0</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pci_set_power_state\">pci_set_power_state</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_D0\">PCI_D0</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_finish_runtime_suspend - Carry out PCI-specific part of runtime suspend.</span>", 
"<span class=\"comment\"> * @dev: PCI device being suspended.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Prepare @dev to generate wake-up events at run time and put it into a low</span>", 
"<span class=\"comment\"> * power state.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#pci_finish_runtime_suspend\">pci_finish_runtime_suspend</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_power_t\">pci_power_t</a> <a class=\"id\" href=\"#target_state\">target_state</a> = <a class=\"id\" href=\"#pci_target_state\">pci_target_state</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#target_state\">target_state</a> == <a class=\"id\" href=\"#PCI_POWER_ERROR\">PCI_POWER_ERROR</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__pci_enable_wake\">__pci_enable_wake</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#target_state\">target_state</a>, <a class=\"id\" href=\"#true\">true</a>, <a class=\"id\" href=\"#pci_dev_run_wake\">pci_dev_run_wake</a>(<a class=\"id\" href=\"#dev\">dev</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#pci_set_power_state\">pci_set_power_state</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#target_state\">target_state</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__pci_enable_wake\">__pci_enable_wake</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#target_state\">target_state</a>, <a class=\"id\" href=\"#true\">true</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_dev_run_wake - Check if device can generate run-time wake-up events.</span>", 
"<span class=\"comment\"> * @dev: Device to check.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return true if the device itself is cabable of generating wake-up events</span>", 
"<span class=\"comment\"> * (through the platform or using the native PCIe PME) or if the device supports</span>", 
"<span class=\"comment\"> * PME and one of its upstream bridges can generate wake-up events.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#pci_dev_run_wake\">pci_dev_run_wake</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_bus\">pci_bus</a> *<a class=\"id\" href=\"#bus\">bus</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#device_run_wake\">device_run_wake</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pme_support\">pme_support</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#parent\">parent</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#bridge\">bridge</a> = <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#self\">self</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#device_run_wake\">device_run_wake</a>(&amp;<a class=\"id\" href=\"#bridge\">bridge</a>-><a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bus\">bus</a> = <a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We have reached the root bus. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#bridge\">bridge</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#device_run_wake\">device_run_wake</a>(<a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#bridge\">bridge</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#pci_dev_run_wake\">pci_dev_run_wake</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_pm_init - Initialize PM functions of given PCI device</span>", 
"<span class=\"comment\"> * @dev: PCI device to handle.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#pci_pm_init\">pci_pm_init</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pm\">pm</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#pmc\">pmc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pm_runtime_forbid\">pm_runtime_forbid</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#device_enable_async_suspend\">device_enable_async_suspend</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#wakeup_prepared\">wakeup_prepared</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pm_cap\">pm_cap</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* find PCI PM capability in list */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pm\">pm</a> = <a class=\"id\" href=\"#pci_find_capability\">pci_find_capability</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_CAP_ID_PM\">PCI_CAP_ID_PM</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pm\">pm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"comment\">/* Check device's ability to generate PME# */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pm\">pm</a> + <a class=\"id\" href=\"#PCI_PM_PMC\">PCI_PM_PMC</a>, &amp;<a class=\"id\" href=\"#pmc\">pmc</a>);", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#pmc\">pmc</a> &amp; <a class=\"id\" href=\"#PCI_PM_CAP_VER_MASK\">PCI_PM_CAP_VER_MASK</a>) &gt; 3) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_err\">dev_err</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"unsupported PM cap regs version (%u)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pmc\">pmc</a> &amp; <a class=\"id\" href=\"#PCI_PM_CAP_VER_MASK\">PCI_PM_CAP_VER_MASK</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pm_cap\">pm_cap</a> = <a class=\"id\" href=\"#pm\">pm</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#d3_delay\">d3_delay</a> = <a class=\"id\" href=\"#PCI_PM_D3_WAIT\">PCI_PM_D3_WAIT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#d1_support\">d1_support</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#d2_support\">d2_support</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pci_no_d1d2\">pci_no_d1d2</a>(<a class=\"id\" href=\"#dev\">dev</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pmc\">pmc</a> &amp; <a class=\"id\" href=\"#PCI_PM_CAP_D1\">PCI_PM_CAP_D1</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#d1_support\">d1_support</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pmc\">pmc</a> &amp; <a class=\"id\" href=\"#PCI_PM_CAP_D2\">PCI_PM_CAP_D2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#d2_support\">d2_support</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#d1_support\">d1_support</a> || <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#d2_support\">d2_support</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_printk\">dev_printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"supports%s%s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#d1_support\">d1_support</a> ? \" D1\" : \"\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#d2_support\">d2_support</a> ? \" D2\" : \"\");", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmc\">pmc</a> &= <a class=\"id\" href=\"#PCI_PM_CAP_PME_MASK\">PCI_PM_CAP_PME_MASK</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pmc\">pmc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_printk\">dev_printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"PME# supported from%s%s%s%s%s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> (<a class=\"id\" href=\"#pmc\">pmc</a> &amp; <a class=\"id\" href=\"#PCI_PM_CAP_PME_D0\">PCI_PM_CAP_PME_D0</a>) ? \" D0\" : \"\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> (<a class=\"id\" href=\"#pmc\">pmc</a> &amp; <a class=\"id\" href=\"#PCI_PM_CAP_PME_D1\">PCI_PM_CAP_PME_D1</a>) ? \" D1\" : \"\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> (<a class=\"id\" href=\"#pmc\">pmc</a> &amp; <a class=\"id\" href=\"#PCI_PM_CAP_PME_D2\">PCI_PM_CAP_PME_D2</a>) ? \" D2\" : \"\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> (<a class=\"id\" href=\"#pmc\">pmc</a> &amp; <a class=\"id\" href=\"#PCI_PM_CAP_PME_D3\">PCI_PM_CAP_PME_D3</a>) ? \" D3hot\" : \"\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> (<a class=\"id\" href=\"#pmc\">pmc</a> &amp; <a class=\"id\" href=\"#PCI_PM_CAP_PME_D3cold\">PCI_PM_CAP_PME_D3cold</a>) ? \" D3cold\" : \"\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pme_support\">pme_support</a> = <a class=\"id\" href=\"#pmc\">pmc</a> >> <a class=\"id\" href=\"#PCI_PM_CAP_PME_SHIFT\">PCI_PM_CAP_PME_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Make device's PM flags reflect the wake-up capability, but</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * let the user space enable it to wake up the system as needed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device_set_wakeup_capable\">device_set_wakeup_capable</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Disable the PME# generation functionality */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_pme_active\">pci_pme_active</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pme_support\">pme_support</a> = 0;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * platform_pci_wakeup_init - init platform wakeup if present</span>", 
"<span class=\"comment\"> * @dev: PCI device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Some devices don't have PCI PM caps but can still generate wakeup</span>", 
"<span class=\"comment\"> * events through platform methods (like ACPI events).  If @dev supports</span>", 
"<span class=\"comment\"> * platform wakeup events, set the device flag to indicate as much.  This</span>", 
"<span class=\"comment\"> * may be redundant if the device also supports PCI PM caps, but double</span>", 
"<span class=\"comment\"> * initialization should be safe in that case.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#platform_pci_wakeup_init\">platform_pci_wakeup_init</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#platform_pci_can_wakeup\">platform_pci_can_wakeup</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#device_set_wakeup_capable\">device_set_wakeup_capable</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#platform_pci_sleep_wake\">platform_pci_sleep_wake</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_add_save_buffer - allocate buffer for saving given capability registers</span>", 
"<span class=\"comment\"> * @dev: the PCI device</span>", 
"<span class=\"comment\"> * @cap: the capability to allocate the buffer for</span>", 
"<span class=\"comment\"> * @size: requested size of the buffer</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#pci_add_cap_save_buffer\">pci_add_cap_save_buffer</a>(", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, char <a class=\"id\" href=\"#cap\">cap</a>, unsigned int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_cap_saved_state\">pci_cap_saved_state</a> *<a class=\"id\" href=\"#save_state\">save_state</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pci_find_capability\">pci_find_capability</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#cap\">cap</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#save_state\">save_state</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#save_state\">save_state</a>) + <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#save_state\">save_state</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#save_state\">save_state</a>-><a class=\"id\" href=\"#cap_nr\">cap_nr</a> = <a class=\"id\" href=\"#cap\">cap</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_add_saved_cap\">pci_add_saved_cap</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#save_state\">save_state</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_allocate_cap_save_buffers - allocate buffers for saving capabilities</span>", 
"<span class=\"comment\"> * @dev: the PCI device</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#pci_allocate_cap_save_buffers\">pci_allocate_cap_save_buffers</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#pci_add_cap_save_buffer\">pci_add_cap_save_buffer</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_CAP_ID_EXP\">PCI_CAP_ID_EXP</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PCI_EXP_SAVE_REGS\">PCI_EXP_SAVE_REGS</a> * sizeof(<a class=\"id\" href=\"#u16\">u16</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_err\">dev_err</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"unable to preallocate PCI Express save buffer\\n\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#pci_add_cap_save_buffer\">pci_add_cap_save_buffer</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_CAP_ID_PCIX\">PCI_CAP_ID_PCIX</a>, sizeof(<a class=\"id\" href=\"#u16\">u16</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_err\">dev_err</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"unable to preallocate PCI-X save buffer\\n\");", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_enable_ari - enable ARI forwarding if hardware support it</span>", 
"<span class=\"comment\"> * @dev: the PCI device</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#pci_enable_ari\">pci_enable_ari</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#cap\">cap</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#ctrl\">ctrl</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#bridge\">bridge</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pci_is_pcie\">pci_is_pcie</a>(<a class=\"id\" href=\"#dev\">dev</a>) || <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devfn\">devfn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pci_find_ext_capability\">pci_find_ext_capability</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_EXT_CAP_ID_ARI\">PCI_EXT_CAP_ID_ARI</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pos\">pos</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bridge\">bridge</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#self\">self</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bridge\">bridge</a> || !<a class=\"id\" href=\"#pci_is_pcie\">pci_is_pcie</a>(<a class=\"id\" href=\"#bridge\">bridge</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pci_pcie_cap\">pci_pcie_cap</a>(<a class=\"id\" href=\"#bridge\">bridge</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pos\">pos</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#bridge\">bridge</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_EXP_DEVCAP2\">PCI_EXP_DEVCAP2</a>, &amp;<a class=\"id\" href=\"#cap\">cap</a>);", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#cap\">cap</a> &amp; <a class=\"id\" href=\"#PCI_EXP_DEVCAP2_ARI\">PCI_EXP_DEVCAP2_ARI</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#bridge\">bridge</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_EXP_DEVCTL2\">PCI_EXP_DEVCTL2</a>, &amp;<a class=\"id\" href=\"#ctrl\">ctrl</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctrl\">ctrl</a> |= <a class=\"id\" href=\"#PCI_EXP_DEVCTL2_ARI\">PCI_EXP_DEVCTL2_ARI</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_word\">pci_write_config_word</a>(<a class=\"id\" href=\"#bridge\">bridge</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_EXP_DEVCTL2\">PCI_EXP_DEVCTL2</a>, <a class=\"id\" href=\"#ctrl\">ctrl</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bridge\">bridge</a>-><a class=\"id\" href=\"#ari_enabled\">ari_enabled</a> = 1;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#pci_acs_enable\">pci_acs_enable</a>;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_request_acs - ask for ACS to be enabled if supported</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#pci_request_acs\">pci_request_acs</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_acs_enable\">pci_acs_enable</a> = 1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_enable_acs - enable ACS if hardware support it</span>", 
"<span class=\"comment\"> * @dev: the PCI device</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#pci_enable_acs\">pci_enable_acs</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#cap\">cap</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#ctrl\">ctrl</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pci_acs_enable\">pci_acs_enable</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pci_is_pcie\">pci_is_pcie</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pci_find_ext_capability\">pci_find_ext_capability</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_EXT_CAP_ID_ACS\">PCI_EXT_CAP_ID_ACS</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pos\">pos</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_ACS_CAP\">PCI_ACS_CAP</a>, &amp;<a class=\"id\" href=\"#cap\">cap</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_ACS_CTRL\">PCI_ACS_CTRL</a>, &amp;<a class=\"id\" href=\"#ctrl\">ctrl</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Source Validation */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctrl\">ctrl</a> |= (<a class=\"id\" href=\"#cap\">cap</a> &amp; <a class=\"id\" href=\"#PCI_ACS_SV\">PCI_ACS_SV</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* P2P Request Redirect */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctrl\">ctrl</a> |= (<a class=\"id\" href=\"#cap\">cap</a> &amp; <a class=\"id\" href=\"#PCI_ACS_RR\">PCI_ACS_RR</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* P2P Completion Redirect */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctrl\">ctrl</a> |= (<a class=\"id\" href=\"#cap\">cap</a> &amp; <a class=\"id\" href=\"#PCI_ACS_CR\">PCI_ACS_CR</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Upstream Forwarding */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctrl\">ctrl</a> |= (<a class=\"id\" href=\"#cap\">cap</a> &amp; <a class=\"id\" href=\"#PCI_ACS_UF\">PCI_ACS_UF</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_word\">pci_write_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_ACS_CTRL\">PCI_ACS_CTRL</a>, <a class=\"id\" href=\"#ctrl\">ctrl</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_swizzle_interrupt_pin - swizzle INTx for device behind bridge</span>", 
"<span class=\"comment\"> * @dev: the PCI device</span>", 
"<span class=\"comment\"> * @pin: the INTx pin (1=INTA, 2=INTB, 3=INTD, 4=INTD)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Perform INTx swizzling for a device behind one level of bridge.  This is</span>", 
"<span class=\"comment\"> * required by section 9.1 of the PCI-to-PCI bridge specification for devices</span>", 
"<span class=\"comment\"> * behind bridges on add-in cards.  For devices with ARI enabled, the slot</span>", 
"<span class=\"comment\"> * number is always 0 (see the Implementation Note in section 2.2.8.1 of</span>", 
"<span class=\"comment\"> * the PCI Express Base Specification, Revision 2.1)</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#pci_swizzle_interrupt_pin\">pci_swizzle_interrupt_pin</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#pin\">pin</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#slot\">slot</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_ari_enabled\">pci_ari_enabled</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slot\">slot</a> = 0;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slot\">slot</a> = <a class=\"id\" href=\"#PCI_SLOT\">PCI_SLOT</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devfn\">devfn</a>);", 
"", 
"<span class=\"ts\"/>return (((<a class=\"id\" href=\"#pin\">pin</a> - 1) + <a class=\"id\" href=\"#slot\">slot</a>) % 4) + 1;", 
"}", 
"", 
"int", 
"<a class=\"id\" href=\"#pci_get_interrupt_pin\">pci_get_interrupt_pin</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> **<a class=\"id\" href=\"#bridge\">bridge</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#pin\">pin</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pin\">pin</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pin\">pin</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pin\">pin</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#pci_is_root_bus\">pci_is_root_bus</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pin\">pin</a> = <a class=\"id\" href=\"#pci_swizzle_interrupt_pin\">pci_swizzle_interrupt_pin</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pin\">pin</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#self\">self</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#bridge\">bridge</a> = <a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pin\">pin</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pci_common_swizzle - swizzle INTx all the way to root bridge</span>", 
"<span class=\"comment\"> * @dev: the PCI device</span>", 
"<span class=\"comment\"> * @pinp: pointer to the INTx pin value (1=INTA, 2=INTB, 3=INTD, 4=INTD)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Perform INTx swizzling for a device.  This traverses through all PCI-to-PCI</span>", 
"<span class=\"comment\"> * bridges all the way up to a PCI root bus.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#pci_common_swizzle\">pci_common_swizzle</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#pinp\">pinp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#pin\">pin</a> = *<a class=\"id\" href=\"#pinp\">pinp</a>;", 
"", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#pci_is_root_bus\">pci_is_root_bus</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pin\">pin</a> = <a class=\"id\" href=\"#pci_swizzle_interrupt_pin\">pci_swizzle_interrupt_pin</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pin\">pin</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>-><a class=\"id\" href=\"#self\">self</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#pinp\">pinp</a> = <a class=\"id\" href=\"#pin\">pin</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#PCI_SLOT\">PCI_SLOT</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devfn\">devfn</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>pci_release_region - Release a PCI bar</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@pdev: PCI device whose resources were previously reserved by pci_request_region</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@bar: BAR to release</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Releases the PCI I/O and memory resources previously reserved by a</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>successful call to pci_request_region.  Call this function only</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>after all use of the PCI regions has ceased.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#pci_release_region\">pci_release_region</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>, int <a class=\"id\" href=\"#bar\">bar</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_devres\">pci_devres</a> *<a class=\"id\" href=\"#dr\">dr</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_resource_len\">pci_resource_len</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#bar\">bar</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_resource_flags\">pci_resource_flags</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#bar\">bar</a>) &amp; <a class=\"id\" href=\"#IORESOURCE_IO\">IORESOURCE_IO</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#release_region\">release_region</a>(<a class=\"id\" href=\"#pci_resource_start\">pci_resource_start</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#bar\">bar</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_resource_len\">pci_resource_len</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#bar\">bar</a>));", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#pci_resource_flags\">pci_resource_flags</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#bar\">bar</a>) &amp; <a class=\"id\" href=\"#IORESOURCE_MEM\">IORESOURCE_MEM</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#release_mem_region\">release_mem_region</a>(<a class=\"id\" href=\"#pci_resource_start\">pci_resource_start</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#bar\">bar</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_resource_len\">pci_resource_len</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#bar\">bar</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dr\">dr</a> = <a class=\"id\" href=\"#find_pci_dr\">find_pci_dr</a>(<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dr\">dr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dr\">dr</a>-><a class=\"id\" href=\"#region_mask\">region_mask</a> &= ~(1 << <a class=\"id\" href=\"#bar\">bar</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>__pci_request_region - Reserved PCI I/O and memory resource</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@pdev: PCI device whose resources are to be reserved</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@bar: BAR to be reserved</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@res_name: Name to be associated with resource.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@exclusive: whether the region access is exclusive or not</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Mark the PCI region associated with PCI device @pdev BR @bar as</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>being reserved by owner @res_name.  Do not access any</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>address inside the PCI regions unless this call returns</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>successfully.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If @exclusive is set, then the region is marked so that userspace</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is explicitly not allowed to map the resource via /dev/mem or</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>sysfs MMIO access.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns 0 on success, or %EBUSY on error.  A warning</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>message is also printed on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__pci_request_region\">__pci_request_region</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>, int <a class=\"id\" href=\"#bar\">bar</a>, const char *<a class=\"id\" href=\"#res_name\">res_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#exclusive\">exclusive</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_devres\">pci_devres</a> *<a class=\"id\" href=\"#dr\">dr</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_resource_len\">pci_resource_len</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#bar\">bar</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_resource_flags\">pci_resource_flags</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#bar\">bar</a>) &amp; <a class=\"id\" href=\"#IORESOURCE_IO\">IORESOURCE_IO</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#request_region\">request_region</a>(<a class=\"id\" href=\"#pci_resource_start\">pci_resource_start</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#bar\">bar</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#pci_resource_len\">pci_resource_len</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#bar\">bar</a>), <a class=\"id\" href=\"#res_name\">res_name</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#pci_resource_flags\">pci_resource_flags</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#bar\">bar</a>) &amp; <a class=\"id\" href=\"#IORESOURCE_MEM\">IORESOURCE_MEM</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#__request_mem_region\">__request_mem_region</a>(<a class=\"id\" href=\"#pci_resource_start\">pci_resource_start</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#bar\">bar</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_resource_len\">pci_resource_len</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#bar\">bar</a>), <a class=\"id\" href=\"#res_name\">res_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#exclusive\">exclusive</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dr\">dr</a> = <a class=\"id\" href=\"#find_pci_dr\">find_pci_dr</a>(<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dr\">dr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dr\">dr</a>-><a class=\"id\" href=\"#region_mask\">region_mask</a> |= 1 << <a class=\"id\" href=\"#bar\">bar</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#err_out\">err_out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_warn\">dev_warn</a>(&amp;<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"BAR %d: can't reserve %pR\\n\", <a class=\"id\" href=\"#bar\">bar</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#resource\">resource</a>[<a class=\"id\" href=\"#bar\">bar</a>]);", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"}", 
"", 
];
xr_frag_insert('l/06/26bd77d2443b9059d149e39cb1a2cc832107a3.xr', __xr_tmp);
