var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Plugable TCP congestion control support and newReno</span>", 
"<span class=\"comment\"> * congestion control.</span>", 
"<span class=\"comment\"> * Based on ideas from I/O scheduler suport and Web100.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2005 Stephen Hemminger &lt;shemminger@osdl.org&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#gfp\">gfp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#tcp\">tcp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"int <a class=\"id\" href=\"#sysctl_tcp_max_ssthresh\">sysctl_tcp_max_ssthresh</a> = 0;", 
"", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#tcp_cong_list_lock\">tcp_cong_list_lock</a>);", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#tcp_cong_list\">tcp_cong_list</a>);", 
"", 
"<span class=\"comment\">/* Simple linear search, don't expect many entries! */</span>", 
"static struct <a class=\"id\" href=\"#tcp_congestion_ops\">tcp_congestion_ops</a> *<a class=\"id\" href=\"#tcp_ca_find\">tcp_ca_find</a>(const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_congestion_ops\">tcp_congestion_ops</a> *<a class=\"id\" href=\"#e\">e</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#e\">e</a>, &amp;<a class=\"id\" href=\"#tcp_cong_list\">tcp_cong_list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#name\">name</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#e\">e</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Attach new congestion control algorithm to the list</span>", 
"<span class=\"comment\"> * of available options.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#tcp_register_congestion_control\">tcp_register_congestion_control</a>(struct <a class=\"id\" href=\"#tcp_congestion_ops\">tcp_congestion_ops</a> *<a class=\"id\" href=\"#ca\">ca</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* all algorithms must implement ssthresh and cong_avoid ops */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#ssthresh\">ssthresh</a> || !<a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#cong_avoid\">cong_avoid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"TCP %s does not implement required ops\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#tcp_cong_list_lock\">tcp_cong_list_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_ca_find\">tcp_ca_find</a>(<a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#name\">name</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a> \"TCP %s already registered\\n\", <a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EEXIST\">EEXIST</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail_rcu\">list_add_tail_rcu</a>(&amp;<a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#tcp_cong_list\">tcp_cong_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"TCP %s registered\\n\", <a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#tcp_cong_list_lock\">tcp_cong_list_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#tcp_register_congestion_control\">tcp_register_congestion_control</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Remove congestion control algorithm, called from</span>", 
"<span class=\"comment\"> * the module's remove function.  Module ref counts are used</span>", 
"<span class=\"comment\"> * to ensure that this can't be done till all sockets using</span>", 
"<span class=\"comment\"> * that method are closed.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#tcp_unregister_congestion_control\">tcp_unregister_congestion_control</a>(struct <a class=\"id\" href=\"#tcp_congestion_ops\">tcp_congestion_ops</a> *<a class=\"id\" href=\"#ca\">ca</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#tcp_cong_list_lock\">tcp_cong_list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#tcp_cong_list_lock\">tcp_cong_list_lock</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#tcp_unregister_congestion_control\">tcp_unregister_congestion_control</a>);", 
"", 
"<span class=\"comment\">/* Assign choice of congestion control. */</span>", 
"void <a class=\"id\" href=\"#tcp_init_congestion_control\">tcp_init_congestion_control</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_connection_sock\">inet_connection_sock</a> *<a class=\"id\" href=\"#icsk\">icsk</a> = <a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_congestion_ops\">tcp_congestion_ops</a> *<a class=\"id\" href=\"#ca\">ca</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* if no choice made yet assign the current value set as default */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ca_ops\">icsk_ca_ops</a> == &amp;<a class=\"id\" href=\"#tcp_init_congestion_ops\">tcp_init_congestion_ops</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#ca\">ca</a>, &amp;<a class=\"id\" href=\"#tcp_cong_list\">tcp_cong_list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#try_module_get\">try_module_get</a>(<a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#owner\">owner</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ca_ops\">icsk_ca_ops</a> = <a class=\"id\" href=\"#ca\">ca</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fallback to next available */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ca_ops\">icsk_ca_ops</a>-><a class=\"id\" href=\"#init\">init</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ca_ops\">icsk_ca_ops</a>-><a class=\"id\" href=\"#init\">init</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Manage refcounts on socket close. */</span>", 
"void <a class=\"id\" href=\"#tcp_cleanup_congestion_control\">tcp_cleanup_congestion_control</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_connection_sock\">inet_connection_sock</a> *<a class=\"id\" href=\"#icsk\">icsk</a> = <a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ca_ops\">icsk_ca_ops</a>-><a class=\"id\" href=\"#release\">release</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ca_ops\">icsk_ca_ops</a>-><a class=\"id\" href=\"#release\">release</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ca_ops\">icsk_ca_ops</a>-><a class=\"id\" href=\"#owner\">owner</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Used by sysctl to change default congestion control */</span>", 
"int <a class=\"id\" href=\"#tcp_set_default_congestion_control\">tcp_set_default_congestion_control</a>(const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_congestion_ops\">tcp_congestion_ops</a> *<a class=\"id\" href=\"#ca\">ca</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#tcp_cong_list_lock\">tcp_cong_list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ca\">ca</a> = <a class=\"id\" href=\"#tcp_ca_find\">tcp_ca_find</a>(<a class=\"id\" href=\"#name\">name</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MODULES\">CONFIG_MODULES</a>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ca\">ca</a> && <a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_NET_ADMIN\">CAP_NET_ADMIN</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#tcp_cong_list_lock\">tcp_cong_list_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#request_module\">request_module</a>(\"tcp_%s\", <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#tcp_cong_list_lock\">tcp_cong_list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ca\">ca</a> = <a class=\"id\" href=\"#tcp_ca_find\">tcp_ca_find</a>(<a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ca\">ca</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#TCP_CONG_NON_RESTRICTED\">TCP_CONG_NON_RESTRICTED</a>;<span class=\"ts\"/><span class=\"comment\">/* default is always allowed */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move\">list_move</a>(&amp;<a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#tcp_cong_list\">tcp_cong_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#tcp_cong_list_lock\">tcp_cong_list_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Set default value from kernel configuration at bootup */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#tcp_congestion_default\">tcp_congestion_default</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tcp_set_default_congestion_control\">tcp_set_default_congestion_control</a>(<a class=\"id\" href=\"#CONFIG_DEFAULT_TCP_CONG\">CONFIG_DEFAULT_TCP_CONG</a>);", 
"}", 
"<a class=\"id\" href=\"#late_initcall\">late_initcall</a>(<a class=\"id\" href=\"#tcp_congestion_default\">tcp_congestion_default</a>);", 
"", 
"", 
"<span class=\"comment\">/* Build string with list of available congestion control values */</span>", 
"void <a class=\"id\" href=\"#tcp_get_available_congestion_control\">tcp_get_available_congestion_control</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#maxlen\">maxlen</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_congestion_ops\">tcp_congestion_ops</a> *<a class=\"id\" href=\"#ca\">ca</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#offs\">offs</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#ca\">ca</a>, &amp;<a class=\"id\" href=\"#tcp_cong_list\">tcp_cong_list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offs\">offs</a> += <a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#offs\">offs</a>, <a class=\"id\" href=\"#maxlen\">maxlen</a> - <a class=\"id\" href=\"#offs\">offs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"%s%s\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#offs\">offs</a> == 0 ? \"\" : \" \", <a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"}", 
"", 
"<span class=\"comment\">/* Get current default congestion control */</span>", 
"void <a class=\"id\" href=\"#tcp_get_default_congestion_control\">tcp_get_default_congestion_control</a>(char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_congestion_ops\">tcp_congestion_ops</a> *<a class=\"id\" href=\"#ca\">ca</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* We will always have reno... */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#tcp_cong_list\">tcp_cong_list</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ca\">ca</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#tcp_cong_list\">tcp_cong_list</a>.<a class=\"id\" href=\"#next\">next</a>, struct <a class=\"id\" href=\"#tcp_congestion_ops\">tcp_congestion_ops</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strncpy\">strncpy</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#TCP_CA_NAME_MAX\">TCP_CA_NAME_MAX</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"}", 
"", 
"<span class=\"comment\">/* Built list of non-restricted congestion control values */</span>", 
"void <a class=\"id\" href=\"#tcp_get_allowed_congestion_control\">tcp_get_allowed_congestion_control</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#maxlen\">maxlen</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_congestion_ops\">tcp_congestion_ops</a> *<a class=\"id\" href=\"#ca\">ca</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#offs\">offs</a> = 0;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#buf\">buf</a> = '\\0';", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#ca\">ca</a>, &amp;<a class=\"id\" href=\"#tcp_cong_list\">tcp_cong_list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#TCP_CONG_NON_RESTRICTED\">TCP_CONG_NON_RESTRICTED</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offs\">offs</a> += <a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#offs\">offs</a>, <a class=\"id\" href=\"#maxlen\">maxlen</a> - <a class=\"id\" href=\"#offs\">offs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"%s%s\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#offs\">offs</a> == 0 ? \"\" : \" \", <a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"}", 
"", 
"<span class=\"comment\">/* Change list of non-restricted congestion control */</span>", 
"int <a class=\"id\" href=\"#tcp_set_allowed_congestion_control\">tcp_set_allowed_congestion_control</a>(char *<a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_congestion_ops\">tcp_congestion_ops</a> *<a class=\"id\" href=\"#ca\">ca</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#saved_clone\">saved_clone</a>, *<a class=\"id\" href=\"#clone\">clone</a>, *<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#saved_clone\">saved_clone</a> = <a class=\"id\" href=\"#clone\">clone</a> = <a class=\"id\" href=\"#kstrdup\">kstrdup</a>(<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#GFP_USER\">GFP_USER</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#clone\">clone</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#tcp_cong_list_lock\">tcp_cong_list_lock</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* pass 1 check for bad entries */</span>", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#strsep\">strsep</a>(&amp;<a class=\"id\" href=\"#clone\">clone</a>, \" \")) && *<a class=\"id\" href=\"#name\">name</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ca\">ca</a> = <a class=\"id\" href=\"#tcp_ca_find\">tcp_ca_find</a>(<a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ca\">ca</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* pass 2 clear old values */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#ca\">ca</a>, &amp;<a class=\"id\" href=\"#tcp_cong_list\">tcp_cong_list</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#TCP_CONG_NON_RESTRICTED\">TCP_CONG_NON_RESTRICTED</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* pass 3 mark as allowed */</span>", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#strsep\">strsep</a>(&amp;<a class=\"id\" href=\"#val\">val</a>, \" \")) && *<a class=\"id\" href=\"#name\">name</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ca\">ca</a> = <a class=\"id\" href=\"#tcp_ca_find\">tcp_ca_find</a>(<a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#ca\">ca</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ca\">ca</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#TCP_CONG_NON_RESTRICTED\">TCP_CONG_NON_RESTRICTED</a>;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#tcp_cong_list_lock\">tcp_cong_list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#saved_clone\">saved_clone</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/* Change congestion control for socket */</span>", 
"int <a class=\"id\" href=\"#tcp_set_congestion_control\">tcp_set_congestion_control</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_connection_sock\">inet_connection_sock</a> *<a class=\"id\" href=\"#icsk\">icsk</a> = <a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_congestion_ops\">tcp_congestion_ops</a> *<a class=\"id\" href=\"#ca\">ca</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ca\">ca</a> = <a class=\"id\" href=\"#tcp_ca_find\">tcp_ca_find</a>(<a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* no change asking for existing value */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ca\">ca</a> == <a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ca_ops\">icsk_ca_ops</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MODULES\">CONFIG_MODULES</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* not found attempt to autoload module */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ca\">ca</a> && <a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_NET_ADMIN\">CAP_NET_ADMIN</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#request_module\">request_module</a>(\"tcp_%s\", <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ca\">ca</a> = <a class=\"id\" href=\"#tcp_ca_find\">tcp_ca_find</a>(<a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ca\">ca</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"", 
"<span class=\"ts\"/>else if (!((<a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#TCP_CONG_NON_RESTRICTED\">TCP_CONG_NON_RESTRICTED</a>) || <a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_NET_ADMIN\">CAP_NET_ADMIN</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"", 
"<span class=\"ts\"/>else if (!<a class=\"id\" href=\"#try_module_get\">try_module_get</a>(<a class=\"id\" href=\"#ca\">ca</a>-><a class=\"id\" href=\"#owner\">owner</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_cleanup_congestion_control\">tcp_cleanup_congestion_control</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ca_ops\">icsk_ca_ops</a> = <a class=\"id\" href=\"#ca\">ca</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_state\">sk_state</a> != <a class=\"id\" href=\"#TCP_CLOSE\">TCP_CLOSE</a> && <a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ca_ops\">icsk_ca_ops</a>-><a class=\"id\" href=\"#init\">init</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_ca_ops\">icsk_ca_ops</a>-><a class=\"id\" href=\"#init\">init</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>}", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/* RFC2861 Check whether we are limited by application or congestion window</span>", 
"<span class=\"comment\"> * This is the inverse of cwnd check in tcp_tso_should_defer</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#tcp_is_cwnd_limited\">tcp_is_cwnd_limited</a>(const struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#in_flight\">in_flight</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#left\">left</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#in_flight\">in_flight</a> >= <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#left\">left</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a> - <a class=\"id\" href=\"#in_flight\">in_flight</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sk_can_gso\">sk_can_gso</a>(<a class=\"id\" href=\"#sk\">sk</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#left\">left</a> * <a class=\"id\" href=\"#sysctl_tcp_tso_win_divisor\">sysctl_tcp_tso_win_divisor</a> &lt; <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#left\">left</a> * <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#mss_cache\">mss_cache</a> &lt; <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_gso_max_size\">sk_gso_max_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#left\">left</a> <= <a class=\"id\" href=\"#tcp_max_burst\">tcp_max_burst</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#tcp_is_cwnd_limited\">tcp_is_cwnd_limited</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Slow start is used when congestion window is less than slow start</span>", 
"<span class=\"comment\"> * threshold. This version implements the basic RFC2581 version</span>", 
"<span class=\"comment\"> * and optionally supports:</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>RFC3742 Limited Slow Start  <span class=\"ts\"/>  - growth limited to max_ssthresh</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RFC3465 Appropriate Byte Counting - growth limited by bytes acknowledged</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#tcp_slow_start\">tcp_slow_start</a>(struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cnt\">cnt</a>; <span class=\"comment\">/* increase in packets */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* RFC3465: ABC Slow start</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Increase only after a full MSS of bytes is acked</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * TCP sender SHOULD increase cwnd by the number of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * previously unacknowledged bytes ACKed by each incoming</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * acknowledgment, provided the increase is not more than L</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sysctl_tcp_abc\">sysctl_tcp_abc</a> && <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#bytes_acked\">bytes_acked</a> &lt; <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#mss_cache\">mss_cache</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sysctl_tcp_max_ssthresh\">sysctl_tcp_max_ssthresh</a> &gt; 0 && <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a> &gt; <a class=\"id\" href=\"#sysctl_tcp_max_ssthresh\">sysctl_tcp_max_ssthresh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cnt\">cnt</a> = <a class=\"id\" href=\"#sysctl_tcp_max_ssthresh\">sysctl_tcp_max_ssthresh</a> >> 1;<span class=\"ts\"/><span class=\"comment\">/* limited slow start */</span>", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cnt\">cnt</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* exponential increase */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* RFC3465: ABC</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We MAY increase by 2 if discovered delayed ack</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sysctl_tcp_abc\">sysctl_tcp_abc</a> &gt; 1 && <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#bytes_acked\">bytes_acked</a> >= 2*<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#mss_cache\">mss_cache</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cnt\">cnt</a> <<= 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#bytes_acked\">bytes_acked</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd_cnt\">snd_cwnd_cnt</a> += <a class=\"id\" href=\"#cnt\">cnt</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd_cnt\">snd_cwnd_cnt</a> >= <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd_cnt\">snd_cwnd_cnt</a> -= <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a> &lt; <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd_clamp\">snd_cwnd_clamp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a>++;", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#tcp_slow_start\">tcp_slow_start</a>);", 
"", 
"<span class=\"comment\">/* In theory this is tp-&gt;snd_cwnd += 1 / tp-&gt;snd_cwnd (or alternative w) */</span>", 
"void <a class=\"id\" href=\"#tcp_cong_avoid_ai\">tcp_cong_avoid_ai</a>(struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#w\">w</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd_cnt\">snd_cwnd_cnt</a> >= <a class=\"id\" href=\"#w\">w</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a> &lt; <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd_clamp\">snd_cwnd_clamp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd_cnt\">snd_cwnd_cnt</a> = 0;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd_cnt\">snd_cwnd_cnt</a>++;", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#tcp_cong_avoid_ai\">tcp_cong_avoid_ai</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * TCP Reno congestion control</span>", 
"<span class=\"comment\"> * This is special case used for fallback as well.</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"comment\">/* This is Jacobson's slow start and congestion avoidance.</span>", 
"<span class=\"comment\"> * SIGCOMM '88, p. 328.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#tcp_reno_cong_avoid\">tcp_reno_cong_avoid</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#ack\">ack</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#in_flight\">in_flight</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tcp_is_cwnd_limited\">tcp_is_cwnd_limited</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#in_flight\">in_flight</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* In \"safe\" area, increase. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a> <= <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_ssthresh\">snd_ssthresh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_slow_start\">tcp_slow_start</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* In dangerous area, increase slowly. */</span>", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#sysctl_tcp_abc\">sysctl_tcp_abc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* RFC3465: Appropriate Byte Count</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * increase once for each full cwnd acked</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#bytes_acked\">bytes_acked</a> >= <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a>*<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#mss_cache\">mss_cache</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#bytes_acked\">bytes_acked</a> -= <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a>*<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#mss_cache\">mss_cache</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a> &lt; <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd_clamp\">snd_cwnd_clamp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_cong_avoid_ai\">tcp_cong_avoid_ai</a>(<a class=\"id\" href=\"#tp\">tp</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#tcp_reno_cong_avoid\">tcp_reno_cong_avoid</a>);", 
"", 
"<span class=\"comment\">/* Slow start threshold is half the congestion window (min 2) */</span>", 
"<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#tcp_reno_ssthresh\">tcp_reno_ssthresh</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_cwnd\">snd_cwnd</a> >> 1U, 2U);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#tcp_reno_ssthresh\">tcp_reno_ssthresh</a>);", 
"", 
"<span class=\"comment\">/* Lower bound on congestion window with halving. */</span>", 
"<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#tcp_reno_min_cwnd\">tcp_reno_min_cwnd</a>(const struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_ssthresh\">snd_ssthresh</a>/2;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#tcp_reno_min_cwnd\">tcp_reno_min_cwnd</a>);", 
"", 
"struct <a class=\"id\" href=\"#tcp_congestion_ops\">tcp_congestion_ops</a> <a class=\"id\" href=\"#tcp_reno\">tcp_reno</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#flags\">flags</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#TCP_CONG_NON_RESTRICTED\">TCP_CONG_NON_RESTRICTED</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>= \"reno\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#owner\">owner</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#ssthresh\">ssthresh</a><span class=\"ts\"/>= <a class=\"id\" href=\"#tcp_reno_ssthresh\">tcp_reno_ssthresh</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#cong_avoid\">cong_avoid</a><span class=\"ts\"/>= <a class=\"id\" href=\"#tcp_reno_cong_avoid\">tcp_reno_cong_avoid</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#min_cwnd\">min_cwnd</a><span class=\"ts\"/>= <a class=\"id\" href=\"#tcp_reno_min_cwnd\">tcp_reno_min_cwnd</a>,", 
"};", 
"", 
"<span class=\"comment\">/* Initial congestion control used (until SYN)</span>", 
"<span class=\"comment\"> * really reno under another name so we can tell difference</span>", 
"<span class=\"comment\"> * during tcp_set_default_congestion_control</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#tcp_congestion_ops\">tcp_congestion_ops</a> <a class=\"id\" href=\"#tcp_init_congestion_ops\">tcp_init_congestion_ops</a>  = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>= \"\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#owner\">owner</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#ssthresh\">ssthresh</a><span class=\"ts\"/>= <a class=\"id\" href=\"#tcp_reno_ssthresh\">tcp_reno_ssthresh</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#cong_avoid\">cong_avoid</a><span class=\"ts\"/>= <a class=\"id\" href=\"#tcp_reno_cong_avoid\">tcp_reno_cong_avoid</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#min_cwnd\">min_cwnd</a><span class=\"ts\"/>= <a class=\"id\" href=\"#tcp_reno_min_cwnd\">tcp_reno_min_cwnd</a>,", 
"};", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#tcp_init_congestion_ops\">tcp_init_congestion_ops</a>);", 
];
xr_frag_insert('l/06/32702ef496bcda30a044846753893fd1680fbd.xr', __xr_tmp);
