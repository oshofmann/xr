var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Definitions for the 'struct sk_buff' memory handlers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Authors:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox, &lt;gw4pts@gw4pts.ampr.org&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Florian La Roche, &lt;rzsfl@rz.uni-sb.de&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This program is free software; you can redistribute it and/or</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>modify it under the terms of the GNU General Public License</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>as published by the Free Software Foundation; either version</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>2 of the License, or (at your option) any later version.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_SKBUFF_H\">_LINUX_SKBUFF_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_SKBUFF_H\">_LINUX_SKBUFF_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kmemcheck\">kmemcheck</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#compiler\">compiler</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#time\">time</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cache\">cache</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#atomic\">atomic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#net\">net</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#textsearch\">textsearch</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#checksum\">checksum</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rcupdate\">rcupdate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#dmaengine\">dmaengine</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hrtimer\">hrtimer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/* Don't change this without changing skb_csum_unnecessary! */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CHECKSUM_NONE\">CHECKSUM_NONE</a> 0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CHECKSUM_UNNECESSARY\">CHECKSUM_UNNECESSARY</a> 1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CHECKSUM_COMPLETE\">CHECKSUM_COMPLETE</a> 2", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CHECKSUM_PARTIAL\">CHECKSUM_PARTIAL</a> 3", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SKB_DATA_ALIGN\">SKB_DATA_ALIGN</a>(<a class=\"id\" href=\"#X\">X</a>)<span class=\"ts\"/>(((<a class=\"id\" href=\"#X\">X</a>) + (<a class=\"id\" href=\"#SMP_CACHE_BYTES\">SMP_CACHE_BYTES</a> - 1)) &amp; \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> ~(<a class=\"id\" href=\"#SMP_CACHE_BYTES\">SMP_CACHE_BYTES</a> - 1))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SKB_WITH_OVERHEAD\">SKB_WITH_OVERHEAD</a>(<a class=\"id\" href=\"#X\">X</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>((<a class=\"id\" href=\"#X\">X</a>) - <a class=\"id\" href=\"#SKB_DATA_ALIGN\">SKB_DATA_ALIGN</a>(sizeof(struct <a class=\"id\" href=\"#skb_shared_info\">skb_shared_info</a>)))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SKB_MAX_ORDER\">SKB_MAX_ORDER</a>(<a class=\"id\" href=\"#X\">X</a>, <a class=\"id\" href=\"#ORDER\">ORDER</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SKB_WITH_OVERHEAD\">SKB_WITH_OVERHEAD</a>((<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> << (<a class=\"id\" href=\"#ORDER\">ORDER</a>)) - (<a class=\"id\" href=\"#X\">X</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SKB_MAX_HEAD\">SKB_MAX_HEAD</a>(<a class=\"id\" href=\"#X\">X</a>)<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#SKB_MAX_ORDER\">SKB_MAX_ORDER</a>((<a class=\"id\" href=\"#X\">X</a>), 0))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SKB_MAX_ALLOC\">SKB_MAX_ALLOC</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#SKB_MAX_ORDER\">SKB_MAX_ORDER</a>(0, 2))", 
"", 
"<span class=\"comment\">/* A. Checksumming of received packets by device.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>NONE: device failed to checksum this packet.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>skb-&gt;csum is undefined.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>UNNECESSARY: device parsed packet and wouldbe verified checksum.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>skb-&gt;csum is undefined.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>      It is bad option, but, unfortunately, many of vendors do this.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>      Apparently with secret goal to sell you new device, when you</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>      will add new protocol to your host. F.e. IPv6. 8)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>COMPLETE: the most generic way. Device supplied checksum of _all_</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    the packet as seen by netif_rx in skb-&gt;csum.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    NOTE: Even if device supports only some protocols, but</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    is able to produce some skb-&gt;csum, it MUST use COMPLETE,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    not UNNECESSARY.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>PARTIAL: identical to the case for output below.  This may occur</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    on a packet received directly from another Linux OS, e.g.,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    a virtualised Linux kernel on the same host.  The packet can</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    be treated in the same way as UNNECESSARY except that on</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    output (i.e., forwarding) the checksum must be filled in</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    by the OS or the hardware.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * B. Checksumming on output.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>NONE: skb is checksummed by protocol or csum is not required.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>PARTIAL: device is required to csum packet as seen by hard_start_xmit</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>from skb-&gt;csum_start to the end and to record the checksum</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>at skb-&gt;csum_start + skb-&gt;csum_offset.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Device must show its capabilities in dev-&gt;features, set</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>at device setup time.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>NETIF_F_HW_CSUM<span class=\"ts\"/>- it is clever device, it is able to checksum</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  everything.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>NETIF_F_NO_CSUM - loopback or reliable single hop media.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>NETIF_F_IP_CSUM - device is dumb. It is able to csum only</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  TCP/UDP over IPv4. Sigh. Vendors like this</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  way by an unknown reason. Though, see comment above</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  about CHECKSUM_UNNECESSARY. 8)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>NETIF_F_IPV6_CSUM about as dumb as the last one but does IPv6 instead.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Any questions? No questions, good. <span class=\"ts\"/><span class=\"ts\"/>--ANK</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#net_device\">net_device</a>;", 
"struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a>;", 
"struct <a class=\"id\" href=\"#pipe_inode_info\">pipe_inode_info</a>;", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_NF_CONNTRACK\">CONFIG_NF_CONNTRACK</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_NF_CONNTRACK_MODULE\">CONFIG_NF_CONNTRACK_MODULE</a>)", 
"struct <a class=\"id\" href=\"#nf_conntrack\">nf_conntrack</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#use\">use</a>;", 
"};", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BRIDGE_NETFILTER\">CONFIG_BRIDGE_NETFILTER</a>", 
"struct <a class=\"id\" href=\"#nf_bridge_info\">nf_bridge_info</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#use\">use</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#physindev\">physindev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#physoutdev\">physoutdev</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#data\">data</a>[32 / sizeof(unsigned long)];", 
"};", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* These two members must be first. */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a><span class=\"ts\"/>*<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a><span class=\"ts\"/>*<a class=\"id\" href=\"#prev\">prev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qlen\">qlen</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a><span class=\"ts\"/><a class=\"id\" href=\"#lock\">lock</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a>;", 
"", 
"<span class=\"comment\">/* To allow 64K frame to be packed as single skb without frag_list */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_SKB_FRAGS\">MAX_SKB_FRAGS</a> (65536/<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> + 2)", 
"", 
"typedef struct <a class=\"id\" href=\"#skb_frag_struct\">skb_frag_struct</a> <a class=\"id\" href=\"#skb_frag_t\">skb_frag_t</a>;", 
"", 
"struct <a class=\"id\" href=\"#skb_frag_struct\">skb_frag_struct</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#page_offset\">page_offset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#size\">size</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HAVE_HW_TIME_STAMP\">HAVE_HW_TIME_STAMP</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct skb_shared_hwtstamps - hardware time stamps</span>", 
"<span class=\"comment\"> * @hwtstamp:<span class=\"ts\"/>hardware time stamp transformed into duration</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>since arbitrary point in time</span>", 
"<span class=\"comment\"> * @syststamp:<span class=\"ts\"/>hwtstamp transformed to system time base</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Software time stamps generated by ktime_get_real() are stored in</span>", 
"<span class=\"comment\"> * skb-&gt;tstamp. The relation between the different kinds of time</span>", 
"<span class=\"comment\"> * stamps is as follows:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * syststamp and tstamp can be compared against each other in</span>", 
"<span class=\"comment\"> * arbitrary combinations.  The accuracy of a</span>", 
"<span class=\"comment\"> * syststamp/tstamp/\"syststamp from other device\" comparison is</span>", 
"<span class=\"comment\"> * limited by the accuracy of the transformation into system time</span>", 
"<span class=\"comment\"> * base. This depends on the device driver and its underlying</span>", 
"<span class=\"comment\"> * hardware.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * hwtstamps can only be compared against other hwtstamps from</span>", 
"<span class=\"comment\"> * the same device.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This structure is attached to packets as part of the</span>", 
"<span class=\"comment\"> * &amp;skb_shared_info. Use skb_hwtstamps() to get a pointer.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#skb_shared_hwtstamps\">skb_shared_hwtstamps</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a><span class=\"ts\"/><a class=\"id\" href=\"#hwtstamp\">hwtstamp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a><span class=\"ts\"/><a class=\"id\" href=\"#syststamp\">syststamp</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct skb_shared_tx - instructions for time stamping of outgoing packets</span>", 
"<span class=\"comment\"> * @hardware:<span class=\"ts\"/><span class=\"ts\"/>generate hardware time stamp</span>", 
"<span class=\"comment\"> * @software:<span class=\"ts\"/><span class=\"ts\"/>generate software time stamp</span>", 
"<span class=\"comment\"> * @in_progress:<span class=\"ts\"/>device driver is going to provide</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>hardware time stamp</span>", 
"<span class=\"comment\"> * @prevent_sk_orphan:<span class=\"ts\"/>make sk reference available on driver level</span>", 
"<span class=\"comment\"> * @flags:<span class=\"ts\"/><span class=\"ts\"/>all shared_tx flags</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * These flags are attached to packets as part of the</span>", 
"<span class=\"comment\"> * &amp;skb_shared_info. Use skb_tx() to get a pointer.</span>", 
"<span class=\"comment\"> */</span>", 
"union <a class=\"id\" href=\"#skb_shared_tx\">skb_shared_tx</a> {", 
"<span class=\"ts\"/>struct {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a><span class=\"ts\"/><a class=\"id\" href=\"#hardware\">hardware</a>:1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#software\">software</a>:1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#in_progress\">in_progress</a>:1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prevent_sk_orphan\">prevent_sk_orphan</a>:1;", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a> <a class=\"id\" href=\"#flags\">flags</a>;", 
"};", 
"", 
"<span class=\"comment\">/* This data is invariant across clones and lives at</span>", 
"<span class=\"comment\"> * the end of the header data, ie. at skb-&gt;end.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#skb_shared_info\">skb_shared_info</a> {", 
"<span class=\"ts\"/>unsigned short<span class=\"ts\"/><a class=\"id\" href=\"#nr_frags\">nr_frags</a>;", 
"<span class=\"ts\"/>unsigned short<span class=\"ts\"/><a class=\"id\" href=\"#gso_size\">gso_size</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Warning: this field is not always filled in (UFO)! */</span>", 
"<span class=\"ts\"/>unsigned short<span class=\"ts\"/><a class=\"id\" href=\"#gso_segs\">gso_segs</a>;", 
"<span class=\"ts\"/>unsigned short  <a class=\"id\" href=\"#gso_type\">gso_type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be32\">__be32</a>          <a class=\"id\" href=\"#ip6_frag_id\">ip6_frag_id</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#skb_shared_tx\">skb_shared_tx</a> <a class=\"id\" href=\"#tx_flags\">tx_flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a><span class=\"ts\"/>*<a class=\"id\" href=\"#frag_list\">frag_list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#skb_shared_hwtstamps\">skb_shared_hwtstamps</a> <a class=\"id\" href=\"#hwtstamps\">hwtstamps</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Warning : all fields before dataref are cleared in __alloc_skb()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><a class=\"id\" href=\"#dataref\">dataref</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Intermediate layers must ensure that destructor_arg</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * remains valid until skb destructor */</span>", 
"<span class=\"ts\"/>void *<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#destructor_arg\">destructor_arg</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* must be last field, see pskb_expand_head() */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_frag_t\">skb_frag_t</a><span class=\"ts\"/><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#MAX_SKB_FRAGS\">MAX_SKB_FRAGS</a>];", 
"};", 
"", 
"<span class=\"comment\">/* We divide dataref into two halves.  The higher 16 bits hold references</span>", 
"<span class=\"comment\"> * to the payload part of skb-&gt;data.  The lower 16 bits hold references to</span>", 
"<span class=\"comment\"> * the entire skb-&gt;data.  A clone of a headerless skb holds the length of</span>", 
"<span class=\"comment\"> * the header in skb-&gt;hdr_len.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * All users must obey the rule that the skb-&gt;data reference count must be</span>", 
"<span class=\"comment\"> * greater than or equal to the payload reference count.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Holding a reference to the payload part means that the user does not</span>", 
"<span class=\"comment\"> * care about modifications to the header part of skb-&gt;data.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SKB_DATAREF_SHIFT\">SKB_DATAREF_SHIFT</a> 16", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SKB_DATAREF_MASK\">SKB_DATAREF_MASK</a> ((1 << <a class=\"id\" href=\"#SKB_DATAREF_SHIFT\">SKB_DATAREF_SHIFT</a>) - 1)", 
"", 
"", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SKB_FCLONE_UNAVAILABLE\">SKB_FCLONE_UNAVAILABLE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SKB_FCLONE_ORIG\">SKB_FCLONE_ORIG</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SKB_FCLONE_CLONE\">SKB_FCLONE_CLONE</a>,", 
"};", 
"", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SKB_GSO_TCPV4\">SKB_GSO_TCPV4</a> = 1 << 0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SKB_GSO_UDP\">SKB_GSO_UDP</a> = 1 << 1,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* This indicates the skb is from an untrusted source. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SKB_GSO_DODGY\">SKB_GSO_DODGY</a> = 1 << 2,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* This indicates the tcp segment has CWR set. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SKB_GSO_TCP_ECN\">SKB_GSO_TCP_ECN</a> = 1 << 3,", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SKB_GSO_TCPV6\">SKB_GSO_TCPV6</a> = 1 << 4,", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SKB_GSO_FCOE\">SKB_GSO_FCOE</a> = 1 << 5,", 
"};", 
"", 
"#if <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> &gt; 32", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NET_SKBUFF_DATA_USES_OFFSET\">NET_SKBUFF_DATA_USES_OFFSET</a> 1", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#NET_SKBUFF_DATA_USES_OFFSET\">NET_SKBUFF_DATA_USES_OFFSET</a>", 
"typedef unsigned int <a class=\"id\" href=\"#sk_buff_data_t\">sk_buff_data_t</a>;", 
"#else", 
"typedef unsigned char *<a class=\"id\" href=\"#sk_buff_data_t\">sk_buff_data_t</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/** </span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>struct sk_buff - socket buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@next: Next buffer in list</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@prev: Previous buffer in list</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sk: Socket we are owned by</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@tstamp: Time we arrived</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: Device we arrived on/are leaving by</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@transport_header: Transport layer header</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@network_header: Network layer header</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@mac_header: Link layer header</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@_skb_refdst: destination entry (with norefcount bit)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sp: the security path, used for xfrm</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@cb: Control buffer. Free for use by every layer. Put private vars here</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@len: Length of actual data</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@data_len: Data length</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@mac_len: Length of link layer header</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@hdr_len: writable header length of cloned skb</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@csum: Checksum (must include start/offset pair)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@csum_start: Offset from skb-&gt;head where checksumming should start</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@csum_offset: Offset from csum_start where checksum should be stored</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@local_df: allow local fragmentation</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@cloned: Head may be cloned (check refcnt to be sure)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@nohdr: Payload reference only, must not modify header</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@pkt_type: Packet class</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@fclone: skbuff clone status</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ip_summed: Driver fed us an IP checksum</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@priority: Packet queueing priority</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@users: User count - see {datagram,tcp}.c</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@protocol: Packet protocol from driver</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@truesize: Buffer size </span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@head: Head of buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@data: Data head pointer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@tail: Tail pointer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@end: End pointer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@destructor: Destruct function</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@mark: Generic packet mark</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@nfct: Associated connection, if any</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ipvs_property: skbuff is owned by ipvs</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@peeked: this packet has been seen already, so stats have been</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>done for it, don't do them again</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@nf_trace: netfilter packet trace flag</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@nfctinfo: Relationship of this skb to the connection</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@nfct_reasm: netfilter conntrack re-assembly pointer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@nf_bridge: Saved data about a bridged frame - see br_netfilter.c</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb_iif: ifindex of device we arrived on</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@rxhash: the packet hash computed on receive</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@queue_mapping: Queue mapping for multiqueue devices</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@tc_index: Traffic control index</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@tc_verd: traffic control verdict</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ndisc_nodetype: router type (from link layer)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dma_cookie: a cookie to one of several possible DMA operations</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>done by skb DMA functions</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@secmark: security marking</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@vlan_tci: vlan tag control information</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* These two members must be first. */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#prev\">prev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tstamp\">tstamp</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#sk\">sk</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a><span class=\"ts\"/>*<a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This is the control buffer. It is free to use for every</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * layer. Please put your private variables there. If you</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * want to keep them across layers you have to do a skb_clone()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * first. This is owned by whoever has the skb queued ATM.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>char<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cb\">cb</a>[48] <a class=\"id\" href=\"#__aligned\">__aligned</a>(8);", 
"", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#_skb_refdst\">_skb_refdst</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_XFRM\">CONFIG_XFRM</a>", 
"<span class=\"ts\"/>struct<span class=\"ts\"/><a class=\"id\" href=\"#sec_path\">sec_path</a><span class=\"ts\"/>*<a class=\"id\" href=\"#sp\">sp</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data_len\">data_len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mac_len\">mac_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hdr_len\">hdr_len</a>;", 
"<span class=\"ts\"/>union {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__wsum\">__wsum</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#csum\">csum</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a><span class=\"ts\"/><a class=\"id\" href=\"#csum_start\">csum_start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a><span class=\"ts\"/><a class=\"id\" href=\"#csum_offset\">csum_offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>};", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#priority\">priority</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmemcheck_bitfield_begin\">kmemcheck_bitfield_begin</a>(<a class=\"id\" href=\"#flags1\">flags1</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_df\">local_df</a>:1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cloned\">cloned</a>:1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ip_summed\">ip_summed</a>:2,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nohdr\">nohdr</a>:1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nfctinfo\">nfctinfo</a>:3;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pkt_type\">pkt_type</a>:3,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fclone\">fclone</a>:2,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ipvs_property\">ipvs_property</a>:1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#peeked\">peeked</a>:1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nf_trace\">nf_trace</a>:1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmemcheck_bitfield_end\">kmemcheck_bitfield_end</a>(<a class=\"id\" href=\"#flags1\">flags1</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be16\">__be16</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#protocol\">protocol</a>;", 
"", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#destructor\">destructor</a>)(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_NF_CONNTRACK\">CONFIG_NF_CONNTRACK</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_NF_CONNTRACK_MODULE\">CONFIG_NF_CONNTRACK_MODULE</a>)", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#nf_conntrack\">nf_conntrack</a><span class=\"ts\"/>*<a class=\"id\" href=\"#nfct\">nfct</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#nfct_reasm\">nfct_reasm</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BRIDGE_NETFILTER\">CONFIG_BRIDGE_NETFILTER</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#nf_bridge_info\">nf_bridge_info</a><span class=\"ts\"/>*<a class=\"id\" href=\"#nf_bridge\">nf_bridge</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb_iif\">skb_iif</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NET_SCHED\">CONFIG_NET_SCHED</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tc_index\">tc_index</a>;<span class=\"ts\"/><span class=\"comment\">/* traffic control index */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NET_CLS_ACT\">CONFIG_NET_CLS_ACT</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tc_verd\">tc_verd</a>;<span class=\"ts\"/><span class=\"comment\">/* traffic control verdict */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rxhash\">rxhash</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmemcheck_bitfield_begin\">kmemcheck_bitfield_begin</a>(<a class=\"id\" href=\"#flags2\">flags2</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#queue_mapping\">queue_mapping</a>:16;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_IPV6_NDISC_NODETYPE\">CONFIG_IPV6_NDISC_NODETYPE</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ndisc_nodetype\">ndisc_nodetype</a>:2,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#deliver_no_wcard\">deliver_no_wcard</a>:1;", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#deliver_no_wcard\">deliver_no_wcard</a>:1;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmemcheck_bitfield_end\">kmemcheck_bitfield_end</a>(<a class=\"id\" href=\"#flags2\">flags2</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* 0/14 bit hole */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NET_DMA\">CONFIG_NET_DMA</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_cookie_t\">dma_cookie_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_cookie\">dma_cookie</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NETWORK_SECMARK\">CONFIG_NETWORK_SECMARK</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#secmark\">secmark</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>union {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mark\">mark</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dropcount\">dropcount</a>;", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vlan_tci\">vlan_tci</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk_buff_data_t\">sk_buff_data_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#transport_header\">transport_header</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk_buff_data_t\">sk_buff_data_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#network_header\">network_header</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk_buff_data_t\">sk_buff_data_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mac_header\">mac_header</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* These elements must be at the end, see alloc_skb() for details.  */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk_buff_data_t\">sk_buff_data_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tail\">tail</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk_buff_data_t\">sk_buff_data_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>unsigned char<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#head\">head</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#truesize\">truesize</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#users\">users</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Handling routines are only of interest to the kernel</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#system\">system</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * skb might have a dst pointer attached, refcounted or not.</span>", 
"<span class=\"comment\"> * _skb_refdst low order bit is set if refcount was _not_ taken</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SKB_DST_NOREF\">SKB_DST_NOREF</a><span class=\"ts\"/>1UL", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SKB_DST_PTRMASK\">SKB_DST_PTRMASK</a><span class=\"ts\"/>~(<a class=\"id\" href=\"#SKB_DST_NOREF\">SKB_DST_NOREF</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * skb_dst - returns skb dst_entry</span>", 
"<span class=\"comment\"> * @skb: buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns skb dst_entry, regardless of reference taken or not.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> *<a class=\"id\" href=\"#skb_dst\">skb_dst</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* If refdst was not refcounted, check we still are in a </span>", 
"<span class=\"comment\"><span class=\"ts\"/> * rcu_read_lock section</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>((<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#_skb_refdst\">_skb_refdst</a> &amp; <a class=\"id\" href=\"#SKB_DST_NOREF\">SKB_DST_NOREF</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#rcu_read_lock_held\">rcu_read_lock_held</a>() &&", 
"<span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#rcu_read_lock_bh_held\">rcu_read_lock_bh_held</a>());", 
"<span class=\"ts\"/>return (struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> *)(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#_skb_refdst\">_skb_refdst</a> &amp; <a class=\"id\" href=\"#SKB_DST_PTRMASK\">SKB_DST_PTRMASK</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * skb_dst_set - sets skb dst</span>", 
"<span class=\"comment\"> * @skb: buffer</span>", 
"<span class=\"comment\"> * @dst: dst entry</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Sets skb dst, assuming a reference was taken on dst and should</span>", 
"<span class=\"comment\"> * be released by skb_dst_drop()</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_dst_set\">skb_dst_set</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> *<a class=\"id\" href=\"#dst\">dst</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#_skb_refdst\">_skb_refdst</a> = (unsigned long)<a class=\"id\" href=\"#dst\">dst</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * skb_dst_set_noref - sets skb dst, without a reference</span>", 
"<span class=\"comment\"> * @skb: buffer</span>", 
"<span class=\"comment\"> * @dst: dst entry</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Sets skb dst, assuming a reference was not taken on dst</span>", 
"<span class=\"comment\"> * skb_dst_drop() should not dst_release() this dst</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_dst_set_noref\">skb_dst_set_noref</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> *<a class=\"id\" href=\"#dst\">dst</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#rcu_read_lock_held\">rcu_read_lock_held</a>() && !<a class=\"id\" href=\"#rcu_read_lock_bh_held\">rcu_read_lock_bh_held</a>());", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#_skb_refdst\">_skb_refdst</a> = (unsigned long)<a class=\"id\" href=\"#dst\">dst</a> | <a class=\"id\" href=\"#SKB_DST_NOREF\">SKB_DST_NOREF</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * skb_dst_is_noref - Test if skb dst isnt refcounted</span>", 
"<span class=\"comment\"> * @skb: buffer</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#skb_dst_is_noref\">skb_dst_is_noref</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#_skb_refdst\">_skb_refdst</a> &amp; <a class=\"id\" href=\"#SKB_DST_NOREF\">SKB_DST_NOREF</a>) && <a class=\"id\" href=\"#skb_dst\">skb_dst</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#rtable\">rtable</a> *<a class=\"id\" href=\"#skb_rtable\">skb_rtable</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return (struct <a class=\"id\" href=\"#rtable\">rtable</a> *)<a class=\"id\" href=\"#skb_dst\">skb_dst</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"extern void <a class=\"id\" href=\"#consume_skb\">consume_skb</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"extern void<span class=\"ts\"/>       <a class=\"id\" href=\"#__kfree_skb\">__kfree_skb</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"extern struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#__alloc_skb\">__alloc_skb</a>(unsigned int <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#priority\">priority</a>, int <a class=\"id\" href=\"#fclone\">fclone</a>, int <a class=\"id\" href=\"#node\">node</a>);", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#alloc_skb\">alloc_skb</a>(unsigned int <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#priority\">priority</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__alloc_skb\">__alloc_skb</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#priority\">priority</a>, 0, -1);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#alloc_skb_fclone\">alloc_skb_fclone</a>(unsigned int <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#priority\">priority</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__alloc_skb\">__alloc_skb</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#priority\">priority</a>, 1, -1);", 
"}", 
"", 
"extern <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#skb_recycle_check\">skb_recycle_check</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#skb_size\">skb_size</a>);", 
"", 
"extern struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb_morph\">skb_morph</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#dst\">dst</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#src\">src</a>);", 
"extern struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb_clone\">skb_clone</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#priority\">priority</a>);", 
"extern struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb_copy\">skb_copy</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#priority\">priority</a>);", 
"extern struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#pskb_copy\">pskb_copy</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"extern int<span class=\"ts\"/>       <a class=\"id\" href=\"#pskb_expand_head\">pskb_expand_head</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#nhead\">nhead</a>, int <a class=\"id\" href=\"#ntail\">ntail</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"extern struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb_realloc_headroom\">skb_realloc_headroom</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned int <a class=\"id\" href=\"#headroom\">headroom</a>);", 
"extern struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb_copy_expand\">skb_copy_expand</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       int <a class=\"id\" href=\"#newheadroom\">newheadroom</a>, int <a class=\"id\" href=\"#newtailroom\">newtailroom</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#priority\">priority</a>);", 
"extern int<span class=\"ts\"/>       <a class=\"id\" href=\"#skb_to_sgvec\">skb_to_sgvec</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sg\">sg</a>, int <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#len\">len</a>);", 
"extern int<span class=\"ts\"/>       <a class=\"id\" href=\"#skb_cow_data\">skb_cow_data</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#tailbits\">tailbits</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> **<a class=\"id\" href=\"#trailer\">trailer</a>);", 
"extern int<span class=\"ts\"/>       <a class=\"id\" href=\"#skb_pad\">skb_pad</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#pad\">pad</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#dev_kfree_skb\">dev_kfree_skb</a>(<a class=\"id\" href=\"#a\">a</a>)<span class=\"ts\"/><a class=\"id\" href=\"#consume_skb\">consume_skb</a>(<a class=\"id\" href=\"#a\">a</a>)", 
"", 
"extern int <a class=\"id\" href=\"#skb_append_datato_frags\">skb_append_datato_frags</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#getfrag\">getfrag</a>(void *<a class=\"id\" href=\"#from\">from</a>, char *<a class=\"id\" href=\"#to\">to</a>, int <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>,int <a class=\"id\" href=\"#odd\">odd</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#from\">from</a>, int <a class=\"id\" href=\"#length\">length</a>);", 
"", 
"struct <a class=\"id\" href=\"#skb_seq_state\">skb_seq_state</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lower_offset\">lower_offset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#upper_offset\">upper_offset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#frag_idx\">frag_idx</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stepped_offset\">stepped_offset</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a><span class=\"ts\"/>*<a class=\"id\" href=\"#root_skb\">root_skb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a><span class=\"ts\"/>*<a class=\"id\" href=\"#cur_skb\">cur_skb</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#frag_data\">frag_data</a>;", 
"};", 
"", 
"extern void<span class=\"ts\"/>      <a class=\"id\" href=\"#skb_prepare_seq_read\">skb_prepare_seq_read</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned int <a class=\"id\" href=\"#from\">from</a>, unsigned int <a class=\"id\" href=\"#to\">to</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#skb_seq_state\">skb_seq_state</a> *<a class=\"id\" href=\"#st\">st</a>);", 
"extern unsigned int   <a class=\"id\" href=\"#skb_seq_read\">skb_seq_read</a>(unsigned int <a class=\"id\" href=\"#consumed\">consumed</a>, const <a class=\"id\" href=\"#u8\">u8</a> **<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#skb_seq_state\">skb_seq_state</a> *<a class=\"id\" href=\"#st\">st</a>);", 
"extern void<span class=\"ts\"/>      <a class=\"id\" href=\"#skb_abort_seq_read\">skb_abort_seq_read</a>(struct <a class=\"id\" href=\"#skb_seq_state\">skb_seq_state</a> *<a class=\"id\" href=\"#st\">st</a>);", 
"", 
"extern unsigned int   <a class=\"id\" href=\"#skb_find_text\">skb_find_text</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, unsigned int <a class=\"id\" href=\"#from\">from</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned int <a class=\"id\" href=\"#to\">to</a>, struct <a class=\"id\" href=\"#ts_config\">ts_config</a> *<a class=\"id\" href=\"#config\">config</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#ts_state\">ts_state</a> *<a class=\"id\" href=\"#state\">state</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#NET_SKBUFF_DATA_USES_OFFSET\">NET_SKBUFF_DATA_USES_OFFSET</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned char *<a class=\"id\" href=\"#skb_end_pointer\">skb_end_pointer</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#head\">head</a> + <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#end\">end</a>;", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned char *<a class=\"id\" href=\"#skb_end_pointer\">skb_end_pointer</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#end\">end</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* Internal */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#SKB\">SKB</a>)<span class=\"ts\"/>((struct <a class=\"id\" href=\"#skb_shared_info\">skb_shared_info</a> *)(<a class=\"id\" href=\"#skb_end_pointer\">skb_end_pointer</a>(<a class=\"id\" href=\"#SKB\">SKB</a>)))", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#skb_shared_hwtstamps\">skb_shared_hwtstamps</a> *<a class=\"id\" href=\"#skb_hwtstamps\">skb_hwtstamps</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#hwtstamps\">hwtstamps</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> union <a class=\"id\" href=\"#skb_shared_tx\">skb_shared_tx</a> *<a class=\"id\" href=\"#skb_tx\">skb_tx</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#tx_flags\">tx_flags</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_queue_empty - check if a queue is empty</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@list: queue head</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns true if the queue is empty, false otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#skb_queue_empty\">skb_queue_empty</a>(const struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#list\">list</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#next\">next</a> == (struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *)<a class=\"id\" href=\"#list\">list</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_queue_is_last - check if skb is the last entry in the queue</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@list: queue head</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns true if @skb is the last buffer on the list.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#skb_queue_is_last\">skb_queue_is_last</a>(const struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#list\">list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#next\">next</a> == (struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *) <a class=\"id\" href=\"#list\">list</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_queue_is_first - check if skb is the first entry in the queue</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@list: queue head</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns true if @skb is the first buffer on the list.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#skb_queue_is_first\">skb_queue_is_first</a>(const struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#list\">list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#prev\">prev</a> == (struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *) <a class=\"id\" href=\"#list\">list</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_queue_next - return the next packet in the queue</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@list: queue head</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: current buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return the next packet in @list after @skb.  It is only valid to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>call this if skb_queue_is_last() evaluates to false.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb_queue_next\">skb_queue_next</a>(const struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#list\">list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* This BUG_ON may seem severe, but if we just return then we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * are going to dereference garbage.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#skb_queue_is_last\">skb_queue_is_last</a>(<a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#skb\">skb</a>));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_queue_prev - return the prev packet in the queue</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@list: queue head</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: current buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return the prev packet in @list before @skb.  It is only valid to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>call this if skb_queue_is_first() evaluates to false.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb_queue_prev\">skb_queue_prev</a>(const struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#list\">list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* This BUG_ON may seem severe, but if we just return then we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * are going to dereference garbage.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#skb_queue_is_first\">skb_queue_is_first</a>(<a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#skb\">skb</a>));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#prev\">prev</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_get - reference buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: buffer to reference</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Makes another reference to a socket buffer and returns a pointer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to the buffer.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb_get\">skb_get</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#users\">users</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If users == 1, we are the only owner and are can avoid redundant</span>", 
"<span class=\"comment\"> * atomic change.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_cloned - is the buffer a clone</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: buffer to check</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns true if the buffer was generated with skb_clone() and is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>one of multiple shared copies of the buffer. Cloned buffers are</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>shared data so must not be written to under normal circumstances.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#skb_cloned\">skb_cloned</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#cloned\">cloned</a> &&", 
"<span class=\"ts\"/>       (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#dataref\">dataref</a>) &amp; <a class=\"id\" href=\"#SKB_DATAREF_MASK\">SKB_DATAREF_MASK</a>) != 1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_header_cloned - is the header a clone</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: buffer to check</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns true if modifying the header part of the buffer requires</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the data to be copied.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#skb_header_cloned\">skb_header_cloned</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#dataref\">dataref</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#cloned\">cloned</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dataref\">dataref</a> = <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#dataref\">dataref</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dataref\">dataref</a> = (<a class=\"id\" href=\"#dataref\">dataref</a> &amp; <a class=\"id\" href=\"#SKB_DATAREF_MASK\">SKB_DATAREF_MASK</a>) - (<a class=\"id\" href=\"#dataref\">dataref</a> >> <a class=\"id\" href=\"#SKB_DATAREF_SHIFT\">SKB_DATAREF_SHIFT</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dataref\">dataref</a> != 1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_header_release - release reference to header</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: buffer to operate on</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Drop a reference to the header part of the buffer.  This is done</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>by acquiring a payload reference.  You must not read from the header</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>part of skb-&gt;data after this.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_header_release\">skb_header_release</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#nohdr\">nohdr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#nohdr\">nohdr</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_add\">atomic_add</a>(1 << <a class=\"id\" href=\"#SKB_DATAREF_SHIFT\">SKB_DATAREF_SHIFT</a>, &amp;<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#dataref\">dataref</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_shared - is the buffer shared</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: buffer to check</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns true if more than one person has a reference to this</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>buffer.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#skb_shared\">skb_shared</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#users\">users</a>) != 1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_share_check - check if buffer is shared and if so clone it</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: buffer to check</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@pri: priority for memory allocation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If the buffer is shared the buffer is cloned and the old copy</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>drops a reference. A new clone with a single reference is returned.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If the buffer is not shared the original buffer is returned. When</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>being called from interrupt status or with spinlocks held pri must</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>be GFP_ATOMIC.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>NULL is returned on a memory allocation failure.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb_share_check\">skb_share_check</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#pri\">pri</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep_if\">might_sleep_if</a>(<a class=\"id\" href=\"#pri\">pri</a> &amp; <a class=\"id\" href=\"#__GFP_WAIT\">__GFP_WAIT</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_shared\">skb_shared</a>(<a class=\"id\" href=\"#skb\">skb</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#nskb\">nskb</a> = <a class=\"id\" href=\"#skb_clone\">skb_clone</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#pri\">pri</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#nskb\">nskb</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Copy shared buffers into a new sk_buff. We effectively do COW on</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>packets to handle cases where we have a local reader and forward</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and a couple of other messy ones. The normal one is tcpdumping</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>a packet thats being forwarded.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_unshare - make a copy of a shared buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: buffer to check</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@pri: priority for memory allocation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If the socket buffer is a clone then this function creates a new</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>copy of the data, drops a reference count on the old copy and returns</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the new copy with the reference count at 1. If the buffer is not a clone</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the original buffer is returned. When called with a spinlock held or</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>from interrupt state @pri must be %GFP_ATOMIC</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>%NULL is returned on a memory allocation failure.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb_unshare\">skb_unshare</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#pri\">pri</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep_if\">might_sleep_if</a>(<a class=\"id\" href=\"#pri\">pri</a> &amp; <a class=\"id\" href=\"#__GFP_WAIT\">__GFP_WAIT</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb_cloned\">skb_cloned</a>(<a class=\"id\" href=\"#skb\">skb</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#nskb\">nskb</a> = <a class=\"id\" href=\"#skb_copy\">skb_copy</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#pri\">pri</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree_skb\">kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);<span class=\"ts\"/><span class=\"comment\">/* Free our shared copy */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#nskb\">nskb</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_peek - peek at the head of an &amp;sk_buff_head</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@list_: list to peek at</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Peek an &amp;sk_buff. Unlike most other operations you _MUST_</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>be careful with this one. A peek leaves the buffer on the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>list and someone else may run off with it. You must hold</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the appropriate locks or have a private queue to do this.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns %NULL for an empty list or a pointer to the head element.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The reference count is not incremented and the reference is therefore</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>volatile. Use with caution.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb_peek\">skb_peek</a>(struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#list_\">list_</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#list\">list</a> = ((struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *)<a class=\"id\" href=\"#list_\">list_</a>)-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list\">list</a> == (struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *)<a class=\"id\" href=\"#list_\">list_</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#list\">list</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_peek_tail - peek at the tail of an &amp;sk_buff_head</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@list_: list to peek at</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Peek an &amp;sk_buff. Unlike most other operations you _MUST_</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>be careful with this one. A peek leaves the buffer on the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>list and someone else may run off with it. You must hold</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the appropriate locks or have a private queue to do this.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns %NULL for an empty list or a pointer to the tail element.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The reference count is not incremented and the reference is therefore</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>volatile. Use with caution.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb_peek_tail\">skb_peek_tail</a>(struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#list_\">list_</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#list\">list</a> = ((struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *)<a class=\"id\" href=\"#list_\">list_</a>)-><a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list\">list</a> == (struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *)<a class=\"id\" href=\"#list_\">list_</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#list\">list</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_queue_len<span class=\"ts\"/>- get queue length</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@list_: list to measure</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return the length of an &amp;sk_buff queue.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#skb_queue_len\">skb_queue_len</a>(const struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#list_\">list_</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#list_\">list_</a>-><a class=\"id\" href=\"#qlen\">qlen</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>__skb_queue_head_init - initialize non-spinlock portions of sk_buff_head</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@list: queue to initialize</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This initializes only the list and queue length aspects of</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>an sk_buff_head object.  This allows to initialize the list</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>aspects of an sk_buff_head without reinitializing things like</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the spinlock.  It can also be used for on-stack sk_buff_head</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>objects where the spinlock is known to not be used.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__skb_queue_head_init\">__skb_queue_head_init</a>(struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#list\">list</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#next\">next</a> = (struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *)<a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#qlen\">qlen</a> = 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function creates a split out lock class for each invocation;</span>", 
"<span class=\"comment\"> * this is needed for now since a whole lot of users of the skb-queue</span>", 
"<span class=\"comment\"> * infrastructure in drivers have different locking usage (in hardirq)</span>", 
"<span class=\"comment\"> * than the networking core (in softirq only). In the long run either the</span>", 
"<span class=\"comment\"> * network layer or drivers should need annotation to consolidate the</span>", 
"<span class=\"comment\"> * main types of usage into 3 classes.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_queue_head_init\">skb_queue_head_init</a>(struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#list\">list</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__skb_queue_head_init\">__skb_queue_head_init</a>(<a class=\"id\" href=\"#list\">list</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_queue_head_init_class\">skb_queue_head_init_class</a>(struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#list\">list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> *<a class=\"id\" href=\"#class\">class</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_queue_head_init\">skb_queue_head_init</a>(<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lockdep_set_class\">lockdep_set_class</a>(&amp;<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#class\">class</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Insert an sk_buff on a list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The \"__skb_xxxx()\" functions are the non-atomic ones that</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>can only be called with interrupts disabled.</span>", 
"<span class=\"comment\"> */</span>", 
"extern void        <a class=\"id\" href=\"#skb_insert\">skb_insert</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#old\">old</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#newsk\">newsk</a>, struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#list\">list</a>);", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__skb_insert\">__skb_insert</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#newsk\">newsk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#prev\">prev</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#list\">list</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#newsk\">newsk</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#newsk\">newsk</a>-><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#prev\">prev</a>  = <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#newsk\">newsk</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#qlen\">qlen</a>++;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__skb_queue_splice\">__skb_queue_splice</a>(const struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#list\">list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#prev\">prev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#next\">next</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#last\">last</a> = <a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#prev\">prev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#first\">first</a>-><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#first\">first</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#last\">last</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#last\">last</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_queue_splice - join two skb lists, this is designed for stacks</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@list: the new list to add</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@head: the place to add it in the first list</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_queue_splice\">skb_queue_splice</a>(const struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#list\">list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#skb_queue_empty\">skb_queue_empty</a>(<a class=\"id\" href=\"#list\">list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__skb_queue_splice\">__skb_queue_splice</a>(<a class=\"id\" href=\"#list\">list</a>, (struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *) <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#qlen\">qlen</a> += <a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#qlen\">qlen</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_queue_splice - join two skb lists and reinitialise the emptied list</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@list: the new list to add</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@head: the place to add it in the first list</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The list at @list is reinitialised</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_queue_splice_init\">skb_queue_splice_init</a>(struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#list\">list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#skb_queue_empty\">skb_queue_empty</a>(<a class=\"id\" href=\"#list\">list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__skb_queue_splice\">__skb_queue_splice</a>(<a class=\"id\" href=\"#list\">list</a>, (struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *) <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#qlen\">qlen</a> += <a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#qlen\">qlen</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__skb_queue_head_init\">__skb_queue_head_init</a>(<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_queue_splice_tail - join two skb lists, each list being a queue</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@list: the new list to add</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@head: the place to add it in the first list</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_queue_splice_tail\">skb_queue_splice_tail</a>(const struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#list\">list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#skb_queue_empty\">skb_queue_empty</a>(<a class=\"id\" href=\"#list\">list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__skb_queue_splice\">__skb_queue_splice</a>(<a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#prev\">prev</a>, (struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *) <a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#qlen\">qlen</a> += <a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#qlen\">qlen</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_queue_splice_tail - join two skb lists and reinitialise the emptied list</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@list: the new list to add</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@head: the place to add it in the first list</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Each of the lists is a queue.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The list at @list is reinitialised</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_queue_splice_tail_init\">skb_queue_splice_tail_init</a>(struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#list\">list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#skb_queue_empty\">skb_queue_empty</a>(<a class=\"id\" href=\"#list\">list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__skb_queue_splice\">__skb_queue_splice</a>(<a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#prev\">prev</a>, (struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *) <a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#qlen\">qlen</a> += <a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#qlen\">qlen</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__skb_queue_head_init\">__skb_queue_head_init</a>(<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>__skb_queue_after - queue a buffer at the list head</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@list: list to use</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@prev: place after this buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@newsk: buffer to queue</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Queue a buffer int the middle of a list. This function takes no locks</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and you must therefore hold required locks before calling it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>A buffer cannot be placed on two lists at the same time.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__skb_queue_after\">__skb_queue_after</a>(struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#list\">list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#prev\">prev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#newsk\">newsk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__skb_insert\">__skb_insert</a>(<a class=\"id\" href=\"#newsk\">newsk</a>, <a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#skb_append\">skb_append</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#old\">old</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#newsk\">newsk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#list\">list</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__skb_queue_before\">__skb_queue_before</a>(struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#list\">list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#newsk\">newsk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__skb_insert\">__skb_insert</a>(<a class=\"id\" href=\"#newsk\">newsk</a>, <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>__skb_queue_head - queue a buffer at the list head</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@list: list to use</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@newsk: buffer to queue</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Queue a buffer at the start of a list. This function takes no locks</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and you must therefore hold required locks before calling it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>A buffer cannot be placed on two lists at the same time.</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#skb_queue_head\">skb_queue_head</a>(struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#list\">list</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#newsk\">newsk</a>);", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__skb_queue_head\">__skb_queue_head</a>(struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#list\">list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#newsk\">newsk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__skb_queue_after\">__skb_queue_after</a>(<a class=\"id\" href=\"#list\">list</a>, (struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *)<a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#newsk\">newsk</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>__skb_queue_tail - queue a buffer at the list tail</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@list: list to use</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@newsk: buffer to queue</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Queue a buffer at the end of a list. This function takes no locks</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and you must therefore hold required locks before calling it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>A buffer cannot be placed on two lists at the same time.</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#skb_queue_tail\">skb_queue_tail</a>(struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#list\">list</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#newsk\">newsk</a>);", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__skb_queue_tail\">__skb_queue_tail</a>(struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#list\">list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#newsk\">newsk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__skb_queue_before\">__skb_queue_before</a>(<a class=\"id\" href=\"#list\">list</a>, (struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *)<a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#newsk\">newsk</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * remove sk_buff from list. _Must_ be called atomically, and with</span>", 
"<span class=\"comment\"> * the list known..</span>", 
"<span class=\"comment\"> */</span>", 
"extern void<span class=\"ts\"/>   <a class=\"id\" href=\"#skb_unlink\">skb_unlink</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#list\">list</a>);", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__skb_unlink\">__skb_unlink</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#list\">list</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#next\">next</a>, *<a class=\"id\" href=\"#prev\">prev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#qlen\">qlen</a>--;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a><span class=\"ts\"/>   = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a><span class=\"ts\"/>   = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#next\">next</a>  = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>__skb_dequeue - remove from the head of the queue</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@list: list to dequeue from</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Remove the head of the list. This function does not take any locks</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>so must be used with appropriate locks held only. The head item is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>returned or %NULL if the list is empty.</span>", 
"<span class=\"comment\"> */</span>", 
"extern struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb_dequeue\">skb_dequeue</a>(struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#list\">list</a>);", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#__skb_dequeue\">__skb_dequeue</a>(struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#list\">list</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#skb_peek\">skb_peek</a>(<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__skb_unlink\">__skb_unlink</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>__skb_dequeue_tail - remove from the tail of the queue</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@list: list to dequeue from</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Remove the tail of the list. This function does not take any locks</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>so must be used with appropriate locks held only. The tail item is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>returned or %NULL if the list is empty.</span>", 
"<span class=\"comment\"> */</span>", 
"extern struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb_dequeue_tail\">skb_dequeue_tail</a>(struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#list\">list</a>);", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#__skb_dequeue_tail\">__skb_dequeue_tail</a>(struct <a class=\"id\" href=\"#sk_buff_head\">sk_buff_head</a> *<a class=\"id\" href=\"#list\">list</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a> = <a class=\"id\" href=\"#skb_peek_tail\">skb_peek_tail</a>(<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__skb_unlink\">__skb_unlink</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>;", 
"}", 
"", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#skb_is_nonlinear\">skb_is_nonlinear</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data_len\">data_len</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#skb_headlen\">skb_headlen</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> - <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data_len\">data_len</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#skb_pagelen\">skb_pagelen</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#len\">len</a> = 0;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = (int)<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#nr_frags\">nr_frags</a> - 1; <a class=\"id\" href=\"#i\">i</a> >= 0; <a class=\"id\" href=\"#i\">i</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#len\">len</a> + <a class=\"id\" href=\"#skb_headlen\">skb_headlen</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_fill_page_desc\">skb_fill_page_desc</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#i\">i</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#off\">off</a>, int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_frag_t\">skb_frag_t</a> *<a class=\"id\" href=\"#frag\">frag</a> = &amp;<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#frags\">frags</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#frag\">frag</a>-><a class=\"id\" href=\"#page\">page</a><span class=\"ts\"/><span class=\"ts\"/>  = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#frag\">frag</a>-><a class=\"id\" href=\"#page_offset\">page_offset</a><span class=\"ts\"/>  = <a class=\"id\" href=\"#off\">off</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#frag\">frag</a>-><a class=\"id\" href=\"#size\">size</a><span class=\"ts\"/><span class=\"ts\"/>  = <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#nr_frags\">nr_frags</a> = <a class=\"id\" href=\"#i\">i</a> + 1;", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#skb_add_rx_frag\">skb_add_rx_frag</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#i\">i</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#off\">off</a>, int <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SKB_PAGE_ASSERT\">SKB_PAGE_ASSERT</a>(<a class=\"id\" href=\"#skb\">skb</a>) <span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#skb_shinfo\">skb_shinfo</a>(<a class=\"id\" href=\"#skb\">skb</a>)-><a class=\"id\" href=\"#nr_frags\">nr_frags</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SKB_FRAG_ASSERT\">SKB_FRAG_ASSERT</a>(<a class=\"id\" href=\"#skb\">skb</a>) <span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#skb_has_frags\">skb_has_frags</a>(<a class=\"id\" href=\"#skb\">skb</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SKB_LINEAR_ASSERT\">SKB_LINEAR_ASSERT</a>(<a class=\"id\" href=\"#skb\">skb</a>)  <a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#skb_is_nonlinear\">skb_is_nonlinear</a>(<a class=\"id\" href=\"#skb\">skb</a>))", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#NET_SKBUFF_DATA_USES_OFFSET\">NET_SKBUFF_DATA_USES_OFFSET</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned char *<a class=\"id\" href=\"#skb_tail_pointer\">skb_tail_pointer</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#head\">head</a> + <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tail\">tail</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_reset_tail_pointer\">skb_reset_tail_pointer</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tail\">tail</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a> - <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#head\">head</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_set_tail_pointer\">skb_set_tail_pointer</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, const int <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_reset_tail_pointer\">skb_reset_tail_pointer</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tail\">tail</a> += <a class=\"id\" href=\"#offset\">offset</a>;", 
"}", 
"#else <span class=\"comment\">/* NET_SKBUFF_DATA_USES_OFFSET */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned char *<a class=\"id\" href=\"#skb_tail_pointer\">skb_tail_pointer</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tail\">tail</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_reset_tail_pointer\">skb_reset_tail_pointer</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tail\">tail</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_set_tail_pointer\">skb_set_tail_pointer</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, const int <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tail\">tail</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a> + <a class=\"id\" href=\"#offset\">offset</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* NET_SKBUFF_DATA_USES_OFFSET */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Add data to an sk_buff</span>", 
"<span class=\"comment\"> */</span>", 
"extern unsigned char *<a class=\"id\" href=\"#skb_put\">skb_put</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>);", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned char *<a class=\"id\" href=\"#__skb_put\">__skb_put</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#skb_tail_pointer\">skb_tail_pointer</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SKB_LINEAR_ASSERT\">SKB_LINEAR_ASSERT</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tail\">tail</a> += <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>  += <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"}", 
"", 
"extern unsigned char *<a class=\"id\" href=\"#skb_push\">skb_push</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>);", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned char *<a class=\"id\" href=\"#__skb_push\">__skb_push</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a> -= <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>  += <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"}", 
"", 
"extern unsigned char *<a class=\"id\" href=\"#skb_pull\">skb_pull</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>);", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned char *<a class=\"id\" href=\"#__skb_pull\">__skb_pull</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> &lt; <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data_len\">data_len</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a> += <a class=\"id\" href=\"#len\">len</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned char *<a class=\"id\" href=\"#skb_pull_inline\">skb_pull_inline</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>) ? <a class=\"id\" href=\"#NULL\">NULL</a> : <a class=\"id\" href=\"#__skb_pull\">__skb_pull</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"}", 
"", 
"extern unsigned char *<a class=\"id\" href=\"#__pskb_pull_tail\">__pskb_pull_tail</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#delta\">delta</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned char *<a class=\"id\" href=\"#__pskb_pull\">__pskb_pull</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#skb_headlen\">skb_headlen</a>(<a class=\"id\" href=\"#skb\">skb</a>) &&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#__pskb_pull_tail\">__pskb_pull_tail</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#len\">len</a> - <a class=\"id\" href=\"#skb_headlen\">skb_headlen</a>(<a class=\"id\" href=\"#skb\">skb</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a> += <a class=\"id\" href=\"#len\">len</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned char *<a class=\"id\" href=\"#pskb_pull\">pskb_pull</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>) ? <a class=\"id\" href=\"#NULL\">NULL</a> : <a class=\"id\" href=\"#__pskb_pull\">__pskb_pull</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#pskb_may_pull\">pskb_may_pull</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, unsigned int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#len\">len</a> <= <a class=\"id\" href=\"#skb_headlen\">skb_headlen</a>(<a class=\"id\" href=\"#skb\">skb</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__pskb_pull_tail\">__pskb_pull_tail</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#len\">len</a> - <a class=\"id\" href=\"#skb_headlen\">skb_headlen</a>(<a class=\"id\" href=\"#skb\">skb</a>)) != <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_headroom - bytes at buffer head</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: buffer to check</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return the number of bytes of free space at the head of an &amp;sk_buff.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#skb_headroom\">skb_headroom</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a> - <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#head\">head</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_tailroom - bytes at buffer end</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: buffer to check</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return the number of bytes of free space at the tail of an sk_buff</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#skb_tailroom\">skb_tailroom</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb_is_nonlinear\">skb_is_nonlinear</a>(<a class=\"id\" href=\"#skb\">skb</a>) ? 0 : <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tail\">tail</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>skb_reserve - adjust headroom</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@skb: buffer to alter</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@len: bytes to move</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Increase the headroom of an empty &amp;sk_buff by reducing the tail</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>room. This is only allowed for an empty buffer.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_reserve\">skb_reserve</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a> += <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tail\">tail</a> += <a class=\"id\" href=\"#len\">len</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#NET_SKBUFF_DATA_USES_OFFSET\">NET_SKBUFF_DATA_USES_OFFSET</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned char *<a class=\"id\" href=\"#skb_transport_header\">skb_transport_header</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#head\">head</a> + <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#transport_header\">transport_header</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_reset_transport_header\">skb_reset_transport_header</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#transport_header\">transport_header</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a> - <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#head\">head</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_set_transport_header\">skb_set_transport_header</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const int <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_reset_transport_header\">skb_reset_transport_header</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#transport_header\">transport_header</a> += <a class=\"id\" href=\"#offset\">offset</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned char *<a class=\"id\" href=\"#skb_network_header\">skb_network_header</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#head\">head</a> + <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#network_header\">network_header</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_reset_network_header\">skb_reset_network_header</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
];
xr_frag_insert('l/06/4685b17a84896c45786291f35f7a19085dcf5e.xr', __xr_tmp);
