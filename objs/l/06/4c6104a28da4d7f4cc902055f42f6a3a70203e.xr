var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * kobject.c - library routines for handling generic kernel objects</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (c) 2002-2003 Patrick Mochel &lt;mochel@osdl.org&gt;</span>", 
"<span class=\"comment\"> * Copyright (c) 2006-2007 Greg Kroah-Hartman &lt;greg@kroah.com&gt;</span>", 
"<span class=\"comment\"> * Copyright (c) 2006-2007 Novell Inc.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file is released under the GPLv2.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Please see the file Documentation/kobject.txt for critical information</span>", 
"<span class=\"comment\"> * about using the kobject interface.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kobject\">kobject</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stat\">stat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * populate_dir - populate directory with attributes.</span>", 
"<span class=\"comment\"> * @kobj: object we're working on.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Most subsystems have a set of default attributes that are associated</span>", 
"<span class=\"comment\"> * with an object that registers with them.  This is a helper called during</span>", 
"<span class=\"comment\"> * object registration that loops through the default attributes of the</span>", 
"<span class=\"comment\"> * subsystem and creates attributes files for them in sysfs.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#populate_dir\">populate_dir</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kobj_type\">kobj_type</a> *<a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#get_ktype\">get_ktype</a>(<a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#attribute\">attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a> && <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#default_attrs\">default_attrs</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; (<a class=\"id\" href=\"#attr\">attr</a> = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#default_attrs\">default_attrs</a>[<a class=\"id\" href=\"#i\">i</a>]) != <a class=\"id\" href=\"#NULL\">NULL</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#sysfs_create_file\">sysfs_create_file</a>(<a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#attr\">attr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#create_dir\">create_dir</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kobject_name\">kobject_name</a>(<a class=\"id\" href=\"#kobj\">kobj</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#sysfs_create_dir\">sysfs_create_dir</a>(<a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#populate_dir\">populate_dir</a>(<a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sysfs_remove_dir\">sysfs_remove_dir</a>(<a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#get_kobj_path_length\">get_kobj_path_length</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#length\">length</a> = 1;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#kobj\">kobj</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* walk up the ancestors until we hit the one pointing to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * root.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Add 1 to strlen for leading '/' of each level.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kobject_name\">kobject_name</a>(<a class=\"id\" href=\"#parent\">parent</a>) == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> += <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#kobject_name\">kobject_name</a>(<a class=\"id\" href=\"#parent\">parent</a>)) + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#length\">length</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#fill_kobj_path\">fill_kobj_path</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>, char *<a class=\"id\" href=\"#path\">path</a>, int <a class=\"id\" href=\"#length\">length</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#parent\">parent</a>;", 
"", 
"<span class=\"ts\"/>--<a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#kobj\">kobj</a>; <a class=\"id\" href=\"#parent\">parent</a>; <a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#parent\">parent</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#kobject_name\">kobject_name</a>(<a class=\"id\" href=\"#parent\">parent</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* back up enough to print this name with '/' */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> -= <a class=\"id\" href=\"#cur\">cur</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strncpy\">strncpy</a>(<a class=\"id\" href=\"#path\">path</a> + <a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#kobject_name\">kobject_name</a>(<a class=\"id\" href=\"#parent\">parent</a>), <a class=\"id\" href=\"#cur\">cur</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*(<a class=\"id\" href=\"#path\">path</a> + --<a class=\"id\" href=\"#length\">length</a>) = '/';", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"kobject: '%s' (%p): %s: path = '%s'\\n\", <a class=\"id\" href=\"#kobject_name\">kobject_name</a>(<a class=\"id\" href=\"#kobj\">kobj</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#path\">path</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kobject_get_path - generate and return the path associated with a given kobj and kset pair.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @kobj:<span class=\"ts\"/>kobject in question, with which to build the path</span>", 
"<span class=\"comment\"> * @gfp_mask:<span class=\"ts\"/>the allocation type used to allocate the path</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The result must be freed by the caller with kfree().</span>", 
"<span class=\"comment\"> */</span>", 
"char *<a class=\"id\" href=\"#kobject_get_path\">kobject_get_path</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#path\">path</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#get_kobj_path_length\">get_kobj_path_length</a>(<a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path\">path</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#path\">path</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fill_kobj_path\">fill_kobj_path</a>(<a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#path\">path</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#kobject_get_path\">kobject_get_path</a>);", 
"", 
"<span class=\"comment\">/* add the kobject to its kset's list */</span>", 
"static void <a class=\"id\" href=\"#kobj_kset_join\">kobj_kset_join</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#kset\">kset</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kset_get\">kset_get</a>(<a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#kset\">kset</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#kset\">kset</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#entry\">entry</a>, &amp;<a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#kset\">kset</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#kset\">kset</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/* remove the kobject from its kset's list */</span>", 
"static void <a class=\"id\" href=\"#kobj_kset_leave\">kobj_kset_leave</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#kset\">kset</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#kset\">kset</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#kset\">kset</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kset_put\">kset_put</a>(<a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#kset\">kset</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#kobject_init_internal\">kobject_init_internal</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kobj\">kobj</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kref_init\">kref_init</a>(&amp;<a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#kref\">kref</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#state_in_sysfs\">state_in_sysfs</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#state_add_uevent_sent\">state_add_uevent_sent</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#state_remove_uevent_sent\">state_remove_uevent_sent</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#state_initialized\">state_initialized</a> = 1;", 
"}", 
"", 
"", 
"static int <a class=\"id\" href=\"#kobject_add_internal\">kobject_add_internal</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#parent\">parent</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kobj\">kobj</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#name\">name</a> || !<a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#name\">name</a>[0]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN\">WARN</a>(1, \"kobject: (%p): attempted to be registered with empty \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"name!\\n\", <a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#kobject_get\">kobject_get</a>(<a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#parent\">parent</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* join kset if set, use it as parent if we do not already have one */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#kset\">kset</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#kobject_get\">kobject_get</a>(&amp;<a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#kset\">kset</a>-><a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kobj_kset_join\">kobj_kset_join</a>(<a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"kobject: '%s' (%p): %s: parent: '%s', set: '%s'\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#kobject_name\">kobject_name</a>(<a class=\"id\" href=\"#kobj\">kobj</a>), <a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#__func__\">__func__</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#parent\">parent</a> ? <a class=\"id\" href=\"#kobject_name\">kobject_name</a>(<a class=\"id\" href=\"#parent\">parent</a>) : \"<NULL>\",", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#kset\">kset</a> ? <a class=\"id\" href=\"#kobject_name\">kobject_name</a>(&amp;<a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#kset\">kset</a>-><a class=\"id\" href=\"#kobj\">kobj</a>) : \"<NULL>\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#create_dir\">create_dir</a>(<a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kobj_kset_leave\">kobj_kset_leave</a>(<a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(<a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* be noisy on error issues */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> == -<a class=\"id\" href=\"#EEXIST\">EEXIST</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s failed for %s with \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"-EEXIST, don't try to register things with \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"the same name in the same directory.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#kobject_name\">kobject_name</a>(<a class=\"id\" href=\"#kobj\">kobj</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s failed for %s (%d)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#kobject_name\">kobject_name</a>(<a class=\"id\" href=\"#kobj\">kobj</a>), <a class=\"id\" href=\"#error\">error</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dump_stack\">dump_stack</a>();", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#state_in_sysfs\">state_in_sysfs</a> = 1;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kobject_set_name_vargs - Set the name of an kobject</span>", 
"<span class=\"comment\"> * @kobj: struct kobject to set the name of</span>", 
"<span class=\"comment\"> * @fmt: format string used to build the name</span>", 
"<span class=\"comment\"> * @vargs: vargs to format the string.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#kobject_set_name_vargs\">kobject_set_name_vargs</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#vargs\">vargs</a>)", 
"{", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#old_name\">old_name</a> = <a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#s\">s</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#name\">name</a> && !<a class=\"id\" href=\"#fmt\">fmt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#kvasprintf\">kvasprintf</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#vargs\">vargs</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#name\">name</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* ewww... some of these buggers have '/' in the name ... */</span>", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#strchr\">strchr</a>(<a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#name\">name</a>, '/')))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>[0] = '!';", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#old_name\">old_name</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kobject_set_name - Set the name of a kobject</span>", 
"<span class=\"comment\"> * @kobj: struct kobject to set the name of</span>", 
"<span class=\"comment\"> * @fmt: format string used to build the name</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This sets the name of the kobject.  If you have already added the</span>", 
"<span class=\"comment\"> * kobject to the system, you must call kobject_rename() in order to</span>", 
"<span class=\"comment\"> * change the name of the kobject.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#kobject_set_name\">kobject_set_name</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>, ...)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#vargs\">vargs</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_start\">va_start</a>(<a class=\"id\" href=\"#vargs\">vargs</a>, <a class=\"id\" href=\"#fmt\">fmt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#kobject_set_name_vargs\">kobject_set_name_vargs</a>(<a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#vargs\">vargs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a>(<a class=\"id\" href=\"#vargs\">vargs</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#kobject_set_name\">kobject_set_name</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kobject_init - initialize a kobject structure</span>", 
"<span class=\"comment\"> * @kobj: pointer to the kobject to initialize</span>", 
"<span class=\"comment\"> * @ktype: pointer to the ktype for this kobject.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function will properly initialize a kobject such that it can then</span>", 
"<span class=\"comment\"> * be passed to the kobject_add() call.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * After this function is called, the kobject MUST be cleaned up by a call</span>", 
"<span class=\"comment\"> * to kobject_put(), not by a call to kfree directly to ensure that all of</span>", 
"<span class=\"comment\"> * the memory is cleaned up properly.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#kobject_init\">kobject_init</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>, struct <a class=\"id\" href=\"#kobj_type\">kobj_type</a> *<a class=\"id\" href=\"#ktype\">ktype</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#err_str\">err_str</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kobj\">kobj</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err_str\">err_str</a> = \"invalid kobject pointer!\";", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ktype\">ktype</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err_str\">err_str</a> = \"must have a ktype to be initialized properly!\\n\";", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#state_initialized\">state_initialized</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* do not error out as sometimes we can recover */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"kobject (%p): tried to init an initialized \"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"object, something is seriously wrong.\\n\", <a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dump_stack\">dump_stack</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_init_internal\">kobject_init_internal</a>(<a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#ktype\">ktype</a> = <a class=\"id\" href=\"#ktype\">ktype</a>;", 
"<span class=\"ts\"/>return;", 
"", 
"<a class=\"id\" href=\"#error\">error</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"kobject (%p): %s\\n\", <a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#err_str\">err_str</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dump_stack\">dump_stack</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#kobject_init\">kobject_init</a>);", 
"", 
"static int <a class=\"id\" href=\"#kobject_add_varg\">kobject_add_varg</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>, struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#parent\">parent</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const char *<a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#vargs\">vargs</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#kobject_set_name_vargs\">kobject_set_name_vargs</a>(<a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#vargs\">vargs</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"kobject: can not set name properly!\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kobject_add_internal\">kobject_add_internal</a>(<a class=\"id\" href=\"#kobj\">kobj</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kobject_add - the main kobject add function</span>", 
"<span class=\"comment\"> * @kobj: the kobject to add</span>", 
"<span class=\"comment\"> * @parent: pointer to the parent of the kobject.</span>", 
"<span class=\"comment\"> * @fmt: format to name the kobject with.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The kobject name is set and added to the kobject hierarchy in this</span>", 
"<span class=\"comment\"> * function.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If @parent is set, then the parent of the @kobj will be set to it.</span>", 
"<span class=\"comment\"> * If @parent is NULL, then the parent of the @kobj will be set to the</span>", 
"<span class=\"comment\"> * kobject associted with the kset assigned to this kobject.  If no kset</span>", 
"<span class=\"comment\"> * is assigned to the kobject, then the kobject will be located in the</span>", 
"<span class=\"comment\"> * root of the sysfs tree.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If this function returns an error, kobject_put() must be called to</span>", 
"<span class=\"comment\"> * properly clean up the memory associated with the object.</span>", 
"<span class=\"comment\"> * Under no instance should the kobject that is passed to this function</span>", 
"<span class=\"comment\"> * be directly freed with a call to kfree(), that can leak memory.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note, no \"add\" uevent will be created with this call, the caller should set</span>", 
"<span class=\"comment\"> * up all of the necessary sysfs files for the object and then call</span>", 
"<span class=\"comment\"> * kobject_uevent() with the UEVENT_ADD parameter to ensure that</span>", 
"<span class=\"comment\"> * userspace is properly notified of this kobject's creation.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#kobject_add\">kobject_add</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>, struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#parent\">parent</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#fmt\">fmt</a>, ...)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kobj\">kobj</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#state_initialized\">state_initialized</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"kobject '%s' (%p): tried to add an \"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"uninitialized object, something is seriously wrong.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#kobject_name\">kobject_name</a>(<a class=\"id\" href=\"#kobj\">kobj</a>), <a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dump_stack\">dump_stack</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_start\">va_start</a>(<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#fmt\">fmt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#kobject_add_varg\">kobject_add_varg</a>(<a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a>(<a class=\"id\" href=\"#args\">args</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#kobject_add\">kobject_add</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kobject_init_and_add - initialize a kobject structure and add it to the kobject hierarchy</span>", 
"<span class=\"comment\"> * @kobj: pointer to the kobject to initialize</span>", 
"<span class=\"comment\"> * @ktype: pointer to the ktype for this kobject.</span>", 
"<span class=\"comment\"> * @parent: pointer to the parent of this kobject.</span>", 
"<span class=\"comment\"> * @fmt: the name of the kobject.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function combines the call to kobject_init() and</span>", 
"<span class=\"comment\"> * kobject_add().  The same type of error handling after a call to</span>", 
"<span class=\"comment\"> * kobject_add() and kobject lifetime rules are the same here.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#kobject_init_and_add\">kobject_init_and_add</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>, struct <a class=\"id\" href=\"#kobj_type\">kobj_type</a> *<a class=\"id\" href=\"#ktype\">ktype</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#parent\">parent</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>, ...)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_init\">kobject_init</a>(<a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#ktype\">ktype</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_start\">va_start</a>(<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#fmt\">fmt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#kobject_add_varg\">kobject_add_varg</a>(<a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a>(<a class=\"id\" href=\"#args\">args</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#kobject_init_and_add\">kobject_init_and_add</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kobject_rename - change the name of an object</span>", 
"<span class=\"comment\"> * @kobj: object in question.</span>", 
"<span class=\"comment\"> * @new_name: object's new name</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It is the responsibility of the caller to provide mutual</span>", 
"<span class=\"comment\"> * exclusion between two different calls of kobject_rename</span>", 
"<span class=\"comment\"> * on the same kobject and to ensure that new_name is valid and</span>", 
"<span class=\"comment\"> * won't conflict with other kobjects.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#kobject_rename\">kobject_rename</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>, const char *<a class=\"id\" href=\"#new_name\">new_name</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#devpath\">devpath</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#dup_name\">dup_name</a> = <a class=\"id\" href=\"#NULL\">NULL</a>, *<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#devpath_string\">devpath_string</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#envp\">envp</a>[2];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobj\">kobj</a> = <a class=\"id\" href=\"#kobject_get\">kobject_get</a>(<a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kobj\">kobj</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#devpath\">devpath</a> = <a class=\"id\" href=\"#kobject_get_path\">kobject_get_path</a>(<a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#devpath\">devpath</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#devpath_string\">devpath_string</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#devpath\">devpath</a>) + 15, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#devpath_string\">devpath_string</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#devpath_string\">devpath_string</a>, \"DEVPATH_OLD=%s\", <a class=\"id\" href=\"#devpath\">devpath</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#envp\">envp</a>[0] = <a class=\"id\" href=\"#devpath_string\">devpath_string</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#envp\">envp</a>[1] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#dup_name\">dup_name</a> = <a class=\"id\" href=\"#kstrdup\">kstrdup</a>(<a class=\"id\" href=\"#new_name\">new_name</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#name\">name</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#sysfs_rename_dir\">sysfs_rename_dir</a>(<a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#new_name\">new_name</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Install the new kobject name */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dup_name\">dup_name</a> = <a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#name\">name</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* This function is mostly/only used for network interface.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Some hotplug package track interfaces by their name and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * therefore want to know when the name is changed by the user. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_uevent_env\">kobject_uevent_env</a>(<a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#KOBJ_MOVE\">KOBJ_MOVE</a>, <a class=\"id\" href=\"#envp\">envp</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#dup_name\">dup_name</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#devpath_string\">devpath_string</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#devpath\">devpath</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(<a class=\"id\" href=\"#kobj\">kobj</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#kobject_rename\">kobject_rename</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kobject_move - move object to another parent</span>", 
"<span class=\"comment\"> * @kobj: object in question.</span>", 
"<span class=\"comment\"> * @new_parent: object's new parent (can be NULL)</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#kobject_move\">kobject_move</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>, struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#new_parent\">new_parent</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#old_parent\">old_parent</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#devpath\">devpath</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#devpath_string\">devpath_string</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#envp\">envp</a>[2];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobj\">kobj</a> = <a class=\"id\" href=\"#kobject_get\">kobject_get</a>(<a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kobj\">kobj</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_parent\">new_parent</a> = <a class=\"id\" href=\"#kobject_get\">kobject_get</a>(<a class=\"id\" href=\"#new_parent\">new_parent</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#new_parent\">new_parent</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#kset\">kset</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_parent\">new_parent</a> = <a class=\"id\" href=\"#kobject_get\">kobject_get</a>(&amp;<a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#kset\">kset</a>-><a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* old object path */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#devpath\">devpath</a> = <a class=\"id\" href=\"#kobject_get_path\">kobject_get_path</a>(<a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#devpath\">devpath</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#devpath_string\">devpath_string</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#devpath\">devpath</a>) + 15, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#devpath_string\">devpath_string</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#devpath_string\">devpath_string</a>, \"DEVPATH_OLD=%s\", <a class=\"id\" href=\"#devpath\">devpath</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#envp\">envp</a>[0] = <a class=\"id\" href=\"#devpath_string\">devpath_string</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#envp\">envp</a>[1] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#sysfs_move_dir\">sysfs_move_dir</a>(<a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#new_parent\">new_parent</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_parent\">old_parent</a> = <a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#new_parent\">new_parent</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_parent\">new_parent</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(<a class=\"id\" href=\"#old_parent\">old_parent</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_uevent_env\">kobject_uevent_env</a>(<a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#KOBJ_MOVE\">KOBJ_MOVE</a>, <a class=\"id\" href=\"#envp\">envp</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(<a class=\"id\" href=\"#new_parent\">new_parent</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(<a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#devpath_string\">devpath_string</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#devpath\">devpath</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kobject_del - unlink kobject from hierarchy.</span>", 
"<span class=\"comment\"> * @kobj: object.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#kobject_del\">kobject_del</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kobj\">kobj</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysfs_remove_dir\">sysfs_remove_dir</a>(<a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#state_in_sysfs\">state_in_sysfs</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobj_kset_leave\">kobj_kset_leave</a>(<a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(<a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kobject_get - increment refcount for object.</span>", 
"<span class=\"comment\"> * @kobj: object.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobject_get\">kobject_get</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kobj\">kobj</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kref_get\">kref_get</a>(&amp;<a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#kref\">kref</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kobj\">kobj</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * kobject_cleanup - free kobject resources.</span>", 
"<span class=\"comment\"> * @kobj: object to cleanup</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#kobject_cleanup\">kobject_cleanup</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kobj_type\">kobj_type</a> *<a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#get_ktype\">get_ktype</a>(<a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#name\">name</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"kobject: '%s' (%p): %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#kobject_name\">kobject_name</a>(<a class=\"id\" href=\"#kobj\">kobj</a>), <a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a> && !<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#release\">release</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"kobject: '%s' (%p): does not have a release() \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"function, it is broken and must be fixed.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#kobject_name\">kobject_name</a>(<a class=\"id\" href=\"#kobj\">kobj</a>), <a class=\"id\" href=\"#kobj\">kobj</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* send \"remove\" if the caller did not do it but sent \"add\" */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#state_add_uevent_sent\">state_add_uevent_sent</a> && !<a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#state_remove_uevent_sent\">state_remove_uevent_sent</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"kobject: '%s' (%p): auto cleanup 'remove' event\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#kobject_name\">kobject_name</a>(<a class=\"id\" href=\"#kobj\">kobj</a>), <a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kobject_uevent\">kobject_uevent</a>(<a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#KOBJ_REMOVE\">KOBJ_REMOVE</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* remove from sysfs if the caller did not do it */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#state_in_sysfs\">state_in_sysfs</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"kobject: '%s' (%p): auto cleanup kobject_del\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#kobject_name\">kobject_name</a>(<a class=\"id\" href=\"#kobj\">kobj</a>), <a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kobject_del\">kobject_del</a>(<a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a> && <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#release\">release</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"kobject: '%s' (%p): calling ktype release\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#kobject_name\">kobject_name</a>(<a class=\"id\" href=\"#kobj\">kobj</a>), <a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#release\">release</a>(<a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* free name if we allocated it */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#name\">name</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"kobject: '%s': free name\\n\", <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#kobject_release\">kobject_release</a>(struct <a class=\"id\" href=\"#kref\">kref</a> *<a class=\"id\" href=\"#kref\">kref</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_cleanup\">kobject_cleanup</a>(<a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#kref\">kref</a>, struct <a class=\"id\" href=\"#kobject\">kobject</a>, <a class=\"id\" href=\"#kref\">kref</a>));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kobject_put - decrement refcount for object.</span>", 
"<span class=\"comment\"> * @kobj: object.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Decrement the refcount, and if 0, call kobject_cleanup().</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#kobject_put\">kobject_put</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kobj\">kobj</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#state_initialized\">state_initialized</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN\">WARN</a>(1, <a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"kobject: '%s' (%p): is not \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"initialized, yet kobject_put() is being \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"called.\\n\", <a class=\"id\" href=\"#kobject_name\">kobject_name</a>(<a class=\"id\" href=\"#kobj\">kobj</a>), <a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kref_put\">kref_put</a>(&amp;<a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#kref\">kref</a>, <a class=\"id\" href=\"#kobject_release\">kobject_release</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#dynamic_kobj_release\">dynamic_kobj_release</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"kobject: (%p): %s\\n\", <a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#kobj\">kobj</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#kobj_type\">kobj_type</a> <a class=\"id\" href=\"#dynamic_kobj_ktype\">dynamic_kobj_ktype</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a><span class=\"ts\"/>= <a class=\"id\" href=\"#dynamic_kobj_release\">dynamic_kobj_release</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#sysfs_ops\">sysfs_ops</a><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#kobj_sysfs_ops\">kobj_sysfs_ops</a>,", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kobject_create - create a struct kobject dynamically</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function creates a kobject structure dynamically and sets it up</span>", 
"<span class=\"comment\"> * to be a \"dynamic\" kobject with a default release function set up.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the kobject was not able to be created, NULL will be returned.</span>", 
"<span class=\"comment\"> * The kobject structure returned from here must be cleaned up with a</span>", 
"<span class=\"comment\"> * call to kobject_put() and not kfree(), as kobject_init() has</span>", 
"<span class=\"comment\"> * already been called on this structure.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobject_create\">kobject_create</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobj\">kobj</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#kobj\">kobj</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kobj\">kobj</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_init\">kobject_init</a>(<a class=\"id\" href=\"#kobj\">kobj</a>, &amp;<a class=\"id\" href=\"#dynamic_kobj_ktype\">dynamic_kobj_ktype</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kobj\">kobj</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kobject_create_and_add - create a struct kobject dynamically and register it with sysfs</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @name: the name for the kset</span>", 
"<span class=\"comment\"> * @parent: the parent kobject of this kobject, if any.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function creates a kobject structure dynamically and registers it</span>", 
"<span class=\"comment\"> * with sysfs.  When you are finished with this structure, call</span>", 
"<span class=\"comment\"> * kobject_put() and the structure will be dynamically freed when</span>", 
"<span class=\"comment\"> * it is no longer being used.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the kobject was not able to be created, NULL will be returned.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobject_create_and_add\">kobject_create_and_add</a>(const char *<a class=\"id\" href=\"#name\">name</a>, struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#parent\">parent</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobj\">kobj</a> = <a class=\"id\" href=\"#kobject_create\">kobject_create</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kobj\">kobj</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#kobject_add\">kobject_add</a>(<a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#parent\">parent</a>, \"%s\", <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"%s: kobject_add error: %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#retval\">retval</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(<a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kobj\">kobj</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kobj\">kobj</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#kobject_create_and_add\">kobject_create_and_add</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kset_init - initialize a kset for use</span>", 
"<span class=\"comment\"> * @k: kset</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#kset_init\">kset_init</a>(struct <a class=\"id\" href=\"#kset\">kset</a> *<a class=\"id\" href=\"#k\">k</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_init_internal\">kobject_init_internal</a>(&amp;<a class=\"id\" href=\"#k\">k</a>-><a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#k\">k</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#k\">k</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/* default kobject attribute operations */</span>", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#kobj_attr_show\">kobj_attr_show</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>, struct <a class=\"id\" href=\"#attribute\">attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kobj_attribute\">kobj_attribute</a> *<a class=\"id\" href=\"#kattr\">kattr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kattr\">kattr</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#attr\">attr</a>, struct <a class=\"id\" href=\"#kobj_attribute\">kobj_attribute</a>, <a class=\"id\" href=\"#attr\">attr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kattr\">kattr</a>-><a class=\"id\" href=\"#show\">show</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#kattr\">kattr</a>-><a class=\"id\" href=\"#show\">show</a>(<a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#kattr\">kattr</a>, <a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#kobj_attr_store\">kobj_attr_store</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>, struct <a class=\"id\" href=\"#attribute\">attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kobj_attribute\">kobj_attribute</a> *<a class=\"id\" href=\"#kattr\">kattr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kattr\">kattr</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#attr\">attr</a>, struct <a class=\"id\" href=\"#kobj_attribute\">kobj_attribute</a>, <a class=\"id\" href=\"#attr\">attr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kattr\">kattr</a>-><a class=\"id\" href=\"#store\">store</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#kattr\">kattr</a>-><a class=\"id\" href=\"#store\">store</a>(<a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#kattr\">kattr</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"const struct <a class=\"id\" href=\"#sysfs_ops\">sysfs_ops</a> <a class=\"id\" href=\"#kobj_sysfs_ops\">kobj_sysfs_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#show\">show</a><span class=\"ts\"/>= <a class=\"id\" href=\"#kobj_attr_show\">kobj_attr_show</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#store\">store</a><span class=\"ts\"/>= <a class=\"id\" href=\"#kobj_attr_store\">kobj_attr_store</a>,", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kset_register - initialize and add a kset.</span>", 
"<span class=\"comment\"> * @k: kset.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#kset_register\">kset_register</a>(struct <a class=\"id\" href=\"#kset\">kset</a> *<a class=\"id\" href=\"#k\">k</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#k\">k</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kset_init\">kset_init</a>(<a class=\"id\" href=\"#k\">k</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#kobject_add_internal\">kobject_add_internal</a>(&amp;<a class=\"id\" href=\"#k\">k</a>-><a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_uevent\">kobject_uevent</a>(&amp;<a class=\"id\" href=\"#k\">k</a>-><a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#KOBJ_ADD\">KOBJ_ADD</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kset_unregister - remove a kset.</span>", 
"<span class=\"comment\"> * @k: kset.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#kset_unregister\">kset_unregister</a>(struct <a class=\"id\" href=\"#kset\">kset</a> *<a class=\"id\" href=\"#k\">k</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#k\">k</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(&amp;<a class=\"id\" href=\"#k\">k</a>-><a class=\"id\" href=\"#kobj\">kobj</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kset_find_obj - search for object in kset.</span>", 
"<span class=\"comment\"> * @kset: kset we're looking in.</span>", 
"<span class=\"comment\"> * @name: object's name.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Lock kset via @kset-&gt;subsys, and iterate over @kset-&gt;list,</span>", 
"<span class=\"comment\"> * looking for a matching kobject. If matching object is found</span>", 
"<span class=\"comment\"> * take a reference and return the object.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kset_find_obj\">kset_find_obj</a>(struct <a class=\"id\" href=\"#kset\">kset</a> *<a class=\"id\" href=\"#kset\">kset</a>, const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#k\">k</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#kset\">kset</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#k\">k</a>, &amp;<a class=\"id\" href=\"#kset\">kset</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#entry\">entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kobject_name\">kobject_name</a>(<a class=\"id\" href=\"#k\">k</a>) && !<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#kobject_name\">kobject_name</a>(<a class=\"id\" href=\"#k\">k</a>), <a class=\"id\" href=\"#name\">name</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#kobject_get\">kobject_get</a>(<a class=\"id\" href=\"#k\">k</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#kset\">kset</a>-><a class=\"id\" href=\"#list_lock\">list_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#kset_release\">kset_release</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kset\">kset</a> *<a class=\"id\" href=\"#kset\">kset</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#kobj\">kobj</a>, struct <a class=\"id\" href=\"#kset\">kset</a>, <a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"kobject: '%s' (%p): %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#kobject_name\">kobject_name</a>(<a class=\"id\" href=\"#kobj\">kobj</a>), <a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#kset\">kset</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#kobj_type\">kobj_type</a> <a class=\"id\" href=\"#kset_ktype\">kset_ktype</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#sysfs_ops\">sysfs_ops</a><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#kobj_sysfs_ops\">kobj_sysfs_ops</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a> = <a class=\"id\" href=\"#kset_release\">kset_release</a>,", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kset_create - create a struct kset dynamically</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @name: the name for the kset</span>", 
"<span class=\"comment\"> * @uevent_ops: a struct kset_uevent_ops for the kset</span>", 
"<span class=\"comment\"> * @parent_kobj: the parent kobject of this kset, if any.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function creates a kset structure dynamically.  This structure can</span>", 
"<span class=\"comment\"> * then be registered with the system and show up in sysfs with a call to</span>", 
"<span class=\"comment\"> * kset_register().  When you are finished with this structure, if</span>", 
"<span class=\"comment\"> * kset_register() has been called, call kset_unregister() and the</span>", 
"<span class=\"comment\"> * structure will be dynamically freed when it is no longer being used.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the kset was not able to be created, NULL will be returned.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#kset\">kset</a> *<a class=\"id\" href=\"#kset_create\">kset_create</a>(const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#kset_uevent_ops\">kset_uevent_ops</a> *<a class=\"id\" href=\"#uevent_ops\">uevent_ops</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#parent_kobj\">parent_kobj</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kset\">kset</a> *<a class=\"id\" href=\"#kset\">kset</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kset\">kset</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#kset\">kset</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kset\">kset</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#kobject_set_name\">kobject_set_name</a>(&amp;<a class=\"id\" href=\"#kset\">kset</a>-><a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#kset\">kset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kset\">kset</a>-><a class=\"id\" href=\"#uevent_ops\">uevent_ops</a> = <a class=\"id\" href=\"#uevent_ops\">uevent_ops</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kset\">kset</a>-><a class=\"id\" href=\"#kobj\">kobj</a>.<a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#parent_kobj\">parent_kobj</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The kobject of this kset will have a type of kset_ktype and belong to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * no kset itself.  That way we can properly free it when it is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * finished being used.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kset\">kset</a>-><a class=\"id\" href=\"#kobj\">kobj</a>.<a class=\"id\" href=\"#ktype\">ktype</a> = &amp;<a class=\"id\" href=\"#kset_ktype\">kset_ktype</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kset\">kset</a>-><a class=\"id\" href=\"#kobj\">kobj</a>.<a class=\"id\" href=\"#kset\">kset</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kset\">kset</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kset_create_and_add - create a struct kset dynamically and add it to sysfs</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @name: the name for the kset</span>", 
"<span class=\"comment\"> * @uevent_ops: a struct kset_uevent_ops for the kset</span>", 
"<span class=\"comment\"> * @parent_kobj: the parent kobject of this kset, if any.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function creates a kset structure dynamically and registers it</span>", 
"<span class=\"comment\"> * with sysfs.  When you are finished with this structure, call</span>", 
"<span class=\"comment\"> * kset_unregister() and the structure will be dynamically freed when it</span>", 
"<span class=\"comment\"> * is no longer being used.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the kset was not able to be created, NULL will be returned.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#kset\">kset</a> *<a class=\"id\" href=\"#kset_create_and_add\">kset_create_and_add</a>(const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const struct <a class=\"id\" href=\"#kset_uevent_ops\">kset_uevent_ops</a> *<a class=\"id\" href=\"#uevent_ops\">uevent_ops</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#parent_kobj\">parent_kobj</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kset\">kset</a> *<a class=\"id\" href=\"#kset\">kset</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kset\">kset</a> = <a class=\"id\" href=\"#kset_create\">kset_create</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#uevent_ops\">uevent_ops</a>, <a class=\"id\" href=\"#parent_kobj\">parent_kobj</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kset\">kset</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#kset_register\">kset_register</a>(<a class=\"id\" href=\"#kset\">kset</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#kset\">kset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kset\">kset</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#kset_create_and_add\">kset_create_and_add</a>);", 
"", 
"", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#kobj_ns_type_lock\">kobj_ns_type_lock</a>);", 
"static const struct <a class=\"id\" href=\"#kobj_ns_type_operations\">kobj_ns_type_operations</a> *<a class=\"id\" href=\"#kobj_ns_ops_tbl\">kobj_ns_ops_tbl</a>[<a class=\"id\" href=\"#KOBJ_NS_TYPES\">KOBJ_NS_TYPES</a>];", 
"", 
"int <a class=\"id\" href=\"#kobj_ns_type_register\">kobj_ns_type_register</a>(const struct <a class=\"id\" href=\"#kobj_ns_type_operations\">kobj_ns_type_operations</a> *<a class=\"id\" href=\"#ops\">ops</a>)", 
"{", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#kobj_ns_type\">kobj_ns_type</a> <a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#kobj_ns_type_lock\">kobj_ns_type_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> >= <a class=\"id\" href=\"#KOBJ_NS_TYPES\">KOBJ_NS_TYPES</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> <= <a class=\"id\" href=\"#KOBJ_NS_TYPE_NONE\">KOBJ_NS_TYPE_NONE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kobj_ns_ops_tbl\">kobj_ns_ops_tbl</a>[<a class=\"id\" href=\"#type\">type</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobj_ns_ops_tbl\">kobj_ns_ops_tbl</a>[<a class=\"id\" href=\"#type\">type</a>] = <a class=\"id\" href=\"#ops\">ops</a>;", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#kobj_ns_type_lock\">kobj_ns_type_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#kobj_ns_type_registered\">kobj_ns_type_registered</a>(enum <a class=\"id\" href=\"#kobj_ns_type\">kobj_ns_type</a> <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#registered\">registered</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#kobj_ns_type_lock\">kobj_ns_type_lock</a>);", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#type\">type</a> &gt; <a class=\"id\" href=\"#KOBJ_NS_TYPE_NONE\">KOBJ_NS_TYPE_NONE</a>) && (<a class=\"id\" href=\"#type\">type</a> &lt; <a class=\"id\" href=\"#KOBJ_NS_TYPES\">KOBJ_NS_TYPES</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#registered\">registered</a> = <a class=\"id\" href=\"#kobj_ns_ops_tbl\">kobj_ns_ops_tbl</a>[<a class=\"id\" href=\"#type\">type</a>] != <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#kobj_ns_type_lock\">kobj_ns_type_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#registered\">registered</a>;", 
"}", 
"", 
"const struct <a class=\"id\" href=\"#kobj_ns_type_operations\">kobj_ns_type_operations</a> *<a class=\"id\" href=\"#kobj_child_ns_ops\">kobj_child_ns_ops</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#parent\">parent</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#kobj_ns_type_operations\">kobj_ns_type_operations</a> *<a class=\"id\" href=\"#ops\">ops</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#parent\">parent</a> && <a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#ktype\">ktype</a>-><a class=\"id\" href=\"#child_ns_type\">child_ns_type</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ops\">ops</a> = <a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#ktype\">ktype</a>-><a class=\"id\" href=\"#child_ns_type\">child_ns_type</a>(<a class=\"id\" href=\"#parent\">parent</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ops\">ops</a>;", 
"}", 
"", 
"const struct <a class=\"id\" href=\"#kobj_ns_type_operations\">kobj_ns_type_operations</a> *<a class=\"id\" href=\"#kobj_ns_ops\">kobj_ns_ops</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kobj_child_ns_ops\">kobj_child_ns_ops</a>(<a class=\"id\" href=\"#kobj\">kobj</a>-><a class=\"id\" href=\"#parent\">parent</a>);", 
"}", 
"", 
"", 
"const void *<a class=\"id\" href=\"#kobj_ns_current\">kobj_ns_current</a>(enum <a class=\"id\" href=\"#kobj_ns_type\">kobj_ns_type</a> <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>const void *<a class=\"id\" href=\"#ns\">ns</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#kobj_ns_type_lock\">kobj_ns_type_lock</a>);", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#type\">type</a> &gt; <a class=\"id\" href=\"#KOBJ_NS_TYPE_NONE\">KOBJ_NS_TYPE_NONE</a>) && (<a class=\"id\" href=\"#type\">type</a> &lt; <a class=\"id\" href=\"#KOBJ_NS_TYPES\">KOBJ_NS_TYPES</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#kobj_ns_ops_tbl\">kobj_ns_ops_tbl</a>[<a class=\"id\" href=\"#type\">type</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ns\">ns</a> = <a class=\"id\" href=\"#kobj_ns_ops_tbl\">kobj_ns_ops_tbl</a>[<a class=\"id\" href=\"#type\">type</a>]-><a class=\"id\" href=\"#current_ns\">current_ns</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#kobj_ns_type_lock\">kobj_ns_type_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ns\">ns</a>;", 
"}", 
"", 
"const void *<a class=\"id\" href=\"#kobj_ns_netlink\">kobj_ns_netlink</a>(enum <a class=\"id\" href=\"#kobj_ns_type\">kobj_ns_type</a> <a class=\"id\" href=\"#type\">type</a>, struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>const void *<a class=\"id\" href=\"#ns\">ns</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#kobj_ns_type_lock\">kobj_ns_type_lock</a>);", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#type\">type</a> &gt; <a class=\"id\" href=\"#KOBJ_NS_TYPE_NONE\">KOBJ_NS_TYPE_NONE</a>) && (<a class=\"id\" href=\"#type\">type</a> &lt; <a class=\"id\" href=\"#KOBJ_NS_TYPES\">KOBJ_NS_TYPES</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#kobj_ns_ops_tbl\">kobj_ns_ops_tbl</a>[<a class=\"id\" href=\"#type\">type</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ns\">ns</a> = <a class=\"id\" href=\"#kobj_ns_ops_tbl\">kobj_ns_ops_tbl</a>[<a class=\"id\" href=\"#type\">type</a>]-><a class=\"id\" href=\"#netlink_ns\">netlink_ns</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#kobj_ns_type_lock\">kobj_ns_type_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ns\">ns</a>;", 
"}", 
"", 
"const void *<a class=\"id\" href=\"#kobj_ns_initial\">kobj_ns_initial</a>(enum <a class=\"id\" href=\"#kobj_ns_type\">kobj_ns_type</a> <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>const void *<a class=\"id\" href=\"#ns\">ns</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#kobj_ns_type_lock\">kobj_ns_type_lock</a>);", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#type\">type</a> &gt; <a class=\"id\" href=\"#KOBJ_NS_TYPE_NONE\">KOBJ_NS_TYPE_NONE</a>) && (<a class=\"id\" href=\"#type\">type</a> &lt; <a class=\"id\" href=\"#KOBJ_NS_TYPES\">KOBJ_NS_TYPES</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#kobj_ns_ops_tbl\">kobj_ns_ops_tbl</a>[<a class=\"id\" href=\"#type\">type</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ns\">ns</a> = <a class=\"id\" href=\"#kobj_ns_ops_tbl\">kobj_ns_ops_tbl</a>[<a class=\"id\" href=\"#type\">type</a>]-><a class=\"id\" href=\"#initial_ns\">initial_ns</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#kobj_ns_type_lock\">kobj_ns_type_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ns\">ns</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * kobj_ns_exit - invalidate a namespace tag</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @type: the namespace type (i.e. KOBJ_NS_TYPE_NET)</span>", 
"<span class=\"comment\"> * @ns: the actual namespace being invalidated</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is called when a tag is no longer valid.  For instance,</span>", 
"<span class=\"comment\"> * when a network namespace exits, it uses this helper to</span>", 
"<span class=\"comment\"> * make sure no sb's sysfs_info points to the now-invalidated</span>", 
"<span class=\"comment\"> * netns.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#kobj_ns_exit\">kobj_ns_exit</a>(enum <a class=\"id\" href=\"#kobj_ns_type\">kobj_ns_type</a> <a class=\"id\" href=\"#type\">type</a>, const void *<a class=\"id\" href=\"#ns\">ns</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysfs_exit_ns\">sysfs_exit_ns</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#ns\">ns</a>);", 
"}", 
"", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#kobject_get\">kobject_get</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#kobject_put\">kobject_put</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#kobject_del\">kobject_del</a>);", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#kset_register\">kset_register</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#kset_unregister\">kset_unregister</a>);", 
];
xr_frag_insert('l/06/4c6104a28da4d7f4cc902055f42f6a3a70203e.xr', __xr_tmp);
