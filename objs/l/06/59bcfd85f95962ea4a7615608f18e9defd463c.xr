var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (C) 1994 Linus Torvalds</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Pentium III FXSR, SSE support</span>", 
"<span class=\"comment\"> * General FPU state handling cleanups</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Gareth Hughes &lt;gareth@valinux.com&gt;, May 2000</span>", 
"<span class=\"comment\"> * x86-64 work by Andi Kleen 2002</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_ASM_X86_I387_H\">_ASM_X86_I387_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_ASM_X86_I387_H\">_ASM_X86_I387_H</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__ASSEMBLY__\">__ASSEMBLY__</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel_stat\">kernel_stat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#regset\">regset</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hardirq\">hardirq</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#asm\">asm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#cpufeature\">cpufeature</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#processor\">processor</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#sigcontext\">sigcontext</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#user\">user</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#xsave\">xsave</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"extern unsigned int <a class=\"id\" href=\"#sig_xstate_size\">sig_xstate_size</a>;", 
"extern void <a class=\"id\" href=\"#fpu_init\">fpu_init</a>(void);", 
"extern void <a class=\"id\" href=\"#mxcsr_feature_mask_init\">mxcsr_feature_mask_init</a>(void);", 
"extern int <a class=\"id\" href=\"#init_fpu\">init_fpu</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#child\">child</a>);", 
"extern <a class=\"id\" href=\"#asmlinkage\">asmlinkage</a> void <a class=\"id\" href=\"#math_state_restore\">math_state_restore</a>(void);", 
"extern void <a class=\"id\" href=\"#__math_state_restore\">__math_state_restore</a>(void);", 
"extern int <a class=\"id\" href=\"#dump_fpu\">dump_fpu</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *, struct <a class=\"id\" href=\"#user_i387_struct\">user_i387_struct</a> *);", 
"", 
"extern <a class=\"id\" href=\"#user_regset_active_fn\">user_regset_active_fn</a> <a class=\"id\" href=\"#fpregs_active\">fpregs_active</a>, <a class=\"id\" href=\"#xfpregs_active\">xfpregs_active</a>;", 
"extern <a class=\"id\" href=\"#user_regset_get_fn\">user_regset_get_fn</a> <a class=\"id\" href=\"#fpregs_get\">fpregs_get</a>, <a class=\"id\" href=\"#xfpregs_get\">xfpregs_get</a>, <a class=\"id\" href=\"#fpregs_soft_get\">fpregs_soft_get</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xstateregs_get\">xstateregs_get</a>;", 
"extern <a class=\"id\" href=\"#user_regset_set_fn\">user_regset_set_fn</a> <a class=\"id\" href=\"#fpregs_set\">fpregs_set</a>, <a class=\"id\" href=\"#xfpregs_set\">xfpregs_set</a>, <a class=\"id\" href=\"#fpregs_soft_set\">fpregs_soft_set</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#xstateregs_set\">xstateregs_set</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * xstateregs_active == fpregs_active. Please refer to the comment</span>", 
"<span class=\"comment\"> * at the definition of fpregs_active.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#xstateregs_active\">xstateregs_active</a><span class=\"ts\"/><a class=\"id\" href=\"#fpregs_active\">fpregs_active</a>", 
"", 
"extern struct <a class=\"id\" href=\"#_fpx_sw_bytes\">_fpx_sw_bytes</a> <a class=\"id\" href=\"#fx_sw_reserved\">fx_sw_reserved</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_IA32_EMULATION\">CONFIG_IA32_EMULATION</a>", 
"extern unsigned int <a class=\"id\" href=\"#sig_xstate_ia32_size\">sig_xstate_ia32_size</a>;", 
"extern struct <a class=\"id\" href=\"#_fpx_sw_bytes\">_fpx_sw_bytes</a> <a class=\"id\" href=\"#fx_sw_reserved_ia32\">fx_sw_reserved_ia32</a>;", 
"struct <a class=\"id\" href=\"#_fpstate_ia32\">_fpstate_ia32</a>;", 
"struct <a class=\"id\" href=\"#_xstate_ia32\">_xstate_ia32</a>;", 
"extern int <a class=\"id\" href=\"#save_i387_xstate_ia32\">save_i387_xstate_ia32</a>(void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>);", 
"extern int <a class=\"id\" href=\"#restore_i387_xstate_ia32\">restore_i387_xstate_ia32</a>(void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#X87_FSW_ES\">X87_FSW_ES</a> (1 << 7)<span class=\"ts\"/><span class=\"comment\">/* Exception Summary */</span>", 
"", 
"static <a class=\"id\" href=\"#__always_inline\">__always_inline</a> <a class=\"id\" href=\"#__pure\">__pure</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#use_xsaveopt\">use_xsaveopt</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#static_cpu_has\">static_cpu_has</a>(<a class=\"id\" href=\"#X86_FEATURE_XSAVEOPT\">X86_FEATURE_XSAVEOPT</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#__always_inline\">__always_inline</a> <a class=\"id\" href=\"#__pure\">__pure</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#use_xsave\">use_xsave</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#static_cpu_has\">static_cpu_has</a>(<a class=\"id\" href=\"#X86_FEATURE_XSAVE\">X86_FEATURE_XSAVE</a>);", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#__sanitize_i387_state\">__sanitize_i387_state</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sanitize_i387_state\">sanitize_i387_state</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#use_xsaveopt\">use_xsaveopt</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__sanitize_i387_state\">__sanitize_i387_state</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"", 
"<span class=\"comment\">/* Ignore delayed exceptions from user space */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tolerant_fwait\">tolerant_fwait</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"1: fwait\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"2:\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#_ASM_EXTABLE\">_ASM_EXTABLE</a>(1<a class=\"id\" href=\"#b\">b</a>, 2<a class=\"id\" href=\"#b\">b</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#fxrstor_checking\">fxrstor_checking</a>(struct <a class=\"id\" href=\"#i387_fxsave_struct\">i387_fxsave_struct</a> *<a class=\"id\" href=\"#fx\">fx</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"1:  rex64/fxrstor (%[fx])\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"2:\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \".section .fixup,\\\"ax\\\"\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"3:  movl $-1,%[err]\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"    jmp  2b\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \".previous\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#_ASM_EXTABLE\">_ASM_EXTABLE</a>(1<a class=\"id\" href=\"#b\">b</a>, 3<a class=\"id\" href=\"#b\">b</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>     : [<a class=\"id\" href=\"#err\">err</a>] \"=r\" (<a class=\"id\" href=\"#err\">err</a>)", 
"#if 0 <span class=\"comment\">/* See comment in fxsave() below. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>     : [<a class=\"id\" href=\"#fx\">fx</a>] \"r\" (<a class=\"id\" href=\"#fx\">fx</a>), \"m\" (*<a class=\"id\" href=\"#fx\">fx</a>), \"0\" (0));", 
"#else", 
"<span class=\"ts\"/><span class=\"ts\"/>     : [<a class=\"id\" href=\"#fx\">fx</a>] \"cdaSDb\" (<a class=\"id\" href=\"#fx\">fx</a>), \"m\" (*<a class=\"id\" href=\"#fx\">fx</a>), \"0\" (0));", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/* AMD CPUs don't save/restore FDP/FIP/FOP unless an exception</span>", 
"<span class=\"comment\">   is pending. Clear the x87 state here by setting it to fixed</span>", 
"<span class=\"comment\">   values. The kernel data segment can be sometimes 0 and sometimes</span>", 
"<span class=\"comment\">   new user value. Both should be ok.</span>", 
"<span class=\"comment\">   Use the PDA as safe address because it should be already in L1. */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#fpu_clear\">fpu_clear</a>(struct <a class=\"id\" href=\"#fpu\">fpu</a> *<a class=\"id\" href=\"#fpu\">fpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#xsave_struct\">xsave_struct</a> *<a class=\"id\" href=\"#xstate\">xstate</a> = &amp;<a class=\"id\" href=\"#fpu\">fpu</a>-><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#xsave\">xsave</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#i387_fxsave_struct\">i387_fxsave_struct</a> *<a class=\"id\" href=\"#fx\">fx</a> = &amp;<a class=\"id\" href=\"#fpu\">fpu</a>-><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#fxsave\">fxsave</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * xsave header may indicate the init state of the FP.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#use_xsave\">use_xsave</a>() &&", 
"<span class=\"ts\"/>    !(<a class=\"id\" href=\"#xstate\">xstate</a>-><a class=\"id\" href=\"#xsave_hdr\">xsave_hdr</a>.<a class=\"id\" href=\"#xstate_bv\">xstate_bv</a> &amp; <a class=\"id\" href=\"#XSTATE_FP\">XSTATE_FP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#fx\">fx</a>-><a class=\"id\" href=\"#swd\">swd</a> &amp; <a class=\"id\" href=\"#X87_FSW_ES\">X87_FSW_ES</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"fnclex\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alternative_input\">alternative_input</a>(<a class=\"id\" href=\"#ASM_NOP8\">ASM_NOP8</a> <a class=\"id\" href=\"#ASM_NOP2\">ASM_NOP2</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"    emms\\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* clear stack tags */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"    fildl %%gs:0\",<span class=\"ts\"/><span class=\"comment\">/* load to clear state */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#X86_FEATURE_FXSAVE_LEAK\">X86_FEATURE_FXSAVE_LEAK</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#clear_fpu_state\">clear_fpu_state</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fpu_clear\">fpu_clear</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#fpu\">fpu</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#fxsave_user\">fxsave_user</a>(struct <a class=\"id\" href=\"#i387_fxsave_struct\">i387_fxsave_struct</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#fx\">fx</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Clear the bytes not touched by the fxsave and reserved</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for the SW usage.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#__clear_user\">__clear_user</a>(&amp;<a class=\"id\" href=\"#fx\">fx</a>-><a class=\"id\" href=\"#sw_reserved\">sw_reserved</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   sizeof(struct <a class=\"id\" href=\"#_fpx_sw_bytes\">_fpx_sw_bytes</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#err\">err</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"1:  rex64/fxsave (%[fx])\\n\\t\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"2:\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \".section .fixup,\\\"ax\\\"\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"3:  movl $-1,%[err]\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"    jmp  2b\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \".previous\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#_ASM_EXTABLE\">_ASM_EXTABLE</a>(1<a class=\"id\" href=\"#b\">b</a>, 3<a class=\"id\" href=\"#b\">b</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>     : [<a class=\"id\" href=\"#err\">err</a>] \"=r\" (<a class=\"id\" href=\"#err\">err</a>), \"=m\" (*<a class=\"id\" href=\"#fx\">fx</a>)", 
"#if 0 <span class=\"comment\">/* See comment in fxsave() below. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>     : [<a class=\"id\" href=\"#fx\">fx</a>] \"r\" (<a class=\"id\" href=\"#fx\">fx</a>), \"0\" (0));", 
"#else", 
"<span class=\"ts\"/><span class=\"ts\"/>     : [<a class=\"id\" href=\"#fx\">fx</a>] \"cdaSDb\" (<a class=\"id\" href=\"#fx\">fx</a>), \"0\" (0));", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#err\">err</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#__clear_user\">__clear_user</a>(<a class=\"id\" href=\"#fx\">fx</a>, sizeof(struct <a class=\"id\" href=\"#i387_fxsave_struct\">i387_fxsave_struct</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* No need to clear here because the caller clears USED_MATH */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#fpu_fxsave\">fpu_fxsave</a>(struct <a class=\"id\" href=\"#fpu\">fpu</a> *<a class=\"id\" href=\"#fpu\">fpu</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Using \"rex64; fxsave %0\" is broken because, if the memory operand</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   uses any extended registers for addressing, a second REX prefix</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   will be generated (to the assembler, rex64 followed by semicolon</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   is a separate instruction), and hence the 64-bitness is lost. */</span>", 
"#if 0", 
"<span class=\"ts\"/><span class=\"comment\">/* Using \"fxsaveq %0\" would be the ideal choice, but is only supported</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   starting with gas 2.16. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__asm__\">__asm__</a> <a class=\"id\" href=\"#__volatile__\">__volatile__</a>(\"fxsaveq %0\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     : \"=m\" (<a class=\"id\" href=\"#fpu\">fpu</a>-><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#fxsave\">fxsave</a>));", 
"#<a class=\"id\" href=\"#elif\">elif</a> 0", 
"<span class=\"ts\"/><span class=\"comment\">/* Using, as a workaround, the properly prefixed form below isn't</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   accepted by any binutils version so far released, complaining that</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   the same type of prefix is used twice if an extended register is</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   needed for addressing (fix submitted to mainline 2005-11-21). */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__asm__\">__asm__</a> <a class=\"id\" href=\"#__volatile__\">__volatile__</a>(\"rex64/fxsave %0\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     : \"=m\" (<a class=\"id\" href=\"#fpu\">fpu</a>-><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#fxsave\">fxsave</a>));", 
"#else", 
"<span class=\"ts\"/><span class=\"comment\">/* This, however, we can work around by forcing the compiler to select</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   an addressing mode that doesn't require extended registers. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__asm__\">__asm__</a> <a class=\"id\" href=\"#__volatile__\">__volatile__</a>(\"rex64/fxsave (%1)\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     : \"=m\" (<a class=\"id\" href=\"#fpu\">fpu</a>-><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#fxsave\">fxsave</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     : \"cdaSDb\" (&amp;<a class=\"id\" href=\"#fpu\">fpu</a>-><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#fxsave\">fxsave</a>));", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#fpu_save_init\">fpu_save_init</a>(struct <a class=\"id\" href=\"#fpu\">fpu</a> *<a class=\"id\" href=\"#fpu\">fpu</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#use_xsave\">use_xsave</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fpu_xsave\">fpu_xsave</a>(<a class=\"id\" href=\"#fpu\">fpu</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fpu_fxsave\">fpu_fxsave</a>(<a class=\"id\" href=\"#fpu\">fpu</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fpu_clear\">fpu_clear</a>(<a class=\"id\" href=\"#fpu\">fpu</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__save_init_fpu\">__save_init_fpu</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fpu_save_init\">fpu_save_init</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#fpu\">fpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_thread_info\">task_thread_info</a>(<a class=\"id\" href=\"#tsk\">tsk</a>)-><a class=\"id\" href=\"#status\">status</a> &= ~<a class=\"id\" href=\"#TS_USEDFPU\">TS_USEDFPU</a>;", 
"}", 
"", 
"#else  <span class=\"comment\">/* CONFIG_X86_32 */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MATH_EMULATION\">CONFIG_MATH_EMULATION</a>", 
"extern void <a class=\"id\" href=\"#finit_soft_fpu\">finit_soft_fpu</a>(struct <a class=\"id\" href=\"#i387_soft_struct\">i387_soft_struct</a> *<a class=\"id\" href=\"#soft\">soft</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#finit_soft_fpu\">finit_soft_fpu</a>(struct <a class=\"id\" href=\"#i387_soft_struct\">i387_soft_struct</a> *<a class=\"id\" href=\"#soft\">soft</a>) {}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tolerant_fwait\">tolerant_fwait</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"fnclex ; fwait\");", 
"}", 
"", 
"<span class=\"comment\">/* perform fxrstor iff the processor has extended states, otherwise frstor */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#fxrstor_checking\">fxrstor_checking</a>(struct <a class=\"id\" href=\"#i387_fxsave_struct\">i387_fxsave_struct</a> *<a class=\"id\" href=\"#fx\">fx</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The \"nop\" is needed to make the instructions the same</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * length.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alternative_input\">alternative_input</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/>\"nop ; frstor %1\",", 
"<span class=\"ts\"/><span class=\"ts\"/>\"fxrstor %1\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#X86_FEATURE_FXSR\">X86_FEATURE_FXSR</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>\"m\" (*<a class=\"id\" href=\"#fx\">fx</a>));", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* We need a safe address that is cheap to find and that is already</span>", 
"<span class=\"comment\">   in L1 during context switch. The best choices are unfortunately</span>", 
"<span class=\"comment\">   different for UP and SMP */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#safe_address\">safe_address</a> (<a class=\"id\" href=\"#__per_cpu_offset\">__per_cpu_offset</a>[0])", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#safe_address\">safe_address</a> (<a class=\"id\" href=\"#kstat_cpu\">kstat_cpu</a>(0).<a class=\"id\" href=\"#cpustat\">cpustat</a>.<a class=\"id\" href=\"#user\">user</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * These must be called with preempt disabled</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#fpu_save_init\">fpu_save_init</a>(struct <a class=\"id\" href=\"#fpu\">fpu</a> *<a class=\"id\" href=\"#fpu\">fpu</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#use_xsave\">use_xsave</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#xsave_struct\">xsave_struct</a> *<a class=\"id\" href=\"#xstate\">xstate</a> = &amp;<a class=\"id\" href=\"#fpu\">fpu</a>-><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#xsave\">xsave</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#i387_fxsave_struct\">i387_fxsave_struct</a> *<a class=\"id\" href=\"#fx\">fx</a> = &amp;<a class=\"id\" href=\"#fpu\">fpu</a>-><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#fxsave\">fxsave</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fpu_xsave\">fpu_xsave</a>(<a class=\"id\" href=\"#fpu\">fpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * xsave header may indicate the init state of the FP.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#xstate\">xstate</a>-><a class=\"id\" href=\"#xsave_hdr\">xsave_hdr</a>.<a class=\"id\" href=\"#xstate_bv\">xstate_bv</a> &amp; <a class=\"id\" href=\"#XSTATE_FP\">XSTATE_FP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#fx\">fx</a>-><a class=\"id\" href=\"#swd\">swd</a> &amp; <a class=\"id\" href=\"#X87_FSW_ES\">X87_FSW_ES</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"fnclex\");", 
];
xr_frag_insert('l/06/59bcfd85f95962ea4a7615608f18e9defd463c.xr', __xr_tmp);
