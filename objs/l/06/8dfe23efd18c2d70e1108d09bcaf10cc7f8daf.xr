var __xr_tmp = [
"<span class=\"ts\"/><a class=\"id\" href=\"#required_length\">required_length</a> = <a class=\"id\" href=\"#prefix_length\">prefix_length</a> + (4 * <a class=\"id\" href=\"#num_segments\">num_segments</a>) +", 
"<span class=\"ts\"/>    ((<a class=\"id\" href=\"#num_segments\">num_segments</a> &gt; 0) ? (<a class=\"id\" href=\"#num_segments\">num_segments</a> - 1) : 0) + 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check to see if we're still in bounds.  If not, there's a problem</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * with internal_name (invalid format).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#required_length\">required_length</a> &gt; <a class=\"id\" href=\"#internal_name_length\">internal_name_length</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, \"Invalid internal name\"));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_BAD_PATHNAME\">AE_BAD_PATHNAME</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Build the converted_name */</span>", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#converted_name\">converted_name</a> = <a class=\"id\" href=\"#ACPI_ALLOCATE_ZEROED\">ACPI_ALLOCATE_ZEROED</a>(<a class=\"id\" href=\"#required_length\">required_length</a>);", 
"<span class=\"ts\"/>if (!(*<a class=\"id\" href=\"#converted_name\">converted_name</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_NO_MEMORY\">AE_NO_MEMORY</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#j\">j</a> = 0;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#prefix_length\">prefix_length</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#converted_name\">converted_name</a>)[<a class=\"id\" href=\"#j\">j</a>++] = <a class=\"id\" href=\"#internal_name\">internal_name</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#num_segments\">num_segments</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#num_segments\">num_segments</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#converted_name\">converted_name</a>)[<a class=\"id\" href=\"#j\">j</a>++] = '.';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#converted_name\">converted_name</a>)[<a class=\"id\" href=\"#j\">j</a>++] = <a class=\"id\" href=\"#internal_name\">internal_name</a>[<a class=\"id\" href=\"#names_index\">names_index</a>++];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#converted_name\">converted_name</a>)[<a class=\"id\" href=\"#j\">j</a>++] = <a class=\"id\" href=\"#internal_name\">internal_name</a>[<a class=\"id\" href=\"#names_index\">names_index</a>++];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#converted_name\">converted_name</a>)[<a class=\"id\" href=\"#j\">j</a>++] = <a class=\"id\" href=\"#internal_name\">internal_name</a>[<a class=\"id\" href=\"#names_index\">names_index</a>++];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#converted_name\">converted_name</a>)[<a class=\"id\" href=\"#j\">j</a>++] = <a class=\"id\" href=\"#internal_name\">internal_name</a>[<a class=\"id\" href=\"#names_index\">names_index</a>++];", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#converted_name_length\">converted_name_length</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#converted_name_length\">converted_name_length</a> = (<a class=\"id\" href=\"#u32\">u32</a>) <a class=\"id\" href=\"#required_length\">required_length</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ns_validate_handle</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Handle          - Handle to be validated and typecast to a</span>", 
"<span class=\"comment\"> *                                namespace node.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      A pointer to a namespace node</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Convert a namespace handle to a namespace node. Handles special</span>", 
"<span class=\"comment\"> *              cases for the root node.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE: Real integer handles would allow for more verification</span>", 
"<span class=\"comment\"> *       and keep all pointers within this subsystem - however this introduces</span>", 
"<span class=\"comment\"> *       more overhead and has not been necessary to this point. Drivers</span>", 
"<span class=\"comment\"> *       holding handles are typically notified before a node becomes invalid</span>", 
"<span class=\"comment\"> *       due to a table unload.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> *<a class=\"id\" href=\"#acpi_ns_validate_handle\">acpi_ns_validate_handle</a>(<a class=\"id\" href=\"#acpi_handle\">acpi_handle</a> <a class=\"id\" href=\"#handle\">handle</a>)", 
"{", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_ENTRY\">ACPI_FUNCTION_ENTRY</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Parameter validation */</span>", 
"", 
"<span class=\"ts\"/>if ((!<a class=\"id\" href=\"#handle\">handle</a>) || (<a class=\"id\" href=\"#handle\">handle</a> == <a class=\"id\" href=\"#ACPI_ROOT_OBJECT\">ACPI_ROOT_OBJECT</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#acpi_gbl_root_node\">acpi_gbl_root_node</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We can at least attempt to verify the handle */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_GET_DESCRIPTOR_TYPE\">ACPI_GET_DESCRIPTOR_TYPE</a>(<a class=\"id\" href=\"#handle\">handle</a>) != <a class=\"id\" href=\"#ACPI_DESC_TYPE_NAMED\">ACPI_DESC_TYPE_NAMED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#ACPI_CAST_PTR\">ACPI_CAST_PTR</a>(struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a>, <a class=\"id\" href=\"#handle\">handle</a>));", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ns_terminate</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  none</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      none</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: free memory allocated for namespace and ACPI table storage.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"void <a class=\"id\" href=\"#acpi_ns_terminate\">acpi_ns_terminate</a>(void)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#obj_desc\">obj_desc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ns_terminate\">ns_terminate</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 1) Free the entire namespace -- all nodes and objects</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Delete all object descriptors attached to namepsace nodes</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_ns_delete_namespace_subtree\">acpi_ns_delete_namespace_subtree</a>(<a class=\"id\" href=\"#acpi_gbl_root_node\">acpi_gbl_root_node</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Detach any objects attached to the root */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#obj_desc\">obj_desc</a> = <a class=\"id\" href=\"#acpi_ns_get_attached_object\">acpi_ns_get_attached_object</a>(<a class=\"id\" href=\"#acpi_gbl_root_node\">acpi_gbl_root_node</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#obj_desc\">obj_desc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ns_detach_object\">acpi_ns_detach_object</a>(<a class=\"id\" href=\"#acpi_gbl_root_node\">acpi_gbl_root_node</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_INFO\">ACPI_DB_INFO</a>, \"Namespace freed\\n\"));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_VOID\">return_VOID</a>;", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ns_opens_scope</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Type        - A valid namespace type</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      NEWSCOPE if the passed type \"opens a name scope\" according</span>", 
"<span class=\"comment\"> *              to the ACPI specification, else 0</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#acpi_ns_opens_scope\">acpi_ns_opens_scope</a>(<a class=\"id\" href=\"#acpi_object_type\">acpi_object_type</a> <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE_STR\">ACPI_FUNCTION_TRACE_STR</a>(<a class=\"id\" href=\"#ns_opens_scope\">ns_opens_scope</a>, <a class=\"id\" href=\"#acpi_ut_get_type_name\">acpi_ut_get_type_name</a>(<a class=\"id\" href=\"#type\">type</a>));", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#acpi_ut_valid_object_type\">acpi_ut_valid_object_type</a>(<a class=\"id\" href=\"#type\">type</a>)) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* type code out of range  */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_WARNING\">ACPI_WARNING</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, \"Invalid Object Type 0x%X\", <a class=\"id\" href=\"#type\">type</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_UINT32\">return_UINT32</a>(<a class=\"id\" href=\"#ACPI_NS_NORMAL\">ACPI_NS_NORMAL</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_UINT32\">return_UINT32</a>(((<a class=\"id\" href=\"#u32\">u32</a>) <a class=\"id\" href=\"#acpi_gbl_ns_properties\">acpi_gbl_ns_properties</a>[<a class=\"id\" href=\"#type\">type</a>]) &amp; <a class=\"id\" href=\"#ACPI_NS_NEWSCOPE\">ACPI_NS_NEWSCOPE</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ns_get_node</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  *Pathname   - Name to be found, in external (ASL) format. The</span>", 
"<span class=\"comment\"> *                            \\ (backslash) and ^ (carat) prefixes, and the</span>", 
"<span class=\"comment\"> *                            . (period) to separate segments are supported.</span>", 
"<span class=\"comment\"> *              prefix_node  - Root of subtree to be searched, or NS_ALL for the</span>", 
"<span class=\"comment\"> *                            root of the name space.  If Name is fully</span>", 
"<span class=\"comment\"> *                            qualified (first s8 is '\\'), the passed value</span>", 
"<span class=\"comment\"> *                            of Scope will not be accessed.</span>", 
"<span class=\"comment\"> *              Flags       - Used to indicate whether to perform upsearch or</span>", 
"<span class=\"comment\"> *                            not.</span>", 
"<span class=\"comment\"> *              return_node - Where the Node is returned</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Look up a name relative to a given scope and return the</span>", 
"<span class=\"comment\"> *              corresponding Node.  NOTE: Scope can be null.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * MUTEX:       Locks namespace</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ns_get_node\">acpi_ns_get_node</a>(struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> *<a class=\"id\" href=\"#prefix_node\">prefix_node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> const char *<a class=\"id\" href=\"#pathname\">pathname</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#flags\">flags</a>, struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> **<a class=\"id\" href=\"#return_node\">return_node</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_generic_state\">acpi_generic_state</a> <a class=\"id\" href=\"#scope_info\">scope_info</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#internal_path\">internal_path</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE_PTR\">ACPI_FUNCTION_TRACE_PTR</a>(<a class=\"id\" href=\"#ns_get_node\">ns_get_node</a>, <a class=\"id\" href=\"#ACPI_CAST_PTR\">ACPI_CAST_PTR</a>(char, <a class=\"id\" href=\"#pathname\">pathname</a>));", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pathname\">pathname</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#return_node\">return_node</a> = <a class=\"id\" href=\"#prefix_node\">prefix_node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#prefix_node\">prefix_node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#return_node\">return_node</a> = <a class=\"id\" href=\"#acpi_gbl_root_node\">acpi_gbl_root_node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Convert path to internal representation */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ns_internalize_name\">acpi_ns_internalize_name</a>(<a class=\"id\" href=\"#pathname\">pathname</a>, &amp;<a class=\"id\" href=\"#internal_path\">internal_path</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Must lock namespace during lookup */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ut_acquire_mutex\">acpi_ut_acquire_mutex</a>(<a class=\"id\" href=\"#ACPI_MTX_NAMESPACE\">ACPI_MTX_NAMESPACE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup\">cleanup</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Setup lookup scope (search starting point) */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scope_info\">scope_info</a>.<a class=\"id\" href=\"#scope\">scope</a>.<a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#prefix_node\">prefix_node</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Lookup the name in the namespace */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ns_lookup\">acpi_ns_lookup</a>(&amp;<a class=\"id\" href=\"#scope_info\">scope_info</a>, <a class=\"id\" href=\"#internal_path\">internal_path</a>, <a class=\"id\" href=\"#ACPI_TYPE_ANY\">ACPI_TYPE_ANY</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_IMODE_EXECUTE\">ACPI_IMODE_EXECUTE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#flags\">flags</a> | <a class=\"id\" href=\"#ACPI_NS_DONT_OPEN_SCOPE\">ACPI_NS_DONT_OPEN_SCOPE</a>), <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_node\">return_node</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_EXEC\">ACPI_DB_EXEC</a>, \"%s, %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#pathname\">pathname</a>, <a class=\"id\" href=\"#acpi_format_exception\">acpi_format_exception</a>(<a class=\"id\" href=\"#status\">status</a>)));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>(void)<a class=\"id\" href=\"#acpi_ut_release_mutex\">acpi_ut_release_mutex</a>(<a class=\"id\" href=\"#ACPI_MTX_NAMESPACE\">ACPI_MTX_NAMESPACE</a>);", 
"", 
"      <a class=\"id\" href=\"#cleanup\">cleanup</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FREE\">ACPI_FREE</a>(<a class=\"id\" href=\"#internal_path\">internal_path</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
];
xr_frag_insert('l/06/8dfe23efd18c2d70e1108d09bcaf10cc7f8daf.xr', __xr_tmp);
