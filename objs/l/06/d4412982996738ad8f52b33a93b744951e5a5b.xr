var __xr_tmp = [
"<span class=\"ts\"/>int <a class=\"id\" href=\"#mask_len\">mask_len</a> = <a class=\"id\" href=\"#DIV_ROUND_UP\">DIV_ROUND_UP</a>(<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>, 32) * 9;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#mask_str\">mask_str</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#mask_len\">mask_len</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mask_str\">mask_str</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#seq\">seq</a>, \"version %d\\n\", <a class=\"id\" href=\"#SCHEDSTAT_VERSION\">SCHEDSTAT_VERSION</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#seq\">seq</a>, \"timestamp %lu\\n\", <a class=\"id\" href=\"#jiffies\">jiffies</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#dcount\">dcount</a> = 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* runqueue-specific stats */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#seq\">seq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    \"cpu%d %u %u %u %u %u %u %llu %llu %lu\",", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#yld_count\">yld_count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#sched_switch\">sched_switch</a>, <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#sched_count\">sched_count</a>, <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#sched_goidle\">sched_goidle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#ttwu_count\">ttwu_count</a>, <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#ttwu_local\">ttwu_local</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rq_cpu_time\">rq_cpu_time</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rq_sched_info\">rq_sched_info</a>.<a class=\"id\" href=\"#run_delay\">run_delay</a>, <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rq_sched_info\">rq_sched_info</a>.<a class=\"id\" href=\"#pcount\">pcount</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#seq\">seq</a>, \"\\n\");", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* domain-specific stats */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_domain\">for_each_domain</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#sd\">sd</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#cpu_idle_type\">cpu_idle_type</a> <a class=\"id\" href=\"#itype\">itype</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_scnprintf\">cpumask_scnprintf</a>(<a class=\"id\" href=\"#mask_str\">mask_str</a>, <a class=\"id\" href=\"#mask_len\">mask_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#sched_domain_span\">sched_domain_span</a>(<a class=\"id\" href=\"#sd\">sd</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#seq\">seq</a>, \"domain%d %s\", <a class=\"id\" href=\"#dcount\">dcount</a>++, <a class=\"id\" href=\"#mask_str\">mask_str</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#itype\">itype</a> = <a class=\"id\" href=\"#CPU_IDLE\">CPU_IDLE</a>; <a class=\"id\" href=\"#itype\">itype</a> &lt; <a class=\"id\" href=\"#CPU_MAX_IDLE_TYPES\">CPU_MAX_IDLE_TYPES</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#itype\">itype</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#seq\">seq</a>, \" %u %u %u %u %u %u %u %u\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#lb_count\">lb_count</a>[<a class=\"id\" href=\"#itype\">itype</a>],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#lb_balanced\">lb_balanced</a>[<a class=\"id\" href=\"#itype\">itype</a>],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#lb_failed\">lb_failed</a>[<a class=\"id\" href=\"#itype\">itype</a>],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#lb_imbalance\">lb_imbalance</a>[<a class=\"id\" href=\"#itype\">itype</a>],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#lb_gained\">lb_gained</a>[<a class=\"id\" href=\"#itype\">itype</a>],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#lb_hot_gained\">lb_hot_gained</a>[<a class=\"id\" href=\"#itype\">itype</a>],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#lb_nobusyq\">lb_nobusyq</a>[<a class=\"id\" href=\"#itype\">itype</a>],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#lb_nobusyg\">lb_nobusyg</a>[<a class=\"id\" href=\"#itype\">itype</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#seq\">seq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \" %u %u %u %u %u %u %u %u %u %u %u %u\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#alb_count\">alb_count</a>, <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#alb_failed\">alb_failed</a>, <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#alb_pushed\">alb_pushed</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#sbe_count\">sbe_count</a>, <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#sbe_balanced\">sbe_balanced</a>, <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#sbe_pushed\">sbe_pushed</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#sbf_count\">sbf_count</a>, <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#sbf_balanced\">sbf_balanced</a>, <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#sbf_pushed\">sbf_pushed</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#ttwu_wake_remote\">ttwu_wake_remote</a>, <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#ttwu_move_affine\">ttwu_move_affine</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#ttwu_move_balance\">ttwu_move_balance</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#mask_str\">mask_str</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#schedstat_open\">schedstat_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> * (1 + <a class=\"id\" href=\"#num_online_cpus\">num_online_cpus</a>() / 32);", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buf\">buf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#single_open\">single_open</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#show_schedstat\">show_schedstat</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#res\">res</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#proc_schedstat_operations\">proc_schedstat_operations</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a>    = <a class=\"id\" href=\"#schedstat_open\">schedstat_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a>    = <a class=\"id\" href=\"#seq_read\">seq_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a>  = <a class=\"id\" href=\"#seq_lseek\">seq_lseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a> = <a class=\"id\" href=\"#single_release\">single_release</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#proc_schedstat_init\">proc_schedstat_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proc_create\">proc_create</a>(\"schedstat\", 0, <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#proc_schedstat_operations\">proc_schedstat_operations</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#module_init\">module_init</a>(<a class=\"id\" href=\"#proc_schedstat_init\">proc_schedstat_init</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Expects runqueue lock to be held for atomicity of update</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#rq_sched_info_arrive\">rq_sched_info_arrive</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, unsigned long long <a class=\"id\" href=\"#delta\">delta</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rq\">rq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rq_sched_info\">rq_sched_info</a>.<a class=\"id\" href=\"#run_delay\">run_delay</a> += <a class=\"id\" href=\"#delta\">delta</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rq_sched_info\">rq_sched_info</a>.<a class=\"id\" href=\"#pcount\">pcount</a>++;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Expects runqueue lock to be held for atomicity of update</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#rq_sched_info_depart\">rq_sched_info_depart</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, unsigned long long <a class=\"id\" href=\"#delta\">delta</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rq\">rq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rq_cpu_time\">rq_cpu_time</a> += <a class=\"id\" href=\"#delta\">delta</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#rq_sched_info_dequeued\">rq_sched_info_dequeued</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, unsigned long long <a class=\"id\" href=\"#delta\">delta</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rq\">rq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rq_sched_info\">rq_sched_info</a>.<a class=\"id\" href=\"#run_delay\">run_delay</a> += <a class=\"id\" href=\"#delta\">delta</a>;", 
"}", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#schedstat_inc\">schedstat_inc</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#field\">field</a>)<span class=\"ts\"/>do { (<a class=\"id\" href=\"#rq\">rq</a>)-><a class=\"id\" href=\"#field\">field</a>++; } while (0)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#schedstat_add\">schedstat_add</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#field\">field</a>, <a class=\"id\" href=\"#amt\">amt</a>)<span class=\"ts\"/>do { (<a class=\"id\" href=\"#rq\">rq</a>)-><a class=\"id\" href=\"#field\">field</a> += (<a class=\"id\" href=\"#amt\">amt</a>); } while (0)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#schedstat_set\">schedstat_set</a>(<a class=\"id\" href=\"#var\">var</a>, <a class=\"id\" href=\"#val\">val</a>)<span class=\"ts\"/>do { <a class=\"id\" href=\"#var\">var</a> = (<a class=\"id\" href=\"#val\">val</a>); } while (0)", 
"#else <span class=\"comment\">/* !CONFIG_SCHEDSTATS */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#rq_sched_info_arrive\">rq_sched_info_arrive</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, unsigned long long <a class=\"id\" href=\"#delta\">delta</a>)", 
"{}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#rq_sched_info_dequeued\">rq_sched_info_dequeued</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, unsigned long long <a class=\"id\" href=\"#delta\">delta</a>)", 
"{}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#rq_sched_info_depart\">rq_sched_info_depart</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, unsigned long long <a class=\"id\" href=\"#delta\">delta</a>)", 
"{}", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#schedstat_inc\">schedstat_inc</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#field\">field</a>)<span class=\"ts\"/>do { } while (0)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#schedstat_add\">schedstat_add</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#field\">field</a>, <a class=\"id\" href=\"#amt\">amt</a>)<span class=\"ts\"/>do { } while (0)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#schedstat_set\">schedstat_set</a>(<a class=\"id\" href=\"#var\">var</a>, <a class=\"id\" href=\"#val\">val</a>)<span class=\"ts\"/>do { } while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SCHEDSTATS\">CONFIG_SCHEDSTATS</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_TASK_DELAY_ACCT\">CONFIG_TASK_DELAY_ACCT</a>)", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sched_info_reset_dequeued\">sched_info_reset_dequeued</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#sched_info\">sched_info</a>.<a class=\"id\" href=\"#last_queued\">last_queued</a> = 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called when a process is dequeued from the active array and given</span>", 
"<span class=\"comment\"> * the cpu.  We should note that with the exception of interactive</span>", 
"<span class=\"comment\"> * tasks, the expired queue will become the active queue after the active</span>", 
"<span class=\"comment\"> * queue is empty, without explicitly dequeuing and requeuing tasks in the</span>", 
"<span class=\"comment\"> * expired queue.  (Interactive tasks may be requeued directly to the</span>", 
"<span class=\"comment\"> * active queue, thus delaying tasks in the expired queue from running;</span>", 
"<span class=\"comment\"> * see scheduler_tick()).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Though we are interested in knowing how long it was from the *first* time a</span>", 
"<span class=\"comment\"> * task was queued to the time that it finally hit a cpu, we call this routine</span>", 
"<span class=\"comment\"> * from dequeue_task() to account for possible rq-&gt;clock skew across cpus. The</span>", 
"<span class=\"comment\"> * delta taken on each cpu would annul the skew.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sched_info_dequeued\">sched_info_dequeued</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#task_rq\">task_rq</a>(<a class=\"id\" href=\"#t\">t</a>)-><a class=\"id\" href=\"#clock\">clock</a>, <a class=\"id\" href=\"#delta\">delta</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#sched_info_on\">sched_info_on</a>()))", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#sched_info\">sched_info</a>.<a class=\"id\" href=\"#last_queued\">last_queued</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#now\">now</a> - <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#sched_info\">sched_info</a>.<a class=\"id\" href=\"#last_queued\">last_queued</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sched_info_reset_dequeued\">sched_info_reset_dequeued</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#sched_info\">sched_info</a>.<a class=\"id\" href=\"#run_delay\">run_delay</a> += <a class=\"id\" href=\"#delta\">delta</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq_sched_info_dequeued\">rq_sched_info_dequeued</a>(<a class=\"id\" href=\"#task_rq\">task_rq</a>(<a class=\"id\" href=\"#t\">t</a>), <a class=\"id\" href=\"#delta\">delta</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called when a task finally hits the cpu.  We can now calculate how</span>", 
"<span class=\"comment\"> * long it was waiting to run.  We also note when it began so that we</span>", 
"<span class=\"comment\"> * can keep stats on how long its timeslice is.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#sched_info_arrive\">sched_info_arrive</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#task_rq\">task_rq</a>(<a class=\"id\" href=\"#t\">t</a>)-><a class=\"id\" href=\"#clock\">clock</a>, <a class=\"id\" href=\"#delta\">delta</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#sched_info\">sched_info</a>.<a class=\"id\" href=\"#last_queued\">last_queued</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#now\">now</a> - <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#sched_info\">sched_info</a>.<a class=\"id\" href=\"#last_queued\">last_queued</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sched_info_reset_dequeued\">sched_info_reset_dequeued</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#sched_info\">sched_info</a>.<a class=\"id\" href=\"#run_delay\">run_delay</a> += <a class=\"id\" href=\"#delta\">delta</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#sched_info\">sched_info</a>.<a class=\"id\" href=\"#last_arrival\">last_arrival</a> = <a class=\"id\" href=\"#now\">now</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#sched_info\">sched_info</a>.<a class=\"id\" href=\"#pcount\">pcount</a>++;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq_sched_info_arrive\">rq_sched_info_arrive</a>(<a class=\"id\" href=\"#task_rq\">task_rq</a>(<a class=\"id\" href=\"#t\">t</a>), <a class=\"id\" href=\"#delta\">delta</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called when a process is queued into either the active or expired</span>", 
"<span class=\"comment\"> * array.  The time is noted and later used to determine how long we</span>", 
"<span class=\"comment\"> * had to wait for us to reach the cpu.  Since the expired queue will</span>", 
"<span class=\"comment\"> * become the active queue after active queue is empty, without dequeuing</span>", 
"<span class=\"comment\"> * and requeuing any tasks, we are interested in queuing to either. It</span>", 
"<span class=\"comment\"> * is unusual but not impossible for tasks to be dequeued and immediately</span>", 
"<span class=\"comment\"> * requeued in the same or another array: this can happen in sched_yield(),</span>", 
"<span class=\"comment\"> * set_user_nice(), and even load_balance() as it moves tasks from runqueue</span>", 
"<span class=\"comment\"> * to runqueue.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is only called from enqueue_task(), but also only updates</span>", 
"<span class=\"comment\"> * the timestamp if it is already not set.  It's assumed that</span>", 
"<span class=\"comment\"> * sched_info_dequeued() will clear that stamp when appropriate.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sched_info_queued\">sched_info_queued</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#sched_info_on\">sched_info_on</a>()))", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#sched_info\">sched_info</a>.<a class=\"id\" href=\"#last_queued\">last_queued</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#sched_info\">sched_info</a>.<a class=\"id\" href=\"#last_queued\">last_queued</a> = <a class=\"id\" href=\"#task_rq\">task_rq</a>(<a class=\"id\" href=\"#t\">t</a>)-><a class=\"id\" href=\"#clock\">clock</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called when a process ceases being the active-running process, either</span>", 
"<span class=\"comment\"> * voluntarily or involuntarily.  Now we can calculate how long we ran.</span>", 
"<span class=\"comment\"> * Also, if the process is still in the TASK_RUNNING state, call</span>", 
"<span class=\"comment\"> * sched_info_queued() to mark that it has now again started waiting on</span>", 
"<span class=\"comment\"> * the runqueue.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sched_info_depart\">sched_info_depart</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#task_rq\">task_rq</a>(<a class=\"id\" href=\"#t\">t</a>)-><a class=\"id\" href=\"#clock\">clock</a> -", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#sched_info\">sched_info</a>.<a class=\"id\" href=\"#last_arrival\">last_arrival</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq_sched_info_depart\">rq_sched_info_depart</a>(<a class=\"id\" href=\"#task_rq\">task_rq</a>(<a class=\"id\" href=\"#t\">t</a>), <a class=\"id\" href=\"#delta\">delta</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sched_info_queued\">sched_info_queued</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called when tasks are switched involuntarily due, typically, to expiring</span>", 
"<span class=\"comment\"> * their time slice.  (This may also be called when switching to or from</span>", 
"<span class=\"comment\"> * the idle task.)  We are only called when prev != next.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#__sched_info_switch\">__sched_info_switch</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#prev\">prev</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#next\">next</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#task_rq\">task_rq</a>(<a class=\"id\" href=\"#prev\">prev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * prev now departs the cpu.  It's not interesting to record</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * stats about how efficient we were at scheduling the idle</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * process, however.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prev\">prev</a> != <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#idle\">idle</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sched_info_depart\">sched_info_depart</a>(<a class=\"id\" href=\"#prev\">prev</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#next\">next</a> != <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#idle\">idle</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sched_info_arrive\">sched_info_arrive</a>(<a class=\"id\" href=\"#next\">next</a>);", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#sched_info_switch\">sched_info_switch</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#prev\">prev</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#next\">next</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#sched_info_on\">sched_info_on</a>()))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__sched_info_switch\">__sched_info_switch</a>(<a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#next\">next</a>);", 
"}", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#sched_info_queued\">sched_info_queued</a>(<a class=\"id\" href=\"#t\">t</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>do { } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#sched_info_reset_dequeued\">sched_info_reset_dequeued</a>(<a class=\"id\" href=\"#t\">t</a>)<span class=\"ts\"/>do { } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#sched_info_dequeued\">sched_info_dequeued</a>(<a class=\"id\" href=\"#t\">t</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>do { } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#sched_info_switch\">sched_info_switch</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#next\">next</a>)<span class=\"ts\"/><span class=\"ts\"/>do { } while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SCHEDSTATS || CONFIG_TASK_DELAY_ACCT */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The following are functions that support scheduler-internal time accounting.</span>", 
"<span class=\"comment\"> * These functions are generally called at the timer tick.  None of this depends</span>", 
"<span class=\"comment\"> * on CONFIG_SCHEDSTATS.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * account_group_user_time - Maintain utime for a thread group.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @tsk:<span class=\"ts\"/>Pointer to task structure.</span>", 
"<span class=\"comment\"> * @cputime:<span class=\"ts\"/>Time value by which to increment the utime field of the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>thread_group_cputime structure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If thread group time is being maintained, get the structure for the</span>", 
"<span class=\"comment\"> * running CPU and update the utime field there.</span>", 
];
xr_frag_insert('l/06/d4412982996738ad8f52b33a93b744951e5a5b.xr', __xr_tmp);
