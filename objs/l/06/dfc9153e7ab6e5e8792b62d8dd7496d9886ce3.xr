var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/fs/open.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 1991, 1992  Linus Torvalds</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fdtable\">fdtable</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fsnotify\">fsnotify</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#tty\">tty</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#namei\">namei</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#backing\">backing</a>-<a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#capability\">capability</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#securebits\">securebits</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#security\">security</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mount\">mount</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fcntl\">fcntl</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#personality\">personality</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pagemap\">pagemap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#syscalls\">syscalls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rcupdate\">rcupdate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#audit\">audit</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#falloc\">falloc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs_struct\">fs_struct</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ima\">ima</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#dnotify\">dnotify</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"internal.h\"", 
"", 
"int <a class=\"id\" href=\"#do_truncate\">do_truncate</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#length\">length</a>, unsigned int <a class=\"id\" href=\"#time_attrs\">time_attrs</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#iattr\">iattr</a> <a class=\"id\" href=\"#newattrs\">newattrs</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Not pretty: \"inode-&gt;i_size\" shouldn't really be signed. But it is. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#length\">length</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#newattrs\">newattrs</a>.<a class=\"id\" href=\"#ia_size\">ia_size</a> = <a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#newattrs\">newattrs</a>.<a class=\"id\" href=\"#ia_valid\">ia_valid</a> = <a class=\"id\" href=\"#ATTR_SIZE\">ATTR_SIZE</a> | <a class=\"id\" href=\"#time_attrs\">time_attrs</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#filp\">filp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newattrs\">newattrs</a>.<a class=\"id\" href=\"#ia_file\">ia_file</a> = <a class=\"id\" href=\"#filp\">filp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newattrs\">newattrs</a>.<a class=\"id\" href=\"#ia_valid\">ia_valid</a> |= <a class=\"id\" href=\"#ATTR_FILE\">ATTR_FILE</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Remove suid/sgid on truncate too */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#should_remove_suid\">should_remove_suid</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newattrs\">newattrs</a>.<a class=\"id\" href=\"#ia_valid\">ia_valid</a> |= <a class=\"id\" href=\"#ret\">ret</a> | <a class=\"id\" href=\"#ATTR_FORCE\">ATTR_FORCE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#notify_change\">notify_change</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, &amp;<a class=\"id\" href=\"#newattrs\">newattrs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static long <a class=\"id\" href=\"#do_sys_truncate\">do_sys_truncate</a>(const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#pathname\">pathname</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#length\">length</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#path\">path</a> <a class=\"id\" href=\"#path\">path</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#length\">length</a> &lt; 0)<span class=\"ts\"/><span class=\"comment\">/* sorry, but loff_t says... */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#user_path\">user_path</a>(<a class=\"id\" href=\"#pathname\">pathname</a>, &amp;<a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* For directories it's -EISDIR, for other non-regulars - -EINVAL */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EISDIR\">EISDIR</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#dput_and_out\">dput_and_out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#S_ISREG\">S_ISREG</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#dput_and_out\">dput_and_out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#mnt_want_write\">mnt_want_write</a>(<a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#dput_and_out\">dput_and_out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#inode_permission\">inode_permission</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#mnt_drop_write_and_out\">mnt_drop_write_and_out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_APPEND\">IS_APPEND</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#mnt_drop_write_and_out\">mnt_drop_write_and_out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#get_write_access\">get_write_access</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#mnt_drop_write_and_out\">mnt_drop_write_and_out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Make sure that there are no leases.  get_write_access() protects</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * against the truncate racing with a lease-granting setlease().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#break_lease\">break_lease</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#O_WRONLY\">O_WRONLY</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#put_write_and_out\">put_write_and_out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#locks_verify_truncate\">locks_verify_truncate</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#security_path_truncate\">security_path_truncate</a>(&amp;<a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#do_truncate\">do_truncate</a>(<a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#length\">length</a>, 0, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<a class=\"id\" href=\"#put_write_and_out\">put_write_and_out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_write_access\">put_write_access</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<a class=\"id\" href=\"#mnt_drop_write_and_out\">mnt_drop_write_and_out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mnt_drop_write\">mnt_drop_write</a>(<a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<a class=\"id\" href=\"#dput_and_out\">dput_and_out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path_put\">path_put</a>(&amp;<a class=\"id\" href=\"#path\">path</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE2\">SYSCALL_DEFINE2</a>(<a class=\"id\" href=\"#truncate\">truncate</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#path\">path</a>, long, <a class=\"id\" href=\"#length\">length</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#do_sys_truncate\">do_sys_truncate</a>(<a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#length\">length</a>);", 
"}", 
"", 
"static long <a class=\"id\" href=\"#do_sys_ftruncate\">do_sys_ftruncate</a>(unsigned int <a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#length\">length</a>, int <a class=\"id\" href=\"#small\">small</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> * <a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> * <a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#length\">length</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EBADF\">EBADF</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#fget\">fget</a>(<a class=\"id\" href=\"#fd\">fd</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#file\">file</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* explicitly opened as large or we are on 64-bit box */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a> &amp; <a class=\"id\" href=\"#O_LARGEFILE\">O_LARGEFILE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#small\">small</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#S_ISREG\">S_ISREG</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>) || !(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_WRITE\">FMODE_WRITE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_putf\">out_putf</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Cannot ftruncate over 2^31 bytes without large file support */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#small\">small</a> && <a class=\"id\" href=\"#length\">length</a> &gt; <a class=\"id\" href=\"#MAX_NON_LFS\">MAX_NON_LFS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_putf\">out_putf</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_APPEND\">IS_APPEND</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_putf\">out_putf</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#locks_verify_truncate\">locks_verify_truncate</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#security_path_truncate\">security_path_truncate</a>(&amp;<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#do_truncate\">do_truncate</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#ATTR_MTIME\">ATTR_MTIME</a>|<a class=\"id\" href=\"#ATTR_CTIME\">ATTR_CTIME</a>, <a class=\"id\" href=\"#file\">file</a>);", 
"<a class=\"id\" href=\"#out_putf\">out_putf</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fput\">fput</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE2\">SYSCALL_DEFINE2</a>(<a class=\"id\" href=\"#ftruncate\">ftruncate</a>, unsigned int, <a class=\"id\" href=\"#fd\">fd</a>, unsigned long, <a class=\"id\" href=\"#length\">length</a>)", 
"{", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#do_sys_ftruncate\">do_sys_ftruncate</a>(<a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#length\">length</a>, 1);", 
"<span class=\"ts\"/><span class=\"comment\">/* avoid REGPARM breakage on x86: */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asmlinkage_protect\">asmlinkage_protect</a>(2, <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/* LFS versions of truncate are only needed on 32 bit machines */</span>", 
"#if <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> == 32", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE\">SYSCALL_DEFINE</a>(<a class=\"id\" href=\"#truncate64\">truncate64</a>)(const char <a class=\"id\" href=\"#__user\">__user</a> * <a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#length\">length</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#do_sys_truncate\">do_sys_truncate</a>(<a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#length\">length</a>);", 
"}", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HAVE_SYSCALL_WRAPPERS\">CONFIG_HAVE_SYSCALL_WRAPPERS</a>", 
"<a class=\"id\" href=\"#asmlinkage\">asmlinkage</a> long <a class=\"id\" href=\"#SyS_truncate64\">SyS_truncate64</a>(long <a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#length\">length</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#SYSC_truncate64\">SYSC_truncate64</a>((const char <a class=\"id\" href=\"#__user\">__user</a> *) <a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#length\">length</a>);", 
"}", 
"<a class=\"id\" href=\"#SYSCALL_ALIAS\">SYSCALL_ALIAS</a>(<a class=\"id\" href=\"#sys_truncate64\">sys_truncate64</a>, <a class=\"id\" href=\"#SyS_truncate64\">SyS_truncate64</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE\">SYSCALL_DEFINE</a>(<a class=\"id\" href=\"#ftruncate64\">ftruncate64</a>)(unsigned int <a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#length\">length</a>)", 
"{", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#do_sys_ftruncate\">do_sys_ftruncate</a>(<a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#length\">length</a>, 0);", 
"<span class=\"ts\"/><span class=\"comment\">/* avoid REGPARM breakage on x86: */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asmlinkage_protect\">asmlinkage_protect</a>(2, <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HAVE_SYSCALL_WRAPPERS\">CONFIG_HAVE_SYSCALL_WRAPPERS</a>", 
"<a class=\"id\" href=\"#asmlinkage\">asmlinkage</a> long <a class=\"id\" href=\"#SyS_ftruncate64\">SyS_ftruncate64</a>(long <a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#length\">length</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#SYSC_ftruncate64\">SYSC_ftruncate64</a>((unsigned int) <a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#length\">length</a>);", 
"}", 
"<a class=\"id\" href=\"#SYSCALL_ALIAS\">SYSCALL_ALIAS</a>(<a class=\"id\" href=\"#sys_ftruncate64\">sys_ftruncate64</a>, <a class=\"id\" href=\"#SyS_ftruncate64\">SyS_ftruncate64</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* BITS_PER_LONG == 32 */</span>", 
"", 
"", 
"int <a class=\"id\" href=\"#do_fallocate\">do_fallocate</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, int <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> &lt; 0 || <a class=\"id\" href=\"#len\">len</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Return error if mode is not supported */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mode\">mode</a> && !(<a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#FALLOC_FL_KEEP_SIZE\">FALLOC_FL_KEEP_SIZE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_WRITE\">FMODE_WRITE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBADF\">EBADF</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Revalidate the write permissions, in case security policy has</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * changed since the files were opened.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#security_file_permission\">security_file_permission</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISFIFO\">S_ISFIFO</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ESPIPE\">ESPIPE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Let individual file system decide if it supports preallocation</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for directories or not.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#S_ISREG\">S_ISREG</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>) && !<a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check for wrap through zero too */</span>", 
"<span class=\"ts\"/>if (((<a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#len\">len</a>) &gt; <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_maxbytes\">s_maxbytes</a>) || ((<a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#len\">len</a>) &lt; 0))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFBIG\">EFBIG</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a>-><a class=\"id\" href=\"#fallocate\">fallocate</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a>-><a class=\"id\" href=\"#fallocate\">fallocate</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE\">SYSCALL_DEFINE</a>(<a class=\"id\" href=\"#fallocate\">fallocate</a>)(int <a class=\"id\" href=\"#fd\">fd</a>, int <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EBADF\">EBADF</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#fget\">fget</a>(<a class=\"id\" href=\"#fd\">fd</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#do_fallocate\">do_fallocate</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fput\">fput</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HAVE_SYSCALL_WRAPPERS\">CONFIG_HAVE_SYSCALL_WRAPPERS</a>", 
"<a class=\"id\" href=\"#asmlinkage\">asmlinkage</a> long <a class=\"id\" href=\"#SyS_fallocate\">SyS_fallocate</a>(long <a class=\"id\" href=\"#fd\">fd</a>, long <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#SYSC_fallocate\">SYSC_fallocate</a>((int)<a class=\"id\" href=\"#fd\">fd</a>, (int)<a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"}", 
"<a class=\"id\" href=\"#SYSCALL_ALIAS\">SYSCALL_ALIAS</a>(<a class=\"id\" href=\"#sys_fallocate\">sys_fallocate</a>, <a class=\"id\" href=\"#SyS_fallocate\">SyS_fallocate</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * access() needs to use the real uid/gid, not the effective uid/gid.</span>", 
"<span class=\"comment\"> * We do this by temporarily clearing all FS-related capabilities and</span>", 
"<span class=\"comment\"> * switching the fsuid/fsgid around to the real ones.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE3\">SYSCALL_DEFINE3</a>(<a class=\"id\" href=\"#faccessat\">faccessat</a>, int, <a class=\"id\" href=\"#dfd\">dfd</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#filename\">filename</a>, int, <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#old_cred\">old_cred</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#override_cred\">override_cred</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#path\">path</a> <a class=\"id\" href=\"#path\">path</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mode\">mode</a> &amp; ~<a class=\"id\" href=\"#S_IRWXO\">S_IRWXO</a>)<span class=\"ts\"/><span class=\"comment\">/* where's F_OK, X_OK, W_OK, R_OK? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#override_cred\">override_cred</a> = <a class=\"id\" href=\"#prepare_creds\">prepare_creds</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#override_cred\">override_cred</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#override_cred\">override_cred</a>-><a class=\"id\" href=\"#fsuid\">fsuid</a> = <a class=\"id\" href=\"#override_cred\">override_cred</a>-><a class=\"id\" href=\"#uid\">uid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#override_cred\">override_cred</a>-><a class=\"id\" href=\"#fsgid\">fsgid</a> = <a class=\"id\" href=\"#override_cred\">override_cred</a>-><a class=\"id\" href=\"#gid\">gid</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#issecure\">issecure</a>(<a class=\"id\" href=\"#SECURE_NO_SETUID_FIXUP\">SECURE_NO_SETUID_FIXUP</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Clear the capabilities if we switch to a non-root user */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#override_cred\">override_cred</a>-><a class=\"id\" href=\"#uid\">uid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cap_clear\">cap_clear</a>(<a class=\"id\" href=\"#override_cred\">override_cred</a>-><a class=\"id\" href=\"#cap_effective\">cap_effective</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#override_cred\">override_cred</a>-><a class=\"id\" href=\"#cap_effective\">cap_effective</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#override_cred\">override_cred</a>-><a class=\"id\" href=\"#cap_permitted\">cap_permitted</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_cred\">old_cred</a> = <a class=\"id\" href=\"#override_creds\">override_creds</a>(<a class=\"id\" href=\"#override_cred\">override_cred</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#user_path_at\">user_path_at</a>(<a class=\"id\" href=\"#dfd\">dfd</a>, <a class=\"id\" href=\"#filename\">filename</a>, <a class=\"id\" href=\"#LOOKUP_FOLLOW\">LOOKUP_FOLLOW</a>, &amp;<a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#MAY_EXEC\">MAY_EXEC</a>) && <a class=\"id\" href=\"#S_ISREG\">S_ISREG</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * MAY_EXEC on regular files is denied if the fs is mounted</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * with the \"noexec\" flag.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = -<a class=\"id\" href=\"#EACCES\">EACCES</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_flags\">mnt_flags</a> &amp; <a class=\"id\" href=\"#MNT_NOEXEC\">MNT_NOEXEC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_path_release\">out_path_release</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#inode_permission\">inode_permission</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#mode\">mode</a> | <a class=\"id\" href=\"#MAY_ACCESS\">MAY_ACCESS</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* SuS v2 requires we report a read only fs too */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a> || !(<a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#S_IWOTH\">S_IWOTH</a>) || <a class=\"id\" href=\"#special_file\">special_file</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_path_release\">out_path_release</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This is a rare case where using __mnt_is_readonly()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is OK without a mnt_want/drop_write() pair.  Since</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * no actual write to the fs is performed here, we do</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not need to telegraph to that to anyone.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * By doing this, we accept that this access is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * inherently racy and know that the fs may change</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * state before we even see this result.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__mnt_is_readonly\">__mnt_is_readonly</a>(<a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = -<a class=\"id\" href=\"#EROFS\">EROFS</a>;", 
"", 
"<a class=\"id\" href=\"#out_path_release\">out_path_release</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path_put\">path_put</a>(&amp;<a class=\"id\" href=\"#path\">path</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#revert_creds\">revert_creds</a>(<a class=\"id\" href=\"#old_cred\">old_cred</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cred\">put_cred</a>(<a class=\"id\" href=\"#override_cred\">override_cred</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE2\">SYSCALL_DEFINE2</a>(<a class=\"id\" href=\"#access\">access</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#filename\">filename</a>, int, <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sys_faccessat\">sys_faccessat</a>(<a class=\"id\" href=\"#AT_FDCWD\">AT_FDCWD</a>, <a class=\"id\" href=\"#filename\">filename</a>, <a class=\"id\" href=\"#mode\">mode</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE1\">SYSCALL_DEFINE1</a>(<a class=\"id\" href=\"#chdir\">chdir</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#filename\">filename</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#path\">path</a> <a class=\"id\" href=\"#path\">path</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#user_path_dir\">user_path_dir</a>(<a class=\"id\" href=\"#filename\">filename</a>, &amp;<a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#inode_permission\">inode_permission</a>(<a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>, <a class=\"id\" href=\"#MAY_EXEC\">MAY_EXEC</a> | <a class=\"id\" href=\"#MAY_CHDIR\">MAY_CHDIR</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#dput_and_out\">dput_and_out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_fs_pwd\">set_fs_pwd</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#fs\">fs</a>, &amp;<a class=\"id\" href=\"#path\">path</a>);", 
"", 
"<a class=\"id\" href=\"#dput_and_out\">dput_and_out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path_put\">path_put</a>(&amp;<a class=\"id\" href=\"#path\">path</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE1\">SYSCALL_DEFINE1</a>(<a class=\"id\" href=\"#fchdir\">fchdir</a>, unsigned int, <a class=\"id\" href=\"#fd\">fd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EBADF\">EBADF</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#fget\">fget</a>(<a class=\"id\" href=\"#fd\">fd</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#file\">file</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOTDIR\">ENOTDIR</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_putf\">out_putf</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#inode_permission\">inode_permission</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#MAY_EXEC\">MAY_EXEC</a> | <a class=\"id\" href=\"#MAY_CHDIR\">MAY_CHDIR</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_fs_pwd\">set_fs_pwd</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#fs\">fs</a>, &amp;<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>);", 
"<a class=\"id\" href=\"#out_putf\">out_putf</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fput\">fput</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE1\">SYSCALL_DEFINE1</a>(<a class=\"id\" href=\"#chroot\">chroot</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#filename\">filename</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#path\">path</a> <a class=\"id\" href=\"#path\">path</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#user_path_dir\">user_path_dir</a>(<a class=\"id\" href=\"#filename\">filename</a>, &amp;<a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#inode_permission\">inode_permission</a>(<a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>, <a class=\"id\" href=\"#MAY_EXEC\">MAY_EXEC</a> | <a class=\"id\" href=\"#MAY_CHDIR\">MAY_CHDIR</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#dput_and_out\">dput_and_out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_CHROOT\">CAP_SYS_CHROOT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#dput_and_out\">dput_and_out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#security_path_chroot\">security_path_chroot</a>(&amp;<a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#dput_and_out\">dput_and_out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_fs_root\">set_fs_root</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#fs\">fs</a>, &amp;<a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = 0;", 
"<a class=\"id\" href=\"#dput_and_out\">dput_and_out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path_put\">path_put</a>(&amp;<a class=\"id\" href=\"#path\">path</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE2\">SYSCALL_DEFINE2</a>(<a class=\"id\" href=\"#fchmod\">fchmod</a>, unsigned int, <a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#mode_t\">mode_t</a>, <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> * <a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> * <a class=\"id\" href=\"#dentry\">dentry</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> * <a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EBADF\">EBADF</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#iattr\">iattr</a> <a class=\"id\" href=\"#newattrs\">newattrs</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#fget\">fget</a>(<a class=\"id\" href=\"#fd\">fd</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#file\">file</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#audit_inode\">audit_inode</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#dentry\">dentry</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#mnt_want_write_file\">mnt_want_write_file</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_putf\">out_putf</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#security_path_chmod\">security_path_chmod</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_vfsmnt\">f_vfsmnt</a>, <a class=\"id\" href=\"#mode\">mode</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mode\">mode</a> == (<a class=\"id\" href=\"#mode_t\">mode_t</a>) -1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#newattrs\">newattrs</a>.<a class=\"id\" href=\"#ia_mode\">ia_mode</a> = (<a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#S_IALLUGO\">S_IALLUGO</a>) | (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a> &amp; ~<a class=\"id\" href=\"#S_IALLUGO\">S_IALLUGO</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#newattrs\">newattrs</a>.<a class=\"id\" href=\"#ia_valid\">ia_valid</a> = <a class=\"id\" href=\"#ATTR_MODE\">ATTR_MODE</a> | <a class=\"id\" href=\"#ATTR_CTIME\">ATTR_CTIME</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#notify_change\">notify_change</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, &amp;<a class=\"id\" href=\"#newattrs\">newattrs</a>);", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mnt_drop_write\">mnt_drop_write</a>(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<a class=\"id\" href=\"#out_putf\">out_putf</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fput\">fput</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE3\">SYSCALL_DEFINE3</a>(<a class=\"id\" href=\"#fchmodat\">fchmodat</a>, int, <a class=\"id\" href=\"#dfd\">dfd</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#filename\">filename</a>, <a class=\"id\" href=\"#mode_t\">mode_t</a>, <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#path\">path</a> <a class=\"id\" href=\"#path\">path</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#iattr\">iattr</a> <a class=\"id\" href=\"#newattrs\">newattrs</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#user_path_at\">user_path_at</a>(<a class=\"id\" href=\"#dfd\">dfd</a>, <a class=\"id\" href=\"#filename\">filename</a>, <a class=\"id\" href=\"#LOOKUP_FOLLOW\">LOOKUP_FOLLOW</a>, &amp;<a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#mnt_want_write\">mnt_want_write</a>(<a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#dput_and_out\">dput_and_out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#security_path_chmod\">security_path_chmod</a>(<a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>, <a class=\"id\" href=\"#mode\">mode</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mode\">mode</a> == (<a class=\"id\" href=\"#mode_t\">mode_t</a>) -1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#newattrs\">newattrs</a>.<a class=\"id\" href=\"#ia_mode\">ia_mode</a> = (<a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#S_IALLUGO\">S_IALLUGO</a>) | (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a> &amp; ~<a class=\"id\" href=\"#S_IALLUGO\">S_IALLUGO</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#newattrs\">newattrs</a>.<a class=\"id\" href=\"#ia_valid\">ia_valid</a> = <a class=\"id\" href=\"#ATTR_MODE\">ATTR_MODE</a> | <a class=\"id\" href=\"#ATTR_CTIME\">ATTR_CTIME</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#notify_change\">notify_change</a>(<a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>, &amp;<a class=\"id\" href=\"#newattrs\">newattrs</a>);", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mnt_drop_write\">mnt_drop_write</a>(<a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<a class=\"id\" href=\"#dput_and_out\">dput_and_out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path_put\">path_put</a>(&amp;<a class=\"id\" href=\"#path\">path</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE2\">SYSCALL_DEFINE2</a>(<a class=\"id\" href=\"#chmod\">chmod</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#filename\">filename</a>, <a class=\"id\" href=\"#mode_t\">mode_t</a>, <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sys_fchmodat\">sys_fchmodat</a>(<a class=\"id\" href=\"#AT_FDCWD\">AT_FDCWD</a>, <a class=\"id\" href=\"#filename\">filename</a>, <a class=\"id\" href=\"#mode\">mode</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#chown_common\">chown_common</a>(struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#uid_t\">uid_t</a> <a class=\"id\" href=\"#user\">user</a>, <a class=\"id\" href=\"#gid_t\">gid_t</a> <a class=\"id\" href=\"#group\">group</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#iattr\">iattr</a> <a class=\"id\" href=\"#newattrs\">newattrs</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#newattrs\">newattrs</a>.<a class=\"id\" href=\"#ia_valid\">ia_valid</a> =  <a class=\"id\" href=\"#ATTR_CTIME\">ATTR_CTIME</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#user\">user</a> != (<a class=\"id\" href=\"#uid_t\">uid_t</a>) -1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newattrs\">newattrs</a>.<a class=\"id\" href=\"#ia_valid\">ia_valid</a> |= <a class=\"id\" href=\"#ATTR_UID\">ATTR_UID</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newattrs\">newattrs</a>.<a class=\"id\" href=\"#ia_uid\">ia_uid</a> = <a class=\"id\" href=\"#user\">user</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#group\">group</a> != (<a class=\"id\" href=\"#gid_t\">gid_t</a>) -1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newattrs\">newattrs</a>.<a class=\"id\" href=\"#ia_valid\">ia_valid</a> |= <a class=\"id\" href=\"#ATTR_GID\">ATTR_GID</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newattrs\">newattrs</a>.<a class=\"id\" href=\"#ia_gid\">ia_gid</a> = <a class=\"id\" href=\"#group\">group</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newattrs\">newattrs</a>.<a class=\"id\" href=\"#ia_valid\">ia_valid</a> |=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ATTR_KILL_SUID\">ATTR_KILL_SUID</a> | <a class=\"id\" href=\"#ATTR_KILL_SGID\">ATTR_KILL_SGID</a> | <a class=\"id\" href=\"#ATTR_KILL_PRIV\">ATTR_KILL_PRIV</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#security_path_chown\">security_path_chown</a>(<a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#user\">user</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#notify_change\">notify_change</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>, &amp;<a class=\"id\" href=\"#newattrs\">newattrs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE3\">SYSCALL_DEFINE3</a>(<a class=\"id\" href=\"#chown\">chown</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#filename\">filename</a>, <a class=\"id\" href=\"#uid_t\">uid_t</a>, <a class=\"id\" href=\"#user\">user</a>, <a class=\"id\" href=\"#gid_t\">gid_t</a>, <a class=\"id\" href=\"#group\">group</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#path\">path</a> <a class=\"id\" href=\"#path\">path</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#user_path\">user_path</a>(<a class=\"id\" href=\"#filename\">filename</a>, &amp;<a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#mnt_want_write\">mnt_want_write</a>(<a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_release\">out_release</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#chown_common\">chown_common</a>(&amp;<a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#user\">user</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mnt_drop_write\">mnt_drop_write</a>(<a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<a class=\"id\" href=\"#out_release\">out_release</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path_put\">path_put</a>(&amp;<a class=\"id\" href=\"#path\">path</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE5\">SYSCALL_DEFINE5</a>(<a class=\"id\" href=\"#fchownat\">fchownat</a>, int, <a class=\"id\" href=\"#dfd\">dfd</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#filename\">filename</a>, <a class=\"id\" href=\"#uid_t\">uid_t</a>, <a class=\"id\" href=\"#user\">user</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gid_t\">gid_t</a>, <a class=\"id\" href=\"#group\">group</a>, int, <a class=\"id\" href=\"#flag\">flag</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#path\">path</a> <a class=\"id\" href=\"#path\">path</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#follow\">follow</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#flag\">flag</a> &amp; ~<a class=\"id\" href=\"#AT_SYMLINK_NOFOLLOW\">AT_SYMLINK_NOFOLLOW</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#follow\">follow</a> = (<a class=\"id\" href=\"#flag\">flag</a> &amp; <a class=\"id\" href=\"#AT_SYMLINK_NOFOLLOW\">AT_SYMLINK_NOFOLLOW</a>) ? 0 : <a class=\"id\" href=\"#LOOKUP_FOLLOW\">LOOKUP_FOLLOW</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#user_path_at\">user_path_at</a>(<a class=\"id\" href=\"#dfd\">dfd</a>, <a class=\"id\" href=\"#filename\">filename</a>, <a class=\"id\" href=\"#follow\">follow</a>, &amp;<a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#mnt_want_write\">mnt_want_write</a>(<a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_release\">out_release</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#chown_common\">chown_common</a>(&amp;<a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#user\">user</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mnt_drop_write\">mnt_drop_write</a>(<a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<a class=\"id\" href=\"#out_release\">out_release</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path_put\">path_put</a>(&amp;<a class=\"id\" href=\"#path\">path</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE3\">SYSCALL_DEFINE3</a>(<a class=\"id\" href=\"#lchown\">lchown</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#filename\">filename</a>, <a class=\"id\" href=\"#uid_t\">uid_t</a>, <a class=\"id\" href=\"#user\">user</a>, <a class=\"id\" href=\"#gid_t\">gid_t</a>, <a class=\"id\" href=\"#group\">group</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#path\">path</a> <a class=\"id\" href=\"#path\">path</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#user_lpath\">user_lpath</a>(<a class=\"id\" href=\"#filename\">filename</a>, &amp;<a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#mnt_want_write\">mnt_want_write</a>(<a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_release\">out_release</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#chown_common\">chown_common</a>(&amp;<a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#user\">user</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mnt_drop_write\">mnt_drop_write</a>(<a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<a class=\"id\" href=\"#out_release\">out_release</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path_put\">path_put</a>(&amp;<a class=\"id\" href=\"#path\">path</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE3\">SYSCALL_DEFINE3</a>(<a class=\"id\" href=\"#fchown\">fchown</a>, unsigned int, <a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#uid_t\">uid_t</a>, <a class=\"id\" href=\"#user\">user</a>, <a class=\"id\" href=\"#gid_t\">gid_t</a>, <a class=\"id\" href=\"#group\">group</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> * <a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EBADF\">EBADF</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> * <a class=\"id\" href=\"#dentry\">dentry</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#fget\">fget</a>(<a class=\"id\" href=\"#fd\">fd</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#file\">file</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#mnt_want_write_file\">mnt_want_write_file</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_fput\">out_fput</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#audit_inode\">audit_inode</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#chown_common\">chown_common</a>(&amp;<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>, <a class=\"id\" href=\"#user\">user</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mnt_drop_write\">mnt_drop_write</a>(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<a class=\"id\" href=\"#out_fput\">out_fput</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fput\">fput</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * You have to be very careful that these write</span>", 
"<span class=\"comment\"> * counts get cleaned up in error cases and</span>", 
"<span class=\"comment\"> * upon __fput().  This should probably never</span>", 
"<span class=\"comment\"> * be called outside of __dentry_open().</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__get_file_write_access\">__get_file_write_access</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#get_write_access\">get_write_access</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Do not take mount writer counts on</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * special files since no writes to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the mount itself will occur.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#special_file\">special_file</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Balanced in __fput()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#mnt_want_write\">mnt_want_write</a>(<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_write_access\">put_write_access</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#__dentry_open\">__dentry_open</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#f\">f</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#open\">open</a>)(struct <a class=\"id\" href=\"#inode\">inode</a> *, struct <a class=\"id\" href=\"#file\">file</a> *),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> = <a class=\"id\" href=\"#OPEN_FMODE\">OPEN_FMODE</a>(<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a>) | <a class=\"id\" href=\"#FMODE_LSEEK\">FMODE_LSEEK</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FMODE_PREAD\">FMODE_PREAD</a> | <a class=\"id\" href=\"#FMODE_PWRITE\">FMODE_PWRITE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_WRITE\">FMODE_WRITE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#__get_file_write_access\">__get_file_write_access</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup_file\">cleanup_file</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#special_file\">special_file</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#file_take_write\">file_take_write</a>(<a class=\"id\" href=\"#f\">f</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#dentry\">dentry</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#mnt\">mnt</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_pos\">f_pos</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_op\">f_op</a> = <a class=\"id\" href=\"#fops_get\">fops_get</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_fop\">i_fop</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file_sb_list_add\">file_sb_list_add</a>(<a class=\"id\" href=\"#f\">f</a>, <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#security_dentry_open\">security_dentry_open</a>(<a class=\"id\" href=\"#f\">f</a>, <a class=\"id\" href=\"#cred\">cred</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup_all\">cleanup_all</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#open\">open</a> && <a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_op\">f_op</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#open\">open</a> = <a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#open\">open</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#open\">open</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#open\">open</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#f\">f</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup_all\">cleanup_all</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ima_counts_get\">ima_counts_get</a>(<a class=\"id\" href=\"#f\">f</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a> &= ~(<a class=\"id\" href=\"#O_CREAT\">O_CREAT</a> | <a class=\"id\" href=\"#O_EXCL\">O_EXCL</a> | <a class=\"id\" href=\"#O_NOCTTY\">O_NOCTTY</a> | <a class=\"id\" href=\"#O_TRUNC\">O_TRUNC</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file_ra_state_init\">file_ra_state_init</a>(&amp;<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_ra\">f_ra</a>, <a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* NB: we're sure to have correct a_ops only after f_op-&gt;open */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a> &amp; <a class=\"id\" href=\"#O_DIRECT\">O_DIRECT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    ((!<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a>-><a class=\"id\" href=\"#direct_IO\">direct_IO</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (!<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a>-><a class=\"id\" href=\"#get_xip_mem\">get_xip_mem</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fput\">fput</a>(<a class=\"id\" href=\"#f\">f</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#f\">f</a>;", 
"", 
"<a class=\"id\" href=\"#cleanup_all\">cleanup_all</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fops_put\">fops_put</a>(<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_op\">f_op</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_WRITE\">FMODE_WRITE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_write_access\">put_write_access</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#special_file\">special_file</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We don't consider this a real</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * mnt_want/drop_write() pair</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * because it all happenend right</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * here, so just reset the state.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#file_reset_write\">file_reset_write</a>(<a class=\"id\" href=\"#f\">f</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt_drop_write\">mnt_drop_write</a>(<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file_sb_list_del\">file_sb_list_del</a>(<a class=\"id\" href=\"#f\">f</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<a class=\"id\" href=\"#cleanup_file\">cleanup_file</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_filp\">put_filp</a>(<a class=\"id\" href=\"#f\">f</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mntput\">mntput</a>(<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#error\">error</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * lookup_instantiate_filp - instantiates the open intent filp</span>", 
"<span class=\"comment\"> * @nd: pointer to nameidata</span>", 
"<span class=\"comment\"> * @dentry: pointer to dentry</span>", 
"<span class=\"comment\"> * @open: open callback</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Helper for filesystems that want to use lookup open intents and pass back</span>", 
"<span class=\"comment\"> * a fully instantiated struct file to the caller.</span>", 
"<span class=\"comment\"> * This function is meant to be called from within a filesystem's</span>", 
"<span class=\"comment\"> * lookup method.</span>", 
"<span class=\"comment\"> * Beware of calling it for non-regular files! Those -&gt;open methods might block</span>", 
"<span class=\"comment\"> * (e.g. in fifo_open), leaving you with parent locked (and in case of fifo,</span>", 
"<span class=\"comment\"> * leading to a deadlock, as nobody can open that fifo anymore, because</span>", 
"<span class=\"comment\"> * another process to open fifo will block on locked parent when doing lookup).</span>", 
"<span class=\"comment\"> * Note that in case of error, nd-&gt;intent.open.file is destroyed, but the</span>", 
"<span class=\"comment\"> * path information remains valid.</span>", 
"<span class=\"comment\"> * If the open callback is set to NULL, then the standard f_op-&gt;open()</span>", 
"<span class=\"comment\"> * filesystem callback is substituted.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#lookup_instantiate_filp\">lookup_instantiate_filp</a>(struct <a class=\"id\" href=\"#nameidata\">nameidata</a> *<a class=\"id\" href=\"#nd\">nd</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#open\">open</a>)(struct <a class=\"id\" href=\"#inode\">inode</a> *, struct <a class=\"id\" href=\"#file\">file</a> *))", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a> = <a class=\"id\" href=\"#current_cred\">current_cred</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#intent\">intent</a>.<a class=\"id\" href=\"#open\">open</a>.<a class=\"id\" href=\"#file\">file</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#dentry\">dentry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_err\">out_err</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#intent\">intent</a>.<a class=\"id\" href=\"#open\">open</a>.<a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#__dentry_open\">__dentry_open</a>(<a class=\"id\" href=\"#dget\">dget</a>(<a class=\"id\" href=\"#dentry\">dentry</a>), <a class=\"id\" href=\"#mntget\">mntget</a>(<a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#intent\">intent</a>.<a class=\"id\" href=\"#open\">open</a>.<a class=\"id\" href=\"#file\">file</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#open\">open</a>, <a class=\"id\" href=\"#cred\">cred</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#intent\">intent</a>.<a class=\"id\" href=\"#open\">open</a>.<a class=\"id\" href=\"#file\">file</a>;", 
"<a class=\"id\" href=\"#out_err\">out_err</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#release_open_intent\">release_open_intent</a>(<a class=\"id\" href=\"#nd\">nd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#intent\">intent</a>.<a class=\"id\" href=\"#open\">open</a>.<a class=\"id\" href=\"#file\">file</a> = (struct <a class=\"id\" href=\"#file\">file</a> *)<a class=\"id\" href=\"#dentry\">dentry</a>;", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#lookup_instantiate_filp\">lookup_instantiate_filp</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * nameidata_to_filp - convert a nameidata to an open filp.</span>", 
"<span class=\"comment\"> * @nd: pointer to nameidata</span>", 
"<span class=\"comment\"> * @flags: open flags</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that this function destroys the original nameidata</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#nameidata_to_filp\">nameidata_to_filp</a>(struct <a class=\"id\" href=\"#nameidata\">nameidata</a> *<a class=\"id\" href=\"#nd\">nd</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a> = <a class=\"id\" href=\"#current_cred\">current_cred</a>();", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Pick up the filp from the open intent */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#filp\">filp</a> = <a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#intent\">intent</a>.<a class=\"id\" href=\"#open\">open</a>.<a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Has the filesystem initialised the file for us? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#filp\">filp</a> = <a class=\"id\" href=\"#__dentry_open\">__dentry_open</a>(<a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>, <a class=\"id\" href=\"#filp\">filp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#cred\">cred</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#path_put\">path_put</a>(&amp;<a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#filp\">filp</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * dentry_open() will have done dput(dentry) and mntput(mnt) if it returns an</span>", 
"<span class=\"comment\"> * error.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#dentry_open\">dentry_open</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>, int <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#f\">f</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#validate_creds\">validate_creds</a>(<a class=\"id\" href=\"#cred\">cred</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We must always pass in a valid mount pointer.   Historically</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * callers got away with not passing it, but we must enforce this at</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the earliest possible point now to avoid strange problems deep in the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * filesystem stack.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mnt\">mnt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"%s called with NULL vfsmount\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dump_stack\">dump_stack</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENFILE\">ENFILE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a> = <a class=\"id\" href=\"#get_empty_filp\">get_empty_filp</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#f\">f</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mntput\">mntput</a>(<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#error\">error</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a> = <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__dentry_open\">__dentry_open</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#mnt\">mnt</a>, <a class=\"id\" href=\"#f\">f</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#cred\">cred</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dentry_open\">dentry_open</a>);", 
"", 
"static void <a class=\"id\" href=\"#__put_unused_fd\">__put_unused_fd</a>(struct <a class=\"id\" href=\"#files_struct\">files_struct</a> *<a class=\"id\" href=\"#files\">files</a>, unsigned int <a class=\"id\" href=\"#fd\">fd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fdtable\">fdtable</a> *<a class=\"id\" href=\"#fdt\">fdt</a> = <a class=\"id\" href=\"#files_fdtable\">files_fdtable</a>(<a class=\"id\" href=\"#files\">files</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__FD_CLR\">__FD_CLR</a>(<a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#fdt\">fdt</a>-><a class=\"id\" href=\"#open_fds\">open_fds</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fd\">fd</a> &lt; <a class=\"id\" href=\"#files\">files</a>-><a class=\"id\" href=\"#next_fd\">next_fd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#files\">files</a>-><a class=\"id\" href=\"#next_fd\">next_fd</a> = <a class=\"id\" href=\"#fd\">fd</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#put_unused_fd\">put_unused_fd</a>(unsigned int <a class=\"id\" href=\"#fd\">fd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#files_struct\">files_struct</a> *<a class=\"id\" href=\"#files\">files</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#files\">files</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#files\">files</a>-><a class=\"id\" href=\"#file_lock\">file_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__put_unused_fd\">__put_unused_fd</a>(<a class=\"id\" href=\"#files\">files</a>, <a class=\"id\" href=\"#fd\">fd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#files\">files</a>-><a class=\"id\" href=\"#file_lock\">file_lock</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#put_unused_fd\">put_unused_fd</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Install a file pointer in the fd array.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The VFS is full of places where we drop the files lock between</span>", 
"<span class=\"comment\"> * setting the open_fds bitmap and installing the file in the file</span>", 
"<span class=\"comment\"> * array.  At any such point, we are vulnerable to a dup2() race</span>", 
"<span class=\"comment\"> * installing a file in the array before us.  We need to detect this and</span>", 
"<span class=\"comment\"> * fput() the struct file we are about to overwrite in this case.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It should never happen - if we allow dup2() do it, _really_ bad things</span>", 
"<span class=\"comment\"> * will follow.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#fd_install\">fd_install</a>(unsigned int <a class=\"id\" href=\"#fd\">fd</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#files_struct\">files_struct</a> *<a class=\"id\" href=\"#files\">files</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#files\">files</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fdtable\">fdtable</a> *<a class=\"id\" href=\"#fdt\">fdt</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#files\">files</a>-><a class=\"id\" href=\"#file_lock\">file_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fdt\">fdt</a> = <a class=\"id\" href=\"#files_fdtable\">files_fdtable</a>(<a class=\"id\" href=\"#files\">files</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#fdt\">fdt</a>-><a class=\"id\" href=\"#fd\">fd</a>[<a class=\"id\" href=\"#fd\">fd</a>] != <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#fdt\">fdt</a>-><a class=\"id\" href=\"#fd\">fd</a>[<a class=\"id\" href=\"#fd\">fd</a>], <a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#files\">files</a>-><a class=\"id\" href=\"#file_lock\">file_lock</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#fd_install\">fd_install</a>);", 
"", 
"long <a class=\"id\" href=\"#do_sys_open\">do_sys_open</a>(int <a class=\"id\" href=\"#dfd\">dfd</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#filename\">filename</a>, int <a class=\"id\" href=\"#flags\">flags</a>, int <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#getname\">getname</a>(<a class=\"id\" href=\"#filename\">filename</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#fd\">fd</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#tmp\">tmp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fd\">fd</a> = <a class=\"id\" href=\"#get_unused_fd_flags\">get_unused_fd_flags</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fd\">fd</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#f\">f</a> = <a class=\"id\" href=\"#do_filp_open\">do_filp_open</a>(<a class=\"id\" href=\"#dfd\">dfd</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#mode\">mode</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#f\">f</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_unused_fd\">put_unused_fd</a>(<a class=\"id\" href=\"#fd\">fd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fd\">fd</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#f\">f</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_open\">fsnotify_open</a>(<a class=\"id\" href=\"#f\">f</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fd_install\">fd_install</a>(<a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#f\">f</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#putname\">putname</a>(<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#fd\">fd</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE3\">SYSCALL_DEFINE3</a>(<a class=\"id\" href=\"#open\">open</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#filename\">filename</a>, int, <a class=\"id\" href=\"#flags\">flags</a>, int, <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#force_o_largefile\">force_o_largefile</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#O_LARGEFILE\">O_LARGEFILE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#do_sys_open\">do_sys_open</a>(<a class=\"id\" href=\"#AT_FDCWD\">AT_FDCWD</a>, <a class=\"id\" href=\"#filename\">filename</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#mode\">mode</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* avoid REGPARM breakage on x86: */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asmlinkage_protect\">asmlinkage_protect</a>(3, <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#filename\">filename</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#mode\">mode</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE4\">SYSCALL_DEFINE4</a>(<a class=\"id\" href=\"#openat\">openat</a>, int, <a class=\"id\" href=\"#dfd\">dfd</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#filename\">filename</a>, int, <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int, <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#force_o_largefile\">force_o_largefile</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#O_LARGEFILE\">O_LARGEFILE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#do_sys_open\">do_sys_open</a>(<a class=\"id\" href=\"#dfd\">dfd</a>, <a class=\"id\" href=\"#filename\">filename</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#mode\">mode</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* avoid REGPARM breakage on x86: */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asmlinkage_protect\">asmlinkage_protect</a>(4, <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#dfd\">dfd</a>, <a class=\"id\" href=\"#filename\">filename</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#mode\">mode</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__alpha__\">__alpha__</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * For backward compatibility?  Maybe this should be moved</span>", 
"<span class=\"comment\"> * into arch/i386 instead?</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE2\">SYSCALL_DEFINE2</a>(<a class=\"id\" href=\"#creat\">creat</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#pathname\">pathname</a>, int, <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sys_open\">sys_open</a>(<a class=\"id\" href=\"#pathname\">pathname</a>, <a class=\"id\" href=\"#O_CREAT\">O_CREAT</a> | <a class=\"id\" href=\"#O_WRONLY\">O_WRONLY</a> | <a class=\"id\" href=\"#O_TRUNC\">O_TRUNC</a>, <a class=\"id\" href=\"#mode\">mode</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * \"id\" is the POSIX thread ID. We use the</span>", 
"<span class=\"comment\"> * files pointer for this..</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#filp_close\">filp_close</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#fl_owner_t\">fl_owner_t</a> <a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#file_count\">file_count</a>(<a class=\"id\" href=\"#filp\">filp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"VFS: Close: file count is 0\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_op\">f_op</a> && <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#flush\">flush</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#flush\">flush</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#id\">id</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dnotify_flush\">dnotify_flush</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#locks_remove_posix\">locks_remove_posix</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fput\">fput</a>(<a class=\"id\" href=\"#filp\">filp</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#filp_close\">filp_close</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Careful here! We test whether the file pointer is NULL before</span>", 
"<span class=\"comment\"> * releasing the fd. This ensures that one clone task can't release</span>", 
"<span class=\"comment\"> * an fd while another clone is opening it.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE1\">SYSCALL_DEFINE1</a>(<a class=\"id\" href=\"#close\">close</a>, unsigned int, <a class=\"id\" href=\"#fd\">fd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> * <a class=\"id\" href=\"#filp\">filp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#files_struct\">files_struct</a> *<a class=\"id\" href=\"#files\">files</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#files\">files</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fdtable\">fdtable</a> *<a class=\"id\" href=\"#fdt\">fdt</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#files\">files</a>-><a class=\"id\" href=\"#file_lock\">file_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fdt\">fdt</a> = <a class=\"id\" href=\"#files_fdtable\">files_fdtable</a>(<a class=\"id\" href=\"#files\">files</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fd\">fd</a> >= <a class=\"id\" href=\"#fdt\">fdt</a>-><a class=\"id\" href=\"#max_fds\">max_fds</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#filp\">filp</a> = <a class=\"id\" href=\"#fdt\">fdt</a>-><a class=\"id\" href=\"#fd\">fd</a>[<a class=\"id\" href=\"#fd\">fd</a>];", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#filp\">filp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#fdt\">fdt</a>-><a class=\"id\" href=\"#fd\">fd</a>[<a class=\"id\" href=\"#fd\">fd</a>], <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FD_CLR\">FD_CLR</a>(<a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#fdt\">fdt</a>-><a class=\"id\" href=\"#close_on_exec\">close_on_exec</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__put_unused_fd\">__put_unused_fd</a>(<a class=\"id\" href=\"#files\">files</a>, <a class=\"id\" href=\"#fd\">fd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#files\">files</a>-><a class=\"id\" href=\"#file_lock\">file_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#filp_close\">filp_close</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#files\">files</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* can't restart close syscall because file table entry was cleared */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#retval\">retval</a> == -<a class=\"id\" href=\"#ERESTARTSYS\">ERESTARTSYS</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#retval\">retval</a> == -<a class=\"id\" href=\"#ERESTARTNOINTR\">ERESTARTNOINTR</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#retval\">retval</a> == -<a class=\"id\" href=\"#ERESTARTNOHAND\">ERESTARTNOHAND</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#retval\">retval</a> == -<a class=\"id\" href=\"#ERESTART_RESTARTBLOCK\">ERESTART_RESTARTBLOCK</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#EINTR\">EINTR</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#files\">files</a>-><a class=\"id\" href=\"#file_lock\">file_lock</a>);", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EBADF\">EBADF</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sys_close\">sys_close</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This routine simulates a hangup on the tty, to arrange that users</span>", 
"<span class=\"comment\"> * are given clean terminals at login time.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE0\">SYSCALL_DEFINE0</a>(<a class=\"id\" href=\"#vhangup\">vhangup</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_TTY_CONFIG\">CAP_SYS_TTY_CONFIG</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tty_vhangup_self\">tty_vhangup_self</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called when an inode is about to be open.</span>", 
"<span class=\"comment\"> * We use this to disallow opening large files on 32bit systems if</span>", 
"<span class=\"comment\"> * the caller didn't specify O_LARGEFILE.  On 64bit systems we force</span>", 
"<span class=\"comment\"> * on this flag in sys_open.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#generic_file_open\">generic_file_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> * <a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> * <a class=\"id\" href=\"#filp\">filp</a>)", 
"{", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a> &amp; <a class=\"id\" href=\"#O_LARGEFILE\">O_LARGEFILE</a>) && <a class=\"id\" href=\"#i_size_read\">i_size_read</a>(<a class=\"id\" href=\"#inode\">inode</a>) &gt; <a class=\"id\" href=\"#MAX_NON_LFS\">MAX_NON_LFS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EOVERFLOW\">EOVERFLOW</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#generic_file_open\">generic_file_open</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is used by subsystems that don't want seekable</span>", 
"<span class=\"comment\"> * file descriptors. The function is not supposed to ever fail, the only</span>", 
"<span class=\"comment\"> * reason it returns an 'int' and not 'void' is so that it can be plugged</span>", 
"<span class=\"comment\"> * directly into file_operations structure.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#nonseekable_open\">nonseekable_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &= ~(<a class=\"id\" href=\"#FMODE_LSEEK\">FMODE_LSEEK</a> | <a class=\"id\" href=\"#FMODE_PREAD\">FMODE_PREAD</a> | <a class=\"id\" href=\"#FMODE_PWRITE\">FMODE_PWRITE</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#nonseekable_open\">nonseekable_open</a>);", 
];
xr_frag_insert('l/06/dfc9153e7ab6e5e8792b62d8dd7496d9886ce3.xr', __xr_tmp);
