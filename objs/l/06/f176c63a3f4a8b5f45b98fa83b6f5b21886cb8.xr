var __xr_tmp = [
"", 
"static int <a class=\"id\" href=\"#genregs_set\">genregs_set</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#target\">target</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       const struct <a class=\"id\" href=\"#user_regset\">user_regset</a> *<a class=\"id\" href=\"#regset\">regset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       unsigned int <a class=\"id\" href=\"#pos\">pos</a>, unsigned int <a class=\"id\" href=\"#count\">count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       const void *<a class=\"id\" href=\"#kbuf\">kbuf</a>, const void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#ubuf\">ubuf</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kbuf\">kbuf</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>const unsigned long *<a class=\"id\" href=\"#k\">k</a> = <a class=\"id\" href=\"#kbuf\">kbuf</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#count\">count</a> >= sizeof(*<a class=\"id\" href=\"#k\">k</a>) && !<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#putreg\">putreg</a>(<a class=\"id\" href=\"#target\">target</a>, <a class=\"id\" href=\"#pos\">pos</a>, *<a class=\"id\" href=\"#k\">k</a>++);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> -= sizeof(*<a class=\"id\" href=\"#k\">k</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> += sizeof(*<a class=\"id\" href=\"#k\">k</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>const unsigned long  <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#u\">u</a> = <a class=\"id\" href=\"#ubuf\">ubuf</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#count\">count</a> >= sizeof(*<a class=\"id\" href=\"#u\">u</a>) && !<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#word\">word</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__get_user\">__get_user</a>(<a class=\"id\" href=\"#word\">word</a>, <a class=\"id\" href=\"#u\">u</a>++);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#putreg\">putreg</a>(<a class=\"id\" href=\"#target\">target</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#word\">word</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> -= sizeof(*<a class=\"id\" href=\"#u\">u</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> += sizeof(*<a class=\"id\" href=\"#u\">u</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ptrace_triggered\">ptrace_triggered</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#bp\">bp</a>, int <a class=\"id\" href=\"#nmi\">nmi</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#perf_sample_data\">perf_sample_data</a> *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#thread_struct\">thread_struct</a> *<a class=\"id\" href=\"#thread\">thread</a> = &amp;(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#thread\">thread</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Store in the virtual DR6 register the fact that the breakpoint</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * was hit so the thread's debugger will see it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#HBP_NUM\">HBP_NUM</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#thread\">thread</a>-><a class=\"id\" href=\"#ptrace_bps\">ptrace_bps</a>[<a class=\"id\" href=\"#i\">i</a>] == <a class=\"id\" href=\"#bp\">bp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#thread\">thread</a>-><a class=\"id\" href=\"#debugreg6\">debugreg6</a> |= (<a class=\"id\" href=\"#DR_TRAP0\">DR_TRAP0</a> << <a class=\"id\" href=\"#i\">i</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Walk through every ptrace breakpoints for this thread and</span>", 
"<span class=\"comment\"> * build the dr7 value on top of their attributes.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned long <a class=\"id\" href=\"#ptrace_get_dr7\">ptrace_get_dr7</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#bp\">bp</a>[])", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#dr7\">dr7</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#arch_hw_breakpoint\">arch_hw_breakpoint</a> *<a class=\"id\" href=\"#info\">info</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#HBP_NUM\">HBP_NUM</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bp\">bp</a>[<a class=\"id\" href=\"#i\">i</a>] && !<a class=\"id\" href=\"#bp\">bp</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#disabled\">disabled</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a> = <a class=\"id\" href=\"#counter_arch_bp\">counter_arch_bp</a>(<a class=\"id\" href=\"#bp\">bp</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dr7\">dr7</a> |= <a class=\"id\" href=\"#encode_dr7\">encode_dr7</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dr7\">dr7</a>;", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#ptrace_modify_breakpoint\">ptrace_modify_breakpoint</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#bp\">bp</a>, int <a class=\"id\" href=\"#len\">len</a>, int <a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, int <a class=\"id\" href=\"#disabled\">disabled</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#gen_len\">gen_len</a>, <a class=\"id\" href=\"#gen_type\">gen_type</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_attr\">perf_event_attr</a> <a class=\"id\" href=\"#attr\">attr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We should have at least an inactive breakpoint at this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * slot. It means the user is writing dr7 without having</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * written the address register first</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bp\">bp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#arch_bp_generic_fields\">arch_bp_generic_fields</a>(<a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#type\">type</a>, &amp;<a class=\"id\" href=\"#gen_len\">gen_len</a>, &amp;<a class=\"id\" href=\"#gen_type\">gen_type</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#attr\">attr</a> = <a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#attr\">attr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#bp_len\">bp_len</a> = <a class=\"id\" href=\"#gen_len\">gen_len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#bp_type\">bp_type</a> = <a class=\"id\" href=\"#gen_type\">gen_type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#disabled\">disabled</a> = <a class=\"id\" href=\"#disabled\">disabled</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#modify_user_hw_breakpoint\">modify_user_hw_breakpoint</a>(<a class=\"id\" href=\"#bp\">bp</a>, &amp;<a class=\"id\" href=\"#attr\">attr</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Handle ptrace writes to debug register 7.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ptrace_write_dr7\">ptrace_write_dr7</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, unsigned long <a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#thread_struct\">thread_struct</a> *<a class=\"id\" href=\"#thread\">thread</a> = &amp;(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread\">thread</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#old_dr7\">old_dr7</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#orig_ret\">orig_ret</a> = 0, <a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#enabled\">enabled</a>, <a class=\"id\" href=\"#second_pass\">second_pass</a> = 0;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#bp\">bp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> &= ~<a class=\"id\" href=\"#DR_CONTROL_RESERVED\">DR_CONTROL_RESERVED</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_dr7\">old_dr7</a> = <a class=\"id\" href=\"#ptrace_get_dr7\">ptrace_get_dr7</a>(<a class=\"id\" href=\"#thread\">thread</a>-><a class=\"id\" href=\"#ptrace_bps\">ptrace_bps</a>);", 
"<a class=\"id\" href=\"#restore\">restore</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Loop through all the hardware breakpoints, making the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * appropriate changes to each.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#HBP_NUM\">HBP_NUM</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enabled\">enabled</a> = <a class=\"id\" href=\"#decode_dr7\">decode_dr7</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#i\">i</a>, &amp;<a class=\"id\" href=\"#len\">len</a>, &amp;<a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a> = <a class=\"id\" href=\"#thread\">thread</a>-><a class=\"id\" href=\"#ptrace_bps\">ptrace_bps</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#enabled\">enabled</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bp\">bp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Don't unregister the breakpoints right-away,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * unless all register_user_hw_breakpoint()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * requests have succeeded. This prevents</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * any window of opportunity for debug</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * register grabbing by other users.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#second_pass\">second_pass</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ptrace_modify_breakpoint\">ptrace_modify_breakpoint</a>(<a class=\"id\" href=\"#bp\">bp</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#tsk\">tsk</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ptrace_modify_breakpoint\">ptrace_modify_breakpoint</a>(<a class=\"id\" href=\"#bp\">bp</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#tsk\">tsk</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Make a second pass to free the remaining unused breakpoints</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * or to restore the original breakpoints if an error occurred.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#second_pass\">second_pass</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#second_pass\">second_pass</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#orig_ret\">orig_ret</a> = <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#old_dr7\">old_dr7</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#restore\">restore</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return ((<a class=\"id\" href=\"#orig_ret\">orig_ret</a> &lt; 0) ? <a class=\"id\" href=\"#orig_ret\">orig_ret</a> : <a class=\"id\" href=\"#rc\">rc</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Handle PTRACE_PEEKUSR calls for the debug register area.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned long <a class=\"id\" href=\"#ptrace_get_debugreg\">ptrace_get_debugreg</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, int <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#thread_struct\">thread_struct</a> *<a class=\"id\" href=\"#thread\">thread</a> = &amp;(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread\">thread</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#val\">val</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> &lt; <a class=\"id\" href=\"#HBP_NUM\">HBP_NUM</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#bp\">bp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a> = <a class=\"id\" href=\"#thread\">thread</a>-><a class=\"id\" href=\"#ptrace_bps\">ptrace_bps</a>[<a class=\"id\" href=\"#n\">n</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bp\">bp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#hw\">hw</a>.<a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#address\">address</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#n\">n</a> == 6) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#thread\">thread</a>-><a class=\"id\" href=\"#debugreg6\">debugreg6</a>;", 
"<span class=\"ts\"/> } else if (<a class=\"id\" href=\"#n\">n</a> == 7) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#thread\">thread</a>-><a class=\"id\" href=\"#ptrace_dr7\">ptrace_dr7</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#val\">val</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ptrace_set_breakpoint_addr\">ptrace_set_breakpoint_addr</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, int <a class=\"id\" href=\"#nr\">nr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#bp\">bp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#thread_struct\">thread_struct</a> *<a class=\"id\" href=\"#t\">t</a> = &amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread\">thread</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_attr\">perf_event_attr</a> <a class=\"id\" href=\"#attr\">attr</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#ptrace_bps\">ptrace_bps</a>[<a class=\"id\" href=\"#nr\">nr</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptrace_breakpoint_init\">ptrace_breakpoint_init</a>(&amp;<a class=\"id\" href=\"#attr\">attr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Put stub len and type to register (reserve) an inactive but</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * correct bp</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#bp_addr\">bp_addr</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#bp_len\">bp_len</a> = <a class=\"id\" href=\"#HW_BREAKPOINT_LEN_1\">HW_BREAKPOINT_LEN_1</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#bp_type\">bp_type</a> = <a class=\"id\" href=\"#HW_BREAKPOINT_W\">HW_BREAKPOINT_W</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#disabled\">disabled</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a> = <a class=\"id\" href=\"#register_user_hw_breakpoint\">register_user_hw_breakpoint</a>(&amp;<a class=\"id\" href=\"#attr\">attr</a>, <a class=\"id\" href=\"#ptrace_triggered\">ptrace_triggered</a>, <a class=\"id\" href=\"#tsk\">tsk</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * CHECKME: the previous code returned -EIO if the addr wasn't</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * a valid task virtual addr. The new one will return -EINVAL in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *  this case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * -EINVAL may be what we want for in-kernel breakpoints users,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * but -EIO looks better for ptrace, since we refuse a register</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * writing for the user. And anyway this is the previous</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * behaviour.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#bp\">bp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#bp\">bp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#ptrace_bps\">ptrace_bps</a>[<a class=\"id\" href=\"#nr\">nr</a>] = <a class=\"id\" href=\"#bp\">bp</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bp\">bp</a> = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#ptrace_bps\">ptrace_bps</a>[<a class=\"id\" href=\"#nr\">nr</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#attr\">attr</a> = <a class=\"id\" href=\"#bp\">bp</a>-><a class=\"id\" href=\"#attr\">attr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#bp_addr\">bp_addr</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#modify_user_hw_breakpoint\">modify_user_hw_breakpoint</a>(<a class=\"id\" href=\"#bp\">bp</a>, &amp;<a class=\"id\" href=\"#attr\">attr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Handle PTRACE_POKEUSR calls for the debug register area.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ptrace_set_debugreg\">ptrace_set_debugreg</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, int <a class=\"id\" href=\"#n\">n</a>, unsigned long <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#thread_struct\">thread_struct</a> *<a class=\"id\" href=\"#thread\">thread</a> = &amp;(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#thread\">thread</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* There are no DR4 or DR5 registers */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> == 4 || <a class=\"id\" href=\"#n\">n</a> == 5)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> == 6) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#thread\">thread</a>-><a class=\"id\" href=\"#debugreg6\">debugreg6</a> = <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#ret_path\">ret_path</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> &lt; <a class=\"id\" href=\"#HBP_NUM\">HBP_NUM</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ptrace_set_breakpoint_addr\">ptrace_set_breakpoint_addr</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* All that's left is DR7 */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> == 7) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ptrace_write_dr7\">ptrace_write_dr7</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#thread\">thread</a>-><a class=\"id\" href=\"#ptrace_dr7\">ptrace_dr7</a> = <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#ret_path\">ret_path</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * These access the current or another (stopped) task's io permission</span>", 
"<span class=\"comment\"> * bitmap for debugging or core dump.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ioperm_active\">ioperm_active</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#target\">target</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const struct <a class=\"id\" href=\"#user_regset\">user_regset</a> *<a class=\"id\" href=\"#regset\">regset</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#target\">target</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#io_bitmap_max\">io_bitmap_max</a> / <a class=\"id\" href=\"#regset\">regset</a>-><a class=\"id\" href=\"#size\">size</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ioperm_get\">ioperm_get</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#target\">target</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      const struct <a class=\"id\" href=\"#user_regset\">user_regset</a> *<a class=\"id\" href=\"#regset\">regset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      unsigned int <a class=\"id\" href=\"#pos\">pos</a>, unsigned int <a class=\"id\" href=\"#count\">count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      void *<a class=\"id\" href=\"#kbuf\">kbuf</a>, void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#ubuf\">ubuf</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#target\">target</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#io_bitmap_ptr\">io_bitmap_ptr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENXIO\">ENXIO</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#user_regset_copyout\">user_regset_copyout</a>(&amp;<a class=\"id\" href=\"#pos\">pos</a>, &amp;<a class=\"id\" href=\"#count\">count</a>, &amp;<a class=\"id\" href=\"#kbuf\">kbuf</a>, &amp;<a class=\"id\" href=\"#ubuf\">ubuf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#target\">target</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#io_bitmap_ptr\">io_bitmap_ptr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   0, <a class=\"id\" href=\"#IO_BITMAP_BYTES\">IO_BITMAP_BYTES</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called by kernel/ptrace.c when detaching..</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Make sure the single step bit is not set.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ptrace_disable\">ptrace_disable</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#child\">child</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#user_disable_single_step\">user_disable_single_step</a>(<a class=\"id\" href=\"#child\">child</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#TIF_SYSCALL_EMU\">TIF_SYSCALL_EMU</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_tsk_thread_flag\">clear_tsk_thread_flag</a>(<a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#TIF_SYSCALL_EMU\">TIF_SYSCALL_EMU</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a> || <a class=\"id\" href=\"#defined\">defined</a> <a class=\"id\" href=\"#CONFIG_IA32_EMULATION\">CONFIG_IA32_EMULATION</a>", 
"static const struct <a class=\"id\" href=\"#user_regset_view\">user_regset_view</a> <a class=\"id\" href=\"#user_x86_32_view\">user_x86_32_view</a>; <span class=\"comment\">/* Initialized below. */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"long <a class=\"id\" href=\"#arch_ptrace\">arch_ptrace</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#child\">child</a>, long <a class=\"id\" href=\"#request\">request</a>, long <a class=\"id\" href=\"#addr\">addr</a>, long <a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#datap\">datap</a> = (unsigned long <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#request\">request</a>) {", 
"<span class=\"ts\"/><span class=\"comment\">/* read the word at location addr in the USER area. */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PTRACE_PEEKUSR\">PTRACE_PEEKUSR</a>: {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#addr\">addr</a> &amp; (sizeof(<a class=\"id\" href=\"#data\">data</a>) - 1)) || <a class=\"id\" href=\"#addr\">addr</a> &lt; 0 ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#addr\">addr</a> >= sizeof(struct <a class=\"id\" href=\"#user\">user</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = 0;  <span class=\"comment\">/* Default return condition */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> &lt; sizeof(struct <a class=\"id\" href=\"#user_regs_struct\">user_regs_struct</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#getreg\">getreg</a>(<a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#addr\">addr</a> >= <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user\">user</a>, <a class=\"id\" href=\"#u_debugreg\">u_debugreg</a>[0]) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#addr\">addr</a> <= <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user\">user</a>, <a class=\"id\" href=\"#u_debugreg\">u_debugreg</a>[7])) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> -= <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user\">user</a>, <a class=\"id\" href=\"#u_debugreg\">u_debugreg</a>[0]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#ptrace_get_debugreg\">ptrace_get_debugreg</a>(<a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#addr\">addr</a> / sizeof(<a class=\"id\" href=\"#data\">data</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#put_user\">put_user</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#datap\">datap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PTRACE_POKEUSR\">PTRACE_POKEUSR</a>: <span class=\"comment\">/* write the word at location addr in the USER area */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#addr\">addr</a> &amp; (sizeof(<a class=\"id\" href=\"#data\">data</a>) - 1)) || <a class=\"id\" href=\"#addr\">addr</a> &lt; 0 ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#addr\">addr</a> >= sizeof(struct <a class=\"id\" href=\"#user\">user</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> &lt; sizeof(struct <a class=\"id\" href=\"#user_regs_struct\">user_regs_struct</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#putreg\">putreg</a>(<a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#addr\">addr</a> >= <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user\">user</a>, <a class=\"id\" href=\"#u_debugreg\">u_debugreg</a>[0]) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#addr\">addr</a> <= <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user\">user</a>, <a class=\"id\" href=\"#u_debugreg\">u_debugreg</a>[7])) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> -= <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user\">user</a>, <a class=\"id\" href=\"#u_debugreg\">u_debugreg</a>[0]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ptrace_set_debugreg\">ptrace_set_debugreg</a>(<a class=\"id\" href=\"#child\">child</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#addr\">addr</a> / sizeof(<a class=\"id\" href=\"#data\">data</a>), <a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PTRACE_GETREGS\">PTRACE_GETREGS</a>:<span class=\"ts\"/><span class=\"comment\">/* Get all gp regs from the child. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#copy_regset_to_user\">copy_regset_to_user</a>(<a class=\"id\" href=\"#child\">child</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#task_user_regset_view\">task_user_regset_view</a>(<a class=\"id\" href=\"#current\">current</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#REGSET_GENERAL\">REGSET_GENERAL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   0, sizeof(struct <a class=\"id\" href=\"#user_regs_struct\">user_regs_struct</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#datap\">datap</a>);", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PTRACE_SETREGS\">PTRACE_SETREGS</a>:<span class=\"ts\"/><span class=\"comment\">/* Set all gp regs in the child. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#copy_regset_from_user\">copy_regset_from_user</a>(<a class=\"id\" href=\"#child\">child</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#task_user_regset_view\">task_user_regset_view</a>(<a class=\"id\" href=\"#current\">current</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#REGSET_GENERAL\">REGSET_GENERAL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     0, sizeof(struct <a class=\"id\" href=\"#user_regs_struct\">user_regs_struct</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#datap\">datap</a>);", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PTRACE_GETFPREGS\">PTRACE_GETFPREGS</a>:<span class=\"ts\"/><span class=\"comment\">/* Get the child FPU state. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#copy_regset_to_user\">copy_regset_to_user</a>(<a class=\"id\" href=\"#child\">child</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#task_user_regset_view\">task_user_regset_view</a>(<a class=\"id\" href=\"#current\">current</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#REGSET_FP\">REGSET_FP</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   0, sizeof(struct <a class=\"id\" href=\"#user_i387_struct\">user_i387_struct</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#datap\">datap</a>);", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PTRACE_SETFPREGS\">PTRACE_SETFPREGS</a>:<span class=\"ts\"/><span class=\"comment\">/* Set the child FPU state. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#copy_regset_from_user\">copy_regset_from_user</a>(<a class=\"id\" href=\"#child\">child</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#task_user_regset_view\">task_user_regset_view</a>(<a class=\"id\" href=\"#current\">current</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#REGSET_FP\">REGSET_FP</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     0, sizeof(struct <a class=\"id\" href=\"#user_i387_struct\">user_i387_struct</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#datap\">datap</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PTRACE_GETFPXREGS\">PTRACE_GETFPXREGS</a>:<span class=\"ts\"/><span class=\"comment\">/* Get the child extended FPU state. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#copy_regset_to_user\">copy_regset_to_user</a>(<a class=\"id\" href=\"#child\">child</a>, &amp;<a class=\"id\" href=\"#user_x86_32_view\">user_x86_32_view</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#REGSET_XFP\">REGSET_XFP</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   0, sizeof(struct <a class=\"id\" href=\"#user_fxsr_struct\">user_fxsr_struct</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#datap\">datap</a>) ? -<a class=\"id\" href=\"#EIO\">EIO</a> : 0;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PTRACE_SETFPXREGS\">PTRACE_SETFPXREGS</a>:<span class=\"ts\"/><span class=\"comment\">/* Set the child extended FPU state. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#copy_regset_from_user\">copy_regset_from_user</a>(<a class=\"id\" href=\"#child\">child</a>, &amp;<a class=\"id\" href=\"#user_x86_32_view\">user_x86_32_view</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#REGSET_XFP\">REGSET_XFP</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     0, sizeof(struct <a class=\"id\" href=\"#user_fxsr_struct\">user_fxsr_struct</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#datap\">datap</a>) ? -<a class=\"id\" href=\"#EIO\">EIO</a> : 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a> || <a class=\"id\" href=\"#defined\">defined</a> <a class=\"id\" href=\"#CONFIG_IA32_EMULATION\">CONFIG_IA32_EMULATION</a>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PTRACE_GET_THREAD_AREA\">PTRACE_GET_THREAD_AREA</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#do_get_thread_area\">do_get_thread_area</a>(<a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> (struct <a class=\"id\" href=\"#user_desc\">user_desc</a> <a class=\"id\" href=\"#__user\">__user</a> *) <a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PTRACE_SET_THREAD_AREA\">PTRACE_SET_THREAD_AREA</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#do_set_thread_area\">do_set_thread_area</a>(<a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> (struct <a class=\"id\" href=\"#user_desc\">user_desc</a> <a class=\"id\" href=\"#__user\">__user</a> *) <a class=\"id\" href=\"#data\">data</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* normal 64bit interface to access TLS data.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   Works just like arch_prctl, except that the arguments</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   are reversed. */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PTRACE_ARCH_PRCTL\">PTRACE_ARCH_PRCTL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#do_arch_prctl\">do_arch_prctl</a>(<a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ptrace_request\">ptrace_request</a>(<a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#request\">request</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_IA32_EMULATION\">CONFIG_IA32_EMULATION</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#compat\">compat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#syscalls\">syscalls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#ia32\">ia32</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#user32\">user32</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#R32\">R32</a>(<a class=\"id\" href=\"#l\">l</a>,<a class=\"id\" href=\"#q\">q</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user32\">user32</a>, <a class=\"id\" href=\"#regs\">regs</a>.<a class=\"id\" href=\"#l\">l</a>):<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#value\">value</a>; break", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SEG32\">SEG32</a>(<a class=\"id\" href=\"#rs\">rs</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user32\">user32</a>, <a class=\"id\" href=\"#regs\">regs</a>.<a class=\"id\" href=\"#rs\">rs</a>):<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#set_segment_reg\">set_segment_reg</a>(<a class=\"id\" href=\"#child\">child</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user_regs_struct\">user_regs_struct</a>, <a class=\"id\" href=\"#rs\">rs</a>), \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#value\">value</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>break", 
"", 
"static int <a class=\"id\" href=\"#putreg32\">putreg32</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#child\">child</a>, unsigned <a class=\"id\" href=\"#regno\">regno</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a> = <a class=\"id\" href=\"#task_pt_regs\">task_pt_regs</a>(<a class=\"id\" href=\"#child\">child</a>);", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#regno\">regno</a>) {", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SEG32\">SEG32</a>(<a class=\"id\" href=\"#cs\">cs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SEG32\">SEG32</a>(<a class=\"id\" href=\"#ds\">ds</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SEG32\">SEG32</a>(<a class=\"id\" href=\"#es\">es</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SEG32\">SEG32</a>(<a class=\"id\" href=\"#fs\">fs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SEG32\">SEG32</a>(<a class=\"id\" href=\"#gs\">gs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SEG32\">SEG32</a>(<a class=\"id\" href=\"#ss\">ss</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#R32\">R32</a>(<a class=\"id\" href=\"#ebx\">ebx</a>, <a class=\"id\" href=\"#bx\">bx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#R32\">R32</a>(<a class=\"id\" href=\"#ecx\">ecx</a>, <a class=\"id\" href=\"#cx\">cx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#R32\">R32</a>(<a class=\"id\" href=\"#edx\">edx</a>, <a class=\"id\" href=\"#dx\">dx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#R32\">R32</a>(<a class=\"id\" href=\"#edi\">edi</a>, <a class=\"id\" href=\"#di\">di</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#R32\">R32</a>(<a class=\"id\" href=\"#esi\">esi</a>, <a class=\"id\" href=\"#si\">si</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#R32\">R32</a>(<a class=\"id\" href=\"#ebp\">ebp</a>, <a class=\"id\" href=\"#bp\">bp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#R32\">R32</a>(<a class=\"id\" href=\"#eax\">eax</a>, <a class=\"id\" href=\"#ax\">ax</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#R32\">R32</a>(<a class=\"id\" href=\"#eip\">eip</a>, <a class=\"id\" href=\"#ip\">ip</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#R32\">R32</a>(<a class=\"id\" href=\"#esp\">esp</a>, <a class=\"id\" href=\"#sp\">sp</a>);", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user32\">user32</a>, <a class=\"id\" href=\"#regs\">regs</a>.<a class=\"id\" href=\"#orig_eax\">orig_eax</a>):", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * A 32-bit debugger setting orig_eax means to restore</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the state of the task restarting a 32-bit syscall.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Make sure we interpret the -ERESTART* codes correctly</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * in case the task is not actually still sitting at the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * exit from a 32-bit syscall with TS_COMPAT still set.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#orig_ax\">orig_ax</a> = <a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#syscall_get_nr\">syscall_get_nr</a>(<a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#regs\">regs</a>) >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_thread_info\">task_thread_info</a>(<a class=\"id\" href=\"#child\">child</a>)-><a class=\"id\" href=\"#status\">status</a> |= <a class=\"id\" href=\"#TS_COMPAT\">TS_COMPAT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user32\">user32</a>, <a class=\"id\" href=\"#regs\">regs</a>.<a class=\"id\" href=\"#eflags\">eflags</a>):", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#set_flags\">set_flags</a>(<a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user32\">user32</a>, <a class=\"id\" href=\"#u_debugreg\">u_debugreg</a>[0]) ...", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user32\">user32</a>, <a class=\"id\" href=\"#u_debugreg\">u_debugreg</a>[7]):", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#regno\">regno</a> -= <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user32\">user32</a>, <a class=\"id\" href=\"#u_debugreg\">u_debugreg</a>[0]);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ptrace_set_debugreg\">ptrace_set_debugreg</a>(<a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#regno\">regno</a> / 4, <a class=\"id\" href=\"#value\">value</a>);", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#regno\">regno</a> &gt; sizeof(struct <a class=\"id\" href=\"#user32\">user32</a>) || (<a class=\"id\" href=\"#regno\">regno</a> &amp; 3))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Other dummy fields in the virtual user structure</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * are ignored</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#R32\">R32</a>", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#SEG32\">SEG32</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#R32\">R32</a>(<a class=\"id\" href=\"#l\">l</a>,<a class=\"id\" href=\"#q\">q</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user32\">user32</a>, <a class=\"id\" href=\"#regs\">regs</a>.<a class=\"id\" href=\"#l\">l</a>):<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#q\">q</a>; break", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SEG32\">SEG32</a>(<a class=\"id\" href=\"#rs\">rs</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user32\">user32</a>, <a class=\"id\" href=\"#regs\">regs</a>.<a class=\"id\" href=\"#rs\">rs</a>):<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#get_segment_reg\">get_segment_reg</a>(<a class=\"id\" href=\"#child\">child</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user_regs_struct\">user_regs_struct</a>, <a class=\"id\" href=\"#rs\">rs</a>)); \\", 
"<span class=\"ts\"/><span class=\"ts\"/>break", 
"", 
"static int <a class=\"id\" href=\"#getreg32\">getreg32</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#child\">child</a>, unsigned <a class=\"id\" href=\"#regno\">regno</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a> = <a class=\"id\" href=\"#task_pt_regs\">task_pt_regs</a>(<a class=\"id\" href=\"#child\">child</a>);", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#regno\">regno</a>) {", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SEG32\">SEG32</a>(<a class=\"id\" href=\"#ds\">ds</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SEG32\">SEG32</a>(<a class=\"id\" href=\"#es\">es</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SEG32\">SEG32</a>(<a class=\"id\" href=\"#fs\">fs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SEG32\">SEG32</a>(<a class=\"id\" href=\"#gs\">gs</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#R32\">R32</a>(<a class=\"id\" href=\"#cs\">cs</a>, <a class=\"id\" href=\"#cs\">cs</a>);", 
];
xr_frag_insert('l/06/f176c63a3f4a8b5f45b98fa83b6f5b21886cb8.xr', __xr_tmp);
