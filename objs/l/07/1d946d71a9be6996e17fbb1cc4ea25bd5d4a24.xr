var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Handle caching attributes in page tables (PAT)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Authors: Venkatesh Pallipadi &lt;venkatesh.pallipadi@intel.com&gt;</span>", 
"<span class=\"comment\"> *          Suresh B Siddha &lt;suresh.b.siddha@intel.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Interval tree (augmented rbtree) used to store the PAT memory type</span>", 
"<span class=\"comment\"> * reservations.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#seq_file\">seq_file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#debugfs\">debugfs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rbtree\">rbtree</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#gfp\">gfp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pgtable\">pgtable</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pat\">pat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"pat_internal.h\"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The memtype tree keeps track of memory type for specific</span>", 
"<span class=\"comment\"> * physical memory areas. Without proper tracking, conflicting memory</span>", 
"<span class=\"comment\"> * types in different mappings can cause CPU cache corruption.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The tree is an interval tree (augmented rbtree) with tree ordered</span>", 
"<span class=\"comment\"> * on starting address. Tree can contain multiple entries for</span>", 
"<span class=\"comment\"> * different regions which overlap. All the aliases have the same</span>", 
"<span class=\"comment\"> * cache attributes of course.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * memtype_lock protects the rbtree.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static struct <a class=\"id\" href=\"#rb_root\">rb_root</a> <a class=\"id\" href=\"#memtype_rbroot\">memtype_rbroot</a> = <a class=\"id\" href=\"#RB_ROOT\">RB_ROOT</a>;", 
"", 
"static int <a class=\"id\" href=\"#is_node_overlap\">is_node_overlap</a>(struct <a class=\"id\" href=\"#memtype\">memtype</a> *<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#start\">start</a> >= <a class=\"id\" href=\"#end\">end</a> || <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#end\">end</a> <= <a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#get_subtree_max_end\">get_subtree_max_end</a>(struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#node\">node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#memtype\">memtype</a> *<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#node\">node</a>, struct <a class=\"id\" href=\"#memtype\">memtype</a>, <a class=\"id\" href=\"#rb\">rb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#subtree_max_end\">subtree_max_end</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Update 'subtree_max_end' for a node, based on node and its children */</span>", 
"static void <a class=\"id\" href=\"#memtype_rb_augment_cb\">memtype_rb_augment_cb</a>(struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#node\">node</a>, void *<a class=\"id\" href=\"#__unused\">__unused</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#memtype\">memtype</a> *<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#max_end\">max_end</a>, <a class=\"id\" href=\"#child_max_end\">child_max_end</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#node\">node</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#node\">node</a>, struct <a class=\"id\" href=\"#memtype\">memtype</a>, <a class=\"id\" href=\"#rb\">rb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_end\">max_end</a> = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#child_max_end\">child_max_end</a> = <a class=\"id\" href=\"#get_subtree_max_end\">get_subtree_max_end</a>(<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#rb_right\">rb_right</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#child_max_end\">child_max_end</a> &gt; <a class=\"id\" href=\"#max_end\">max_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_end\">max_end</a> = <a class=\"id\" href=\"#child_max_end\">child_max_end</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#child_max_end\">child_max_end</a> = <a class=\"id\" href=\"#get_subtree_max_end\">get_subtree_max_end</a>(<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#rb_left\">rb_left</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#child_max_end\">child_max_end</a> &gt; <a class=\"id\" href=\"#max_end\">max_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_end\">max_end</a> = <a class=\"id\" href=\"#child_max_end\">child_max_end</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#subtree_max_end\">subtree_max_end</a> = <a class=\"id\" href=\"#max_end\">max_end</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Find the first (lowest start addr) overlapping range from rb tree */</span>", 
"static struct <a class=\"id\" href=\"#memtype\">memtype</a> *<a class=\"id\" href=\"#memtype_rb_lowest_match\">memtype_rb_lowest_match</a>(struct <a class=\"id\" href=\"#rb_root\">rb_root</a> *<a class=\"id\" href=\"#root\">root</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#rb_node\">rb_node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#memtype\">memtype</a> *<a class=\"id\" href=\"#last_lower\">last_lower</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#node\">node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#memtype\">memtype</a> *<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#node\">node</a>, struct <a class=\"id\" href=\"#memtype\">memtype</a>, <a class=\"id\" href=\"#rb\">rb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#get_subtree_max_end\">get_subtree_max_end</a>(<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#rb_left\">rb_left</a>) &gt; <a class=\"id\" href=\"#start\">start</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Lowest overlap if any must be on left side */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#rb_left\">rb_left</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#is_node_overlap\">is_node_overlap</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_lower\">last_lower</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#start\">start</a> >= <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#start\">start</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Lowest overlap if any must be on right side */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#rb_right\">rb_right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#last_lower\">last_lower</a>; <span class=\"comment\">/* Returns NULL if there is no overlap */</span>", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#memtype\">memtype</a> *<a class=\"id\" href=\"#memtype_rb_exact_match\">memtype_rb_exact_match</a>(struct <a class=\"id\" href=\"#rb_root\">rb_root</a> *<a class=\"id\" href=\"#root\">root</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#memtype\">memtype</a> *<a class=\"id\" href=\"#match\">match</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#match\">match</a> = <a class=\"id\" href=\"#memtype_rb_lowest_match\">memtype_rb_lowest_match</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#match\">match</a> != <a class=\"id\" href=\"#NULL\">NULL</a> && <a class=\"id\" href=\"#match\">match</a>-><a class=\"id\" href=\"#start\">start</a> &lt; <a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#match\">match</a>-><a class=\"id\" href=\"#start\">start</a> == <a class=\"id\" href=\"#start\">start</a> && <a class=\"id\" href=\"#match\">match</a>-><a class=\"id\" href=\"#end\">end</a> == <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#match\">match</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#rb_next\">rb_next</a>(&amp;<a class=\"id\" href=\"#match\">match</a>-><a class=\"id\" href=\"#rb\">rb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#node\">node</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#match\">match</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#node\">node</a>, struct <a class=\"id\" href=\"#memtype\">memtype</a>, <a class=\"id\" href=\"#rb\">rb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#match\">match</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>; <span class=\"comment\">/* Returns NULL if there is no exact match */</span>", 
"}", 
"", 
"static int <a class=\"id\" href=\"#memtype_rb_check_conflict\">memtype_rb_check_conflict</a>(struct <a class=\"id\" href=\"#rb_root\">rb_root</a> *<a class=\"id\" href=\"#root\">root</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#reqtype\">reqtype</a>, unsigned long *<a class=\"id\" href=\"#newtype\">newtype</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#memtype\">memtype</a> *<a class=\"id\" href=\"#match\">match</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#found_type\">found_type</a> = <a class=\"id\" href=\"#reqtype\">reqtype</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#match\">match</a> = <a class=\"id\" href=\"#memtype_rb_lowest_match\">memtype_rb_lowest_match</a>(&amp;<a class=\"id\" href=\"#memtype_rbroot\">memtype_rbroot</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#match\">match</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#success\">success</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#match\">match</a>-><a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#found_type\">found_type</a> && <a class=\"id\" href=\"#newtype\">newtype</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#failure\">failure</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"Overlap at 0x%Lx-0x%Lx\\n\", <a class=\"id\" href=\"#match\">match</a>-><a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#match\">match</a>-><a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#found_type\">found_type</a> = <a class=\"id\" href=\"#match\">match</a>-><a class=\"id\" href=\"#type\">type</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#rb_next\">rb_next</a>(&amp;<a class=\"id\" href=\"#match\">match</a>-><a class=\"id\" href=\"#rb\">rb</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#node\">node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#match\">match</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#node\">node</a>, struct <a class=\"id\" href=\"#memtype\">memtype</a>, <a class=\"id\" href=\"#rb\">rb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#match\">match</a>-><a class=\"id\" href=\"#start\">start</a> >= <a class=\"id\" href=\"#end\">end</a>) <span class=\"comment\">/* Checked all possible matches */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#success\">success</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_node_overlap\">is_node_overlap</a>(<a class=\"id\" href=\"#match\">match</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#match\">match</a>-><a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#found_type\">found_type</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#failure\">failure</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#rb_next\">rb_next</a>(&amp;<a class=\"id\" href=\"#match\">match</a>-><a class=\"id\" href=\"#rb\">rb</a>);", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#success\">success</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#newtype\">newtype</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#newtype\">newtype</a> = <a class=\"id\" href=\"#found_type\">found_type</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#failure\">failure</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"%s:%d conflicting memory types \"", 
"<span class=\"ts\"/><span class=\"ts\"/>\"%Lx-%Lx %s<->%s\\n\", <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#cattr_name\">cattr_name</a>(<a class=\"id\" href=\"#found_type\">found_type</a>), <a class=\"id\" href=\"#cattr_name\">cattr_name</a>(<a class=\"id\" href=\"#match\">match</a>-><a class=\"id\" href=\"#type\">type</a>));", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#memtype_rb_insert\">memtype_rb_insert</a>(struct <a class=\"id\" href=\"#rb_root\">rb_root</a> *<a class=\"id\" href=\"#root\">root</a>, struct <a class=\"id\" href=\"#memtype\">memtype</a> *<a class=\"id\" href=\"#newdata\">newdata</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> **<a class=\"id\" href=\"#node\">node</a> = &amp;(<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#rb_node\">rb_node</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#node\">node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#memtype\">memtype</a> *<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(*<a class=\"id\" href=\"#node\">node</a>, struct <a class=\"id\" href=\"#memtype\">memtype</a>, <a class=\"id\" href=\"#rb\">rb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#newdata\">newdata</a>-><a class=\"id\" href=\"#start\">start</a> <= <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = &amp;((*<a class=\"id\" href=\"#node\">node</a>)-><a class=\"id\" href=\"#rb_left\">rb_left</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#newdata\">newdata</a>-><a class=\"id\" href=\"#start\">start</a> &gt; <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = &amp;((*<a class=\"id\" href=\"#node\">node</a>)-><a class=\"id\" href=\"#rb_right\">rb_right</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_link_node\">rb_link_node</a>(&amp;<a class=\"id\" href=\"#newdata\">newdata</a>-><a class=\"id\" href=\"#rb\">rb</a>, <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_insert_color\">rb_insert_color</a>(&amp;<a class=\"id\" href=\"#newdata\">newdata</a>-><a class=\"id\" href=\"#rb\">rb</a>, <a class=\"id\" href=\"#root\">root</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_augment_insert\">rb_augment_insert</a>(&amp;<a class=\"id\" href=\"#newdata\">newdata</a>-><a class=\"id\" href=\"#rb\">rb</a>, <a class=\"id\" href=\"#memtype_rb_augment_cb\">memtype_rb_augment_cb</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#rbt_memtype_check_insert\">rbt_memtype_check_insert</a>(struct <a class=\"id\" href=\"#memtype\">memtype</a> *<a class=\"id\" href=\"#new\">new</a>, unsigned long *<a class=\"id\" href=\"#ret_type\">ret_type</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#memtype_rb_check_conflict\">memtype_rb_check_conflict</a>(&amp;<a class=\"id\" href=\"#memtype_rbroot\">memtype_rbroot</a>, <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#ret_type\">ret_type</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret_type\">ret_type</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#type\">type</a> = *<a class=\"id\" href=\"#ret_type\">ret_type</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#subtree_max_end\">subtree_max_end</a> = <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memtype_rb_insert\">memtype_rb_insert</a>(&amp;<a class=\"id\" href=\"#memtype_rbroot\">memtype_rbroot</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#memtype\">memtype</a> *<a class=\"id\" href=\"#rbt_memtype_erase\">rbt_memtype_erase</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#deepest\">deepest</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#memtype\">memtype</a> *<a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#memtype_rb_exact_match\">memtype_rb_exact_match</a>(&amp;<a class=\"id\" href=\"#memtype_rbroot\">memtype_rbroot</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#data\">data</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#deepest\">deepest</a> = <a class=\"id\" href=\"#rb_augment_erase_begin\">rb_augment_erase_begin</a>(&amp;<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#rb\">rb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_erase\">rb_erase</a>(&amp;<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#rb\">rb</a>, &amp;<a class=\"id\" href=\"#memtype_rbroot\">memtype_rbroot</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_augment_erase_end\">rb_augment_erase_end</a>(<a class=\"id\" href=\"#deepest\">deepest</a>, <a class=\"id\" href=\"#memtype_rb_augment_cb\">memtype_rb_augment_cb</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#data\">data</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#memtype\">memtype</a> *<a class=\"id\" href=\"#rbt_memtype_lookup\">rbt_memtype_lookup</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#memtype\">memtype</a> *<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#memtype_rb_lowest_match\">memtype_rb_lowest_match</a>(&amp;<a class=\"id\" href=\"#memtype_rbroot\">memtype_rbroot</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#data\">data</a>;", 
"}", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_DEBUG_FS\">CONFIG_DEBUG_FS</a>)", 
"int <a class=\"id\" href=\"#rbt_memtype_copy_nth_element\">rbt_memtype_copy_nth_element</a>(struct <a class=\"id\" href=\"#memtype\">memtype</a> *<a class=\"id\" href=\"#out\">out</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#rb_first\">rb_first</a>(&amp;<a class=\"id\" href=\"#memtype_rbroot\">memtype_rbroot</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#node\">node</a> && <a class=\"id\" href=\"#pos\">pos</a> != <a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#rb_next\">rb_next</a>(<a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#node\">node</a>) { <span class=\"comment\">/* pos == i */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#memtype\">memtype</a> *<a class=\"id\" href=\"#this\">this</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#node\">node</a>, struct <a class=\"id\" href=\"#memtype\">memtype</a>, <a class=\"id\" href=\"#rb\">rb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#out\">out</a> = *<a class=\"id\" href=\"#this\">this</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/07/1d946d71a9be6996e17fbb1cc4ea25bd5d4a24.xr', __xr_tmp);
