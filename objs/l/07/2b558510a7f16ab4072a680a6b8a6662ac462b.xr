var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * lib/hexdump.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License version 2 as</span>", 
"<span class=\"comment\"> * published by the Free Software Foundation. See README and COPYING for</span>", 
"<span class=\"comment\"> * more details.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ctype\">ctype</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"const char <a class=\"id\" href=\"#hex_asc\">hex_asc</a>[] = \"0123456789abcdef\";", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#hex_asc\">hex_asc</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * hex_to_bin - convert a hex digit to its real value</span>", 
"<span class=\"comment\"> * @ch: ascii character represents hex digit</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * hex_to_bin() converts one hex digit to its actual value or -1 in case of bad</span>", 
"<span class=\"comment\"> * input.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#hex_to_bin\">hex_to_bin</a>(char <a class=\"id\" href=\"#ch\">ch</a>)", 
"{", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#ch\">ch</a> >= '0') && (<a class=\"id\" href=\"#ch\">ch</a> <= '9'))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ch\">ch</a> - '0';", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ch\">ch</a> = <a class=\"id\" href=\"#tolower\">tolower</a>(<a class=\"id\" href=\"#ch\">ch</a>);", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#ch\">ch</a> >= 'a') && (<a class=\"id\" href=\"#ch\">ch</a> <= 'f'))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ch\">ch</a> - 'a' + 10;", 
"<span class=\"ts\"/>return -1;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#hex_to_bin\">hex_to_bin</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * hex_dump_to_buffer - convert a blob of data to \"hex ASCII\" in memory</span>", 
"<span class=\"comment\"> * @buf: data blob to dump</span>", 
"<span class=\"comment\"> * @len: number of bytes in the @buf</span>", 
"<span class=\"comment\"> * @rowsize: number of bytes to print per line; must be 16 or 32</span>", 
"<span class=\"comment\"> * @groupsize: number of bytes to print at a time (1, 2, 4, 8; default = 1)</span>", 
"<span class=\"comment\"> * @linebuf: where to put the converted data</span>", 
"<span class=\"comment\"> * @linebuflen: total size of @linebuf, including space for terminating NUL</span>", 
"<span class=\"comment\"> * @ascii: include ASCII after the hex output</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * hex_dump_to_buffer() works on one \"line\" of output at a time, i.e.,</span>", 
"<span class=\"comment\"> * 16 or 32 bytes of input data converted to hex + ASCII output.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Given a buffer of u8 data, hex_dump_to_buffer() converts the input data</span>", 
"<span class=\"comment\"> * to a hex + ASCII dump at the supplied memory location.</span>", 
"<span class=\"comment\"> * The converted output is always NUL-terminated.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * E.g.:</span>", 
"<span class=\"comment\"> *   hex_dump_to_buffer(frame-&gt;data, frame-&gt;len, 16, 1,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>linebuf, sizeof(linebuf), true);</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * example output buffer:</span>", 
"<span class=\"comment\"> * 40 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f  @ABCDEFGHIJKLMNO</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#hex_dump_to_buffer\">hex_dump_to_buffer</a>(const void *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>, int <a class=\"id\" href=\"#rowsize\">rowsize</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#groupsize\">groupsize</a>, char *<a class=\"id\" href=\"#linebuf\">linebuf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#linebuflen\">linebuflen</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ascii\">ascii</a>)", 
"{", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#ch\">ch</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#lx\">lx</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ascii_column\">ascii_column</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rowsize\">rowsize</a> != 16 && <a class=\"id\" href=\"#rowsize\">rowsize</a> != 32)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rowsize\">rowsize</a> = 16;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#nil\">nil</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#rowsize\">rowsize</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* limit to one line at a time */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#rowsize\">rowsize</a>;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#len\">len</a> % <a class=\"id\" href=\"#groupsize\">groupsize</a>) != 0)<span class=\"ts\"/><span class=\"comment\">/* no mixed size output */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#groupsize\">groupsize</a> = 1;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#groupsize\">groupsize</a>) {", 
"<span class=\"ts\"/>case 8: {", 
"<span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#ptr8\">ptr8</a> = <a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ngroups\">ngroups</a> = <a class=\"id\" href=\"#len\">len</a> / <a class=\"id\" href=\"#groupsize\">groupsize</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#ngroups\">ngroups</a>; <a class=\"id\" href=\"#j\">j</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lx\">lx</a> += <a class=\"id\" href=\"#scnprintf\">scnprintf</a>(<a class=\"id\" href=\"#linebuf\">linebuf</a> + <a class=\"id\" href=\"#lx\">lx</a>, <a class=\"id\" href=\"#linebuflen\">linebuflen</a> - <a class=\"id\" href=\"#lx\">lx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"%s%16.16llx\", <a class=\"id\" href=\"#j\">j</a> ? \" \" : \"\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long long)*(<a class=\"id\" href=\"#ptr8\">ptr8</a> + <a class=\"id\" href=\"#j\">j</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ascii_column\">ascii_column</a> = 17 * <a class=\"id\" href=\"#ngroups\">ngroups</a> + 2;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>case 4: {", 
"<span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#ptr4\">ptr4</a> = <a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ngroups\">ngroups</a> = <a class=\"id\" href=\"#len\">len</a> / <a class=\"id\" href=\"#groupsize\">groupsize</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#ngroups\">ngroups</a>; <a class=\"id\" href=\"#j\">j</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lx\">lx</a> += <a class=\"id\" href=\"#scnprintf\">scnprintf</a>(<a class=\"id\" href=\"#linebuf\">linebuf</a> + <a class=\"id\" href=\"#lx\">lx</a>, <a class=\"id\" href=\"#linebuflen\">linebuflen</a> - <a class=\"id\" href=\"#lx\">lx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"%s%8.8x\", <a class=\"id\" href=\"#j\">j</a> ? \" \" : \"\", *(<a class=\"id\" href=\"#ptr4\">ptr4</a> + <a class=\"id\" href=\"#j\">j</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ascii_column\">ascii_column</a> = 9 * <a class=\"id\" href=\"#ngroups\">ngroups</a> + 2;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>case 2: {", 
"<span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#ptr2\">ptr2</a> = <a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ngroups\">ngroups</a> = <a class=\"id\" href=\"#len\">len</a> / <a class=\"id\" href=\"#groupsize\">groupsize</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#ngroups\">ngroups</a>; <a class=\"id\" href=\"#j\">j</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lx\">lx</a> += <a class=\"id\" href=\"#scnprintf\">scnprintf</a>(<a class=\"id\" href=\"#linebuf\">linebuf</a> + <a class=\"id\" href=\"#lx\">lx</a>, <a class=\"id\" href=\"#linebuflen\">linebuflen</a> - <a class=\"id\" href=\"#lx\">lx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"%s%4.4x\", <a class=\"id\" href=\"#j\">j</a> ? \" \" : \"\", *(<a class=\"id\" href=\"#ptr2\">ptr2</a> + <a class=\"id\" href=\"#j\">j</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ascii_column\">ascii_column</a> = 5 * <a class=\"id\" href=\"#ngroups\">ngroups</a> + 2;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; (<a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#len\">len</a>) && (<a class=\"id\" href=\"#lx\">lx</a> + 3) <= <a class=\"id\" href=\"#linebuflen\">linebuflen</a>; <a class=\"id\" href=\"#j\">j</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ch\">ch</a> = <a class=\"id\" href=\"#ptr\">ptr</a>[<a class=\"id\" href=\"#j\">j</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#linebuf\">linebuf</a>[<a class=\"id\" href=\"#lx\">lx</a>++] = <a class=\"id\" href=\"#hex_asc_hi\">hex_asc_hi</a>(<a class=\"id\" href=\"#ch\">ch</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#linebuf\">linebuf</a>[<a class=\"id\" href=\"#lx\">lx</a>++] = <a class=\"id\" href=\"#hex_asc_lo\">hex_asc_lo</a>(<a class=\"id\" href=\"#ch\">ch</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#linebuf\">linebuf</a>[<a class=\"id\" href=\"#lx\">lx</a>++] = ' ';", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#j\">j</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lx\">lx</a>--;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ascii_column\">ascii_column</a> = 3 * <a class=\"id\" href=\"#rowsize\">rowsize</a> + 2;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ascii\">ascii</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#nil\">nil</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#lx\">lx</a> &lt; (<a class=\"id\" href=\"#linebuflen\">linebuflen</a> - 1) && <a class=\"id\" href=\"#lx\">lx</a> &lt; (<a class=\"id\" href=\"#ascii_column\">ascii_column</a> - 1))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#linebuf\">linebuf</a>[<a class=\"id\" href=\"#lx\">lx</a>++] = ' ';", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; (<a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#len\">len</a>) && (<a class=\"id\" href=\"#lx\">lx</a> + 2) &lt; <a class=\"id\" href=\"#linebuflen\">linebuflen</a>; <a class=\"id\" href=\"#j\">j</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ch\">ch</a> = <a class=\"id\" href=\"#ptr\">ptr</a>[<a class=\"id\" href=\"#j\">j</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#linebuf\">linebuf</a>[<a class=\"id\" href=\"#lx\">lx</a>++] = (<a class=\"id\" href=\"#isascii\">isascii</a>(<a class=\"id\" href=\"#ch\">ch</a>) && <a class=\"id\" href=\"#isprint\">isprint</a>(<a class=\"id\" href=\"#ch\">ch</a>)) ? <a class=\"id\" href=\"#ch\">ch</a> : '.';", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#nil\">nil</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#linebuf\">linebuf</a>[<a class=\"id\" href=\"#lx\">lx</a>++] = '\\0';", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#hex_dump_to_buffer\">hex_dump_to_buffer</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * print_hex_dump - print a text hex dump to syslog for a binary blob of data</span>", 
"<span class=\"comment\"> * @level: kernel log level (e.g. KERN_DEBUG)</span>", 
"<span class=\"comment\"> * @prefix_str: string to prefix each line with;</span>", 
"<span class=\"comment\"> *  caller supplies trailing spaces for alignment if desired</span>", 
"<span class=\"comment\"> * @prefix_type: controls whether prefix of an offset, address, or none</span>", 
"<span class=\"comment\"> *  is printed (%DUMP_PREFIX_OFFSET, %DUMP_PREFIX_ADDRESS, %DUMP_PREFIX_NONE)</span>", 
"<span class=\"comment\"> * @rowsize: number of bytes to print per line; must be 16 or 32</span>", 
"<span class=\"comment\"> * @groupsize: number of bytes to print at a time (1, 2, 4, 8; default = 1)</span>", 
"<span class=\"comment\"> * @buf: data blob to dump</span>", 
"<span class=\"comment\"> * @len: number of bytes in the @buf</span>", 
"<span class=\"comment\"> * @ascii: include ASCII after the hex output</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Given a buffer of u8 data, print_hex_dump() prints a hex + ASCII dump</span>", 
"<span class=\"comment\"> * to the kernel log at the specified kernel log level, with an optional</span>", 
"<span class=\"comment\"> * leading prefix.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * print_hex_dump() works on one \"line\" of output at a time, i.e.,</span>", 
"<span class=\"comment\"> * 16 or 32 bytes of input data converted to hex + ASCII output.</span>", 
"<span class=\"comment\"> * print_hex_dump() iterates over the entire input @buf, breaking it into</span>", 
"<span class=\"comment\"> * \"line size\" chunks to format and print.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * E.g.:</span>", 
"<span class=\"comment\"> *   print_hex_dump(KERN_DEBUG, \"raw data: \", DUMP_PREFIX_ADDRESS,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>    16, 1, frame-&gt;data, frame-&gt;len, true);</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Example output using %DUMP_PREFIX_OFFSET and 1-byte mode:</span>", 
"<span class=\"comment\"> * 0009ab42: 40 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f  @ABCDEFGHIJKLMNO</span>", 
"<span class=\"comment\"> * Example output using %DUMP_PREFIX_ADDRESS and 4-byte mode:</span>", 
"<span class=\"comment\"> * ffffffff88089af0: 73727170 77767574 7b7a7978 7f7e7d7c  pqrstuvwxyz{|}~.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#print_hex_dump\">print_hex_dump</a>(const char *<a class=\"id\" href=\"#level\">level</a>, const char *<a class=\"id\" href=\"#prefix_str\">prefix_str</a>, int <a class=\"id\" href=\"#prefix_type\">prefix_type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#rowsize\">rowsize</a>, int <a class=\"id\" href=\"#groupsize\">groupsize</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    const void *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ascii\">ascii</a>)", 
"{", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#linelen\">linelen</a>, <a class=\"id\" href=\"#remaining\">remaining</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#linebuf\">linebuf</a>[32 * 3 + 2 + 32 + 1];", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rowsize\">rowsize</a> != 16 && <a class=\"id\" href=\"#rowsize\">rowsize</a> != 32)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rowsize\">rowsize</a> = 16;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#len\">len</a>; <a class=\"id\" href=\"#i\">i</a> += <a class=\"id\" href=\"#rowsize\">rowsize</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#linelen\">linelen</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#remaining\">remaining</a>, <a class=\"id\" href=\"#rowsize\">rowsize</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remaining\">remaining</a> -= <a class=\"id\" href=\"#rowsize\">rowsize</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hex_dump_to_buffer\">hex_dump_to_buffer</a>(<a class=\"id\" href=\"#ptr\">ptr</a> + <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#linelen\">linelen</a>, <a class=\"id\" href=\"#rowsize\">rowsize</a>, <a class=\"id\" href=\"#groupsize\">groupsize</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#linebuf\">linebuf</a>, sizeof(<a class=\"id\" href=\"#linebuf\">linebuf</a>), <a class=\"id\" href=\"#ascii\">ascii</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#prefix_type\">prefix_type</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#DUMP_PREFIX_ADDRESS\">DUMP_PREFIX_ADDRESS</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"%s%s%p: %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#level\">level</a>, <a class=\"id\" href=\"#prefix_str\">prefix_str</a>, <a class=\"id\" href=\"#ptr\">ptr</a> + <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#linebuf\">linebuf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#DUMP_PREFIX_OFFSET\">DUMP_PREFIX_OFFSET</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"%s%s%.8x: %s\\n\", <a class=\"id\" href=\"#level\">level</a>, <a class=\"id\" href=\"#prefix_str\">prefix_str</a>, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#linebuf\">linebuf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"%s%s%s\\n\", <a class=\"id\" href=\"#level\">level</a>, <a class=\"id\" href=\"#prefix_str\">prefix_str</a>, <a class=\"id\" href=\"#linebuf\">linebuf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#print_hex_dump\">print_hex_dump</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * print_hex_dump_bytes - shorthand form of print_hex_dump() with default params</span>", 
"<span class=\"comment\"> * @prefix_str: string to prefix each line with;</span>", 
"<span class=\"comment\"> *  caller supplies trailing spaces for alignment if desired</span>", 
"<span class=\"comment\"> * @prefix_type: controls whether prefix of an offset, address, or none</span>", 
"<span class=\"comment\"> *  is printed (%DUMP_PREFIX_OFFSET, %DUMP_PREFIX_ADDRESS, %DUMP_PREFIX_NONE)</span>", 
"<span class=\"comment\"> * @buf: data blob to dump</span>", 
"<span class=\"comment\"> * @len: number of bytes in the @buf</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Calls print_hex_dump(), with log level of KERN_DEBUG,</span>", 
"<span class=\"comment\"> * rowsize of 16, groupsize of 1, and ASCII output included.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#print_hex_dump_bytes\">print_hex_dump_bytes</a>(const char *<a class=\"id\" href=\"#prefix_str\">prefix_str</a>, int <a class=\"id\" href=\"#prefix_type\">prefix_type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const void *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#print_hex_dump\">print_hex_dump</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a>, <a class=\"id\" href=\"#prefix_str\">prefix_str</a>, <a class=\"id\" href=\"#prefix_type\">prefix_type</a>, 16, 1,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#print_hex_dump_bytes\">print_hex_dump_bytes</a>);", 
];
xr_frag_insert('l/07/2b558510a7f16ab4072a680a6b8a6662ac462b.xr', __xr_tmp);
