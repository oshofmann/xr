var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * kernel/power/main.c - PM subsystem core functionality.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (c) 2003 Patrick Mochel</span>", 
"<span class=\"comment\"> * Copyright (c) 2003 Open Source Development Lab</span>", 
"<span class=\"comment\"> * </span>", 
"<span class=\"comment\"> * This file is released under the GPLv2</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kobject\">kobject</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#resume\">resume</a>-<a class=\"id\" href=\"#trace\">trace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#workqueue\">workqueue</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"power.h\"", 
"", 
"<a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#pm_mutex\">pm_mutex</a>);", 
"", 
"unsigned int <a class=\"id\" href=\"#pm_flags\">pm_flags</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#pm_flags\">pm_flags</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PM_SLEEP\">CONFIG_PM_SLEEP</a>", 
"", 
"<span class=\"comment\">/* Routines for PM-transition notifications */</span>", 
"", 
"static <a class=\"id\" href=\"#BLOCKING_NOTIFIER_HEAD\">BLOCKING_NOTIFIER_HEAD</a>(<a class=\"id\" href=\"#pm_chain_head\">pm_chain_head</a>);", 
"", 
"int <a class=\"id\" href=\"#register_pm_notifier\">register_pm_notifier</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nb\">nb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#blocking_notifier_chain_register\">blocking_notifier_chain_register</a>(&amp;<a class=\"id\" href=\"#pm_chain_head\">pm_chain_head</a>, <a class=\"id\" href=\"#nb\">nb</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#register_pm_notifier\">register_pm_notifier</a>);", 
"", 
"int <a class=\"id\" href=\"#unregister_pm_notifier\">unregister_pm_notifier</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nb\">nb</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#blocking_notifier_chain_unregister\">blocking_notifier_chain_unregister</a>(&amp;<a class=\"id\" href=\"#pm_chain_head\">pm_chain_head</a>, <a class=\"id\" href=\"#nb\">nb</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#unregister_pm_notifier\">unregister_pm_notifier</a>);", 
"", 
"int <a class=\"id\" href=\"#pm_notifier_call_chain\">pm_notifier_call_chain</a>(unsigned long <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#blocking_notifier_call_chain\">blocking_notifier_call_chain</a>(&amp;<a class=\"id\" href=\"#pm_chain_head\">pm_chain_head</a>, <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>== <a class=\"id\" href=\"#NOTIFY_BAD\">NOTIFY_BAD</a>) ? -<a class=\"id\" href=\"#EINVAL\">EINVAL</a> : 0;", 
"}", 
"", 
"<span class=\"comment\">/* If set, devices may be suspended and resumed asynchronously. */</span>", 
"int <a class=\"id\" href=\"#pm_async_enabled\">pm_async_enabled</a> = 1;", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#pm_async_show\">pm_async_show</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>, struct <a class=\"id\" href=\"#kobj_attribute\">kobj_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%d\\n\", <a class=\"id\" href=\"#pm_async_enabled\">pm_async_enabled</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#pm_async_store\">pm_async_store</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>, struct <a class=\"id\" href=\"#kobj_attribute\">kobj_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#val\">val</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strict_strtoul\">strict_strtoul</a>(<a class=\"id\" href=\"#buf\">buf</a>, 10, &amp;<a class=\"id\" href=\"#val\">val</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> &gt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pm_async_enabled\">pm_async_enabled</a> = <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#n\">n</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#power_attr\">power_attr</a>(<a class=\"id\" href=\"#pm_async\">pm_async</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PM_DEBUG\">CONFIG_PM_DEBUG</a>", 
"int <a class=\"id\" href=\"#pm_test_level\">pm_test_level</a> = <a class=\"id\" href=\"#TEST_NONE\">TEST_NONE</a>;", 
"", 
"static const char * const <a class=\"id\" href=\"#pm_tests\">pm_tests</a>[<a class=\"id\" href=\"#__TEST_AFTER_LAST\">__TEST_AFTER_LAST</a>] = {", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#TEST_NONE\">TEST_NONE</a>] = \"none\",", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#TEST_CORE\">TEST_CORE</a>] = \"core\",", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#TEST_CPUS\">TEST_CPUS</a>] = \"processors\",", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#TEST_PLATFORM\">TEST_PLATFORM</a>] = \"platform\",", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#TEST_DEVICES\">TEST_DEVICES</a>] = \"devices\",", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#TEST_FREEZER\">TEST_FREEZER</a>] = \"freezer\",", 
"};", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#pm_test_show\">pm_test_show</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>, struct <a class=\"id\" href=\"#kobj_attribute\">kobj_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#level\">level</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#level\">level</a> = <a class=\"id\" href=\"#TEST_FIRST\">TEST_FIRST</a>; <a class=\"id\" href=\"#level\">level</a> <= <a class=\"id\" href=\"#TEST_MAX\">TEST_MAX</a>; <a class=\"id\" href=\"#level\">level</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pm_tests\">pm_tests</a>[<a class=\"id\" href=\"#level\">level</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#level\">level</a> == <a class=\"id\" href=\"#pm_test_level\">pm_test_level</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a> += <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#s\">s</a>, \"[%s] \", <a class=\"id\" href=\"#pm_tests\">pm_tests</a>[<a class=\"id\" href=\"#level\">level</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a> += <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#s\">s</a>, \"%s \", <a class=\"id\" href=\"#pm_tests\">pm_tests</a>[<a class=\"id\" href=\"#level\">level</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#s\">s</a> != <a class=\"id\" href=\"#buf\">buf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* convert the last space to a newline */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>*(<a class=\"id\" href=\"#s\">s</a>-1) = '\\n';", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#s\">s</a> - <a class=\"id\" href=\"#buf\">buf</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#pm_test_store\">pm_test_store</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>, struct <a class=\"id\" href=\"#kobj_attribute\">kobj_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>const char * const *<a class=\"id\" href=\"#s\">s</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#level\">level</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#memchr\">memchr</a>(<a class=\"id\" href=\"#buf\">buf</a>, '\\n', <a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#p\">p</a> ? <a class=\"id\" href=\"#p\">p</a> - <a class=\"id\" href=\"#buf\">buf</a> : <a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#pm_mutex\">pm_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#level\">level</a> = <a class=\"id\" href=\"#TEST_FIRST\">TEST_FIRST</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#s\">s</a> = &amp;<a class=\"id\" href=\"#pm_tests\">pm_tests</a>[<a class=\"id\" href=\"#level\">level</a>]; <a class=\"id\" href=\"#level\">level</a> <= <a class=\"id\" href=\"#TEST_MAX\">TEST_MAX</a>; <a class=\"id\" href=\"#s\">s</a>++, <a class=\"id\" href=\"#level\">level</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#s\">s</a> && <a class=\"id\" href=\"#len\">len</a> == <a class=\"id\" href=\"#strlen\">strlen</a>(*<a class=\"id\" href=\"#s\">s</a>) && !<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#buf\">buf</a>, *<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#len\">len</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pm_test_level\">pm_test_level</a> = <a class=\"id\" href=\"#level\">level</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#pm_mutex\">pm_mutex</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a> ? <a class=\"id\" href=\"#error\">error</a> : <a class=\"id\" href=\"#n\">n</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#power_attr\">power_attr</a>(<a class=\"id\" href=\"#pm_test\">pm_test</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PM_DEBUG */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PM_SLEEP */</span>", 
"", 
"struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#power_kobj\">power_kobj</a>;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>state - control system power state.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>show() returns what states are supported, which is hard-coded to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>'standby' (Power-On Suspend), 'mem' (Suspend-to-RAM), and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>'disk' (Suspend-to-Disk).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>store() accepts one of those strings, translates it into the </span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>proper enumerated value, and initiates a suspend transition.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#state_show\">state_show</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>, struct <a class=\"id\" href=\"#kobj_attribute\">kobj_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#buf\">buf</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SUSPEND\">CONFIG_SUSPEND</a>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#PM_SUSPEND_MAX\">PM_SUSPEND_MAX</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pm_states\">pm_states</a>[<a class=\"id\" href=\"#i\">i</a>] && <a class=\"id\" href=\"#valid_state\">valid_state</a>(<a class=\"id\" href=\"#i\">i</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a> += <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#s\">s</a>,\"%s \", <a class=\"id\" href=\"#pm_states\">pm_states</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HIBERNATION\">CONFIG_HIBERNATION</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a> += <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#s\">s</a>, \"%s\\n\", \"disk\");", 
"#else", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#s\">s</a> != <a class=\"id\" href=\"#buf\">buf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* convert the last space to a newline */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>*(<a class=\"id\" href=\"#s\">s</a>-1) = '\\n';", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#s\">s</a> - <a class=\"id\" href=\"#buf\">buf</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#state_store\">state_store</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>, struct <a class=\"id\" href=\"#kobj_attribute\">kobj_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SUSPEND\">CONFIG_SUSPEND</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#suspend_state_t\">suspend_state_t</a> <a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#PM_SUSPEND_STANDBY\">PM_SUSPEND_STANDBY</a>;", 
"<span class=\"ts\"/>const char * const *<a class=\"id\" href=\"#s\">s</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#memchr\">memchr</a>(<a class=\"id\" href=\"#buf\">buf</a>, '\\n', <a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#p\">p</a> ? <a class=\"id\" href=\"#p\">p</a> - <a class=\"id\" href=\"#buf\">buf</a> : <a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* First, check if we are requested to hibernate */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> == 4 && !<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"disk\", <a class=\"id\" href=\"#len\">len</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#hibernate\">hibernate</a>();", 
"  goto <a class=\"id\" href=\"#Exit\">Exit</a>;", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SUSPEND\">CONFIG_SUSPEND</a>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#s\">s</a> = &amp;<a class=\"id\" href=\"#pm_states\">pm_states</a>[<a class=\"id\" href=\"#state\">state</a>]; <a class=\"id\" href=\"#state\">state</a> &lt; <a class=\"id\" href=\"#PM_SUSPEND_MAX\">PM_SUSPEND_MAX</a>; <a class=\"id\" href=\"#s\">s</a>++, <a class=\"id\" href=\"#state\">state</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#s\">s</a> && <a class=\"id\" href=\"#len\">len</a> == <a class=\"id\" href=\"#strlen\">strlen</a>(*<a class=\"id\" href=\"#s\">s</a>) && !<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#buf\">buf</a>, *<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#state\">state</a> &lt; <a class=\"id\" href=\"#PM_SUSPEND_MAX\">PM_SUSPEND_MAX</a> && *<a class=\"id\" href=\"#s\">s</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#enter_state\">enter_state</a>(<a class=\"id\" href=\"#state\">state</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
" <a class=\"id\" href=\"#Exit\">Exit</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a> ? <a class=\"id\" href=\"#error\">error</a> : <a class=\"id\" href=\"#n\">n</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#power_attr\">power_attr</a>(<a class=\"id\" href=\"#state\">state</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PM_SLEEP\">CONFIG_PM_SLEEP</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The 'wakeup_count' attribute, along with the functions defined in</span>", 
"<span class=\"comment\"> * drivers/base/power/wakeup.c, provides a means by which wakeup events can be</span>", 
"<span class=\"comment\"> * handled in a non-racy way.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If a wakeup event occurs when the system is in a sleep state, it simply is</span>", 
"<span class=\"comment\"> * woken up.  In turn, if an event that would wake the system up from a sleep</span>", 
"<span class=\"comment\"> * state occurs when it is undergoing a transition to that sleep state, the</span>", 
"<span class=\"comment\"> * transition should be aborted.  Moreover, if such an event occurs when the</span>", 
"<span class=\"comment\"> * system is in the working state, an attempt to start a transition to the</span>", 
"<span class=\"comment\"> * given sleep state should fail during certain period after the detection of</span>", 
"<span class=\"comment\"> * the event.  Using the 'state' attribute alone is not sufficient to satisfy</span>", 
"<span class=\"comment\"> * these requirements, because a wakeup event may occur exactly when 'state'</span>", 
"<span class=\"comment\"> * is being written to and may be delivered to user space right before it is</span>", 
"<span class=\"comment\"> * frozen, so the event will remain only partially processed until the system is</span>", 
"<span class=\"comment\"> * woken up by another event.  In particular, it won't cause the transition to</span>", 
"<span class=\"comment\"> * a sleep state to be aborted.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This difficulty may be overcome if user space uses 'wakeup_count' before</span>", 
"<span class=\"comment\"> * writing to 'state'.  It first should read from 'wakeup_count' and store</span>", 
"<span class=\"comment\"> * the read value.  Then, after carrying out its own preparations for the system</span>", 
"<span class=\"comment\"> * transition to a sleep state, it should write the stored value to</span>", 
"<span class=\"comment\"> * 'wakeup_count'.  If that fails, at least one wakeup event has occured since</span>", 
"<span class=\"comment\"> * 'wakeup_count' was read and 'state' should not be written to.  Otherwise, it</span>", 
"<span class=\"comment\"> * is allowed to write to 'state', but the transition will be aborted if there</span>", 
"<span class=\"comment\"> * are any wakeup events detected after 'wakeup_count' was written to.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#wakeup_count_show\">wakeup_count_show</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#kobj_attribute\">kobj_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#val\">val</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pm_get_wakeup_count\">pm_get_wakeup_count</a>(&amp;<a class=\"id\" href=\"#val\">val</a>) ? <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%lu\\n\", <a class=\"id\" href=\"#val\">val</a>) : -<a class=\"id\" href=\"#EINTR\">EINTR</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#wakeup_count_store\">wakeup_count_store</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#kobj_attribute\">kobj_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#val\">val</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sscanf\">sscanf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%lu\", &amp;<a class=\"id\" href=\"#val\">val</a>) == 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pm_save_wakeup_count\">pm_save_wakeup_count</a>(<a class=\"id\" href=\"#val\">val</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#power_attr\">power_attr</a>(<a class=\"id\" href=\"#wakeup_count\">wakeup_count</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PM_SLEEP */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PM_TRACE\">CONFIG_PM_TRACE</a>", 
"int <a class=\"id\" href=\"#pm_trace_enabled\">pm_trace_enabled</a>;", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#pm_trace_show\">pm_trace_show</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>, struct <a class=\"id\" href=\"#kobj_attribute\">kobj_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%d\\n\", <a class=\"id\" href=\"#pm_trace_enabled\">pm_trace_enabled</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#pm_trace_store\">pm_trace_store</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>, struct <a class=\"id\" href=\"#kobj_attribute\">kobj_attribute</a> *<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/>       const char *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#val\">val</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sscanf\">sscanf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%d\", &amp;<a class=\"id\" href=\"#val\">val</a>) == 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pm_trace_enabled\">pm_trace_enabled</a> = !!<a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#power_attr\">power_attr</a>(<a class=\"id\" href=\"#pm_trace\">pm_trace</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PM_TRACE */</span>", 
"", 
"static struct <a class=\"id\" href=\"#attribute\">attribute</a> * <a class=\"id\" href=\"#g\">g</a>[] = {", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#state_attr\">state_attr</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PM_TRACE\">CONFIG_PM_TRACE</a>", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#pm_trace_attr\">pm_trace_attr</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PM_SLEEP\">CONFIG_PM_SLEEP</a>", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#pm_async_attr\">pm_async_attr</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#wakeup_count_attr\">wakeup_count_attr</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PM_DEBUG\">CONFIG_PM_DEBUG</a>", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#pm_test_attr\">pm_test_attr</a>.<a class=\"id\" href=\"#attr\">attr</a>,", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>,", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#attribute_group\">attribute_group</a> <a class=\"id\" href=\"#attr_group\">attr_group</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#attrs\">attrs</a> = <a class=\"id\" href=\"#g\">g</a>,", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PM_RUNTIME\">CONFIG_PM_RUNTIME</a>", 
"struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#pm_wq\">pm_wq</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#pm_wq\">pm_wq</a>);", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#pm_start_workqueue\">pm_start_workqueue</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pm_wq\">pm_wq</a> = <a class=\"id\" href=\"#create_freezeable_workqueue\">create_freezeable_workqueue</a>(\"pm\");", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pm_wq\">pm_wq</a> ? 0 : -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#pm_start_workqueue\">pm_start_workqueue</a>(void) { return 0; }", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#pm_init\">pm_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#pm_start_workqueue\">pm_start_workqueue</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#power_kobj\">power_kobj</a> = <a class=\"id\" href=\"#kobject_create_and_add\">kobject_create_and_add</a>(\"power\", <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#power_kobj\">power_kobj</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sysfs_create_group\">sysfs_create_group</a>(<a class=\"id\" href=\"#power_kobj\">power_kobj</a>, &amp;<a class=\"id\" href=\"#attr_group\">attr_group</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#core_initcall\">core_initcall</a>(<a class=\"id\" href=\"#pm_init\">pm_init</a>);", 
];
xr_frag_insert('l/07/7835dfacc7a5cbe8a6af37d8eb117596f86469.xr', __xr_tmp);
