var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_TRACEPOINT_H\">_LINUX_TRACEPOINT_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_TRACEPOINT_H\">_LINUX_TRACEPOINT_H</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Kernel Tracepoint API.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * See Documentation/trace/tracepoints.txt.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (C) Copyright 2008 Mathieu Desnoyers &lt;mathieu.desnoyers@polymtl.ca&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Heavily inspired from the Linux Kernel Markers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file is released under the GPLv2.</span>", 
"<span class=\"comment\"> * See the file COPYING for more details.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rcupdate\">rcupdate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#module\">module</a>;", 
"struct <a class=\"id\" href=\"#tracepoint\">tracepoint</a>;", 
"", 
"struct <a class=\"id\" href=\"#tracepoint_func\">tracepoint_func</a> {", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#func\">func</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#tracepoint\">tracepoint</a> {", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Tracepoint name */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#state\">state</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* State. */</span>", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#regfunc\">regfunc</a>)(void);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#unregfunc\">unregfunc</a>)(void);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tracepoint_func\">tracepoint_func</a> *<a class=\"id\" href=\"#funcs\">funcs</a>;", 
"} <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#aligned\">aligned</a>(32)));<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Aligned on 32 bytes because it is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * globally visible and gcc happily</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * align these on the structure size.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Keep in sync with vmlinux.lds.h.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Connect a probe to a tracepoint.</span>", 
"<span class=\"comment\"> * Internal API, should not be used directly.</span>", 
"<span class=\"comment\"> */</span>", 
"extern int <a class=\"id\" href=\"#tracepoint_probe_register\">tracepoint_probe_register</a>(const char *<a class=\"id\" href=\"#name\">name</a>, void *<a class=\"id\" href=\"#probe\">probe</a>, void *<a class=\"id\" href=\"#data\">data</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Disconnect a probe from a tracepoint.</span>", 
"<span class=\"comment\"> * Internal API, should not be used directly.</span>", 
"<span class=\"comment\"> */</span>", 
"extern int", 
"<a class=\"id\" href=\"#tracepoint_probe_unregister\">tracepoint_probe_unregister</a>(const char *<a class=\"id\" href=\"#name\">name</a>, void *<a class=\"id\" href=\"#probe\">probe</a>, void *<a class=\"id\" href=\"#data\">data</a>);", 
"", 
"extern int <a class=\"id\" href=\"#tracepoint_probe_register_noupdate\">tracepoint_probe_register_noupdate</a>(const char *<a class=\"id\" href=\"#name\">name</a>, void *<a class=\"id\" href=\"#probe\">probe</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      void *<a class=\"id\" href=\"#data\">data</a>);", 
"extern int <a class=\"id\" href=\"#tracepoint_probe_unregister_noupdate\">tracepoint_probe_unregister_noupdate</a>(const char *<a class=\"id\" href=\"#name\">name</a>, void *<a class=\"id\" href=\"#probe\">probe</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a>);", 
"extern void <a class=\"id\" href=\"#tracepoint_probe_update_all\">tracepoint_probe_update_all</a>(void);", 
"", 
"struct <a class=\"id\" href=\"#tracepoint_iter\">tracepoint_iter</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#module\">module</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tracepoint\">tracepoint</a> *<a class=\"id\" href=\"#tracepoint\">tracepoint</a>;", 
"};", 
"", 
"extern void <a class=\"id\" href=\"#tracepoint_iter_start\">tracepoint_iter_start</a>(struct <a class=\"id\" href=\"#tracepoint_iter\">tracepoint_iter</a> *<a class=\"id\" href=\"#iter\">iter</a>);", 
"extern void <a class=\"id\" href=\"#tracepoint_iter_next\">tracepoint_iter_next</a>(struct <a class=\"id\" href=\"#tracepoint_iter\">tracepoint_iter</a> *<a class=\"id\" href=\"#iter\">iter</a>);", 
"extern void <a class=\"id\" href=\"#tracepoint_iter_stop\">tracepoint_iter_stop</a>(struct <a class=\"id\" href=\"#tracepoint_iter\">tracepoint_iter</a> *<a class=\"id\" href=\"#iter\">iter</a>);", 
"extern void <a class=\"id\" href=\"#tracepoint_iter_reset\">tracepoint_iter_reset</a>(struct <a class=\"id\" href=\"#tracepoint_iter\">tracepoint_iter</a> *<a class=\"id\" href=\"#iter\">iter</a>);", 
"extern int <a class=\"id\" href=\"#tracepoint_get_iter_range\">tracepoint_get_iter_range</a>(struct <a class=\"id\" href=\"#tracepoint\">tracepoint</a> **<a class=\"id\" href=\"#tracepoint\">tracepoint</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tracepoint\">tracepoint</a> *<a class=\"id\" href=\"#begin\">begin</a>, struct <a class=\"id\" href=\"#tracepoint\">tracepoint</a> *<a class=\"id\" href=\"#end\">end</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * tracepoint_synchronize_unregister must be called between the last tracepoint</span>", 
"<span class=\"comment\"> * probe unregistration and the end of module exit to make sure there is no</span>", 
"<span class=\"comment\"> * caller executing a probe when it is freed.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tracepoint_synchronize_unregister\">tracepoint_synchronize_unregister</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synchronize_sched\">synchronize_sched</a>();", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PARAMS\">PARAMS</a>(<a class=\"id\" href=\"#args\">args</a>...) <a class=\"id\" href=\"#args\">args</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TRACEPOINTS\">CONFIG_TRACEPOINTS</a>", 
"extern void <a class=\"id\" href=\"#tracepoint_update_probe_range\">tracepoint_update_probe_range</a>(struct <a class=\"id\" href=\"#tracepoint\">tracepoint</a> *<a class=\"id\" href=\"#begin\">begin</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tracepoint\">tracepoint</a> *<a class=\"id\" href=\"#end\">end</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#tracepoint_update_probe_range\">tracepoint_update_probe_range</a>(struct <a class=\"id\" href=\"#tracepoint\">tracepoint</a> *<a class=\"id\" href=\"#begin\">begin</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tracepoint\">tracepoint</a> *<a class=\"id\" href=\"#end\">end</a>)", 
"{ }", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_TRACEPOINTS */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _LINUX_TRACEPOINT_H */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Note: we keep the TRACE_EVENT and DECLARE_TRACE outside the include</span>", 
"<span class=\"comment\"> *  file ifdef protection.</span>", 
"<span class=\"comment\"> *  This is due to the way trace events work. If a file includes two</span>", 
"<span class=\"comment\"> *  trace event headers under one \"CREATE_TRACE_POINTS\" the first include</span>", 
"<span class=\"comment\"> *  will override the TRACE_EVENT and break the second include.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#DECLARE_TRACE\">DECLARE_TRACE</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TP_PROTO\">TP_PROTO</a>(<a class=\"id\" href=\"#args\">args</a>...)<span class=\"ts\"/><a class=\"id\" href=\"#args\">args</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TP_ARGS\">TP_ARGS</a>(<a class=\"id\" href=\"#args\">args</a>...)<span class=\"ts\"/><a class=\"id\" href=\"#args\">args</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TRACEPOINTS\">CONFIG_TRACEPOINTS</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * it_func[0] is never NULL because there is at least one element in the array</span>", 
"<span class=\"comment\"> * when the array itself is non NULL.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note, the proto and args passed in includes \"__data\" as the first parameter.</span>", 
"<span class=\"comment\"> * The reason for this is to handle the \"void\" prototype. If a tracepoint</span>", 
"<span class=\"comment\"> * has a \"void\" prototype, then it is invalid to declare a function</span>", 
"<span class=\"comment\"> * as \"(void *, void)\". The DECLARE_TRACE_NOARGS() will pass in just</span>", 
"<span class=\"comment\"> * \"void *data\", where as the DECLARE_TRACE() will pass in \"void *data, proto\".</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__DO_TRACE\">__DO_TRACE</a>(<a class=\"id\" href=\"#tp\">tp</a>, <a class=\"id\" href=\"#proto\">proto</a>, <a class=\"id\" href=\"#args\">args</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#tracepoint_func\">tracepoint_func</a> *<a class=\"id\" href=\"#it_func_ptr\">it_func_ptr</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#it_func\">it_func</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#__data\">__data</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock_sched_notrace\">rcu_read_lock_sched_notrace</a>();<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#it_func_ptr\">it_func_ptr</a> = <a class=\"id\" href=\"#rcu_dereference_sched\">rcu_dereference_sched</a>((<a class=\"id\" href=\"#tp\">tp</a>)-><a class=\"id\" href=\"#funcs\">funcs</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#it_func_ptr\">it_func_ptr</a>) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#it_func\">it_func</a> = (<a class=\"id\" href=\"#it_func_ptr\">it_func_ptr</a>)-><a class=\"id\" href=\"#func\">func</a>;<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__data\">__data</a> = (<a class=\"id\" href=\"#it_func_ptr\">it_func_ptr</a>)-><a class=\"id\" href=\"#data\">data</a>;<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>((void(*)(<a class=\"id\" href=\"#proto\">proto</a>))(<a class=\"id\" href=\"#it_func\">it_func</a>))(<a class=\"id\" href=\"#args\">args</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} while ((++<a class=\"id\" href=\"#it_func_ptr\">it_func_ptr</a>)-><a class=\"id\" href=\"#func\">func</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock_sched_notrace\">rcu_read_unlock_sched_notrace</a>();<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (0)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Make sure the alignment of the structure in the __tracepoints section will</span>", 
"<span class=\"comment\"> * not add unwanted padding between the beginning of the section and the</span>", 
"<span class=\"comment\"> * structure. Force alignment to the same alignment as the section start.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__DECLARE_TRACE\">__DECLARE_TRACE</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#proto\">proto</a>, <a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#data_proto\">data_proto</a>, <a class=\"id\" href=\"#data_args\">data_args</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>extern struct <a class=\"id\" href=\"#tracepoint\">tracepoint</a> <a class=\"id\" href=\"#__tracepoint_\">__tracepoint_</a>##<a class=\"id\" href=\"#name\">name</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#trace_\">trace_</a>##<a class=\"id\" href=\"#name\">name</a>(<a class=\"id\" href=\"#proto\">proto</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#__tracepoint_\">__tracepoint_</a>##<a class=\"id\" href=\"#name\">name</a>.<a class=\"id\" href=\"#state\">state</a>))<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__DO_TRACE\">__DO_TRACE</a>(&amp;<a class=\"id\" href=\"#__tracepoint_\">__tracepoint_</a>##<a class=\"id\" href=\"#name\">name</a>,<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TP_PROTO\">TP_PROTO</a>(<a class=\"id\" href=\"#data_proto\">data_proto</a>),<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TP_ARGS\">TP_ARGS</a>(<a class=\"id\" href=\"#data_args\">data_args</a>));<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>static <a class=\"id\" href=\"#inline\">inline</a> int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_trace_\">register_trace_</a>##<a class=\"id\" href=\"#name\">name</a>(void (*<a class=\"id\" href=\"#probe\">probe</a>)(<a class=\"id\" href=\"#data_proto\">data_proto</a>), void *<a class=\"id\" href=\"#data\">data</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#tracepoint_probe_register\">tracepoint_probe_register</a>(#<a class=\"id\" href=\"#name\">name</a>, (void *)<a class=\"id\" href=\"#probe\">probe</a>,<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#data\">data</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>static <a class=\"id\" href=\"#inline\">inline</a> int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_trace_\">unregister_trace_</a>##<a class=\"id\" href=\"#name\">name</a>(void (*<a class=\"id\" href=\"#probe\">probe</a>)(<a class=\"id\" href=\"#data_proto\">data_proto</a>), void *<a class=\"id\" href=\"#data\">data</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#tracepoint_probe_unregister\">tracepoint_probe_unregister</a>(#<a class=\"id\" href=\"#name\">name</a>, (void *)<a class=\"id\" href=\"#probe\">probe</a>, \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#data\">data</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>static <a class=\"id\" href=\"#inline\">inline</a> void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_trace_callback_type_\">check_trace_callback_type_</a>##<a class=\"id\" href=\"#name\">name</a>(void (*<a class=\"id\" href=\"#cb\">cb</a>)(<a class=\"id\" href=\"#data_proto\">data_proto</a>))<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEFINE_TRACE_FN\">DEFINE_TRACE_FN</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#reg\">reg</a>, <a class=\"id\" href=\"#unreg\">unreg</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>static const char <a class=\"id\" href=\"#__tpstrtab_\">__tpstrtab_</a>##<a class=\"id\" href=\"#name\">name</a>[]<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#section\">section</a>(\"__tracepoints_strings\"))) = #<a class=\"id\" href=\"#name\">name</a>;<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tracepoint\">tracepoint</a> <a class=\"id\" href=\"#__tracepoint_\">__tracepoint_</a>##<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#section\">section</a>(\"__tracepoints\"), <a class=\"id\" href=\"#aligned\">aligned</a>(32))) =<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>{ <a class=\"id\" href=\"#__tpstrtab_\">__tpstrtab_</a>##<a class=\"id\" href=\"#name\">name</a>, 0, <a class=\"id\" href=\"#reg\">reg</a>, <a class=\"id\" href=\"#unreg\">unreg</a>, <a class=\"id\" href=\"#NULL\">NULL</a> }", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEFINE_TRACE\">DEFINE_TRACE</a>(<a class=\"id\" href=\"#name\">name</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEFINE_TRACE_FN\">DEFINE_TRACE_FN</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EXPORT_TRACEPOINT_SYMBOL_GPL\">EXPORT_TRACEPOINT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#name\">name</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__tracepoint_\">__tracepoint_</a>##<a class=\"id\" href=\"#name\">name</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EXPORT_TRACEPOINT_SYMBOL\">EXPORT_TRACEPOINT_SYMBOL</a>(<a class=\"id\" href=\"#name\">name</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__tracepoint_\">__tracepoint_</a>##<a class=\"id\" href=\"#name\">name</a>)", 
"", 
"#else <span class=\"comment\">/* !CONFIG_TRACEPOINTS */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__DECLARE_TRACE\">__DECLARE_TRACE</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#proto\">proto</a>, <a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#data_proto\">data_proto</a>, <a class=\"id\" href=\"#data_args\">data_args</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#trace_\">trace_</a>##<a class=\"id\" href=\"#name\">name</a>(<a class=\"id\" href=\"#proto\">proto</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>{ }<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>static <a class=\"id\" href=\"#inline\">inline</a> int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_trace_\">register_trace_</a>##<a class=\"id\" href=\"#name\">name</a>(void (*<a class=\"id\" href=\"#probe\">probe</a>)(<a class=\"id\" href=\"#data_proto\">data_proto</a>),<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      void *<a class=\"id\" href=\"#data\">data</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSYS\">ENOSYS</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>static <a class=\"id\" href=\"#inline\">inline</a> int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_trace_\">unregister_trace_</a>##<a class=\"id\" href=\"#name\">name</a>(void (*<a class=\"id\" href=\"#probe\">probe</a>)(<a class=\"id\" href=\"#data_proto\">data_proto</a>),<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSYS\">ENOSYS</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#check_trace_callback_type_\">check_trace_callback_type_</a>##<a class=\"id\" href=\"#name\">name</a>(void (*<a class=\"id\" href=\"#cb\">cb</a>)(<a class=\"id\" href=\"#data_proto\">data_proto</a>)) \\", 
"<span class=\"ts\"/>{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEFINE_TRACE_FN\">DEFINE_TRACE_FN</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#reg\">reg</a>, <a class=\"id\" href=\"#unreg\">unreg</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEFINE_TRACE\">DEFINE_TRACE</a>(<a class=\"id\" href=\"#name\">name</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EXPORT_TRACEPOINT_SYMBOL_GPL\">EXPORT_TRACEPOINT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#name\">name</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EXPORT_TRACEPOINT_SYMBOL\">EXPORT_TRACEPOINT_SYMBOL</a>(<a class=\"id\" href=\"#name\">name</a>)", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_TRACEPOINTS */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The need for the DECLARE_TRACE_NOARGS() is to handle the prototype</span>", 
"<span class=\"comment\"> * (void). \"void\" is a special value in a function prototype and can</span>", 
"<span class=\"comment\"> * not be combined with other arguments. Since the DECLARE_TRACE()</span>", 
"<span class=\"comment\"> * macro adds a data element at the beginning of the prototype,</span>", 
"<span class=\"comment\"> * we need a way to differentiate \"(void *data, proto)\" from</span>", 
"<span class=\"comment\"> * \"(void *data, void)\". The second prototype is invalid.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DECLARE_TRACE_NOARGS() passes \"void\" as the tracepoint prototype</span>", 
"<span class=\"comment\"> * and \"void *__data\" as the callback prototype.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DECLARE_TRACE() passes \"proto\" as the tracepoint protoype and</span>", 
"<span class=\"comment\"> * \"void *__data, proto\" as the callback prototype.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DECLARE_TRACE_NOARGS\">DECLARE_TRACE_NOARGS</a>(<a class=\"id\" href=\"#name\">name</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__DECLARE_TRACE\">__DECLARE_TRACE</a>(<a class=\"id\" href=\"#name\">name</a>, void, , void *<a class=\"id\" href=\"#__data\">__data</a>, <a class=\"id\" href=\"#__data\">__data</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DECLARE_TRACE\">DECLARE_TRACE</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#proto\">proto</a>, <a class=\"id\" href=\"#args\">args</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__DECLARE_TRACE\">__DECLARE_TRACE</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#PARAMS\">PARAMS</a>(<a class=\"id\" href=\"#proto\">proto</a>), <a class=\"id\" href=\"#PARAMS\">PARAMS</a>(<a class=\"id\" href=\"#args\">args</a>),<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PARAMS\">PARAMS</a>(void *<a class=\"id\" href=\"#__data\">__data</a>, <a class=\"id\" href=\"#proto\">proto</a>),<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PARAMS\">PARAMS</a>(<a class=\"id\" href=\"#__data\">__data</a>, <a class=\"id\" href=\"#args\">args</a>))", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* DECLARE_TRACE */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#TRACE_EVENT\">TRACE_EVENT</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * For use with the TRACE_EVENT macro:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We define a tracepoint, its arguments, its printk format</span>", 
"<span class=\"comment\"> * and its 'fast binay record' layout.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Firstly, name your tracepoint via TRACE_EVENT(name : the</span>", 
"<span class=\"comment\"> * 'subsystem_event' notation is fine.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Think about this whole construct as the</span>", 
"<span class=\"comment\"> * 'trace_sched_switch() function' from now on.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  TRACE_EVENT(sched_switch,</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>* A function has a regular function arguments</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>* prototype, declare it via TP_PROTO():</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>*</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>TP_PROTO(struct rq *rq, struct task_struct *prev,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/> struct task_struct *next),</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>* Define the call signature of the 'function'.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>* (Design sidenote: we use this instead of a</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>*  TP_PROTO1/TP_PROTO2/TP_PROTO3 ugliness.)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>*</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>TP_ARGS(rq, prev, next),</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>* Fast binary tracing: define the trace record via</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>* TP_STRUCT__entry(). You can think about it like a</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>* regular C structure local variable definition.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>* This is how the trace record is structured and will</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>* be saved into the ring buffer. These are the fields</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>* that will be exposed to user-space in</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>* /sys/kernel/debug/tracing/events/&lt;*&gt;/format.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>* The declared 'local variable' is called '__entry'</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>* __field(pid_t, prev_prid) is equivalent to a standard declariton:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>*<span class=\"ts\"/>pid_t<span class=\"ts\"/>prev_pid;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>* __array(char, prev_comm, TASK_COMM_LEN) is equivalent to:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>*<span class=\"ts\"/>char<span class=\"ts\"/>prev_comm[TASK_COMM_LEN];</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>*</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>TP_STRUCT__entry(</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>__array(<span class=\"ts\"/>char,<span class=\"ts\"/>prev_comm,<span class=\"ts\"/>TASK_COMM_LEN<span class=\"ts\"/>)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>__field(<span class=\"ts\"/>pid_t,<span class=\"ts\"/>prev_pid<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>__field(<span class=\"ts\"/>int,<span class=\"ts\"/>prev_prio<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>__array(<span class=\"ts\"/>char,<span class=\"ts\"/>next_comm,<span class=\"ts\"/>TASK_COMM_LEN<span class=\"ts\"/>)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>__field(<span class=\"ts\"/>pid_t,<span class=\"ts\"/>next_pid<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>__field(<span class=\"ts\"/>int,<span class=\"ts\"/>next_prio<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>),</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>* Assign the entry into the trace record, by embedding</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>* a full C statement block into TP_fast_assign(). You</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>* can refer to the trace record as '__entry' -</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>* otherwise you can put arbitrary C code in here.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>* Note: this C code will execute every time a trace event</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>* happens, on an active tracepoint.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>*</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>TP_fast_assign(</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>memcpy(__entry-&gt;next_comm, next-&gt;comm, TASK_COMM_LEN);</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>__entry-&gt;prev_pid<span class=\"ts\"/>= prev-&gt;pid;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>__entry-&gt;prev_prio<span class=\"ts\"/>= prev-&gt;prio;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>memcpy(__entry-&gt;prev_comm, prev-&gt;comm, TASK_COMM_LEN);</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>__entry-&gt;next_pid<span class=\"ts\"/>= next-&gt;pid;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>__entry-&gt;next_prio<span class=\"ts\"/>= next-&gt;prio;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>* Formatted output of a trace record via TP_printk().</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>* This is how the tracepoint will appear under ftrace</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>* plugins that make use of this tracepoint.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>* (raw-binary tracing wont actually perform this step.)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>*</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>TP_printk(\"task %s:%d [%d] ==&gt; %s:%d [%d]\",</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>__entry-&gt;prev_comm, __entry-&gt;prev_pid, __entry-&gt;prev_prio,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>__entry-&gt;next_comm, __entry-&gt;next_pid, __entry-&gt;next_prio),</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * );</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This macro construct is thus used for the regular printk format</span>", 
"<span class=\"comment\"> * tracing setup, it is used to construct a function pointer based</span>", 
"<span class=\"comment\"> * tracepoint callback (this is used by programmatic plugins and</span>", 
"<span class=\"comment\"> * can also by used by generic instrumentation like SystemTap), and</span>", 
"<span class=\"comment\"> * it is also used to expose a structured trace record in</span>", 
"<span class=\"comment\"> * /sys/kernel/debug/tracing/events/.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A set of (un)registration functions can be passed to the variant</span>", 
"<span class=\"comment\"> * TRACE_EVENT_FN to perform any (un)registration work.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DECLARE_EVENT_CLASS\">DECLARE_EVENT_CLASS</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#proto\">proto</a>, <a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#tstruct\">tstruct</a>, <a class=\"id\" href=\"#assign\">assign</a>, <a class=\"id\" href=\"#print\">print</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEFINE_EVENT\">DEFINE_EVENT</a>(<a class=\"id\" href=\"#template\">template</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#proto\">proto</a>, <a class=\"id\" href=\"#args\">args</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DECLARE_TRACE\">DECLARE_TRACE</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#PARAMS\">PARAMS</a>(<a class=\"id\" href=\"#proto\">proto</a>), <a class=\"id\" href=\"#PARAMS\">PARAMS</a>(<a class=\"id\" href=\"#args\">args</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEFINE_EVENT_PRINT\">DEFINE_EVENT_PRINT</a>(<a class=\"id\" href=\"#template\">template</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#proto\">proto</a>, <a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#print\">print</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DECLARE_TRACE\">DECLARE_TRACE</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#PARAMS\">PARAMS</a>(<a class=\"id\" href=\"#proto\">proto</a>), <a class=\"id\" href=\"#PARAMS\">PARAMS</a>(<a class=\"id\" href=\"#args\">args</a>))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TRACE_EVENT\">TRACE_EVENT</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#proto\">proto</a>, <a class=\"id\" href=\"#args\">args</a>, struct, <a class=\"id\" href=\"#assign\">assign</a>, <a class=\"id\" href=\"#print\">print</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DECLARE_TRACE\">DECLARE_TRACE</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#PARAMS\">PARAMS</a>(<a class=\"id\" href=\"#proto\">proto</a>), <a class=\"id\" href=\"#PARAMS\">PARAMS</a>(<a class=\"id\" href=\"#args\">args</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TRACE_EVENT_FN\">TRACE_EVENT_FN</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#proto\">proto</a>, <a class=\"id\" href=\"#args\">args</a>, struct,<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#assign\">assign</a>, <a class=\"id\" href=\"#print\">print</a>, <a class=\"id\" href=\"#reg\">reg</a>, <a class=\"id\" href=\"#unreg\">unreg</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DECLARE_TRACE\">DECLARE_TRACE</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#PARAMS\">PARAMS</a>(<a class=\"id\" href=\"#proto\">proto</a>), <a class=\"id\" href=\"#PARAMS\">PARAMS</a>(<a class=\"id\" href=\"#args\">args</a>))", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* ifdef TRACE_EVENT (see note above) */</span>", 
];
xr_frag_insert('l/07/7b70648e66fce92b4187a3e69eefd093a3b7c9.xr', __xr_tmp);
