var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * INET<span class=\"ts\"/><span class=\"ts\"/>An implementation of the TCP/IP protocol suite for the LINUX</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>operating system.  INET is implemented using the  BSD Socket</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>interface as the means of communication with the user level.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Ethernet-type device handling.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Version:<span class=\"ts\"/>@(#)eth.c<span class=\"ts\"/>1.0.7<span class=\"ts\"/>05/25/93</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Authors:<span class=\"ts\"/>Ross Biro</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Fred N. van Kempen, &lt;waltje@uWalt.NL.Mugnet.ORG&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Mark Evans, &lt;evansmp@uhura.aston.ac.uk&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Florian  La Roche, &lt;rzsfl@rz.uni-sb.de&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox, &lt;gw4pts@gw4pts.ampr.org&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Fixes:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Mr Linux<span class=\"ts\"/>: Arp problems</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>: Generic queue tidyup (very tiny here)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>: eth_header ntohs should be htons</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>: eth_rebuild_header missing an htons and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  minor other things.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Tegge<span class=\"ts\"/><span class=\"ts\"/>: Arp bug fixes.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Florian<span class=\"ts\"/><span class=\"ts\"/>: Removed many unnecessary functions, code cleanup</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  and changes for new arp and skbuff.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>: Redid header building to reflect new format.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>: ARP only when compiled with CONFIG_INET</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Greg Page<span class=\"ts\"/>: 802.2 and SNAP stuff.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>: MAC layer pointers/new format.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Paul Gortmaker<span class=\"ts\"/>: eth_copy_and_sum shouldn't csum padding.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox<span class=\"ts\"/>: Protect against forwarding explosions with</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  older network drivers and IFF_ALLMULTI.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Christer Weinigel<span class=\"ts\"/>: Better rebuild header message.</span>", 
"<span class=\"comment\"> *             Andrew Morton    : 26Feb01: kill ether_setup() - use netdev_boot_setup().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>This program is free software; you can redistribute it and/or</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>modify it under the terms of the GNU General Public License</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>as published by the Free Software Foundation; either version</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>2 of the License, or (at your option) any later version.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#socket\">socket</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#in\">in</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#inet\">inet</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ip\">ip</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#netdevice\">netdevice</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#etherdevice\">etherdevice</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#skbuff\">skbuff</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#if_ether\">if_ether</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#dst\">dst</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#arp\">arp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#sock\">sock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#ipv6\">ipv6</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#ip\">ip</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#dsa\">dsa</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#system\">system</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"ether=\", <a class=\"id\" href=\"#netdev_boot_setup\">netdev_boot_setup</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * eth_header - create the Ethernet header</span>", 
"<span class=\"comment\"> * @skb:<span class=\"ts\"/>buffer to alter</span>", 
"<span class=\"comment\"> * @dev:<span class=\"ts\"/>source device</span>", 
"<span class=\"comment\"> * @type:<span class=\"ts\"/>Ethernet type field</span>", 
"<span class=\"comment\"> * @daddr: destination address (NULL leave destination address)</span>", 
"<span class=\"comment\"> * @saddr: source address (NULL use device source address)</span>", 
"<span class=\"comment\"> * @len:   packet length (&lt;= skb-&gt;len)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Set the protocol type. For a packet of type ETH_P_802_3/2 we put the length</span>", 
"<span class=\"comment\"> * in here instead.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#eth_header\">eth_header</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/>       unsigned short <a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/>       const void *<a class=\"id\" href=\"#daddr\">daddr</a>, const void *<a class=\"id\" href=\"#saddr\">saddr</a>, unsigned <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ethhdr\">ethhdr</a> *<a class=\"id\" href=\"#eth\">eth</a> = (struct <a class=\"id\" href=\"#ethhdr\">ethhdr</a> *)<a class=\"id\" href=\"#skb_push\">skb_push</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#ETH_HLEN\">ETH_HLEN</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#ETH_P_802_3\">ETH_P_802_3</a> && <a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#ETH_P_802_2\">ETH_P_802_2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#eth\">eth</a>-><a class=\"id\" href=\"#h_proto\">h_proto</a> = <a class=\"id\" href=\"#htons\">htons</a>(<a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#eth\">eth</a>-><a class=\"id\" href=\"#h_proto\">h_proto</a> = <a class=\"id\" href=\"#htons\">htons</a>(<a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *      Set the source hardware address.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#saddr\">saddr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#saddr\">saddr</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev_addr\">dev_addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#eth\">eth</a>-><a class=\"id\" href=\"#h_source\">h_source</a>, <a class=\"id\" href=\"#saddr\">saddr</a>, <a class=\"id\" href=\"#ETH_ALEN\">ETH_ALEN</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#daddr\">daddr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#eth\">eth</a>-><a class=\"id\" href=\"#h_dest\">h_dest</a>, <a class=\"id\" href=\"#daddr\">daddr</a>, <a class=\"id\" href=\"#ETH_ALEN\">ETH_ALEN</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ETH_HLEN\">ETH_HLEN</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *      Anyway, the loopback-device should never use this function...</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; (<a class=\"id\" href=\"#IFF_LOOPBACK\">IFF_LOOPBACK</a> | <a class=\"id\" href=\"#IFF_NOARP\">IFF_NOARP</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#eth\">eth</a>-><a class=\"id\" href=\"#h_dest\">h_dest</a>, 0, <a class=\"id\" href=\"#ETH_ALEN\">ETH_ALEN</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ETH_HLEN\">ETH_HLEN</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ETH_HLEN\">ETH_HLEN</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#eth_header\">eth_header</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * eth_rebuild_header- rebuild the Ethernet MAC header.</span>", 
"<span class=\"comment\"> * @skb: socket buffer to update</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is called after an ARP or IPV6 ndisc it's resolution on this</span>", 
"<span class=\"comment\"> * sk_buff. We now let protocol (ARP) fill in the other fields.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This routine CANNOT use cached dst-&gt;neigh!</span>", 
"<span class=\"comment\"> * Really, it is used only when dst-&gt;neigh is wrong.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#eth_rebuild_header\">eth_rebuild_header</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ethhdr\">ethhdr</a> *<a class=\"id\" href=\"#eth\">eth</a> = (struct <a class=\"id\" href=\"#ethhdr\">ethhdr</a> *)<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#eth\">eth</a>-><a class=\"id\" href=\"#h_proto\">h_proto</a>) {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_INET\">CONFIG_INET</a>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#htons\">htons</a>(<a class=\"id\" href=\"#ETH_P_IP\">ETH_P_IP</a>):", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#arp_find\">arp_find</a>(<a class=\"id\" href=\"#eth\">eth</a>-><a class=\"id\" href=\"#h_dest\">h_dest</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"%s: unable to resolve type %X addresses.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#eth\">eth</a>-><a class=\"id\" href=\"#h_proto\">h_proto</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#eth\">eth</a>-><a class=\"id\" href=\"#h_source\">h_source</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev_addr\">dev_addr</a>, <a class=\"id\" href=\"#ETH_ALEN\">ETH_ALEN</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#eth_rebuild_header\">eth_rebuild_header</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * eth_type_trans - determine the packet's protocol ID.</span>", 
"<span class=\"comment\"> * @skb: received socket data</span>", 
"<span class=\"comment\"> * @dev: receiving network device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The rule here is that we</span>", 
"<span class=\"comment\"> * assume 802.3 if the type field is short enough to be a length.</span>", 
"<span class=\"comment\"> * This is normal practice and works for any 'now in use' protocol.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#eth_type_trans\">eth_type_trans</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ethhdr\">ethhdr</a> *<a class=\"id\" href=\"#eth\">eth</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_reset_mac_header\">skb_reset_mac_header</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_pull_inline\">skb_pull_inline</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#ETH_HLEN\">ETH_HLEN</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#eth\">eth</a> = <a class=\"id\" href=\"#eth_hdr\">eth_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#is_multicast_ether_addr\">is_multicast_ether_addr</a>(<a class=\"id\" href=\"#eth\">eth</a>-><a class=\"id\" href=\"#h_dest\">h_dest</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#compare_ether_addr_64bits\">compare_ether_addr_64bits</a>(<a class=\"id\" href=\"#eth\">eth</a>-><a class=\"id\" href=\"#h_dest\">h_dest</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#broadcast\">broadcast</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#pkt_type\">pkt_type</a> = <a class=\"id\" href=\"#PACKET_BROADCAST\">PACKET_BROADCAST</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#pkt_type\">pkt_type</a> = <a class=\"id\" href=\"#PACKET_MULTICAST\">PACKET_MULTICAST</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *      This ALLMULTI check should be redundant by 1.4</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *      so don't forget to remove it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *      Seems, you forgot to remove it. All silly devices</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *      seems to set IFF_PROMISC.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>else if (1 <span class=\"comment\">/*dev-&gt;flags&amp;IFF_PROMISC */</span> ) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#compare_ether_addr_64bits\">compare_ether_addr_64bits</a>(<a class=\"id\" href=\"#eth\">eth</a>-><a class=\"id\" href=\"#h_dest\">h_dest</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev_addr\">dev_addr</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#pkt_type\">pkt_type</a> = <a class=\"id\" href=\"#PACKET_OTHERHOST\">PACKET_OTHERHOST</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Some variants of DSA tagging don't have an ethertype field</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * at all, so we check here whether one of those tagging</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * variants has been configured on the receiving interface,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and if so, set skb-&gt;protocol without looking at the packet.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#netdev_uses_dsa_tags\">netdev_uses_dsa_tags</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#htons\">htons</a>(<a class=\"id\" href=\"#ETH_P_DSA\">ETH_P_DSA</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#netdev_uses_trailer_tags\">netdev_uses_trailer_tags</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#htons\">htons</a>(<a class=\"id\" href=\"#ETH_P_TRAILER\">ETH_P_TRAILER</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#eth\">eth</a>-><a class=\"id\" href=\"#h_proto\">h_proto</a>) >= 1536)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#eth\">eth</a>-><a class=\"id\" href=\"#h_proto\">h_proto</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *      This is a magic hack to spot IPX packets. Older Novell breaks</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *      the protocol design and runs IPX over 802.3 without an 802.2 LLC</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *      layer. We look for FFFF which isn't a used 802.2 SSAP/DSAP. This</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *      won't work for fault tolerant netware but does for the rest.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a> >= 2 && *(unsigned short *)(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data\">data</a>) == 0xFFFF)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#htons\">htons</a>(<a class=\"id\" href=\"#ETH_P_802_3\">ETH_P_802_3</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *      Real 802.2 LLC</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#htons\">htons</a>(<a class=\"id\" href=\"#ETH_P_802_2\">ETH_P_802_2</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#eth_type_trans\">eth_type_trans</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * eth_header_parse - extract hardware address from packet</span>", 
"<span class=\"comment\"> * @skb: packet to extract header from</span>", 
"<span class=\"comment\"> * @haddr: destination buffer</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#eth_header_parse\">eth_header_parse</a>(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, unsigned char *<a class=\"id\" href=\"#haddr\">haddr</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#ethhdr\">ethhdr</a> *<a class=\"id\" href=\"#eth\">eth</a> = <a class=\"id\" href=\"#eth_hdr\">eth_hdr</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#haddr\">haddr</a>, <a class=\"id\" href=\"#eth\">eth</a>-><a class=\"id\" href=\"#h_source\">h_source</a>, <a class=\"id\" href=\"#ETH_ALEN\">ETH_ALEN</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ETH_ALEN\">ETH_ALEN</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#eth_header_parse\">eth_header_parse</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * eth_header_cache - fill cache entry from neighbour</span>", 
"<span class=\"comment\"> * @neigh: source neighbour</span>", 
"<span class=\"comment\"> * @hh: destination cache entry</span>", 
"<span class=\"comment\"> * Create an Ethernet header template from the neighbour.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#eth_header_cache\">eth_header_cache</a>(const struct <a class=\"id\" href=\"#neighbour\">neighbour</a> *<a class=\"id\" href=\"#neigh\">neigh</a>, struct <a class=\"id\" href=\"#hh_cache\">hh_cache</a> *<a class=\"id\" href=\"#hh\">hh</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#hh\">hh</a>-><a class=\"id\" href=\"#hh_type\">hh_type</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ethhdr\">ethhdr</a> *<a class=\"id\" href=\"#eth\">eth</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#neigh\">neigh</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#eth\">eth</a> = (struct <a class=\"id\" href=\"#ethhdr\">ethhdr</a> *)", 
"<span class=\"ts\"/>    (((<a class=\"id\" href=\"#u8\">u8</a> *) <a class=\"id\" href=\"#hh\">hh</a>-><a class=\"id\" href=\"#hh_data\">hh_data</a>) + (<a class=\"id\" href=\"#HH_DATA_OFF\">HH_DATA_OFF</a>(sizeof(*<a class=\"id\" href=\"#eth\">eth</a>))));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#htons\">htons</a>(<a class=\"id\" href=\"#ETH_P_802_3\">ETH_P_802_3</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#eth\">eth</a>-><a class=\"id\" href=\"#h_proto\">h_proto</a> = <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#eth\">eth</a>-><a class=\"id\" href=\"#h_source\">h_source</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev_addr\">dev_addr</a>, <a class=\"id\" href=\"#ETH_ALEN\">ETH_ALEN</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#eth\">eth</a>-><a class=\"id\" href=\"#h_dest\">h_dest</a>, <a class=\"id\" href=\"#neigh\">neigh</a>-><a class=\"id\" href=\"#ha\">ha</a>, <a class=\"id\" href=\"#ETH_ALEN\">ETH_ALEN</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hh\">hh</a>-><a class=\"id\" href=\"#hh_len\">hh_len</a> = <a class=\"id\" href=\"#ETH_HLEN\">ETH_HLEN</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#eth_header_cache\">eth_header_cache</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * eth_header_cache_update - update cache entry</span>", 
"<span class=\"comment\"> * @hh: destination cache entry</span>", 
"<span class=\"comment\"> * @dev: network device</span>", 
"<span class=\"comment\"> * @haddr: new hardware address</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called by Address Resolution module to notify changes in address.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#eth_header_cache_update\">eth_header_cache_update</a>(struct <a class=\"id\" href=\"#hh_cache\">hh_cache</a> *<a class=\"id\" href=\"#hh\">hh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const unsigned char *<a class=\"id\" href=\"#haddr\">haddr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(((<a class=\"id\" href=\"#u8\">u8</a> *) <a class=\"id\" href=\"#hh\">hh</a>-><a class=\"id\" href=\"#hh_data\">hh_data</a>) + <a class=\"id\" href=\"#HH_DATA_OFF\">HH_DATA_OFF</a>(sizeof(struct <a class=\"id\" href=\"#ethhdr\">ethhdr</a>)),", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#haddr\">haddr</a>, <a class=\"id\" href=\"#ETH_ALEN\">ETH_ALEN</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#eth_header_cache_update\">eth_header_cache_update</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * eth_mac_addr - set new Ethernet hardware address</span>", 
"<span class=\"comment\"> * @dev: network device</span>", 
"<span class=\"comment\"> * @p: socket address</span>", 
"<span class=\"comment\"> * Change hardware address of device.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This doesn't change hardware matching, so needs to be overridden</span>", 
"<span class=\"comment\"> * for most real devices.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#eth_mac_addr\">eth_mac_addr</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, void *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sockaddr\">sockaddr</a> *<a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#netif_running\">netif_running</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_valid_ether_addr\">is_valid_ether_addr</a>(<a class=\"id\" href=\"#addr\">addr</a>-><a class=\"id\" href=\"#sa_data\">sa_data</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EADDRNOTAVAIL\">EADDRNOTAVAIL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev_addr\">dev_addr</a>, <a class=\"id\" href=\"#addr\">addr</a>-><a class=\"id\" href=\"#sa_data\">sa_data</a>, <a class=\"id\" href=\"#ETH_ALEN\">ETH_ALEN</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#eth_mac_addr\">eth_mac_addr</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * eth_change_mtu - set new MTU size</span>", 
"<span class=\"comment\"> * @dev: network device</span>", 
"<span class=\"comment\"> * @new_mtu: new Maximum Transfer Unit</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Allow changing MTU size. Needs to be overridden for devices</span>", 
"<span class=\"comment\"> * supporting jumbo frames.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#eth_change_mtu\">eth_change_mtu</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#new_mtu\">new_mtu</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_mtu\">new_mtu</a> &lt; 68 || <a class=\"id\" href=\"#new_mtu\">new_mtu</a> &gt; <a class=\"id\" href=\"#ETH_DATA_LEN\">ETH_DATA_LEN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mtu\">mtu</a> = <a class=\"id\" href=\"#new_mtu\">new_mtu</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#eth_change_mtu\">eth_change_mtu</a>);", 
"", 
"int <a class=\"id\" href=\"#eth_validate_addr\">eth_validate_addr</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_valid_ether_addr\">is_valid_ether_addr</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev_addr\">dev_addr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EADDRNOTAVAIL\">EADDRNOTAVAIL</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#eth_validate_addr\">eth_validate_addr</a>);", 
"", 
"const struct <a class=\"id\" href=\"#header_ops\">header_ops</a> <a class=\"id\" href=\"#eth_header_ops\">eth_header_ops</a> <a class=\"id\" href=\"#____cacheline_aligned\">____cacheline_aligned</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#create\">create</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#eth_header\">eth_header</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#parse\">parse</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#eth_header_parse\">eth_header_parse</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#rebuild\">rebuild</a><span class=\"ts\"/>= <a class=\"id\" href=\"#eth_rebuild_header\">eth_rebuild_header</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#cache\">cache</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#eth_header_cache\">eth_header_cache</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#cache_update\">cache_update</a><span class=\"ts\"/>= <a class=\"id\" href=\"#eth_header_cache_update\">eth_header_cache_update</a>,", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ether_setup - setup Ethernet network device</span>", 
"<span class=\"comment\"> * @dev: network device</span>", 
"<span class=\"comment\"> * Fill in the fields of the device structure with Ethernet-generic values.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ether_setup\">ether_setup</a>(struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#header_ops\">header_ops</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#eth_header_ops\">eth_header_ops</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#type\">type</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ARPHRD_ETHER\">ARPHRD_ETHER</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#hard_header_len\">hard_header_len</a> <span class=\"ts\"/>= <a class=\"id\" href=\"#ETH_HLEN\">ETH_HLEN</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mtu\">mtu</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ETH_DATA_LEN\">ETH_DATA_LEN</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#addr_len\">addr_len</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ETH_ALEN\">ETH_ALEN</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#tx_queue_len\">tx_queue_len</a><span class=\"ts\"/>= 1000;<span class=\"ts\"/><span class=\"comment\">/* Ethernet wants good queues */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#IFF_BROADCAST\">IFF_BROADCAST</a>|<a class=\"id\" href=\"#IFF_MULTICAST\">IFF_MULTICAST</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#broadcast\">broadcast</a>, 0xFF, <a class=\"id\" href=\"#ETH_ALEN\">ETH_ALEN</a>);", 
"", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#ether_setup\">ether_setup</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * alloc_etherdev_mq - Allocates and sets up an Ethernet device</span>", 
"<span class=\"comment\"> * @sizeof_priv: Size of additional driver-private structure to be allocated</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>for this Ethernet device</span>", 
"<span class=\"comment\"> * @queue_count: The number of queues this device has.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Fill in the fields of the device structure with Ethernet-generic</span>", 
"<span class=\"comment\"> * values. Basically does everything except registering the device.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Constructs a new net device, complete with a private data area of</span>", 
"<span class=\"comment\"> * size (sizeof_priv).  A 32-byte (not bit) alignment is enforced for</span>", 
"<span class=\"comment\"> * this private data area.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#alloc_etherdev_mq\">alloc_etherdev_mq</a>(int <a class=\"id\" href=\"#sizeof_priv\">sizeof_priv</a>, unsigned int <a class=\"id\" href=\"#queue_count\">queue_count</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#alloc_netdev_mq\">alloc_netdev_mq</a>(<a class=\"id\" href=\"#sizeof_priv\">sizeof_priv</a>, \"eth%d\", <a class=\"id\" href=\"#ether_setup\">ether_setup</a>, <a class=\"id\" href=\"#queue_count\">queue_count</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#alloc_etherdev_mq\">alloc_etherdev_mq</a>);", 
"", 
"static <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#_format_mac_addr\">_format_mac_addr</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#buflen\">buflen</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const unsigned char *<a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#cp\">cp</a> = <a class=\"id\" href=\"#buf\">buf</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#len\">len</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a> += <a class=\"id\" href=\"#scnprintf\">scnprintf</a>(<a class=\"id\" href=\"#cp\">cp</a>, <a class=\"id\" href=\"#buflen\">buflen</a> - (<a class=\"id\" href=\"#cp\">cp</a> - <a class=\"id\" href=\"#buf\">buf</a>), \"%02x\", <a class=\"id\" href=\"#addr\">addr</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#len\">len</a> - 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a> += <a class=\"id\" href=\"#strlcpy\">strlcpy</a>(<a class=\"id\" href=\"#cp\">cp</a>, \":\", <a class=\"id\" href=\"#buflen\">buflen</a> - (<a class=\"id\" href=\"#cp\">cp</a> - <a class=\"id\" href=\"#buf\">buf</a>));", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cp\">cp</a> - <a class=\"id\" href=\"#buf\">buf</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#sysfs_format_mac\">sysfs_format_mac</a>(char *<a class=\"id\" href=\"#buf\">buf</a>, const unsigned char *<a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#l\">l</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a> = <a class=\"id\" href=\"#_format_mac_addr\">_format_mac_addr</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a> += <a class=\"id\" href=\"#strlcpy\">strlcpy</a>(<a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#l\">l</a>, \"\\n\", <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - <a class=\"id\" href=\"#l\">l</a>);", 
"<span class=\"ts\"/>return ((<a class=\"id\" href=\"#ssize_t\">ssize_t</a>) <a class=\"id\" href=\"#l\">l</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sysfs_format_mac\">sysfs_format_mac</a>);", 
];
xr_frag_insert('l/07/87ac599783723fefd2ded4cd82d422004a94ae.xr', __xr_tmp);
