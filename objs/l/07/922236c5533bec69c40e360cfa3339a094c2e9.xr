var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_DELAY_H\">_LINUX_DELAY_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_DELAY_H\">_LINUX_DELAY_H</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (C) 1993 Linus Torvalds</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Delay routines, using a pre-computed \"loops_per_jiffy\" value.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"extern unsigned long <a class=\"id\" href=\"#loops_per_jiffy\">loops_per_jiffy</a>;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#delay\">delay</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Using udelay() for intervals greater than a few milliseconds can</span>", 
"<span class=\"comment\"> * risk overflow for high loops_per_jiffy (high bogomips) machines. The</span>", 
"<span class=\"comment\"> * mdelay() provides a wrapper to prevent this.  For delays greater</span>", 
"<span class=\"comment\"> * than MAX_UDELAY_MS milliseconds, the wrapper is used.  Architecture</span>", 
"<span class=\"comment\"> * specific values can be defined in asm-???/delay.h as an override.</span>", 
"<span class=\"comment\"> * The 2nd mdelay() definition ensures GCC will optimize away the </span>", 
"<span class=\"comment\"> * while loop for the common cases where n &lt;= MAX_UDELAY_MS  --  Paul G.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#MAX_UDELAY_MS\">MAX_UDELAY_MS</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_UDELAY_MS\">MAX_UDELAY_MS</a><span class=\"ts\"/>5", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#mdelay\">mdelay</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#mdelay\">mdelay</a>(<a class=\"id\" href=\"#n\">n</a>) (\\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#__builtin_constant_p\">__builtin_constant_p</a>(<a class=\"id\" href=\"#n\">n</a>) && (<a class=\"id\" href=\"#n\">n</a>)<=<a class=\"id\" href=\"#MAX_UDELAY_MS\">MAX_UDELAY_MS</a>) ? <a class=\"id\" href=\"#udelay\">udelay</a>((<a class=\"id\" href=\"#n\">n</a>)*1000) : \\", 
"<span class=\"ts\"/>({unsigned long <a class=\"id\" href=\"#__ms\">__ms</a>=(<a class=\"id\" href=\"#n\">n</a>); while (<a class=\"id\" href=\"#__ms\">__ms</a>--) <a class=\"id\" href=\"#udelay\">udelay</a>(1000);}))", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#ndelay\">ndelay</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ndelay\">ndelay</a>(unsigned long <a class=\"id\" href=\"#x\">x</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#udelay\">udelay</a>(<a class=\"id\" href=\"#DIV_ROUND_UP\">DIV_ROUND_UP</a>(<a class=\"id\" href=\"#x\">x</a>, 1000));", 
"}", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ndelay\">ndelay</a>(<a class=\"id\" href=\"#x\">x</a>) <a class=\"id\" href=\"#ndelay\">ndelay</a>(<a class=\"id\" href=\"#x\">x</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"extern unsigned long <a class=\"id\" href=\"#lpj_fine\">lpj_fine</a>;", 
"void <a class=\"id\" href=\"#calibrate_delay\">calibrate_delay</a>(void);", 
"void <a class=\"id\" href=\"#msleep\">msleep</a>(unsigned int <a class=\"id\" href=\"#msecs\">msecs</a>);", 
"unsigned long <a class=\"id\" href=\"#msleep_interruptible\">msleep_interruptible</a>(unsigned int <a class=\"id\" href=\"#msecs\">msecs</a>);", 
"void <a class=\"id\" href=\"#usleep_range\">usleep_range</a>(unsigned long <a class=\"id\" href=\"#min\">min</a>, unsigned long <a class=\"id\" href=\"#max\">max</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ssleep\">ssleep</a>(unsigned int <a class=\"id\" href=\"#seconds\">seconds</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>(<a class=\"id\" href=\"#seconds\">seconds</a> * 1000);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* defined(_LINUX_DELAY_H) */</span>", 
];
xr_frag_insert('l/07/922236c5533bec69c40e360cfa3339a094c2e9.xr', __xr_tmp);
