var __xr_tmp = [
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * acpi_save_state_mem - save kernel state</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Create an identity mapped page table and copy the wakeup routine to</span>", 
"<span class=\"comment\"> * low memory.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that this is too late to change acpi_wakeup_address.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#acpi_save_state_mem\">acpi_save_state_mem</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#wakeup_header\">wakeup_header</a> *<a class=\"id\" href=\"#header\">header</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#acpi_realmode\">acpi_realmode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"Could not allocate memory during boot, \"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"S3 disabled\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>((void *)<a class=\"id\" href=\"#acpi_realmode\">acpi_realmode</a>, &amp;<a class=\"id\" href=\"#wakeup_code_start\">wakeup_code_start</a>, <a class=\"id\" href=\"#WAKEUP_SIZE\">WAKEUP_SIZE</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#header\">header</a> = (struct <a class=\"id\" href=\"#wakeup_header\">wakeup_header</a> *)(<a class=\"id\" href=\"#acpi_realmode\">acpi_realmode</a> + <a class=\"id\" href=\"#HEADER_OFFSET\">HEADER_OFFSET</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#signature\">signature</a> != 0x51ee1111) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"wakeup header does not match\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#video_mode\">video_mode</a> = <a class=\"id\" href=\"#saved_video_mode\">saved_video_mode</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#wakeup_jmp_seg\">wakeup_jmp_seg</a> = <a class=\"id\" href=\"#acpi_wakeup_address\">acpi_wakeup_address</a> >> 4;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Set up the wakeup GDT.  We set these up as Big Real Mode,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that is, with limits set to 4 GB.  At least the Lenovo</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Thinkpad X61 is known to need this for the video BIOS</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * initialization quirk to work; this is likely to also</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be the case for other laptops or integrated video devices.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* GDT[0]: GDT self-pointer */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#wakeup_gdt\">wakeup_gdt</a>[0] =", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#u64\">u64</a>)(sizeof(<a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#wakeup_gdt\">wakeup_gdt</a>) - 1) +", 
"<span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#u64\">u64</a>)(<a class=\"id\" href=\"#acpi_wakeup_address\">acpi_wakeup_address</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>((char *)&amp;<a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#wakeup_gdt\">wakeup_gdt</a> - (char *)<a class=\"id\" href=\"#acpi_realmode\">acpi_realmode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><< 16);", 
"<span class=\"ts\"/><span class=\"comment\">/* GDT[1]: big real mode-like code segment */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#wakeup_gdt\">wakeup_gdt</a>[1] =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#GDT_ENTRY\">GDT_ENTRY</a>(0x809b, <a class=\"id\" href=\"#acpi_wakeup_address\">acpi_wakeup_address</a>, 0xfffff);", 
"<span class=\"ts\"/><span class=\"comment\">/* GDT[2]: big real mode-like data segment */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#wakeup_gdt\">wakeup_gdt</a>[2] =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#GDT_ENTRY\">GDT_ENTRY</a>(0x8093, <a class=\"id\" href=\"#acpi_wakeup_address\">acpi_wakeup_address</a>, 0xfffff);", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_64BIT\">CONFIG_64BIT</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#store_gdt\">store_gdt</a>((struct <a class=\"id\" href=\"#desc_ptr\">desc_ptr</a> *)&amp;<a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#pmode_gdt\">pmode_gdt</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rdmsr_safe\">rdmsr_safe</a>(<a class=\"id\" href=\"#MSR_EFER\">MSR_EFER</a>, &amp;<a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#pmode_efer_low\">pmode_efer_low</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#pmode_efer_high\">pmode_efer_high</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#pmode_efer_low\">pmode_efer_low</a> = <a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#pmode_efer_high\">pmode_efer_high</a> = 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !CONFIG_64BIT */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#pmode_cr0\">pmode_cr0</a> = <a class=\"id\" href=\"#read_cr0\">read_cr0</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#pmode_cr4\">pmode_cr4</a> = <a class=\"id\" href=\"#read_cr4_safe\">read_cr4_safe</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#realmode_flags\">realmode_flags</a> = <a class=\"id\" href=\"#acpi_realmode_flags\">acpi_realmode_flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#real_magic\">real_magic</a> = 0x12345678;", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_64BIT\">CONFIG_64BIT</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#pmode_entry\">pmode_entry</a> = (<a class=\"id\" href=\"#u32\">u32</a>)&amp;<a class=\"id\" href=\"#wakeup_pmode_return\">wakeup_pmode_return</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#pmode_cr3\">pmode_cr3</a> = (<a class=\"id\" href=\"#u32\">u32</a>)(<a class=\"id\" href=\"#swsusp_pg_dir\">swsusp_pg_dir</a> - <a class=\"id\" href=\"#__PAGE_OFFSET\">__PAGE_OFFSET</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#saved_magic\">saved_magic</a> = 0x12345678;", 
"#else <span class=\"comment\">/* CONFIG_64BIT */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#header\">header</a>-><a class=\"id\" href=\"#trampoline_segment\">trampoline_segment</a> = <a class=\"id\" href=\"#setup_trampoline\">setup_trampoline</a>() >> 4;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stack_start\">stack_start</a>.<a class=\"id\" href=\"#sp\">sp</a> = <a class=\"id\" href=\"#temp_stack\">temp_stack</a> + sizeof(<a class=\"id\" href=\"#temp_stack\">temp_stack</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#early_gdt_descr\">early_gdt_descr</a>.<a class=\"id\" href=\"#address\">address</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long)<a class=\"id\" href=\"#get_cpu_gdt_table\">get_cpu_gdt_table</a>(<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"<span class=\"ts\"/><a class=\"id\" href=\"#initial_gs\">initial_gs</a> = <a class=\"id\" href=\"#per_cpu_offset\">per_cpu_offset</a>(<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#initial_code\">initial_code</a> = (unsigned long)<a class=\"id\" href=\"#wakeup_long64\">wakeup_long64</a>;", 
"       <a class=\"id\" href=\"#saved_magic\">saved_magic</a> = 0x123456789abcdef0L;", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_64BIT */</span>", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * acpi_restore_state - undo effects of acpi_save_state_mem</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#acpi_restore_state_mem\">acpi_restore_state_mem</a>(void)", 
"{", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * acpi_reserve_wakeup_memory - do _very_ early ACPI initialisation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We allocate a page from the first 1MB of memory for the wakeup</span>", 
"<span class=\"comment\"> * routine for when we come back from a sleep state. The</span>", 
"<span class=\"comment\"> * runtime allocator allows specification of &lt;16MB pages, but not</span>", 
"<span class=\"comment\"> * &lt;1MB pages.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#acpi_reserve_wakeup_memory\">acpi_reserve_wakeup_memory</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mem\">mem</a>;", 
"", 
"<span class=\"ts\"/>if ((&amp;<a class=\"id\" href=\"#wakeup_code_end\">wakeup_code_end</a> - &amp;<a class=\"id\" href=\"#wakeup_code_start\">wakeup_code_start</a>) &gt; <a class=\"id\" href=\"#WAKEUP_SIZE\">WAKEUP_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"ACPI: Wakeup code way too big, S3 disabled.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#find_e820_area\">find_e820_area</a>(0, 1<<20, <a class=\"id\" href=\"#WAKEUP_SIZE\">WAKEUP_SIZE</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mem\">mem</a> == -1L) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"ACPI: Cannot allocate lowmem, S3 disabled.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_realmode\">acpi_realmode</a> = (unsigned long) <a class=\"id\" href=\"#phys_to_virt\">phys_to_virt</a>(<a class=\"id\" href=\"#mem\">mem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_wakeup_address\">acpi_wakeup_address</a> = <a class=\"id\" href=\"#mem\">mem</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reserve_early\">reserve_early</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#mem\">mem</a> + <a class=\"id\" href=\"#WAKEUP_SIZE\">WAKEUP_SIZE</a>, \"ACPI WAKEUP\");", 
"}", 
"", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#acpi_sleep_setup\">acpi_sleep_setup</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#str\">str</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) && (*<a class=\"id\" href=\"#str\">str</a> != '\\0')) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#str\">str</a>, \"s3_bios\", 7) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_realmode_flags\">acpi_realmode_flags</a> |= 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#str\">str</a>, \"s3_mode\", 7) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_realmode_flags\">acpi_realmode_flags</a> |= 2;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#str\">str</a>, \"s3_beep\", 7) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_realmode_flags\">acpi_realmode_flags</a> |= 4;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HIBERNATION\">CONFIG_HIBERNATION</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#str\">str</a>, \"s4_nohwsig\", 10) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_no_s4_hw_signature\">acpi_no_s4_hw_signature</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#str\">str</a>, \"s4_nonvs\", 8) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"ACPI: acpi_sleep=s4_nonvs is deprecated, \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"please use acpi_sleep=nonvs instead\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_nvs_nosave\">acpi_nvs_nosave</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#str\">str</a>, \"nonvs\", 5) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_nvs_nosave\">acpi_nvs_nosave</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#str\">str</a>, \"old_ordering\", 12) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_old_suspend_ordering\">acpi_old_suspend_ordering</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#str\">str</a> = <a class=\"id\" href=\"#strchr\">strchr</a>(<a class=\"id\" href=\"#str\">str</a>, ',');", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#str\">str</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#str\">str</a> += <a class=\"id\" href=\"#strspn\">strspn</a>(<a class=\"id\" href=\"#str\">str</a>, \", \\t\");", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"acpi_sleep=\", <a class=\"id\" href=\"#acpi_sleep_setup\">acpi_sleep_setup</a>);", 
];
xr_frag_insert('l/07/dcc467c2163e4d975d1a8a88f909883d55c040.xr', __xr_tmp);
