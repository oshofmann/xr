var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__FS_NOTIFY_FSNOTIFY_H_\">__FS_NOTIFY_FSNOTIFY_H_</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__FS_NOTIFY_FSNOTIFY_H_\">__FS_NOTIFY_FSNOTIFY_H_</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fsnotify\">fsnotify</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#srcu\">srcu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/* destroy all events sitting in this groups notification queue */</span>", 
"extern void <a class=\"id\" href=\"#fsnotify_flush_notify\">fsnotify_flush_notify</a>(struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>);", 
"", 
"<span class=\"comment\">/* protects reads of inode and vfsmount marks list */</span>", 
"extern struct <a class=\"id\" href=\"#srcu_struct\">srcu_struct</a> <a class=\"id\" href=\"#fsnotify_mark_srcu\">fsnotify_mark_srcu</a>;", 
"", 
"extern void <a class=\"id\" href=\"#fsnotify_set_inode_mark_mask_locked\">fsnotify_set_inode_mark_mask_locked</a>(struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#fsn_mark\">fsn_mark</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"comment\">/* add a mark to an inode */</span>", 
"extern int <a class=\"id\" href=\"#fsnotify_add_inode_mark\">fsnotify_add_inode_mark</a>(struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#mark\">mark</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#allow_dups\">allow_dups</a>);", 
"<span class=\"comment\">/* add a mark to a vfsmount */</span>", 
"extern int <a class=\"id\" href=\"#fsnotify_add_vfsmount_mark\">fsnotify_add_vfsmount_mark</a>(struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#mark\">mark</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>, struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#allow_dups\">allow_dups</a>);", 
"", 
"<span class=\"comment\">/* final kfree of a group */</span>", 
"extern void <a class=\"id\" href=\"#fsnotify_final_destroy_group\">fsnotify_final_destroy_group</a>(struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>);", 
"", 
"<span class=\"comment\">/* vfsmount specific destruction of a mark */</span>", 
"extern void <a class=\"id\" href=\"#fsnotify_destroy_vfsmount_mark\">fsnotify_destroy_vfsmount_mark</a>(struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#mark\">mark</a>);", 
"<span class=\"comment\">/* inode specific destruction of a mark */</span>", 
"extern void <a class=\"id\" href=\"#fsnotify_destroy_inode_mark\">fsnotify_destroy_inode_mark</a>(struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#mark\">mark</a>);", 
"<span class=\"comment\">/* run the list of all marks associated with inode and flag them to be freed */</span>", 
"extern void <a class=\"id\" href=\"#fsnotify_clear_marks_by_inode\">fsnotify_clear_marks_by_inode</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"comment\">/* run the list of all marks associated with vfsmount and flag them to be freed */</span>", 
"extern void <a class=\"id\" href=\"#fsnotify_clear_marks_by_mount\">fsnotify_clear_marks_by_mount</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * update the dentry-&gt;d_flags of all of inode's children to indicate if inode cares</span>", 
"<span class=\"comment\"> * about events that happen to its children.</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#__fsnotify_update_child_dentry_flags\">__fsnotify_update_child_dentry_flags</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"comment\">/* allocate and destroy and event holder to attach events to notification/access queues */</span>", 
"extern struct <a class=\"id\" href=\"#fsnotify_event_holder\">fsnotify_event_holder</a> *<a class=\"id\" href=\"#fsnotify_alloc_event_holder\">fsnotify_alloc_event_holder</a>(void);", 
"extern void <a class=\"id\" href=\"#fsnotify_destroy_event_holder\">fsnotify_destroy_event_holder</a>(struct <a class=\"id\" href=\"#fsnotify_event_holder\">fsnotify_event_holder</a> *<a class=\"id\" href=\"#holder\">holder</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* __FS_NOTIFY_FSNOTIFY_H_ */</span>", 
];
xr_frag_insert('l/08/1a3e50f23ab4a9a95448fa1a41530ff820448a.xr', __xr_tmp);
