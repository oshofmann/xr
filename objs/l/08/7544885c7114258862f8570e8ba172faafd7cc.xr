var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/mm/mempool.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  memory buffer pool support. Such pools are mostly used</span>", 
"<span class=\"comment\"> *  for guaranteed, deadlock-free memory allocations during</span>", 
"<span class=\"comment\"> *  extreme VM load.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  started by Ingo Molnar, Copyright (C) 2001</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mempool\">mempool</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#blkdev\">blkdev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#writeback\">writeback</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static void <a class=\"id\" href=\"#add_element\">add_element</a>(<a class=\"id\" href=\"#mempool_t\">mempool_t</a> *<a class=\"id\" href=\"#pool\">pool</a>, void *<a class=\"id\" href=\"#element\">element</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#curr_nr\">curr_nr</a> >= <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#min_nr\">min_nr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#elements\">elements</a>[<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#curr_nr\">curr_nr</a>++] = <a class=\"id\" href=\"#element\">element</a>;", 
"}", 
"", 
"static void *<a class=\"id\" href=\"#remove_element\">remove_element</a>(<a class=\"id\" href=\"#mempool_t\">mempool_t</a> *<a class=\"id\" href=\"#pool\">pool</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#curr_nr\">curr_nr</a> <= 0);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#elements\">elements</a>[--<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#curr_nr\">curr_nr</a>];", 
"}", 
"", 
"static void <a class=\"id\" href=\"#free_pool\">free_pool</a>(<a class=\"id\" href=\"#mempool_t\">mempool_t</a> *<a class=\"id\" href=\"#pool\">pool</a>)", 
"{", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#curr_nr\">curr_nr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#element\">element</a> = <a class=\"id\" href=\"#remove_element\">remove_element</a>(<a class=\"id\" href=\"#pool\">pool</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#free\">free</a>(<a class=\"id\" href=\"#element\">element</a>, <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#pool_data\">pool_data</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#elements\">elements</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#pool\">pool</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * mempool_create - create a memory pool</span>", 
"<span class=\"comment\"> * @min_nr:    the minimum number of elements guaranteed to be</span>", 
"<span class=\"comment\"> *             allocated for this pool.</span>", 
"<span class=\"comment\"> * @alloc_fn:  user-defined element-allocation function.</span>", 
"<span class=\"comment\"> * @free_fn:   user-defined element-freeing function.</span>", 
"<span class=\"comment\"> * @pool_data: optional private data available to the user-defined functions.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * this function creates and allocates a guaranteed size, preallocated</span>", 
"<span class=\"comment\"> * memory pool. The pool can be used from the mempool_alloc() and mempool_free()</span>", 
"<span class=\"comment\"> * functions. This function might sleep. Both the alloc_fn() and the free_fn()</span>", 
"<span class=\"comment\"> * functions might sleep - as long as the mempool_alloc() function is not called</span>", 
"<span class=\"comment\"> * from IRQ contexts.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#mempool_t\">mempool_t</a> *<a class=\"id\" href=\"#mempool_create\">mempool_create</a>(int <a class=\"id\" href=\"#min_nr\">min_nr</a>, <a class=\"id\" href=\"#mempool_alloc_t\">mempool_alloc_t</a> *<a class=\"id\" href=\"#alloc_fn\">alloc_fn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mempool_free_t\">mempool_free_t</a> *<a class=\"id\" href=\"#free_fn\">free_fn</a>, void *<a class=\"id\" href=\"#pool_data\">pool_data</a>)", 
"{", 
"<span class=\"ts\"/>return  <a class=\"id\" href=\"#mempool_create_node\">mempool_create_node</a>(<a class=\"id\" href=\"#min_nr\">min_nr</a>,<a class=\"id\" href=\"#alloc_fn\">alloc_fn</a>,<a class=\"id\" href=\"#free_fn\">free_fn</a>, <a class=\"id\" href=\"#pool_data\">pool_data</a>,-1);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#mempool_create\">mempool_create</a>);", 
"", 
"<a class=\"id\" href=\"#mempool_t\">mempool_t</a> *<a class=\"id\" href=\"#mempool_create_node\">mempool_create_node</a>(int <a class=\"id\" href=\"#min_nr\">min_nr</a>, <a class=\"id\" href=\"#mempool_alloc_t\">mempool_alloc_t</a> *<a class=\"id\" href=\"#alloc_fn\">alloc_fn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mempool_free_t\">mempool_free_t</a> *<a class=\"id\" href=\"#free_fn\">free_fn</a>, void *<a class=\"id\" href=\"#pool_data\">pool_data</a>, int <a class=\"id\" href=\"#node_id\">node_id</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mempool_t\">mempool_t</a> *<a class=\"id\" href=\"#pool\">pool</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pool\">pool</a> = <a class=\"id\" href=\"#kmalloc_node\">kmalloc_node</a>(sizeof(*<a class=\"id\" href=\"#pool\">pool</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a> | <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>, <a class=\"id\" href=\"#node_id\">node_id</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pool\">pool</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#elements\">elements</a> = <a class=\"id\" href=\"#kmalloc_node\">kmalloc_node</a>(<a class=\"id\" href=\"#min_nr\">min_nr</a> * sizeof(void *),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, <a class=\"id\" href=\"#node_id\">node_id</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#elements\">elements</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#pool\">pool</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#min_nr\">min_nr</a> = <a class=\"id\" href=\"#min_nr\">min_nr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#pool_data\">pool_data</a> = <a class=\"id\" href=\"#pool_data\">pool_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_waitqueue_head\">init_waitqueue_head</a>(&amp;<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#alloc\">alloc</a> = <a class=\"id\" href=\"#alloc_fn\">alloc_fn</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#free\">free</a> = <a class=\"id\" href=\"#free_fn\">free_fn</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * First pre-allocate the guaranteed number of buffers.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#curr_nr\">curr_nr</a> &lt; <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#min_nr\">min_nr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#element\">element</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#element\">element</a> = <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#alloc\">alloc</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#pool_data\">pool_data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#element\">element</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_pool\">free_pool</a>(<a class=\"id\" href=\"#pool\">pool</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_element\">add_element</a>(<a class=\"id\" href=\"#pool\">pool</a>, <a class=\"id\" href=\"#element\">element</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pool\">pool</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#mempool_create_node\">mempool_create_node</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * mempool_resize - resize an existing memory pool</span>", 
"<span class=\"comment\"> * @pool:       pointer to the memory pool which was allocated via</span>", 
"<span class=\"comment\"> *              mempool_create().</span>", 
"<span class=\"comment\"> * @new_min_nr: the new minimum number of elements guaranteed to be</span>", 
"<span class=\"comment\"> *              allocated for this pool.</span>", 
"<span class=\"comment\"> * @gfp_mask:   the usual allocation bitmask.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function shrinks/grows the pool. In the case of growing,</span>", 
"<span class=\"comment\"> * it cannot be guaranteed that the pool will be grown to the new</span>", 
"<span class=\"comment\"> * size immediately, but new mempool_free() calls will refill it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note, the caller must guarantee that no mempool_destroy is called</span>", 
"<span class=\"comment\"> * while this function is running. mempool_alloc() &amp; mempool_free()</span>", 
"<span class=\"comment\"> * might be called (eg. from IRQ contexts) while this function executes.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#mempool_resize\">mempool_resize</a>(<a class=\"id\" href=\"#mempool_t\">mempool_t</a> *<a class=\"id\" href=\"#pool\">pool</a>, int <a class=\"id\" href=\"#new_min_nr\">new_min_nr</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#element\">element</a>;", 
"<span class=\"ts\"/>void **<a class=\"id\" href=\"#new_elements\">new_elements</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#new_min_nr\">new_min_nr</a> <= 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_min_nr\">new_min_nr</a> <= <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#min_nr\">min_nr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#new_min_nr\">new_min_nr</a> &lt; <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#curr_nr\">curr_nr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#element\">element</a> = <a class=\"id\" href=\"#remove_element\">remove_element</a>(<a class=\"id\" href=\"#pool\">pool</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#free\">free</a>(<a class=\"id\" href=\"#element\">element</a>, <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#pool_data\">pool_data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#min_nr\">min_nr</a> = <a class=\"id\" href=\"#new_min_nr\">new_min_nr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Grow the pool */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_elements\">new_elements</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#new_min_nr\">new_min_nr</a> * sizeof(*<a class=\"id\" href=\"#new_elements\">new_elements</a>), <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#new_elements\">new_elements</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#new_min_nr\">new_min_nr</a> <= <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#min_nr\">min_nr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Raced, other resize will do our work */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#new_elements\">new_elements</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#new_elements\">new_elements</a>, <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#elements\">elements</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#curr_nr\">curr_nr</a> * sizeof(*<a class=\"id\" href=\"#new_elements\">new_elements</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#elements\">elements</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#elements\">elements</a> = <a class=\"id\" href=\"#new_elements\">new_elements</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#min_nr\">min_nr</a> = <a class=\"id\" href=\"#new_min_nr\">new_min_nr</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#curr_nr\">curr_nr</a> &lt; <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#min_nr\">min_nr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#element\">element</a> = <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#alloc\">alloc</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#pool_data\">pool_data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#element\">element</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#curr_nr\">curr_nr</a> &lt; <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#min_nr\">min_nr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_element\">add_element</a>(<a class=\"id\" href=\"#pool\">pool</a>, <a class=\"id\" href=\"#element\">element</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#free\">free</a>(<a class=\"id\" href=\"#element\">element</a>, <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#pool_data\">pool_data</a>);<span class=\"ts\"/><span class=\"comment\">/* Raced */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#mempool_resize\">mempool_resize</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * mempool_destroy - deallocate a memory pool</span>", 
"<span class=\"comment\"> * @pool:      pointer to the memory pool which was allocated via</span>", 
"<span class=\"comment\"> *             mempool_create().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * this function only sleeps if the free_fn() function sleeps. The caller</span>", 
"<span class=\"comment\"> * has to guarantee that all elements have been returned to the pool (ie:</span>", 
"<span class=\"comment\"> * freed) prior to calling mempool_destroy().</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#mempool_destroy\">mempool_destroy</a>(<a class=\"id\" href=\"#mempool_t\">mempool_t</a> *<a class=\"id\" href=\"#pool\">pool</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Check for outstanding elements */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#curr_nr\">curr_nr</a> != <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#min_nr\">min_nr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_pool\">free_pool</a>(<a class=\"id\" href=\"#pool\">pool</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#mempool_destroy\">mempool_destroy</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * mempool_alloc - allocate an element from a specific memory pool</span>", 
"<span class=\"comment\"> * @pool:      pointer to the memory pool which was allocated via</span>", 
"<span class=\"comment\"> *             mempool_create().</span>", 
"<span class=\"comment\"> * @gfp_mask:  the usual allocation bitmask.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * this function only sleeps if the alloc_fn() function sleeps or</span>", 
"<span class=\"comment\"> * returns NULL. Note that due to preallocation, this function</span>", 
"<span class=\"comment\"> * *never* fails when called from process contexts. (it might</span>", 
"<span class=\"comment\"> * fail if called from an IRQ context.)</span>", 
"<span class=\"comment\"> */</span>", 
"void * <a class=\"id\" href=\"#mempool_alloc\">mempool_alloc</a>(<a class=\"id\" href=\"#mempool_t\">mempool_t</a> *<a class=\"id\" href=\"#pool\">pool</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#element\">element</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> <a class=\"id\" href=\"#wait\">wait</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_temp\">gfp_temp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep_if\">might_sleep_if</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#__GFP_WAIT\">__GFP_WAIT</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> |= <a class=\"id\" href=\"#__GFP_NOMEMALLOC\">__GFP_NOMEMALLOC</a>;<span class=\"ts\"/><span class=\"comment\">/* don't allocate emergency reserves */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> |= <a class=\"id\" href=\"#__GFP_NORETRY\">__GFP_NORETRY</a>;<span class=\"ts\"/><span class=\"comment\">/* don't loop in __alloc_pages */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> |= <a class=\"id\" href=\"#__GFP_NOWARN\">__GFP_NOWARN</a>;<span class=\"ts\"/><span class=\"comment\">/* failures are OK */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gfp_temp\">gfp_temp</a> = <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; ~(<a class=\"id\" href=\"#__GFP_WAIT\">__GFP_WAIT</a>|<a class=\"id\" href=\"#__GFP_IO\">__GFP_IO</a>);", 
"", 
"<a class=\"id\" href=\"#repeat_alloc\">repeat_alloc</a>:", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#element\">element</a> = <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#alloc\">alloc</a>(<a class=\"id\" href=\"#gfp_temp\">gfp_temp</a>, <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#pool_data\">pool_data</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#element\">element</a> != <a class=\"id\" href=\"#NULL\">NULL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#element\">element</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#curr_nr\">curr_nr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#element\">element</a> = <a class=\"id\" href=\"#remove_element\">remove_element</a>(<a class=\"id\" href=\"#pool\">pool</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#element\">element</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We must not sleep in the GFP_ATOMIC case */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#__GFP_WAIT\">__GFP_WAIT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Now start performing page reclaim */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gfp_temp\">gfp_temp</a> = <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_wait\">init_wait</a>(&amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prepare_to_wait\">prepare_to_wait</a>(&amp;<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#wait\">wait</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#curr_nr\">curr_nr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * FIXME: this should be io_schedule().  The timeout is there</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * as a workaround for some DM problems in 2.6.18.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#io_schedule_timeout\">io_schedule_timeout</a>(5*<a class=\"id\" href=\"#HZ\">HZ</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#finish_wait\">finish_wait</a>(&amp;<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#wait\">wait</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#repeat_alloc\">repeat_alloc</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#mempool_alloc\">mempool_alloc</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * mempool_free - return an element to the pool.</span>", 
"<span class=\"comment\"> * @element:   pool element pointer.</span>", 
"<span class=\"comment\"> * @pool:      pointer to the memory pool which was allocated via</span>", 
"<span class=\"comment\"> *             mempool_create().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * this function only sleeps if the free_fn() function sleeps.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#mempool_free\">mempool_free</a>(void *<a class=\"id\" href=\"#element\">element</a>, <a class=\"id\" href=\"#mempool_t\">mempool_t</a> *<a class=\"id\" href=\"#pool\">pool</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#element\">element</a> == <a class=\"id\" href=\"#NULL\">NULL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#curr_nr\">curr_nr</a> &lt; <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#min_nr\">min_nr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#curr_nr\">curr_nr</a> &lt; <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#min_nr\">min_nr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_element\">add_element</a>(<a class=\"id\" href=\"#pool\">pool</a>, <a class=\"id\" href=\"#element\">element</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up\">wake_up</a>(&amp;<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#free\">free</a>(<a class=\"id\" href=\"#element\">element</a>, <a class=\"id\" href=\"#pool\">pool</a>-><a class=\"id\" href=\"#pool_data\">pool_data</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#mempool_free\">mempool_free</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A commonly used alloc and free fn.</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#mempool_alloc_slab\">mempool_alloc_slab</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, void *<a class=\"id\" href=\"#pool_data\">pool_data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#pool_data\">pool_data</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#mempool_alloc_slab\">mempool_alloc_slab</a>);", 
"", 
"void <a class=\"id\" href=\"#mempool_free_slab\">mempool_free_slab</a>(void *<a class=\"id\" href=\"#element\">element</a>, void *<a class=\"id\" href=\"#pool_data\">pool_data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#pool_data\">pool_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#element\">element</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#mempool_free_slab\">mempool_free_slab</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A commonly used alloc and free fn that kmalloc/kfrees the amount of memory</span>", 
"<span class=\"comment\"> * specified by pool_data</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#mempool_kmalloc\">mempool_kmalloc</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, void *<a class=\"id\" href=\"#pool_data\">pool_data</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a> = (<a class=\"id\" href=\"#size_t\">size_t</a>)<a class=\"id\" href=\"#pool_data\">pool_data</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#mempool_kmalloc\">mempool_kmalloc</a>);", 
"", 
"void <a class=\"id\" href=\"#mempool_kfree\">mempool_kfree</a>(void *<a class=\"id\" href=\"#element\">element</a>, void *<a class=\"id\" href=\"#pool_data\">pool_data</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#element\">element</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#mempool_kfree\">mempool_kfree</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A simple mempool-backed page allocator that allocates pages</span>", 
"<span class=\"comment\"> * of the order specified by pool_data.</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#mempool_alloc_pages\">mempool_alloc_pages</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, void *<a class=\"id\" href=\"#pool_data\">pool_data</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#order\">order</a> = (int)(long)<a class=\"id\" href=\"#pool_data\">pool_data</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#alloc_pages\">alloc_pages</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#order\">order</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#mempool_alloc_pages\">mempool_alloc_pages</a>);", 
"", 
"void <a class=\"id\" href=\"#mempool_free_pages\">mempool_free_pages</a>(void *<a class=\"id\" href=\"#element\">element</a>, void *<a class=\"id\" href=\"#pool_data\">pool_data</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#order\">order</a> = (int)(long)<a class=\"id\" href=\"#pool_data\">pool_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__free_pages\">__free_pages</a>(<a class=\"id\" href=\"#element\">element</a>, <a class=\"id\" href=\"#order\">order</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#mempool_free_pages\">mempool_free_pages</a>);", 
];
xr_frag_insert('l/08/7544885c7114258862f8570e8ba172faafd7cc.xr', __xr_tmp);
