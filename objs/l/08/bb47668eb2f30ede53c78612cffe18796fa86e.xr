var __xr_tmp = [
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#to_input_dev\">to_input_dev</a>(<a class=\"id\" href=\"#device\">device</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INPUT_ADD_HOTPLUG_VAR\">INPUT_ADD_HOTPLUG_VAR</a>(\"PRODUCT=%x/%x/%x/%x\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#id\">id</a>.<a class=\"id\" href=\"#bustype\">bustype</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#id\">id</a>.<a class=\"id\" href=\"#vendor\">vendor</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#id\">id</a>.<a class=\"id\" href=\"#product\">product</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#id\">id</a>.<a class=\"id\" href=\"#version\">version</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INPUT_ADD_HOTPLUG_VAR\">INPUT_ADD_HOTPLUG_VAR</a>(\"NAME=\\\"%s\\\"\", <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#phys\">phys</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INPUT_ADD_HOTPLUG_VAR\">INPUT_ADD_HOTPLUG_VAR</a>(\"PHYS=\\\"%s\\\"\", <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#phys\">phys</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#uniq\">uniq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INPUT_ADD_HOTPLUG_VAR\">INPUT_ADD_HOTPLUG_VAR</a>(\"UNIQ=\\\"%s\\\"\", <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#uniq\">uniq</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INPUT_ADD_HOTPLUG_BM_VAR\">INPUT_ADD_HOTPLUG_BM_VAR</a>(\"EV=\", <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#evbit\">evbit</a>, <a class=\"id\" href=\"#EV_MAX\">EV_MAX</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#EV_KEY\">EV_KEY</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#evbit\">evbit</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INPUT_ADD_HOTPLUG_BM_VAR\">INPUT_ADD_HOTPLUG_BM_VAR</a>(\"KEY=\", <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#keybit\">keybit</a>, <a class=\"id\" href=\"#KEY_MAX\">KEY_MAX</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#EV_REL\">EV_REL</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#evbit\">evbit</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INPUT_ADD_HOTPLUG_BM_VAR\">INPUT_ADD_HOTPLUG_BM_VAR</a>(\"REL=\", <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#relbit\">relbit</a>, <a class=\"id\" href=\"#REL_MAX\">REL_MAX</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#EV_ABS\">EV_ABS</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#evbit\">evbit</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INPUT_ADD_HOTPLUG_BM_VAR\">INPUT_ADD_HOTPLUG_BM_VAR</a>(\"ABS=\", <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#absbit\">absbit</a>, <a class=\"id\" href=\"#ABS_MAX\">ABS_MAX</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#EV_MSC\">EV_MSC</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#evbit\">evbit</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INPUT_ADD_HOTPLUG_BM_VAR\">INPUT_ADD_HOTPLUG_BM_VAR</a>(\"MSC=\", <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mscbit\">mscbit</a>, <a class=\"id\" href=\"#MSC_MAX\">MSC_MAX</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#EV_LED\">EV_LED</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#evbit\">evbit</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INPUT_ADD_HOTPLUG_BM_VAR\">INPUT_ADD_HOTPLUG_BM_VAR</a>(\"LED=\", <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ledbit\">ledbit</a>, <a class=\"id\" href=\"#LED_MAX\">LED_MAX</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#EV_SND\">EV_SND</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#evbit\">evbit</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INPUT_ADD_HOTPLUG_BM_VAR\">INPUT_ADD_HOTPLUG_BM_VAR</a>(\"SND=\", <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#sndbit\">sndbit</a>, <a class=\"id\" href=\"#SND_MAX\">SND_MAX</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#EV_FF\">EV_FF</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#evbit\">evbit</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INPUT_ADD_HOTPLUG_BM_VAR\">INPUT_ADD_HOTPLUG_BM_VAR</a>(\"FF=\", <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ffbit\">ffbit</a>, <a class=\"id\" href=\"#FF_MAX\">FF_MAX</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#EV_SW\">EV_SW</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#evbit\">evbit</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INPUT_ADD_HOTPLUG_BM_VAR\">INPUT_ADD_HOTPLUG_BM_VAR</a>(\"SW=\", <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#swbit\">swbit</a>, <a class=\"id\" href=\"#SW_MAX\">SW_MAX</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INPUT_ADD_HOTPLUG_MODALIAS_VAR\">INPUT_ADD_HOTPLUG_MODALIAS_VAR</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INPUT_DO_TOGGLE\">INPUT_DO_TOGGLE</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#on\">on</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#active\">active</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#EV_\">EV_</a>##<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#evbit\">evbit</a>))<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#type\">type</a>##<a class=\"id\" href=\"#_MAX\">_MAX</a>; <a class=\"id\" href=\"#i\">i</a>++) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bits\">bits</a>##<a class=\"id\" href=\"#bit\">bit</a>))<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#active\">active</a> = <a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bits\">bits</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#active\">active</a> && !<a class=\"id\" href=\"#on\">on</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#event\">event</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#EV_\">EV_</a>##<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#on\">on</a> ? <a class=\"id\" href=\"#active\">active</a> : 0);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (0)", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PM\">CONFIG_PM</a>", 
"static void <a class=\"id\" href=\"#input_dev_reset\">input_dev_reset</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#activate\">activate</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#event\">event</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INPUT_DO_TOGGLE\">INPUT_DO_TOGGLE</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#LED\">LED</a>, <a class=\"id\" href=\"#led\">led</a>, <a class=\"id\" href=\"#activate\">activate</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INPUT_DO_TOGGLE\">INPUT_DO_TOGGLE</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#SND\">SND</a>, <a class=\"id\" href=\"#snd\">snd</a>, <a class=\"id\" href=\"#activate\">activate</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#activate\">activate</a> && <a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#EV_REP\">EV_REP</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#evbit\">evbit</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#event\">event</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#EV_REP\">EV_REP</a>, <a class=\"id\" href=\"#REP_PERIOD\">REP_PERIOD</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#rep\">rep</a>[<a class=\"id\" href=\"#REP_PERIOD\">REP_PERIOD</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#event\">event</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#EV_REP\">EV_REP</a>, <a class=\"id\" href=\"#REP_DELAY\">REP_DELAY</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#rep\">rep</a>[<a class=\"id\" href=\"#REP_DELAY\">REP_DELAY</a>]);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#input_dev_suspend\">input_dev_suspend</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#input_dev\">input_dev</a> = <a class=\"id\" href=\"#to_input_dev\">to_input_dev</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#input_dev\">input_dev</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#input_dev_reset\">input_dev_reset</a>(<a class=\"id\" href=\"#input_dev\">input_dev</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#input_dev\">input_dev</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#input_dev_resume\">input_dev_resume</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#input_dev\">input_dev</a> = <a class=\"id\" href=\"#to_input_dev\">to_input_dev</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#input_dev\">input_dev</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#input_dev_reset\">input_dev_reset</a>(<a class=\"id\" href=\"#input_dev\">input_dev</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Keys that have been pressed at suspend time are unlikely</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to be still pressed when we resume.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#input_dev\">input_dev</a>-><a class=\"id\" href=\"#event_lock\">event_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#input_dev_release_keys\">input_dev_release_keys</a>(<a class=\"id\" href=\"#input_dev\">input_dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#input_dev\">input_dev</a>-><a class=\"id\" href=\"#event_lock\">event_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#input_dev\">input_dev</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#dev_pm_ops\">dev_pm_ops</a> <a class=\"id\" href=\"#input_dev_pm_ops\">input_dev_pm_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#suspend\">suspend</a><span class=\"ts\"/>= <a class=\"id\" href=\"#input_dev_suspend\">input_dev_suspend</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#resume\">resume</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#input_dev_resume\">input_dev_resume</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#poweroff\">poweroff</a><span class=\"ts\"/>= <a class=\"id\" href=\"#input_dev_suspend\">input_dev_suspend</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#restore\">restore</a><span class=\"ts\"/>= <a class=\"id\" href=\"#input_dev_resume\">input_dev_resume</a>,", 
"};", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PM */</span>", 
"", 
"static struct <a class=\"id\" href=\"#device_type\">device_type</a> <a class=\"id\" href=\"#input_dev_type\">input_dev_type</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#groups\">groups</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#input_dev_attr_groups\">input_dev_attr_groups</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a><span class=\"ts\"/>= <a class=\"id\" href=\"#input_dev_release\">input_dev_release</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#uevent\">uevent</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#input_dev_uevent\">input_dev_uevent</a>,", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PM\">CONFIG_PM</a>", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#pm\">pm</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#input_dev_pm_ops\">input_dev_pm_ops</a>,", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"static char *<a class=\"id\" href=\"#input_devnode\">input_devnode</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#mode_t\">mode_t</a> *<a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kasprintf\">kasprintf</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, \"input/%s\", <a class=\"id\" href=\"#dev_name\">dev_name</a>(<a class=\"id\" href=\"#dev\">dev</a>));", 
"}", 
"", 
"struct <a class=\"id\" href=\"#class\">class</a> <a class=\"id\" href=\"#input_class\">input_class</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>= \"input\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#devnode\">devnode</a><span class=\"ts\"/>= <a class=\"id\" href=\"#input_devnode\">input_devnode</a>,", 
"};", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#input_class\">input_class</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * input_allocate_device - allocate memory for new input device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns prepared struct input_dev or NULL.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE: Use input_free_device() to free devices that have not been</span>", 
"<span class=\"comment\"> * registered; input_unregister_device() should be used for already</span>", 
"<span class=\"comment\"> * registered devices.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#input_allocate_device\">input_allocate_device</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#input_dev\">input_dev</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#type\">type</a> = &amp;<a class=\"id\" href=\"#input_dev_type\">input_dev_type</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#class\">class</a> = &amp;<a class=\"id\" href=\"#input_class\">input_class</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device_initialize\">device_initialize</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#event_lock\">event_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#h_list\">h_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#node\">node</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__module_get\">__module_get</a>(<a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dev\">dev</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#input_allocate_device\">input_allocate_device</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * input_free_device - free memory occupied by input_dev structure</span>", 
"<span class=\"comment\"> * @dev: input device to free</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function should only be used if input_register_device()</span>", 
"<span class=\"comment\"> * was not called yet or if it failed. Once device was registered</span>", 
"<span class=\"comment\"> * use input_unregister_device() and memory will be freed once last</span>", 
"<span class=\"comment\"> * reference to the device is dropped.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Device should be allocated by input_allocate_device().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE: If there are references to the input device then memory</span>", 
"<span class=\"comment\"> * will not be freed until last reference is dropped.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#input_free_device\">input_free_device</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_put_device\">input_put_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#input_free_device\">input_free_device</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * input_mt_create_slots() - create MT input slots</span>", 
"<span class=\"comment\"> * @dev: input device supporting MT events and finger tracking</span>", 
"<span class=\"comment\"> * @num_slots: number of slots used by the device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function allocates all necessary memory for MT slot handling in the</span>", 
"<span class=\"comment\"> * input device, and adds ABS_MT_SLOT to the device capabilities. All slots</span>", 
"<span class=\"comment\"> * are initially marked as unused iby setting ABS_MT_TRACKING_ID to -1.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#input_mt_create_slots\">input_mt_create_slots</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, unsigned int <a class=\"id\" href=\"#num_slots\">num_slots</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#num_slots\">num_slots</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mt\">mt</a> = <a class=\"id\" href=\"#kcalloc\">kcalloc</a>(<a class=\"id\" href=\"#num_slots\">num_slots</a>, sizeof(struct <a class=\"id\" href=\"#input_mt_slot\">input_mt_slot</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mt\">mt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mtsize\">mtsize</a> = <a class=\"id\" href=\"#num_slots\">num_slots</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#input_set_abs_params\">input_set_abs_params</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#ABS_MT_SLOT\">ABS_MT_SLOT</a>, 0, <a class=\"id\" href=\"#num_slots\">num_slots</a> - 1, 0, 0);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Mark slots as 'unused' */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#num_slots\">num_slots</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mt\">mt</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#abs\">abs</a>[<a class=\"id\" href=\"#ABS_MT_TRACKING_ID\">ABS_MT_TRACKING_ID</a> - <a class=\"id\" href=\"#ABS_MT_FIRST\">ABS_MT_FIRST</a>] = -1;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#input_mt_create_slots\">input_mt_create_slots</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * input_mt_destroy_slots() - frees the MT slots of the input device</span>", 
"<span class=\"comment\"> * @dev: input device with allocated MT slots</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is only needed in error path as the input core will</span>", 
"<span class=\"comment\"> * automatically free the MT slots when the device is destroyed.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#input_mt_destroy_slots\">input_mt_destroy_slots</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mt\">mt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mt\">mt</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mtsize\">mtsize</a> = 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#input_mt_destroy_slots\">input_mt_destroy_slots</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * input_set_capability - mark device as capable of a certain event</span>", 
"<span class=\"comment\"> * @dev: device that is capable of emitting or accepting event</span>", 
"<span class=\"comment\"> * @type: type of the event (EV_KEY, EV_REL, etc...)</span>", 
"<span class=\"comment\"> * @code: event code</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In addition to setting up corresponding bit in appropriate capability</span>", 
"<span class=\"comment\"> * bitmap the function also adjusts dev-&gt;evbit.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#input_set_capability\">input_set_capability</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, unsigned int <a class=\"id\" href=\"#type\">type</a>, unsigned int <a class=\"id\" href=\"#code\">code</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#EV_KEY\">EV_KEY</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_bit\">__set_bit</a>(<a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#keybit\">keybit</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#EV_REL\">EV_REL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_bit\">__set_bit</a>(<a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#relbit\">relbit</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#EV_ABS\">EV_ABS</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_bit\">__set_bit</a>(<a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#absbit\">absbit</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#EV_MSC\">EV_MSC</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_bit\">__set_bit</a>(<a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mscbit\">mscbit</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#EV_SW\">EV_SW</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_bit\">__set_bit</a>(<a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#swbit\">swbit</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#EV_LED\">EV_LED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_bit\">__set_bit</a>(<a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ledbit\">ledbit</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#EV_SND\">EV_SND</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_bit\">__set_bit</a>(<a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#sndbit\">sndbit</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#EV_FF\">EV_FF</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_bit\">__set_bit</a>(<a class=\"id\" href=\"#code\">code</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ffbit\">ffbit</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#EV_PWR\">EV_PWR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* do nothing */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"input_set_capability: unknown type %u (code %u)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#code\">code</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dump_stack\">dump_stack</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_bit\">__set_bit</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#evbit\">evbit</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#input_set_capability\">input_set_capability</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INPUT_CLEANSE_BITMASK\">INPUT_CLEANSE_BITMASK</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#bits\">bits</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#EV_\">EV_</a>##<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#evbit\">evbit</a>))<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bits\">bits</a>##<a class=\"id\" href=\"#bit\">bit</a>, 0,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bits\">bits</a>##<a class=\"id\" href=\"#bit\">bit</a>));<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (0)", 
"", 
"static void <a class=\"id\" href=\"#input_cleanse_bitmasks\">input_cleanse_bitmasks</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INPUT_CLEANSE_BITMASK\">INPUT_CLEANSE_BITMASK</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#KEY\">KEY</a>, <a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INPUT_CLEANSE_BITMASK\">INPUT_CLEANSE_BITMASK</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#REL\">REL</a>, <a class=\"id\" href=\"#rel\">rel</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INPUT_CLEANSE_BITMASK\">INPUT_CLEANSE_BITMASK</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#ABS\">ABS</a>, <a class=\"id\" href=\"#abs\">abs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INPUT_CLEANSE_BITMASK\">INPUT_CLEANSE_BITMASK</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#MSC\">MSC</a>, <a class=\"id\" href=\"#msc\">msc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INPUT_CLEANSE_BITMASK\">INPUT_CLEANSE_BITMASK</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#LED\">LED</a>, <a class=\"id\" href=\"#led\">led</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INPUT_CLEANSE_BITMASK\">INPUT_CLEANSE_BITMASK</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#SND\">SND</a>, <a class=\"id\" href=\"#snd\">snd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INPUT_CLEANSE_BITMASK\">INPUT_CLEANSE_BITMASK</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#FF\">FF</a>, <a class=\"id\" href=\"#ff\">ff</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INPUT_CLEANSE_BITMASK\">INPUT_CLEANSE_BITMASK</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#SW\">SW</a>, <a class=\"id\" href=\"#sw\">sw</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * input_register_device - register device with input core</span>", 
"<span class=\"comment\"> * @dev: device to be registered</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function registers device with input core. The device must be</span>", 
"<span class=\"comment\"> * allocated with input_allocate_device() and all it's capabilities</span>", 
"<span class=\"comment\"> * set up before registering.</span>", 
"<span class=\"comment\"> * If function fails the device must be freed with input_free_device().</span>", 
"<span class=\"comment\"> * Once device has been successfully registered it can be unregistered</span>", 
"<span class=\"comment\"> * with input_unregister_device(); input_free_device() should not be</span>", 
"<span class=\"comment\"> * called in this case.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#input_register_device\">input_register_device</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>static <a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#input_no\">input_no</a> = <a class=\"id\" href=\"#ATOMIC_INIT\">ATOMIC_INIT</a>(0);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#input_handler\">input_handler</a> *<a class=\"id\" href=\"#handler\">handler</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#path\">path</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Every input device generates EV_SYN/SYN_REPORT events. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_bit\">__set_bit</a>(<a class=\"id\" href=\"#EV_SYN\">EV_SYN</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#evbit\">evbit</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* KEY_RESERVED is not supposed to be transmitted to userspace. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__clear_bit\">__clear_bit</a>(<a class=\"id\" href=\"#KEY_RESERVED\">KEY_RESERVED</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#keybit\">keybit</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Make sure that bitmasks not mentioned in dev-&gt;evbit are clean. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#input_cleanse_bitmasks\">input_cleanse_bitmasks</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If delay and period are pre-set by the driver, then autorepeating</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is handled by the driver itself and we don't do it in input.c.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_timer\">init_timer</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#rep\">rep</a>[<a class=\"id\" href=\"#REP_DELAY\">REP_DELAY</a>] && !<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#rep\">rep</a>[<a class=\"id\" href=\"#REP_PERIOD\">REP_PERIOD</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#data\">data</a> = (long) <a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#function\">function</a> = <a class=\"id\" href=\"#input_repeat_key\">input_repeat_key</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#rep\">rep</a>[<a class=\"id\" href=\"#REP_DELAY\">REP_DELAY</a>] = 250;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#rep\">rep</a>[<a class=\"id\" href=\"#REP_PERIOD\">REP_PERIOD</a>] = 33;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#getkeycode\">getkeycode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#getkeycode\">getkeycode</a> = <a class=\"id\" href=\"#input_default_getkeycode\">input_default_getkeycode</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#setkeycode\">setkeycode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#setkeycode\">setkeycode</a> = <a class=\"id\" href=\"#input_default_setkeycode\">input_default_setkeycode</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_set_name\">dev_set_name</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"input%ld\",", 
"<span class=\"ts\"/><span class=\"ts\"/>     (unsigned long) <a class=\"id\" href=\"#atomic_inc_return\">atomic_inc_return</a>(&amp;<a class=\"id\" href=\"#input_no\">input_no</a>) - 1);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#device_add\">device_add</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path\">path</a> = <a class=\"id\" href=\"#kobject_get_path\">kobject_get_path</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#kobj\">kobj</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"input: %s as %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a> ? <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a> : \"Unspecified device\", <a class=\"id\" href=\"#path\">path</a> ? <a class=\"id\" href=\"#path\">path</a> : \"N/A\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#path\">path</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#mutex_lock_interruptible\">mutex_lock_interruptible</a>(&amp;<a class=\"id\" href=\"#input_mutex\">input_mutex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device_del\">device_del</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#input_dev_list\">input_dev_list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#handler\">handler</a>, &amp;<a class=\"id\" href=\"#input_handler_list\">input_handler_list</a>, <a class=\"id\" href=\"#node\">node</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_attach_handler\">input_attach_handler</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#handler\">handler</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#input_wakeup_procfs_readers\">input_wakeup_procfs_readers</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#input_mutex\">input_mutex</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#input_register_device\">input_register_device</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * input_unregister_device - unregister previously registered device</span>", 
"<span class=\"comment\"> * @dev: device to be unregistered</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function unregisters an input device. Once device is unregistered</span>", 
"<span class=\"comment\"> * the caller should not try to access it as it may get freed at any moment.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#input_unregister_device\">input_unregister_device</a>(struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#input_handle\">input_handle</a> *<a class=\"id\" href=\"#handle\">handle</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#input_disconnect_device\">input_disconnect_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#input_mutex\">input_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#next\">next</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#h_list\">h_list</a>, <a class=\"id\" href=\"#d_node\">d_node</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#handler\">handler</a>-><a class=\"id\" href=\"#disconnect\">disconnect</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#h_list\">h_list</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#del_timer_sync\">del_timer_sync</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#node\">node</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#input_wakeup_procfs_readers\">input_wakeup_procfs_readers</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#input_mutex\">input_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#device_unregister\">device_unregister</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#input_unregister_device\">input_unregister_device</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * input_register_handler - register a new input handler</span>", 
"<span class=\"comment\"> * @handler: handler to be registered</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function registers a new input handler (interface) for input</span>", 
"<span class=\"comment\"> * devices in the system and attaches it to all input devices that</span>", 
"<span class=\"comment\"> * are compatible with the handler.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#input_register_handler\">input_register_handler</a>(struct <a class=\"id\" href=\"#input_handler\">input_handler</a> *<a class=\"id\" href=\"#handler\">handler</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#mutex_lock_interruptible\">mutex_lock_interruptible</a>(&amp;<a class=\"id\" href=\"#input_mutex\">input_mutex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#handler\">handler</a>-><a class=\"id\" href=\"#h_list\">h_list</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#handler\">handler</a>-><a class=\"id\" href=\"#fops\">fops</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#input_table\">input_table</a>[<a class=\"id\" href=\"#handler\">handler</a>-><a class=\"id\" href=\"#minor\">minor</a> >> 5]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_table\">input_table</a>[<a class=\"id\" href=\"#handler\">handler</a>-><a class=\"id\" href=\"#minor\">minor</a> >> 5] = <a class=\"id\" href=\"#handler\">handler</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#handler\">handler</a>-><a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#input_handler_list\">input_handler_list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#input_dev_list\">input_dev_list</a>, <a class=\"id\" href=\"#node\">node</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_attach_handler\">input_attach_handler</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#handler\">handler</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#input_wakeup_procfs_readers\">input_wakeup_procfs_readers</a>();", 
"", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#input_mutex\">input_mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#input_register_handler\">input_register_handler</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * input_unregister_handler - unregisters an input handler</span>", 
"<span class=\"comment\"> * @handler: handler to be unregistered</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function disconnects a handler from its input devices and</span>", 
"<span class=\"comment\"> * removes it from lists of known handlers.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#input_unregister_handler\">input_unregister_handler</a>(struct <a class=\"id\" href=\"#input_handler\">input_handler</a> *<a class=\"id\" href=\"#handler\">handler</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#input_handle\">input_handle</a> *<a class=\"id\" href=\"#handle\">handle</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#input_mutex\">input_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#next\">next</a>, &amp;<a class=\"id\" href=\"#handler\">handler</a>-><a class=\"id\" href=\"#h_list\">h_list</a>, <a class=\"id\" href=\"#h_node\">h_node</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handler\">handler</a>-><a class=\"id\" href=\"#disconnect\">disconnect</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#handler\">handler</a>-><a class=\"id\" href=\"#h_list\">h_list</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#handler\">handler</a>-><a class=\"id\" href=\"#node\">node</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#handler\">handler</a>-><a class=\"id\" href=\"#fops\">fops</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_table\">input_table</a>[<a class=\"id\" href=\"#handler\">handler</a>-><a class=\"id\" href=\"#minor\">minor</a> >> 5] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#input_wakeup_procfs_readers\">input_wakeup_procfs_readers</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#input_mutex\">input_mutex</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#input_unregister_handler\">input_unregister_handler</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * input_handler_for_each_handle - handle iterator</span>", 
"<span class=\"comment\"> * @handler: input handler to iterate</span>", 
"<span class=\"comment\"> * @data: data for the callback</span>", 
"<span class=\"comment\"> * @fn: function to be called for each handle</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Iterate over @bus's list of devices, and call @fn for each, passing</span>", 
"<span class=\"comment\"> * it @data and stop when @fn returns a non-zero value. The function is</span>", 
"<span class=\"comment\"> * using RCU to traverse the list and therefore may be usind in atonic</span>", 
"<span class=\"comment\"> * contexts. The @fn callback is invoked from RCU critical section and</span>", 
"<span class=\"comment\"> * thus must not sleep.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#input_handler_for_each_handle\">input_handler_for_each_handle</a>(struct <a class=\"id\" href=\"#input_handler\">input_handler</a> *<a class=\"id\" href=\"#handler\">handler</a>, void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int (*<a class=\"id\" href=\"#fn\">fn</a>)(struct <a class=\"id\" href=\"#input_handle\">input_handle</a> *, void *))", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#input_handle\">input_handle</a> *<a class=\"id\" href=\"#handle\">handle</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#handle\">handle</a>, &amp;<a class=\"id\" href=\"#handler\">handler</a>-><a class=\"id\" href=\"#h_list\">h_list</a>, <a class=\"id\" href=\"#h_node\">h_node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#fn\">fn</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#input_handler_for_each_handle\">input_handler_for_each_handle</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * input_register_handle - register a new input handle</span>", 
"<span class=\"comment\"> * @handle: handle to register</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function puts a new input handle onto device's</span>", 
"<span class=\"comment\"> * and handler's lists so that events can flow through</span>", 
"<span class=\"comment\"> * it once it is opened using input_open_device().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is supposed to be called from handler's</span>", 
"<span class=\"comment\"> * connect() method.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#input_register_handle\">input_register_handle</a>(struct <a class=\"id\" href=\"#input_handle\">input_handle</a> *<a class=\"id\" href=\"#handle\">handle</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#input_handler\">input_handler</a> *<a class=\"id\" href=\"#handler\">handler</a> = <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#handler\">handler</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We take dev-&gt;mutex here to prevent race with</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * input_release_device().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#mutex_lock_interruptible\">mutex_lock_interruptible</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Filters go to the head of the list, normal handlers</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to the tail.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#handler\">handler</a>-><a class=\"id\" href=\"#filter\">filter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_rcu\">list_add_rcu</a>(&amp;<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#d_node\">d_node</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#h_list\">h_list</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail_rcu\">list_add_tail_rcu</a>(&amp;<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#d_node\">d_node</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#h_list\">h_list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Since we are supposed to be called from -&gt;connect()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * which is mutually exclusive with -&gt;disconnect()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we can't be racing with input_unregister_handle()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and so separate lock is not needed here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail_rcu\">list_add_tail_rcu</a>(&amp;<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_node\">h_node</a>, &amp;<a class=\"id\" href=\"#handler\">handler</a>-><a class=\"id\" href=\"#h_list\">h_list</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#handler\">handler</a>-><a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handler\">handler</a>-><a class=\"id\" href=\"#start\">start</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#input_register_handle\">input_register_handle</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * input_unregister_handle - unregister an input handle</span>", 
"<span class=\"comment\"> * @handle: handle to unregister</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function removes input handle from device's</span>", 
"<span class=\"comment\"> * and handler's lists.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is supposed to be called from handler's</span>", 
"<span class=\"comment\"> * disconnect() method.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#input_unregister_handle\">input_unregister_handle</a>(struct <a class=\"id\" href=\"#input_handle\">input_handle</a> *<a class=\"id\" href=\"#handle\">handle</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_node\">h_node</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Take dev-&gt;mutex to prevent race with input_release_device().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#d_node\">d_node</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mutex\">mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synchronize_rcu\">synchronize_rcu</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#input_unregister_handle\">input_unregister_handle</a>);", 
"", 
"static int <a class=\"id\" href=\"#input_open_file\">input_open_file</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#input_handler\">input_handler</a> *<a class=\"id\" href=\"#handler\">handler</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> *<a class=\"id\" href=\"#old_fops\">old_fops</a>, *<a class=\"id\" href=\"#new_fops\">new_fops</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#mutex_lock_interruptible\">mutex_lock_interruptible</a>(&amp;<a class=\"id\" href=\"#input_mutex\">input_mutex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* No load-on-demand here? */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handler\">handler</a> = <a class=\"id\" href=\"#input_table\">input_table</a>[<a class=\"id\" href=\"#iminor\">iminor</a>(<a class=\"id\" href=\"#inode\">inode</a>) >> 5];", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#handler\">handler</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_fops\">new_fops</a> = <a class=\"id\" href=\"#fops_get\">fops_get</a>(<a class=\"id\" href=\"#handler\">handler</a>-><a class=\"id\" href=\"#fops\">fops</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#input_mutex\">input_mutex</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * That's _really_ odd. Usually NULL -&gt;open means \"nothing special\",</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not \"no device\". Oh, well...</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#new_fops\">new_fops</a> || !<a class=\"id\" href=\"#new_fops\">new_fops</a>-><a class=\"id\" href=\"#open\">open</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fops_put\">fops_put</a>(<a class=\"id\" href=\"#new_fops\">new_fops</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_fops\">old_fops</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a> = <a class=\"id\" href=\"#new_fops\">new_fops</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#new_fops\">new_fops</a>-><a class=\"id\" href=\"#open\">open</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fops_put\">fops_put</a>(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a> = <a class=\"id\" href=\"#fops_get\">fops_get</a>(<a class=\"id\" href=\"#old_fops\">old_fops</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fops_put\">fops_put</a>(<a class=\"id\" href=\"#old_fops\">old_fops</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#input_fops\">input_fops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#owner\">owner</a> = <a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a> = <a class=\"id\" href=\"#input_open_file\">input_open_file</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#input_init\">input_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#class_register\">class_register</a>(&amp;<a class=\"id\" href=\"#input_class\">input_class</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"input: unable to register input_dev class\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#input_proc_init\">input_proc_init</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail1\">fail1</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#register_chrdev\">register_chrdev</a>(<a class=\"id\" href=\"#INPUT_MAJOR\">INPUT_MAJOR</a>, \"input\", &amp;<a class=\"id\" href=\"#input_fops\">input_fops</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"input: unable to register char major %d\", <a class=\"id\" href=\"#INPUT_MAJOR\">INPUT_MAJOR</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail2\">fail2</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
" <a class=\"id\" href=\"#fail2\">fail2</a>:<span class=\"ts\"/><a class=\"id\" href=\"#input_proc_exit\">input_proc_exit</a>();", 
" <a class=\"id\" href=\"#fail1\">fail1</a>:<span class=\"ts\"/><a class=\"id\" href=\"#class_unregister\">class_unregister</a>(&amp;<a class=\"id\" href=\"#input_class\">input_class</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__exit\">__exit</a> <a class=\"id\" href=\"#input_exit\">input_exit</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#input_proc_exit\">input_proc_exit</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_chrdev\">unregister_chrdev</a>(<a class=\"id\" href=\"#INPUT_MAJOR\">INPUT_MAJOR</a>, \"input\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#class_unregister\">class_unregister</a>(&amp;<a class=\"id\" href=\"#input_class\">input_class</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#subsys_initcall\">subsys_initcall</a>(<a class=\"id\" href=\"#input_init\">input_init</a>);", 
"<a class=\"id\" href=\"#module_exit\">module_exit</a>(<a class=\"id\" href=\"#input_exit\">input_exit</a>);", 
];
xr_frag_insert('l/08/bb47668eb2f30ede53c78612cffe18796fa86e.xr', __xr_tmp);
