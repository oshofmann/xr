var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_inode\">bd_inode</a>-><a class=\"id\" href=\"#i_data\">i_data</a>.<a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> = &amp;<a class=\"id\" href=\"#default_backing_dev_info\">default_backing_dev_info</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bdev\">bdev</a> != <a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_contains\">bd_contains</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#victim\">victim</a> = <a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_contains\">bd_contains</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_contains\">bd_contains</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_mutex\">bd_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdput\">bdput</a>(<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#victim\">victim</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__blkdev_put\">__blkdev_put</a>(<a class=\"id\" href=\"#victim\">victim</a>, <a class=\"id\" href=\"#mode\">mode</a>, 1);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#blkdev_put\">blkdev_put</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#fmode_t\">fmode_t</a> <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__blkdev_put\">__blkdev_put</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#mode\">mode</a>, 0);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blkdev_put\">blkdev_put</a>);", 
"", 
"static int <a class=\"id\" href=\"#blkdev_close\">blkdev_close</a>(struct <a class=\"id\" href=\"#inode\">inode</a> * <a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> * <a class=\"id\" href=\"#filp\">filp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a> = <a class=\"id\" href=\"#I_BDEV\">I_BDEV</a>(<a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>-><a class=\"id\" href=\"#host\">host</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_holder\">bd_holder</a> == <a class=\"id\" href=\"#filp\">filp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd_release\">bd_release</a>(<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#blkdev_put\">blkdev_put</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a>);", 
"}", 
"", 
"static long <a class=\"id\" href=\"#block_ioctl\">block_ioctl</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, unsigned <a class=\"id\" href=\"#cmd\">cmd</a>, unsigned long <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a> = <a class=\"id\" href=\"#I_BDEV\">I_BDEV</a>(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>-><a class=\"id\" href=\"#host\">host</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fmode_t\">fmode_t</a> <a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * O_NDELAY can be altered using fcntl(.., F_SETFL, ..), so we have</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to updated it before every ioctl.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a> &amp; <a class=\"id\" href=\"#O_NDELAY\">O_NDELAY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a> |= <a class=\"id\" href=\"#FMODE_NDELAY\">FMODE_NDELAY</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a> &= ~<a class=\"id\" href=\"#FMODE_NDELAY\">FMODE_NDELAY</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#blkdev_ioctl\">blkdev_ioctl</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Write data to the block device.  Only intended for the block device itself</span>", 
"<span class=\"comment\"> * and the raw driver which basically is a fake block device.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Does not take i_mutex for the write and thus is not for general purpose</span>", 
"<span class=\"comment\"> * use.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#blkdev_aio_write\">blkdev_aio_write</a>(struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#iocb\">iocb</a>, const struct <a class=\"id\" href=\"#iovec\">iovec</a> *<a class=\"id\" href=\"#iov\">iov</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#nr_segs\">nr_segs</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_filp\">ki_filp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_pos\">ki_pos</a> != <a class=\"id\" href=\"#pos\">pos</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__generic_file_aio_write\">__generic_file_aio_write</a>(<a class=\"id\" href=\"#iocb\">iocb</a>, <a class=\"id\" href=\"#iov\">iov</a>, <a class=\"id\" href=\"#nr_segs\">nr_segs</a>, &amp;<a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_pos\">ki_pos</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &gt; 0 || <a class=\"id\" href=\"#ret\">ret</a> == -<a class=\"id\" href=\"#EIOCBQUEUED\">EIOCBQUEUED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#generic_write_sync\">generic_write_sync</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0 && <a class=\"id\" href=\"#ret\">ret</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#blkdev_aio_write\">blkdev_aio_write</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Try to release a page associated with block device when the system</span>", 
"<span class=\"comment\"> * is under memory pressure.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#blkdev_releasepage\">blkdev_releasepage</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#wait\">wait</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#super\">super</a> = <a class=\"id\" href=\"#BDEV_I\">BDEV_I</a>(<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>)-><a class=\"id\" href=\"#bdev\">bdev</a>.<a class=\"id\" href=\"#bd_super\">bd_super</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#super\">super</a> && <a class=\"id\" href=\"#super\">super</a>-><a class=\"id\" href=\"#s_op\">s_op</a>-><a class=\"id\" href=\"#bdev_try_to_free_page\">bdev_try_to_free_page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#super\">super</a>-><a class=\"id\" href=\"#s_op\">s_op</a>-><a class=\"id\" href=\"#bdev_try_to_free_page\">bdev_try_to_free_page</a>(<a class=\"id\" href=\"#super\">super</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#wait\">wait</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#try_to_free_buffers\">try_to_free_buffers</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#address_space_operations\">address_space_operations</a> <a class=\"id\" href=\"#def_blk_aops\">def_blk_aops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#readpage\">readpage</a><span class=\"ts\"/>= <a class=\"id\" href=\"#blkdev_readpage\">blkdev_readpage</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#writepage\">writepage</a><span class=\"ts\"/>= <a class=\"id\" href=\"#blkdev_writepage\">blkdev_writepage</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#sync_page\">sync_page</a><span class=\"ts\"/>= <a class=\"id\" href=\"#block_sync_page\">block_sync_page</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write_begin\">write_begin</a><span class=\"ts\"/>= <a class=\"id\" href=\"#blkdev_write_begin\">blkdev_write_begin</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write_end\">write_end</a><span class=\"ts\"/>= <a class=\"id\" href=\"#blkdev_write_end\">blkdev_write_end</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#writepages\">writepages</a><span class=\"ts\"/>= <a class=\"id\" href=\"#generic_writepages\">generic_writepages</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#releasepage\">releasepage</a><span class=\"ts\"/>= <a class=\"id\" href=\"#blkdev_releasepage\">blkdev_releasepage</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#direct_IO\">direct_IO</a><span class=\"ts\"/>= <a class=\"id\" href=\"#blkdev_direct_IO\">blkdev_direct_IO</a>,", 
"};", 
"", 
"const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#def_blk_fops\">def_blk_fops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#blkdev_open\">blkdev_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a><span class=\"ts\"/>= <a class=\"id\" href=\"#blkdev_close\">blkdev_close</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#block_llseek\">block_llseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#do_sync_read\">do_sync_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write\">write</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#do_sync_write\">do_sync_write</a>,", 
"  <span class=\"ts\"/>.<a class=\"id\" href=\"#aio_read\">aio_read</a><span class=\"ts\"/>= <a class=\"id\" href=\"#generic_file_aio_read\">generic_file_aio_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#aio_write\">aio_write</a><span class=\"ts\"/>= <a class=\"id\" href=\"#blkdev_aio_write\">blkdev_aio_write</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#mmap\">mmap</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#generic_file_mmap\">generic_file_mmap</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#fsync\">fsync</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#blkdev_fsync\">blkdev_fsync</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#unlocked_ioctl\">unlocked_ioctl</a><span class=\"ts\"/>= <a class=\"id\" href=\"#block_ioctl\">block_ioctl</a>,", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_COMPAT\">CONFIG_COMPAT</a>", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#compat_ioctl\">compat_ioctl</a><span class=\"ts\"/>= <a class=\"id\" href=\"#compat_blkdev_ioctl\">compat_blkdev_ioctl</a>,", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#splice_read\">splice_read</a><span class=\"ts\"/>= <a class=\"id\" href=\"#generic_file_splice_read\">generic_file_splice_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#splice_write\">splice_write</a><span class=\"ts\"/>= <a class=\"id\" href=\"#generic_file_splice_write\">generic_file_splice_write</a>,", 
"};", 
"", 
"int <a class=\"id\" href=\"#ioctl_by_bdev\">ioctl_by_bdev</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>, unsigned <a class=\"id\" href=\"#cmd\">cmd</a>, unsigned long <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm_segment_t\">mm_segment_t</a> <a class=\"id\" href=\"#old_fs\">old_fs</a> = <a class=\"id\" href=\"#get_fs\">get_fs</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_fs\">set_fs</a>(<a class=\"id\" href=\"#KERNEL_DS\">KERNEL_DS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#blkdev_ioctl\">blkdev_ioctl</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, 0, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_fs\">set_fs</a>(<a class=\"id\" href=\"#old_fs\">old_fs</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#ioctl_by_bdev\">ioctl_by_bdev</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * lookup_bdev  - lookup a struct block_device by name</span>", 
"<span class=\"comment\"> * @pathname:<span class=\"ts\"/>special file representing the block device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Get a reference to the blockdevice at @pathname in the current</span>", 
"<span class=\"comment\"> * namespace if possible and return it.  Return ERR_PTR(error)</span>", 
"<span class=\"comment\"> * otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#lookup_bdev\">lookup_bdev</a>(const char *<a class=\"id\" href=\"#pathname\">pathname</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#path\">path</a> <a class=\"id\" href=\"#path\">path</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pathname\">pathname</a> || !*<a class=\"id\" href=\"#pathname\">pathname</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#kern_path\">kern_path</a>(<a class=\"id\" href=\"#pathname\">pathname</a>, <a class=\"id\" href=\"#LOOKUP_FOLLOW\">LOOKUP_FOLLOW</a>, &amp;<a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#error\">error</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOTBLK\">ENOTBLK</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#S_ISBLK\">S_ISBLK</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EACCES\">EACCES</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_flags\">mnt_flags</a> &amp; <a class=\"id\" href=\"#MNT_NODEV\">MNT_NODEV</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdev\">bdev</a> = <a class=\"id\" href=\"#bd_acquire\">bd_acquire</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bdev\">bdev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path_put\">path_put</a>(&amp;<a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bdev\">bdev</a>;", 
"<a class=\"id\" href=\"#fail\">fail</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdev\">bdev</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#error\">error</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#lookup_bdev\">lookup_bdev</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * open_bdev_exclusive  -  open a block device by name and set it up for use</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @path:<span class=\"ts\"/>special file representing the block device</span>", 
"<span class=\"comment\"> * @mode:<span class=\"ts\"/>FMODE_... combination to pass be used</span>", 
"<span class=\"comment\"> * @holder:<span class=\"ts\"/>owner for exclusion</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Open the blockdevice described by the special file at @path, claim it</span>", 
"<span class=\"comment\"> * for the @holder.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#open_bdev_exclusive\">open_bdev_exclusive</a>(const char *<a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#fmode_t\">fmode_t</a> <a class=\"id\" href=\"#mode\">mode</a>, void *<a class=\"id\" href=\"#holder\">holder</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>, *<a class=\"id\" href=\"#whole\">whole</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdev\">bdev</a> = <a class=\"id\" href=\"#lookup_bdev\">lookup_bdev</a>(<a class=\"id\" href=\"#path\">path</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#bdev\">bdev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#bdev\">bdev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#whole\">whole</a> = <a class=\"id\" href=\"#bd_start_claiming\">bd_start_claiming</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#holder\">holder</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#whole\">whole</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdput\">bdput</a>(<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#whole\">whole</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#blkdev_get\">blkdev_get</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#mode\">mode</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_abort_claiming\">out_abort_claiming</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EACCES\">EACCES</a>;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#FMODE_WRITE\">FMODE_WRITE</a>) && <a class=\"id\" href=\"#bdev_read_only\">bdev_read_only</a>(<a class=\"id\" href=\"#bdev\">bdev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_blkdev_put\">out_blkdev_put</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bd_finish_claiming\">bd_finish_claiming</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#whole\">whole</a>, <a class=\"id\" href=\"#holder\">holder</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bdev\">bdev</a>;", 
"", 
"<a class=\"id\" href=\"#out_blkdev_put\">out_blkdev_put</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blkdev_put\">blkdev_put</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#mode\">mode</a>);", 
"<a class=\"id\" href=\"#out_abort_claiming\">out_abort_claiming</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bd_abort_claiming\">bd_abort_claiming</a>(<a class=\"id\" href=\"#whole\">whole</a>, <a class=\"id\" href=\"#holder\">holder</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#error\">error</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#open_bdev_exclusive\">open_bdev_exclusive</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * close_bdev_exclusive  -  close a blockdevice opened by open_bdev_exclusive()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @bdev:<span class=\"ts\"/>blockdevice to close</span>", 
"<span class=\"comment\"> * @mode:<span class=\"ts\"/>mode, must match that used to open.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is the counterpart to open_bdev_exclusive().</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#close_bdev_exclusive\">close_bdev_exclusive</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#fmode_t\">fmode_t</a> <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bd_release\">bd_release</a>(<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blkdev_put\">blkdev_put</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#mode\">mode</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#close_bdev_exclusive\">close_bdev_exclusive</a>);", 
"", 
"int <a class=\"id\" href=\"#__invalidate_device\">__invalidate_device</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#get_super\">get_super</a>(<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sb\">sb</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * no need to lock the super, get_super holds the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * read mutex so the filesystem cannot go away</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * under us (-&gt;put_super runs with the write lock</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * hold).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shrink_dcache_sb\">shrink_dcache_sb</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#invalidate_inodes\">invalidate_inodes</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drop_super\">drop_super</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#invalidate_bdev\">invalidate_bdev</a>(<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__invalidate_device\">__invalidate_device</a>);", 
];
xr_frag_insert('l/08/c085d2a45e00f51c99297bb48ac4b4ab6a8212.xr', __xr_tmp);
