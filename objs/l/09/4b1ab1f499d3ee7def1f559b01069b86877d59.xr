var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/fs/super.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 1991, 1992  Linus Torvalds</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  super.c contains code to handle: - mount structures</span>", 
"<span class=\"comment\"> *                                   - super-block tables</span>", 
"<span class=\"comment\"> *                                   - filesystem drivers list</span>", 
"<span class=\"comment\"> *                                   - mount system call</span>", 
"<span class=\"comment\"> *                                   - umount system call</span>", 
"<span class=\"comment\"> *                                   - ustat system call</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * GK 2/5/95  -  Changed to support mounting the root fs via NFS</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Added kerneld support: Jacques Gelinas and Bjorn Ekwall</span>", 
"<span class=\"comment\"> *  Added change_root: Werner Almesberger &amp; Hans Lermen, Feb '96</span>", 
"<span class=\"comment\"> *  Added options to /proc/mounts:</span>", 
"<span class=\"comment\"> *    Torbj√∂rn Lindh (torbjorn.lindh@gopta.se), April 14, 1996.</span>", 
"<span class=\"comment\"> *  Added devfs support: Richard Gooch &lt;rgooch@atnf.csiro.au&gt;, 13-JAN-1998</span>", 
"<span class=\"comment\"> *  Heavily rewritten for 'one fs - one tree' dcache architecture. AV, Mar 2000</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#acct\">acct</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#blkdev\">blkdev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mount\">mount</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#security\">security</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#writeback\">writeback</a>.<a class=\"id\" href=\"#h\">h</a>&gt;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* for the emergency remount stuff */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#idr\">idr</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#backing\">backing</a>-<a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"internal.h\"", 
"", 
"", 
"<a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#super_blocks\">super_blocks</a>);", 
"<a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#sb_lock\">sb_lock</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>alloc_super<span class=\"ts\"/>-<span class=\"ts\"/>create new superblock</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@type:<span class=\"ts\"/>filesystem type superblock should belong to</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Allocates and initializes a new &amp;struct super_block.  alloc_super()</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>returns a pointer new superblock or %NULL if allocation had failed.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#alloc_super\">alloc_super</a>(struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a> *<a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#super_block\">super_block</a>),  <a class=\"id\" href=\"#GFP_USER\">GFP_USER</a>);", 
"<span class=\"ts\"/>static const struct <a class=\"id\" href=\"#super_operations\">super_operations</a> <a class=\"id\" href=\"#default_op\">default_op</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#s\">s</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#security_sb_alloc\">security_sb_alloc</a>(<a class=\"id\" href=\"#s\">s</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_files\">s_files</a> = <a class=\"id\" href=\"#alloc_percpu\">alloc_percpu</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_files\">s_files</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#security_sb_free\">security_sb_free</a>(<a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(<a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_files\">s_files</a>, <a class=\"id\" href=\"#i\">i</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"#else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_files\">s_files</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_instances\">s_instances</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_HLIST_HEAD\">INIT_HLIST_HEAD</a>(&amp;<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_anon\">s_anon</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_inodes\">s_inodes</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_dentry_lru\">s_dentry_lru</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_rwsem\">init_rwsem</a>(&amp;<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_umount\">s_umount</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_lock\">s_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lockdep_set_class\">lockdep_set_class</a>(&amp;<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_umount\">s_umount</a>, &amp;<a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#s_umount_key\">s_umount_key</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The locking rules for s_lock are up to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * filesystem. For example ext3fs has different</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * lock ordering than usbfs:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lockdep_set_class\">lockdep_set_class</a>(&amp;<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_lock\">s_lock</a>, &amp;<a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#s_lock_key\">s_lock_key</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * sget() can have s_umount recursion.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * When it cannot find a suitable sb, it allocates a new</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * one (this one), and tries again to find a suitable old</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * one.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * In case that succeeds, it will acquire the s_umount</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * lock of the old one. Since these are clearly distrinct</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * locks, and this object isn't exposed yet, there's no</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * risk of deadlocks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Annotate this by putting this lock in a different</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * subclass.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#down_write_nested\">down_write_nested</a>(&amp;<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_umount\">s_umount</a>, <a class=\"id\" href=\"#SINGLE_DEPTH_NESTING\">SINGLE_DEPTH_NESTING</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_count\">s_count</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_active\">s_active</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_vfs_rename_mutex\">s_vfs_rename_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lockdep_set_class\">lockdep_set_class</a>(&amp;<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_vfs_rename_mutex\">s_vfs_rename_mutex</a>, &amp;<a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#s_vfs_rename_key\">s_vfs_rename_key</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_dquot\">s_dquot</a>.<a class=\"id\" href=\"#dqio_mutex\">dqio_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_dquot\">s_dquot</a>.<a class=\"id\" href=\"#dqonoff_mutex\">dqonoff_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_rwsem\">init_rwsem</a>(&amp;<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_dquot\">s_dquot</a>.<a class=\"id\" href=\"#dqptr_sem\">dqptr_sem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_waitqueue_head\">init_waitqueue_head</a>(&amp;<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_wait_unfrozen\">s_wait_unfrozen</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_maxbytes\">s_maxbytes</a> = <a class=\"id\" href=\"#MAX_NON_LFS\">MAX_NON_LFS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_op\">s_op</a> = &amp;<a class=\"id\" href=\"#default_op\">default_op</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_time_gran\">s_time_gran</a> = 1000000000;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#s\">s</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>destroy_super<span class=\"ts\"/>-<span class=\"ts\"/>frees a superblock</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@s: superblock to free</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Frees a superblock.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#destroy_super\">destroy_super</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#s\">s</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_percpu\">free_percpu</a>(<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_files\">s_files</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#security_sb_free\">security_sb_free</a>(<a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_subtype\">s_subtype</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_options\">s_options</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#s\">s</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Superblock refcounting  */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Drop a superblock's refcount.  The caller must hold sb_lock.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__put_super\">__put_super</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/>if (!--<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_count\">s_count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_list\">s_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#destroy_super\">destroy_super</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>put_super<span class=\"ts\"/>-<span class=\"ts\"/>drop a temporary reference to superblock</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sb: superblock in question</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Drops a temporary reference, frees superblock if there's no</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>references left.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#put_super\">put_super</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#sb_lock\">sb_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__put_super\">__put_super</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sb_lock\">sb_lock</a>);", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>deactivate_locked_super<span class=\"ts\"/>-<span class=\"ts\"/>drop an active reference to superblock</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@s: superblock to deactivate</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Drops an active reference to superblock, converting it into a temprory</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>one if there is no other active references left.  In that case we</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>tell fs driver to shut it down and drop the temporary reference we</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>had just acquired.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Caller holds exclusive lock on superblock; that lock is released.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#deactivate_locked_super\">deactivate_locked_super</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#s\">s</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a> *<a class=\"id\" href=\"#fs\">fs</a> = <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_type\">s_type</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_active\">s_active</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fs\">fs</a>-><a class=\"id\" href=\"#kill_sb\">kill_sb</a>(<a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_filesystem\">put_filesystem</a>(<a class=\"id\" href=\"#fs\">fs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_super\">put_super</a>(<a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_umount\">s_umount</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#deactivate_locked_super\">deactivate_locked_super</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>deactivate_super<span class=\"ts\"/>-<span class=\"ts\"/>drop an active reference to superblock</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@s: superblock to deactivate</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Variant of deactivate_locked_super(), except that superblock is *not*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>locked by caller.  If we are going to drop the final active reference,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>lock will be acquired prior to that.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#deactivate_super\">deactivate_super</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#s\">s</a>)", 
"{", 
"        if (!<a class=\"id\" href=\"#atomic_add_unless\">atomic_add_unless</a>(&amp;<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_active\">s_active</a>, -1, 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_umount\">s_umount</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#deactivate_locked_super\">deactivate_locked_super</a>(<a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#deactivate_super\">deactivate_super</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>grab_super - acquire an active reference</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@s: reference we are trying to make active</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Tries to acquire an active reference.  grab_super() is used when we</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>had just found a superblock in super_blocks or fs_type-&gt;fs_supers</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and want to turn it into a full-blown active reference.  grab_super()</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is called with sb_lock held and drops it.  Returns 1 in case of</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>success, 0 if we had failed (superblock contents was already dead or</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dying when grab_super() had been called).</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#grab_super\">grab_super</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#s\">s</a>) <a class=\"id\" href=\"#__releases\">__releases</a>(<a class=\"id\" href=\"#sb_lock\">sb_lock</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_inc_not_zero\">atomic_inc_not_zero</a>(&amp;<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_active\">s_active</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sb_lock\">sb_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* it's going away */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_count\">s_count</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sb_lock\">sb_lock</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* wait for it to die */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_umount\">s_umount</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_umount\">s_umount</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_super\">put_super</a>(<a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Superblock locking.  We really ought to get rid of these two.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#lock_super\">lock_super</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> * <a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_fs_excl\">get_fs_excl</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_lock\">s_lock</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#unlock_super\">unlock_super</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> * <a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_fs_excl\">put_fs_excl</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_lock\">s_lock</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#lock_super\">lock_super</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#unlock_super\">unlock_super</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>generic_shutdown_super<span class=\"ts\"/>-<span class=\"ts\"/>common helper for -&gt;kill_sb()</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sb: superblock to kill</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>generic_shutdown_super() does all fs-independent work on superblock</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>shutdown.  Typical -&gt;kill_sb() should pick all fs-specific objects</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>that need destruction out of superblock, call generic_shutdown_super()</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and release aforementioned objects.  Note: dentries and inodes _are_</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>taken care of and do not need specific handling.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Upon calling this function, the filesystem may no longer alter or</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>rearrange the set of dentries belonging to this super_block, nor may it</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>change the attachments of dentries to inodes.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#generic_shutdown_super\">generic_shutdown_super</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#super_operations\">super_operations</a> *<a class=\"id\" href=\"#sop\">sop</a> = <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_op\">s_op</a>;", 
"", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_root\">s_root</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shrink_dcache_for_umount\">shrink_dcache_for_umount</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sync_filesystem\">sync_filesystem</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_fs_excl\">get_fs_excl</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_flags\">s_flags</a> &= ~<a class=\"id\" href=\"#MS_ACTIVE\">MS_ACTIVE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* bad name - it should be evict_inodes() */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#invalidate_inodes\">invalidate_inodes</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sop\">sop</a>-><a class=\"id\" href=\"#put_super\">put_super</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sop\">sop</a>-><a class=\"id\" href=\"#put_super\">put_super</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Forget any remaining inodes */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#invalidate_inodes\">invalidate_inodes</a>(<a class=\"id\" href=\"#sb\">sb</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"VFS: Busy inodes after unmount of %s. \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"Self-destruct in 5 seconds.  Have a nice day...\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_id\">s_id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_fs_excl\">put_fs_excl</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#sb_lock\">sb_lock</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* should be initialized for __put_super_and_need_restart() */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_instances\">s_instances</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sb_lock\">sb_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_umount\">s_umount</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#generic_shutdown_super\">generic_shutdown_super</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sget<span class=\"ts\"/>-<span class=\"ts\"/>find or create a superblock</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@type:<span class=\"ts\"/>filesystem type superblock should belong to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@test:<span class=\"ts\"/>comparison callback</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@set:<span class=\"ts\"/>setup callback</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@data:<span class=\"ts\"/>argument to each of them</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sget\">sget</a>(struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a> *<a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#test\">test</a>)(struct <a class=\"id\" href=\"#super_block\">super_block</a> *,void *),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#set\">set</a>)(struct <a class=\"id\" href=\"#super_block\">super_block</a> *,void *),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#old\">old</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#sb_lock\">sb_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test\">test</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#old\">old</a>, &amp;<a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#fs_supers\">fs_supers</a>, <a class=\"id\" href=\"#s_instances\">s_instances</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#test\">test</a>(<a class=\"id\" href=\"#old\">old</a>, <a class=\"id\" href=\"#data\">data</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#grab_super\">grab_super</a>(<a class=\"id\" href=\"#old\">old</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#s\">s</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_umount\">s_umount</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#destroy_super\">destroy_super</a>(<a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#s_umount\">s_umount</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!(<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#s_flags\">s_flags</a> &amp; <a class=\"id\" href=\"#MS_BORN\">MS_BORN</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#deactivate_locked_super\">deactivate_locked_super</a>(<a class=\"id\" href=\"#old\">old</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#old\">old</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#s\">s</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sb_lock\">sb_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#alloc_super\">alloc_super</a>(<a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#s\">s</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#set\">set</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sb_lock\">sb_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_umount\">s_umount</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#destroy_super\">destroy_super</a>(<a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_type\">s_type</a> = <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strlcpy\">strlcpy</a>(<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_id\">s_id</a>, <a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#name\">name</a>, sizeof(<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_id\">s_id</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_list\">s_list</a>, &amp;<a class=\"id\" href=\"#super_blocks\">super_blocks</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_instances\">s_instances</a>, &amp;<a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#fs_supers\">fs_supers</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sb_lock\">sb_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_filesystem\">get_filesystem</a>(<a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#s\">s</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sget\">sget</a>);", 
"", 
"void <a class=\"id\" href=\"#drop_super\">drop_super</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_umount\">s_umount</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_super\">put_super</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#drop_super\">drop_super</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sync_supers - helper for periodic superblock writeback</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Call the write_super method if present on all dirty superblocks in</span>", 
"<span class=\"comment\"> * the system.  This is for the periodic writeback used by most older</span>", 
"<span class=\"comment\"> * filesystems.  For data integrity superblock writeback use</span>", 
"<span class=\"comment\"> * sync_filesystems() instead.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note: check the dirty flag before waiting, so we don't</span>", 
"<span class=\"comment\"> * hold up the sync while mounting a device. (The newly</span>", 
"<span class=\"comment\"> * mounted device won't need syncing.)</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#sync_supers\">sync_supers</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#sb_lock\">sb_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#sb\">sb</a>, &amp;<a class=\"id\" href=\"#super_blocks\">super_blocks</a>, <a class=\"id\" href=\"#s_list\">s_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_instances\">s_instances</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_op\">s_op</a>-><a class=\"id\" href=\"#write_super\">write_super</a> && <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_dirt\">s_dirt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_count\">s_count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sb_lock\">sb_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_umount\">s_umount</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_root\">s_root</a> && <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_dirt\">s_dirt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_op\">s_op</a>-><a class=\"id\" href=\"#write_super\">write_super</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_umount\">s_umount</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#sb_lock\">sb_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__put_super\">__put_super</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#sb\">sb</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__put_super\">__put_super</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sb_lock\">sb_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>iterate_supers - call function for all active superblocks</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@f: function to call</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@arg: argument to pass to it</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Scans the superblock list and calls given function, passing it</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>locked superblock and given argument.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#iterate_supers\">iterate_supers</a>(void (*<a class=\"id\" href=\"#f\">f</a>)(struct <a class=\"id\" href=\"#super_block\">super_block</a> *, void *), void *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#sb_lock\">sb_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#sb\">sb</a>, &amp;<a class=\"id\" href=\"#super_blocks\">super_blocks</a>, <a class=\"id\" href=\"#s_list\">s_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_instances\">s_instances</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_count\">s_count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sb_lock\">sb_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_umount\">s_umount</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_root\">s_root</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_umount\">s_umount</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#sb_lock\">sb_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__put_super\">__put_super</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#sb\">sb</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__put_super\">__put_super</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sb_lock\">sb_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>get_super - get the superblock of a device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@bdev: device to get the superblock for</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/></span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Scans the superblock list and finds the superblock of the file system</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>mounted on the device given. %NULL is returned if no match is found.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#get_super\">get_super</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bdev\">bdev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#sb_lock\">sb_lock</a>);", 
"<a class=\"id\" href=\"#rescan\">rescan</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#sb\">sb</a>, &amp;<a class=\"id\" href=\"#super_blocks\">super_blocks</a>, <a class=\"id\" href=\"#s_list\">s_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_instances\">s_instances</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_bdev\">s_bdev</a> == <a class=\"id\" href=\"#bdev\">bdev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_count\">s_count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sb_lock\">sb_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_umount\">s_umount</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* still alive? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_root\">s_root</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#sb\">sb</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_umount\">s_umount</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* nope, got unmounted */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#sb_lock\">sb_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__put_super\">__put_super</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#rescan\">rescan</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sb_lock\">sb_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#get_super\">get_super</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * get_active_super - get an active reference to the superblock of a device</span>", 
"<span class=\"comment\"> * @bdev: device to get the superblock for</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Scans the superblock list and finds the superblock of the file system</span>", 
"<span class=\"comment\"> * mounted on the device given.  Returns the superblock with an active</span>", 
"<span class=\"comment\"> * reference or %NULL if none was found.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#get_active_super\">get_active_super</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bdev\">bdev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<a class=\"id\" href=\"#restart\">restart</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#sb_lock\">sb_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#sb\">sb</a>, &amp;<a class=\"id\" href=\"#super_blocks\">super_blocks</a>, <a class=\"id\" href=\"#s_list\">s_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_instances\">s_instances</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_bdev\">s_bdev</a> == <a class=\"id\" href=\"#bdev\">bdev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#grab_super\">grab_super</a>(<a class=\"id\" href=\"#sb\">sb</a>)) <span class=\"comment\">/* drops sb_lock */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#sb\">sb</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#restart\">restart</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sb_lock\">sb_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
" ", 
"struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#user_get_super\">user_get_super</a>(<a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#sb_lock\">sb_lock</a>);", 
"<a class=\"id\" href=\"#rescan\">rescan</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#sb\">sb</a>, &amp;<a class=\"id\" href=\"#super_blocks\">super_blocks</a>, <a class=\"id\" href=\"#s_list\">s_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_instances\">s_instances</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_dev\">s_dev</a> ==  <a class=\"id\" href=\"#dev\">dev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_count\">s_count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sb_lock\">sb_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_umount\">s_umount</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* still alive? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_root\">s_root</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#sb\">sb</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_umount\">s_umount</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* nope, got unmounted */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#sb_lock\">sb_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__put_super\">__put_super</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#rescan\">rescan</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sb_lock\">sb_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>do_remount_sb - asks filesystem to change mount options.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sb:<span class=\"ts\"/>superblock in question</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@flags:<span class=\"ts\"/>numeric part of options</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@data:<span class=\"ts\"/>the rest of options</span>", 
"<span class=\"comment\"> *      @force: whether or not to force the change</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Alters the mount options of a mounted file system.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#do_remount_sb\">do_remount_sb</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, int <a class=\"id\" href=\"#flags\">flags</a>, void *<a class=\"id\" href=\"#data\">data</a>, int <a class=\"id\" href=\"#force\">force</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#remount_ro\">remount_ro</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_frozen\">s_frozen</a> != <a class=\"id\" href=\"#SB_UNFROZEN\">SB_UNFROZEN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BLOCK\">CONFIG_BLOCK</a>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MS_RDONLY\">MS_RDONLY</a>) && <a class=\"id\" href=\"#bdev_read_only\">bdev_read_only</a>(<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_bdev\">s_bdev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EACCES\">EACCES</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MS_RDONLY\">MS_RDONLY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acct_auto_close\">acct_auto_close</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#shrink_dcache_sb\">shrink_dcache_sb</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sync_filesystem\">sync_filesystem</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#remount_ro\">remount_ro</a> = (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MS_RDONLY\">MS_RDONLY</a>) && !(<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_flags\">s_flags</a> &amp; <a class=\"id\" href=\"#MS_RDONLY\">MS_RDONLY</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If we are remounting RDONLY and current sb is read/write,</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   make sure there are no rw files opened */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#remount_ro\">remount_ro</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#force\">force</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mark_files_ro\">mark_files_ro</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (!<a class=\"id\" href=\"#fs_may_remount_ro\">fs_may_remount_ro</a>(<a class=\"id\" href=\"#sb\">sb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_op\">s_op</a>-><a class=\"id\" href=\"#remount_fs\">remount_fs</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_op\">s_op</a>-><a class=\"id\" href=\"#remount_fs\">remount_fs</a>(<a class=\"id\" href=\"#sb\">sb</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_flags\">s_flags</a> = (<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_flags\">s_flags</a> &amp; ~<a class=\"id\" href=\"#MS_RMT_MASK\">MS_RMT_MASK</a>) | (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MS_RMT_MASK\">MS_RMT_MASK</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Some filesystems modify their metadata via some other path than the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * bdev buffer cache (eg. use a private mapping, or directories in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pagecache, etc). Also file data modifications go via their own</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mappings. So If we try to mount readonly then copy the filesystem</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * from bdev, we could get stale data, so invalidate it to give a best</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * effort at coherency.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#remount_ro\">remount_ro</a> && <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_bdev\">s_bdev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#invalidate_bdev\">invalidate_bdev</a>(<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_bdev\">s_bdev</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#do_emergency_remount\">do_emergency_remount</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#sb_lock\">sb_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#sb\">sb</a>, &amp;<a class=\"id\" href=\"#super_blocks\">super_blocks</a>, <a class=\"id\" href=\"#s_list\">s_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_instances\">s_instances</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_count\">s_count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sb_lock\">sb_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_umount\">s_umount</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_root\">s_root</a> && <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_bdev\">s_bdev</a> && !(<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_flags\">s_flags</a> &amp; <a class=\"id\" href=\"#MS_RDONLY\">MS_RDONLY</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * What lock protects sb-&gt;s_flags??</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_remount_sb\">do_remount_sb</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#MS_RDONLY\">MS_RDONLY</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_umount\">s_umount</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#sb_lock\">sb_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__put_super\">__put_super</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#sb\">sb</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__put_super\">__put_super</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sb_lock\">sb_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"Emergency Remount complete\\n\");", 
"}", 
"", 
"void <a class=\"id\" href=\"#emergency_remount\">emergency_remount</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#work\">work</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#work\">work</a>), <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#work\">work</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_WORK\">INIT_WORK</a>(<a class=\"id\" href=\"#work\">work</a>, <a class=\"id\" href=\"#do_emergency_remount\">do_emergency_remount</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule_work\">schedule_work</a>(<a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Unnamed block devices are dummy devices used by virtual</span>", 
"<span class=\"comment\"> * filesystems which don't use real block-devices.  -- jrs</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#DEFINE_IDA\">DEFINE_IDA</a>(<a class=\"id\" href=\"#unnamed_dev_ida\">unnamed_dev_ida</a>);", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#unnamed_dev_lock\">unnamed_dev_lock</a>);<span class=\"comment\">/* protects the above */</span>", 
"static int <a class=\"id\" href=\"#unnamed_dev_start\">unnamed_dev_start</a> = 0; <span class=\"comment\">/* don't bother trying below it */</span>", 
"", 
"int <a class=\"id\" href=\"#set_anon_super\">set_anon_super</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#s\">s</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
" <a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ida_pre_get\">ida_pre_get</a>(&amp;<a class=\"id\" href=\"#unnamed_dev_ida\">unnamed_dev_ida</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#unnamed_dev_lock\">unnamed_dev_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#ida_get_new_above\">ida_get_new_above</a>(&amp;<a class=\"id\" href=\"#unnamed_dev_ida\">unnamed_dev_ida</a>, <a class=\"id\" href=\"#unnamed_dev_start\">unnamed_dev_start</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unnamed_dev_start\">unnamed_dev_start</a> = <a class=\"id\" href=\"#dev\">dev</a> + 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#unnamed_dev_lock\">unnamed_dev_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> == -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We raced and lost with another CPU. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#dev\">dev</a> &amp; <a class=\"id\" href=\"#MAX_ID_MASK\">MAX_ID_MASK</a>) == (1 << <a class=\"id\" href=\"#MINORBITS\">MINORBITS</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#unnamed_dev_lock\">unnamed_dev_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ida_remove\">ida_remove</a>(&amp;<a class=\"id\" href=\"#unnamed_dev_ida\">unnamed_dev_ida</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unnamed_dev_start\">unnamed_dev_start</a> &gt; <a class=\"id\" href=\"#dev\">dev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unnamed_dev_start\">unnamed_dev_start</a> = <a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#unnamed_dev_lock\">unnamed_dev_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EMFILE\">EMFILE</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_dev\">s_dev</a> = <a class=\"id\" href=\"#MKDEV\">MKDEV</a>(0, <a class=\"id\" href=\"#dev\">dev</a> &amp; <a class=\"id\" href=\"#MINORMASK\">MINORMASK</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_bdi\">s_bdi</a> = &amp;<a class=\"id\" href=\"#noop_backing_dev_info\">noop_backing_dev_info</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#set_anon_super\">set_anon_super</a>);", 
"", 
"void <a class=\"id\" href=\"#kill_anon_super\">kill_anon_super</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#slot\">slot</a> = <a class=\"id\" href=\"#MINOR\">MINOR</a>(<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_dev\">s_dev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#generic_shutdown_super\">generic_shutdown_super</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#unnamed_dev_lock\">unnamed_dev_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ida_remove\">ida_remove</a>(&amp;<a class=\"id\" href=\"#unnamed_dev_ida\">unnamed_dev_ida</a>, <a class=\"id\" href=\"#slot\">slot</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#slot\">slot</a> &lt; <a class=\"id\" href=\"#unnamed_dev_start\">unnamed_dev_start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unnamed_dev_start\">unnamed_dev_start</a> = <a class=\"id\" href=\"#slot\">slot</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#unnamed_dev_lock\">unnamed_dev_lock</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#kill_anon_super\">kill_anon_super</a>);", 
"", 
"void <a class=\"id\" href=\"#kill_litter_super\">kill_litter_super</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_root\">s_root</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d_genocide\">d_genocide</a>(<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_root\">s_root</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kill_anon_super\">kill_anon_super</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#kill_litter_super\">kill_litter_super</a>);", 
"", 
"static int <a class=\"id\" href=\"#ns_test_super\">ns_test_super</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_fs_info\">s_fs_info</a> == <a class=\"id\" href=\"#data\">data</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ns_set_super\">ns_set_super</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_fs_info\">s_fs_info</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#set_anon_super\">set_anon_super</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#get_sb_ns\">get_sb_ns</a>(struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a> *<a class=\"id\" href=\"#fs_type\">fs_type</a>, int <a class=\"id\" href=\"#flags\">flags</a>, void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#fill_super\">fill_super</a>)(struct <a class=\"id\" href=\"#super_block\">super_block</a> *, void *, int),", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#sget\">sget</a>(<a class=\"id\" href=\"#fs_type\">fs_type</a>, <a class=\"id\" href=\"#ns_test_super\">ns_test_super</a>, <a class=\"id\" href=\"#ns_set_super\">ns_set_super</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#sb\">sb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_root\">s_root</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_flags\">s_flags</a> = <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#fill_super\">fill_super</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MS_SILENT\">MS_SILENT</a> ? 1 : 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#deactivate_locked_super\">deactivate_locked_super</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_flags\">s_flags</a> |= <a class=\"id\" href=\"#MS_ACTIVE\">MS_ACTIVE</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#simple_set_mnt\">simple_set_mnt</a>(<a class=\"id\" href=\"#mnt\">mnt</a>, <a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#get_sb_ns\">get_sb_ns</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BLOCK\">CONFIG_BLOCK</a>", 
"static int <a class=\"id\" href=\"#set_bdev_super\">set_bdev_super</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#s\">s</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_bdev\">s_bdev</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_dev\">s_dev</a> = <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_bdev\">s_bdev</a>-><a class=\"id\" href=\"#bd_dev\">bd_dev</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We set the bdi here to the queue backing, file systems can</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * overwrite this in -&gt;fill_super()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_bdi\">s_bdi</a> = &amp;<a class=\"id\" href=\"#bdev_get_queue\">bdev_get_queue</a>(<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_bdev\">s_bdev</a>)-><a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#test_bdev_super\">test_bdev_super</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#s\">s</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>return (void *)<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_bdev\">s_bdev</a> == <a class=\"id\" href=\"#data\">data</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#get_sb_bdev\">get_sb_bdev</a>(struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a> *<a class=\"id\" href=\"#fs_type\">fs_type</a>,", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#flags\">flags</a>, const char *<a class=\"id\" href=\"#dev_name\">dev_name</a>, void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#fill_super\">fill_super</a>)(struct <a class=\"id\" href=\"#super_block\">super_block</a> *, void *, int),", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#s\">s</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fmode_t\">fmode_t</a> <a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#FMODE_READ\">FMODE_READ</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MS_RDONLY\">MS_RDONLY</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a> |= <a class=\"id\" href=\"#FMODE_WRITE\">FMODE_WRITE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdev\">bdev</a> = <a class=\"id\" href=\"#open_bdev_exclusive\">open_bdev_exclusive</a>(<a class=\"id\" href=\"#dev_name\">dev_name</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#fs_type\">fs_type</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#bdev\">bdev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * once the super is inserted into the list by sget, s_umount</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will protect the lockfs code from trying to start a snapshot</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * while we are mounting</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_fsfreeze_mutex\">bd_fsfreeze_mutex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_fsfreeze_count\">bd_fsfreeze_count</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_fsfreeze_mutex\">bd_fsfreeze_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_bdev\">error_bdev</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#sget\">sget</a>(<a class=\"id\" href=\"#fs_type\">fs_type</a>, <a class=\"id\" href=\"#test_bdev_super\">test_bdev_super</a>, <a class=\"id\" href=\"#set_bdev_super\">set_bdev_super</a>, <a class=\"id\" href=\"#bdev\">bdev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_fsfreeze_mutex\">bd_fsfreeze_mutex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#s\">s</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_s\">error_s</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_root\">s_root</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#flags\">flags</a> ^ <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_flags\">s_flags</a>) &amp; <a class=\"id\" href=\"#MS_RDONLY\">MS_RDONLY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#deactivate_locked_super\">deactivate_locked_super</a>(<a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_bdev\">error_bdev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * s_umount nests inside bd_mutex during</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * __invalidate_device().  close_bdev_exclusive()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * acquires bd_mutex and can't be called under</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * s_umount.  Drop s_umount temporarily.  This is safe</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * as we're holding an active reference.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_umount\">s_umount</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#close_bdev_exclusive\">close_bdev_exclusive</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#mode\">mode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_umount\">s_umount</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#b\">b</a>[<a class=\"id\" href=\"#BDEVNAME_SIZE\">BDEVNAME_SIZE</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_flags\">s_flags</a> = <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_mode\">s_mode</a> = <a class=\"id\" href=\"#mode\">mode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strlcpy\">strlcpy</a>(<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_id\">s_id</a>, <a class=\"id\" href=\"#bdevname\">bdevname</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#b\">b</a>), sizeof(<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_id\">s_id</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sb_set_blocksize\">sb_set_blocksize</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#block_size\">block_size</a>(<a class=\"id\" href=\"#bdev\">bdev</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#fill_super\">fill_super</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MS_SILENT\">MS_SILENT</a> ? 1 : 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#deactivate_locked_super\">deactivate_locked_super</a>(<a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_flags\">s_flags</a> |= <a class=\"id\" href=\"#MS_ACTIVE\">MS_ACTIVE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_super\">bd_super</a> = <a class=\"id\" href=\"#s\">s</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#simple_set_mnt\">simple_set_mnt</a>(<a class=\"id\" href=\"#mnt\">mnt</a>, <a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#error_s\">error_s</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#s\">s</a>);", 
"<a class=\"id\" href=\"#error_bdev\">error_bdev</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#close_bdev_exclusive\">close_bdev_exclusive</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#mode\">mode</a>);", 
"<a class=\"id\" href=\"#error\">error</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#get_sb_bdev\">get_sb_bdev</a>);", 
"", 
"void <a class=\"id\" href=\"#kill_block_super\">kill_block_super</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a> = <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_bdev\">s_bdev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fmode_t\">fmode_t</a> <a class=\"id\" href=\"#mode\">mode</a> = <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_mode\">s_mode</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_super\">bd_super</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#generic_shutdown_super\">generic_shutdown_super</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sync_blockdev\">sync_blockdev</a>(<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#close_bdev_exclusive\">close_bdev_exclusive</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#mode\">mode</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#kill_block_super\">kill_block_super</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"int <a class=\"id\" href=\"#get_sb_nodev\">get_sb_nodev</a>(struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a> *<a class=\"id\" href=\"#fs_type\">fs_type</a>,", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#flags\">flags</a>, void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#fill_super\">fill_super</a>)(struct <a class=\"id\" href=\"#super_block\">super_block</a> *, void *, int),", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#sget\">sget</a>(<a class=\"id\" href=\"#fs_type\">fs_type</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#set_anon_super\">set_anon_super</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#s\">s</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#s\">s</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_flags\">s_flags</a> = <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#fill_super\">fill_super</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MS_SILENT\">MS_SILENT</a> ? 1 : 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#deactivate_locked_super\">deactivate_locked_super</a>(<a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_flags\">s_flags</a> |= <a class=\"id\" href=\"#MS_ACTIVE\">MS_ACTIVE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#simple_set_mnt\">simple_set_mnt</a>(<a class=\"id\" href=\"#mnt\">mnt</a>, <a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#get_sb_nodev\">get_sb_nodev</a>);", 
"", 
"static int <a class=\"id\" href=\"#compare_single\">compare_single</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#s\">s</a>, void *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"int <a class=\"id\" href=\"#get_sb_single\">get_sb_single</a>(struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a> *<a class=\"id\" href=\"#fs_type\">fs_type</a>,", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#flags\">flags</a>, void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#fill_super\">fill_super</a>)(struct <a class=\"id\" href=\"#super_block\">super_block</a> *, void *, int),", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#s\">s</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#sget\">sget</a>(<a class=\"id\" href=\"#fs_type\">fs_type</a>, <a class=\"id\" href=\"#compare_single\">compare_single</a>, <a class=\"id\" href=\"#set_anon_super\">set_anon_super</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#s\">s</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_root\">s_root</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_flags\">s_flags</a> = <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#fill_super\">fill_super</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MS_SILENT\">MS_SILENT</a> ? 1 : 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#deactivate_locked_super\">deactivate_locked_super</a>(<a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#s_flags\">s_flags</a> |= <a class=\"id\" href=\"#MS_ACTIVE\">MS_ACTIVE</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_remount_sb\">do_remount_sb</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#data\">data</a>, 0);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#simple_set_mnt\">simple_set_mnt</a>(<a class=\"id\" href=\"#mnt\">mnt</a>, <a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#get_sb_single\">get_sb_single</a>);", 
"", 
"struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *", 
"<a class=\"id\" href=\"#vfs_kern_mount\">vfs_kern_mount</a>(struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a> *<a class=\"id\" href=\"#type\">type</a>, int <a class=\"id\" href=\"#flags\">flags</a>, const char *<a class=\"id\" href=\"#name\">name</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#secdata\">secdata</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#type\">type</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENODEV\">ENODEV</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#alloc_vfsmnt\">alloc_vfsmnt</a>(<a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MS_KERNMOUNT\">MS_KERNMOUNT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_flags\">mnt_flags</a> = <a class=\"id\" href=\"#MNT_INTERNAL\">MNT_INTERNAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#data\">data</a> && !(<a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#fs_flags\">fs_flags</a> &amp; <a class=\"id\" href=\"#FS_BINARY_MOUNTDATA\">FS_BINARY_MOUNTDATA</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#secdata\">secdata</a> = <a class=\"id\" href=\"#alloc_secdata\">alloc_secdata</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#secdata\">secdata</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_mnt\">out_mnt</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#security_sb_copy_data\">security_sb_copy_data</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#secdata\">secdata</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_secdata\">out_free_secdata</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#get_sb\">get_sb</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_secdata\">out_free_secdata</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a>-><a class=\"id\" href=\"#s_bdi\">s_bdi</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a>-><a class=\"id\" href=\"#s_flags\">s_flags</a> |= <a class=\"id\" href=\"#MS_BORN\">MS_BORN</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#security_sb_kern_mount\">security_sb_kern_mount</a>(<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#secdata\">secdata</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_sb\">out_sb</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * filesystems should never set s_maxbytes larger than MAX_LFS_FILESIZE</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * but s_maxbytes was an unsigned long long for many releases. Throw</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this warning for a little while to try and catch filesystems that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * violate this rule. This warning should be either removed or</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * converted to a BUG() in 2.6.34.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN\">WARN</a>((<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a>-><a class=\"id\" href=\"#s_maxbytes\">s_maxbytes</a> &lt; 0), \"%s set sb->s_maxbytes to \"", 
"<span class=\"ts\"/><span class=\"ts\"/>\"negative value (%lld)\\n\", <a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a>-><a class=\"id\" href=\"#s_maxbytes\">s_maxbytes</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_mountpoint\">mnt_mountpoint</a> = <a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_root\">mnt_root</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_parent\">mnt_parent</a> = <a class=\"id\" href=\"#mnt\">mnt</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a>-><a class=\"id\" href=\"#s_umount\">s_umount</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_secdata\">free_secdata</a>(<a class=\"id\" href=\"#secdata\">secdata</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mnt\">mnt</a>;", 
"<a class=\"id\" href=\"#out_sb\">out_sb</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_root\">mnt_root</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#deactivate_locked_super\">deactivate_locked_super</a>(<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a>);", 
"<a class=\"id\" href=\"#out_free_secdata\">out_free_secdata</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_secdata\">free_secdata</a>(<a class=\"id\" href=\"#secdata\">secdata</a>);", 
"<a class=\"id\" href=\"#out_mnt\">out_mnt</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_vfsmnt\">free_vfsmnt</a>(<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#error\">error</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#vfs_kern_mount\">vfs_kern_mount</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * freeze_super - lock the filesystem and force it into a consistent state</span>", 
"<span class=\"comment\"> * @sb: the super to lock</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Syncs the super to make sure the filesystem is consistent and calls the fs's</span>", 
"<span class=\"comment\"> * freeze_fs.  Subsequent calls to this without first thawing the fs will return</span>", 
"<span class=\"comment\"> * -EBUSY.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#freeze_super\">freeze_super</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_active\">s_active</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_umount\">s_umount</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_frozen\">s_frozen</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#deactivate_locked_super\">deactivate_locked_super</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_flags\">s_flags</a> &amp; <a class=\"id\" href=\"#MS_RDONLY\">MS_RDONLY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_frozen\">s_frozen</a> = <a class=\"id\" href=\"#SB_FREEZE_TRANS\">SB_FREEZE_TRANS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_umount\">s_umount</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_frozen\">s_frozen</a> = <a class=\"id\" href=\"#SB_FREEZE_WRITE\">SB_FREEZE_WRITE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sync_filesystem\">sync_filesystem</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_frozen\">s_frozen</a> = <a class=\"id\" href=\"#SB_FREEZE_TRANS\">SB_FREEZE_TRANS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sync_blockdev\">sync_blockdev</a>(<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_bdev\">s_bdev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_op\">s_op</a>-><a class=\"id\" href=\"#freeze_fs\">freeze_fs</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_op\">s_op</a>-><a class=\"id\" href=\"#freeze_fs\">freeze_fs</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"VFS:Filesystem freeze failed\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_frozen\">s_frozen</a> = <a class=\"id\" href=\"#SB_UNFROZEN\">SB_UNFROZEN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#deactivate_locked_super\">deactivate_locked_super</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_umount\">s_umount</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#freeze_super\">freeze_super</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * thaw_super -- unlock filesystem</span>", 
"<span class=\"comment\"> * @sb: the super to thaw</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Unlocks the filesystem and marks it writeable again after freeze_super().</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#thaw_super\">thaw_super</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_umount\">s_umount</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_frozen\">s_frozen</a> == <a class=\"id\" href=\"#SB_UNFROZEN\">SB_UNFROZEN</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_umount\">s_umount</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_flags\">s_flags</a> &amp; <a class=\"id\" href=\"#MS_RDONLY\">MS_RDONLY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_op\">s_op</a>-><a class=\"id\" href=\"#unfreeze_fs\">unfreeze_fs</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_op\">s_op</a>-><a class=\"id\" href=\"#unfreeze_fs\">unfreeze_fs</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"VFS:Filesystem thaw failed\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_frozen\">s_frozen</a> = <a class=\"id\" href=\"#SB_FREEZE_TRANS\">SB_FREEZE_TRANS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_umount\">s_umount</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_frozen\">s_frozen</a> = <a class=\"id\" href=\"#SB_UNFROZEN\">SB_UNFROZEN</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up\">wake_up</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_wait_unfrozen\">s_wait_unfrozen</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#deactivate_locked_super\">deactivate_locked_super</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#thaw_super\">thaw_super</a>);", 
"", 
"static struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#fs_set_subtype\">fs_set_subtype</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>, const char *<a class=\"id\" href=\"#fstype\">fstype</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#subtype\">subtype</a> = <a class=\"id\" href=\"#strchr\">strchr</a>(<a class=\"id\" href=\"#fstype\">fstype</a>, '.');", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#subtype\">subtype</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#subtype\">subtype</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#subtype\">subtype</a>[0])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#subtype\">subtype</a> = \"\";", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a>-><a class=\"id\" href=\"#s_subtype\">s_subtype</a> = <a class=\"id\" href=\"#kstrdup\">kstrdup</a>(<a class=\"id\" href=\"#subtype\">subtype</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a>-><a class=\"id\" href=\"#s_subtype\">s_subtype</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mnt\">mnt</a>;", 
"", 
" <a class=\"id\" href=\"#err\">err</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mntput\">mntput</a>(<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"}", 
"", 
"struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *", 
"<a class=\"id\" href=\"#do_kern_mount\">do_kern_mount</a>(const char *<a class=\"id\" href=\"#fstype\">fstype</a>, int <a class=\"id\" href=\"#flags\">flags</a>, const char *<a class=\"id\" href=\"#name\">name</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a> *<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#get_fs_type\">get_fs_type</a>(<a class=\"id\" href=\"#fstype\">fstype</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#type\">type</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENODEV\">ENODEV</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#vfs_kern_mount\">vfs_kern_mount</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#mnt\">mnt</a>) && (<a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#fs_flags\">fs_flags</a> &amp; <a class=\"id\" href=\"#FS_HAS_SUBTYPE\">FS_HAS_SUBTYPE</a>) &&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a>-><a class=\"id\" href=\"#s_subtype\">s_subtype</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mnt\">mnt</a> = <a class=\"id\" href=\"#fs_set_subtype\">fs_set_subtype</a>(<a class=\"id\" href=\"#mnt\">mnt</a>, <a class=\"id\" href=\"#fstype\">fstype</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_filesystem\">put_filesystem</a>(<a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mnt\">mnt</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#do_kern_mount\">do_kern_mount</a>);", 
"", 
"struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#kern_mount_data\">kern_mount_data</a>(struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a> *<a class=\"id\" href=\"#type\">type</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#vfs_kern_mount\">vfs_kern_mount</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#MS_KERNMOUNT\">MS_KERNMOUNT</a>, <a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#kern_mount_data\">kern_mount_data</a>);", 
];
xr_frag_insert('l/09/4b1ab1f499d3ee7def1f559b01069b86877d59.xr', __xr_tmp);
