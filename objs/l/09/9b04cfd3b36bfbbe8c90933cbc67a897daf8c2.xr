var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * drivers/base/power/generic_ops.c - Generic PM callbacks for subsystems</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (c) 2010 Rafael J. Wysocki &lt;rjw@sisk.pl&gt;, Novell Inc.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file is released under the GPLv2.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pm\">pm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pm_runtime\">pm_runtime</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PM_RUNTIME\">CONFIG_PM_RUNTIME</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pm_generic_runtime_idle - Generic runtime idle callback for subsystems.</span>", 
"<span class=\"comment\"> * @dev: Device to handle.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If PM operations are defined for the @dev's driver and they include</span>", 
"<span class=\"comment\"> * -&gt;runtime_idle(), execute it and return its error code, if nonzero.</span>", 
"<span class=\"comment\"> * Otherwise, execute pm_runtime_suspend() for the device and return 0.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#pm_generic_runtime_idle\">pm_generic_runtime_idle</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#dev_pm_ops\">dev_pm_ops</a> *<a class=\"id\" href=\"#pm\">pm</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a> ? <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#pm\">pm</a> : <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pm\">pm</a> && <a class=\"id\" href=\"#pm\">pm</a>-><a class=\"id\" href=\"#runtime_idle\">runtime_idle</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#pm\">pm</a>-><a class=\"id\" href=\"#runtime_idle\">runtime_idle</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pm_runtime_suspend\">pm_runtime_suspend</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#pm_generic_runtime_idle\">pm_generic_runtime_idle</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pm_generic_runtime_suspend - Generic runtime suspend callback for subsystems.</span>", 
"<span class=\"comment\"> * @dev: Device to suspend.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If PM operations are defined for the @dev's driver and they include</span>", 
"<span class=\"comment\"> * -&gt;runtime_suspend(), execute it and return its error code.  Otherwise,</span>", 
"<span class=\"comment\"> * return -EINVAL.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#pm_generic_runtime_suspend\">pm_generic_runtime_suspend</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#dev_pm_ops\">dev_pm_ops</a> *<a class=\"id\" href=\"#pm\">pm</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a> ? <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#pm\">pm</a> : <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#pm\">pm</a> && <a class=\"id\" href=\"#pm\">pm</a>-><a class=\"id\" href=\"#runtime_suspend\">runtime_suspend</a> ? <a class=\"id\" href=\"#pm\">pm</a>-><a class=\"id\" href=\"#runtime_suspend\">runtime_suspend</a>(<a class=\"id\" href=\"#dev\">dev</a>) : -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#pm_generic_runtime_suspend\">pm_generic_runtime_suspend</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pm_generic_runtime_resume - Generic runtime resume callback for subsystems.</span>", 
"<span class=\"comment\"> * @dev: Device to resume.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If PM operations are defined for the @dev's driver and they include</span>", 
"<span class=\"comment\"> * -&gt;runtime_resume(), execute it and return its error code.  Otherwise,</span>", 
"<span class=\"comment\"> * return -EINVAL.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#pm_generic_runtime_resume\">pm_generic_runtime_resume</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#dev_pm_ops\">dev_pm_ops</a> *<a class=\"id\" href=\"#pm\">pm</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a> ? <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#pm\">pm</a> : <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#pm\">pm</a> && <a class=\"id\" href=\"#pm\">pm</a>-><a class=\"id\" href=\"#runtime_resume\">runtime_resume</a> ? <a class=\"id\" href=\"#pm\">pm</a>-><a class=\"id\" href=\"#runtime_resume\">runtime_resume</a>(<a class=\"id\" href=\"#dev\">dev</a>) : -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#pm_generic_runtime_resume\">pm_generic_runtime_resume</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PM_RUNTIME */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PM_SLEEP\">CONFIG_PM_SLEEP</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __pm_generic_call - Generic suspend/freeze/poweroff/thaw subsystem callback.</span>", 
"<span class=\"comment\"> * @dev: Device to handle.</span>", 
"<span class=\"comment\"> * @event: PM transition of the system under way.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the device has not been suspended at run time, execute the</span>", 
"<span class=\"comment\"> * suspend/freeze/poweroff/thaw callback provided by its driver, if defined, and</span>", 
"<span class=\"comment\"> * return its error code.  Otherwise, return zero.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__pm_generic_call\">__pm_generic_call</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#dev_pm_ops\">dev_pm_ops</a> *<a class=\"id\" href=\"#pm\">pm</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a> ? <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#driver\">driver</a>-><a class=\"id\" href=\"#pm\">pm</a> : <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#callback\">callback</a>)(struct <a class=\"id\" href=\"#device\">device</a> *);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pm\">pm</a> || <a class=\"id\" href=\"#pm_runtime_suspended\">pm_runtime_suspended</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#event\">event</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PM_EVENT_SUSPEND\">PM_EVENT_SUSPEND</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#callback\">callback</a> = <a class=\"id\" href=\"#pm\">pm</a>-><a class=\"id\" href=\"#suspend\">suspend</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PM_EVENT_FREEZE\">PM_EVENT_FREEZE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#callback\">callback</a> = <a class=\"id\" href=\"#pm\">pm</a>-><a class=\"id\" href=\"#freeze\">freeze</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PM_EVENT_HIBERNATE\">PM_EVENT_HIBERNATE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#callback\">callback</a> = <a class=\"id\" href=\"#pm\">pm</a>-><a class=\"id\" href=\"#poweroff\">poweroff</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PM_EVENT_THAW\">PM_EVENT_THAW</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#callback\">callback</a> = <a class=\"id\" href=\"#pm\">pm</a>-><a class=\"id\" href=\"#thaw\">thaw</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#callback\">callback</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#callback\">callback</a> ? <a class=\"id\" href=\"#callback\">callback</a>(<a class=\"id\" href=\"#dev\">dev</a>) : 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pm_generic_suspend - Generic suspend callback for subsystems.</span>", 
"<span class=\"comment\"> * @dev: Device to suspend.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#pm_generic_suspend\">pm_generic_suspend</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__pm_generic_call\">__pm_generic_call</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PM_EVENT_SUSPEND\">PM_EVENT_SUSPEND</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#pm_generic_suspend\">pm_generic_suspend</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pm_generic_freeze - Generic freeze callback for subsystems.</span>", 
"<span class=\"comment\"> * @dev: Device to freeze.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#pm_generic_freeze\">pm_generic_freeze</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__pm_generic_call\">__pm_generic_call</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PM_EVENT_FREEZE\">PM_EVENT_FREEZE</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#pm_generic_freeze\">pm_generic_freeze</a>);", 
"", 
];
xr_frag_insert('l/09/9b04cfd3b36bfbbe8c90933cbc67a897daf8c2.xr', __xr_tmp);
