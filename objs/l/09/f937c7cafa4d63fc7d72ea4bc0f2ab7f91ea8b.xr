var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * fs/inotify_user.c - inotify support for userspace</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Authors:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>John McCutchan<span class=\"ts\"/>&lt;ttb@tentacle.dhs.org&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Robert Love<span class=\"ts\"/>&lt;rml@novell.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2005 John McCutchan</span>", 
"<span class=\"comment\"> * Copyright 2006 Hewlett-Packard Development Company, L.P.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2009 Eric Paris &lt;Red Hat Inc&gt;</span>", 
"<span class=\"comment\"> * inotify was largely rewriten to make use of the fsnotify infrastructure</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify it</span>", 
"<span class=\"comment\"> * under the terms of the GNU General Public License as published by the</span>", 
"<span class=\"comment\"> * Free Software Foundation; either version 2, or (at your option) any</span>", 
"<span class=\"comment\"> * later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful, but</span>", 
"<span class=\"comment\"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>", 
"<span class=\"comment\"> * General Public License for more details.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#dcache\">dcache</a>.<a class=\"id\" href=\"#h\">h</a>&gt; <span class=\"comment\">/* d_unlinked */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt; <span class=\"comment\">/* struct inode */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fsnotify_backend\">fsnotify_backend</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#inotify\">inotify</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#h\">h</a>&gt; <span class=\"comment\">/* struct path */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt; <span class=\"comment\">/* kmem_* */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"inotify.h\"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check if 2 events contain the same information.  We do not compare private data</span>", 
"<span class=\"comment\"> * but at this moment that isn't a problem for any know fsnotify listeners.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#event_compare\">event_compare</a>(struct <a class=\"id\" href=\"#fsnotify_event\">fsnotify_event</a> *<a class=\"id\" href=\"#old\">old</a>, struct <a class=\"id\" href=\"#fsnotify_event\">fsnotify_event</a> *<a class=\"id\" href=\"#new\">new</a>)", 
"{", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#mask\">mask</a> == <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#mask\">mask</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#to_tell\">to_tell</a> == <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#to_tell\">to_tell</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#data_type\">data_type</a> == <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#data_type\">data_type</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#name_len\">name_len</a> == <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#name_len\">name_len</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#data_type\">data_type</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case (<a class=\"id\" href=\"#FSNOTIFY_EVENT_INODE\">FSNOTIFY_EVENT_INODE</a>):", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* remember, after old was put on the wait_q we aren't</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * allowed to look at the inode any more, only thing</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * left to check was if the file_name is the same */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#name_len\">name_len</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#file_name\">file_name</a>, <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#file_name\">file_name</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case (<a class=\"id\" href=\"#FSNOTIFY_EVENT_PATH\">FSNOTIFY_EVENT_PATH</a>):", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#mnt\">mnt</a> == <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a> == <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#path\">path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case (<a class=\"id\" href=\"#FSNOTIFY_EVENT_NONE\">FSNOTIFY_EVENT_NONE</a>):", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#mask\">mask</a> &amp; <a class=\"id\" href=\"#FS_Q_OVERFLOW\">FS_Q_OVERFLOW</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#mask\">mask</a> &amp; <a class=\"id\" href=\"#FS_IN_IGNORED\">FS_IN_IGNORED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>};", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#fsnotify_event\">fsnotify_event</a> *<a class=\"id\" href=\"#inotify_merge\">inotify_merge</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#fsnotify_event\">fsnotify_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_event_holder\">fsnotify_event_holder</a> *<a class=\"id\" href=\"#last_holder\">last_holder</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_event\">fsnotify_event</a> *<a class=\"id\" href=\"#last_event\">last_event</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* and the list better be locked by something too */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#last_holder\">last_holder</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#prev\">prev</a>, struct <a class=\"id\" href=\"#fsnotify_event_holder\">fsnotify_event_holder</a>, <a class=\"id\" href=\"#event_list\">event_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#last_event\">last_event</a> = <a class=\"id\" href=\"#last_holder\">last_holder</a>-><a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event_compare\">event_compare</a>(<a class=\"id\" href=\"#last_event\">last_event</a>, <a class=\"id\" href=\"#event\">event</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_get_event\">fsnotify_get_event</a>(<a class=\"id\" href=\"#last_event\">last_event</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_event\">last_event</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#last_event\">last_event</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#inotify_handle_event\">inotify_handle_event</a>(struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#inode_mark\">inode_mark</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#vfsmount_mark\">vfsmount_mark</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_event\">fsnotify_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inotify_inode_mark\">inotify_inode_mark</a> *<a class=\"id\" href=\"#i_mark\">i_mark</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#to_tell\">to_tell</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inotify_event_private_data\">inotify_event_private_data</a> *<a class=\"id\" href=\"#event_priv\">event_priv</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_event_private_data\">fsnotify_event_private_data</a> *<a class=\"id\" href=\"#fsn_event_priv\">fsn_event_priv</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_event\">fsnotify_event</a> *<a class=\"id\" href=\"#added_event\">added_event</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#wd\">wd</a>, <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#vfsmount_mark\">vfsmount_mark</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"%s: group=%p event=%p to_tell=%p mask=%x\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#group\">group</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#to_tell\">to_tell</a>, <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#mask\">mask</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#to_tell\">to_tell</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#to_tell\">to_tell</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i_mark\">i_mark</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#inode_mark\">inode_mark</a>, struct <a class=\"id\" href=\"#inotify_inode_mark\">inotify_inode_mark</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#fsn_mark\">fsn_mark</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wd\">wd</a> = <a class=\"id\" href=\"#i_mark\">i_mark</a>-><a class=\"id\" href=\"#wd\">wd</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event_priv\">event_priv</a> = <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#event_priv_cachep\">event_priv_cachep</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#event_priv\">event_priv</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsn_event_priv\">fsn_event_priv</a> = &amp;<a class=\"id\" href=\"#event_priv\">event_priv</a>-><a class=\"id\" href=\"#fsnotify_event_priv_data\">fsnotify_event_priv_data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsn_event_priv\">fsn_event_priv</a>-><a class=\"id\" href=\"#group\">group</a> = <a class=\"id\" href=\"#group\">group</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event_priv\">event_priv</a>-><a class=\"id\" href=\"#wd\">wd</a> = <a class=\"id\" href=\"#wd\">wd</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#added_event\">added_event</a> = <a class=\"id\" href=\"#fsnotify_add_notify_event\">fsnotify_add_notify_event</a>(<a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#fsn_event_priv\">fsn_event_priv</a>, <a class=\"id\" href=\"#inotify_merge\">inotify_merge</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#added_event\">added_event</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inotify_free_event_priv\">inotify_free_event_priv</a>(<a class=\"id\" href=\"#fsn_event_priv\">fsn_event_priv</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#added_event\">added_event</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_put_event\">fsnotify_put_event</a>(<a class=\"id\" href=\"#added_event\">added_event</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#added_event\">added_event</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode_mark\">inode_mark</a>-><a class=\"id\" href=\"#mask\">mask</a> &amp; <a class=\"id\" href=\"#IN_ONESHOT\">IN_ONESHOT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_destroy_mark\">fsnotify_destroy_mark</a>(<a class=\"id\" href=\"#inode_mark\">inode_mark</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#inotify_freeing_mark\">inotify_freeing_mark</a>(struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#fsn_mark\">fsn_mark</a>, struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inotify_ignored_and_remove_idr\">inotify_ignored_and_remove_idr</a>(<a class=\"id\" href=\"#fsn_mark\">fsn_mark</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#inotify_should_send_event\">inotify_should_send_event</a>(struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#inode_mark\">inode_mark</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#vfsmount_mark\">vfsmount_mark</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#mask\">mask</a>, void *<a class=\"id\" href=\"#data\">data</a>, int <a class=\"id\" href=\"#data_type\">data_type</a>)", 
"{", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#inode_mark\">inode_mark</a>-><a class=\"id\" href=\"#mask\">mask</a> &amp; <a class=\"id\" href=\"#FS_EXCL_UNLINK\">FS_EXCL_UNLINK</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#data_type\">data_type</a> == <a class=\"id\" href=\"#FSNOTIFY_EVENT_PATH\">FSNOTIFY_EVENT_PATH</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#path\">path</a> *<a class=\"id\" href=\"#path\">path</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#d_unlinked\">d_unlinked</a>(<a class=\"id\" href=\"#path\">path</a>-><a class=\"id\" href=\"#dentry\">dentry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is NEVER supposed to be called.  Inotify marks should either have been</span>", 
"<span class=\"comment\"> * removed from the idr when the watch was removed or in the</span>", 
"<span class=\"comment\"> * fsnotify_destroy_mark_by_group() call when the inotify instance was being</span>", 
"<span class=\"comment\"> * torn down.  This is only called if the idr is about to be freed but there</span>", 
"<span class=\"comment\"> * are still marks in it.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#idr_callback\">idr_callback</a>(int <a class=\"id\" href=\"#id\">id</a>, void *<a class=\"id\" href=\"#p\">p</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_mark\">fsnotify_mark</a> *<a class=\"id\" href=\"#fsn_mark\">fsn_mark</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inotify_inode_mark\">inotify_inode_mark</a> *<a class=\"id\" href=\"#i_mark\">i_mark</a>;", 
"<span class=\"ts\"/>static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#warned\">warned</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#warned\">warned</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#warned\">warned</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsn_mark\">fsn_mark</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i_mark\">i_mark</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#fsn_mark\">fsn_mark</a>, struct <a class=\"id\" href=\"#inotify_inode_mark\">inotify_inode_mark</a>, <a class=\"id\" href=\"#fsn_mark\">fsn_mark</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN\">WARN</a>(1, \"inotify closing but id=%d for fsn_mark=%p in group=%p still in \"", 
"<span class=\"ts\"/><span class=\"ts\"/>\"idr.  Probably leaking memory\\n\", <a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * I'm taking the liberty of assuming that the mark in question is a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * valid address and I'm dereferencing it.  This might help to figure</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * out why we got here and the panic is no worse than the original</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * BUG() that was here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fsn_mark\">fsn_mark</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"fsn_mark->group=%p inode=%p wd=%d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsn_mark\">fsn_mark</a>-><a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#fsn_mark\">fsn_mark</a>-><a class=\"id\" href=\"#i\">i</a>.<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#i_mark\">i_mark</a>-><a class=\"id\" href=\"#wd\">wd</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#inotify_free_group_priv\">inotify_free_group_priv</a>(struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* ideally the idr is empty and we won't hit the BUG in teh callback */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idr_for_each\">idr_for_each</a>(&amp;<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#inotify_data\">inotify_data</a>.<a class=\"id\" href=\"#idr\">idr</a>, <a class=\"id\" href=\"#idr_callback\">idr_callback</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idr_remove_all\">idr_remove_all</a>(&amp;<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#inotify_data\">inotify_data</a>.<a class=\"id\" href=\"#idr\">idr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idr_destroy\">idr_destroy</a>(&amp;<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#inotify_data\">inotify_data</a>.<a class=\"id\" href=\"#idr\">idr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_uid\">free_uid</a>(<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#inotify_data\">inotify_data</a>.<a class=\"id\" href=\"#user\">user</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#inotify_free_event_priv\">inotify_free_event_priv</a>(struct <a class=\"id\" href=\"#fsnotify_event_private_data\">fsnotify_event_private_data</a> *<a class=\"id\" href=\"#fsn_event_priv\">fsn_event_priv</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inotify_event_private_data\">inotify_event_private_data</a> *<a class=\"id\" href=\"#event_priv\">event_priv</a>;", 
"", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event_priv\">event_priv</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#fsn_event_priv\">fsn_event_priv</a>, struct <a class=\"id\" href=\"#inotify_event_private_data\">inotify_event_private_data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#fsnotify_event_priv_data\">fsnotify_event_priv_data</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#event_priv_cachep\">event_priv_cachep</a>, <a class=\"id\" href=\"#event_priv\">event_priv</a>);", 
"}", 
"", 
"const struct <a class=\"id\" href=\"#fsnotify_ops\">fsnotify_ops</a> <a class=\"id\" href=\"#inotify_fsnotify_ops\">inotify_fsnotify_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#handle_event\">handle_event</a> = <a class=\"id\" href=\"#inotify_handle_event\">inotify_handle_event</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#should_send_event\">should_send_event</a> = <a class=\"id\" href=\"#inotify_should_send_event\">inotify_should_send_event</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#free_group_priv\">free_group_priv</a> = <a class=\"id\" href=\"#inotify_free_group_priv\">inotify_free_group_priv</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#free_event_priv\">free_event_priv</a> = <a class=\"id\" href=\"#inotify_free_event_priv\">inotify_free_event_priv</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#freeing_mark\">freeing_mark</a> = <a class=\"id\" href=\"#inotify_freeing_mark\">inotify_freeing_mark</a>,", 
"};", 
];
xr_frag_insert('l/09/f937c7cafa4d63fc7d72ea4bc0f2ab7f91ea8b.xr', __xr_tmp);
