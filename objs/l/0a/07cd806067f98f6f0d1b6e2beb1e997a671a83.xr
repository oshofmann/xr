var __xr_tmp = [
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr\">nr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#nr_requests\">nr_requests</a> - (<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#nr_requests\">nr_requests</a> / 8) + 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr\">nr</a> &gt; <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#nr_requests\">nr_requests</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#nr_requests\">nr_requests</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#nr_congestion_on\">nr_congestion_on</a> = <a class=\"id\" href=\"#nr\">nr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#nr_requests\">nr_requests</a> - (<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#nr_requests\">nr_requests</a> / 8) - (<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#nr_requests\">nr_requests</a> / 16) - 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr\">nr</a> &lt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#nr_congestion_off\">nr_congestion_off</a> = <a class=\"id\" href=\"#nr\">nr</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_get_backing_dev_info - get the address of a queue's backing_dev_info</span>", 
"<span class=\"comment\"> * @bdev:<span class=\"ts\"/>device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Locates the passed device's request queue and returns the address of its</span>", 
"<span class=\"comment\"> * backing_dev_info</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Will return NULL if the request queue cannot be located.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#blk_get_backing_dev_info\">blk_get_backing_dev_info</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#bdev_get_queue\">bdev_get_queue</a>(<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#q\">q</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_get_backing_dev_info\">blk_get_backing_dev_info</a>);", 
"", 
"void <a class=\"id\" href=\"#blk_rq_init\">blk_rq_init</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#rq\">rq</a>, 0, sizeof(*<a class=\"id\" href=\"#rq\">rq</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#queuelist\">queuelist</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#timeout_list\">timeout_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cpu\">cpu</a> = -1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#__sector\">__sector</a> = (<a class=\"id\" href=\"#sector_t\">sector_t</a>) -1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_HLIST_NODE\">INIT_HLIST_NODE</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#hash\">hash</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#RB_CLEAR_NODE\">RB_CLEAR_NODE</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rb_node\">rb_node</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd\">cmd</a> = <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#__cmd\">__cmd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_len\">cmd_len</a> = <a class=\"id\" href=\"#BLK_MAX_CDB\">BLK_MAX_CDB</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#tag\">tag</a> = -1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#ref_count\">ref_count</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#start_time\">start_time</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_start_time_ns\">set_start_time_ns</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_rq_init\">blk_rq_init</a>);", 
"", 
"static void <a class=\"id\" href=\"#req_bio_endio\">req_bio_endio</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned int <a class=\"id\" href=\"#nbytes\">nbytes</a>, int <a class=\"id\" href=\"#error\">error</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#q\">q</a>;", 
"", 
"<span class=\"ts\"/>if (&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#bar_rq\">bar_rq</a> != <a class=\"id\" href=\"#rq\">rq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#BIO_UPTODATE\">BIO_UPTODATE</a>, &amp;<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_flags\">bi_flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#BIO_UPTODATE\">BIO_UPTODATE</a>, &amp;<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_flags\">bi_flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#nbytes\">nbytes</a> &gt; <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_size\">bi_size</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: want %u bytes done, %u left\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#nbytes\">nbytes</a>, <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_size\">bi_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nbytes\">nbytes</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_size\">bi_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_QUIET\">REQ_QUIET</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#BIO_QUIET\">BIO_QUIET</a>, &amp;<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_flags\">bi_flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_size\">bi_size</a> -= <a class=\"id\" href=\"#nbytes\">nbytes</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_sector\">bi_sector</a> += (<a class=\"id\" href=\"#nbytes\">nbytes</a> >> 9);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bio_integrity\">bio_integrity</a>(<a class=\"id\" href=\"#bio\">bio</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio_integrity_advance\">bio_integrity_advance</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#nbytes\">nbytes</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_size\">bi_size</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio_endio\">bio_endio</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#error\">error</a>);", 
"<span class=\"ts\"/>} else {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Okay, this is the barrier request in progress, just</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * record the error;</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> && !<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#orderr\">orderr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#orderr\">orderr</a> = <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#blk_dump_rq_flags\">blk_dump_rq_flags</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>, char *<a class=\"id\" href=\"#msg\">msg</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#bit\">bit</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"%s: dev %s: type=%x, flags=%x\\n\", <a class=\"id\" href=\"#msg\">msg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rq_disk\">rq_disk</a> ? <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rq_disk\">rq_disk</a>-><a class=\"id\" href=\"#disk_name\">disk_name</a> : \"?\", <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_type\">cmd_type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"  sector %llu, nr/cnr %u/%u\\n\",", 
"<span class=\"ts\"/>       (unsigned long long)<a class=\"id\" href=\"#blk_rq_pos\">blk_rq_pos</a>(<a class=\"id\" href=\"#rq\">rq</a>),", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#blk_rq_sectors\">blk_rq_sectors</a>(<a class=\"id\" href=\"#rq\">rq</a>), <a class=\"id\" href=\"#blk_rq_cur_sectors\">blk_rq_cur_sectors</a>(<a class=\"id\" href=\"#rq\">rq</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"  bio %p, biotail %p, buffer %p, len %u\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#biotail\">biotail</a>, <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#blk_rq_bytes\">blk_rq_bytes</a>(<a class=\"id\" href=\"#rq\">rq</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_type\">cmd_type</a> == <a class=\"id\" href=\"#REQ_TYPE_BLOCK_PC\">REQ_TYPE_BLOCK_PC</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"  cdb: \");", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#bit\">bit</a> = 0; <a class=\"id\" href=\"#bit\">bit</a> &lt; <a class=\"id\" href=\"#BLK_MAX_CDB\">BLK_MAX_CDB</a>; <a class=\"id\" href=\"#bit\">bit</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"%02x \", <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd\">cmd</a>[<a class=\"id\" href=\"#bit\">bit</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"\\n\");", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_dump_rq_flags\">blk_dump_rq_flags</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * \"plug\" the device if there are no outstanding requests: this will</span>", 
"<span class=\"comment\"> * force the transfer to start only after we have put all the requests</span>", 
"<span class=\"comment\"> * on the list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is called with interrupts off and no requests on the queue and</span>", 
"<span class=\"comment\"> * with the queue lock held.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#blk_plug_device\">blk_plug_device</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>());", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * don't plug a stopped queue, it must be paired with blk_start_queue()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * which will restart the queueing</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#blk_queue_stopped\">blk_queue_stopped</a>(<a class=\"id\" href=\"#q\">q</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#queue_flag_test_and_set\">queue_flag_test_and_set</a>(<a class=\"id\" href=\"#QUEUE_FLAG_PLUGGED\">QUEUE_FLAG_PLUGGED</a>, <a class=\"id\" href=\"#q\">q</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mod_timer\">mod_timer</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#unplug_timer\">unplug_timer</a>, <a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#unplug_delay\">unplug_delay</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_block_plug\">trace_block_plug</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_plug_device\">blk_plug_device</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_plug_device_unlocked - plug a device without queue lock held</span>", 
"<span class=\"comment\"> * @q:    The &amp;struct request_queue to plug</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *   Like @blk_plug_device(), but grabs the queue lock and disables</span>", 
"<span class=\"comment\"> *   interrupts.</span>", 
"<span class=\"comment\"> **/</span>", 
"void <a class=\"id\" href=\"#blk_plug_device_unlocked\">blk_plug_device_unlocked</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_plug_device\">blk_plug_device</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_plug_device_unlocked\">blk_plug_device_unlocked</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * remove the queue from the plugged list, if present. called with</span>", 
"<span class=\"comment\"> * queue lock held and interrupts disabled.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#blk_remove_plug\">blk_remove_plug</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>());", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#queue_flag_test_and_clear\">queue_flag_test_and_clear</a>(<a class=\"id\" href=\"#QUEUE_FLAG_PLUGGED\">QUEUE_FLAG_PLUGGED</a>, <a class=\"id\" href=\"#q\">q</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#del_timer\">del_timer</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#unplug_timer\">unplug_timer</a>);", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_remove_plug\">blk_remove_plug</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * remove the plug and let it rip..</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__generic_unplug_device\">__generic_unplug_device</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#blk_queue_stopped\">blk_queue_stopped</a>(<a class=\"id\" href=\"#q\">q</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#blk_remove_plug\">blk_remove_plug</a>(<a class=\"id\" href=\"#q\">q</a>) && !<a class=\"id\" href=\"#blk_queue_nonrot\">blk_queue_nonrot</a>(<a class=\"id\" href=\"#q\">q</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#request_fn\">request_fn</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * generic_unplug_device - fire a request queue</span>", 
"<span class=\"comment\"> * @q:    The &amp;struct request_queue in question</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *   Linux uses plugging to build bigger requests queues before letting</span>", 
"<span class=\"comment\"> *   the device have at them. If a queue is plugged, the I/O scheduler</span>", 
"<span class=\"comment\"> *   is still adding and merging requests on the queue. Once the queue</span>", 
"<span class=\"comment\"> *   gets unplugged, the request_fn defined for the queue is invoked and</span>", 
"<span class=\"comment\"> *   transfers started.</span>", 
"<span class=\"comment\"> **/</span>", 
"void <a class=\"id\" href=\"#generic_unplug_device\">generic_unplug_device</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#blk_queue_plugged\">blk_queue_plugged</a>(<a class=\"id\" href=\"#q\">q</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__generic_unplug_device\">__generic_unplug_device</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#generic_unplug_device\">generic_unplug_device</a>);", 
"", 
"static void <a class=\"id\" href=\"#blk_backing_dev_unplug\">blk_backing_dev_unplug</a>(struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#unplug_io_data\">unplug_io_data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_unplug\">blk_unplug</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#blk_unplug_work\">blk_unplug_work</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#work\">work</a>, struct <a class=\"id\" href=\"#request_queue\">request_queue</a>, <a class=\"id\" href=\"#unplug_work\">unplug_work</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_block_unplug_io\">trace_block_unplug_io</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#unplug_fn\">unplug_fn</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#blk_unplug_timeout\">blk_unplug_timeout</a>(unsigned long <a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a> = (struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *)<a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_block_unplug_timer\">trace_block_unplug_timer</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kblockd_schedule_work\">kblockd_schedule_work</a>(<a class=\"id\" href=\"#q\">q</a>, &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#unplug_work\">unplug_work</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#blk_unplug\">blk_unplug</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * devices don't necessarily have an -&gt;unplug_fn defined</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#unplug_fn\">unplug_fn</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_block_unplug_io\">trace_block_unplug_io</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#unplug_fn\">unplug_fn</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_unplug\">blk_unplug</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_start_queue - restart a previously stopped queue</span>", 
"<span class=\"comment\"> * @q:    The &amp;struct request_queue in question</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *   blk_start_queue() will clear the stop flag on the queue, and call</span>", 
"<span class=\"comment\"> *   the request_fn for the queue if it was in a stopped state when</span>", 
"<span class=\"comment\"> *   entered. Also see blk_stop_queue(). Queue lock must be held.</span>", 
"<span class=\"comment\"> **/</span>", 
"void <a class=\"id\" href=\"#blk_start_queue\">blk_start_queue</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>());", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#queue_flag_clear\">queue_flag_clear</a>(<a class=\"id\" href=\"#QUEUE_FLAG_STOPPED\">QUEUE_FLAG_STOPPED</a>, <a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__blk_run_queue\">__blk_run_queue</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_start_queue\">blk_start_queue</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_stop_queue - stop a queue</span>", 
"<span class=\"comment\"> * @q:    The &amp;struct request_queue in question</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *   The Linux block layer assumes that a block driver will consume all</span>", 
"<span class=\"comment\"> *   entries on the request queue when the request_fn strategy is called.</span>", 
"<span class=\"comment\"> *   Often this will not happen, because of hardware limitations (queue</span>", 
"<span class=\"comment\"> *   depth settings). If a device driver gets a 'queue full' response,</span>", 
"<span class=\"comment\"> *   or if it simply chooses not to queue more I/O at one point, it can</span>", 
"<span class=\"comment\"> *   call this function to prevent the request_fn from being called until</span>", 
"<span class=\"comment\"> *   the driver has signalled it's ready to go again. This happens by calling</span>", 
"<span class=\"comment\"> *   blk_start_queue() to restart queue operations. Queue lock must be held.</span>", 
"<span class=\"comment\"> **/</span>", 
"void <a class=\"id\" href=\"#blk_stop_queue\">blk_stop_queue</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_remove_plug\">blk_remove_plug</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#queue_flag_set\">queue_flag_set</a>(<a class=\"id\" href=\"#QUEUE_FLAG_STOPPED\">QUEUE_FLAG_STOPPED</a>, <a class=\"id\" href=\"#q\">q</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_stop_queue\">blk_stop_queue</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_sync_queue - cancel any pending callbacks on a queue</span>", 
"<span class=\"comment\"> * @q: the queue</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *     The block layer may perform asynchronous callback activity</span>", 
"<span class=\"comment\"> *     on a queue, such as calling the unplug function after a timeout.</span>", 
"<span class=\"comment\"> *     A block device may call blk_sync_queue to ensure that any</span>", 
"<span class=\"comment\"> *     such activity is cancelled, thus allowing it to release resources</span>", 
"<span class=\"comment\"> *     that the callbacks might use. The caller must already have made sure</span>", 
"<span class=\"comment\"> *     that its -&gt;make_request_fn will not re-add plugging prior to calling</span>", 
"<span class=\"comment\"> *     this function.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#blk_sync_queue\">blk_sync_queue</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#del_timer_sync\">del_timer_sync</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#unplug_timer\">unplug_timer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#del_timer_sync\">del_timer_sync</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#timeout\">timeout</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cancel_work_sync\">cancel_work_sync</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#unplug_work\">unplug_work</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_sync_queue\">blk_sync_queue</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __blk_run_queue - run a single device queue</span>", 
"<span class=\"comment\"> * @q:<span class=\"ts\"/>The queue to run</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *    See @blk_run_queue. This variant must be called with the queue lock</span>", 
"<span class=\"comment\"> *    held and interrupts disabled.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__blk_run_queue\">__blk_run_queue</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_remove_plug\">blk_remove_plug</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#blk_queue_stopped\">blk_queue_stopped</a>(<a class=\"id\" href=\"#q\">q</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#elv_queue_empty\">elv_queue_empty</a>(<a class=\"id\" href=\"#q\">q</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Only recurse once to avoid overrunning the stack, let the unplug</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * handling reinvoke the handler shortly if we already got there.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#queue_flag_test_and_set\">queue_flag_test_and_set</a>(<a class=\"id\" href=\"#QUEUE_FLAG_REENTER\">QUEUE_FLAG_REENTER</a>, <a class=\"id\" href=\"#q\">q</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#request_fn\">request_fn</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#queue_flag_clear\">queue_flag_clear</a>(<a class=\"id\" href=\"#QUEUE_FLAG_REENTER\">QUEUE_FLAG_REENTER</a>, <a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#queue_flag_set\">queue_flag_set</a>(<a class=\"id\" href=\"#QUEUE_FLAG_PLUGGED\">QUEUE_FLAG_PLUGGED</a>, <a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kblockd_schedule_work\">kblockd_schedule_work</a>(<a class=\"id\" href=\"#q\">q</a>, &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#unplug_work\">unplug_work</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__blk_run_queue\">__blk_run_queue</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_run_queue - run a single device queue</span>", 
"<span class=\"comment\"> * @q: The queue to run</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *    Invoke request handling on this queue, if it has pending work to do.</span>", 
"<span class=\"comment\"> *    May be used to restart queueing when a request has completed.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#blk_run_queue\">blk_run_queue</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__blk_run_queue\">__blk_run_queue</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_run_queue\">blk_run_queue</a>);", 
"", 
"void <a class=\"id\" href=\"#blk_put_queue\">blk_put_queue</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#kobj\">kobj</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#blk_cleanup_queue\">blk_cleanup_queue</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We know we have process context here, so we can be a little</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cautious and ensure that pending block actions on this device</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * are done before moving on. Going into this function, we should</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not have processes doing IO to this device.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_sync_queue\">blk_sync_queue</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#del_timer_sync\">del_timer_sync</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a>.<a class=\"id\" href=\"#laptop_mode_wb_timer\">laptop_mode_wb_timer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#sysfs_lock\">sysfs_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#queue_flag_set_unlocked\">queue_flag_set_unlocked</a>(<a class=\"id\" href=\"#QUEUE_FLAG_DEAD\">QUEUE_FLAG_DEAD</a>, <a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#sysfs_lock\">sysfs_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#elevator\">elevator</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#elevator_exit\">elevator_exit</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#elevator\">elevator</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_put_queue\">blk_put_queue</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_cleanup_queue\">blk_cleanup_queue</a>);", 
"", 
"static int <a class=\"id\" href=\"#blk_init_free_list\">blk_init_free_list</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_list\">request_list</a> *<a class=\"id\" href=\"#rl\">rl</a> = &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#rq\">rq</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#rl\">rl</a>-><a class=\"id\" href=\"#rq_pool\">rq_pool</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rl\">rl</a>-><a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#BLK_RW_SYNC\">BLK_RW_SYNC</a>] = <a class=\"id\" href=\"#rl\">rl</a>-><a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#BLK_RW_ASYNC\">BLK_RW_ASYNC</a>] = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rl\">rl</a>-><a class=\"id\" href=\"#starved\">starved</a>[<a class=\"id\" href=\"#BLK_RW_SYNC\">BLK_RW_SYNC</a>] = <a class=\"id\" href=\"#rl\">rl</a>-><a class=\"id\" href=\"#starved\">starved</a>[<a class=\"id\" href=\"#BLK_RW_ASYNC\">BLK_RW_ASYNC</a>] = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rl\">rl</a>-><a class=\"id\" href=\"#elvpriv\">elvpriv</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_waitqueue_head\">init_waitqueue_head</a>(&amp;<a class=\"id\" href=\"#rl\">rl</a>-><a class=\"id\" href=\"#wait\">wait</a>[<a class=\"id\" href=\"#BLK_RW_SYNC\">BLK_RW_SYNC</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_waitqueue_head\">init_waitqueue_head</a>(&amp;<a class=\"id\" href=\"#rl\">rl</a>-><a class=\"id\" href=\"#wait\">wait</a>[<a class=\"id\" href=\"#BLK_RW_ASYNC\">BLK_RW_ASYNC</a>]);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rl\">rl</a>-><a class=\"id\" href=\"#rq_pool\">rq_pool</a> = <a class=\"id\" href=\"#mempool_create_node\">mempool_create_node</a>(<a class=\"id\" href=\"#BLKDEV_MIN_RQ\">BLKDEV_MIN_RQ</a>, <a class=\"id\" href=\"#mempool_alloc_slab\">mempool_alloc_slab</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mempool_free_slab\">mempool_free_slab</a>, <a class=\"id\" href=\"#request_cachep\">request_cachep</a>, <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#node\">node</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rl\">rl</a>-><a class=\"id\" href=\"#rq_pool\">rq_pool</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#blk_alloc_queue\">blk_alloc_queue</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#blk_alloc_queue_node\">blk_alloc_queue_node</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, -1);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_alloc_queue\">blk_alloc_queue</a>);", 
"", 
"struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#blk_alloc_queue_node\">blk_alloc_queue_node</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, int <a class=\"id\" href=\"#node_id\">node_id</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#kmem_cache_alloc_node\">kmem_cache_alloc_node</a>(<a class=\"id\" href=\"#blk_requestq_cachep\">blk_requestq_cachep</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> | <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>, <a class=\"id\" href=\"#node_id\">node_id</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#q\">q</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a>.<a class=\"id\" href=\"#unplug_io_fn\">unplug_io_fn</a> = <a class=\"id\" href=\"#blk_backing_dev_unplug\">blk_backing_dev_unplug</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a>.<a class=\"id\" href=\"#unplug_io_data\">unplug_io_data</a> = <a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a>.<a class=\"id\" href=\"#ra_pages\">ra_pages</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#VM_MAX_READAHEAD\">VM_MAX_READAHEAD</a> * 1024) / <a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a>.<a class=\"id\" href=\"#state\">state</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a>.<a class=\"id\" href=\"#capabilities\">capabilities</a> = <a class=\"id\" href=\"#BDI_CAP_MAP_COPY\">BDI_CAP_MAP_COPY</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a>.<a class=\"id\" href=\"#name\">name</a> = \"block\";", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#bdi_init\">bdi_init</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#blk_requestq_cachep\">blk_requestq_cachep</a>, <a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_timer\">setup_timer</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a>.<a class=\"id\" href=\"#laptop_mode_wb_timer\">laptop_mode_wb_timer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#laptop_mode_timer_fn\">laptop_mode_timer_fn</a>, (unsigned long) <a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_timer\">init_timer</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#unplug_timer\">unplug_timer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_timer\">setup_timer</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#timeout\">timeout</a>, <a class=\"id\" href=\"#blk_rq_timed_out_timer\">blk_rq_timed_out_timer</a>, (unsigned long) <a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#timeout_list\">timeout_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_WORK\">INIT_WORK</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#unplug_work\">unplug_work</a>, <a class=\"id\" href=\"#blk_unplug_work\">blk_unplug_work</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_init\">kobject_init</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#kobj\">kobj</a>, &amp;<a class=\"id\" href=\"#blk_queue_ktype\">blk_queue_ktype</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#sysfs_lock\">sysfs_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#__queue_lock\">__queue_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#q\">q</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_alloc_queue_node\">blk_alloc_queue_node</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_init_queue  - prepare a request queue for use with a block device</span>", 
"<span class=\"comment\"> * @rfn:  The function to be called to process requests that have been</span>", 
"<span class=\"comment\"> *        placed on the queue.</span>", 
"<span class=\"comment\"> * @lock: Request queue spin lock</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *    If a block device wishes to use the standard request handling procedures,</span>", 
"<span class=\"comment\"> *    which sorts requests and coalesces adjacent requests, then it must</span>", 
"<span class=\"comment\"> *    call blk_init_queue().  The function @rfn will be called when there</span>", 
"<span class=\"comment\"> *    are requests on the queue that need to be processed.  If the device</span>", 
"<span class=\"comment\"> *    supports plugging, then @rfn may not be called immediately when requests</span>", 
"<span class=\"comment\"> *    are available on the queue, but may be called at some time later instead.</span>", 
"<span class=\"comment\"> *    Plugged queues are generally unplugged when a buffer belonging to one</span>", 
"<span class=\"comment\"> *    of the requests on the queue is needed, or due to memory pressure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *    @rfn is not required, or even expected, to remove all requests off the</span>", 
"<span class=\"comment\"> *    queue, but only as many as it can handle at a time.  If it does leave</span>", 
"<span class=\"comment\"> *    requests on the queue, it is responsible for arranging that the requests</span>", 
"<span class=\"comment\"> *    get dealt with eventually.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *    The queue spin lock must be held while manipulating the requests on the</span>", 
"<span class=\"comment\"> *    request queue; this lock will be taken also from interrupt context, so irq</span>", 
"<span class=\"comment\"> *    disabling is needed for it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *    Function returns a pointer to the initialized request queue, or %NULL if</span>", 
"<span class=\"comment\"> *    it didn't succeed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note:</span>", 
"<span class=\"comment\"> *    blk_init_queue() must be paired with a blk_cleanup_queue() call</span>", 
"<span class=\"comment\"> *    when the block device is deactivated (such as at module unload).</span>", 
"<span class=\"comment\"> **/</span>", 
"", 
"struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#blk_init_queue\">blk_init_queue</a>(<a class=\"id\" href=\"#request_fn_proc\">request_fn_proc</a> *<a class=\"id\" href=\"#rfn\">rfn</a>, <a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#blk_init_queue_node\">blk_init_queue_node</a>(<a class=\"id\" href=\"#rfn\">rfn</a>, <a class=\"id\" href=\"#lock\">lock</a>, -1);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_init_queue\">blk_init_queue</a>);", 
"", 
"struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *", 
"<a class=\"id\" href=\"#blk_init_queue_node\">blk_init_queue_node</a>(<a class=\"id\" href=\"#request_fn_proc\">request_fn_proc</a> *<a class=\"id\" href=\"#rfn\">rfn</a>, <a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>, int <a class=\"id\" href=\"#node_id\">node_id</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#uninit_q\">uninit_q</a>, *<a class=\"id\" href=\"#q\">q</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uninit_q\">uninit_q</a> = <a class=\"id\" href=\"#blk_alloc_queue_node\">blk_alloc_queue_node</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, <a class=\"id\" href=\"#node_id\">node_id</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#uninit_q\">uninit_q</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#blk_init_allocated_queue_node\">blk_init_allocated_queue_node</a>(<a class=\"id\" href=\"#uninit_q\">uninit_q</a>, <a class=\"id\" href=\"#rfn\">rfn</a>, <a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#node_id\">node_id</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#q\">q</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_cleanup_queue\">blk_cleanup_queue</a>(<a class=\"id\" href=\"#uninit_q\">uninit_q</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#q\">q</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_init_queue_node\">blk_init_queue_node</a>);", 
"", 
"struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *", 
"<a class=\"id\" href=\"#blk_init_allocated_queue\">blk_init_allocated_queue</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#request_fn_proc\">request_fn_proc</a> *<a class=\"id\" href=\"#rfn\">rfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#blk_init_allocated_queue_node\">blk_init_allocated_queue_node</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#rfn\">rfn</a>, <a class=\"id\" href=\"#lock\">lock</a>, -1);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_init_allocated_queue\">blk_init_allocated_queue</a>);", 
"", 
"struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *", 
"<a class=\"id\" href=\"#blk_init_allocated_queue_node\">blk_init_allocated_queue_node</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#request_fn_proc\">request_fn_proc</a> *<a class=\"id\" href=\"#rfn\">rfn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>, int <a class=\"id\" href=\"#node_id\">node_id</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#q\">q</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#node_id\">node_id</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#blk_init_free_list\">blk_init_free_list</a>(<a class=\"id\" href=\"#q\">q</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#request_fn\">request_fn</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#rfn\">rfn</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#prep_rq_fn\">prep_rq_fn</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#unprep_rq_fn\">unprep_rq_fn</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#unplug_fn\">unplug_fn</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#generic_unplug_device\">generic_unplug_device</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_flags\">queue_flags</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#QUEUE_FLAG_DEFAULT\">QUEUE_FLAG_DEFAULT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#lock\">lock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This also sets hw/phys segments, boundary and size</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_make_request\">blk_queue_make_request</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#__make_request\">__make_request</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#sg_reserved_size\">sg_reserved_size</a> = <a class=\"id\" href=\"#INT_MAX\">INT_MAX</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * all done</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#elevator_init\">elevator_init</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#NULL\">NULL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_congestion_threshold\">blk_queue_congestion_threshold</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_init_allocated_queue_node\">blk_init_allocated_queue_node</a>);", 
"", 
"int <a class=\"id\" href=\"#blk_get_queue\">blk_get_queue</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#QUEUE_FLAG_DEAD\">QUEUE_FLAG_DEAD</a>, &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_flags\">queue_flags</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kobject_get\">kobject_get</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#blk_free_request\">blk_free_request</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_ELVPRIV\">REQ_ELVPRIV</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#elv_put_request\">elv_put_request</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mempool_free\">mempool_free</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#rq\">rq</a>.<a class=\"id\" href=\"#rq_pool\">rq_pool</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#request\">request</a> *", 
"<a class=\"id\" href=\"#blk_alloc_request\">blk_alloc_request</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, int <a class=\"id\" href=\"#flags\">flags</a>, int <a class=\"id\" href=\"#priv\">priv</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#mempool_alloc\">mempool_alloc</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#rq\">rq</a>.<a class=\"id\" href=\"#rq_pool\">rq_pool</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rq\">rq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_rq_init\">blk_rq_init</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#rq\">rq</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> = <a class=\"id\" href=\"#flags\">flags</a> | <a class=\"id\" href=\"#REQ_ALLOCED\">REQ_ALLOCED</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#priv\">priv</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#elv_set_request\">elv_set_request</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mempool_free\">mempool_free</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#rq\">rq</a>.<a class=\"id\" href=\"#rq_pool\">rq_pool</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> |= <a class=\"id\" href=\"#REQ_ELVPRIV\">REQ_ELVPRIV</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rq\">rq</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ioc_batching returns true if the ioc is a valid batching request and</span>", 
"<span class=\"comment\"> * should be given priority access to a request.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ioc_batching\">ioc_batching</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#io_context\">io_context</a> *<a class=\"id\" href=\"#ioc\">ioc</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ioc\">ioc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Make sure the process is able to allocate at least 1 request</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * even if the batch times out, otherwise we could theoretically</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * lose wakeups.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ioc\">ioc</a>-><a class=\"id\" href=\"#nr_batch_requests\">nr_batch_requests</a> == <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#nr_batching\">nr_batching</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#ioc\">ioc</a>-><a class=\"id\" href=\"#nr_batch_requests\">nr_batch_requests</a> &gt; 0", 
"<span class=\"ts\"/><span class=\"ts\"/>&& <a class=\"id\" href=\"#time_before\">time_before</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#ioc\">ioc</a>-><a class=\"id\" href=\"#last_waited\">last_waited</a> + <a class=\"id\" href=\"#BLK_BATCH_TIME\">BLK_BATCH_TIME</a>));", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ioc_set_batching sets ioc to be a new \"batcher\" if it is not one. This</span>", 
"<span class=\"comment\"> * will cause the process to be a \"batcher\" on all queues in the system. This</span>", 
"<span class=\"comment\"> * is the behaviour we want though - once it gets a wakeup it should be given</span>", 
"<span class=\"comment\"> * a nice run.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ioc_set_batching\">ioc_set_batching</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#io_context\">io_context</a> *<a class=\"id\" href=\"#ioc\">ioc</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ioc\">ioc</a> || <a class=\"id\" href=\"#ioc_batching\">ioc_batching</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#ioc\">ioc</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ioc\">ioc</a>-><a class=\"id\" href=\"#nr_batch_requests\">nr_batch_requests</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#nr_batching\">nr_batching</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ioc\">ioc</a>-><a class=\"id\" href=\"#last_waited\">last_waited</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__freed_request\">__freed_request</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, int <a class=\"id\" href=\"#sync\">sync</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_list\">request_list</a> *<a class=\"id\" href=\"#rl\">rl</a> = &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#rq\">rq</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rl\">rl</a>-><a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#sync\">sync</a>] &lt; <a class=\"id\" href=\"#queue_congestion_off_threshold\">queue_congestion_off_threshold</a>(<a class=\"id\" href=\"#q\">q</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_clear_queue_congested\">blk_clear_queue_congested</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#sync\">sync</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rl\">rl</a>-><a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#sync\">sync</a>] + 1 <= <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#nr_requests\">nr_requests</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#waitqueue_active\">waitqueue_active</a>(&amp;<a class=\"id\" href=\"#rl\">rl</a>-><a class=\"id\" href=\"#wait\">wait</a>[<a class=\"id\" href=\"#sync\">sync</a>]))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up\">wake_up</a>(&amp;<a class=\"id\" href=\"#rl\">rl</a>-><a class=\"id\" href=\"#wait\">wait</a>[<a class=\"id\" href=\"#sync\">sync</a>]);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_clear_queue_full\">blk_clear_queue_full</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#sync\">sync</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A request has just been released.  Account for it, update the full and</span>", 
"<span class=\"comment\"> * congestion status, wake up any waiters.   Called under q-&gt;queue_lock.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#freed_request\">freed_request</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, int <a class=\"id\" href=\"#sync\">sync</a>, int <a class=\"id\" href=\"#priv\">priv</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_list\">request_list</a> *<a class=\"id\" href=\"#rl\">rl</a> = &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#rq\">rq</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rl\">rl</a>-><a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#sync\">sync</a>]--;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#priv\">priv</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rl\">rl</a>-><a class=\"id\" href=\"#elvpriv\">elvpriv</a>--;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__freed_request\">__freed_request</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#sync\">sync</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#rl\">rl</a>-><a class=\"id\" href=\"#starved\">starved</a>[<a class=\"id\" href=\"#sync\">sync</a> ^ 1]))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__freed_request\">__freed_request</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#sync\">sync</a> ^ 1);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Get a free request, queue_lock must be held.</span>", 
"<span class=\"comment\"> * Returns NULL on failure, with queue_lock held.</span>", 
"<span class=\"comment\"> * Returns !NULL on success, with queue_lock *not held*.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#get_request\">get_request</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, int <a class=\"id\" href=\"#rw_flags\">rw_flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_list\">request_list</a> *<a class=\"id\" href=\"#rl\">rl</a> = &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#rq\">rq</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#io_context\">io_context</a> *<a class=\"id\" href=\"#ioc\">ioc</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_sync\">is_sync</a> = <a class=\"id\" href=\"#rw_is_sync\">rw_is_sync</a>(<a class=\"id\" href=\"#rw_flags\">rw_flags</a>) != 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#may_queue\">may_queue</a>, <a class=\"id\" href=\"#priv\">priv</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#may_queue\">may_queue</a> = <a class=\"id\" href=\"#elv_may_queue\">elv_may_queue</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#rw_flags\">rw_flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#may_queue\">may_queue</a> == <a class=\"id\" href=\"#ELV_MQUEUE_NO\">ELV_MQUEUE_NO</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#rq_starved\">rq_starved</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rl\">rl</a>-><a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#is_sync\">is_sync</a>]+1 >= <a class=\"id\" href=\"#queue_congestion_on_threshold\">queue_congestion_on_threshold</a>(<a class=\"id\" href=\"#q\">q</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rl\">rl</a>-><a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#is_sync\">is_sync</a>]+1 >= <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#nr_requests\">nr_requests</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ioc\">ioc</a> = <a class=\"id\" href=\"#current_io_context\">current_io_context</a>(<a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>, <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * The queue will fill after this allocation, so set</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * it as full, and mark this process as \"batching\".</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * This process will be allowed to complete a batch of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * requests, others will be blocked.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#blk_queue_full\">blk_queue_full</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#is_sync\">is_sync</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ioc_set_batching\">ioc_set_batching</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#ioc\">ioc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_set_queue_full\">blk_set_queue_full</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#is_sync\">is_sync</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#may_queue\">may_queue</a> != <a class=\"id\" href=\"#ELV_MQUEUE_MUST\">ELV_MQUEUE_MUST</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&& !<a class=\"id\" href=\"#ioc_batching\">ioc_batching</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#ioc\">ioc</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * The queue is full and the allocating</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * process is not a \"batcher\", and not</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * exempted by the IO scheduler</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_set_queue_congested\">blk_set_queue_congested</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#is_sync\">is_sync</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Only allow batching queuers to allocate up to 50% over the defined</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * limit of requests, otherwise we could have thousands of requests</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * allocated with any setting of -&gt;nr_requests</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rl\">rl</a>-><a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#is_sync\">is_sync</a>] >= (3 * <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#nr_requests\">nr_requests</a> / 2))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rl\">rl</a>-><a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#is_sync\">is_sync</a>]++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rl\">rl</a>-><a class=\"id\" href=\"#starved\">starved</a>[<a class=\"id\" href=\"#is_sync\">is_sync</a>] = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#priv\">priv</a> = !<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#QUEUE_FLAG_ELVSWITCH\">QUEUE_FLAG_ELVSWITCH</a>, &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_flags\">queue_flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#priv\">priv</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rl\">rl</a>-><a class=\"id\" href=\"#elvpriv\">elvpriv</a>++;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#blk_queue_io_stat\">blk_queue_io_stat</a>(<a class=\"id\" href=\"#q\">q</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rw_flags\">rw_flags</a> |= <a class=\"id\" href=\"#REQ_IO_STAT\">REQ_IO_STAT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#blk_alloc_request\">blk_alloc_request</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#rw_flags\">rw_flags</a>, <a class=\"id\" href=\"#priv\">priv</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#rq\">rq</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Allocation failed presumably due to memory. Undo anything</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we might have messed up.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Allocating task should really be put onto the front of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * wait queue, but this is pretty rare.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#freed_request\">freed_request</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#is_sync\">is_sync</a>, <a class=\"id\" href=\"#priv\">priv</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * in the very unlikely event that allocation failed and no</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * requests for this direction was pending, mark us starved</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * so that freeing of a request in the other direction will</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * notice us. another possible fix would be to split the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * rq mempool into READ and WRITE</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<a class=\"id\" href=\"#rq_starved\">rq_starved</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#rl\">rl</a>-><a class=\"id\" href=\"#count\">count</a>[<a class=\"id\" href=\"#is_sync\">is_sync</a>] == 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rl\">rl</a>-><a class=\"id\" href=\"#starved\">starved</a>[<a class=\"id\" href=\"#is_sync\">is_sync</a>] = 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ioc may be NULL here, and ioc_batching will be false. That's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * OK, if the queue is under the request limit then requests need</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not count toward the nr_batch_requests limit. There will always</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be some limit enforced by BLK_BATCH_TIME.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ioc_batching\">ioc_batching</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#ioc\">ioc</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ioc\">ioc</a>-><a class=\"id\" href=\"#nr_batch_requests\">nr_batch_requests</a>--;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_block_getrq\">trace_block_getrq</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#rw_flags\">rw_flags</a> &amp; 1);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rq\">rq</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * No available requests for this queue, unplug the device and wait for some</span>", 
"<span class=\"comment\"> * requests to become available.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called with q-&gt;queue_lock held, and returns with it unlocked.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#get_request_wait\">get_request_wait</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, int <a class=\"id\" href=\"#rw_flags\">rw_flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>)", 
"{", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_sync\">is_sync</a> = <a class=\"id\" href=\"#rw_is_sync\">rw_is_sync</a>(<a class=\"id\" href=\"#rw_flags\">rw_flags</a>) != 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#get_request\">get_request</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#rw_flags\">rw_flags</a>, <a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#GFP_NOIO\">GFP_NOIO</a>);", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#rq\">rq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DEFINE_WAIT\">DEFINE_WAIT</a>(<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#io_context\">io_context</a> *<a class=\"id\" href=\"#ioc\">ioc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#request_list\">request_list</a> *<a class=\"id\" href=\"#rl\">rl</a> = &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#rq\">rq</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prepare_to_wait_exclusive\">prepare_to_wait_exclusive</a>(&amp;<a class=\"id\" href=\"#rl\">rl</a>-><a class=\"id\" href=\"#wait\">wait</a>[<a class=\"id\" href=\"#is_sync\">is_sync</a>], &amp;<a class=\"id\" href=\"#wait\">wait</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_block_sleeprq\">trace_block_sleeprq</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#rw_flags\">rw_flags</a> &amp; 1);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__generic_unplug_device\">__generic_unplug_device</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#io_schedule\">io_schedule</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * After sleeping, we become a \"batching\" process and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * will be able to allocate at least one request, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * up to a big batch of them for a small period time.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * See ioc_batching, ioc_set_batching</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ioc\">ioc</a> = <a class=\"id\" href=\"#current_io_context\">current_io_context</a>(<a class=\"id\" href=\"#GFP_NOIO\">GFP_NOIO</a>, <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ioc_set_batching\">ioc_set_batching</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#ioc\">ioc</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#finish_wait\">finish_wait</a>(&amp;<a class=\"id\" href=\"#rl\">rl</a>-><a class=\"id\" href=\"#wait\">wait</a>[<a class=\"id\" href=\"#is_sync\">is_sync</a>], &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#get_request\">get_request</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#rw_flags\">rw_flags</a>, <a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#GFP_NOIO\">GFP_NOIO</a>);", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rq\">rq</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#blk_get_request\">blk_get_request</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, int <a class=\"id\" href=\"#rw\">rw</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#rw\">rw</a> != <a class=\"id\" href=\"#READ\">READ</a> && <a class=\"id\" href=\"#rw\">rw</a> != <a class=\"id\" href=\"#WRITE\">WRITE</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#__GFP_WAIT\">__GFP_WAIT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#get_request_wait\">get_request_wait</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#rw\">rw</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#get_request\">get_request</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#rw\">rw</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#rq\">rq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* q-&gt;queue_lock is unlocked at this point */</span>", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rq\">rq</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_get_request\">blk_get_request</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_make_request - given a bio, allocate a corresponding struct request.</span>", 
"<span class=\"comment\"> * @q: target request queue</span>", 
"<span class=\"comment\"> * @bio:  The bio describing the memory mappings that will be submitted for IO.</span>", 
"<span class=\"comment\"> *        It may be a chained-bio properly constructed by block/bio layer.</span>", 
"<span class=\"comment\"> * @gfp_mask: gfp flags to be used for memory allocation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * blk_make_request is the parallel of generic_make_request for BLOCK_PC</span>", 
"<span class=\"comment\"> * type commands. Where the struct request needs to be farther initialized by</span>", 
"<span class=\"comment\"> * the caller. It is passed a &amp;struct bio, which describes the memory info of</span>", 
"<span class=\"comment\"> * the I/O transfer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The caller of blk_make_request must make sure that bi_io_vec</span>", 
"<span class=\"comment\"> * are set to describe the memory buffers. That bio_data_dir() will return</span>", 
"<span class=\"comment\"> * the needed direction of the request. (And all bio's in the passed bio-chain</span>", 
"<span class=\"comment\"> * are properly set accordingly)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If called under none-sleepable conditions, mapped bio buffers must not</span>", 
"<span class=\"comment\"> * need bouncing, by calling the appropriate masked or flagged allocator,</span>", 
"<span class=\"comment\"> * suitable for the target device. Otherwise the call to blk_queue_bounce will</span>", 
"<span class=\"comment\"> * BUG.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * WARNING: When allocating/cloning a bio-chain, careful consideration should be</span>", 
"<span class=\"comment\"> * given to how you allocate bios. In particular, you cannot use __GFP_WAIT for</span>", 
"<span class=\"comment\"> * anything but the first bio in the chain. Otherwise you risk waiting for IO</span>", 
"<span class=\"comment\"> * completion of a bio that hasn't been submitted yet, thus resulting in a</span>", 
"<span class=\"comment\"> * deadlock. Alternatively bios should be allocated using bio_kmalloc() instead</span>", 
"<span class=\"comment\"> * of bio_alloc(), as that avoids the mempool deadlock.</span>", 
"<span class=\"comment\"> * If possible a big IO should be split into smaller parts when allocation</span>", 
"<span class=\"comment\"> * fails. Partial allocation should not be an error, or you risk a live-lock.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#blk_make_request\">blk_make_request</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#blk_get_request\">blk_get_request</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#bio_data_dir\">bio_data_dir</a>(<a class=\"id\" href=\"#bio\">bio</a>), <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#rq\">rq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_bio\">for_each_bio</a>(<a class=\"id\" href=\"#bio\">bio</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bounce_bio\">bounce_bio</a> = <a class=\"id\" href=\"#bio\">bio</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_bounce\">blk_queue_bounce</a>(<a class=\"id\" href=\"#q\">q</a>, &amp;<a class=\"id\" href=\"#bounce_bio\">bounce_bio</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#blk_rq_append_bio\">blk_rq_append_bio</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#bounce_bio\">bounce_bio</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_put_request\">blk_put_request</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rq\">rq</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_make_request\">blk_make_request</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_requeue_request - put a request back on queue</span>", 
"<span class=\"comment\"> * @q:<span class=\"ts\"/><span class=\"ts\"/>request queue where request should be inserted</span>", 
"<span class=\"comment\"> * @rq:<span class=\"ts\"/><span class=\"ts\"/>request to be inserted</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *    Drivers often keep queueing requests until the hardware cannot accept</span>", 
"<span class=\"comment\"> *    more, when that condition happens we need to put the request back</span>", 
"<span class=\"comment\"> *    on the queue. Must be called with queue lock held.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#blk_requeue_request\">blk_requeue_request</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_delete_timer\">blk_delete_timer</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_clear_rq_complete\">blk_clear_rq_complete</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_block_rq_requeue\">trace_block_rq_requeue</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#rq\">rq</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#blk_rq_tagged\">blk_rq_tagged</a>(<a class=\"id\" href=\"#rq\">rq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_end_tag\">blk_queue_end_tag</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#rq\">rq</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#blk_queued_rq\">blk_queued_rq</a>(<a class=\"id\" href=\"#rq\">rq</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elv_requeue_request\">elv_requeue_request</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#rq\">rq</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_requeue_request\">blk_requeue_request</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_insert_request - insert a special request into a request queue</span>", 
"<span class=\"comment\"> * @q:<span class=\"ts\"/><span class=\"ts\"/>request queue where request should be inserted</span>", 
"<span class=\"comment\"> * @rq:<span class=\"ts\"/><span class=\"ts\"/>request to be inserted</span>", 
"<span class=\"comment\"> * @at_head:<span class=\"ts\"/>insert request at head or tail of queue</span>", 
"<span class=\"comment\"> * @data:<span class=\"ts\"/>private data</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *    Many block devices need to execute commands asynchronously, so they don't</span>", 
"<span class=\"comment\"> *    block the whole kernel from preemption during request execution.  This is</span>", 
"<span class=\"comment\"> *    accomplished normally by inserting aritficial requests tagged as</span>", 
"<span class=\"comment\"> *    REQ_TYPE_SPECIAL in to the corresponding request queue, and letting them</span>", 
"<span class=\"comment\"> *    be scheduled for actual execution by the request queue.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *    We have the option of inserting the head or the tail of the queue.</span>", 
"<span class=\"comment\"> *    Typically we use the tail for new ioctls and so forth.  We use the head</span>", 
"<span class=\"comment\"> *    of the queue for things like a QUEUE_FULL message from a device, or a</span>", 
"<span class=\"comment\"> *    host that is unable to accept a particular command.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#blk_insert_request\">blk_insert_request</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#at_head\">at_head</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#where\">where</a> = <a class=\"id\" href=\"#at_head\">at_head</a> ? <a class=\"id\" href=\"#ELEVATOR_INSERT_FRONT\">ELEVATOR_INSERT_FRONT</a> : <a class=\"id\" href=\"#ELEVATOR_INSERT_BACK\">ELEVATOR_INSERT_BACK</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * tell I/O scheduler that this isn't a regular read/write (ie it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * must not attempt merges on this) and that it acts as a soft</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * barrier</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_type\">cmd_type</a> = <a class=\"id\" href=\"#REQ_TYPE_SPECIAL\">REQ_TYPE_SPECIAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#special\">special</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If command is tagged, release the tag</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#blk_rq_tagged\">blk_rq_tagged</a>(<a class=\"id\" href=\"#rq\">rq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_end_tag\">blk_queue_end_tag</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#rq\">rq</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drive_stat_acct\">drive_stat_acct</a>(<a class=\"id\" href=\"#rq\">rq</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__elv_add_request\">__elv_add_request</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#where\">where</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__blk_run_queue\">__blk_run_queue</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_insert_request\">blk_insert_request</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * add-request adds a request to the linked list.</span>", 
"<span class=\"comment\"> * queue lock is held and interrupts disabled, as we muck with the</span>", 
"<span class=\"comment\"> * request queue list.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#add_request\">add_request</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#req\">req</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drive_stat_acct\">drive_stat_acct</a>(<a class=\"id\" href=\"#req\">req</a>, 1);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * elevator indicated where it wants this request to be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * inserted at elevator_merge time</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__elv_add_request\">__elv_add_request</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#req\">req</a>, <a class=\"id\" href=\"#ELEVATOR_INSERT_SORT\">ELEVATOR_INSERT_SORT</a>, 0);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#part_round_stats_single\">part_round_stats_single</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, struct <a class=\"id\" href=\"#hd_struct\">hd_struct</a> *<a class=\"id\" href=\"#part\">part</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long <a class=\"id\" href=\"#now\">now</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#now\">now</a> == <a class=\"id\" href=\"#part\">part</a>-><a class=\"id\" href=\"#stamp\">stamp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#part_in_flight\">part_in_flight</a>(<a class=\"id\" href=\"#part\">part</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__part_stat_add\">__part_stat_add</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#part\">part</a>, <a class=\"id\" href=\"#time_in_queue\">time_in_queue</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#part_in_flight\">part_in_flight</a>(<a class=\"id\" href=\"#part\">part</a>) * (<a class=\"id\" href=\"#now\">now</a> - <a class=\"id\" href=\"#part\">part</a>-><a class=\"id\" href=\"#stamp\">stamp</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__part_stat_add\">__part_stat_add</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#part\">part</a>, <a class=\"id\" href=\"#io_ticks\">io_ticks</a>, (<a class=\"id\" href=\"#now\">now</a> - <a class=\"id\" href=\"#part\">part</a>-><a class=\"id\" href=\"#stamp\">stamp</a>));", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#part\">part</a>-><a class=\"id\" href=\"#stamp\">stamp</a> = <a class=\"id\" href=\"#now\">now</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * part_round_stats() - Round off the performance stats on a struct disk_stats.</span>", 
"<span class=\"comment\"> * @cpu: cpu number for stats access</span>", 
"<span class=\"comment\"> * @part: target partition</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The average IO queue length and utilisation statistics are maintained</span>", 
"<span class=\"comment\"> * by observing the current state of the queue length and the amount of</span>", 
"<span class=\"comment\"> * time it has been in this state for.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Normally, that accounting is done on IO completion, but that can result</span>", 
"<span class=\"comment\"> * in more than a second's worth of IO being accounted for within any one</span>", 
"<span class=\"comment\"> * second, leading to &gt;100% utilisation.  To deal with that, we call this</span>", 
"<span class=\"comment\"> * function to do a round-off before returning the results when reading</span>", 
"<span class=\"comment\"> * /proc/diskstats.  This accounts immediately for all queue usage up to</span>", 
"<span class=\"comment\"> * the current jiffies and restarts the counters again.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#part_round_stats\">part_round_stats</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, struct <a class=\"id\" href=\"#hd_struct\">hd_struct</a> *<a class=\"id\" href=\"#part\">part</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#part\">part</a>-><a class=\"id\" href=\"#partno\">partno</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#part_round_stats_single\">part_round_stats_single</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, &amp;<a class=\"id\" href=\"#part_to_disk\">part_to_disk</a>(<a class=\"id\" href=\"#part\">part</a>)-><a class=\"id\" href=\"#part0\">part0</a>, <a class=\"id\" href=\"#now\">now</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#part_round_stats_single\">part_round_stats_single</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#part\">part</a>, <a class=\"id\" href=\"#now\">now</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#part_round_stats\">part_round_stats</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * queue lock must be held</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__blk_put_request\">__blk_put_request</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#req\">req</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#q\">q</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(--<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ref_count\">ref_count</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elv_completed_request\">elv_completed_request</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#req\">req</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* this is a bio leak */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#bio\">bio</a> != <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Request may not have originated from ll_rw_blk. if not,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it didn't come out of our reserved rq pools</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_ALLOCED\">REQ_ALLOCED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#is_sync\">is_sync</a> = <a class=\"id\" href=\"#rq_is_sync\">rq_is_sync</a>(<a class=\"id\" href=\"#req\">req</a>) != 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#priv\">priv</a> = <a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_ELVPRIV\">REQ_ELVPRIV</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#queuelist\">queuelist</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#hlist_unhashed\">hlist_unhashed</a>(&amp;<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#hash\">hash</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_free_request\">blk_free_request</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#req\">req</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#freed_request\">freed_request</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#is_sync\">is_sync</a>, <a class=\"id\" href=\"#priv\">priv</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__blk_put_request\">__blk_put_request</a>);", 
"", 
"void <a class=\"id\" href=\"#blk_put_request\">blk_put_request</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#req\">req</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#q\">q</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__blk_put_request\">__blk_put_request</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#req\">req</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_put_request\">blk_put_request</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_add_request_payload - add a payload to a request</span>", 
"<span class=\"comment\"> * @rq: request to update</span>", 
"<span class=\"comment\"> * @page: page backing the payload</span>", 
"<span class=\"comment\"> * @len: length of the payload.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This allows to later add a payload to an already submitted request by</span>", 
"<span class=\"comment\"> * a block driver.  The driver needs to take care of freeing the payload</span>", 
"<span class=\"comment\"> * itself.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that this is a quite horrible hack and nothing but handling of</span>", 
"<span class=\"comment\"> * discard requests should ever use it.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#blk_add_request_payload\">blk_add_request_payload</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#bio\">bio</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_io_vec\">bi_io_vec</a>-><a class=\"id\" href=\"#bv_page\">bv_page</a> = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_io_vec\">bi_io_vec</a>-><a class=\"id\" href=\"#bv_offset\">bv_offset</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_io_vec\">bi_io_vec</a>-><a class=\"id\" href=\"#bv_len\">bv_len</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_size\">bi_size</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_vcnt\">bi_vcnt</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_phys_segments\">bi_phys_segments</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#__data_len\">__data_len</a> = <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#resid_len\">resid_len</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#nr_phys_segments\">nr_phys_segments</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#bio_data\">bio_data</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#blk_add_request_payload\">blk_add_request_payload</a>);", 
"", 
"void <a class=\"id\" href=\"#init_request_from_bio\">init_request_from_bio</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#req\">req</a>, struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_comp_cpu\">bi_comp_cpu</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd_type\">cmd_type</a> = <a class=\"id\" href=\"#REQ_TYPE_FS\">REQ_TYPE_FS</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> |= <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_rw\">bi_rw</a> &amp; <a class=\"id\" href=\"#REQ_COMMON_MASK\">REQ_COMMON_MASK</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_rw\">bi_rw</a> &amp; <a class=\"id\" href=\"#REQ_RAHEAD\">REQ_RAHEAD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> |= <a class=\"id\" href=\"#REQ_FAILFAST_MASK\">REQ_FAILFAST_MASK</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#errors\">errors</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#__sector\">__sector</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_sector\">bi_sector</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ioprio\">ioprio</a> = <a class=\"id\" href=\"#bio_prio\">bio_prio</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_rq_bio_prep\">blk_rq_bio_prep</a>(<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#req\">req</a>, <a class=\"id\" href=\"#bio\">bio</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Only disabling plugging for non-rotational devices if it does tagging</span>", 
"<span class=\"comment\"> * as well, otherwise we do need the proper merging</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#queue_should_plug\">queue_should_plug</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>return !(<a class=\"id\" href=\"#blk_queue_nonrot\">blk_queue_nonrot</a>(<a class=\"id\" href=\"#q\">q</a>) && <a class=\"id\" href=\"#blk_queue_tagged\">blk_queue_tagged</a>(<a class=\"id\" href=\"#q\">q</a>));", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__make_request\">__make_request</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#req\">req</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#el_ret\">el_ret</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#bytes\">bytes</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_size\">bi_size</a>;", 
"<span class=\"ts\"/>const unsigned short <a class=\"id\" href=\"#prio\">prio</a> = <a class=\"id\" href=\"#bio_prio\">bio_prio</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#sync\">sync</a> = !!(<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_rw\">bi_rw</a> &amp; <a class=\"id\" href=\"#REQ_SYNC\">REQ_SYNC</a>);", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#unplug\">unplug</a> = !!(<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_rw\">bi_rw</a> &amp; <a class=\"id\" href=\"#REQ_UNPLUG\">REQ_UNPLUG</a>);", 
"<span class=\"ts\"/>const unsigned long <a class=\"id\" href=\"#ff\">ff</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_rw\">bi_rw</a> &amp; <a class=\"id\" href=\"#REQ_FAILFAST_MASK\">REQ_FAILFAST_MASK</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rw_flags\">rw_flags</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_rw\">bi_rw</a> &amp; <a class=\"id\" href=\"#REQ_HARDBARRIER\">REQ_HARDBARRIER</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#next_ordered\">next_ordered</a> == <a class=\"id\" href=\"#QUEUE_ORDERED_NONE\">QUEUE_ORDERED_NONE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio_endio\">bio_endio</a>(<a class=\"id\" href=\"#bio\">bio</a>, -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * low level driver can indicate that it wants pages above a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * certain limit bounced to low memory (ie for highmem, or even</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ISA dma in theory)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_bounce\">blk_queue_bounce</a>(<a class=\"id\" href=\"#q\">q</a>, &amp;<a class=\"id\" href=\"#bio\">bio</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>((<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_rw\">bi_rw</a> &amp; <a class=\"id\" href=\"#REQ_HARDBARRIER\">REQ_HARDBARRIER</a>)) || <a class=\"id\" href=\"#elv_queue_empty\">elv_queue_empty</a>(<a class=\"id\" href=\"#q\">q</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#get_rq\">get_rq</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#el_ret\">el_ret</a> = <a class=\"id\" href=\"#elv_merge\">elv_merge</a>(<a class=\"id\" href=\"#q\">q</a>, &amp;<a class=\"id\" href=\"#req\">req</a>, <a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#el_ret\">el_ret</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ELEVATOR_BACK_MERGE\">ELEVATOR_BACK_MERGE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#rq_mergeable\">rq_mergeable</a>(<a class=\"id\" href=\"#req\">req</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ll_back_merge_fn\">ll_back_merge_fn</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#req\">req</a>, <a class=\"id\" href=\"#bio\">bio</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_block_bio_backmerge\">trace_block_bio_backmerge</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#bio\">bio</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_FAILFAST_MASK\">REQ_FAILFAST_MASK</a>) != <a class=\"id\" href=\"#ff\">ff</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_rq_set_mixed_merge\">blk_rq_set_mixed_merge</a>(<a class=\"id\" href=\"#req\">req</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#biotail\">biotail</a>-><a class=\"id\" href=\"#bi_next\">bi_next</a> = <a class=\"id\" href=\"#bio\">bio</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#biotail\">biotail</a> = <a class=\"id\" href=\"#bio\">bio</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#__data_len\">__data_len</a> += <a class=\"id\" href=\"#bytes\">bytes</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ioprio\">ioprio</a> = <a class=\"id\" href=\"#ioprio_best\">ioprio_best</a>(<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ioprio\">ioprio</a>, <a class=\"id\" href=\"#prio\">prio</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#blk_rq_cpu_valid\">blk_rq_cpu_valid</a>(<a class=\"id\" href=\"#req\">req</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_comp_cpu\">bi_comp_cpu</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive_stat_acct\">drive_stat_acct</a>(<a class=\"id\" href=\"#req\">req</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#elv_bio_merged\">elv_bio_merged</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#req\">req</a>, <a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#attempt_back_merge\">attempt_back_merge</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#req\">req</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#elv_merged_request\">elv_merged_request</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#req\">req</a>, <a class=\"id\" href=\"#el_ret\">el_ret</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ELEVATOR_FRONT_MERGE\">ELEVATOR_FRONT_MERGE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#rq_mergeable\">rq_mergeable</a>(<a class=\"id\" href=\"#req\">req</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ll_front_merge_fn\">ll_front_merge_fn</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#req\">req</a>, <a class=\"id\" href=\"#bio\">bio</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_block_bio_frontmerge\">trace_block_bio_frontmerge</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#bio\">bio</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_FAILFAST_MASK\">REQ_FAILFAST_MASK</a>) != <a class=\"id\" href=\"#ff\">ff</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_rq_set_mixed_merge\">blk_rq_set_mixed_merge</a>(<a class=\"id\" href=\"#req\">req</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &= ~<a class=\"id\" href=\"#REQ_FAILFAST_MASK\">REQ_FAILFAST_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> |= <a class=\"id\" href=\"#ff\">ff</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_next\">bi_next</a> = <a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#bio\">bio</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#bio\">bio</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * may not be valid. if the low level driver said</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it didn't need a bounce buffer then it better</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * not touch req-&gt;buffer either...</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#bio_data\">bio_data</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#__sector\">__sector</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_sector\">bi_sector</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#__data_len\">__data_len</a> += <a class=\"id\" href=\"#bytes\">bytes</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ioprio\">ioprio</a> = <a class=\"id\" href=\"#ioprio_best\">ioprio_best</a>(<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ioprio\">ioprio</a>, <a class=\"id\" href=\"#prio\">prio</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#blk_rq_cpu_valid\">blk_rq_cpu_valid</a>(<a class=\"id\" href=\"#req\">req</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_comp_cpu\">bi_comp_cpu</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive_stat_acct\">drive_stat_acct</a>(<a class=\"id\" href=\"#req\">req</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#elv_bio_merged\">elv_bio_merged</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#req\">req</a>, <a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#attempt_front_merge\">attempt_front_merge</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#req\">req</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#elv_merged_request\">elv_merged_request</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#req\">req</a>, <a class=\"id\" href=\"#el_ret\">el_ret</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* ELV_NO_MERGE: elevator says don't/can't merge. */</span>", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#get_rq\">get_rq</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This sync check and mask will be re-done in init_request_from_bio(),</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * but we need to set it earlier to expose the sync flag to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * rq allocator and io schedulers.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rw_flags\">rw_flags</a> = <a class=\"id\" href=\"#bio_data_dir\">bio_data_dir</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sync\">sync</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rw_flags\">rw_flags</a> |= <a class=\"id\" href=\"#REQ_SYNC\">REQ_SYNC</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Grab a free request. This is might sleep but can not fail.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Returns with the queue unlocked.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a> = <a class=\"id\" href=\"#get_request_wait\">get_request_wait</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#rw_flags\">rw_flags</a>, <a class=\"id\" href=\"#bio\">bio</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * After dropping the lock and possibly sleeping here, our request</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * may now be mergeable after it had proven unmergeable (above).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We don't worry about that case for efficiency. It won't happen</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * often, and the elevators are able to handle it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_request_from_bio\">init_request_from_bio</a>(<a class=\"id\" href=\"#req\">req</a>, <a class=\"id\" href=\"#bio\">bio</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#QUEUE_FLAG_SAME_COMP\">QUEUE_FLAG_SAME_COMP</a>, &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_flags\">queue_flags</a>) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#bio_flagged\">bio_flagged</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#BIO_CPU_AFFINE\">BIO_CPU_AFFINE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#blk_cpu_to_group\">blk_cpu_to_group</a>(<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#queue_should_plug\">queue_should_plug</a>(<a class=\"id\" href=\"#q\">q</a>) && <a class=\"id\" href=\"#elv_queue_empty\">elv_queue_empty</a>(<a class=\"id\" href=\"#q\">q</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_plug_device\">blk_plug_device</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#add_request\">add_request</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#req\">req</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unplug\">unplug</a> || !<a class=\"id\" href=\"#queue_should_plug\">queue_should_plug</a>(<a class=\"id\" href=\"#q\">q</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__generic_unplug_device\">__generic_unplug_device</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If bio-&gt;bi_dev is a partition, remap the location</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#blk_partition_remap\">blk_partition_remap</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_bdev\">bi_bdev</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bio_sectors\">bio_sectors</a>(<a class=\"id\" href=\"#bio\">bio</a>) && <a class=\"id\" href=\"#bdev\">bdev</a> != <a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_contains\">bd_contains</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hd_struct\">hd_struct</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_part\">bd_part</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_sector\">bi_sector</a> += <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#start_sect\">start_sect</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_bdev\">bi_bdev</a> = <a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_contains\">bd_contains</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_block_remap\">trace_block_remap</a>(<a class=\"id\" href=\"#bdev_get_queue\">bdev_get_queue</a>(<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_bdev\">bi_bdev</a>), <a class=\"id\" href=\"#bio\">bio</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_dev\">bd_dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_sector\">bi_sector</a> - <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#start_sect\">start_sect</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#handle_bad_sector\">handle_bad_sector</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#b\">b</a>[<a class=\"id\" href=\"#BDEVNAME_SIZE\">BDEVNAME_SIZE</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"attempt to access beyond end of device\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"%s: rw=%ld, want=%Lu, limit=%Lu\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdevname\">bdevname</a>(<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_bdev\">bi_bdev</a>, <a class=\"id\" href=\"#b\">b</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_rw\">bi_rw</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long long)<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_sector\">bi_sector</a> + <a class=\"id\" href=\"#bio_sectors\">bio_sectors</a>(<a class=\"id\" href=\"#bio\">bio</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(long long)(<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_bdev\">bi_bdev</a>-><a class=\"id\" href=\"#bd_inode\">bd_inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a> >> 9));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#BIO_EOF\">BIO_EOF</a>, &amp;<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_flags\">bi_flags</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FAIL_MAKE_REQUEST\">CONFIG_FAIL_MAKE_REQUEST</a>", 
"", 
"static <a class=\"id\" href=\"#DECLARE_FAULT_ATTR\">DECLARE_FAULT_ATTR</a>(<a class=\"id\" href=\"#fail_make_request\">fail_make_request</a>);", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#setup_fail_make_request\">setup_fail_make_request</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#setup_fault_attr\">setup_fault_attr</a>(&amp;<a class=\"id\" href=\"#fail_make_request\">fail_make_request</a>, <a class=\"id\" href=\"#str\">str</a>);", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"fail_make_request=\", <a class=\"id\" href=\"#setup_fail_make_request\">setup_fail_make_request</a>);", 
"", 
"static int <a class=\"id\" href=\"#should_fail_request\">should_fail_request</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hd_struct\">hd_struct</a> *<a class=\"id\" href=\"#part\">part</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_bdev\">bi_bdev</a>-><a class=\"id\" href=\"#bd_part\">bd_part</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#part_to_disk\">part_to_disk</a>(<a class=\"id\" href=\"#part\">part</a>)-><a class=\"id\" href=\"#part0\">part0</a>.<a class=\"id\" href=\"#make_it_fail\">make_it_fail</a> || <a class=\"id\" href=\"#part\">part</a>-><a class=\"id\" href=\"#make_it_fail\">make_it_fail</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#should_fail\">should_fail</a>(&amp;<a class=\"id\" href=\"#fail_make_request\">fail_make_request</a>, <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_size\">bi_size</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#fail_make_request_debugfs\">fail_make_request_debugfs</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#init_fault_attr_dentries\">init_fault_attr_dentries</a>(&amp;<a class=\"id\" href=\"#fail_make_request\">fail_make_request</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"fail_make_request\");", 
"}", 
"", 
"<a class=\"id\" href=\"#late_initcall\">late_initcall</a>(<a class=\"id\" href=\"#fail_make_request_debugfs\">fail_make_request_debugfs</a>);", 
"", 
"#else <span class=\"comment\">/* CONFIG_FAIL_MAKE_REQUEST */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#should_fail_request\">should_fail_request</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_FAIL_MAKE_REQUEST */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check whether this bio extends beyond the end of the device.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#bio_check_eod\">bio_check_eod</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>, unsigned int <a class=\"id\" href=\"#nr_sectors\">nr_sectors</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#maxsector\">maxsector</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#nr_sectors\">nr_sectors</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Test device or partition size, when known. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#maxsector\">maxsector</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_bdev\">bi_bdev</a>-><a class=\"id\" href=\"#bd_inode\">bd_inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a> >> 9;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#maxsector\">maxsector</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#sector\">sector</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_sector\">bi_sector</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#maxsector\">maxsector</a> &lt; <a class=\"id\" href=\"#nr_sectors\">nr_sectors</a> || <a class=\"id\" href=\"#maxsector\">maxsector</a> - <a class=\"id\" href=\"#nr_sectors\">nr_sectors</a> &lt; <a class=\"id\" href=\"#sector\">sector</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * This may well happen - the kernel calls bread()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * without checking the size of the device, e.g., when</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * mounting a device.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handle_bad_sector\">handle_bad_sector</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * generic_make_request - hand a buffer to its device driver for I/O</span>", 
"<span class=\"comment\"> * @bio:  The bio describing the location in memory and on the device.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * generic_make_request() is used to make I/O requests of block</span>", 
"<span class=\"comment\"> * devices. It is passed a &amp;struct bio, which describes the I/O that needs</span>", 
"<span class=\"comment\"> * to be done.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * generic_make_request() does not return any status.  The</span>", 
"<span class=\"comment\"> * success/failure status of the request, along with notification of</span>", 
"<span class=\"comment\"> * completion, is delivered asynchronously through the bio-&gt;bi_end_io</span>", 
"<span class=\"comment\"> * function described (one day) else where.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The caller of generic_make_request must make sure that bi_io_vec</span>", 
"<span class=\"comment\"> * are set to describe the memory buffer, and that bi_dev and bi_sector are</span>", 
"<span class=\"comment\"> * set to describe the device address, and the</span>", 
"<span class=\"comment\"> * bi_end_io and optionally bi_private are set to describe how</span>", 
"<span class=\"comment\"> * completion notification should be signaled.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * generic_make_request and the drivers it calls may use bi_next if this</span>", 
"<span class=\"comment\"> * bio happens to be merged with someone else, and may change bi_dev and</span>", 
"<span class=\"comment\"> * bi_sector for remaps as it sees fit.  So the values of these fields</span>", 
"<span class=\"comment\"> * should NOT be depended on after the call to generic_make_request.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__generic_make_request\">__generic_make_request</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#old_sector\">old_sector</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#nr_sectors\">nr_sectors</a> = <a class=\"id\" href=\"#bio_sectors\">bio_sectors</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#old_dev\">old_dev</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bio_check_eod\">bio_check_eod</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#nr_sectors\">nr_sectors</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#end_io\">end_io</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Resolve the mapping until finished. (drivers are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * still free to implement/resolve their own stacking</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * by explicitly returning 0)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * NOTE: we don't repeat the blk_size check for each new device.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Stacking drivers are expected to know what they are doing.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_sector\">old_sector</a> = -1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_dev\">old_dev</a> = 0;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#b\">b</a>[<a class=\"id\" href=\"#BDEVNAME_SIZE\">BDEVNAME_SIZE</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#bdev_get_queue\">bdev_get_queue</a>(<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_bdev\">bi_bdev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#q\">q</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"generic_make_request: Trying to access \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"nonexistent block-device %s (%Lu)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdevname\">bdevname</a>(<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_bdev\">bi_bdev</a>, <a class=\"id\" href=\"#b\">b</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(long long) <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_sector\">bi_sector</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#end_io\">end_io</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!(<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_rw\">bi_rw</a> &amp; <a class=\"id\" href=\"#REQ_DISCARD\">REQ_DISCARD</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#nr_sectors\">nr_sectors</a> &gt; <a class=\"id\" href=\"#queue_max_hw_sectors\">queue_max_hw_sectors</a>(<a class=\"id\" href=\"#q\">q</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"bio too big device %s (%u > %u)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#bdevname\">bdevname</a>(<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_bdev\">bi_bdev</a>, <a class=\"id\" href=\"#b\">b</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#bio_sectors\">bio_sectors</a>(<a class=\"id\" href=\"#bio\">bio</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#queue_max_hw_sectors\">queue_max_hw_sectors</a>(<a class=\"id\" href=\"#q\">q</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#end_io\">end_io</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#QUEUE_FLAG_DEAD\">QUEUE_FLAG_DEAD</a>, &amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_flags\">queue_flags</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#end_io\">end_io</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#should_fail_request\">should_fail_request</a>(<a class=\"id\" href=\"#bio\">bio</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#end_io\">end_io</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If this device has partitions, remap block n</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * of partition p to block n+start(p) of the disk.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_partition_remap\">blk_partition_remap</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bio_integrity_enabled\">bio_integrity_enabled</a>(<a class=\"id\" href=\"#bio\">bio</a>) && <a class=\"id\" href=\"#bio_integrity_prep\">bio_integrity_prep</a>(<a class=\"id\" href=\"#bio\">bio</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#end_io\">end_io</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#old_sector\">old_sector</a> != -1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_block_remap\">trace_block_remap</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#old_dev\">old_dev</a>, <a class=\"id\" href=\"#old_sector\">old_sector</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old_sector\">old_sector</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_sector\">bi_sector</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old_dev\">old_dev</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_bdev\">bi_bdev</a>-><a class=\"id\" href=\"#bd_dev\">bd_dev</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bio_check_eod\">bio_check_eod</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#nr_sectors\">nr_sectors</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#end_io\">end_io</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_rw\">bi_rw</a> &amp; <a class=\"id\" href=\"#REQ_DISCARD\">REQ_DISCARD</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (!<a class=\"id\" href=\"#blk_queue_discard\">blk_queue_discard</a>(<a class=\"id\" href=\"#q\">q</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>     ((<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_rw\">bi_rw</a> &amp; <a class=\"id\" href=\"#REQ_SECURE\">REQ_SECURE</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>      !<a class=\"id\" href=\"#blk_queue_secdiscard\">blk_queue_secdiscard</a>(<a class=\"id\" href=\"#q\">q</a>)))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#end_io\">end_io</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_block_bio_queue\">trace_block_bio_queue</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#bio\">bio</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#make_request_fn\">make_request_fn</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#ret\">ret</a>);", 
"", 
"<span class=\"ts\"/>return;", 
"", 
"<a class=\"id\" href=\"#end_io\">end_io</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio_endio\">bio_endio</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#err\">err</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We only want one -&gt;make_request_fn to be active at a time,</span>", 
"<span class=\"comment\"> * else stack usage with stacked devices could be a problem.</span>", 
"<span class=\"comment\"> * So use current-&gt;bio_list to keep a list of requests</span>", 
"<span class=\"comment\"> * submited by a make_request_fn function.</span>", 
"<span class=\"comment\"> * current-&gt;bio_list is also used as a flag to say if</span>", 
"<span class=\"comment\"> * generic_make_request is currently active in this task or not.</span>", 
"<span class=\"comment\"> * If it is NULL, then no make_request is active.  If it is non-NULL,</span>", 
"<span class=\"comment\"> * then a make_request is active, and new requests should be added</span>", 
"<span class=\"comment\"> * at the tail</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#generic_make_request\">generic_make_request</a>(struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio_list\">bio_list</a> <a class=\"id\" href=\"#bio_list_on_stack\">bio_list_on_stack</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#bio_list\">bio_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* make_request is active */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio_list_add\">bio_list_add</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#bio_list\">bio_list</a>, <a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* following loop may be a bit non-obvious, and so deserves some</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * explanation.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Before entering the loop, bio-&gt;bi_next is NULL (as all callers</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ensure that) so we have a list with a single bio.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We pretend that we have just taken it off a longer list, so</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we assign bio_list to a pointer to the bio_list_on_stack,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * thus initialising the bio_list of new bios to be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * added.  __generic_make_request may indeed add some more bios</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * through a recursive call to generic_make_request.  If it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * did, we find a non-NULL value in bio_list and re-enter the loop</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * from the top.  In this case we really did just take the bio</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of the top of the list (no pretending) and so remove it from</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * bio_list, and call into __generic_make_request again.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The loop was structured like this to make only one call to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * __generic_make_request (which is important as it is large and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * inlined) and to keep the structure simple.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_next\">bi_next</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio_list_init\">bio_list_init</a>(&amp;<a class=\"id\" href=\"#bio_list_on_stack\">bio_list_on_stack</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#bio_list\">bio_list</a> = &amp;<a class=\"id\" href=\"#bio_list_on_stack\">bio_list_on_stack</a>;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__generic_make_request\">__generic_make_request</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#bio_list_pop\">bio_list_pop</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#bio_list\">bio_list</a>);", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#bio_list\">bio_list</a> = <a class=\"id\" href=\"#NULL\">NULL</a>; <span class=\"comment\">/* deactivate */</span>", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#generic_make_request\">generic_make_request</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * submit_bio - submit a bio to the block device layer for I/O</span>", 
"<span class=\"comment\"> * @rw: whether to %READ or %WRITE, or maybe to %READA (read ahead)</span>", 
"<span class=\"comment\"> * @bio: The &amp;struct bio which describes the I/O</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * submit_bio() is very similar in purpose to generic_make_request(), and</span>", 
"<span class=\"comment\"> * uses that function to do most of the work. Both are fairly rough</span>", 
"<span class=\"comment\"> * interfaces; @bio must be presetup and ready for I/O.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#submit_bio\">submit_bio</a>(int <a class=\"id\" href=\"#rw\">rw</a>, struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#bio_sectors\">bio_sectors</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_rw\">bi_rw</a> |= <a class=\"id\" href=\"#rw\">rw</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If it's a regular read/write or a barrier with data attached,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * go through the normal accounting stuff before submission.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bio_has_data\">bio_has_data</a>(<a class=\"id\" href=\"#bio\">bio</a>) && !(<a class=\"id\" href=\"#rw\">rw</a> &amp; <a class=\"id\" href=\"#REQ_DISCARD\">REQ_DISCARD</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rw\">rw</a> &amp; <a class=\"id\" href=\"#WRITE\">WRITE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count_vm_events\">count_vm_events</a>(<a class=\"id\" href=\"#PGPGOUT\">PGPGOUT</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_io_account_read\">task_io_account_read</a>(<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_size\">bi_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count_vm_events\">count_vm_events</a>(<a class=\"id\" href=\"#PGPGIN\">PGPGIN</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#block_dump\">block_dump</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#b\">b</a>[<a class=\"id\" href=\"#BDEVNAME_SIZE\">BDEVNAME_SIZE</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"%s(%d): %s block %Lu on %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#task_pid_nr\">task_pid_nr</a>(<a class=\"id\" href=\"#current\">current</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#rw\">rw</a> &amp; <a class=\"id\" href=\"#WRITE\">WRITE</a>) ? \"WRITE\" : \"READ\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long long)<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_sector\">bi_sector</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdevname\">bdevname</a>(<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_bdev\">bi_bdev</a>, <a class=\"id\" href=\"#b\">b</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#generic_make_request\">generic_make_request</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#submit_bio\">submit_bio</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_rq_check_limits - Helper function to check a request for the queue limit</span>", 
"<span class=\"comment\"> * @q:  the queue</span>", 
"<span class=\"comment\"> * @rq: the request being checked</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *    @rq may have been made based on weaker limitations of upper-level queues</span>", 
"<span class=\"comment\"> *    in request stacking drivers, and it may violate the limitation of @q.</span>", 
"<span class=\"comment\"> *    Since the block layer and the underlying device driver trust @rq</span>", 
];
xr_frag_insert('l/0a/07cd806067f98f6f0d1b6e2beb1e997a671a83.xr', __xr_tmp);
