var __xr_tmp = [
"<span class=\"comment\">/* Key type used to cache DNS lookups made by the kernel</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * See Documentation/networking/dns_resolver.txt</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   Copyright (c) 2007 Igor Mammedov</span>", 
"<span class=\"comment\"> *   Author(s): Igor Mammedov (niallain@gmail.com)</span>", 
"<span class=\"comment\"> *              Steve French (sfrench@us.ibm.com)</span>", 
"<span class=\"comment\"> *              Wang Lei (wang840925@gmail.com)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>David Howells (dhowells@redhat.com)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   This library is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> *   it under the terms of the GNU Lesser General Public License as published</span>", 
"<span class=\"comment\"> *   by the Free Software Foundation; either version 2.1 of the License, or</span>", 
"<span class=\"comment\"> *   (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   This library is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> *   but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See</span>", 
"<span class=\"comment\"> *   the GNU Lesser General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   You should have received a copy of the GNU Lesser General Public License</span>", 
"<span class=\"comment\"> *   along with this library; if not, write to the Free Software</span>", 
"<span class=\"comment\"> *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#moduleparam\">moduleparam</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#keyctl\">keyctl</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#err\">err</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#seq_file\">seq_file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#keys\">keys</a>/<a class=\"id\" href=\"#dns_resolver\">dns_resolver</a>-<a class=\"id\" href=\"#type\">type</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#keys\">keys</a>/<a class=\"id\" href=\"#user\">user</a>-<a class=\"id\" href=\"#type\">type</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"internal.h\"", 
"", 
"<a class=\"id\" href=\"#MODULE_DESCRIPTION\">MODULE_DESCRIPTION</a>(\"DNS Resolver\");", 
"<a class=\"id\" href=\"#MODULE_AUTHOR\">MODULE_AUTHOR</a>(\"Wang Lei\");", 
"<a class=\"id\" href=\"#MODULE_LICENSE\">MODULE_LICENSE</a>(\"GPL\");", 
"", 
"unsigned <a class=\"id\" href=\"#dns_resolver_debug\">dns_resolver_debug</a>;", 
"<a class=\"id\" href=\"#module_param_named\">module_param_named</a>(<a class=\"id\" href=\"#debug\">debug</a>, <a class=\"id\" href=\"#dns_resolver_debug\">dns_resolver_debug</a>, <a class=\"id\" href=\"#uint\">uint</a>, <a class=\"id\" href=\"#S_IWUSR\">S_IWUSR</a> | <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a>);", 
"<a class=\"id\" href=\"#MODULE_PARM_DESC\">MODULE_PARM_DESC</a>(<a class=\"id\" href=\"#debug\">debug</a>, \"DNS Resolver debugging mask\");", 
"", 
"const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#dns_resolver_cache\">dns_resolver_cache</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#DNS_ERRORNO_OPTION\">DNS_ERRORNO_OPTION</a><span class=\"ts\"/>\"dnserror\"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Instantiate a user defined key for dns_resolver.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The data must be a NUL-terminated string, with the NUL char accounted in</span>", 
"<span class=\"comment\"> * datalen.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the data contains a '#' characters, then we take the clause after each</span>", 
"<span class=\"comment\"> * one to be an option of the form 'key=value'.  The actual data of interest is</span>", 
"<span class=\"comment\"> * the string leading up to the first '#'.  For instance:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *        \"ip1,ip2,...#foo=bar\"</span>", 
"<span class=\"comment\"> */</span>", 
"static int", 
"<a class=\"id\" href=\"#dns_resolver_instantiate\">dns_resolver_instantiate</a>(struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key\">key</a>, const void *<a class=\"id\" href=\"#_data\">_data</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#datalen\">datalen</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#user_key_payload\">user_key_payload</a> *<a class=\"id\" href=\"#upayload\">upayload</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#derrno\">derrno</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#result_len\">result_len</a> = 0;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#_data\">_data</a>, *<a class=\"id\" href=\"#end\">end</a>, *<a class=\"id\" href=\"#opt\">opt</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kenter\">kenter</a>(\"%%%d,%s,'%s',%zu\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#serial\">serial</a>, <a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#description\">description</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#datalen\">datalen</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#datalen\">datalen</a> <= 1 || !<a class=\"id\" href=\"#data\">data</a> || <a class=\"id\" href=\"#data\">data</a>[<a class=\"id\" href=\"#datalen\">datalen</a> - 1] != '\\0')", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#datalen\">datalen</a>--;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* deal with any options embedded in the data */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#data\">data</a> + <a class=\"id\" href=\"#datalen\">datalen</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#opt\">opt</a> = <a class=\"id\" href=\"#memchr\">memchr</a>(<a class=\"id\" href=\"#data\">data</a>, '#', <a class=\"id\" href=\"#datalen\">datalen</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#opt\">opt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* no options: the entire data is the result */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kdebug\">kdebug</a>(\"no options\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result_len\">result_len</a> = <a class=\"id\" href=\"#datalen\">datalen</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#next_opt\">next_opt</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result_len\">result_len</a> = <a class=\"id\" href=\"#opt\">opt</a> - <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#opt\">opt</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kdebug\">kdebug</a>(\"options: '%s'\", <a class=\"id\" href=\"#opt\">opt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#eq\">eq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#opt_len\">opt_len</a>, <a class=\"id\" href=\"#opt_nlen\">opt_nlen</a>, <a class=\"id\" href=\"#opt_vlen\">opt_vlen</a>, <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_opt\">next_opt</a> = <a class=\"id\" href=\"#memchr\">memchr</a>(<a class=\"id\" href=\"#opt\">opt</a>, '#', <a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#opt\">opt</a>) ?: <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#opt_len\">opt_len</a> = <a class=\"id\" href=\"#next_opt\">next_opt</a> - <a class=\"id\" href=\"#opt\">opt</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#opt_len\">opt_len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"Empty option to dns_resolver key %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#serial\">serial</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#eq\">eq</a> = <a class=\"id\" href=\"#memchr\">memchr</a>(<a class=\"id\" href=\"#opt\">opt</a>, '=', <a class=\"id\" href=\"#opt_len\">opt_len</a>) ?: <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#opt_nlen\">opt_nlen</a> = <a class=\"id\" href=\"#eq\">eq</a> - <a class=\"id\" href=\"#opt\">opt</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#eq\">eq</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#opt_vlen\">opt_vlen</a> = <a class=\"id\" href=\"#next_opt\">next_opt</a> - <a class=\"id\" href=\"#eq\">eq</a>; <span class=\"comment\">/* will be -1 if no value */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#opt_vlen\">opt_vlen</a> >= 0 ? <a class=\"id\" href=\"#opt_vlen\">opt_vlen</a> : 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kdebug\">kdebug</a>(\"option '%*.*s' val '%*.*s'\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#opt_nlen\">opt_nlen</a>, <a class=\"id\" href=\"#opt_nlen\">opt_nlen</a>, <a class=\"id\" href=\"#opt\">opt</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#eq\">eq</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* see if it's an error number representing a DNS error</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * that's to be recorded as the result in this key */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#opt_nlen\">opt_nlen</a> == sizeof(<a class=\"id\" href=\"#DNS_ERRORNO_OPTION\">DNS_ERRORNO_OPTION</a>) - 1 &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#memcmp\">memcmp</a>(<a class=\"id\" href=\"#opt\">opt</a>, <a class=\"id\" href=\"#DNS_ERRORNO_OPTION\">DNS_ERRORNO_OPTION</a>, <a class=\"id\" href=\"#opt_nlen\">opt_nlen</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kdebug\">kdebug</a>(\"dns error number option\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#opt_vlen\">opt_vlen</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_option_value\">bad_option_value</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#strict_strtoul\">strict_strtoul</a>(<a class=\"id\" href=\"#eq\">eq</a>, 10, &amp;<a class=\"id\" href=\"#derrno\">derrno</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_option_value\">bad_option_value</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#derrno\">derrno</a> &lt; 1 || <a class=\"id\" href=\"#derrno\">derrno</a> &gt; 511)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_option_value\">bad_option_value</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kdebug\">kdebug</a>(\"dns error no. = %lu\", <a class=\"id\" href=\"#derrno\">derrno</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#type_data\">type_data</a>.<a class=\"id\" href=\"#x\">x</a>[0] = -<a class=\"id\" href=\"#derrno\">derrno</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bad_option_value\">bad_option_value</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"Option '%*.*s' to dns_resolver key %d:\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \" bad/missing value\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#opt_nlen\">opt_nlen</a>, <a class=\"id\" href=\"#opt_nlen\">opt_nlen</a>, <a class=\"id\" href=\"#opt\">opt</a>, <a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#serial\">serial</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} while (<a class=\"id\" href=\"#opt\">opt</a> = <a class=\"id\" href=\"#next_opt\">next_opt</a> + 1, <a class=\"id\" href=\"#opt\">opt</a> &lt; <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* don't cache the result if we're caching an error saying there's no</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * result */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#type_data\">type_data</a>.<a class=\"id\" href=\"#x\">x</a>[0]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kleave\">kleave</a>(\" = 0 [h_error %ld]\", <a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#type_data\">type_data</a>.<a class=\"id\" href=\"#x\">x</a>[0]);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kdebug\">kdebug</a>(\"store result\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#key_payload_reserve\">key_payload_reserve</a>(<a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#result_len\">result_len</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#upayload\">upayload</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#upayload\">upayload</a>) + <a class=\"id\" href=\"#result_len\">result_len</a> + 1, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#upayload\">upayload</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kleave\">kleave</a>(\" = -ENOMEM\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#upayload\">upayload</a>-><a class=\"id\" href=\"#datalen\">datalen</a> = <a class=\"id\" href=\"#result_len\">result_len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#upayload\">upayload</a>-><a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#result_len\">result_len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#upayload\">upayload</a>-><a class=\"id\" href=\"#data\">data</a>[<a class=\"id\" href=\"#result_len\">result_len</a>] = '\\0';", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#payload\">payload</a>.<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#upayload\">upayload</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kleave\">kleave</a>(\" = 0\");", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The description is of the form \"[&lt;type&gt;:]&lt;domain_name&gt;\"</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The domain name may be a simple name or an absolute domain name (which</span>", 
"<span class=\"comment\"> * should end with a period).  The domain name is case-independent.</span>", 
"<span class=\"comment\"> */</span>", 
"static int", 
"<a class=\"id\" href=\"#dns_resolver_match\">dns_resolver_match</a>(const struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key\">key</a>, const void *<a class=\"id\" href=\"#description\">description</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#slen\">slen</a>, <a class=\"id\" href=\"#dlen\">dlen</a>, <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#src\">src</a> = <a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#description\">description</a>, *<a class=\"id\" href=\"#dsp\">dsp</a> = <a class=\"id\" href=\"#description\">description</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kenter\">kenter</a>(\"%s,%s\", <a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#dsp\">dsp</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#src\">src</a> || !<a class=\"id\" href=\"#dsp\">dsp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_match\">no_match</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strcasecmp\">strcasecmp</a>(<a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#dsp\">dsp</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#matched\">matched</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#slen\">slen</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#src\">src</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dlen\">dlen</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#dsp\">dsp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#slen\">slen</a> <= 0 || <a class=\"id\" href=\"#dlen\">dlen</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_match\">no_match</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#src\">src</a>[<a class=\"id\" href=\"#slen\">slen</a> - 1] == '.')", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slen\">slen</a>--;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dsp\">dsp</a>[<a class=\"id\" href=\"#dlen\">dlen</a> - 1] == '.')", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dlen\">dlen</a>--;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#slen\">slen</a> != <a class=\"id\" href=\"#dlen\">dlen</a> || <a class=\"id\" href=\"#strncasecmp\">strncasecmp</a>(<a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#dsp\">dsp</a>, <a class=\"id\" href=\"#slen\">slen</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_match\">no_match</a>;", 
"", 
"<a class=\"id\" href=\"#matched\">matched</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<a class=\"id\" href=\"#no_match\">no_match</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kleave\">kleave</a>(\" = %d\", <a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Describe a DNS key</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#dns_resolver_describe\">dns_resolver_describe</a>(const struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#key\">key</a>, struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#type_data\">type_data</a>.<a class=\"id\" href=\"#x\">x</a>[0];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_puts\">seq_puts</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#description\">description</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \": %d\", <a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \": %u\", <a class=\"id\" href=\"#key\">key</a>-><a class=\"id\" href=\"#datalen\">datalen</a>);", 
"}", 
"", 
"struct <a class=\"id\" href=\"#key_type\">key_type</a> <a class=\"id\" href=\"#key_type_dns_resolver\">key_type_dns_resolver</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>= \"dns_resolver\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#instantiate\">instantiate</a><span class=\"ts\"/>= <a class=\"id\" href=\"#dns_resolver_instantiate\">dns_resolver_instantiate</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#match\">match</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#dns_resolver_match\">dns_resolver_match</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#revoke\">revoke</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#user_revoke\">user_revoke</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#destroy\">destroy</a><span class=\"ts\"/>= <a class=\"id\" href=\"#user_destroy\">user_destroy</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#describe\">describe</a><span class=\"ts\"/>= <a class=\"id\" href=\"#dns_resolver_describe\">dns_resolver_describe</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#user_read\">user_read</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#init_dns_resolver\">init_dns_resolver</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#key\">key</a> *<a class=\"id\" href=\"#keyring\">keyring</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a> \"Registering the %s key type\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#key_type_dns_resolver\">key_type_dns_resolver</a>.<a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* create an override credential set with a special thread keyring in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * which DNS requests are cached</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this is used to prevent malicious redirections from being installed</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * with add_key().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cred\">cred</a> = <a class=\"id\" href=\"#prepare_kernel_cred\">prepare_kernel_cred</a>(<a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cred\">cred</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#keyring\">keyring</a> = <a class=\"id\" href=\"#key_alloc\">key_alloc</a>(&amp;<a class=\"id\" href=\"#key_type_keyring\">key_type_keyring</a>, \".dns_resolver\", 0, 0, <a class=\"id\" href=\"#cred\">cred</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#KEY_POS_ALL\">KEY_POS_ALL</a> &amp; ~<a class=\"id\" href=\"#KEY_POS_SETATTR\">KEY_POS_SETATTR</a>) |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#KEY_USR_VIEW\">KEY_USR_VIEW</a> | <a class=\"id\" href=\"#KEY_USR_READ\">KEY_USR_READ</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#KEY_ALLOC_NOT_IN_QUOTA\">KEY_ALLOC_NOT_IN_QUOTA</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#keyring\">keyring</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#keyring\">keyring</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#failed_put_cred\">failed_put_cred</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#key_instantiate_and_link\">key_instantiate_and_link</a>(<a class=\"id\" href=\"#keyring\">keyring</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#failed_put_key\">failed_put_key</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#register_key_type\">register_key_type</a>(&amp;<a class=\"id\" href=\"#key_type_dns_resolver\">key_type_dns_resolver</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#failed_put_key\">failed_put_key</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* instruct request_key() to use this special keyring as a cache for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the results it looks up */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#thread_keyring\">thread_keyring</a> = <a class=\"id\" href=\"#keyring\">keyring</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#jit_keyring\">jit_keyring</a> = <a class=\"id\" href=\"#KEY_REQKEY_DEFL_THREAD_KEYRING\">KEY_REQKEY_DEFL_THREAD_KEYRING</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dns_resolver_cache\">dns_resolver_cache</a> = <a class=\"id\" href=\"#cred\">cred</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kdebug\">kdebug</a>(\"DNS resolver keyring: %d\\n\", <a class=\"id\" href=\"#key_serial\">key_serial</a>(<a class=\"id\" href=\"#keyring\">keyring</a>));", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#failed_put_key\">failed_put_key</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_put\">key_put</a>(<a class=\"id\" href=\"#keyring\">keyring</a>);", 
"<a class=\"id\" href=\"#failed_put_cred\">failed_put_cred</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cred\">put_cred</a>(<a class=\"id\" href=\"#cred\">cred</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__exit\">__exit</a> <a class=\"id\" href=\"#exit_dns_resolver\">exit_dns_resolver</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_revoke\">key_revoke</a>(<a class=\"id\" href=\"#dns_resolver_cache\">dns_resolver_cache</a>-><a class=\"id\" href=\"#thread_keyring\">thread_keyring</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_key_type\">unregister_key_type</a>(&amp;<a class=\"id\" href=\"#key_type_dns_resolver\">key_type_dns_resolver</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cred\">put_cred</a>(<a class=\"id\" href=\"#dns_resolver_cache\">dns_resolver_cache</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a> \"Unregistered %s key type\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#key_type_dns_resolver\">key_type_dns_resolver</a>.<a class=\"id\" href=\"#name\">name</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#module_init\">module_init</a>(<a class=\"id\" href=\"#init_dns_resolver\">init_dns_resolver</a>)", 
"<a class=\"id\" href=\"#module_exit\">module_exit</a>(<a class=\"id\" href=\"#exit_dns_resolver\">exit_dns_resolver</a>)", 
"<a class=\"id\" href=\"#MODULE_LICENSE\">MODULE_LICENSE</a>(\"GPL\");", 
];
xr_frag_insert('l/0a/2512a81e04bd2d3d4d7c1c51fa47fb19cc419e.xr', __xr_tmp);
