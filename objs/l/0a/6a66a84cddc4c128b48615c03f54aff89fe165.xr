var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * NETLINK      Netlink attributes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>Authors:<span class=\"ts\"/>Thomas Graf &lt;tgraf@suug.ch&gt;</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>Alexey Kuznetsov &lt;kuznet@ms2.inr.ac.ru&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#jiffies\">jiffies</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#netdevice\">netdevice</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#skbuff\">skbuff</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#netlink\">netlink</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#nla_attr_minlen\">nla_attr_minlen</a>[<a class=\"id\" href=\"#NLA_TYPE_MAX\">NLA_TYPE_MAX</a>+1] <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = {", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#NLA_U8\">NLA_U8</a>]<span class=\"ts\"/>= sizeof(<a class=\"id\" href=\"#u8\">u8</a>),", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#NLA_U16\">NLA_U16</a>]<span class=\"ts\"/>= sizeof(<a class=\"id\" href=\"#u16\">u16</a>),", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#NLA_U32\">NLA_U32</a>]<span class=\"ts\"/>= sizeof(<a class=\"id\" href=\"#u32\">u32</a>),", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#NLA_U64\">NLA_U64</a>]<span class=\"ts\"/>= sizeof(<a class=\"id\" href=\"#u64\">u64</a>),", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#NLA_NESTED\">NLA_NESTED</a>]<span class=\"ts\"/>= <a class=\"id\" href=\"#NLA_HDRLEN\">NLA_HDRLEN</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#validate_nla\">validate_nla</a>(struct <a class=\"id\" href=\"#nlattr\">nlattr</a> *<a class=\"id\" href=\"#nla\">nla</a>, int <a class=\"id\" href=\"#maxtype\">maxtype</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#nla_policy\">nla_policy</a> *<a class=\"id\" href=\"#policy\">policy</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#nla_policy\">nla_policy</a> *<a class=\"id\" href=\"#pt\">pt</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#minlen\">minlen</a> = 0, <a class=\"id\" href=\"#attrlen\">attrlen</a> = <a class=\"id\" href=\"#nla_len\">nla_len</a>(<a class=\"id\" href=\"#nla\">nla</a>), <a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#nla_type\">nla_type</a>(<a class=\"id\" href=\"#nla\">nla</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> <= 0 || <a class=\"id\" href=\"#type\">type</a> &gt; <a class=\"id\" href=\"#maxtype\">maxtype</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pt\">pt</a> = &amp;<a class=\"id\" href=\"#policy\">policy</a>[<a class=\"id\" href=\"#type\">type</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#pt\">pt</a>-><a class=\"id\" href=\"#type\">type</a> &gt; <a class=\"id\" href=\"#NLA_TYPE_MAX\">NLA_TYPE_MAX</a>);", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#pt\">pt</a>-><a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#NLA_FLAG\">NLA_FLAG</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#attrlen\">attrlen</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ERANGE\">ERANGE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#NLA_NUL_STRING\">NLA_NUL_STRING</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pt\">pt</a>-><a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#minlen\">minlen</a> = <a class=\"id\" href=\"#min_t\">min_t</a>(int, <a class=\"id\" href=\"#attrlen\">attrlen</a>, <a class=\"id\" href=\"#pt\">pt</a>-><a class=\"id\" href=\"#len\">len</a> + 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#minlen\">minlen</a> = <a class=\"id\" href=\"#attrlen\">attrlen</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#minlen\">minlen</a> || <a class=\"id\" href=\"#memchr\">memchr</a>(<a class=\"id\" href=\"#nla_data\">nla_data</a>(<a class=\"id\" href=\"#nla\">nla</a>), '\\0', <a class=\"id\" href=\"#minlen\">minlen</a>) == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fall through */</span>", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#NLA_STRING\">NLA_STRING</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#attrlen\">attrlen</a> &lt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ERANGE\">ERANGE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pt\">pt</a>-><a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#nla_data\">nla_data</a>(<a class=\"id\" href=\"#nla\">nla</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#attrlen\">attrlen</a> - 1] == '\\0')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#attrlen\">attrlen</a>--;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#attrlen\">attrlen</a> &gt; <a class=\"id\" href=\"#pt\">pt</a>-><a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ERANGE\">ERANGE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#NLA_BINARY\">NLA_BINARY</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pt\">pt</a>-><a class=\"id\" href=\"#len\">len</a> && <a class=\"id\" href=\"#attrlen\">attrlen</a> &gt; <a class=\"id\" href=\"#pt\">pt</a>-><a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ERANGE\">ERANGE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#NLA_NESTED_COMPAT\">NLA_NESTED_COMPAT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#attrlen\">attrlen</a> &lt; <a class=\"id\" href=\"#pt\">pt</a>-><a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ERANGE\">ERANGE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#attrlen\">attrlen</a> &lt; <a class=\"id\" href=\"#NLA_ALIGN\">NLA_ALIGN</a>(<a class=\"id\" href=\"#pt\">pt</a>-><a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#attrlen\">attrlen</a> &lt; <a class=\"id\" href=\"#NLA_ALIGN\">NLA_ALIGN</a>(<a class=\"id\" href=\"#pt\">pt</a>-><a class=\"id\" href=\"#len\">len</a>) + <a class=\"id\" href=\"#NLA_HDRLEN\">NLA_HDRLEN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ERANGE\">ERANGE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nla\">nla</a> = <a class=\"id\" href=\"#nla_data\">nla_data</a>(<a class=\"id\" href=\"#nla\">nla</a>) + <a class=\"id\" href=\"#NLA_ALIGN\">NLA_ALIGN</a>(<a class=\"id\" href=\"#pt\">pt</a>-><a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#attrlen\">attrlen</a> &lt; <a class=\"id\" href=\"#NLA_ALIGN\">NLA_ALIGN</a>(<a class=\"id\" href=\"#pt\">pt</a>-><a class=\"id\" href=\"#len\">len</a>) + <a class=\"id\" href=\"#NLA_HDRLEN\">NLA_HDRLEN</a> + <a class=\"id\" href=\"#nla_len\">nla_len</a>(<a class=\"id\" href=\"#nla\">nla</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ERANGE\">ERANGE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#NLA_NESTED\">NLA_NESTED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* a nested attributes is allowed to be empty; if its not,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it must have a size of at least NLA_HDRLEN.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#attrlen\">attrlen</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pt\">pt</a>-><a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#minlen\">minlen</a> = <a class=\"id\" href=\"#pt\">pt</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#pt\">pt</a>-><a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#NLA_UNSPEC\">NLA_UNSPEC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#minlen\">minlen</a> = <a class=\"id\" href=\"#nla_attr_minlen\">nla_attr_minlen</a>[<a class=\"id\" href=\"#pt\">pt</a>-><a class=\"id\" href=\"#type\">type</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#attrlen\">attrlen</a> &lt; <a class=\"id\" href=\"#minlen\">minlen</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ERANGE\">ERANGE</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * nla_validate - Validate a stream of attributes</span>", 
"<span class=\"comment\"> * @head: head of attribute stream</span>", 
"<span class=\"comment\"> * @len: length of attribute stream</span>", 
"<span class=\"comment\"> * @maxtype: maximum attribute type to be expected</span>", 
"<span class=\"comment\"> * @policy: validation policy</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Validates all attributes in the specified attribute stream against the</span>", 
"<span class=\"comment\"> * specified policy. Attributes with a type exceeding maxtype will be</span>", 
"<span class=\"comment\"> * ignored. See documenation of struct nla_policy for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success or a negative error code.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#nla_validate\">nla_validate</a>(struct <a class=\"id\" href=\"#nlattr\">nlattr</a> *<a class=\"id\" href=\"#head\">head</a>, int <a class=\"id\" href=\"#len\">len</a>, int <a class=\"id\" href=\"#maxtype\">maxtype</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> const struct <a class=\"id\" href=\"#nla_policy\">nla_policy</a> *<a class=\"id\" href=\"#policy\">policy</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#nlattr\">nlattr</a> *<a class=\"id\" href=\"#nla\">nla</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rem\">rem</a>, <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nla_for_each_attr\">nla_for_each_attr</a>(<a class=\"id\" href=\"#nla\">nla</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#rem\">rem</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#validate_nla\">validate_nla</a>(<a class=\"id\" href=\"#nla\">nla</a>, <a class=\"id\" href=\"#maxtype\">maxtype</a>, <a class=\"id\" href=\"#policy\">policy</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#errout\">errout</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<a class=\"id\" href=\"#errout\">errout</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * nla_policy_len - Determin the max. length of a policy</span>", 
"<span class=\"comment\"> * @policy: policy to use</span>", 
"<span class=\"comment\"> * @n: number of policies</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Determines the max. length of the policy.  It is currently used</span>", 
"<span class=\"comment\"> * to allocated Netlink buffers roughly the size of the actual</span>", 
"<span class=\"comment\"> * message.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success or a negative error code.</span>", 
"<span class=\"comment\"> */</span>", 
"int", 
"<a class=\"id\" href=\"#nla_policy_len\">nla_policy_len</a>(const struct <a class=\"id\" href=\"#nla_policy\">nla_policy</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#len\">len</a> = 0;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#n\">n</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#nla_total_size\">nla_total_size</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#nla_attr_minlen\">nla_attr_minlen</a>[<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#type\">type</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#nla_total_size\">nla_total_size</a>(<a class=\"id\" href=\"#nla_attr_minlen\">nla_attr_minlen</a>[<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#type\">type</a>]);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#len\">len</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * nla_parse - Parse a stream of attributes into a tb buffer</span>", 
"<span class=\"comment\"> * @tb: destination array with maxtype+1 elements</span>", 
"<span class=\"comment\"> * @maxtype: maximum attribute type to be expected</span>", 
"<span class=\"comment\"> * @head: head of attribute stream</span>", 
"<span class=\"comment\"> * @len: length of attribute stream</span>", 
"<span class=\"comment\"> * @policy: validation policy</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Parses a stream of attributes and stores a pointer to each attribute in</span>", 
"<span class=\"comment\"> * the tb array accessable via the attribute type. Attributes with a type</span>", 
"<span class=\"comment\"> * exceeding maxtype will be silently ignored for backwards compatibility</span>", 
"<span class=\"comment\"> * reasons. policy may be set to NULL if no validation is required.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success or a negative error code.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#nla_parse\">nla_parse</a>(struct <a class=\"id\" href=\"#nlattr\">nlattr</a> *<a class=\"id\" href=\"#tb\">tb</a>[], int <a class=\"id\" href=\"#maxtype\">maxtype</a>, struct <a class=\"id\" href=\"#nlattr\">nlattr</a> *<a class=\"id\" href=\"#head\">head</a>, int <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/>      const struct <a class=\"id\" href=\"#nla_policy\">nla_policy</a> *<a class=\"id\" href=\"#policy\">policy</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#nlattr\">nlattr</a> *<a class=\"id\" href=\"#nla\">nla</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rem\">rem</a>, <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#tb\">tb</a>, 0, sizeof(struct <a class=\"id\" href=\"#nlattr\">nlattr</a> *) * (<a class=\"id\" href=\"#maxtype\">maxtype</a> + 1));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nla_for_each_attr\">nla_for_each_attr</a>(<a class=\"id\" href=\"#nla\">nla</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#rem\">rem</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#nla_type\">nla_type</a>(<a class=\"id\" href=\"#nla\">nla</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> &gt; 0 && <a class=\"id\" href=\"#type\">type</a> <= <a class=\"id\" href=\"#maxtype\">maxtype</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#policy\">policy</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#validate_nla\">validate_nla</a>(<a class=\"id\" href=\"#nla\">nla</a>, <a class=\"id\" href=\"#maxtype\">maxtype</a>, <a class=\"id\" href=\"#policy\">policy</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#errout\">errout</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tb\">tb</a>[<a class=\"id\" href=\"#type\">type</a>] = <a class=\"id\" href=\"#nla\">nla</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#rem\">rem</a> &gt; 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"netlink: %d bytes leftover after parsing \"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"attributes.\\n\", <a class=\"id\" href=\"#rem\">rem</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<a class=\"id\" href=\"#errout\">errout</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * nla_find - Find a specific attribute in a stream of attributes</span>", 
"<span class=\"comment\"> * @head: head of attribute stream</span>", 
"<span class=\"comment\"> * @len: length of attribute stream</span>", 
"<span class=\"comment\"> * @attrtype: type of attribute to look for</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the first attribute in the stream matching the specified type.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#nlattr\">nlattr</a> *<a class=\"id\" href=\"#nla_find\">nla_find</a>(struct <a class=\"id\" href=\"#nlattr\">nlattr</a> *<a class=\"id\" href=\"#head\">head</a>, int <a class=\"id\" href=\"#len\">len</a>, int <a class=\"id\" href=\"#attrtype\">attrtype</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#nlattr\">nlattr</a> *<a class=\"id\" href=\"#nla\">nla</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rem\">rem</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nla_for_each_attr\">nla_for_each_attr</a>(<a class=\"id\" href=\"#nla\">nla</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#rem\">rem</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nla_type\">nla_type</a>(<a class=\"id\" href=\"#nla\">nla</a>) == <a class=\"id\" href=\"#attrtype\">attrtype</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#nla\">nla</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * nla_strlcpy - Copy string attribute payload into a sized buffer</span>", 
"<span class=\"comment\"> * @dst: where to copy the string to</span>", 
"<span class=\"comment\"> * @nla: attribute to copy the string from</span>", 
"<span class=\"comment\"> * @dstsize: size of destination buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copies at most dstsize - 1 bytes into the destination buffer.</span>", 
"<span class=\"comment\"> * The result is always a valid NUL-terminated string. Unlike</span>", 
"<span class=\"comment\"> * strlcpy the destination buffer is always padded out.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the length of the source buffer.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#nla_strlcpy\">nla_strlcpy</a>(char *<a class=\"id\" href=\"#dst\">dst</a>, const struct <a class=\"id\" href=\"#nlattr\">nlattr</a> *<a class=\"id\" href=\"#nla\">nla</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#dstsize\">dstsize</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#srclen\">srclen</a> = <a class=\"id\" href=\"#nla_len\">nla_len</a>(<a class=\"id\" href=\"#nla\">nla</a>);", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#src\">src</a> = <a class=\"id\" href=\"#nla_data\">nla_data</a>(<a class=\"id\" href=\"#nla\">nla</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#srclen\">srclen</a> &gt; 0 && <a class=\"id\" href=\"#src\">src</a>[<a class=\"id\" href=\"#srclen\">srclen</a> - 1] == '\\0')", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#srclen\">srclen</a>--;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dstsize\">dstsize</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a> = (<a class=\"id\" href=\"#srclen\">srclen</a> >= <a class=\"id\" href=\"#dstsize\">dstsize</a>) ? <a class=\"id\" href=\"#dstsize\">dstsize</a> - 1 : <a class=\"id\" href=\"#srclen\">srclen</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#dst\">dst</a>, 0, <a class=\"id\" href=\"#dstsize\">dstsize</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#srclen\">srclen</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * nla_memcpy - Copy a netlink attribute into another memory area</span>", 
"<span class=\"comment\"> * @dest: where to copy to memcpy</span>", 
"<span class=\"comment\"> * @src: netlink attribute to copy from</span>", 
"<span class=\"comment\"> * @count: size of the destination area</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note: The number of bytes copied is limited by the length of</span>", 
"<span class=\"comment\"> *       attribute's payload. memcpy</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the number of bytes copied.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#nla_memcpy\">nla_memcpy</a>(void *<a class=\"id\" href=\"#dest\">dest</a>, const struct <a class=\"id\" href=\"#nlattr\">nlattr</a> *<a class=\"id\" href=\"#src\">src</a>, int <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#minlen\">minlen</a> = <a class=\"id\" href=\"#min_t\">min_t</a>(int, <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#nla_len\">nla_len</a>(<a class=\"id\" href=\"#src\">src</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#dest\">dest</a>, <a class=\"id\" href=\"#nla_data\">nla_data</a>(<a class=\"id\" href=\"#src\">src</a>), <a class=\"id\" href=\"#minlen\">minlen</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#minlen\">minlen</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * nla_memcmp - Compare an attribute with sized memory area</span>", 
"<span class=\"comment\"> * @nla: netlink attribute</span>", 
"<span class=\"comment\"> * @data: memory area</span>", 
"<span class=\"comment\"> * @size: size of memory area</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#nla_memcmp\">nla_memcmp</a>(const struct <a class=\"id\" href=\"#nlattr\">nlattr</a> *<a class=\"id\" href=\"#nla\">nla</a>, const void *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#d\">d</a> = <a class=\"id\" href=\"#nla_len\">nla_len</a>(<a class=\"id\" href=\"#nla\">nla</a>) - <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#d\">d</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a> = <a class=\"id\" href=\"#memcmp\">memcmp</a>(<a class=\"id\" href=\"#nla_data\">nla_data</a>(<a class=\"id\" href=\"#nla\">nla</a>), <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#d\">d</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * nla_strcmp - Compare a string attribute against a string</span>", 
"<span class=\"comment\"> * @nla: netlink string attribute</span>", 
"<span class=\"comment\"> * @str: another string</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#nla_strcmp\">nla_strcmp</a>(const struct <a class=\"id\" href=\"#nlattr\">nlattr</a> *<a class=\"id\" href=\"#nla\">nla</a>, const char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#str\">str</a>) + 1;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#d\">d</a> = <a class=\"id\" href=\"#nla_len\">nla_len</a>(<a class=\"id\" href=\"#nla\">nla</a>) - <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#d\">d</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a> = <a class=\"id\" href=\"#memcmp\">memcmp</a>(<a class=\"id\" href=\"#nla_data\">nla_data</a>(<a class=\"id\" href=\"#nla\">nla</a>), <a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#d\">d</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NET\">CONFIG_NET</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __nla_reserve - reserve room for attribute on the skb</span>", 
"<span class=\"comment\"> * @skb: socket buffer to reserve room on</span>", 
"<span class=\"comment\"> * @attrtype: attribute type</span>", 
"<span class=\"comment\"> * @attrlen: length of attribute payload</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Adds a netlink attribute header to a socket buffer and reserves</span>", 
"<span class=\"comment\"> * room for the payload but does not copy it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The caller is responsible to ensure that the skb provides enough</span>", 
"<span class=\"comment\"> * tailroom for the attribute header and payload.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#nlattr\">nlattr</a> *<a class=\"id\" href=\"#__nla_reserve\">__nla_reserve</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#attrtype\">attrtype</a>, int <a class=\"id\" href=\"#attrlen\">attrlen</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#nlattr\">nlattr</a> *<a class=\"id\" href=\"#nla\">nla</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nla\">nla</a> = (struct <a class=\"id\" href=\"#nlattr\">nlattr</a> *) <a class=\"id\" href=\"#skb_put\">skb_put</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#nla_total_size\">nla_total_size</a>(<a class=\"id\" href=\"#attrlen\">attrlen</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nla\">nla</a>-><a class=\"id\" href=\"#nla_type\">nla_type</a> = <a class=\"id\" href=\"#attrtype\">attrtype</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nla\">nla</a>-><a class=\"id\" href=\"#nla_len\">nla_len</a> = <a class=\"id\" href=\"#nla_attr_size\">nla_attr_size</a>(<a class=\"id\" href=\"#attrlen\">attrlen</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>((unsigned char *) <a class=\"id\" href=\"#nla\">nla</a> + <a class=\"id\" href=\"#nla\">nla</a>-><a class=\"id\" href=\"#nla_len\">nla_len</a>, 0, <a class=\"id\" href=\"#nla_padlen\">nla_padlen</a>(<a class=\"id\" href=\"#attrlen\">attrlen</a>));", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nla\">nla</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__nla_reserve\">__nla_reserve</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __nla_reserve_nohdr - reserve room for attribute without header</span>", 
"<span class=\"comment\"> * @skb: socket buffer to reserve room on</span>", 
"<span class=\"comment\"> * @attrlen: length of attribute payload</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Reserves room for attribute payload without a header.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The caller is responsible to ensure that the skb provides enough</span>", 
"<span class=\"comment\"> * tailroom for the payload.</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#__nla_reserve_nohdr\">__nla_reserve_nohdr</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#attrlen\">attrlen</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#start\">start</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#skb_put\">skb_put</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#NLA_ALIGN\">NLA_ALIGN</a>(<a class=\"id\" href=\"#attrlen\">attrlen</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#start\">start</a>, 0, <a class=\"id\" href=\"#NLA_ALIGN\">NLA_ALIGN</a>(<a class=\"id\" href=\"#attrlen\">attrlen</a>));", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#start\">start</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__nla_reserve_nohdr\">__nla_reserve_nohdr</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * nla_reserve - reserve room for attribute on the skb</span>", 
"<span class=\"comment\"> * @skb: socket buffer to reserve room on</span>", 
"<span class=\"comment\"> * @attrtype: attribute type</span>", 
"<span class=\"comment\"> * @attrlen: length of attribute payload</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Adds a netlink attribute header to a socket buffer and reserves</span>", 
"<span class=\"comment\"> * room for the payload but does not copy it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns NULL if the tailroom of the skb is insufficient to store</span>", 
"<span class=\"comment\"> * the attribute header and payload.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#nlattr\">nlattr</a> *<a class=\"id\" href=\"#nla_reserve\">nla_reserve</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#attrtype\">attrtype</a>, int <a class=\"id\" href=\"#attrlen\">attrlen</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#skb_tailroom\">skb_tailroom</a>(<a class=\"id\" href=\"#skb\">skb</a>) &lt; <a class=\"id\" href=\"#nla_total_size\">nla_total_size</a>(<a class=\"id\" href=\"#attrlen\">attrlen</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__nla_reserve\">__nla_reserve</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#attrtype\">attrtype</a>, <a class=\"id\" href=\"#attrlen\">attrlen</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#nla_reserve\">nla_reserve</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * nla_reserve_nohdr - reserve room for attribute without header</span>", 
"<span class=\"comment\"> * @skb: socket buffer to reserve room on</span>", 
"<span class=\"comment\"> * @attrlen: length of attribute payload</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Reserves room for attribute payload without a header.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns NULL if the tailroom of the skb is insufficient to store</span>", 
"<span class=\"comment\"> * the attribute payload.</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#nla_reserve_nohdr\">nla_reserve_nohdr</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#attrlen\">attrlen</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#skb_tailroom\">skb_tailroom</a>(<a class=\"id\" href=\"#skb\">skb</a>) &lt; <a class=\"id\" href=\"#NLA_ALIGN\">NLA_ALIGN</a>(<a class=\"id\" href=\"#attrlen\">attrlen</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__nla_reserve_nohdr\">__nla_reserve_nohdr</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#attrlen\">attrlen</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#nla_reserve_nohdr\">nla_reserve_nohdr</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __nla_put - Add a netlink attribute to a socket buffer</span>", 
"<span class=\"comment\"> * @skb: socket buffer to add attribute to</span>", 
"<span class=\"comment\"> * @attrtype: attribute type</span>", 
"<span class=\"comment\"> * @attrlen: length of attribute payload</span>", 
"<span class=\"comment\"> * @data: head of attribute payload</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The caller is responsible to ensure that the skb provides enough</span>", 
"<span class=\"comment\"> * tailroom for the attribute header and payload.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__nla_put\">__nla_put</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#attrtype\">attrtype</a>, int <a class=\"id\" href=\"#attrlen\">attrlen</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#nlattr\">nlattr</a> *<a class=\"id\" href=\"#nla\">nla</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nla\">nla</a> = <a class=\"id\" href=\"#__nla_reserve\">__nla_reserve</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#attrtype\">attrtype</a>, <a class=\"id\" href=\"#attrlen\">attrlen</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#nla_data\">nla_data</a>(<a class=\"id\" href=\"#nla\">nla</a>), <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#attrlen\">attrlen</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__nla_put\">__nla_put</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __nla_put_nohdr - Add a netlink attribute without header</span>", 
"<span class=\"comment\"> * @skb: socket buffer to add attribute to</span>", 
"<span class=\"comment\"> * @attrlen: length of attribute payload</span>", 
"<span class=\"comment\"> * @data: head of attribute payload</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The caller is responsible to ensure that the skb provides enough</span>", 
"<span class=\"comment\"> * tailroom for the attribute payload.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__nla_put_nohdr\">__nla_put_nohdr</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#attrlen\">attrlen</a>, const void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#start\">start</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#__nla_reserve_nohdr\">__nla_reserve_nohdr</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#attrlen\">attrlen</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#attrlen\">attrlen</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__nla_put_nohdr\">__nla_put_nohdr</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * nla_put - Add a netlink attribute to a socket buffer</span>", 
"<span class=\"comment\"> * @skb: socket buffer to add attribute to</span>", 
"<span class=\"comment\"> * @attrtype: attribute type</span>", 
"<span class=\"comment\"> * @attrlen: length of attribute payload</span>", 
"<span class=\"comment\"> * @data: head of attribute payload</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns -EMSGSIZE if the tailroom of the skb is insufficient to store</span>", 
"<span class=\"comment\"> * the attribute header and payload.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#nla_put\">nla_put</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#attrtype\">attrtype</a>, int <a class=\"id\" href=\"#attrlen\">attrlen</a>, const void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#skb_tailroom\">skb_tailroom</a>(<a class=\"id\" href=\"#skb\">skb</a>) &lt; <a class=\"id\" href=\"#nla_total_size\">nla_total_size</a>(<a class=\"id\" href=\"#attrlen\">attrlen</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EMSGSIZE\">EMSGSIZE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__nla_put\">__nla_put</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#attrtype\">attrtype</a>, <a class=\"id\" href=\"#attrlen\">attrlen</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#nla_put\">nla_put</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * nla_put_nohdr - Add a netlink attribute without header</span>", 
"<span class=\"comment\"> * @skb: socket buffer to add attribute to</span>", 
"<span class=\"comment\"> * @attrlen: length of attribute payload</span>", 
"<span class=\"comment\"> * @data: head of attribute payload</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns -EMSGSIZE if the tailroom of the skb is insufficient to store</span>", 
"<span class=\"comment\"> * the attribute payload.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#nla_put_nohdr\">nla_put_nohdr</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#attrlen\">attrlen</a>, const void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#skb_tailroom\">skb_tailroom</a>(<a class=\"id\" href=\"#skb\">skb</a>) &lt; <a class=\"id\" href=\"#NLA_ALIGN\">NLA_ALIGN</a>(<a class=\"id\" href=\"#attrlen\">attrlen</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EMSGSIZE\">EMSGSIZE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__nla_put_nohdr\">__nla_put_nohdr</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#attrlen\">attrlen</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#nla_put_nohdr\">nla_put_nohdr</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * nla_append - Add a netlink attribute without header or padding</span>", 
"<span class=\"comment\"> * @skb: socket buffer to add attribute to</span>", 
"<span class=\"comment\"> * @attrlen: length of attribute payload</span>", 
"<span class=\"comment\"> * @data: head of attribute payload</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns -EMSGSIZE if the tailroom of the skb is insufficient to store</span>", 
"<span class=\"comment\"> * the attribute payload.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#nla_append\">nla_append</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#attrlen\">attrlen</a>, const void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#skb_tailroom\">skb_tailroom</a>(<a class=\"id\" href=\"#skb\">skb</a>) &lt; <a class=\"id\" href=\"#NLA_ALIGN\">NLA_ALIGN</a>(<a class=\"id\" href=\"#attrlen\">attrlen</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EMSGSIZE\">EMSGSIZE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#skb_put\">skb_put</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#attrlen\">attrlen</a>), <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#attrlen\">attrlen</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#nla_append\">nla_append</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#nla_validate\">nla_validate</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#nla_policy_len\">nla_policy_len</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#nla_parse\">nla_parse</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#nla_find\">nla_find</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#nla_strlcpy\">nla_strlcpy</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#nla_memcpy\">nla_memcpy</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#nla_memcmp\">nla_memcmp</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#nla_strcmp\">nla_strcmp</a>);", 
];
xr_frag_insert('l/0a/6a66a84cddc4c128b48615c03f54aff89fe165.xr', __xr_tmp);
