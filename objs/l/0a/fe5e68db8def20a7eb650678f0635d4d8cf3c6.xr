var __xr_tmp = [
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#wbc\">wbc</a>-><a class=\"id\" href=\"#sync_mode\">sync_mode</a> != <a class=\"id\" href=\"#WB_SYNC_ALL\">WB_SYNC_ALL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ext3_force_commit\">ext3_force_commit</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ext3_setattr()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called from notify_change.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We want to trap VFS attempts to truncate the file as soon as</span>", 
"<span class=\"comment\"> * possible.  In particular, we want to make sure that when the VFS</span>", 
"<span class=\"comment\"> * shrinks i_size, we put the inode on the orphan list and modify</span>", 
"<span class=\"comment\"> * i_disksize immediately, so that during the subsequent flushing of</span>", 
"<span class=\"comment\"> * dirty pages and freeing of disk blocks, we can guarantee that any</span>", 
"<span class=\"comment\"> * commit will leave the blocks being flushed in an unused state on</span>", 
"<span class=\"comment\"> * disk.  (On recovery, the inode will get truncated and the blocks will</span>", 
"<span class=\"comment\"> * be freed, so we have a strong guarantee that no future commit will</span>", 
"<span class=\"comment\"> * leave these blocks visible to the user.)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called with inode-&gt;sem down.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ext3_setattr\">ext3_setattr</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, struct <a class=\"id\" href=\"#iattr\">iattr</a> *<a class=\"id\" href=\"#attr\">attr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>, <a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"<span class=\"ts\"/>const unsigned int <a class=\"id\" href=\"#ia_valid\">ia_valid</a> = <a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#ia_valid\">ia_valid</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#inode_change_ok\">inode_change_ok</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#attr\">attr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_quota_modification\">is_quota_modification</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#attr\">attr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dquot_initialize\">dquot_initialize</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#ia_valid\">ia_valid</a> &amp; <a class=\"id\" href=\"#ATTR_UID\">ATTR_UID</a> && <a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#ia_uid\">ia_uid</a> != <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_uid\">i_uid</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#ia_valid\">ia_valid</a> &amp; <a class=\"id\" href=\"#ATTR_GID\">ATTR_GID</a> && <a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#ia_gid\">ia_gid</a> != <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_gid\">i_gid</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* (user+group)*(old+new) structure, inode write (sb,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * inode block, ? - but truncate inode update has it) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a> = <a class=\"id\" href=\"#ext3_journal_start\">ext3_journal_start</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#EXT3_MAXQUOTAS_INIT_BLOCKS\">EXT3_MAXQUOTAS_INIT_BLOCKS</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>)+", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT3_MAXQUOTAS_DEL_BLOCKS\">EXT3_MAXQUOTAS_DEL_BLOCKS</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>)+3);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#handle\">handle</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#dquot_transfer\">dquot_transfer</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#attr\">attr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_journal_stop\">ext3_journal_stop</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Update corresponding info in inode so that everything is in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * one transaction */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#ia_valid\">ia_valid</a> &amp; <a class=\"id\" href=\"#ATTR_UID\">ATTR_UID</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_uid\">i_uid</a> = <a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#ia_uid\">ia_uid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#ia_valid\">ia_valid</a> &amp; <a class=\"id\" href=\"#ATTR_GID\">ATTR_GID</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_gid\">i_gid</a> = <a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#ia_gid\">ia_gid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#ext3_mark_inode_dirty\">ext3_mark_inode_dirty</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_journal_stop\">ext3_journal_stop</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISREG\">S_ISREG</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#ia_valid\">ia_valid</a> &amp; <a class=\"id\" href=\"#ATTR_SIZE\">ATTR_SIZE</a> && <a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#ia_size\">ia_size</a> &lt; <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a> = <a class=\"id\" href=\"#ext3_journal_start\">ext3_journal_start</a>(<a class=\"id\" href=\"#inode\">inode</a>, 3);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#handle\">handle</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#ext3_orphan_add\">ext3_orphan_add</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT3_I\">EXT3_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_disksize\">i_disksize</a> = <a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#ia_size\">ia_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ext3_mark_inode_dirty\">ext3_mark_inode_dirty</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_journal_stop\">ext3_journal_stop</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#ia_valid\">ia_valid</a> &amp; <a class=\"id\" href=\"#ATTR_SIZE\">ATTR_SIZE</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#ia_size\">ia_size</a> != <a class=\"id\" href=\"#i_size_read\">i_size_read</a>(<a class=\"id\" href=\"#inode\">inode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#vmtruncate\">vmtruncate</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#attr\">attr</a>-><a class=\"id\" href=\"#ia_size\">ia_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setattr_copy\">setattr_copy</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#attr\">attr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mark_inode_dirty\">mark_inode_dirty</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ia_valid\">ia_valid</a> &amp; <a class=\"id\" href=\"#ATTR_MODE\">ATTR_MODE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ext3_acl_chmod\">ext3_acl_chmod</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<a class=\"id\" href=\"#err_out\">err_out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_std_error\">ext3_std_error</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#error\">error</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * How many blocks doth make a writepage()?</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * With N blocks per page, it may be:</span>", 
"<span class=\"comment\"> * N data blocks</span>", 
"<span class=\"comment\"> * 2 indirect block</span>", 
"<span class=\"comment\"> * 2 dindirect</span>", 
"<span class=\"comment\"> * 1 tindirect</span>", 
"<span class=\"comment\"> * N+5 bitmap blocks (from the above)</span>", 
"<span class=\"comment\"> * N+5 group descriptor summary blocks</span>", 
"<span class=\"comment\"> * 1 inode block</span>", 
"<span class=\"comment\"> * 1 superblock.</span>", 
"<span class=\"comment\"> * 2 * EXT3_SINGLEDATA_TRANS_BLOCKS for the quote files</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 3 * (N + 5) + 2 + 2 * EXT3_SINGLEDATA_TRANS_BLOCKS</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * With ordered or writeback data it's the same, less the N data blocks.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the inode's direct blocks can hold an integral number of pages then a</span>", 
"<span class=\"comment\"> * page cannot straddle two indirect blocks, and we can only touch one indirect</span>", 
"<span class=\"comment\"> * and dindirect block, and the \"5\" above becomes \"3\".</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This still overestimates under most circumstances.  If we were to pass the</span>", 
"<span class=\"comment\"> * start and end offsets in here as well we could do block_to_path() on each</span>", 
"<span class=\"comment\"> * block and work out the exact number of indirects which are touched.  Pah.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#ext3_writepage_trans_blocks\">ext3_writepage_trans_blocks</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#bpp\">bpp</a> = <a class=\"id\" href=\"#ext3_journal_blocks_per_page\">ext3_journal_blocks_per_page</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#indirects\">indirects</a> = (<a class=\"id\" href=\"#EXT3_NDIR_BLOCKS\">EXT3_NDIR_BLOCKS</a> % <a class=\"id\" href=\"#bpp\">bpp</a>) ? 5 : 3;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ext3_should_journal_data\">ext3_should_journal_data</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 3 * (<a class=\"id\" href=\"#bpp\">bpp</a> + <a class=\"id\" href=\"#indirects\">indirects</a>) + 2;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 2 * (<a class=\"id\" href=\"#bpp\">bpp</a> + <a class=\"id\" href=\"#indirects\">indirects</a>) + 2;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_QUOTA\">CONFIG_QUOTA</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* We know that structure was already allocated during dquot_initialize so</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we will be updating only the data blocks + inodes */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> += <a class=\"id\" href=\"#EXT3_MAXQUOTAS_TRANS_BLOCKS\">EXT3_MAXQUOTAS_TRANS_BLOCKS</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The caller must have previously called ext3_reserve_inode_write().</span>", 
"<span class=\"comment\"> * Give this, we know that the caller already has write access to iloc-&gt;bh.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ext3_mark_iloc_dirty\">ext3_mark_iloc_dirty</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#ext3_iloc\">ext3_iloc</a> *<a class=\"id\" href=\"#iloc\">iloc</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* the do_update_inode consumes one bh-&gt;b_count */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_bh\">get_bh</a>(<a class=\"id\" href=\"#iloc\">iloc</a>-><a class=\"id\" href=\"#bh\">bh</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* ext3_do_update_inode() does journal_dirty_metadata */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext3_do_update_inode\">ext3_do_update_inode</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#iloc\">iloc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_bh\">put_bh</a>(<a class=\"id\" href=\"#iloc\">iloc</a>-><a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * On success, We end up with an outstanding reference count against</span>", 
"<span class=\"comment\"> * iloc-&gt;bh.  This _must_ be cleaned up later.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int", 
"<a class=\"id\" href=\"#ext3_reserve_inode_write\">ext3_reserve_inode_write</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#ext3_iloc\">ext3_iloc</a> *<a class=\"id\" href=\"#iloc\">iloc</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#handle\">handle</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext3_get_inode_loc\">ext3_get_inode_loc</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#iloc\">iloc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#iloc\">iloc</a>-><a class=\"id\" href=\"#bh\">bh</a>, \"get_write_access\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext3_journal_get_write_access\">ext3_journal_get_write_access</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#iloc\">iloc</a>-><a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#iloc\">iloc</a>-><a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iloc\">iloc</a>-><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_std_error\">ext3_std_error</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * What we do here is to mark the in-core inode as clean with respect to inode</span>", 
"<span class=\"comment\"> * dirtiness (it may still be data-dirty).</span>", 
"<span class=\"comment\"> * This means that the in-core inode may be reaped by prune_icache</span>", 
"<span class=\"comment\"> * without having to perform any I/O.  This is a very good thing,</span>", 
"<span class=\"comment\"> * because *any* task may call prune_icache - even ones which</span>", 
"<span class=\"comment\"> * have a transaction open against a different journal.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Is this cheating?  Not really.  Sure, we haven't written the</span>", 
"<span class=\"comment\"> * inode out, but prune_icache isn't a user-visible syncing function.</span>", 
"<span class=\"comment\"> * Whenever the user wants stuff synced (sys_sync, sys_msync, sys_fsync)</span>", 
"<span class=\"comment\"> * we start and wait on commits.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Is this efficient/effective?  Well, we're being nice to the system</span>", 
"<span class=\"comment\"> * by cleaning up our inodes proactively so they can be reaped</span>", 
"<span class=\"comment\"> * without I/O.  But we are potentially leaving up to five seconds'</span>", 
"<span class=\"comment\"> * worth of inodes floating about which prune_icache wants us to</span>", 
"<span class=\"comment\"> * write out.  One way to fix that would be to get prune_icache()</span>", 
"<span class=\"comment\"> * to do a write_super() to free up some memory.  It has the desired</span>", 
"<span class=\"comment\"> * effect.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ext3_mark_inode_dirty\">ext3_mark_inode_dirty</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_iloc\">ext3_iloc</a> <a class=\"id\" href=\"#iloc\">iloc</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext3_reserve_inode_write\">ext3_reserve_inode_write</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, &amp;<a class=\"id\" href=\"#iloc\">iloc</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext3_mark_iloc_dirty\">ext3_mark_iloc_dirty</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, &amp;<a class=\"id\" href=\"#iloc\">iloc</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ext3_dirty_inode() is called from __mark_inode_dirty()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We're really interested in the case where a file is being extended.</span>", 
"<span class=\"comment\"> * i_size has been changed by generic_commit_write() and we thus need</span>", 
"<span class=\"comment\"> * to include the updated inode in the current transaction.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Also, dquot_alloc_space() will always dirty the inode when blocks</span>", 
"<span class=\"comment\"> * are allocated to the file.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the inode is marked synchronous, we don't honour that here - doing</span>", 
"<span class=\"comment\"> * so would cause a commit on atime updates, which we don't bother doing.</span>", 
"<span class=\"comment\"> * We handle synchronous inodes at the highest possible level.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ext3_dirty_inode\">ext3_dirty_inode</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#current_handle\">current_handle</a> = <a class=\"id\" href=\"#ext3_journal_current_handle\">ext3_journal_current_handle</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a> = <a class=\"id\" href=\"#ext3_journal_start\">ext3_journal_start</a>(<a class=\"id\" href=\"#inode\">inode</a>, 2);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#handle\">handle</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#current_handle\">current_handle</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current_handle\">current_handle</a>-><a class=\"id\" href=\"#h_transaction\">h_transaction</a> != <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_transaction\">h_transaction</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This task has a transaction open against a different fs */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a> \"%s: transactions do not match!\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_debug\">jbd_debug</a>(5, \"marking dirty.  outer handle=%p\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current_handle\">current_handle</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext3_mark_inode_dirty\">ext3_mark_inode_dirty</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_journal_stop\">ext3_journal_stop</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"#if 0", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Bind an inode's backing buffer_head into this transaction, to prevent</span>", 
"<span class=\"comment\"> * it from being flushed to disk early.  Unlike</span>", 
"<span class=\"comment\"> * ext3_reserve_inode_write, this leaves behind no bh reference and</span>", 
"<span class=\"comment\"> * returns no iloc structure, so the caller needs to repeat the iloc</span>", 
"<span class=\"comment\"> * lookup to mark the inode dirty later.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ext3_pin_inode\">ext3_pin_inode</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext3_iloc\">ext3_iloc</a> <a class=\"id\" href=\"#iloc\">iloc</a>;", 
"", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#handle\">handle</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext3_get_inode_loc\">ext3_get_inode_loc</a>(<a class=\"id\" href=\"#inode\">inode</a>, &amp;<a class=\"id\" href=\"#iloc\">iloc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#iloc\">iloc</a>.<a class=\"id\" href=\"#bh\">bh</a>, \"get_write_access\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#journal_get_write_access\">journal_get_write_access</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#iloc\">iloc</a>.<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext3_journal_dirty_metadata\">ext3_journal_dirty_metadata</a>(<a class=\"id\" href=\"#handle\">handle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#iloc\">iloc</a>.<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#iloc\">iloc</a>.<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_std_error\">ext3_std_error</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"int <a class=\"id\" href=\"#ext3_change_inode_journal_flag\">ext3_change_inode_journal_flag</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, int <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We have to be very careful here: changing a data block's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * journaling status dynamically is dangerous.  If we write a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * data block to the journal, change the status and then delete</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that block, we risk forgetting to revoke the old log record</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * from the journal and so a subsequent replay can corrupt data.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * So, first we make sure that the journal is empty and that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * nobody is changing anything.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal\">journal</a> = <a class=\"id\" href=\"#EXT3_JOURNAL\">EXT3_JOURNAL</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_journal_aborted\">is_journal_aborted</a>(<a class=\"id\" href=\"#journal\">journal</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EROFS\">EROFS</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal_lock_updates\">journal_lock_updates</a>(<a class=\"id\" href=\"#journal\">journal</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal_flush\">journal_flush</a>(<a class=\"id\" href=\"#journal\">journal</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * OK, there are no updates running now, and all cached data is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * synced to disk.  We are now in a completely consistent state</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * which doesn't have anything in the journal, and we know that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * no filesystem updates are running, so it is safe to modify</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the inode's in-core data-journaling state flag now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT3_I\">EXT3_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_flags\">i_flags</a> |= <a class=\"id\" href=\"#EXT3_JOURNAL_DATA_FL\">EXT3_JOURNAL_DATA_FL</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT3_I\">EXT3_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_flags\">i_flags</a> &= ~<a class=\"id\" href=\"#EXT3_JOURNAL_DATA_FL\">EXT3_JOURNAL_DATA_FL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_set_aops\">ext3_set_aops</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal_unlock_updates\">journal_unlock_updates</a>(<a class=\"id\" href=\"#journal\">journal</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Finally we can mark the inode as dirty. */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a> = <a class=\"id\" href=\"#ext3_journal_start\">ext3_journal_start</a>(<a class=\"id\" href=\"#inode\">inode</a>, 1);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#handle\">handle</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext3_mark_inode_dirty\">ext3_mark_inode_dirty</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_sync\">h_sync</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_journal_stop\">ext3_journal_stop</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext3_std_error\">ext3_std_error</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#err\">err</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
];
xr_frag_insert('l/0a/fe5e68db8def20a7eb650678f0635d4d8cf3c6.xr', __xr_tmp);
