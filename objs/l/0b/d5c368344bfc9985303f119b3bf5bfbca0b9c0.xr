var __xr_tmp = [
"<span class=\"comment\"> *<span class=\"ts\"/>@pattern: the glob-style pattern to be matched against</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Either/both of text and pattern can be empty strings.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Match text against a glob-style pattern, with wildcards and simple sets:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>?<span class=\"ts\"/>matches any single character.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>*<span class=\"ts\"/>matches any run of characters.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>[xyz]<span class=\"ts\"/>matches a single character from the set: x, y, or z.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>[a-d]<span class=\"ts\"/>matches a single character from the range: a, b, c, or d.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>[a-d0-9] matches a single character from either range.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The special characters ?, [, -, or *, can be matched using a set, eg. [*]</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Behaviour with malformed patterns is undefined, though generally reasonable.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Sample patterns:  \"SD1?\",  \"SD1[0-5]\",  \"*R0\",  \"SD*1?[012]*xx\"</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function uses one level of recursion per '*' in pattern.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Since it calls _nothing_ else, and has _no_ explicit local variables,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>this will not cause stack problems for any reasonable use here.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0 on match, 1 otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#glob_match\">glob_match</a> (const char *<a class=\"id\" href=\"#text\">text</a>, const char *<a class=\"id\" href=\"#pattern\">pattern</a>)", 
"{", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Match single character or a '?' wildcard */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#text\">text</a> == *<a class=\"id\" href=\"#pattern\">pattern</a> || *<a class=\"id\" href=\"#pattern\">pattern</a> == '?') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!*<a class=\"id\" href=\"#pattern\">pattern</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;  <span class=\"comment\">/* End of both strings: match */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Match single char against a '[' bracketed ']' pattern set */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!*<a class=\"id\" href=\"#text\">text</a> || *<a class=\"id\" href=\"#pattern\">pattern</a> != '[')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;  <span class=\"comment\">/* Not a pattern set */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (*++<a class=\"id\" href=\"#pattern\">pattern</a> && *<a class=\"id\" href=\"#pattern\">pattern</a> != ']' && *<a class=\"id\" href=\"#text\">text</a> != *<a class=\"id\" href=\"#pattern\">pattern</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#pattern\">pattern</a> == '-' && *(<a class=\"id\" href=\"#pattern\">pattern</a> - 1) != '[')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#text\">text</a> &gt; *(<a class=\"id\" href=\"#pattern\">pattern</a> - 1) && *<a class=\"id\" href=\"#text\">text</a> &lt; *(<a class=\"id\" href=\"#pattern\">pattern</a> + 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#pattern\">pattern</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!*<a class=\"id\" href=\"#pattern\">pattern</a> || *<a class=\"id\" href=\"#pattern\">pattern</a> == ']')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;  <span class=\"comment\">/* No match */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (*<a class=\"id\" href=\"#pattern\">pattern</a> && *<a class=\"id\" href=\"#pattern\">pattern</a>++ != ']');", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} while (*++<a class=\"id\" href=\"#text\">text</a> && *<a class=\"id\" href=\"#pattern\">pattern</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Match any run of chars against a '*' wildcard */</span>", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#pattern\">pattern</a> == '*') {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!*++<a class=\"id\" href=\"#pattern\">pattern</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;  <span class=\"comment\">/* Match: avoid recursion at end of pattern */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Loop to handle additional pattern chars after the wildcard */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>while (*<a class=\"id\" href=\"#text\">text</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#glob_match\">glob_match</a>(<a class=\"id\" href=\"#text\">text</a>, <a class=\"id\" href=\"#pattern\">pattern</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;  <span class=\"comment\">/* Remainder matched */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#text\">text</a>;  <span class=\"comment\">/* Absorb (match) this char and try again */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!*<a class=\"id\" href=\"#text\">text</a> && !*<a class=\"id\" href=\"#pattern\">pattern</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;  <span class=\"comment\">/* End of both strings: match */</span>", 
"<span class=\"ts\"/>return 1;  <span class=\"comment\">/* No match */</span>", 
"}", 
" ", 
"static unsigned long <a class=\"id\" href=\"#ata_dev_blacklisted\">ata_dev_blacklisted</a>(const struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#model_num\">model_num</a>[<a class=\"id\" href=\"#ATA_ID_PROD_LEN\">ATA_ID_PROD_LEN</a> + 1];", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#model_rev\">model_rev</a>[<a class=\"id\" href=\"#ATA_ID_FW_REV_LEN\">ATA_ID_FW_REV_LEN</a> + 1];", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#ata_blacklist_entry\">ata_blacklist_entry</a> *<a class=\"id\" href=\"#ad\">ad</a> = <a class=\"id\" href=\"#ata_device_blacklist\">ata_device_blacklist</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_id_c_string\">ata_id_c_string</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#model_num\">model_num</a>, <a class=\"id\" href=\"#ATA_ID_PROD\">ATA_ID_PROD</a>, sizeof(<a class=\"id\" href=\"#model_num\">model_num</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_id_c_string\">ata_id_c_string</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#model_rev\">model_rev</a>, <a class=\"id\" href=\"#ATA_ID_FW_REV\">ATA_ID_FW_REV</a>, sizeof(<a class=\"id\" href=\"#model_rev\">model_rev</a>));", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#ad\">ad</a>-><a class=\"id\" href=\"#model_num\">model_num</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#glob_match\">glob_match</a>(<a class=\"id\" href=\"#model_num\">model_num</a>, <a class=\"id\" href=\"#ad\">ad</a>-><a class=\"id\" href=\"#model_num\">model_num</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ad\">ad</a>-><a class=\"id\" href=\"#model_rev\">model_rev</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ad\">ad</a>-><a class=\"id\" href=\"#horkage\">horkage</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#glob_match\">glob_match</a>(<a class=\"id\" href=\"#model_rev\">model_rev</a>, <a class=\"id\" href=\"#ad\">ad</a>-><a class=\"id\" href=\"#model_rev\">model_rev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ad\">ad</a>-><a class=\"id\" href=\"#horkage\">horkage</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ad\">ad</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ata_dma_blacklisted\">ata_dma_blacklisted</a>(const struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* We don't support polling DMA.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * DMA blacklist those ATAPI devices with CDB-intr (and use PIO)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if the LLDD handles only interrupts in the HSM_ST_LAST state.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_FLAG_PIO_POLLING\">ATA_FLAG_PIO_POLLING</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_DFLAG_CDB_INTR\">ATA_DFLAG_CDB_INTR</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#horkage\">horkage</a> &amp; <a class=\"id\" href=\"#ATA_HORKAGE_NODMA\">ATA_HORKAGE_NODMA</a>) ? 1 : 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_is_40wire<span class=\"ts\"/><span class=\"ts\"/>-<span class=\"ts\"/>check drive side detection</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Perform drive side detection decoding, allowing for device vendors</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>who can't follow the documentation.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#ata_is_40wire\">ata_is_40wire</a>(struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#horkage\">horkage</a> &amp; <a class=\"id\" href=\"#ATA_HORKAGE_IVB\">ATA_HORKAGE_IVB</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ata_drive_40wire_relaxed\">ata_drive_40wire_relaxed</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ata_drive_40wire\">ata_drive_40wire</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#id\">id</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>cable_is_40wire<span class=\"ts\"/><span class=\"ts\"/>-<span class=\"ts\"/>40/80/SATA decider</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ap: port to consider</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function encapsulates the policy for speed management</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>in one place. At the moment we don't cache the result but</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>there is a good case for setting ap-&gt;cbl to the result when</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>we are called with unknown cables (and figuring out if it</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>impacts hotplug at all).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Return 1 if the cable appears to be 40 wire.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#cable_is_40wire\">cable_is_40wire</a>(struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_link\">ata_link</a> *<a class=\"id\" href=\"#link\">link</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If the controller thinks we are 40 wire, we are. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#cbl\">cbl</a> == <a class=\"id\" href=\"#ATA_CBL_PATA40\">ATA_CBL_PATA40</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If the controller thinks we are 80 wire, we are. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#cbl\">cbl</a> == <a class=\"id\" href=\"#ATA_CBL_PATA80\">ATA_CBL_PATA80</a> || <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#cbl\">cbl</a> == <a class=\"id\" href=\"#ATA_CBL_SATA\">ATA_CBL_SATA</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If the system is known to be 40 wire short cable (eg</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * laptop), then we allow 80 wire modes even if the drive</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * isn't sure.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#cbl\">cbl</a> == <a class=\"id\" href=\"#ATA_CBL_PATA40_SHORT\">ATA_CBL_PATA40_SHORT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If the controller doesn't know, we scan.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note: We look for all 40 wire detects at this point.  Any</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *       80 wire detect is taken to be 80 wire cable because</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - in many setups only the one drive (slave if present) will</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   give a valid detect</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - if you have a non detect capable drive you don't want it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   to colour the choice</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_for_each_link\">ata_for_each_link</a>(<a class=\"id\" href=\"#link\">link</a>, <a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#EDGE\">EDGE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_for_each_dev\">ata_for_each_dev</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#link\">link</a>, <a class=\"id\" href=\"#ENABLED\">ENABLED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ata_is_40wire\">ata_is_40wire</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_dev_xfermask - Compute supported xfermask of the given device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: Device to compute xfermask for</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Compute supported xfermask of @dev and store it in</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dev-&gt;*_mask.  This function is responsible for applying all</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>known limits including host controller limits, device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>blacklist, etc...</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>None.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ata_dev_xfermask\">ata_dev_xfermask</a>(struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_link\">ata_link</a> *<a class=\"id\" href=\"#link\">link</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#link\">link</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#ap\">ap</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_host\">ata_host</a> *<a class=\"id\" href=\"#host\">host</a> = <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#xfer_mask\">xfer_mask</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* controller modes available */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xfer_mask\">xfer_mask</a> = <a class=\"id\" href=\"#ata_pack_xfermask\">ata_pack_xfermask</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#pio_mask\">pio_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#mwdma_mask\">mwdma_mask</a>, <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#udma_mask\">udma_mask</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* drive modes available */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xfer_mask\">xfer_mask</a> &= <a class=\"id\" href=\"#ata_pack_xfermask\">ata_pack_xfermask</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pio_mask\">pio_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mwdma_mask\">mwdma_mask</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#udma_mask\">udma_mask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xfer_mask\">xfer_mask</a> &= <a class=\"id\" href=\"#ata_id_xfermask\">ata_id_xfermask</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#id\">id</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>CFA Advanced TrueIDE timings are not allowed on a shared</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>cable</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_dev_pair\">ata_dev_pair</a>(<a class=\"id\" href=\"#dev\">dev</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* No PIO5 or PIO6 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xfer_mask\">xfer_mask</a> &= ~(0x03 << (<a class=\"id\" href=\"#ATA_SHIFT_PIO\">ATA_SHIFT_PIO</a> + 5));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* No MWDMA3 or MWDMA 4 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xfer_mask\">xfer_mask</a> &= ~(0x03 << (<a class=\"id\" href=\"#ATA_SHIFT_MWDMA\">ATA_SHIFT_MWDMA</a> + 3));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_dma_blacklisted\">ata_dma_blacklisted</a>(<a class=\"id\" href=\"#dev\">dev</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xfer_mask\">xfer_mask</a> &= ~(<a class=\"id\" href=\"#ATA_MASK_MWDMA\">ATA_MASK_MWDMA</a> | <a class=\"id\" href=\"#ATA_MASK_UDMA\">ATA_MASK_UDMA</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_printk\">ata_dev_printk</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"device is on DMA blacklist, disabling DMA\\n\");", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_HOST_SIMPLEX\">ATA_HOST_SIMPLEX</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#simplex_claimed\">simplex_claimed</a> && <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#simplex_claimed\">simplex_claimed</a> != <a class=\"id\" href=\"#ap\">ap</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xfer_mask\">xfer_mask</a> &= ~(<a class=\"id\" href=\"#ATA_MASK_MWDMA\">ATA_MASK_MWDMA</a> | <a class=\"id\" href=\"#ATA_MASK_UDMA\">ATA_MASK_UDMA</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_printk\">ata_dev_printk</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>, \"simplex DMA is claimed by \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"other device, disabling DMA\\n\");", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_FLAG_NO_IORDY\">ATA_FLAG_NO_IORDY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xfer_mask\">xfer_mask</a> &= <a class=\"id\" href=\"#ata_pio_mask_no_iordy\">ata_pio_mask_no_iordy</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#mode_filter\">mode_filter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xfer_mask\">xfer_mask</a> = <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#mode_filter\">mode_filter</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#xfer_mask\">xfer_mask</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Apply cable rule here.  Don't apply it early because when</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we handle hot plug the cable type can itself change.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check this last so that we know if the transfer rate was</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * solely limited by the cable.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Unknown or 80 wire cables reported host side are checked</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * drive side as well. Cases where we know a 40wire cable</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is used safely for 80 are not checked here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#xfer_mask\">xfer_mask</a> &amp; (0xF8 << <a class=\"id\" href=\"#ATA_SHIFT_UDMA\">ATA_SHIFT_UDMA</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* UDMA/44 or higher would be available */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cable_is_40wire\">cable_is_40wire</a>(<a class=\"id\" href=\"#ap\">ap</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_printk\">ata_dev_printk</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"limited to UDMA/33 due to 40-wire cable\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xfer_mask\">xfer_mask</a> &= ~(0xF8 << <a class=\"id\" href=\"#ATA_SHIFT_UDMA\">ATA_SHIFT_UDMA</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_unpack_xfermask\">ata_unpack_xfermask</a>(<a class=\"id\" href=\"#xfer_mask\">xfer_mask</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pio_mask\">pio_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mwdma_mask\">mwdma_mask</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#udma_mask\">udma_mask</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_dev_set_xfermode - Issue SET FEATURES - XFER MODE command</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: Device to which command will be sent</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Issue SET FEATURES - XFER MODE command to device @dev</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>on port @ap.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>PCI/etc. bus probe sem.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0 on success, AC_ERR_* mask otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static unsigned int <a class=\"id\" href=\"#ata_dev_set_xfermode\">ata_dev_set_xfermode</a>(struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_taskfile\">ata_taskfile</a> <a class=\"id\" href=\"#tf\">tf</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#err_mask\">err_mask</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* set up set-features taskfile */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(\"set features - xfer mode\\n\");", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Some controllers and ATAPI devices show flaky interrupt</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * behavior after setting xfer mode.  Use polling instead.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_tf_init\">ata_tf_init</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#tf\">tf</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#command\">command</a> = <a class=\"id\" href=\"#ATA_CMD_SET_FEATURES\">ATA_CMD_SET_FEATURES</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#feature\">feature</a> = <a class=\"id\" href=\"#SETFEATURES_XFER\">SETFEATURES_XFER</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_TFLAG_ISADDR\">ATA_TFLAG_ISADDR</a> | <a class=\"id\" href=\"#ATA_TFLAG_DEVICE\">ATA_TFLAG_DEVICE</a> | <a class=\"id\" href=\"#ATA_TFLAG_POLLING\">ATA_TFLAG_POLLING</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#protocol\">protocol</a> = <a class=\"id\" href=\"#ATA_PROT_NODATA\">ATA_PROT_NODATA</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* If we are using IORDY we must send the mode setting command */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_pio_need_iordy\">ata_pio_need_iordy</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#nsect\">nsect</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#xfer_mode\">xfer_mode</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* If the device has IORDY and the controller does not - turn it off */</span>", 
" <span class=\"ts\"/>else if (<a class=\"id\" href=\"#ata_id_has_iordy\">ata_id_has_iordy</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#id\">id</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#nsect\">nsect</a> = 0x01;", 
"<span class=\"ts\"/>else <span class=\"comment\">/* In the ancient relic department - skip all of this */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err_mask\">err_mask</a> = <a class=\"id\" href=\"#ata_exec_internal\">ata_exec_internal</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#tf\">tf</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#DMA_NONE\">DMA_NONE</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0, 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(\"EXIT, err_mask=%x\\n\", <a class=\"id\" href=\"#err_mask\">err_mask</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err_mask\">err_mask</a>;", 
"}", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_dev_set_feature - Issue SET FEATURES - SATA FEATURES</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: Device to which command will be sent</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@enable: Whether to enable or disable the feature</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@feature: The sector count represents the feature to set</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Issue SET FEATURES - SATA FEATURES command to device @dev</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>on port @ap with sector count</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>PCI/etc. bus probe sem.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0 on success, AC_ERR_* mask otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned int <a class=\"id\" href=\"#ata_dev_set_feature\">ata_dev_set_feature</a>(struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#enable\">enable</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#feature\">feature</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_taskfile\">ata_taskfile</a> <a class=\"id\" href=\"#tf\">tf</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#err_mask\">err_mask</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* set up set-features taskfile */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(\"set features - SATA features\\n\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_tf_init\">ata_tf_init</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#tf\">tf</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#command\">command</a> = <a class=\"id\" href=\"#ATA_CMD_SET_FEATURES\">ATA_CMD_SET_FEATURES</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#feature\">feature</a> = <a class=\"id\" href=\"#enable\">enable</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_TFLAG_ISADDR\">ATA_TFLAG_ISADDR</a> | <a class=\"id\" href=\"#ATA_TFLAG_DEVICE\">ATA_TFLAG_DEVICE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#protocol\">protocol</a> = <a class=\"id\" href=\"#ATA_PROT_NODATA\">ATA_PROT_NODATA</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#nsect\">nsect</a> = <a class=\"id\" href=\"#feature\">feature</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err_mask\">err_mask</a> = <a class=\"id\" href=\"#ata_exec_internal\">ata_exec_internal</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#tf\">tf</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#DMA_NONE\">DMA_NONE</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0, 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(\"EXIT, err_mask=%x\\n\", <a class=\"id\" href=\"#err_mask\">err_mask</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err_mask\">err_mask</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_dev_init_params - Issue INIT DEV PARAMS command</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: Device to which command will be sent</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@heads: Number of heads (taskfile parameter)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sectors: Number of sectors (taskfile parameter)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Kernel thread context (may sleep)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0 on success, AC_ERR_* mask otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned int <a class=\"id\" href=\"#ata_dev_init_params\">ata_dev_init_params</a>(struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#heads\">heads</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#sectors\">sectors</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_taskfile\">ata_taskfile</a> <a class=\"id\" href=\"#tf\">tf</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#err_mask\">err_mask</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Number of sectors per track 1-255. Number of heads 1-16 */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sectors\">sectors</a> &lt; 1 || <a class=\"id\" href=\"#sectors\">sectors</a> &gt; 255 || <a class=\"id\" href=\"#heads\">heads</a> &lt; 1 || <a class=\"id\" href=\"#heads\">heads</a> &gt; 16)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#AC_ERR_INVALID\">AC_ERR_INVALID</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* set up init dev params taskfile */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(\"init dev params \\n\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_tf_init\">ata_tf_init</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#tf\">tf</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#command\">command</a> = <a class=\"id\" href=\"#ATA_CMD_INIT_DEV_PARAMS\">ATA_CMD_INIT_DEV_PARAMS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_TFLAG_ISADDR\">ATA_TFLAG_ISADDR</a> | <a class=\"id\" href=\"#ATA_TFLAG_DEVICE\">ATA_TFLAG_DEVICE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#protocol\">protocol</a> = <a class=\"id\" href=\"#ATA_PROT_NODATA\">ATA_PROT_NODATA</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#nsect\">nsect</a> = <a class=\"id\" href=\"#sectors\">sectors</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#device\">device</a> |= (<a class=\"id\" href=\"#heads\">heads</a> - 1) &amp; 0x0f; <span class=\"comment\">/* max head = num. of heads - 1 */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err_mask\">err_mask</a> = <a class=\"id\" href=\"#ata_exec_internal\">ata_exec_internal</a>(<a class=\"id\" href=\"#dev\">dev</a>, &amp;<a class=\"id\" href=\"#tf\">tf</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#DMA_NONE\">DMA_NONE</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0, 0);", 
"<span class=\"ts\"/><span class=\"comment\">/* A clean abort indicates an original or just out of spec drive</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   and we should continue as we issue the setup based on the</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   drive reported working geometry */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err_mask\">err_mask</a> == <a class=\"id\" href=\"#AC_ERR_DEV\">AC_ERR_DEV</a> && (<a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#feature\">feature</a> &amp; <a class=\"id\" href=\"#ATA_ABORTED\">ATA_ABORTED</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err_mask\">err_mask</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(\"EXIT, err_mask=%x\\n\", <a class=\"id\" href=\"#err_mask\">err_mask</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err_mask\">err_mask</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_sg_clean - Unmap DMA memory associated with command</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@qc: Command containing DMA memory to be released</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Unmap all mapped DMA memory associated with this command.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>spin_lock_irqsave(host lock)</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ata_sg_clean\">ata_sg_clean</a>(struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#ap\">ap</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sg\">sg</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#sg\">sg</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#dir\">dir</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#dma_dir\">dma_dir</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#sg\">sg</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VPRINTK\">VPRINTK</a>(\"unmapping %u sg elements\\n\", <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#n_elem\">n_elem</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#n_elem\">n_elem</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_unmap_sg\">dma_unmap_sg</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#sg\">sg</a>, <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#orig_n_elem\">orig_n_elem</a>, <a class=\"id\" href=\"#dir\">dir</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#ATA_QCFLAG_DMAMAP\">ATA_QCFLAG_DMAMAP</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#sg\">sg</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>atapi_check_dma - Check whether ATAPI DMA can be supported</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@qc: Metadata associated with taskfile to check</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Allow low-level driver to filter ATA PACKET commands, returning</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>a status indicating whether or not it is OK to use DMA for the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>supplied PACKET command.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>spin_lock_irqsave(host lock)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS: 0 when ATAPI DMA can be used</span>", 
"<span class=\"comment\"> *               nonzero otherwise</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#atapi_check_dma\">atapi_check_dma</a>(struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#ap\">ap</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't allow DMA if it isn't multiple of 16 bytes.  Quite a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * few ATAPI devices choke on such DMA requests.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#horkage\">horkage</a> &amp; <a class=\"id\" href=\"#ATA_HORKAGE_ATAPI_MOD16_DMA\">ATA_HORKAGE_ATAPI_MOD16_DMA</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#nbytes\">nbytes</a> &amp; 15))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#check_atapi_dma\">check_atapi_dma</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#check_atapi_dma\">check_atapi_dma</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_std_qc_defer - Check whether a qc needs to be deferred</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@qc: ATA command in question</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Non-NCQ commands cannot run with any other command, NCQ or</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>not.  As upper layer only knows the queue depth, we are</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>responsible for maintaining exclusion.  This function checks</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>whether a new command @qc can be issued.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>spin_lock_irqsave(host lock)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ATA_DEFER_* if deferring is needed, 0 otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ata_std_qc_defer\">ata_std_qc_defer</a>(struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_link\">ata_link</a> *<a class=\"id\" href=\"#link\">link</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#link\">link</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#protocol\">protocol</a> == <a class=\"id\" href=\"#ATA_PROT_NCQ\">ATA_PROT_NCQ</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ata_tag_valid\">ata_tag_valid</a>(<a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#active_tag\">active_tag</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ata_tag_valid\">ata_tag_valid</a>(<a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#active_tag\">active_tag</a>) && !<a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#sactive\">sactive</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ATA_DEFER_LINK\">ATA_DEFER_LINK</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#ata_noop_qc_prep\">ata_noop_qc_prep</a>(struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>) { }", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_sg_init - Associate command with scatter-gather table.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@qc: Command to be associated</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sg: Scatter-gather table.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@n_elem: Number of elements in s/g table.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Initialize the data-related elements of queued_cmd @qc</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to point to a scatter-gather table @sg, containing @n_elem</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>elements.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>spin_lock_irqsave(host lock)</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ata_sg_init\">ata_sg_init</a>(struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>, struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sg\">sg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> unsigned int <a class=\"id\" href=\"#n_elem\">n_elem</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#sg\">sg</a> = <a class=\"id\" href=\"#sg\">sg</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#n_elem\">n_elem</a> = <a class=\"id\" href=\"#n_elem\">n_elem</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#cursg\">cursg</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#sg\">sg</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_sg_setup - DMA-map the scatter-gather table associated with a command.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@qc: Command with scatter-gather table to be mapped.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>DMA-map the scatter-gather table associated with queued_cmd @qc.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>spin_lock_irqsave(host lock)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Zero on success, negative on error.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ata_sg_setup\">ata_sg_setup</a>(struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#ap\">ap</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#n_elem\">n_elem</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VPRINTK\">VPRINTK</a>(\"ENTER, ata%u\\n\", <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#print_id\">print_id</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n_elem\">n_elem</a> = <a class=\"id\" href=\"#dma_map_sg\">dma_map_sg</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#sg\">sg</a>, <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#n_elem\">n_elem</a>, <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#dma_dir\">dma_dir</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#n_elem\">n_elem</a> &lt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(\"%d sg elements mapped\\n\", <a class=\"id\" href=\"#n_elem\">n_elem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#orig_n_elem\">orig_n_elem</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#n_elem\">n_elem</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#n_elem\">n_elem</a> = <a class=\"id\" href=\"#n_elem\">n_elem</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_QCFLAG_DMAMAP\">ATA_QCFLAG_DMAMAP</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>swap_buf_le16 - swap halves of 16-bit words in place</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@buf:  Buffer to swap</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@buf_words:  Number of 16-bit words in buffer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Swap halves of 16-bit words if needed to convert from</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>little-endian byte order to native cpu byte order, or</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>vice-versa.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Inherited from caller.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#swap_buf_le16\">swap_buf_le16</a>(<a class=\"id\" href=\"#u16\">u16</a> *<a class=\"id\" href=\"#buf\">buf</a>, unsigned int <a class=\"id\" href=\"#buf_words\">buf_words</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__BIG_ENDIAN\">__BIG_ENDIAN</a>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#buf_words\">buf_words</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(<a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __BIG_ENDIAN */</span>", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_qc_new - Request an available ATA command, for queueing</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ap: target port</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>None.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#ata_qc_new\">ata_qc_new</a>(struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* no command while frozen */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#pflags\">pflags</a> &amp; <a class=\"id\" href=\"#ATA_PFLAG_FROZEN\">ATA_PFLAG_FROZEN</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* the last tag is reserved for internal command. */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ATA_MAX_QUEUE\">ATA_MAX_QUEUE</a> - 1; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_and_set_bit\">test_and_set_bit</a>(<a class=\"id\" href=\"#i\">i</a>, &amp;<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#qc_allocated\">qc_allocated</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a> = <a class=\"id\" href=\"#__ata_qc_from_tag\">__ata_qc_from_tag</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#qc\">qc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tag\">tag</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#qc\">qc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_qc_new_init - Request an available ATA command, and initialize it</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: Device from whom we request an available command structure</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>None.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#ata_qc_new_init\">ata_qc_new_init</a>(struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#ap\">ap</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a> = <a class=\"id\" href=\"#ata_qc_new\">ata_qc_new</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#qc\">qc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#scsicmd\">scsicmd</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#ap\">ap</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_qc_reinit\">ata_qc_reinit</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#qc\">qc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_qc_free - free unused ata_queued_cmd</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@qc: Command to complete</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Designed to free unused ata_queued_cmd object</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>in case something prevents using it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>spin_lock_irqsave(host lock)</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ata_qc_free\">ata_qc_free</a>(struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#tag\">tag</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#qc\">qc</a> == <a class=\"id\" href=\"#NULL\">NULL</a>); <span class=\"comment\">/* ata_qc_from_tag _might_ return NULL */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#ap\">ap</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#flags\">flags</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tag\">tag</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tag\">tag</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#ata_tag_valid\">ata_tag_valid</a>(<a class=\"id\" href=\"#tag\">tag</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tag\">tag</a> = <a class=\"id\" href=\"#ATA_TAG_POISON\">ATA_TAG_POISON</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#tag\">tag</a>, &amp;<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#qc_allocated\">qc_allocated</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#__ata_qc_complete\">__ata_qc_complete</a>(struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_link\">ata_link</a> *<a class=\"id\" href=\"#link\">link</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#qc\">qc</a> == <a class=\"id\" href=\"#NULL\">NULL</a>); <span class=\"comment\">/* ata_qc_from_tag _might_ return NULL */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(!(<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_QCFLAG_ACTIVE\">ATA_QCFLAG_ACTIVE</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#ap\">ap</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#link\">link</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#link\">link</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_QCFLAG_DMAMAP\">ATA_QCFLAG_DMAMAP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_sg_clean\">ata_sg_clean</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* command should be marked inactive atomically with qc completion */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#protocol\">protocol</a> == <a class=\"id\" href=\"#ATA_PROT_NCQ\">ATA_PROT_NCQ</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#sactive\">sactive</a> &= ~(1 << <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tag\">tag</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#sactive\">sactive</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#nr_active_links\">nr_active_links</a>--;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#active_tag\">active_tag</a> = <a class=\"id\" href=\"#ATA_TAG_POISON\">ATA_TAG_POISON</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#nr_active_links\">nr_active_links</a>--;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* clear exclusive status */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_QCFLAG_CLEAR_EXCL\">ATA_QCFLAG_CLEAR_EXCL</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#excl_link\">excl_link</a> == <a class=\"id\" href=\"#link\">link</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#excl_link\">excl_link</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* atapi: mark qc as inactive to prevent the interrupt handler</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * from completing the command twice later, before the error handler</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is called. (when rc != 0 and atapi request sense is needed)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#ATA_QCFLAG_ACTIVE\">ATA_QCFLAG_ACTIVE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#qc_active\">qc_active</a> &= ~(1 << <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tag\">tag</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* call completion callback */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#complete_fn\">complete_fn</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#fill_result_tf\">fill_result_tf</a>(struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#ap\">ap</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#result_tf\">result_tf</a>.<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#qc_fill_rtf\">qc_fill_rtf</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ata_verify_xfer\">ata_verify_xfer</a>(struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_tag_internal\">ata_tag_internal</a>(<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tag\">tag</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_is_nodata\">ata_is_nodata</a>(<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#protocol\">protocol</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mwdma_mask\">mwdma_mask</a> || <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#udma_mask\">udma_mask</a>) && <a class=\"id\" href=\"#ata_is_pio\">ata_is_pio</a>(<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#protocol\">protocol</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#ATA_DFLAG_DUBIOUS_XFER\">ATA_DFLAG_DUBIOUS_XFER</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_qc_complete - Complete an active ATA command</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@qc: Command to complete</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Indicate to the mid and upper layers that an ATA</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>command has completed, with either an ok or not-ok status.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>spin_lock_irqsave(host lock)</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ata_qc_complete\">ata_qc_complete</a>(struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#ap\">ap</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* XXX: New EH and old EH use different mechanisms to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * synchronize EH with regular execution path.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In new EH, a failed qc is marked with ATA_QCFLAG_FAILED.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Normal execution path is responsible for not accessing a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * failed qc.  libata core enforces the rule by returning NULL</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * from ata_qc_from_tag() for failed qcs.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Old EH depends on ata_qc_complete() nullifying completion</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * requests if ATA_QCFLAG_EH_SCHEDULED is set.  Old EH does</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not synchronize with interrupt handler.  Only PIO task is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * taken care of.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#error_handler\">error_handler</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_eh_info\">ata_eh_info</a> *<a class=\"id\" href=\"#ehi\">ehi</a> = &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#eh_info\">eh_info</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#err_mask\">err_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_QCFLAG_FAILED\">ATA_QCFLAG_FAILED</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_QCFLAG_FAILED\">ATA_QCFLAG_FAILED</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* always fill result TF for failed qc */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fill_result_tf\">fill_result_tf</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ata_tag_internal\">ata_tag_internal</a>(<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tag\">tag</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_qc_schedule_eh\">ata_qc_schedule_eh</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__ata_qc_complete\">__ata_qc_complete</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#pflags\">pflags</a> &amp; <a class=\"id\" href=\"#ATA_PFLAG_FROZEN\">ATA_PFLAG_FROZEN</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* read result TF if requested */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_QCFLAG_RESULT_TF\">ATA_QCFLAG_RESULT_TF</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fill_result_tf\">fill_result_tf</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Some commands need post-processing after successful</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * completion.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#command\">command</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#ATA_CMD_SET_FEATURES\">ATA_CMD_SET_FEATURES</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#feature\">feature</a> != <a class=\"id\" href=\"#SETFEATURES_WC_ON\">SETFEATURES_WC_ON</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#feature\">feature</a> != <a class=\"id\" href=\"#SETFEATURES_WC_OFF\">SETFEATURES_WC_OFF</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fall through */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#ATA_CMD_INIT_DEV_PARAMS\">ATA_CMD_INIT_DEV_PARAMS</a>: <span class=\"comment\">/* CHS translation changed */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#ATA_CMD_SET_MULTI\">ATA_CMD_SET_MULTI</a>: <span class=\"comment\">/* multi_count changed */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* revalidate device */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ehi\">ehi</a>-><a class=\"id\" href=\"#dev_action\">dev_action</a>[<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devno\">devno</a>] |= <a class=\"id\" href=\"#ATA_EH_REVALIDATE\">ATA_EH_REVALIDATE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_port_schedule_eh\">ata_port_schedule_eh</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#ATA_CMD_SLEEP\">ATA_CMD_SLEEP</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_DFLAG_SLEEPING\">ATA_DFLAG_SLEEPING</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_DFLAG_DUBIOUS_XFER\">ATA_DFLAG_DUBIOUS_XFER</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_verify_xfer\">ata_verify_xfer</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__ata_qc_complete\">__ata_qc_complete</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_QCFLAG_EH_SCHEDULED\">ATA_QCFLAG_EH_SCHEDULED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* read result TF if failed or requested */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#err_mask\">err_mask</a> || <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_QCFLAG_RESULT_TF\">ATA_QCFLAG_RESULT_TF</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fill_result_tf\">fill_result_tf</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__ata_qc_complete\">__ata_qc_complete</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_qc_complete_multiple - Complete multiple qcs successfully</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ap: port in question</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@qc_active: new qc_active mask</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Complete in-flight commands.  This functions is meant to be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>called from low-level driver's interrupt routine to complete</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>requests normally.  ap-&gt;qc_active and @qc_active is compared</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and commands are completed accordingly.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>spin_lock_irqsave(host lock)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Number of completed commands on success, -errno otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ata_qc_complete_multiple\">ata_qc_complete_multiple</a>(struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#qc_active\">qc_active</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_done\">nr_done</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#done_mask\">done_mask</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#done_mask\">done_mask</a> = <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#qc_active\">qc_active</a> ^ <a class=\"id\" href=\"#qc_active\">qc_active</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#done_mask\">done_mask</a> &amp; <a class=\"id\" href=\"#qc_active\">qc_active</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_port_printk\">ata_port_printk</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>, \"illegal qc_active transition \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"(%08x->%08x)\\n\", <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#qc_active\">qc_active</a>, <a class=\"id\" href=\"#qc_active\">qc_active</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#done_mask\">done_mask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#tag\">tag</a> = <a class=\"id\" href=\"#__ffs\">__ffs</a>(<a class=\"id\" href=\"#done_mask\">done_mask</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a> = <a class=\"id\" href=\"#ata_qc_from_tag\">ata_qc_from_tag</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#tag\">tag</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#qc\">qc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_qc_complete\">ata_qc_complete</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_done\">nr_done</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#done_mask\">done_mask</a> &= ~(1 << <a class=\"id\" href=\"#tag\">tag</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr_done\">nr_done</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_qc_issue - issue taskfile to device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@qc: command to issue to device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Prepare an ATA command to submission to device.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This includes mapping the data into a DMA-able</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>area, filling in the S/G table, and finally</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>writing the taskfile to hardware, starting the command.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>spin_lock_irqsave(host lock)</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ata_qc_issue\">ata_qc_issue</a>(struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#ap\">ap</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_link\">ata_link</a> *<a class=\"id\" href=\"#link\">link</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#link\">link</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#prot\">prot</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tf\">tf</a>.<a class=\"id\" href=\"#protocol\">protocol</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Make sure only one non-NCQ command is outstanding.  The</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * check is skipped for old EH because it reuses active qc to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * request ATAPI sense.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#error_handler\">error_handler</a> && <a class=\"id\" href=\"#ata_tag_valid\">ata_tag_valid</a>(<a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#active_tag\">active_tag</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_is_ncq\">ata_is_ncq</a>(<a class=\"id\" href=\"#prot\">prot</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#sactive\">sactive</a> &amp; (1 << <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tag\">tag</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#sactive\">sactive</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#nr_active_links\">nr_active_links</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#sactive\">sactive</a> |= 1 << <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tag\">tag</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#sactive\">sactive</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#nr_active_links\">nr_active_links</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#active_tag\">active_tag</a> = <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tag\">tag</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_QCFLAG_ACTIVE\">ATA_QCFLAG_ACTIVE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#qc_active\">qc_active</a> |= 1 << <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#tag\">tag</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We guarantee to LLDs that they will have at least one</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * non-zero sg if the command is a data command.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#ata_is_data\">ata_is_data</a>(<a class=\"id\" href=\"#prot\">prot</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> (!<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#sg\">sg</a> || !<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#n_elem\">n_elem</a> || !<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#nbytes\">nbytes</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#sys_err\">sys_err</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_is_dma\">ata_is_dma</a>(<a class=\"id\" href=\"#prot\">prot</a>) || (<a class=\"id\" href=\"#ata_is_pio\">ata_is_pio</a>(<a class=\"id\" href=\"#prot\">prot</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_FLAG_PIO_DMA\">ATA_FLAG_PIO_DMA</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_sg_setup\">ata_sg_setup</a>(<a class=\"id\" href=\"#qc\">qc</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#sys_err\">sys_err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* if device is sleeping, schedule reset and abort the link */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_DFLAG_SLEEPING\">ATA_DFLAG_SLEEPING</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#eh_info\">eh_info</a>.<a class=\"id\" href=\"#action\">action</a> |= <a class=\"id\" href=\"#ATA_EH_RESET\">ATA_EH_RESET</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_ehi_push_desc\">ata_ehi_push_desc</a>(&amp;<a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#eh_info\">eh_info</a>, \"waking up from sleep\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_link_abort\">ata_link_abort</a>(<a class=\"id\" href=\"#link\">link</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#qc_prep\">qc_prep</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#err_mask\">err_mask</a> |= <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#qc_issue\">qc_issue</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#err_mask\">err_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>return;", 
"", 
"<a class=\"id\" href=\"#sys_err\">sys_err</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#err_mask\">err_mask</a> |= <a class=\"id\" href=\"#AC_ERR_SYSTEM\">AC_ERR_SYSTEM</a>;", 
"<a class=\"id\" href=\"#err\">err</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_qc_complete\">ata_qc_complete</a>(<a class=\"id\" href=\"#qc\">qc</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sata_scr_valid - test whether SCRs are accessible</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@link: ATA link to test SCR accessibility for</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Test whether SCRs are accessible for @link.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>None.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>1 if SCRs are accessible, 0 otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#sata_scr_valid\">sata_scr_valid</a>(struct <a class=\"id\" href=\"#ata_link\">ata_link</a> *<a class=\"id\" href=\"#link\">link</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#ap\">ap</a>;", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_FLAG_SATA\">ATA_FLAG_SATA</a>) && <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#scr_read\">scr_read</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sata_scr_read - read SCR register of the specified port</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@link: ATA link to read SCR for</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@reg: SCR to read</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@val: Place to store read value</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Read SCR register @reg of @link into *@val.  This function is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>guaranteed to succeed if @link is ap-&gt;link, the cable type of</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the port is SATA and the port implements -&gt;scr_read.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>None if @link is ap-&gt;link.  Kernel thread context otherwise.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0 on success, negative errno on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#sata_scr_read\">sata_scr_read</a>(struct <a class=\"id\" href=\"#ata_link\">ata_link</a> *<a class=\"id\" href=\"#link\">link</a>, int <a class=\"id\" href=\"#reg\">reg</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_is_host_link\">ata_is_host_link</a>(<a class=\"id\" href=\"#link\">link</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sata_scr_valid\">sata_scr_valid</a>(<a class=\"id\" href=\"#link\">link</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#scr_read\">scr_read</a>(<a class=\"id\" href=\"#link\">link</a>, <a class=\"id\" href=\"#reg\">reg</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sata_pmp_scr_read\">sata_pmp_scr_read</a>(<a class=\"id\" href=\"#link\">link</a>, <a class=\"id\" href=\"#reg\">reg</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sata_scr_write - write SCR register of the specified port</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@link: ATA link to write SCR for</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@reg: SCR to write</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@val: value to write</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Write @val to SCR register @reg of @link.  This function is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>guaranteed to succeed if @link is ap-&gt;link, the cable type of</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the port is SATA and the port implements -&gt;scr_read.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>None if @link is ap-&gt;link.  Kernel thread context otherwise.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0 on success, negative errno on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#sata_scr_write\">sata_scr_write</a>(struct <a class=\"id\" href=\"#ata_link\">ata_link</a> *<a class=\"id\" href=\"#link\">link</a>, int <a class=\"id\" href=\"#reg\">reg</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_is_host_link\">ata_is_host_link</a>(<a class=\"id\" href=\"#link\">link</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sata_scr_valid\">sata_scr_valid</a>(<a class=\"id\" href=\"#link\">link</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#scr_write\">scr_write</a>(<a class=\"id\" href=\"#link\">link</a>, <a class=\"id\" href=\"#reg\">reg</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sata_pmp_scr_write\">sata_pmp_scr_write</a>(<a class=\"id\" href=\"#link\">link</a>, <a class=\"id\" href=\"#reg\">reg</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sata_scr_write_flush - write SCR register of the specified port and flush</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@link: ATA link to write SCR for</span>", 
];
xr_frag_insert('l/0b/d5c368344bfc9985303f119b3bf5bfbca0b9c0.xr', __xr_tmp);
