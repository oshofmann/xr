var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * NetLabel Network Address Lists</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file contains network address list functions used to manage ordered</span>", 
"<span class=\"comment\"> * lists of network addresses for use by the NetLabel subsystem.  The NetLabel</span>", 
"<span class=\"comment\"> * system manages static and dynamic label mappings for network protocols such</span>", 
"<span class=\"comment\"> * as CIPSO and RIPSO.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Author: Paul Moore &lt;paul.moore@hp.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * (c) Copyright Hewlett-Packard Development Company, L.P., 2008</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software;  you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> * the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\"> * (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> * but WITHOUT ANY WARRANTY;  without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See</span>", 
"<span class=\"comment\"> * the GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> * along with this program;  if not, write to the Free Software</span>", 
"<span class=\"comment\"> * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rcupdate\">rcupdate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#in\">in</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#in6\">in6</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ip\">ip</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ipv6\">ipv6</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#ip\">ip</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#ipv6\">ipv6</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#audit\">audit</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"netlabel_addrlist.h\"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Address List Functions</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * netlbl_af4list_search - Search for a matching IPv4 address entry</span>", 
"<span class=\"comment\"> * @addr: IPv4 address</span>", 
"<span class=\"comment\"> * @head: the list head</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * Searches the IPv4 address list given by @head.  If a matching address entry</span>", 
"<span class=\"comment\"> * is found it is returned, otherwise NULL is returned.  The caller is</span>", 
"<span class=\"comment\"> * responsible for calling the rcu_read_[un]lock() functions.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#netlbl_af4list\">netlbl_af4list</a> *<a class=\"id\" href=\"#netlbl_af4list_search\">netlbl_af4list_search</a>(<a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netlbl_af4list\">netlbl_af4list</a> *<a class=\"id\" href=\"#iter\">iter</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#iter\">iter</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#valid\">valid</a> && (<a class=\"id\" href=\"#addr\">addr</a> &amp; <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#mask\">mask</a>) == <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#addr\">addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#iter\">iter</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * netlbl_af4list_search_exact - Search for an exact IPv4 address entry</span>", 
"<span class=\"comment\"> * @addr: IPv4 address</span>", 
"<span class=\"comment\"> * @mask: IPv4 address mask</span>", 
"<span class=\"comment\"> * @head: the list head</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * Searches the IPv4 address list given by @head.  If an exact match if found</span>", 
"<span class=\"comment\"> * it is returned, otherwise NULL is returned.  The caller is responsible for</span>", 
"<span class=\"comment\"> * calling the rcu_read_[un]lock() functions.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#netlbl_af4list\">netlbl_af4list</a> *<a class=\"id\" href=\"#netlbl_af4list_search_exact\">netlbl_af4list_search_exact</a>(<a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#mask\">mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netlbl_af4list\">netlbl_af4list</a> *<a class=\"id\" href=\"#iter\">iter</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#iter\">iter</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#valid\">valid</a> && <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#addr\">addr</a> == <a class=\"id\" href=\"#addr\">addr</a> && <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#mask\">mask</a> == <a class=\"id\" href=\"#mask\">mask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#iter\">iter</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IPV6\">CONFIG_IPV6</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IPV6_MODULE\">CONFIG_IPV6_MODULE</a>)", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * netlbl_af6list_search - Search for a matching IPv6 address entry</span>", 
"<span class=\"comment\"> * @addr: IPv6 address</span>", 
"<span class=\"comment\"> * @head: the list head</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * Searches the IPv6 address list given by @head.  If a matching address entry</span>", 
"<span class=\"comment\"> * is found it is returned, otherwise NULL is returned.  The caller is</span>", 
"<span class=\"comment\"> * responsible for calling the rcu_read_[un]lock() functions.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#netlbl_af6list\">netlbl_af6list</a> *<a class=\"id\" href=\"#netlbl_af6list_search\">netlbl_af6list_search</a>(const struct <a class=\"id\" href=\"#in6_addr\">in6_addr</a> *<a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netlbl_af6list\">netlbl_af6list</a> *<a class=\"id\" href=\"#iter\">iter</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#iter\">iter</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#valid\">valid</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ipv6_masked_addr_cmp\">ipv6_masked_addr_cmp</a>(&amp;<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#addr\">addr</a>, &amp;<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#addr\">addr</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#iter\">iter</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * netlbl_af6list_search_exact - Search for an exact IPv6 address entry</span>", 
"<span class=\"comment\"> * @addr: IPv6 address</span>", 
"<span class=\"comment\"> * @mask: IPv6 address mask</span>", 
"<span class=\"comment\"> * @head: the list head</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * Searches the IPv6 address list given by @head.  If an exact match if found</span>", 
"<span class=\"comment\"> * it is returned, otherwise NULL is returned.  The caller is responsible for</span>", 
"<span class=\"comment\"> * calling the rcu_read_[un]lock() functions.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#netlbl_af6list\">netlbl_af6list</a> *<a class=\"id\" href=\"#netlbl_af6list_search_exact\">netlbl_af6list_search_exact</a>(const struct <a class=\"id\" href=\"#in6_addr\">in6_addr</a> *<a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const struct <a class=\"id\" href=\"#in6_addr\">in6_addr</a> *<a class=\"id\" href=\"#mask\">mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netlbl_af6list\">netlbl_af6list</a> *<a class=\"id\" href=\"#iter\">iter</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#iter\">iter</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#valid\">valid</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ipv6_addr_equal\">ipv6_addr_equal</a>(&amp;<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#addr\">addr</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ipv6_addr_equal\">ipv6_addr_equal</a>(&amp;<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#mask\">mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#iter\">iter</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* IPv6 */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * netlbl_af4list_add - Add a new IPv4 address entry to a list</span>", 
"<span class=\"comment\"> * @entry: address entry</span>", 
"<span class=\"comment\"> * @head: the list head</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * Add a new address entry to the list pointed to by @head.  On success zero is</span>", 
"<span class=\"comment\"> * returned, otherwise a negative value is returned.  The caller is responsible</span>", 
"<span class=\"comment\"> * for calling the necessary locking functions.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#netlbl_af4list_add\">netlbl_af4list_add</a>(struct <a class=\"id\" href=\"#netlbl_af4list\">netlbl_af4list</a> *<a class=\"id\" href=\"#entry\">entry</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netlbl_af4list\">netlbl_af4list</a> *<a class=\"id\" href=\"#iter\">iter</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a> = <a class=\"id\" href=\"#netlbl_af4list_search\">netlbl_af4list_search</a>(<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#iter\">iter</a> != <a class=\"id\" href=\"#NULL\">NULL</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#addr\">addr</a> == <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#addr\">addr</a> && <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#mask\">mask</a> == <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#mask\">mask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EEXIST\">EEXIST</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* in order to speed up address searches through the list (the common</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * case) we need to keep the list in order based on the size of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * address mask such that the entry with the widest mask (smallest</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * numerical value) appears first in the list */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#iter\">iter</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#valid\">valid</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ntohl\">ntohl</a>(<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#mask\">mask</a>) &gt; <a class=\"id\" href=\"#ntohl\">ntohl</a>(<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#mask\">mask</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__list_add_rcu\">__list_add_rcu</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#list\">list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#prev\">prev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail_rcu\">list_add_tail_rcu</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IPV6\">CONFIG_IPV6</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IPV6_MODULE\">CONFIG_IPV6_MODULE</a>)", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * netlbl_af6list_add - Add a new IPv6 address entry to a list</span>", 
"<span class=\"comment\"> * @entry: address entry</span>", 
"<span class=\"comment\"> * @head: the list head</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * Add a new address entry to the list pointed to by @head.  On success zero is</span>", 
"<span class=\"comment\"> * returned, otherwise a negative value is returned.  The caller is responsible</span>", 
"<span class=\"comment\"> * for calling the necessary locking functions.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#netlbl_af6list_add\">netlbl_af6list_add</a>(struct <a class=\"id\" href=\"#netlbl_af6list\">netlbl_af6list</a> *<a class=\"id\" href=\"#entry\">entry</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netlbl_af6list\">netlbl_af6list</a> *<a class=\"id\" href=\"#iter\">iter</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a> = <a class=\"id\" href=\"#netlbl_af6list_search\">netlbl_af6list_search</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#iter\">iter</a> != <a class=\"id\" href=\"#NULL\">NULL</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#ipv6_addr_equal\">ipv6_addr_equal</a>(&amp;<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#addr\">addr</a>, &amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#addr\">addr</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#ipv6_addr_equal\">ipv6_addr_equal</a>(&amp;<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#mask\">mask</a>, &amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#mask\">mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EEXIST\">EEXIST</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* in order to speed up address searches through the list (the common</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * case) we need to keep the list in order based on the size of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * address mask such that the entry with the widest mask (smallest</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * numerical value) appears first in the list */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#iter\">iter</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#valid\">valid</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ipv6_addr_cmp\">ipv6_addr_cmp</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#mask\">mask</a>, &amp;<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#mask\">mask</a>) &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__list_add_rcu\">__list_add_rcu</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#list\">list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#prev\">prev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail_rcu\">list_add_tail_rcu</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* IPv6 */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * netlbl_af4list_remove_entry - Remove an IPv4 address entry</span>", 
"<span class=\"comment\"> * @entry: address entry</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * Remove the specified IP address entry.  The caller is responsible for</span>", 
"<span class=\"comment\"> * calling the necessary locking functions.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#netlbl_af4list_remove_entry\">netlbl_af4list_remove_entry</a>(struct <a class=\"id\" href=\"#netlbl_af4list\">netlbl_af4list</a> *<a class=\"id\" href=\"#entry\">entry</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#valid\">valid</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * netlbl_af4list_remove - Remove an IPv4 address entry</span>", 
"<span class=\"comment\"> * @addr: IP address</span>", 
"<span class=\"comment\"> * @mask: IP address mask</span>", 
"<span class=\"comment\"> * @head: the list head</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * Remove an IP address entry from the list pointed to by @head.  Returns the</span>", 
"<span class=\"comment\"> * entry on success, NULL on failure.  The caller is responsible for calling</span>", 
"<span class=\"comment\"> * the necessary locking functions.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#netlbl_af4list\">netlbl_af4list</a> *<a class=\"id\" href=\"#netlbl_af4list_remove\">netlbl_af4list_remove</a>(<a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#mask\">mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netlbl_af4list\">netlbl_af4list</a> *<a class=\"id\" href=\"#entry\">entry</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#netlbl_af4list_search_exact\">netlbl_af4list_search_exact</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#entry\">entry</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netlbl_af4list_remove_entry\">netlbl_af4list_remove_entry</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#entry\">entry</a>;", 
"}", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IPV6\">CONFIG_IPV6</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IPV6_MODULE\">CONFIG_IPV6_MODULE</a>)", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * netlbl_af6list_remove_entry - Remove an IPv6 address entry</span>", 
"<span class=\"comment\"> * @entry: address entry</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * Remove the specified IP address entry.  The caller is responsible for</span>", 
"<span class=\"comment\"> * calling the necessary locking functions.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#netlbl_af6list_remove_entry\">netlbl_af6list_remove_entry</a>(struct <a class=\"id\" href=\"#netlbl_af6list\">netlbl_af6list</a> *<a class=\"id\" href=\"#entry\">entry</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#valid\">valid</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * netlbl_af6list_remove - Remove an IPv6 address entry</span>", 
"<span class=\"comment\"> * @addr: IP address</span>", 
"<span class=\"comment\"> * @mask: IP address mask</span>", 
"<span class=\"comment\"> * @head: the list head</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * Remove an IP address entry from the list pointed to by @head.  Returns the</span>", 
"<span class=\"comment\"> * entry on success, NULL on failure.  The caller is responsible for calling</span>", 
"<span class=\"comment\"> * the necessary locking functions.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#netlbl_af6list\">netlbl_af6list</a> *<a class=\"id\" href=\"#netlbl_af6list_remove\">netlbl_af6list_remove</a>(const struct <a class=\"id\" href=\"#in6_addr\">in6_addr</a> *<a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const struct <a class=\"id\" href=\"#in6_addr\">in6_addr</a> *<a class=\"id\" href=\"#mask\">mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netlbl_af6list\">netlbl_af6list</a> *<a class=\"id\" href=\"#entry\">entry</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#netlbl_af6list_search_exact\">netlbl_af6list_search_exact</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#entry\">entry</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netlbl_af6list_remove_entry\">netlbl_af6list_remove_entry</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#entry\">entry</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* IPv6 */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Audit Helper Functions</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_AUDIT\">CONFIG_AUDIT</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * netlbl_af4list_audit_addr - Audit an IPv4 address</span>", 
"<span class=\"comment\"> * @audit_buf: audit buffer</span>", 
"<span class=\"comment\"> * @src: true if source address, false if destination</span>", 
"<span class=\"comment\"> * @dev: network interface</span>", 
"<span class=\"comment\"> * @addr: IP address</span>", 
"<span class=\"comment\"> * @mask: IP address mask</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * Write the IPv4 address and address mask, if necessary, to @audit_buf.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#netlbl_af4list_audit_addr\">netlbl_af4list_audit_addr</a>(struct <a class=\"id\" href=\"#audit_buffer\">audit_buffer</a> *<a class=\"id\" href=\"#audit_buf\">audit_buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#src\">src</a>, const char *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#mask_val\">mask_val</a> = <a class=\"id\" href=\"#ntohl\">ntohl</a>(<a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#dir\">dir</a> = (<a class=\"id\" href=\"#src\">src</a> ? \"src\" : \"dst\");", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(<a class=\"id\" href=\"#audit_buf\">audit_buf</a>, \" netif=%s\", <a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(<a class=\"id\" href=\"#audit_buf\">audit_buf</a>, \" %s=%pI4\", <a class=\"id\" href=\"#dir\">dir</a>, &amp;<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mask_val\">mask_val</a> != 0xffffffff) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#mask_len\">mask_len</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#mask_val\">mask_val</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask_val\">mask_val</a> <<= 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask_len\">mask_len</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(<a class=\"id\" href=\"#audit_buf\">audit_buf</a>, \" %s_prefixlen=%d\", <a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#mask_len\">mask_len</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IPV6\">CONFIG_IPV6</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IPV6_MODULE\">CONFIG_IPV6_MODULE</a>)", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * netlbl_af6list_audit_addr - Audit an IPv6 address</span>", 
"<span class=\"comment\"> * @audit_buf: audit buffer</span>", 
"<span class=\"comment\"> * @src: true if source address, false if destination</span>", 
"<span class=\"comment\"> * @dev: network interface</span>", 
"<span class=\"comment\"> * @addr: IP address</span>", 
"<span class=\"comment\"> * @mask: IP address mask</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * Write the IPv6 address and address mask, if necessary, to @audit_buf.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#netlbl_af6list_audit_addr\">netlbl_af6list_audit_addr</a>(struct <a class=\"id\" href=\"#audit_buffer\">audit_buffer</a> *<a class=\"id\" href=\"#audit_buf\">audit_buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#src\">src</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const char *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const struct <a class=\"id\" href=\"#in6_addr\">in6_addr</a> *<a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const struct <a class=\"id\" href=\"#in6_addr\">in6_addr</a> *<a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#dir\">dir</a> = (<a class=\"id\" href=\"#src\">src</a> ? \"src\" : \"dst\");", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(<a class=\"id\" href=\"#audit_buf\">audit_buf</a>, \" netif=%s\", <a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(<a class=\"id\" href=\"#audit_buf\">audit_buf</a>, \" %s=%pI6\", <a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ntohl\">ntohl</a>(<a class=\"id\" href=\"#mask\">mask</a>-><a class=\"id\" href=\"#s6_addr32\">s6_addr32</a>[3]) != 0xffffffff) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#mask_len\">mask_len</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#mask_val\">mask_val</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#iter\">iter</a> = -1;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#ntohl\">ntohl</a>(<a class=\"id\" href=\"#mask\">mask</a>-><a class=\"id\" href=\"#s6_addr32\">s6_addr32</a>[++<a class=\"id\" href=\"#iter\">iter</a>]) == 0xffffffff)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask_len\">mask_len</a> += 32;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask_val\">mask_val</a> = <a class=\"id\" href=\"#ntohl\">ntohl</a>(<a class=\"id\" href=\"#mask\">mask</a>-><a class=\"id\" href=\"#s6_addr32\">s6_addr32</a>[<a class=\"id\" href=\"#iter\">iter</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#mask_val\">mask_val</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask_val\">mask_val</a> <<= 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask_len\">mask_len</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#audit_log_format\">audit_log_format</a>(<a class=\"id\" href=\"#audit_buf\">audit_buf</a>, \" %s_prefixlen=%d\", <a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#mask_len\">mask_len</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* IPv6 */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_AUDIT */</span>", 
];
xr_frag_insert('l/0c/985f97aeab8bddc6080fb3b15824d059165f76.xr', __xr_tmp);
