var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * linux/fs/mbcache.c</span>", 
"<span class=\"comment\"> * (C) 2001-2002 Andreas Gruenbacher, &lt;a.gruenbacher@computer.org&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Filesystem Meta Information Block Cache (mbcache)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The mbcache caches blocks of block devices that need to be located</span>", 
"<span class=\"comment\"> * by their device/block number, as well as by other criteria (such</span>", 
"<span class=\"comment\"> * as the block's contents).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * There can only be one cache entry in a cache per device and block number.</span>", 
"<span class=\"comment\"> * Additional indexes need not be unique in this sense. The number of</span>", 
"<span class=\"comment\"> * additional indexes (=other criteria) can be hardwired at compile time</span>", 
"<span class=\"comment\"> * or specified at cache create time.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Each cache entry is of fixed size. An entry may be `valid' or `invalid'</span>", 
"<span class=\"comment\"> * in the cache. A valid entry is in the main hash tables of the cache,</span>", 
"<span class=\"comment\"> * and may also be in the lru list. An invalid entry is not in any hashes</span>", 
"<span class=\"comment\"> * or lists.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A valid cache entry is only in the lru list if no handles refer to it.</span>", 
"<span class=\"comment\"> * Invalid cache entries will be freed when the last handle to the cache</span>", 
"<span class=\"comment\"> * entry is released. Entries that cannot be freed immediately are put</span>", 
"<span class=\"comment\"> * back on the lru list.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hash\">hash</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mbcache\">mbcache</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#MB_CACHE_DEBUG\">MB_CACHE_DEBUG</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#mb_debug\">mb_debug</a>(<a class=\"id\" href=\"#f\">f</a>...) do { \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> <a class=\"id\" href=\"#f\">f</a>); \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"\\n\"); \\", 
"<span class=\"ts\"/>} while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#mb_assert\">mb_assert</a>(<a class=\"id\" href=\"#c\">c</a>) do { if (!(<a class=\"id\" href=\"#c\">c</a>)) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"assertion \" #<a class=\"id\" href=\"#c\">c</a> \" failed\\n\"); \\", 
"<span class=\"ts\"/>} while(0)", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#mb_debug\">mb_debug</a>(<a class=\"id\" href=\"#f\">f</a>...) do { } while(0)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#mb_assert\">mb_assert</a>(<a class=\"id\" href=\"#c\">c</a>) do { } while(0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#mb_error\">mb_error</a>(<a class=\"id\" href=\"#f\">f</a>...) do { \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> <a class=\"id\" href=\"#f\">f</a>); \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"\\n\"); \\", 
"<span class=\"ts\"/>} while(0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MB_CACHE_WRITER\">MB_CACHE_WRITER</a> ((unsigned short)~0U >> 1)", 
"", 
"static <a class=\"id\" href=\"#DECLARE_WAIT_QUEUE_HEAD\">DECLARE_WAIT_QUEUE_HEAD</a>(<a class=\"id\" href=\"#mb_cache_queue\">mb_cache_queue</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>", 
"<a class=\"id\" href=\"#MODULE_AUTHOR\">MODULE_AUTHOR</a>(\"Andreas Gruenbacher <a.gruenbacher@computer.org>\");", 
"<a class=\"id\" href=\"#MODULE_DESCRIPTION\">MODULE_DESCRIPTION</a>(\"Meta block cache (for extended attributes)\");", 
"<a class=\"id\" href=\"#MODULE_LICENSE\">MODULE_LICENSE</a>(\"GPL\");", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#mb_cache_create\">mb_cache_create</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#mb_cache_shrink\">mb_cache_shrink</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#mb_cache_destroy\">mb_cache_destroy</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#mb_cache_entry_alloc\">mb_cache_entry_alloc</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#mb_cache_entry_insert\">mb_cache_entry_insert</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#mb_cache_entry_release\">mb_cache_entry_release</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#mb_cache_entry_free\">mb_cache_entry_free</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#mb_cache_entry_get\">mb_cache_entry_get</a>);", 
"#if !<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#MB_CACHE_INDEXES_COUNT\">MB_CACHE_INDEXES_COUNT</a>) || (<a class=\"id\" href=\"#MB_CACHE_INDEXES_COUNT\">MB_CACHE_INDEXES_COUNT</a> &gt; 0)", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#mb_cache_entry_find_first\">mb_cache_entry_find_first</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#mb_cache_entry_find_next\">mb_cache_entry_find_next</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"struct <a class=\"id\" href=\"#mb_cache\">mb_cache</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c_cache_list\">c_cache_list</a>;", 
"<span class=\"ts\"/>const char<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#c_name\">c_name</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c_entry_count\">c_entry_count</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c_max_entries\">c_max_entries</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c_bucket_bits\">c_bucket_bits</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#c_entry_cache\">c_entry_cache</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#c_block_hash\">c_block_hash</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#c_index_hash\">c_index_hash</a>;", 
"};", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Global data: list of all mbcache's, lru list, and a spinlock for</span>", 
"<span class=\"comment\"> * accessing cache data structures on SMP machines. The lru list is</span>", 
"<span class=\"comment\"> * global across all mbcaches.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#mb_cache_list\">mb_cache_list</a>);", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#mb_cache_lru_list\">mb_cache_lru_list</a>);", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#mb_cache_spinlock\">mb_cache_spinlock</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * What the mbcache registers as to get shrunk dynamically.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#mb_cache_shrink_fn\">mb_cache_shrink_fn</a>(struct <a class=\"id\" href=\"#shrinker\">shrinker</a> *<a class=\"id\" href=\"#shrink\">shrink</a>, int <a class=\"id\" href=\"#nr_to_scan\">nr_to_scan</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"", 
"static struct <a class=\"id\" href=\"#shrinker\">shrinker</a> <a class=\"id\" href=\"#mb_cache_shrinker\">mb_cache_shrinker</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#shrink\">shrink</a> = <a class=\"id\" href=\"#mb_cache_shrink_fn\">mb_cache_shrink_fn</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#seeks\">seeks</a> = <a class=\"id\" href=\"#DEFAULT_SEEKS\">DEFAULT_SEEKS</a>,", 
"};", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#__mb_cache_entry_is_hashed\">__mb_cache_entry_is_hashed</a>(struct <a class=\"id\" href=\"#mb_cache_entry\">mb_cache_entry</a> *<a class=\"id\" href=\"#ce\">ce</a>)", 
"{", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_block_list\">e_block_list</a>);", 
"}", 
"", 
"", 
"static void", 
"<a class=\"id\" href=\"#__mb_cache_entry_unhash\">__mb_cache_entry_unhash</a>(struct <a class=\"id\" href=\"#mb_cache_entry\">mb_cache_entry</a> *<a class=\"id\" href=\"#ce\">ce</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__mb_cache_entry_is_hashed\">__mb_cache_entry_is_hashed</a>(<a class=\"id\" href=\"#ce\">ce</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_block_list\">e_block_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_index\">e_index</a>.<a class=\"id\" href=\"#o_list\">o_list</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"", 
"static void", 
"<a class=\"id\" href=\"#__mb_cache_entry_forget\">__mb_cache_entry_forget</a>(struct <a class=\"id\" href=\"#mb_cache_entry\">mb_cache_entry</a> *<a class=\"id\" href=\"#ce\">ce</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mb_cache\">mb_cache</a> *<a class=\"id\" href=\"#cache\">cache</a> = <a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_cache\">e_cache</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mb_assert\">mb_assert</a>(!(<a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_used\">e_used</a> || <a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_queued\">e_queued</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#c_entry_cache\">c_entry_cache</a>, <a class=\"id\" href=\"#ce\">ce</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#c_entry_count\">c_entry_count</a>);", 
"}", 
"", 
"", 
"static void", 
"<a class=\"id\" href=\"#__mb_cache_entry_release_unlock\">__mb_cache_entry_release_unlock</a>(struct <a class=\"id\" href=\"#mb_cache_entry\">mb_cache_entry</a> *<a class=\"id\" href=\"#ce\">ce</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__releases\">__releases</a>(<a class=\"id\" href=\"#mb_cache_spinlock\">mb_cache_spinlock</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Wake up all processes queuing for this cache entry. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_queued\">e_queued</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_all\">wake_up_all</a>(&amp;<a class=\"id\" href=\"#mb_cache_queue\">mb_cache_queue</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_used\">e_used</a> >= <a class=\"id\" href=\"#MB_CACHE_WRITER\">MB_CACHE_WRITER</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_used\">e_used</a> -= <a class=\"id\" href=\"#MB_CACHE_WRITER\">MB_CACHE_WRITER</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_used\">e_used</a>--;", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_used\">e_used</a> || <a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_queued\">e_queued</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#__mb_cache_entry_is_hashed\">__mb_cache_entry_is_hashed</a>(<a class=\"id\" href=\"#ce\">ce</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#forget\">forget</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mb_assert\">mb_assert</a>(<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_lru_list\">e_lru_list</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_lru_list\">e_lru_list</a>, &amp;<a class=\"id\" href=\"#mb_cache_lru_list\">mb_cache_lru_list</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mb_cache_spinlock\">mb_cache_spinlock</a>);", 
"<span class=\"ts\"/>return;", 
"<a class=\"id\" href=\"#forget\">forget</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mb_cache_spinlock\">mb_cache_spinlock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mb_cache_entry_forget\">__mb_cache_entry_forget</a>(<a class=\"id\" href=\"#ce\">ce</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * mb_cache_shrink_fn()  memory pressure callback</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is called by the kernel memory management when memory</span>", 
"<span class=\"comment\"> * gets low.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @shrink: (ignored)</span>", 
"<span class=\"comment\"> * @nr_to_scan: Number of objects to scan</span>", 
"<span class=\"comment\"> * @gfp_mask: (ignored)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the number of objects which are present in the cache.</span>", 
"<span class=\"comment\"> */</span>", 
"static int", 
"<a class=\"id\" href=\"#mb_cache_shrink_fn\">mb_cache_shrink_fn</a>(struct <a class=\"id\" href=\"#shrinker\">shrinker</a> *<a class=\"id\" href=\"#shrink\">shrink</a>, int <a class=\"id\" href=\"#nr_to_scan\">nr_to_scan</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#free_list\">free_list</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mb_cache\">mb_cache</a> *<a class=\"id\" href=\"#cache\">cache</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mb_cache_entry\">mb_cache_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mb_debug\">mb_debug</a>(\"trying to free %d entries\", <a class=\"id\" href=\"#nr_to_scan\">nr_to_scan</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mb_cache_spinlock\">mb_cache_spinlock</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#nr_to_scan\">nr_to_scan</a>-- && !<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#mb_cache_lru_list\">mb_cache_lru_list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mb_cache_entry\">mb_cache_entry</a> *<a class=\"id\" href=\"#ce\">ce</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#mb_cache_lru_list\">mb_cache_lru_list</a>.<a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#mb_cache_entry\">mb_cache_entry</a>, <a class=\"id\" href=\"#e_lru_list\">e_lru_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move_tail\">list_move_tail</a>(&amp;<a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_lru_list\">e_lru_list</a>, &amp;<a class=\"id\" href=\"#free_list\">free_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__mb_cache_entry_unhash\">__mb_cache_entry_unhash</a>(<a class=\"id\" href=\"#ce\">ce</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#cache\">cache</a>, &amp;<a class=\"id\" href=\"#mb_cache_list\">mb_cache_list</a>, <a class=\"id\" href=\"#c_cache_list\">c_cache_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mb_debug\">mb_debug</a>(\"cache %s (%d)\", <a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#c_name\">c_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#c_entry_count\">c_entry_count</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> += <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#c_entry_count\">c_entry_count</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mb_cache_spinlock\">mb_cache_spinlock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#free_list\">free_list</a>, <a class=\"id\" href=\"#e_lru_list\">e_lru_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__mb_cache_entry_forget\">__mb_cache_entry_forget</a>(<a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#count\">count</a> / 100) * <a class=\"id\" href=\"#sysctl_vfs_cache_pressure\">sysctl_vfs_cache_pressure</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * mb_cache_create()  create a new cache</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * All entries in one cache are equal size. Cache entries may be from</span>", 
"<span class=\"comment\"> * multiple devices. If this is the first mbcache created, registers</span>", 
"<span class=\"comment\"> * the cache with kernel memory management. Returns NULL if no more</span>", 
"<span class=\"comment\"> * memory was available.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @name: name of the cache (informal)</span>", 
"<span class=\"comment\"> * @bucket_bits: log2(number of hash buckets)</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#mb_cache\">mb_cache</a> *", 
"<a class=\"id\" href=\"#mb_cache_create\">mb_cache_create</a>(const char *<a class=\"id\" href=\"#name\">name</a>, int <a class=\"id\" href=\"#bucket_bits\">bucket_bits</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#bucket_count\">bucket_count</a> = 1 << <a class=\"id\" href=\"#bucket_bits\">bucket_bits</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mb_cache\">mb_cache</a> *<a class=\"id\" href=\"#cache\">cache</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cache\">cache</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(struct <a class=\"id\" href=\"#mb_cache\">mb_cache</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cache\">cache</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#c_name\">c_name</a> = <a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#c_entry_count\">c_entry_count</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#c_bucket_bits\">c_bucket_bits</a> = <a class=\"id\" href=\"#bucket_bits\">bucket_bits</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#c_block_hash\">c_block_hash</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#bucket_count\">bucket_count</a> * sizeof(struct <a class=\"id\" href=\"#list_head\">list_head</a>),", 
"<span class=\"ts\"/>                              <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#c_block_hash\">c_block_hash</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#n\">n</a>=0; <a class=\"id\" href=\"#n\">n</a>&lt;<a class=\"id\" href=\"#bucket_count\">bucket_count</a>; <a class=\"id\" href=\"#n\">n</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#c_block_hash\">c_block_hash</a>[<a class=\"id\" href=\"#n\">n</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#c_index_hash\">c_index_hash</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#bucket_count\">bucket_count</a> * sizeof(struct <a class=\"id\" href=\"#list_head\">list_head</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#c_index_hash\">c_index_hash</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#n\">n</a>=0; <a class=\"id\" href=\"#n\">n</a>&lt;<a class=\"id\" href=\"#bucket_count\">bucket_count</a>; <a class=\"id\" href=\"#n\">n</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#c_index_hash\">c_index_hash</a>[<a class=\"id\" href=\"#n\">n</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#c_entry_cache\">c_entry_cache</a> = <a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>sizeof(struct <a class=\"id\" href=\"#mb_cache_entry\">mb_cache_entry</a>), 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SLAB_RECLAIM_ACCOUNT\">SLAB_RECLAIM_ACCOUNT</a>|<a class=\"id\" href=\"#SLAB_MEM_SPREAD\">SLAB_MEM_SPREAD</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#c_entry_cache\">c_entry_cache</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail2\">fail2</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Set an upper limit on the number of cache entries so that the hash</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * chains won't grow too long.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#c_max_entries\">c_max_entries</a> = <a class=\"id\" href=\"#bucket_count\">bucket_count</a> << 4;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mb_cache_spinlock\">mb_cache_spinlock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#c_cache_list\">c_cache_list</a>, &amp;<a class=\"id\" href=\"#mb_cache_list\">mb_cache_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mb_cache_spinlock\">mb_cache_spinlock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cache\">cache</a>;", 
"", 
"<a class=\"id\" href=\"#fail2\">fail2</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#c_index_hash\">c_index_hash</a>);", 
"", 
"<a class=\"id\" href=\"#fail\">fail</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#c_block_hash\">c_block_hash</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#cache\">cache</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * mb_cache_shrink()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Removes all cache entries of a device from the cache. All cache entries</span>", 
"<span class=\"comment\"> * currently in use cannot be freed, and thus remain in the cache. All others</span>", 
"<span class=\"comment\"> * are freed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @bdev: which device's cache entries to shrink</span>", 
"<span class=\"comment\"> */</span>", 
"void", 
"<a class=\"id\" href=\"#mb_cache_shrink\">mb_cache_shrink</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#free_list\">free_list</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#l\">l</a>, *<a class=\"id\" href=\"#ltmp\">ltmp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mb_cache_spinlock\">mb_cache_spinlock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_safe\">list_for_each_safe</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#ltmp\">ltmp</a>, &amp;<a class=\"id\" href=\"#mb_cache_lru_list\">mb_cache_lru_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mb_cache_entry\">mb_cache_entry</a> *<a class=\"id\" href=\"#ce\">ce</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#l\">l</a>, struct <a class=\"id\" href=\"#mb_cache_entry\">mb_cache_entry</a>, <a class=\"id\" href=\"#e_lru_list\">e_lru_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_bdev\">e_bdev</a> == <a class=\"id\" href=\"#bdev\">bdev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move_tail\">list_move_tail</a>(&amp;<a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_lru_list\">e_lru_list</a>, &amp;<a class=\"id\" href=\"#free_list\">free_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__mb_cache_entry_unhash\">__mb_cache_entry_unhash</a>(<a class=\"id\" href=\"#ce\">ce</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mb_cache_spinlock\">mb_cache_spinlock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_safe\">list_for_each_safe</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#ltmp\">ltmp</a>, &amp;<a class=\"id\" href=\"#free_list\">free_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__mb_cache_entry_forget\">__mb_cache_entry_forget</a>(<a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#l\">l</a>, struct <a class=\"id\" href=\"#mb_cache_entry\">mb_cache_entry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#e_lru_list\">e_lru_list</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * mb_cache_destroy()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Shrinks the cache to its minimum possible size (hopefully 0 entries),</span>", 
"<span class=\"comment\"> * and then destroys it. If this was the last mbcache, un-registers the</span>", 
"<span class=\"comment\"> * mbcache from kernel memory management.</span>", 
"<span class=\"comment\"> */</span>", 
"void", 
"<a class=\"id\" href=\"#mb_cache_destroy\">mb_cache_destroy</a>(struct <a class=\"id\" href=\"#mb_cache\">mb_cache</a> *<a class=\"id\" href=\"#cache\">cache</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#free_list\">free_list</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#l\">l</a>, *<a class=\"id\" href=\"#ltmp\">ltmp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mb_cache_spinlock\">mb_cache_spinlock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_safe\">list_for_each_safe</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#ltmp\">ltmp</a>, &amp;<a class=\"id\" href=\"#mb_cache_lru_list\">mb_cache_lru_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mb_cache_entry\">mb_cache_entry</a> *<a class=\"id\" href=\"#ce\">ce</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#l\">l</a>, struct <a class=\"id\" href=\"#mb_cache_entry\">mb_cache_entry</a>, <a class=\"id\" href=\"#e_lru_list\">e_lru_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_cache\">e_cache</a> == <a class=\"id\" href=\"#cache\">cache</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move_tail\">list_move_tail</a>(&amp;<a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_lru_list\">e_lru_list</a>, &amp;<a class=\"id\" href=\"#free_list\">free_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__mb_cache_entry_unhash\">__mb_cache_entry_unhash</a>(<a class=\"id\" href=\"#ce\">ce</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#c_cache_list\">c_cache_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mb_cache_spinlock\">mb_cache_spinlock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_safe\">list_for_each_safe</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#ltmp\">ltmp</a>, &amp;<a class=\"id\" href=\"#free_list\">free_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__mb_cache_entry_forget\">__mb_cache_entry_forget</a>(<a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#l\">l</a>, struct <a class=\"id\" href=\"#mb_cache_entry\">mb_cache_entry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#e_lru_list\">e_lru_list</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#c_entry_count\">c_entry_count</a>) &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mb_error\">mb_error</a>(\"cache %s: %d orphaned entries\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#c_name\">c_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#c_entry_count\">c_entry_count</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_destroy\">kmem_cache_destroy</a>(<a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#c_entry_cache\">c_entry_cache</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#c_index_hash\">c_index_hash</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#c_block_hash\">c_block_hash</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#cache\">cache</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * mb_cache_entry_alloc()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Allocates a new cache entry. The new entry will not be valid initially,</span>", 
"<span class=\"comment\"> * and thus cannot be looked up yet. It should be filled with data, and</span>", 
"<span class=\"comment\"> * then inserted into the cache using mb_cache_entry_insert(). Returns NULL</span>", 
"<span class=\"comment\"> * if no more memory was available.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#mb_cache_entry\">mb_cache_entry</a> *", 
"<a class=\"id\" href=\"#mb_cache_entry_alloc\">mb_cache_entry_alloc</a>(struct <a class=\"id\" href=\"#mb_cache\">mb_cache</a> *<a class=\"id\" href=\"#cache\">cache</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_flags\">gfp_flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mb_cache_entry\">mb_cache_entry</a> *<a class=\"id\" href=\"#ce\">ce</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#c_entry_count\">c_entry_count</a>) >= <a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#c_max_entries\">c_max_entries</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mb_cache_spinlock\">mb_cache_spinlock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#mb_cache_lru_list\">mb_cache_lru_list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ce\">ce</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#mb_cache_lru_list\">mb_cache_lru_list</a>.<a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mb_cache_entry\">mb_cache_entry</a>, <a class=\"id\" href=\"#e_lru_list\">e_lru_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_lru_list\">e_lru_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__mb_cache_entry_unhash\">__mb_cache_entry_unhash</a>(<a class=\"id\" href=\"#ce\">ce</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mb_cache_spinlock\">mb_cache_spinlock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ce\">ce</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ce\">ce</a> = <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#c_entry_cache\">c_entry_cache</a>, <a class=\"id\" href=\"#gfp_flags\">gfp_flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ce\">ce</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#c_entry_count\">c_entry_count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_lru_list\">e_lru_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_block_list\">e_block_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_cache\">e_cache</a> = <a class=\"id\" href=\"#cache\">cache</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_queued\">e_queued</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_used\">e_used</a> = 1 + <a class=\"id\" href=\"#MB_CACHE_WRITER\">MB_CACHE_WRITER</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ce\">ce</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * mb_cache_entry_insert()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Inserts an entry that was allocated using mb_cache_entry_alloc() into</span>", 
"<span class=\"comment\"> * the cache. After this, the cache entry can be looked up, but is not yet</span>", 
"<span class=\"comment\"> * in the lru list as the caller still holds a handle to it. Returns 0 on</span>", 
"<span class=\"comment\"> * success, or -EBUSY if a cache entry for that device + inode exists</span>", 
"<span class=\"comment\"> * already (this may happen after a failed lookup, but when another process</span>", 
"<span class=\"comment\"> * has inserted the same cache entry in the meantime).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @bdev: device the cache entry belongs to</span>", 
"<span class=\"comment\"> * @block: block number</span>", 
"<span class=\"comment\"> * @key: lookup key</span>", 
"<span class=\"comment\"> */</span>", 
"int", 
"<a class=\"id\" href=\"#mb_cache_entry_insert\">mb_cache_entry_insert</a>(struct <a class=\"id\" href=\"#mb_cache_entry\">mb_cache_entry</a> *<a class=\"id\" href=\"#ce\">ce</a>, struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#block\">block</a>, unsigned int <a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mb_cache\">mb_cache</a> *<a class=\"id\" href=\"#cache\">cache</a> = <a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_cache\">e_cache</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#bucket\">bucket</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#l\">l</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bucket\">bucket</a> = <a class=\"id\" href=\"#hash_long\">hash_long</a>((unsigned long)<a class=\"id\" href=\"#bdev\">bdev</a> + (<a class=\"id\" href=\"#block\">block</a> &amp; 0xffffffff), ", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#c_bucket_bits\">c_bucket_bits</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mb_cache_spinlock\">mb_cache_spinlock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_prev\">list_for_each_prev</a>(<a class=\"id\" href=\"#l\">l</a>, &amp;<a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#c_block_hash\">c_block_hash</a>[<a class=\"id\" href=\"#bucket\">bucket</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mb_cache_entry\">mb_cache_entry</a> *<a class=\"id\" href=\"#ce\">ce</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#l\">l</a>, struct <a class=\"id\" href=\"#mb_cache_entry\">mb_cache_entry</a>, <a class=\"id\" href=\"#e_block_list\">e_block_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_bdev\">e_bdev</a> == <a class=\"id\" href=\"#bdev\">bdev</a> && <a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_block\">e_block</a> == <a class=\"id\" href=\"#block\">block</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mb_cache_entry_unhash\">__mb_cache_entry_unhash</a>(<a class=\"id\" href=\"#ce\">ce</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_bdev\">e_bdev</a> = <a class=\"id\" href=\"#bdev\">bdev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_block\">e_block</a> = <a class=\"id\" href=\"#block\">block</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_block_list\">e_block_list</a>, &amp;<a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#c_block_hash\">c_block_hash</a>[<a class=\"id\" href=\"#bucket\">bucket</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_index\">e_index</a>.<a class=\"id\" href=\"#o_key\">o_key</a> = <a class=\"id\" href=\"#key\">key</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bucket\">bucket</a> = <a class=\"id\" href=\"#hash_long\">hash_long</a>(<a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#c_bucket_bits\">c_bucket_bits</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_index\">e_index</a>.<a class=\"id\" href=\"#o_list\">o_list</a>, &amp;<a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#c_index_hash\">c_index_hash</a>[<a class=\"id\" href=\"#bucket\">bucket</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = 0;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mb_cache_spinlock\">mb_cache_spinlock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * mb_cache_entry_release()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Release a handle to a cache entry. When the last handle to a cache entry</span>", 
"<span class=\"comment\"> * is released it is either freed (if it is invalid) or otherwise inserted</span>", 
"<span class=\"comment\"> * in to the lru list.</span>", 
"<span class=\"comment\"> */</span>", 
"void", 
"<a class=\"id\" href=\"#mb_cache_entry_release\">mb_cache_entry_release</a>(struct <a class=\"id\" href=\"#mb_cache_entry\">mb_cache_entry</a> *<a class=\"id\" href=\"#ce\">ce</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mb_cache_spinlock\">mb_cache_spinlock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mb_cache_entry_release_unlock\">__mb_cache_entry_release_unlock</a>(<a class=\"id\" href=\"#ce\">ce</a>);", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * mb_cache_entry_free()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is equivalent to the sequence mb_cache_entry_takeout() --</span>", 
"<span class=\"comment\"> * mb_cache_entry_release().</span>", 
"<span class=\"comment\"> */</span>", 
"void", 
"<a class=\"id\" href=\"#mb_cache_entry_free\">mb_cache_entry_free</a>(struct <a class=\"id\" href=\"#mb_cache_entry\">mb_cache_entry</a> *<a class=\"id\" href=\"#ce\">ce</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mb_cache_spinlock\">mb_cache_spinlock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mb_assert\">mb_assert</a>(<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_lru_list\">e_lru_list</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mb_cache_entry_unhash\">__mb_cache_entry_unhash</a>(<a class=\"id\" href=\"#ce\">ce</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mb_cache_entry_release_unlock\">__mb_cache_entry_release_unlock</a>(<a class=\"id\" href=\"#ce\">ce</a>);", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * mb_cache_entry_get()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Get a cache entry  by device / block number. (There can only be one entry</span>", 
"<span class=\"comment\"> * in the cache per device and block.) Returns NULL if no such cache entry</span>", 
"<span class=\"comment\"> * exists. The returned cache entry is locked for exclusive access (\"single</span>", 
"<span class=\"comment\"> * writer\").</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#mb_cache_entry\">mb_cache_entry</a> *", 
"<a class=\"id\" href=\"#mb_cache_entry_get\">mb_cache_entry_get</a>(struct <a class=\"id\" href=\"#mb_cache\">mb_cache</a> *<a class=\"id\" href=\"#cache\">cache</a>, struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#block\">block</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#bucket\">bucket</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#l\">l</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mb_cache_entry\">mb_cache_entry</a> *<a class=\"id\" href=\"#ce\">ce</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bucket\">bucket</a> = <a class=\"id\" href=\"#hash_long\">hash_long</a>((unsigned long)<a class=\"id\" href=\"#bdev\">bdev</a> + (<a class=\"id\" href=\"#block\">block</a> &amp; 0xffffffff),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#c_bucket_bits\">c_bucket_bits</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mb_cache_spinlock\">mb_cache_spinlock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each\">list_for_each</a>(<a class=\"id\" href=\"#l\">l</a>, &amp;<a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#c_block_hash\">c_block_hash</a>[<a class=\"id\" href=\"#bucket\">bucket</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ce\">ce</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#l\">l</a>, struct <a class=\"id\" href=\"#mb_cache_entry\">mb_cache_entry</a>, <a class=\"id\" href=\"#e_block_list\">e_block_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_bdev\">e_bdev</a> == <a class=\"id\" href=\"#bdev\">bdev</a> && <a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_block\">e_block</a> == <a class=\"id\" href=\"#block\">block</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DEFINE_WAIT\">DEFINE_WAIT</a>(<a class=\"id\" href=\"#wait\">wait</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_lru_list\">e_lru_list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_lru_list\">e_lru_list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_used\">e_used</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_queued\">e_queued</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prepare_to_wait\">prepare_to_wait</a>(&amp;<a class=\"id\" href=\"#mb_cache_queue\">mb_cache_queue</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mb_cache_spinlock\">mb_cache_spinlock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mb_cache_spinlock\">mb_cache_spinlock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_queued\">e_queued</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#finish_wait\">finish_wait</a>(&amp;<a class=\"id\" href=\"#mb_cache_queue\">mb_cache_queue</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_used\">e_used</a> += 1 + <a class=\"id\" href=\"#MB_CACHE_WRITER\">MB_CACHE_WRITER</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#__mb_cache_entry_is_hashed\">__mb_cache_entry_is_hashed</a>(<a class=\"id\" href=\"#ce\">ce</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__mb_cache_entry_release_unlock\">__mb_cache_entry_release_unlock</a>(<a class=\"id\" href=\"#ce\">ce</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup\">cleanup</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ce\">ce</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<a class=\"id\" href=\"#cleanup\">cleanup</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mb_cache_spinlock\">mb_cache_spinlock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ce\">ce</a>;", 
"}", 
"", 
"#if !<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#MB_CACHE_INDEXES_COUNT\">MB_CACHE_INDEXES_COUNT</a>) || (<a class=\"id\" href=\"#MB_CACHE_INDEXES_COUNT\">MB_CACHE_INDEXES_COUNT</a> &gt; 0)", 
"", 
"static struct <a class=\"id\" href=\"#mb_cache_entry\">mb_cache_entry</a> *", 
"<a class=\"id\" href=\"#__mb_cache_entry_find\">__mb_cache_entry_find</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#l\">l</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>, unsigned int <a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#l\">l</a> != <a class=\"id\" href=\"#head\">head</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mb_cache_entry\">mb_cache_entry</a> *<a class=\"id\" href=\"#ce\">ce</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#l\">l</a>, struct <a class=\"id\" href=\"#mb_cache_entry\">mb_cache_entry</a>, <a class=\"id\" href=\"#e_index\">e_index</a>.<a class=\"id\" href=\"#o_list\">o_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_bdev\">e_bdev</a> == <a class=\"id\" href=\"#bdev\">bdev</a> && <a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_index\">e_index</a>.<a class=\"id\" href=\"#o_key\">o_key</a> == <a class=\"id\" href=\"#key\">key</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DEFINE_WAIT\">DEFINE_WAIT</a>(<a class=\"id\" href=\"#wait\">wait</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_lru_list\">e_lru_list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_lru_list\">e_lru_list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Incrementing before holding the lock gives readers</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   priority over writers. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_used\">e_used</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_used\">e_used</a> >= <a class=\"id\" href=\"#MB_CACHE_WRITER\">MB_CACHE_WRITER</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_queued\">e_queued</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prepare_to_wait\">prepare_to_wait</a>(&amp;<a class=\"id\" href=\"#mb_cache_queue\">mb_cache_queue</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mb_cache_spinlock\">mb_cache_spinlock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mb_cache_spinlock\">mb_cache_spinlock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ce\">ce</a>-><a class=\"id\" href=\"#e_queued\">e_queued</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#finish_wait\">finish_wait</a>(&amp;<a class=\"id\" href=\"#mb_cache_queue\">mb_cache_queue</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#__mb_cache_entry_is_hashed\">__mb_cache_entry_is_hashed</a>(<a class=\"id\" href=\"#ce\">ce</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__mb_cache_entry_release_unlock\">__mb_cache_entry_release_unlock</a>(<a class=\"id\" href=\"#ce\">ce</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mb_cache_spinlock\">mb_cache_spinlock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ce\">ce</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a> = <a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * mb_cache_entry_find_first()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Find the first cache entry on a given device with a certain key in</span>", 
"<span class=\"comment\"> * an additional index. Additonal matches can be found with</span>", 
"<span class=\"comment\"> * mb_cache_entry_find_next(). Returns NULL if no match was found. The</span>", 
"<span class=\"comment\"> * returned cache entry is locked for shared access (\"multiple readers\").</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @cache: the cache to search</span>", 
"<span class=\"comment\"> * @bdev: the device the cache entry should belong to</span>", 
"<span class=\"comment\"> * @key: the key in the index</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#mb_cache_entry\">mb_cache_entry</a> *", 
"<a class=\"id\" href=\"#mb_cache_entry_find_first\">mb_cache_entry_find_first</a>(struct <a class=\"id\" href=\"#mb_cache\">mb_cache</a> *<a class=\"id\" href=\"#cache\">cache</a>, struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned int <a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#bucket\">bucket</a> = <a class=\"id\" href=\"#hash_long\">hash_long</a>(<a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#c_bucket_bits\">c_bucket_bits</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#l\">l</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mb_cache_entry\">mb_cache_entry</a> *<a class=\"id\" href=\"#ce\">ce</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mb_cache_spinlock\">mb_cache_spinlock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a> = <a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#c_index_hash\">c_index_hash</a>[<a class=\"id\" href=\"#bucket\">bucket</a>].<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ce\">ce</a> = <a class=\"id\" href=\"#__mb_cache_entry_find\">__mb_cache_entry_find</a>(<a class=\"id\" href=\"#l\">l</a>, &amp;<a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#c_index_hash\">c_index_hash</a>[<a class=\"id\" href=\"#bucket\">bucket</a>], <a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mb_cache_spinlock\">mb_cache_spinlock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ce\">ce</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * mb_cache_entry_find_next()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Find the next cache entry on a given device with a certain key in an</span>", 
"<span class=\"comment\"> * additional index. Returns NULL if no match could be found. The previous</span>", 
"<span class=\"comment\"> * entry is atomatically released, so that mb_cache_entry_find_next() can</span>", 
"<span class=\"comment\"> * be called like this:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * entry = mb_cache_entry_find_first();</span>", 
"<span class=\"comment\"> * while (entry) {</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>...</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>entry = mb_cache_entry_find_next(entry, ...);</span>", 
"<span class=\"comment\"> * }</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @prev: The previous match</span>", 
"<span class=\"comment\"> * @bdev: the device the cache entry should belong to</span>", 
"<span class=\"comment\"> * @key: the key in the index</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#mb_cache_entry\">mb_cache_entry</a> *", 
"<a class=\"id\" href=\"#mb_cache_entry_find_next\">mb_cache_entry_find_next</a>(struct <a class=\"id\" href=\"#mb_cache_entry\">mb_cache_entry</a> *<a class=\"id\" href=\"#prev\">prev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>, unsigned int <a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mb_cache\">mb_cache</a> *<a class=\"id\" href=\"#cache\">cache</a> = <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#e_cache\">e_cache</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#bucket\">bucket</a> = <a class=\"id\" href=\"#hash_long\">hash_long</a>(<a class=\"id\" href=\"#key\">key</a>, <a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#c_bucket_bits\">c_bucket_bits</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#l\">l</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mb_cache_entry\">mb_cache_entry</a> *<a class=\"id\" href=\"#ce\">ce</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mb_cache_spinlock\">mb_cache_spinlock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#l\">l</a> = <a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#e_index\">e_index</a>.<a class=\"id\" href=\"#o_list\">o_list</a>.<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ce\">ce</a> = <a class=\"id\" href=\"#__mb_cache_entry_find\">__mb_cache_entry_find</a>(<a class=\"id\" href=\"#l\">l</a>, &amp;<a class=\"id\" href=\"#cache\">cache</a>-><a class=\"id\" href=\"#c_index_hash\">c_index_hash</a>[<a class=\"id\" href=\"#bucket\">bucket</a>], <a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mb_cache_entry_release_unlock\">__mb_cache_entry_release_unlock</a>(<a class=\"id\" href=\"#prev\">prev</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ce\">ce</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>  <span class=\"comment\">/* !defined(MB_CACHE_INDEXES_COUNT) || (MB_CACHE_INDEXES_COUNT &gt; 0) */</span>", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#init_mbcache\">init_mbcache</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_shrinker\">register_shrinker</a>(&amp;<a class=\"id\" href=\"#mb_cache_shrinker\">mb_cache_shrinker</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__exit\">__exit</a> <a class=\"id\" href=\"#exit_mbcache\">exit_mbcache</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_shrinker\">unregister_shrinker</a>(&amp;<a class=\"id\" href=\"#mb_cache_shrinker\">mb_cache_shrinker</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#module_init\">module_init</a>(<a class=\"id\" href=\"#init_mbcache\">init_mbcache</a>)", 
"<a class=\"id\" href=\"#module_exit\">module_exit</a>(<a class=\"id\" href=\"#exit_mbcache\">exit_mbcache</a>)", 
"", 
];
xr_frag_insert('l/0c/a5cd9480cce56811936e470d937751af370cab.xr', __xr_tmp);
