var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_TTY_LDISC_H\">_LINUX_TTY_LDISC_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_TTY_LDISC_H\">_LINUX_TTY_LDISC_H</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This structure defines the interface between the tty line discipline</span>", 
"<span class=\"comment\"> * implementation and the tty routines.  The following routines can be</span>", 
"<span class=\"comment\"> * defined; unless noted otherwise, they are optional, and can be</span>", 
"<span class=\"comment\"> * filled in with a null pointer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * int<span class=\"ts\"/>(*open)(struct tty_struct *);</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>This function is called when the line discipline is associated</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>with the tty.  The line discipline can use this as an</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>opportunity to initialize any state needed by the ldisc routines.</span>", 
"<span class=\"comment\"> * </span>", 
"<span class=\"comment\"> * void<span class=\"ts\"/>(*close)(struct tty_struct *);</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function is called when the line discipline is being</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>shutdown, either because the tty is being closed or because</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>the tty is being changed to use a new line discipline</span>", 
"<span class=\"comment\"> * </span>", 
"<span class=\"comment\"> * void<span class=\"ts\"/>(*flush_buffer)(struct tty_struct *tty);</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>This function instructs the line discipline to clear its</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>buffers of any input characters it may have queued to be</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>delivered to the user mode process.</span>", 
"<span class=\"comment\"> * </span>", 
"<span class=\"comment\"> * ssize_t (*chars_in_buffer)(struct tty_struct *tty);</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>This function returns the number of input characters the line</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>discipline may have queued up to be delivered to the user mode</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>process.</span>", 
"<span class=\"comment\"> * </span>", 
"<span class=\"comment\"> * ssize_t (*read)(struct tty_struct * tty, struct file * file,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>   unsigned char * buf, size_t nr);</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>This function is called when the user requests to read from</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>the tty.  The line discipline will return whatever characters</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>it has buffered up for the user.  If this function is not</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>defined, the user will receive an EIO error.</span>", 
"<span class=\"comment\"> * </span>", 
"<span class=\"comment\"> * ssize_t (*write)(struct tty_struct * tty, struct file * file,</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>    const unsigned char * buf, size_t nr);</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>This function is called when the user requests to write to the</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>tty.  The line discipline will deliver the characters to the</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>low-level tty device for transmission, optionally performing</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>some processing on the characters first.  If this function is</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>not defined, the user will receive an EIO error.</span>", 
"<span class=\"comment\"> * </span>", 
"<span class=\"comment\"> * int<span class=\"ts\"/>(*ioctl)(struct tty_struct * tty, struct file * file,</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/> unsigned int cmd, unsigned long arg);</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function is called when the user requests an ioctl which</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>is not handled by the tty layer or the low-level tty driver.</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>It is intended for ioctls which affect line discpline</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>operation.  Note that the search order for ioctls is (1) tty</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>layer, (2) tty low-level driver, (3) line discpline.  So a</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>low-level driver can \"grab\" an ioctl request before the line</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>discpline has a chance to see it.</span>", 
"<span class=\"comment\"> * </span>", 
"<span class=\"comment\"> * long<span class=\"ts\"/>(*compat_ioctl)(struct tty_struct * tty, struct file * file,</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>        unsigned int cmd, unsigned long arg);</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *      Process ioctl calls from 32-bit process on 64-bit system</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * void<span class=\"ts\"/>(*set_termios)(struct tty_struct *tty, struct ktermios * old);</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>This function notifies the line discpline that a change has</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>been made to the termios structure.</span>", 
"<span class=\"comment\"> * </span>", 
"<span class=\"comment\"> * int<span class=\"ts\"/>(*poll)(struct tty_struct * tty, struct file * file,</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>  poll_table *wait);</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>This function is called when a user attempts to select/poll on a</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>tty device.  It is solely the responsibility of the line</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>discipline to handle poll requests.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * void<span class=\"ts\"/>(*receive_buf)(struct tty_struct *, const unsigned char *cp,</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>       char *fp, int count);</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>This function is called by the low-level tty driver to send</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>characters received by the hardware to the line discpline for</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>processing.  &lt;cp&gt; is a pointer to the buffer of input</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>character received by the device.  &lt;fp&gt; is a pointer to a</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>pointer of flag bytes which indicate whether a character was</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>received with a parity error, etc.</span>", 
"<span class=\"comment\"> * </span>", 
"<span class=\"comment\"> * void<span class=\"ts\"/>(*write_wakeup)(struct tty_struct *);</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>This function is called by the low-level tty driver to signal</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>that line discpline should try to send more characters to the</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>low-level driver for transmission.  If the line discpline does</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>not have any more data to send, it can just return.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * int (*hangup)(struct tty_struct *)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Called on a hangup. Tells the discipline that it should</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>cease I/O to the tty driver. Can sleep. The driver should</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>seek to perform this action quickly but should wait until</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>any pending driver I/O is completed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * void (*dcd_change)(struct tty_struct *tty, unsigned int status,</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct timespec *ts)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Tells the discipline that the DCD pin has changed its status and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the relative timestamp. Pointer ts can be NULL.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#wait\">wait</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#tty_ldisc_ops\">tty_ldisc_ops</a> {", 
"<span class=\"ts\"/>int<span class=\"ts\"/><a class=\"id\" href=\"#magic\">magic</a>;", 
"<span class=\"ts\"/>char<span class=\"ts\"/>*<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The following routines are called from above.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/>(*<a class=\"id\" href=\"#open\">open</a>)(struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *);", 
"<span class=\"ts\"/>void<span class=\"ts\"/>(*<a class=\"id\" href=\"#close\">close</a>)(struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *);", 
"<span class=\"ts\"/>void<span class=\"ts\"/>(*<a class=\"id\" href=\"#flush_buffer\">flush_buffer</a>)(struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *<a class=\"id\" href=\"#tty\">tty</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a><span class=\"ts\"/>(*<a class=\"id\" href=\"#chars_in_buffer\">chars_in_buffer</a>)(struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *<a class=\"id\" href=\"#tty\">tty</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a><span class=\"ts\"/>(*<a class=\"id\" href=\"#read\">read</a>)(struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> * <a class=\"id\" href=\"#tty\">tty</a>, struct <a class=\"id\" href=\"#file\">file</a> * <a class=\"id\" href=\"#file\">file</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#__user\">__user</a> * <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#nr\">nr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a><span class=\"ts\"/>(*<a class=\"id\" href=\"#write\">write</a>)(struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> * <a class=\"id\" href=\"#tty\">tty</a>, struct <a class=\"id\" href=\"#file\">file</a> * <a class=\"id\" href=\"#file\">file</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const unsigned char * <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#nr\">nr</a>);<span class=\"ts\"/>", 
"<span class=\"ts\"/>int<span class=\"ts\"/>(*<a class=\"id\" href=\"#ioctl\">ioctl</a>)(struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> * <a class=\"id\" href=\"#tty\">tty</a>, struct <a class=\"id\" href=\"#file\">file</a> * <a class=\"id\" href=\"#file\">file</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>, unsigned long <a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/>long<span class=\"ts\"/>(*<a class=\"id\" href=\"#compat_ioctl\">compat_ioctl</a>)(struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> * <a class=\"id\" href=\"#tty\">tty</a>, struct <a class=\"id\" href=\"#file\">file</a> * <a class=\"id\" href=\"#file\">file</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>, unsigned long <a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/>void<span class=\"ts\"/>(*<a class=\"id\" href=\"#set_termios\">set_termios</a>)(struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *<a class=\"id\" href=\"#tty\">tty</a>, struct <a class=\"id\" href=\"#ktermios\">ktermios</a> * <a class=\"id\" href=\"#old\">old</a>);", 
"<span class=\"ts\"/>unsigned int (*<a class=\"id\" href=\"#poll\">poll</a>)(struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *, struct <a class=\"id\" href=\"#file\">file</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#poll_table_struct\">poll_table_struct</a> *);", 
"<span class=\"ts\"/>int<span class=\"ts\"/>(*<a class=\"id\" href=\"#hangup\">hangup</a>)(struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *<a class=\"id\" href=\"#tty\">tty</a>);", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The following routines are called from below.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>void<span class=\"ts\"/>(*<a class=\"id\" href=\"#receive_buf\">receive_buf</a>)(struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *, const unsigned char *<a class=\"id\" href=\"#cp\">cp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       char *<a class=\"id\" href=\"#fp\">fp</a>, int <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/>void<span class=\"ts\"/>(*<a class=\"id\" href=\"#write_wakeup\">write_wakeup</a>)(struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *);", 
"<span class=\"ts\"/>void<span class=\"ts\"/>(*<a class=\"id\" href=\"#dcd_change\">dcd_change</a>)(struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *, unsigned int,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> *);", 
"", 
"<span class=\"ts\"/>struct  <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#owner\">owner</a>;", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#refcount\">refcount</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#tty_ldisc\">tty_ldisc</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tty_ldisc_ops\">tty_ldisc_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#users\">users</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TTY_LDISC_MAGIC\">TTY_LDISC_MAGIC</a><span class=\"ts\"/>0x5403", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LDISC_FLAG_DEFINED\">LDISC_FLAG_DEFINED</a><span class=\"ts\"/>0x00000001", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MODULE_ALIAS_LDISC\">MODULE_ALIAS_LDISC</a>(<a class=\"id\" href=\"#ldisc\">ldisc</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MODULE_ALIAS\">MODULE_ALIAS</a>(\"tty-ldisc-\" <a class=\"id\" href=\"#__stringify\">__stringify</a>(<a class=\"id\" href=\"#ldisc\">ldisc</a>))", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _LINUX_TTY_LDISC_H */</span>", 
];
xr_frag_insert('l/0c/bd124eb56f2d9beb86f4611a5f1b51add044b9.xr', __xr_tmp);
