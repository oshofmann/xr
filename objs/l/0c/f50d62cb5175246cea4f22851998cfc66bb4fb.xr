var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Macro so as to not evaluate some arguments when</span>", 
"<span class=\"comment\"> * lockdep is not enabled.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Mark both the sk_lock and the sk_lock.slock as a</span>", 
"<span class=\"comment\"> * per-address-family lock class.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#sock_lock_init_class_and_name\">sock_lock_init_class_and_name</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#sname\">sname</a>, <a class=\"id\" href=\"#skey\">skey</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#key\">key</a>) <span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_lock\">sk_lock</a>.<a class=\"id\" href=\"#owned\">owned</a> = 0;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_waitqueue_head\">init_waitqueue_head</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_lock\">sk_lock</a>.<a class=\"id\" href=\"#wq\">wq</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#sk_lock\">sk_lock</a>.<a class=\"id\" href=\"#slock\">slock</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_check_no_locks_freed\">debug_check_no_locks_freed</a>((void *)&amp;(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#sk_lock\">sk_lock</a>,<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof((<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#sk_lock\">sk_lock</a>));<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lockdep_set_class_and_name\">lockdep_set_class_and_name</a>(&amp;(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#sk_lock\">sk_lock</a>.<a class=\"id\" href=\"#slock\">slock</a>,<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>       <span class=\"ts\"/>(<a class=\"id\" href=\"#skey\">skey</a>), (<a class=\"id\" href=\"#sname\">sname</a>));<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lockdep_init_map\">lockdep_init_map</a>(&amp;(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#sk_lock\">sk_lock</a>.<a class=\"id\" href=\"#dep_map\">dep_map</a>, (<a class=\"id\" href=\"#name\">name</a>), (<a class=\"id\" href=\"#key\">key</a>), 0);<span class=\"ts\"/>\\", 
"} while (0)", 
"", 
"extern void <a class=\"id\" href=\"#lock_sock_nested\">lock_sock_nested</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#subclass\">subclass</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#lock_sock\">lock_sock</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_sock_nested\">lock_sock_nested</a>(<a class=\"id\" href=\"#sk\">sk</a>, 0);", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#release_sock\">release_sock</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"comment\">/* BH context may only use the following locking interface. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#bh_lock_sock\">bh_lock_sock</a>(<a class=\"id\" href=\"#__sk\">__sk</a>)<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;((<a class=\"id\" href=\"#__sk\">__sk</a>)-><a class=\"id\" href=\"#sk_lock\">sk_lock</a>.<a class=\"id\" href=\"#slock\">slock</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#bh_lock_sock_nested\">bh_lock_sock_nested</a>(<a class=\"id\" href=\"#__sk\">__sk</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_nested\">spin_lock_nested</a>(&amp;((<a class=\"id\" href=\"#__sk\">__sk</a>)-><a class=\"id\" href=\"#sk_lock\">sk_lock</a>.<a class=\"id\" href=\"#slock\">slock</a>), \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SINGLE_DEPTH_NESTING\">SINGLE_DEPTH_NESTING</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#bh_unlock_sock\">bh_unlock_sock</a>(<a class=\"id\" href=\"#__sk\">__sk</a>)<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;((<a class=\"id\" href=\"#__sk\">__sk</a>)-><a class=\"id\" href=\"#sk_lock\">sk_lock</a>.<a class=\"id\" href=\"#slock\">slock</a>))", 
"", 
"extern <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#lock_sock_fast\">lock_sock_fast</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * unlock_sock_fast - complement of lock_sock_fast</span>", 
"<span class=\"comment\"> * @sk: socket</span>", 
"<span class=\"comment\"> * @slow: slow mode</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * fast unlock socket for user context.</span>", 
"<span class=\"comment\"> * If slow mode is on, we call regular release_sock()</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#unlock_sock_fast\">unlock_sock_fast</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#slow\">slow</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#slow\">slow</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#release_sock\">release_sock</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_lock\">sk_lock</a>.<a class=\"id\" href=\"#slock\">slock</a>);", 
"}", 
"", 
"", 
"extern struct <a class=\"id\" href=\"#sock\">sock</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#sk_alloc\">sk_alloc</a>(struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>, int <a class=\"id\" href=\"#family\">family</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#priority\">priority</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#proto\">proto</a> *<a class=\"id\" href=\"#prot\">prot</a>);", 
"extern void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk_free\">sk_free</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>);", 
"extern void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk_release_kernel\">sk_release_kernel</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>);", 
"extern struct <a class=\"id\" href=\"#sock\">sock</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#sk_clone\">sk_clone</a>(const struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#priority\">priority</a>);", 
"", 
"extern struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#sock_wmalloc\">sock_wmalloc</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#force\">force</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#priority\">priority</a>);", 
"extern struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#sock_rmalloc\">sock_rmalloc</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#force\">force</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#priority\">priority</a>);", 
"extern void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sock_wfree\">sock_wfree</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"extern void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sock_rfree\">sock_rfree</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"extern int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sock_setsockopt\">sock_setsockopt</a>(struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>, int <a class=\"id\" href=\"#level\">level</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#op\">op</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#optval\">optval</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#optlen\">optlen</a>);", 
"", 
"extern int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sock_getsockopt\">sock_getsockopt</a>(struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>, int <a class=\"id\" href=\"#level\">level</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#op\">op</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#optval\">optval</a>, ", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#optlen\">optlen</a>);", 
"extern struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> <span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#sock_alloc_send_skb\">sock_alloc_send_skb</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#noblock\">noblock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int *<a class=\"id\" href=\"#errcode\">errcode</a>);", 
"extern struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> <span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#sock_alloc_send_pskb\">sock_alloc_send_pskb</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#header_len\">header_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#data_len\">data_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#noblock\">noblock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int *<a class=\"id\" href=\"#errcode\">errcode</a>);", 
"extern void *<a class=\"id\" href=\"#sock_kmalloc\">sock_kmalloc</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#priority\">priority</a>);", 
"extern void <a class=\"id\" href=\"#sock_kfree_s\">sock_kfree_s</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, void *<a class=\"id\" href=\"#mem\">mem</a>, int <a class=\"id\" href=\"#size\">size</a>);", 
"extern void <a class=\"id\" href=\"#sk_send_sigurg\">sk_send_sigurg</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CGROUPS\">CONFIG_CGROUPS</a>", 
"extern void <a class=\"id\" href=\"#sock_update_classid\">sock_update_classid</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sock_update_classid\">sock_update_classid</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Functions to fill in entries in struct proto_ops when a protocol</span>", 
"<span class=\"comment\"> * does not implement a particular function.</span>", 
"<span class=\"comment\"> */</span>", 
"extern int                      <a class=\"id\" href=\"#sock_no_bind\">sock_no_bind</a>(struct <a class=\"id\" href=\"#socket\">socket</a> *, ", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#sockaddr\">sockaddr</a> *, int);", 
"extern int                      <a class=\"id\" href=\"#sock_no_connect\">sock_no_connect</a>(struct <a class=\"id\" href=\"#socket\">socket</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sockaddr\">sockaddr</a> *, int, int);", 
"extern int                      <a class=\"id\" href=\"#sock_no_socketpair\">sock_no_socketpair</a>(struct <a class=\"id\" href=\"#socket\">socket</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#socket\">socket</a> *);", 
"extern int                      <a class=\"id\" href=\"#sock_no_accept\">sock_no_accept</a>(struct <a class=\"id\" href=\"#socket\">socket</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#socket\">socket</a> *, int);", 
"extern int                      <a class=\"id\" href=\"#sock_no_getname\">sock_no_getname</a>(struct <a class=\"id\" href=\"#socket\">socket</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sockaddr\">sockaddr</a> *, int *, int);", 
"extern unsigned int             <a class=\"id\" href=\"#sock_no_poll\">sock_no_poll</a>(struct <a class=\"id\" href=\"#file\">file</a> *, struct <a class=\"id\" href=\"#socket\">socket</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#poll_table_struct\">poll_table_struct</a> *);", 
"extern int                      <a class=\"id\" href=\"#sock_no_ioctl\">sock_no_ioctl</a>(struct <a class=\"id\" href=\"#socket\">socket</a> *, unsigned int,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned long);", 
"extern int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sock_no_listen\">sock_no_listen</a>(struct <a class=\"id\" href=\"#socket\">socket</a> *, int);", 
"extern int                      <a class=\"id\" href=\"#sock_no_shutdown\">sock_no_shutdown</a>(struct <a class=\"id\" href=\"#socket\">socket</a> *, int);", 
"extern int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sock_no_getsockopt\">sock_no_getsockopt</a>(struct <a class=\"id\" href=\"#socket\">socket</a> *, int , int,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   char <a class=\"id\" href=\"#__user\">__user</a> *, int <a class=\"id\" href=\"#__user\">__user</a> *);", 
"extern int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sock_no_setsockopt\">sock_no_setsockopt</a>(struct <a class=\"id\" href=\"#socket\">socket</a> *, int, int,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   char <a class=\"id\" href=\"#__user\">__user</a> *, unsigned int);", 
"extern int                      <a class=\"id\" href=\"#sock_no_sendmsg\">sock_no_sendmsg</a>(struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *, struct <a class=\"id\" href=\"#socket\">socket</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#msghdr\">msghdr</a> *, <a class=\"id\" href=\"#size_t\">size_t</a>);", 
"extern int                      <a class=\"id\" href=\"#sock_no_recvmsg\">sock_no_recvmsg</a>(struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *, struct <a class=\"id\" href=\"#socket\">socket</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#msghdr\">msghdr</a> *, <a class=\"id\" href=\"#size_t\">size_t</a>, int);", 
"extern int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sock_no_mmap\">sock_no_mmap</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>);", 
"extern <a class=\"id\" href=\"#ssize_t\">ssize_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sock_no_sendpage\">sock_no_sendpage</a>(struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, ", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Functions to fill in entries in struct proto_ops when a protocol</span>", 
"<span class=\"comment\"> * uses the inet style.</span>", 
"<span class=\"comment\"> */</span>", 
"extern int <a class=\"id\" href=\"#sock_common_getsockopt\">sock_common_getsockopt</a>(struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>, int <a class=\"id\" href=\"#level\">level</a>, int <a class=\"id\" href=\"#optname\">optname</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#optval\">optval</a>, int <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#optlen\">optlen</a>);", 
"extern int <a class=\"id\" href=\"#sock_common_recvmsg\">sock_common_recvmsg</a>(struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#iocb\">iocb</a>, struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#msghdr\">msghdr</a> *<a class=\"id\" href=\"#msg\">msg</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#flags\">flags</a>);", 
"extern int <a class=\"id\" href=\"#sock_common_setsockopt\">sock_common_setsockopt</a>(struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>, int <a class=\"id\" href=\"#level\">level</a>, int <a class=\"id\" href=\"#optname\">optname</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#optval\">optval</a>, unsigned int <a class=\"id\" href=\"#optlen\">optlen</a>);", 
"extern int <a class=\"id\" href=\"#compat_sock_common_getsockopt\">compat_sock_common_getsockopt</a>(struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>, int <a class=\"id\" href=\"#level\">level</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#optname\">optname</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#optval\">optval</a>, int <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#optlen\">optlen</a>);", 
"extern int <a class=\"id\" href=\"#compat_sock_common_setsockopt\">compat_sock_common_setsockopt</a>(struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>, int <a class=\"id\" href=\"#level\">level</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#optname\">optname</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#optval\">optval</a>, unsigned int <a class=\"id\" href=\"#optlen\">optlen</a>);", 
"", 
"extern void <a class=\"id\" href=\"#sk_common_release\">sk_common_release</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Default socket callbacks and setup code</span>", 
"<span class=\"comment\"> */</span>", 
" ", 
"<span class=\"comment\">/* Initialise core socket variables */</span>", 
"extern void <a class=\"id\" href=\"#sock_init_data\">sock_init_data</a>(struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>, struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sk_filter_release - release a socket filter</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@fp: filter to remove</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Remove a filter from a socket and release its resources.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sk_filter_release\">sk_filter_release</a>(struct <a class=\"id\" href=\"#sk_filter\">sk_filter</a> *<a class=\"id\" href=\"#fp\">fp</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#fp\">fp</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#fp\">fp</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sk_filter_uncharge\">sk_filter_uncharge</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_filter\">sk_filter</a> *<a class=\"id\" href=\"#fp\">fp</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#sk_filter_len\">sk_filter_len</a>(<a class=\"id\" href=\"#fp\">fp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_sub\">atomic_sub</a>(<a class=\"id\" href=\"#size\">size</a>, &amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_omem_alloc\">sk_omem_alloc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk_filter_release\">sk_filter_release</a>(<a class=\"id\" href=\"#fp\">fp</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sk_filter_charge\">sk_filter_charge</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_filter\">sk_filter</a> *<a class=\"id\" href=\"#fp\">fp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#fp\">fp</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_add\">atomic_add</a>(<a class=\"id\" href=\"#sk_filter_len\">sk_filter_len</a>(<a class=\"id\" href=\"#fp\">fp</a>), &amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_omem_alloc\">sk_omem_alloc</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Socket reference counting postulates.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * * Each user of socket SHOULD hold a reference count.</span>", 
"<span class=\"comment\"> * * Each access point to socket (an hash table bucket, reference from a list,</span>", 
"<span class=\"comment\"> *   running timer, skb in flight MUST hold a reference count.</span>", 
"<span class=\"comment\"> * * When reference count hits 0, it means it will never increase back.</span>", 
"<span class=\"comment\"> * * When reference count hits 0, it means that no references from</span>", 
"<span class=\"comment\"> *   outside exist to this socket and current process on current CPU</span>", 
"<span class=\"comment\"> *   is last user and may/should destroy this socket.</span>", 
"<span class=\"comment\"> * * sk_free is called from any context: process, BH, IRQ. When</span>", 
"<span class=\"comment\"> *   it is called, socket has no references from outside -&gt; sk_free</span>", 
"<span class=\"comment\"> *   may release descendant resources allocated by the socket, but</span>", 
"<span class=\"comment\"> *   to the time when it is called, socket is NOT referenced by any</span>", 
"<span class=\"comment\"> *   hash tables, lists etc.</span>", 
"<span class=\"comment\"> * * Packets, delivered from outside (from network or from another process)</span>", 
"<span class=\"comment\"> *   and enqueued on receive/error queues SHOULD NOT grab reference count,</span>", 
"<span class=\"comment\"> *   when they sit in queue. Otherwise, packets will leak to hole, when</span>", 
"<span class=\"comment\"> *   socket is looked up by one cpu and unhasing is made by another CPU.</span>", 
"<span class=\"comment\"> *   It is true for udp/raw, netlink (leak to receive and error queues), tcp</span>", 
"<span class=\"comment\"> *   (leak to backlog). Packet socket does all the processing inside</span>", 
"<span class=\"comment\"> *   BR_NETPROTO_LOCK, so that it has not this race condition. UNIX sockets</span>", 
"<span class=\"comment\"> *   use separate SMP lock, so that they are prone too.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* Ungrab socket and destroy it, if it was the last reference. */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sock_put\">sock_put</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_refcnt\">sk_refcnt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk_free\">sk_free</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"}", 
"", 
"extern int <a class=\"id\" href=\"#sk_receive_skb\">sk_receive_skb</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const int <a class=\"id\" href=\"#nested\">nested</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sk_tx_queue_set\">sk_tx_queue_set</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#tx_queue\">tx_queue</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_tx_queue_mapping\">sk_tx_queue_mapping</a> = <a class=\"id\" href=\"#tx_queue\">tx_queue</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sk_tx_queue_clear\">sk_tx_queue_clear</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_tx_queue_mapping\">sk_tx_queue_mapping</a> = -1;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#sk_tx_queue_get\">sk_tx_queue_get</a>(const struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sk\">sk</a> ? <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_tx_queue_mapping\">sk_tx_queue_mapping</a> : -1;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sk_set_socket\">sk_set_socket</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#sock\">sock</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk_tx_queue_clear\">sk_tx_queue_clear</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_socket\">sk_socket</a> = <a class=\"id\" href=\"#sock\">sock</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#sk_sleep\">sk_sleep</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_wq\">sk_wq</a>-><a class=\"id\" href=\"#wait\">wait</a>;", 
"}", 
"<span class=\"comment\">/* Detach socket from process context.</span>", 
"<span class=\"comment\"> * Announce socket dead, detach it from wait queue and inode.</span>", 
"<span class=\"comment\"> * Note that parent inode held reference count on this struct sock,</span>", 
"<span class=\"comment\"> * we do not release it in this function, because protocol</span>", 
"<span class=\"comment\"> * probably wants some additional cleanups or even continuing</span>", 
"<span class=\"comment\"> * to work with this socket (TCP).</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sock_orphan\">sock_orphan</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock_bh\">write_lock_bh</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_callback_lock\">sk_callback_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sock_set_flag\">sock_set_flag</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#SOCK_DEAD\">SOCK_DEAD</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk_set_socket\">sk_set_socket</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_wq\">sk_wq</a>  = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock_bh\">write_unlock_bh</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_callback_lock\">sk_callback_lock</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sock_graft\">sock_graft</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#socket\">socket</a> *<a class=\"id\" href=\"#parent\">parent</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock_bh\">write_lock_bh</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_callback_lock\">sk_callback_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_wq\">sk_wq</a>, <a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#wq\">wq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a>-><a class=\"id\" href=\"#sk\">sk</a> = <a class=\"id\" href=\"#sk\">sk</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk_set_socket\">sk_set_socket</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#security_sock_graft\">security_sock_graft</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock_bh\">write_unlock_bh</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_callback_lock\">sk_callback_lock</a>);", 
"}", 
"", 
"extern int <a class=\"id\" href=\"#sock_i_uid\">sock_i_uid</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>);", 
"extern unsigned long <a class=\"id\" href=\"#sock_i_ino\">sock_i_ino</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> *", 
"<a class=\"id\" href=\"#__sk_dst_get\">__sk_dst_get</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rcu_dereference_check\">rcu_dereference_check</a>(<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_dst_cache\">sk_dst_cache</a>, <a class=\"id\" href=\"#rcu_read_lock_held\">rcu_read_lock_held</a>() ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#sock_owned_by_user\">sock_owned_by_user</a>(<a class=\"id\" href=\"#sk\">sk</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#lockdep_is_held\">lockdep_is_held</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_lock\">sk_lock</a>.<a class=\"id\" href=\"#slock\">slock</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> *", 
"<a class=\"id\" href=\"#sk_dst_get\">sk_dst_get</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> *<a class=\"id\" href=\"#dst\">dst</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_dst_cache\">sk_dst_cache</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dst\">dst</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst_hold\">dst_hold</a>(<a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dst\">dst</a>;", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#sk_reset_txq\">sk_reset_txq</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#dst_negative_advice\">dst_negative_advice</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> *<a class=\"id\" href=\"#ndst\">ndst</a>, *<a class=\"id\" href=\"#dst\">dst</a> = <a class=\"id\" href=\"#__sk_dst_get\">__sk_dst_get</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dst\">dst</a> && <a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#negative_advice\">negative_advice</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ndst\">ndst</a> = <a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#negative_advice\">negative_advice</a>(<a class=\"id\" href=\"#dst\">dst</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ndst\">ndst</a> != <a class=\"id\" href=\"#dst\">dst</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_dst_cache\">sk_dst_cache</a>, <a class=\"id\" href=\"#ndst\">ndst</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk_reset_txq\">sk_reset_txq</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#__sk_dst_set\">__sk_dst_set</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> *<a class=\"id\" href=\"#dst\">dst</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> *<a class=\"id\" href=\"#old_dst\">old_dst</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk_tx_queue_clear\">sk_tx_queue_clear</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This can be called while sk is owned by the caller only,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * with no state that can be checked in a rcu_dereference_check() cond</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_dst\">old_dst</a> = <a class=\"id\" href=\"#rcu_dereference_raw\">rcu_dereference_raw</a>(<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_dst_cache\">sk_dst_cache</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_dst_cache\">sk_dst_cache</a>, <a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dst_release\">dst_release</a>(<a class=\"id\" href=\"#old_dst\">old_dst</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#sk_dst_set\">sk_dst_set</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> *<a class=\"id\" href=\"#dst\">dst</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_dst_lock\">sk_dst_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__sk_dst_set\">__sk_dst_set</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_dst_lock\">sk_dst_lock</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#__sk_dst_reset\">__sk_dst_reset</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__sk_dst_set\">__sk_dst_set</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#sk_dst_reset\">sk_dst_reset</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_dst_lock\">sk_dst_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__sk_dst_reset\">__sk_dst_reset</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_dst_lock\">sk_dst_lock</a>);", 
"}", 
"", 
"extern struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> *<a class=\"id\" href=\"#__sk_dst_check\">__sk_dst_check</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#cookie\">cookie</a>);", 
"", 
"extern struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> *<a class=\"id\" href=\"#sk_dst_check\">sk_dst_check</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#cookie\">cookie</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#sk_can_gso\">sk_can_gso</a>(const struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#net_gso_ok\">net_gso_ok</a>(<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_route_caps\">sk_route_caps</a>, <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_gso_type\">sk_gso_type</a>);", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#sk_setup_caps\">sk_setup_caps</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a> *<a class=\"id\" href=\"#dst\">dst</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sk_nocaps_add\">sk_nocaps_add</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_route_nocaps\">sk_route_nocaps</a> |= <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_route_caps\">sk_route_caps</a> &= ~<a class=\"id\" href=\"#flags\">flags</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#skb_copy_to_page\">skb_copy_to_page</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#from\">from</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#off\">off</a>, int <a class=\"id\" href=\"#copy\">copy</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#ip_summed\">ip_summed</a> == <a class=\"id\" href=\"#CHECKSUM_NONE\">CHECKSUM_NONE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__wsum\">__wsum</a> <a class=\"id\" href=\"#csum\">csum</a> = <a class=\"id\" href=\"#csum_and_copy_from_user\">csum_and_copy_from_user</a>(<a class=\"id\" href=\"#from\">from</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>) + <a class=\"id\" href=\"#off\">off</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#copy\">copy</a>, 0, &amp;<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#csum\">csum</a> = <a class=\"id\" href=\"#csum_block_add\">csum_block_add</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#csum\">csum</a>, <a class=\"id\" href=\"#csum\">csum</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(<a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>) + <a class=\"id\" href=\"#off\">off</a>, <a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#copy\">copy</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#len\">len</a><span class=\"ts\"/>     += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#data_len\">data_len</a><span class=\"ts\"/>     += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#truesize\">truesize</a><span class=\"ts\"/>     += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_wmem_queued\">sk_wmem_queued</a>   += <a class=\"id\" href=\"#copy\">copy</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk_mem_charge\">sk_mem_charge</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#copy\">copy</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sk_wmem_alloc_get - returns write allocations</span>", 
"<span class=\"comment\"> * @sk: socket</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns sk_wmem_alloc minus initial offset of one</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#sk_wmem_alloc_get\">sk_wmem_alloc_get</a>(const struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_wmem_alloc\">sk_wmem_alloc</a>) - 1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sk_rmem_alloc_get - returns read allocations</span>", 
"<span class=\"comment\"> * @sk: socket</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns sk_rmem_alloc</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#sk_rmem_alloc_get\">sk_rmem_alloc_get</a>(const struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_rmem_alloc\">sk_rmem_alloc</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sk_has_allocations - check if allocations are outstanding</span>", 
"<span class=\"comment\"> * @sk: socket</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns true if socket has write or read allocations</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#sk_has_allocations\">sk_has_allocations</a>(const struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sk_wmem_alloc_get\">sk_wmem_alloc_get</a>(<a class=\"id\" href=\"#sk\">sk</a>) || <a class=\"id\" href=\"#sk_rmem_alloc_get\">sk_rmem_alloc_get</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * wq_has_sleeper - check if there are any waiting processes</span>", 
"<span class=\"comment\"> * @wq: struct socket_wq</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns true if socket_wq has waiting processes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The purpose of the wq_has_sleeper and sock_poll_wait is to wrap the memory</span>", 
"<span class=\"comment\"> * barrier call. They were added due to the race found within the tcp code.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Consider following tcp code paths:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CPU1                  CPU2</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * sys_select            receive packet</span>", 
"<span class=\"comment\"> *   ...                 ...</span>", 
"<span class=\"comment\"> *   __add_wait_queue    update tp-&gt;rcv_nxt</span>", 
"<span class=\"comment\"> *   ...                 ...</span>", 
"<span class=\"comment\"> *   tp-&gt;rcv_nxt check   sock_def_readable</span>", 
"<span class=\"comment\"> *   ...                 {</span>", 
"<span class=\"comment\"> *   schedule               rcu_read_lock();</span>", 
"<span class=\"comment\"> *                          wq = rcu_dereference(sk-&gt;sk_wq);</span>", 
"<span class=\"comment\"> *                          if (wq &amp;&amp; waitqueue_active(&amp;wq-&gt;wait))</span>", 
"<span class=\"comment\"> *                              wake_up_interruptible(&amp;wq-&gt;wait)</span>", 
"<span class=\"comment\"> *                          ...</span>", 
"<span class=\"comment\"> *                       }</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The race for tcp fires when the __add_wait_queue changes done by CPU1 stay</span>", 
"<span class=\"comment\"> * in its cache, and so does the tp-&gt;rcv_nxt update on CPU2 side.  The CPU1</span>", 
"<span class=\"comment\"> * could then endup calling schedule and sleep forever if there are no more</span>", 
"<span class=\"comment\"> * data on the socket.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#wq_has_sleeper\">wq_has_sleeper</a>(struct <a class=\"id\" href=\"#socket_wq\">socket_wq</a> *<a class=\"id\" href=\"#wq\">wq</a>)", 
"{", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We need to be sure we are in sync with the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * add_wait_queue modifications to the wait queue.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This memory barrier is paired in the sock_poll_wait.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#wq\">wq</a> && <a class=\"id\" href=\"#waitqueue_active\">waitqueue_active</a>(&amp;<a class=\"id\" href=\"#wq\">wq</a>-><a class=\"id\" href=\"#wait\">wait</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sock_poll_wait - place memory barrier behind the poll_wait call.</span>", 
"<span class=\"comment\"> * @filp:           file</span>", 
"<span class=\"comment\"> * @wait_address:   socket wait queue</span>", 
"<span class=\"comment\"> * @p:              poll_table</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * See the comments in the wq_has_sleeper function.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sock_poll_wait\">sock_poll_wait</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#wait_address\">wait_address</a>, <a class=\"id\" href=\"#poll_table\">poll_table</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> && <a class=\"id\" href=\"#wait_address\">wait_address</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#poll_wait\">poll_wait</a>(<a class=\"id\" href=\"#filp\">filp</a>, <a class=\"id\" href=\"#wait_address\">wait_address</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We need to be sure we are in sync with the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * socket flags modification.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This memory barrier is paired in the wq_has_sleeper.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>*/</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>Queue a received datagram if it will fit. Stream and sequenced</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>protocols can't normally use this as they need to fit buffers in</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and play with them.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>Inlined as it's very short and called for pretty much every</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>packet ever received.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_set_owner_w\">skb_set_owner_w</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_orphan\">skb_orphan</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#sk\">sk</a> = <a class=\"id\" href=\"#sk\">sk</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#destructor\">destructor</a> = <a class=\"id\" href=\"#sock_wfree\">sock_wfree</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We used to take a refcount on sk, but following operation</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is enough to guarantee sk_free() wont free this sock until</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * all in-flight packets are completed</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_add\">atomic_add</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#truesize\">truesize</a>, &amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_wmem_alloc\">sk_wmem_alloc</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#skb_set_owner_r\">skb_set_owner_r</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb_orphan\">skb_orphan</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#sk\">sk</a> = <a class=\"id\" href=\"#sk\">sk</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#destructor\">destructor</a> = <a class=\"id\" href=\"#sock_rfree\">sock_rfree</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_add\">atomic_add</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#truesize\">truesize</a>, &amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_rmem_alloc\">sk_rmem_alloc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk_mem_charge\">sk_mem_charge</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#truesize\">truesize</a>);", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#sk_reset_timer\">sk_reset_timer</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#timer_list\">timer_list</a>* <a class=\"id\" href=\"#timer\">timer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#expires\">expires</a>);", 
"", 
"extern void <a class=\"id\" href=\"#sk_stop_timer\">sk_stop_timer</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#timer_list\">timer_list</a>* <a class=\"id\" href=\"#timer\">timer</a>);", 
"", 
"extern int <a class=\"id\" href=\"#sock_queue_rcv_skb\">sock_queue_rcv_skb</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"extern int <a class=\"id\" href=\"#sock_queue_err_skb\">sock_queue_err_skb</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Recover an error report and clear atomically</span>", 
"<span class=\"comment\"> */</span>", 
" ", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#sock_error\">sock_error</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_err\">sk_err</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#xchg\">xchg</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_err\">sk_err</a>, 0);", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#sock_wspace\">sock_wspace</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#amt\">amt</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_shutdown\">sk_shutdown</a> &amp; <a class=\"id\" href=\"#SEND_SHUTDOWN\">SEND_SHUTDOWN</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#amt\">amt</a> = <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_sndbuf\">sk_sndbuf</a> - <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_wmem_alloc\">sk_wmem_alloc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#amt\">amt</a> &lt; 0) ", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#amt\">amt</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#amt\">amt</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sk_wake_async\">sk_wake_async</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#how\">how</a>, int <a class=\"id\" href=\"#band\">band</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sock_flag\">sock_flag</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#SOCK_FASYNC\">SOCK_FASYNC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sock_wake_async\">sock_wake_async</a>(<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_socket\">sk_socket</a>, <a class=\"id\" href=\"#how\">how</a>, <a class=\"id\" href=\"#band\">band</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SOCK_MIN_SNDBUF\">SOCK_MIN_SNDBUF</a> 2048", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SOCK_MIN_RCVBUF\">SOCK_MIN_RCVBUF</a> 256", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sk_stream_moderate_sndbuf\">sk_stream_moderate_sndbuf</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_userlocks\">sk_userlocks</a> &amp; <a class=\"id\" href=\"#SOCK_SNDBUF_LOCK\">SOCK_SNDBUF_LOCK</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_sndbuf\">sk_sndbuf</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_sndbuf\">sk_sndbuf</a>, <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_wmem_queued\">sk_wmem_queued</a> >> 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_sndbuf\">sk_sndbuf</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_sndbuf\">sk_sndbuf</a>, <a class=\"id\" href=\"#SOCK_MIN_SNDBUF\">SOCK_MIN_SNDBUF</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#sk_stream_alloc_skb\">sk_stream_alloc_skb</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#sk_stream_alloc_page\">sk_stream_alloc_page</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#alloc_pages\">alloc_pages</a>(<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_allocation\">sk_allocation</a>, 0);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_prot\">sk_prot</a>-><a class=\"id\" href=\"#enter_memory_pressure\">enter_memory_pressure</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk_stream_moderate_sndbuf\">sk_stream_moderate_sndbuf</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Default write policy as shown to user space via poll/select/SIGIO</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#sock_writeable\">sock_writeable</a>(const struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>) ", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_wmem_alloc\">sk_wmem_alloc</a>) &lt; (<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_sndbuf\">sk_sndbuf</a> >> 1);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_any\">gfp_any</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#in_softirq\">in_softirq</a>() ? <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a> : <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> long <a class=\"id\" href=\"#sock_rcvtimeo\">sock_rcvtimeo</a>(const struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#noblock\">noblock</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#noblock\">noblock</a> ? 0 : <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_rcvtimeo\">sk_rcvtimeo</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> long <a class=\"id\" href=\"#sock_sndtimeo\">sock_sndtimeo</a>(const struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#noblock\">noblock</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#noblock\">noblock</a> ? 0 : <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_sndtimeo\">sk_sndtimeo</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#sock_rcvlowat\">sock_rcvlowat</a>(const struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#waitall\">waitall</a>, int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#waitall\">waitall</a> ? <a class=\"id\" href=\"#len\">len</a> : <a class=\"id\" href=\"#min_t\">min_t</a>(int, <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_rcvlowat\">sk_rcvlowat</a>, <a class=\"id\" href=\"#len\">len</a>)) ? : 1;", 
"}", 
"", 
"<span class=\"comment\">/* Alas, with timeout socket operations are not restartable.</span>", 
"<span class=\"comment\"> * Compare this to poll().</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#sock_intr_errno\">sock_intr_errno</a>(long <a class=\"id\" href=\"#timeo\">timeo</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#timeo\">timeo</a> == <a class=\"id\" href=\"#MAX_SCHEDULE_TIMEOUT\">MAX_SCHEDULE_TIMEOUT</a> ? -<a class=\"id\" href=\"#ERESTARTSYS\">ERESTARTSYS</a> : -<a class=\"id\" href=\"#EINTR\">EINTR</a>;", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#__sock_recv_timestamp\">__sock_recv_timestamp</a>(struct <a class=\"id\" href=\"#msghdr\">msghdr</a> *<a class=\"id\" href=\"#msg\">msg</a>, struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"static <a class=\"id\" href=\"#__inline__\">__inline__</a> void", 
"<a class=\"id\" href=\"#sock_recv_timestamp\">sock_recv_timestamp</a>(struct <a class=\"id\" href=\"#msghdr\">msghdr</a> *<a class=\"id\" href=\"#msg\">msg</a>, struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#kt\">kt</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tstamp\">tstamp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#skb_shared_hwtstamps\">skb_shared_hwtstamps</a> *<a class=\"id\" href=\"#hwtstamps\">hwtstamps</a> = <a class=\"id\" href=\"#skb_hwtstamps\">skb_hwtstamps</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * generate control messages if</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - receive time stamping in software requested (SOCK_RCVTSTAMP</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   or SOCK_TIMESTAMPING_RX_SOFTWARE)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - software time stamp available and wanted</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   (SOCK_TIMESTAMPING_SOFTWARE)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - hardware time stamps available and wanted</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   (SOCK_TIMESTAMPING_SYS_HARDWARE or</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   SOCK_TIMESTAMPING_RAW_HARDWARE)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sock_flag\">sock_flag</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#SOCK_RCVTSTAMP\">SOCK_RCVTSTAMP</a>) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#sock_flag\">sock_flag</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#SOCK_TIMESTAMPING_RX_SOFTWARE\">SOCK_TIMESTAMPING_RX_SOFTWARE</a>) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#kt\">kt</a>.<a class=\"id\" href=\"#tv64\">tv64</a> && <a class=\"id\" href=\"#sock_flag\">sock_flag</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#SOCK_TIMESTAMPING_SOFTWARE\">SOCK_TIMESTAMPING_SOFTWARE</a>)) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#hwtstamps\">hwtstamps</a>-><a class=\"id\" href=\"#hwtstamp\">hwtstamp</a>.<a class=\"id\" href=\"#tv64\">tv64</a> &&", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#sock_flag\">sock_flag</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#SOCK_TIMESTAMPING_RAW_HARDWARE\">SOCK_TIMESTAMPING_RAW_HARDWARE</a>)) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#hwtstamps\">hwtstamps</a>-><a class=\"id\" href=\"#syststamp\">syststamp</a>.<a class=\"id\" href=\"#tv64\">tv64</a> &&", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#sock_flag\">sock_flag</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#SOCK_TIMESTAMPING_SYS_HARDWARE\">SOCK_TIMESTAMPING_SYS_HARDWARE</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__sock_recv_timestamp\">__sock_recv_timestamp</a>(<a class=\"id\" href=\"#msg\">msg</a>, <a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_stamp\">sk_stamp</a> = <a class=\"id\" href=\"#kt\">kt</a>;", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#__sock_recv_ts_and_drops\">__sock_recv_ts_and_drops</a>(struct <a class=\"id\" href=\"#msghdr\">msghdr</a> *<a class=\"id\" href=\"#msg\">msg</a>, struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sock_recv_ts_and_drops\">sock_recv_ts_and_drops</a>(struct <a class=\"id\" href=\"#msghdr\">msghdr</a> *<a class=\"id\" href=\"#msg\">msg</a>, struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FLAGS_TS_OR_DROPS\">FLAGS_TS_OR_DROPS</a> ((1UL << <a class=\"id\" href=\"#SOCK_RXQ_OVFL\">SOCK_RXQ_OVFL</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>| \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   (1UL << <a class=\"id\" href=\"#SOCK_RCVTSTAMP\">SOCK_RCVTSTAMP</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>| \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   (1UL << <a class=\"id\" href=\"#SOCK_TIMESTAMPING_RX_SOFTWARE\">SOCK_TIMESTAMPING_RX_SOFTWARE</a>)<span class=\"ts\"/>| \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   (1UL << <a class=\"id\" href=\"#SOCK_TIMESTAMPING_SOFTWARE\">SOCK_TIMESTAMPING_SOFTWARE</a>)<span class=\"ts\"/><span class=\"ts\"/>| \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   (1UL << <a class=\"id\" href=\"#SOCK_TIMESTAMPING_RAW_HARDWARE\">SOCK_TIMESTAMPING_RAW_HARDWARE</a>) <span class=\"ts\"/>| \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   (1UL << <a class=\"id\" href=\"#SOCK_TIMESTAMPING_SYS_HARDWARE\">SOCK_TIMESTAMPING_SYS_HARDWARE</a>))", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_flags\">sk_flags</a> &amp; <a class=\"id\" href=\"#FLAGS_TS_OR_DROPS\">FLAGS_TS_OR_DROPS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__sock_recv_ts_and_drops\">__sock_recv_ts_and_drops</a>(<a class=\"id\" href=\"#msg\">msg</a>, <a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_stamp\">sk_stamp</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#tstamp\">tstamp</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sock_tx_timestamp - checks whether the outgoing packet is to be time stamped</span>", 
"<span class=\"comment\"> * @msg:<span class=\"ts\"/>outgoing packet</span>", 
"<span class=\"comment\"> * @sk:<span class=\"ts\"/><span class=\"ts\"/>socket sending this packet</span>", 
"<span class=\"comment\"> * @shtx:<span class=\"ts\"/>filled with instructions for time stamping</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Currently only depends on SOCK_TIMESTAMPING* flags. Returns error code if</span>", 
"<span class=\"comment\"> * parameters are invalid.</span>", 
"<span class=\"comment\"> */</span>", 
"extern int <a class=\"id\" href=\"#sock_tx_timestamp\">sock_tx_timestamp</a>(struct <a class=\"id\" href=\"#msghdr\">msghdr</a> *<a class=\"id\" href=\"#msg\">msg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     union <a class=\"id\" href=\"#skb_shared_tx\">skb_shared_tx</a> *<a class=\"id\" href=\"#shtx\">shtx</a>);", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sk_eat_skb - Release a skb if it is no longer needed</span>", 
"<span class=\"comment\"> * @sk: socket to eat this skb from</span>", 
"<span class=\"comment\"> * @skb: socket buffer to eat</span>", 
"<span class=\"comment\"> * @copied_early: flag indicating whether DMA operations copied this data early</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This routine must be called with interrupts disabled or with the socket</span>", 
"<span class=\"comment\"> * locked so that the sk_buff queue operation is ok.</span>", 
"<span class=\"comment\">*/</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NET_DMA\">CONFIG_NET_DMA</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sk_eat_skb\">sk_eat_skb</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#copied_early\">copied_early</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__skb_unlink\">__skb_unlink</a>(<a class=\"id\" href=\"#skb\">skb</a>, &amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_receive_queue\">sk_receive_queue</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#copied_early\">copied_early</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__kfree_skb\">__kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__skb_queue_tail\">__skb_queue_tail</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_async_wait_queue\">sk_async_wait_queue</a>, <a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sk_eat_skb\">sk_eat_skb</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, int <a class=\"id\" href=\"#copied_early\">copied_early</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__skb_unlink\">__skb_unlink</a>(<a class=\"id\" href=\"#skb\">skb</a>, &amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_receive_queue\">sk_receive_queue</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__kfree_skb\">__kfree_skb</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a>", 
"struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#sock_net\">sock_net</a>(const struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#read_pnet\">read_pnet</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_net\">sk_net</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a>", 
"void <a class=\"id\" href=\"#sock_net_set\">sock_net_set</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_pnet\">write_pnet</a>(&amp;<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_net\">sk_net</a>, <a class=\"id\" href=\"#net\">net</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Kernel sockets, f.e. rtnl or icmp_socket, are a part of a namespace.</span>", 
"<span class=\"comment\"> * They should not hold a referrence to a namespace in order to allow</span>", 
"<span class=\"comment\"> * to stop it.</span>", 
"<span class=\"comment\"> * Sockets after sk_change_net should be released using sk_release_kernel</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sk_change_net\">sk_change_net</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, struct <a class=\"id\" href=\"#net\">net</a> *<a class=\"id\" href=\"#net\">net</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_net\">put_net</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sock_net_set\">sock_net_set</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#hold_net\">hold_net</a>(<a class=\"id\" href=\"#net\">net</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#skb_steal_sock\">skb_steal_sock</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#sk\">sk</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a> = <a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#sk\">sk</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#destructor\">destructor</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#skb\">skb</a>-><a class=\"id\" href=\"#sk\">sk</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#sk\">sk</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#sock_enable_timestamp\">sock_enable_timestamp</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#flag\">flag</a>);", 
"extern int <a class=\"id\" href=\"#sock_get_timestamp\">sock_get_timestamp</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *, struct <a class=\"id\" href=\"#timeval\">timeval</a> <a class=\"id\" href=\"#__user\">__user</a> *);", 
"extern int <a class=\"id\" href=\"#sock_get_timestampns\">sock_get_timestampns</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *, struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#__user\">__user</a> *);", 
"", 
"<span class=\"comment\">/* </span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Enable debug/info messages </span>", 
"<span class=\"comment\"> */</span>", 
"extern int <a class=\"id\" href=\"#net_msg_warn\">net_msg_warn</a>;", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NETDEBUG\">NETDEBUG</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>...) \\", 
"<span class=\"ts\"/>do { if (<a class=\"id\" href=\"#net_msg_warn\">net_msg_warn</a>) <a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#fmt\">fmt</a>,##<a class=\"id\" href=\"#args\">args</a>); } while (0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LIMIT_NETDEBUG\">LIMIT_NETDEBUG</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>...) \\", 
"<span class=\"ts\"/>do { if (<a class=\"id\" href=\"#net_msg_warn\">net_msg_warn</a> && <a class=\"id\" href=\"#net_ratelimit\">net_ratelimit</a>()) <a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#fmt\">fmt</a>,##<a class=\"id\" href=\"#args\">args</a>); } while(0)", 
"", 
"extern <a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#sysctl_wmem_max\">sysctl_wmem_max</a>;", 
"extern <a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#sysctl_rmem_max\">sysctl_rmem_max</a>;", 
"", 
"extern void <a class=\"id\" href=\"#sk_init\">sk_init</a>(void);", 
"", 
"extern int <a class=\"id\" href=\"#sysctl_optmem_max\">sysctl_optmem_max</a>;", 
"", 
"extern <a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#sysctl_wmem_default\">sysctl_wmem_default</a>;", 
"extern <a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#sysctl_rmem_default\">sysctl_rmem_default</a>;", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* _SOCK_H */</span>", 
];
xr_frag_insert('l/0c/f50d62cb5175246cea4f22851998cfc66bb4fb.xr', __xr_tmp);
