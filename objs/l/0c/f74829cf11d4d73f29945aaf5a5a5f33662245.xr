var __xr_tmp = [
"static <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#sched_vslice\">sched_vslice</a>(struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#calc_delta_fair\">calc_delta_fair</a>(<a class=\"id\" href=\"#sched_slice\">sched_slice</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, <a class=\"id\" href=\"#se\">se</a>), <a class=\"id\" href=\"#se\">se</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Update the current task's runtime statistics. Skip current tasks that</span>", 
"<span class=\"comment\"> * are not in our scheduling class.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#__update_curr\">__update_curr</a>(struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#curr\">curr</a>,", 
"<span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#delta_exec\">delta_exec</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#delta_exec_weighted\">delta_exec_weighted</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedstat_set\">schedstat_set</a>(<a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#statistics\">statistics</a>.<a class=\"id\" href=\"#exec_max\">exec_max</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#max\">max</a>((<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#delta_exec\">delta_exec</a>, <a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#statistics\">statistics</a>.<a class=\"id\" href=\"#exec_max\">exec_max</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#sum_exec_runtime\">sum_exec_runtime</a> += <a class=\"id\" href=\"#delta_exec\">delta_exec</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedstat_add\">schedstat_add</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, <a class=\"id\" href=\"#exec_clock\">exec_clock</a>, <a class=\"id\" href=\"#delta_exec\">delta_exec</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delta_exec_weighted\">delta_exec_weighted</a> = <a class=\"id\" href=\"#calc_delta_fair\">calc_delta_fair</a>(<a class=\"id\" href=\"#delta_exec\">delta_exec</a>, <a class=\"id\" href=\"#curr\">curr</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#vruntime\">vruntime</a> += <a class=\"id\" href=\"#delta_exec_weighted\">delta_exec_weighted</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_min_vruntime\">update_min_vruntime</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#update_curr\">update_curr</a>(struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#curr\">curr</a> = <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#curr\">curr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#rq_of\">rq_of</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>)-><a class=\"id\" href=\"#clock\">clock</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#delta_exec\">delta_exec</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#curr\">curr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Get the amount of time the current task was running</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * since the last time we changed load (this cannot</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * overflow on 32 bits):</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delta_exec\">delta_exec</a> = (unsigned long)(<a class=\"id\" href=\"#now\">now</a> - <a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#exec_start\">exec_start</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#delta_exec\">delta_exec</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__update_curr\">__update_curr</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, <a class=\"id\" href=\"#curr\">curr</a>, <a class=\"id\" href=\"#delta_exec\">delta_exec</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#exec_start\">exec_start</a> = <a class=\"id\" href=\"#now\">now</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#entity_is_task\">entity_is_task</a>(<a class=\"id\" href=\"#curr\">curr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#curtask\">curtask</a> = <a class=\"id\" href=\"#task_of\">task_of</a>(<a class=\"id\" href=\"#curr\">curr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_sched_stat_runtime\">trace_sched_stat_runtime</a>(<a class=\"id\" href=\"#curtask\">curtask</a>, <a class=\"id\" href=\"#delta_exec\">delta_exec</a>, <a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#vruntime\">vruntime</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpuacct_charge\">cpuacct_charge</a>(<a class=\"id\" href=\"#curtask\">curtask</a>, <a class=\"id\" href=\"#delta_exec\">delta_exec</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#account_group_exec_runtime\">account_group_exec_runtime</a>(<a class=\"id\" href=\"#curtask\">curtask</a>, <a class=\"id\" href=\"#delta_exec\">delta_exec</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#update_stats_wait_start\">update_stats_wait_start</a>(struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedstat_set\">schedstat_set</a>(<a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#statistics\">statistics</a>.<a class=\"id\" href=\"#wait_start\">wait_start</a>, <a class=\"id\" href=\"#rq_of\">rq_of</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>)-><a class=\"id\" href=\"#clock\">clock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Task is being enqueued - update stats:</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#update_stats_enqueue\">update_stats_enqueue</a>(struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Are we enqueueing a waiting task? (for current tasks</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a dequeue/enqueue event is a NOP)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#se\">se</a> != <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#curr\">curr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_stats_wait_start\">update_stats_wait_start</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, <a class=\"id\" href=\"#se\">se</a>);", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#update_stats_wait_end\">update_stats_wait_end</a>(struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedstat_set\">schedstat_set</a>(<a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#statistics\">statistics</a>.<a class=\"id\" href=\"#wait_max\">wait_max</a>, <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#statistics\">statistics</a>.<a class=\"id\" href=\"#wait_max\">wait_max</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq_of\">rq_of</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>)-><a class=\"id\" href=\"#clock\">clock</a> - <a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#statistics\">statistics</a>.<a class=\"id\" href=\"#wait_start\">wait_start</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedstat_set\">schedstat_set</a>(<a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#statistics\">statistics</a>.<a class=\"id\" href=\"#wait_count\">wait_count</a>, <a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#statistics\">statistics</a>.<a class=\"id\" href=\"#wait_count\">wait_count</a> + 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedstat_set\">schedstat_set</a>(<a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#statistics\">statistics</a>.<a class=\"id\" href=\"#wait_sum\">wait_sum</a>, <a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#statistics\">statistics</a>.<a class=\"id\" href=\"#wait_sum\">wait_sum</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq_of\">rq_of</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>)-><a class=\"id\" href=\"#clock\">clock</a> - <a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#statistics\">statistics</a>.<a class=\"id\" href=\"#wait_start\">wait_start</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHEDSTATS\">CONFIG_SCHEDSTATS</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#entity_is_task\">entity_is_task</a>(<a class=\"id\" href=\"#se\">se</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_sched_stat_wait\">trace_sched_stat_wait</a>(<a class=\"id\" href=\"#task_of\">task_of</a>(<a class=\"id\" href=\"#se\">se</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq_of\">rq_of</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>)-><a class=\"id\" href=\"#clock\">clock</a> - <a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#statistics\">statistics</a>.<a class=\"id\" href=\"#wait_start\">wait_start</a>);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedstat_set\">schedstat_set</a>(<a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#statistics\">statistics</a>.<a class=\"id\" href=\"#wait_start\">wait_start</a>, 0);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#update_stats_dequeue\">update_stats_dequeue</a>(struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Mark the end of the wait period if dequeueing a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * waiting task:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#se\">se</a> != <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#curr\">curr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_stats_wait_end\">update_stats_wait_end</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, <a class=\"id\" href=\"#se\">se</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We are picking a new current task - update its stats:</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#update_stats_curr_start\">update_stats_curr_start</a>(struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We are starting a new run period:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#exec_start\">exec_start</a> = <a class=\"id\" href=\"#rq_of\">rq_of</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>)-><a class=\"id\" href=\"#clock\">clock</a>;", 
"}", 
"", 
"<span class=\"comment\">/**************************************************</span>", 
"<span class=\"comment\"> * Scheduling class queueing methods:</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a> && <a class=\"id\" href=\"#defined\">defined</a> <a class=\"id\" href=\"#CONFIG_FAIR_GROUP_SCHED\">CONFIG_FAIR_GROUP_SCHED</a>", 
"static void", 
"<a class=\"id\" href=\"#add_cfs_task_weight\">add_cfs_task_weight</a>(struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, unsigned long <a class=\"id\" href=\"#weight\">weight</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#task_weight\">task_weight</a> += <a class=\"id\" href=\"#weight\">weight</a>;", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#add_cfs_task_weight\">add_cfs_task_weight</a>(struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, unsigned long <a class=\"id\" href=\"#weight\">weight</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static void", 
"<a class=\"id\" href=\"#account_entity_enqueue\">account_entity_enqueue</a>(struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_load_add\">update_load_add</a>(&amp;<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#load\">load</a>, <a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#load\">load</a>.<a class=\"id\" href=\"#weight\">weight</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#parent_entity\">parent_entity</a>(<a class=\"id\" href=\"#se\">se</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inc_cpu_load\">inc_cpu_load</a>(<a class=\"id\" href=\"#rq_of\">rq_of</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>), <a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#load\">load</a>.<a class=\"id\" href=\"#weight\">weight</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#entity_is_task\">entity_is_task</a>(<a class=\"id\" href=\"#se\">se</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_cfs_task_weight\">add_cfs_task_weight</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, <a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#load\">load</a>.<a class=\"id\" href=\"#weight\">weight</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#group_node\">group_node</a>, &amp;<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#tasks\">tasks</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#nr_running\">nr_running</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#on_rq\">on_rq</a> = 1;", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#account_entity_dequeue\">account_entity_dequeue</a>(struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_load_sub\">update_load_sub</a>(&amp;<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#load\">load</a>, <a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#load\">load</a>.<a class=\"id\" href=\"#weight\">weight</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#parent_entity\">parent_entity</a>(<a class=\"id\" href=\"#se\">se</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dec_cpu_load\">dec_cpu_load</a>(<a class=\"id\" href=\"#rq_of\">rq_of</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>), <a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#load\">load</a>.<a class=\"id\" href=\"#weight\">weight</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#entity_is_task\">entity_is_task</a>(<a class=\"id\" href=\"#se\">se</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_cfs_task_weight\">add_cfs_task_weight</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, -<a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#load\">load</a>.<a class=\"id\" href=\"#weight\">weight</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#group_node\">group_node</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#nr_running\">nr_running</a>--;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#on_rq\">on_rq</a> = 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#enqueue_sleeper\">enqueue_sleeper</a>(struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHEDSTATS\">CONFIG_SCHEDSTATS</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#entity_is_task\">entity_is_task</a>(<a class=\"id\" href=\"#se\">se</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#task_of\">task_of</a>(<a class=\"id\" href=\"#se\">se</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#statistics\">statistics</a>.<a class=\"id\" href=\"#sleep_start\">sleep_start</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#rq_of\">rq_of</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>)-><a class=\"id\" href=\"#clock\">clock</a> - <a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#statistics\">statistics</a>.<a class=\"id\" href=\"#sleep_start\">sleep_start</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#s64\">s64</a>)<a class=\"id\" href=\"#delta\">delta</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#delta\">delta</a> &gt; <a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#statistics\">statistics</a>.<a class=\"id\" href=\"#sleep_max\">sleep_max</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#statistics\">statistics</a>.<a class=\"id\" href=\"#sleep_max\">sleep_max</a> = <a class=\"id\" href=\"#delta\">delta</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#statistics\">statistics</a>.<a class=\"id\" href=\"#sleep_start\">sleep_start</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#statistics\">statistics</a>.<a class=\"id\" href=\"#sum_sleep_runtime\">sum_sleep_runtime</a> += <a class=\"id\" href=\"#delta\">delta</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tsk\">tsk</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#account_scheduler_latency\">account_scheduler_latency</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#delta\">delta</a> >> 10, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_sched_stat_sleep\">trace_sched_stat_sleep</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#delta\">delta</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#statistics\">statistics</a>.<a class=\"id\" href=\"#block_start\">block_start</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#rq_of\">rq_of</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>)-><a class=\"id\" href=\"#clock\">clock</a> - <a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#statistics\">statistics</a>.<a class=\"id\" href=\"#block_start\">block_start</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#s64\">s64</a>)<a class=\"id\" href=\"#delta\">delta</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#delta\">delta</a> &gt; <a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#statistics\">statistics</a>.<a class=\"id\" href=\"#block_max\">block_max</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#statistics\">statistics</a>.<a class=\"id\" href=\"#block_max\">block_max</a> = <a class=\"id\" href=\"#delta\">delta</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#statistics\">statistics</a>.<a class=\"id\" href=\"#block_start\">block_start</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#statistics\">statistics</a>.<a class=\"id\" href=\"#sum_sleep_runtime\">sum_sleep_runtime</a> += <a class=\"id\" href=\"#delta\">delta</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tsk\">tsk</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#in_iowait\">in_iowait</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#statistics\">statistics</a>.<a class=\"id\" href=\"#iowait_sum\">iowait_sum</a> += <a class=\"id\" href=\"#delta\">delta</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#statistics\">statistics</a>.<a class=\"id\" href=\"#iowait_count\">iowait_count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_sched_stat_iowait\">trace_sched_stat_iowait</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#delta\">delta</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Blocking time is in units of nanosecs, so shift by</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * 20 to get a milliseconds-range estimation of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * amount of time that the task spent sleeping:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#prof_on\">prof_on</a> == <a class=\"id\" href=\"#SLEEP_PROFILING\">SLEEP_PROFILING</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#profile_hits\">profile_hits</a>(<a class=\"id\" href=\"#SLEEP_PROFILING\">SLEEP_PROFILING</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(void *)<a class=\"id\" href=\"#get_wchan\">get_wchan</a>(<a class=\"id\" href=\"#tsk\">tsk</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> >> 20);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#account_scheduler_latency\">account_scheduler_latency</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#delta\">delta</a> >> 10, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static void <a class=\"id\" href=\"#check_spread\">check_spread</a>(struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHED_DEBUG\">CONFIG_SCHED_DEBUG</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#d\">d</a> = <a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#vruntime\">vruntime</a> - <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#min_vruntime\">min_vruntime</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#d\">d</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a> = -<a class=\"id\" href=\"#d\">d</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#d\">d</a> &gt; 3*<a class=\"id\" href=\"#sysctl_sched_latency\">sysctl_sched_latency</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedstat_inc\">schedstat_inc</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, <a class=\"id\" href=\"#nr_spread_over\">nr_spread_over</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#place_entity\">place_entity</a>(struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a>, int <a class=\"id\" href=\"#initial\">initial</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#vruntime\">vruntime</a> = <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#min_vruntime\">min_vruntime</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The 'current' period is already promised to the current tasks,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * however the extra weight of the new task will slow them down a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * little, place the new task so that it fits in the slot that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * stays open at the end.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#initial\">initial</a> && <a class=\"id\" href=\"#sched_feat\">sched_feat</a>(<a class=\"id\" href=\"#START_DEBIT\">START_DEBIT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vruntime\">vruntime</a> += <a class=\"id\" href=\"#sched_vslice\">sched_vslice</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, <a class=\"id\" href=\"#se\">se</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* sleeps up to a single latency don't count. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#initial\">initial</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#thresh\">thresh</a> = <a class=\"id\" href=\"#sysctl_sched_latency\">sysctl_sched_latency</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Halve their sleep time's effect, to allow</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * for a gentler effect of sleepers:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sched_feat\">sched_feat</a>(<a class=\"id\" href=\"#GENTLE_FAIR_SLEEPERS\">GENTLE_FAIR_SLEEPERS</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#thresh\">thresh</a> >>= 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vruntime\">vruntime</a> -= <a class=\"id\" href=\"#thresh\">thresh</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* ensure we never gain time by being placed backwards. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vruntime\">vruntime</a> = <a class=\"id\" href=\"#max_vruntime\">max_vruntime</a>(<a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#vruntime\">vruntime</a>, <a class=\"id\" href=\"#vruntime\">vruntime</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#vruntime\">vruntime</a> = <a class=\"id\" href=\"#vruntime\">vruntime</a>;", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#enqueue_entity\">enqueue_entity</a>(struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Update the normalized vruntime before updating min_vruntime</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * through callig update_curr().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ENQUEUE_WAKEUP\">ENQUEUE_WAKEUP</a>) || (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ENQUEUE_WAKING\">ENQUEUE_WAKING</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#vruntime\">vruntime</a> += <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#min_vruntime\">min_vruntime</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Update run-time statistics of the 'current'.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_curr\">update_curr</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#account_entity_enqueue\">account_entity_enqueue</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, <a class=\"id\" href=\"#se\">se</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ENQUEUE_WAKEUP\">ENQUEUE_WAKEUP</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#place_entity\">place_entity</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, <a class=\"id\" href=\"#se\">se</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enqueue_sleeper\">enqueue_sleeper</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, <a class=\"id\" href=\"#se\">se</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_stats_enqueue\">update_stats_enqueue</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, <a class=\"id\" href=\"#se\">se</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_spread\">check_spread</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, <a class=\"id\" href=\"#se\">se</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#se\">se</a> != <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#curr\">curr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__enqueue_entity\">__enqueue_entity</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, <a class=\"id\" href=\"#se\">se</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__clear_buddies\">__clear_buddies</a>(struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#se\">se</a> || <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#last\">last</a> == <a class=\"id\" href=\"#se\">se</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#last\">last</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#se\">se</a> || <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#next\">next</a> == <a class=\"id\" href=\"#se\">se</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#clear_buddies\">clear_buddies</a>(struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_sched_entity\">for_each_sched_entity</a>(<a class=\"id\" href=\"#se\">se</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__clear_buddies\">__clear_buddies</a>(<a class=\"id\" href=\"#cfs_rq_of\">cfs_rq_of</a>(<a class=\"id\" href=\"#se\">se</a>), <a class=\"id\" href=\"#se\">se</a>);", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#dequeue_entity\">dequeue_entity</a>(struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Update run-time statistics of the 'current'.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_curr\">update_curr</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_stats_dequeue\">update_stats_dequeue</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, <a class=\"id\" href=\"#se\">se</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#DEQUEUE_SLEEP\">DEQUEUE_SLEEP</a>) {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHEDSTATS\">CONFIG_SCHEDSTATS</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#entity_is_task\">entity_is_task</a>(<a class=\"id\" href=\"#se\">se</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#task_of\">task_of</a>(<a class=\"id\" href=\"#se\">se</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#state\">state</a> &amp; <a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#statistics\">statistics</a>.<a class=\"id\" href=\"#sleep_start\">sleep_start</a> = <a class=\"id\" href=\"#rq_of\">rq_of</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>)-><a class=\"id\" href=\"#clock\">clock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#state\">state</a> &amp; <a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#statistics\">statistics</a>.<a class=\"id\" href=\"#block_start\">block_start</a> = <a class=\"id\" href=\"#rq_of\">rq_of</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>)-><a class=\"id\" href=\"#clock\">clock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_buddies\">clear_buddies</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, <a class=\"id\" href=\"#se\">se</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#se\">se</a> != <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#curr\">curr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__dequeue_entity\">__dequeue_entity</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, <a class=\"id\" href=\"#se\">se</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#account_entity_dequeue\">account_entity_dequeue</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, <a class=\"id\" href=\"#se\">se</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_min_vruntime\">update_min_vruntime</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Normalize the entity after updating the min_vruntime because the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * update can refer to the -&gt;curr item and we need to reflect this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * movement in our normalized position.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#DEQUEUE_SLEEP\">DEQUEUE_SLEEP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#vruntime\">vruntime</a> -= <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#min_vruntime\">min_vruntime</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Preempt the current task with a newly woken task if needed:</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#check_preempt_tick\">check_preempt_tick</a>(struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#curr\">curr</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ideal_runtime\">ideal_runtime</a>, <a class=\"id\" href=\"#delta_exec\">delta_exec</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ideal_runtime\">ideal_runtime</a> = <a class=\"id\" href=\"#sched_slice\">sched_slice</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, <a class=\"id\" href=\"#curr\">curr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delta_exec\">delta_exec</a> = <a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#sum_exec_runtime\">sum_exec_runtime</a> - <a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#prev_sum_exec_runtime\">prev_sum_exec_runtime</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#delta_exec\">delta_exec</a> &gt; <a class=\"id\" href=\"#ideal_runtime\">ideal_runtime</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#resched_task\">resched_task</a>(<a class=\"id\" href=\"#rq_of\">rq_of</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>)-><a class=\"id\" href=\"#curr\">curr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The current task ran long enough, ensure it doesn't get</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * re-elected due to buddy favours.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_buddies\">clear_buddies</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, <a class=\"id\" href=\"#curr\">curr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Ensure that a task that missed wakeup preemption by a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * narrow margin doesn't have to wait for a full slice.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This also mitigates buddy induced latencies under load.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sched_feat\">sched_feat</a>(<a class=\"id\" href=\"#WAKEUP_PREEMPT\">WAKEUP_PREEMPT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#delta_exec\">delta_exec</a> &lt; <a class=\"id\" href=\"#sysctl_sched_min_granularity\">sysctl_sched_min_granularity</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#nr_running\">nr_running</a> &gt; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a> = <a class=\"id\" href=\"#__pick_next_entity\">__pick_next_entity</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#vruntime\">vruntime</a> - <a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#vruntime\">vruntime</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#delta\">delta</a> &gt; <a class=\"id\" href=\"#ideal_runtime\">ideal_runtime</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#resched_task\">resched_task</a>(<a class=\"id\" href=\"#rq_of\">rq_of</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>)-><a class=\"id\" href=\"#curr\">curr</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#set_next_entity\">set_next_entity</a>(struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* 'current' is not kept within the tree. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#on_rq\">on_rq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Any task has to be enqueued before it get to execute on</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * a CPU. So account for the time it spent waiting on the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * runqueue.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_stats_wait_end\">update_stats_wait_end</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, <a class=\"id\" href=\"#se\">se</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__dequeue_entity\">__dequeue_entity</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, <a class=\"id\" href=\"#se\">se</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_stats_curr_start\">update_stats_curr_start</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, <a class=\"id\" href=\"#se\">se</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#curr\">curr</a> = <a class=\"id\" href=\"#se\">se</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHEDSTATS\">CONFIG_SCHEDSTATS</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Track our maximum slice length, if the CPU's load is at</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * least twice that of our own weight (i.e. dont track it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * when there are only lesser-weight tasks around):</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rq_of\">rq_of</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>)-><a class=\"id\" href=\"#load\">load</a>.<a class=\"id\" href=\"#weight\">weight</a> >= 2*<a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#load\">load</a>.<a class=\"id\" href=\"#weight\">weight</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#statistics\">statistics</a>.<a class=\"id\" href=\"#slice_max\">slice_max</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#statistics\">statistics</a>.<a class=\"id\" href=\"#slice_max\">slice_max</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#sum_exec_runtime\">sum_exec_runtime</a> - <a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#prev_sum_exec_runtime\">prev_sum_exec_runtime</a>);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#prev_sum_exec_runtime\">prev_sum_exec_runtime</a> = <a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#sum_exec_runtime\">sum_exec_runtime</a>;", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#wakeup_preempt_entity\">wakeup_preempt_entity</a>(struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#curr\">curr</a>, struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a>);", 
"", 
"static struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#pick_next_entity\">pick_next_entity</a>(struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a> = <a class=\"id\" href=\"#__pick_next_entity\">__pick_next_entity</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#left\">left</a> = <a class=\"id\" href=\"#se\">se</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#next\">next</a> && <a class=\"id\" href=\"#wakeup_preempt_entity\">wakeup_preempt_entity</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#left\">left</a>) &lt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#se\">se</a> = <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Prefer last buddy, try to return the CPU to a preempted task.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#last\">last</a> && <a class=\"id\" href=\"#wakeup_preempt_entity\">wakeup_preempt_entity</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#last\">last</a>, <a class=\"id\" href=\"#left\">left</a>) &lt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#se\">se</a> = <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#last\">last</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_buddies\">clear_buddies</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, <a class=\"id\" href=\"#se\">se</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#se\">se</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#put_prev_entity\">put_prev_entity</a>(struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#prev\">prev</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If still on the runqueue then deactivate_task()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * was not called and update_curr() has to be done:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#on_rq\">on_rq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_curr\">update_curr</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_spread\">check_spread</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, <a class=\"id\" href=\"#prev\">prev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#on_rq\">on_rq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_stats_wait_start\">update_stats_wait_start</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, <a class=\"id\" href=\"#prev\">prev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Put 'current' back into the tree. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__enqueue_entity\">__enqueue_entity</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, <a class=\"id\" href=\"#prev\">prev</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#curr\">curr</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#entity_tick\">entity_tick</a>(struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#curr\">curr</a>, int <a class=\"id\" href=\"#queued\">queued</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Update run-time statistics of the 'current'.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_curr\">update_curr</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHED_HRTICK\">CONFIG_SCHED_HRTICK</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * queued ticks are scheduled to match the slice, so don't bother</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * validating it and just reschedule.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#queued\">queued</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#resched_task\">resched_task</a>(<a class=\"id\" href=\"#rq_of\">rq_of</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>)-><a class=\"id\" href=\"#curr\">curr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * don't let the period tick interfere with the hrtick preemption</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sched_feat\">sched_feat</a>(<a class=\"id\" href=\"#DOUBLE_TICK\">DOUBLE_TICK</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hrtimer_active\">hrtimer_active</a>(&amp;<a class=\"id\" href=\"#rq_of\">rq_of</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>)-><a class=\"id\" href=\"#hrtick_timer\">hrtick_timer</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#nr_running\">nr_running</a> &gt; 1 || !<a class=\"id\" href=\"#sched_feat\">sched_feat</a>(<a class=\"id\" href=\"#WAKEUP_PREEMPT\">WAKEUP_PREEMPT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#check_preempt_tick\">check_preempt_tick</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, <a class=\"id\" href=\"#curr\">curr</a>);", 
"}", 
"", 
"<span class=\"comment\">/**************************************************</span>", 
"<span class=\"comment\"> * CFS operations on tasks:</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHED_HRTICK\">CONFIG_SCHED_HRTICK</a>", 
"static void <a class=\"id\" href=\"#hrtick_start_fair\">hrtick_start_fair</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a> = &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> = <a class=\"id\" href=\"#cfs_rq_of\">cfs_rq_of</a>(<a class=\"id\" href=\"#se\">se</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#task_rq\">task_rq</a>(<a class=\"id\" href=\"#p\">p</a>) != <a class=\"id\" href=\"#rq\">rq</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hrtick_enabled\">hrtick_enabled</a>(<a class=\"id\" href=\"#rq\">rq</a>) && <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#nr_running\">nr_running</a> &gt; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#slice\">slice</a> = <a class=\"id\" href=\"#sched_slice\">sched_slice</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, <a class=\"id\" href=\"#se\">se</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#ran\">ran</a> = <a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#sum_exec_runtime\">sum_exec_runtime</a> - <a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#prev_sum_exec_runtime\">prev_sum_exec_runtime</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#slice\">slice</a> - <a class=\"id\" href=\"#ran\">ran</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#delta\">delta</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#curr\">curr</a> == <a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#resched_task\">resched_task</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Don't schedule slices shorter than 10000ns, that just</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * doesn't make sense. Rely on vruntime for fairness.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#curr\">curr</a> != <a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#max_t\">max_t</a>(<a class=\"id\" href=\"#s64\">s64</a>, 10000LL, <a class=\"id\" href=\"#delta\">delta</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hrtick_start\">hrtick_start</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#delta\">delta</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * called from enqueue/dequeue and updates the hrtick when the</span>", 
"<span class=\"comment\"> * current task is from our class and nr_running is low enough</span>", 
"<span class=\"comment\"> * to matter.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#hrtick_update\">hrtick_update</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#curr\">curr</a> = <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#curr\">curr</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#sched_class\">sched_class</a> != &amp;<a class=\"id\" href=\"#fair_sched_class\">fair_sched_class</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cfs_rq_of\">cfs_rq_of</a>(&amp;<a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#se\">se</a>)-><a class=\"id\" href=\"#nr_running\">nr_running</a> &lt; <a class=\"id\" href=\"#sched_nr_latency\">sched_nr_latency</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hrtick_start_fair\">hrtick_start_fair</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#curr\">curr</a>);", 
"}", 
"#else <span class=\"comment\">/* !CONFIG_SCHED_HRTICK */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#hrtick_start_fair\">hrtick_start_fair</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#hrtick_update\">hrtick_update</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The enqueue_task method is called before nr_running is</span>", 
"<span class=\"comment\"> * increased. Here we update the fair scheduling stats and</span>", 
"<span class=\"comment\"> * then put the task into the rbtree:</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#enqueue_task_fair\">enqueue_task_fair</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a> = &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_sched_entity\">for_each_sched_entity</a>(<a class=\"id\" href=\"#se\">se</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#on_rq\">on_rq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> = <a class=\"id\" href=\"#cfs_rq_of\">cfs_rq_of</a>(<a class=\"id\" href=\"#se\">se</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enqueue_entity\">enqueue_entity</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, <a class=\"id\" href=\"#se\">se</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#ENQUEUE_WAKEUP\">ENQUEUE_WAKEUP</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hrtick_update\">hrtick_update</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The dequeue_task method is called before nr_running is</span>", 
"<span class=\"comment\"> * decreased. We remove the task from the rbtree and</span>", 
"<span class=\"comment\"> * update the fair scheduling stats:</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#dequeue_task_fair\">dequeue_task_fair</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a> = &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_sched_entity\">for_each_sched_entity</a>(<a class=\"id\" href=\"#se\">se</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> = <a class=\"id\" href=\"#cfs_rq_of\">cfs_rq_of</a>(<a class=\"id\" href=\"#se\">se</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dequeue_entity\">dequeue_entity</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, <a class=\"id\" href=\"#se\">se</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Don't dequeue parent if it has other entities besides us */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#load\">load</a>.<a class=\"id\" href=\"#weight\">weight</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#DEQUEUE_SLEEP\">DEQUEUE_SLEEP</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hrtick_update\">hrtick_update</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * sched_yield() support is very simple - we dequeue and enqueue.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If compat_yield is turned on then we requeue to the end of the tree.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#yield_task_fair\">yield_task_fair</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#curr\">curr</a> = <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#curr\">curr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> = <a class=\"id\" href=\"#task_cfs_rq\">task_cfs_rq</a>(<a class=\"id\" href=\"#curr\">curr</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#rightmost\">rightmost</a>, *<a class=\"id\" href=\"#se\">se</a> = &amp;<a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#se\">se</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Are we the only task in the tree?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#nr_running\">nr_running</a> == 1))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_buddies\">clear_buddies</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, <a class=\"id\" href=\"#se\">se</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#sysctl_sched_compat_yield\">sysctl_sched_compat_yield</a>) && <a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#policy\">policy</a> != <a class=\"id\" href=\"#SCHED_BATCH\">SCHED_BATCH</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_rq_clock\">update_rq_clock</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Update run-time statistics of the 'current'.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_curr\">update_curr</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Find the rightmost entry in the rbtree:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rightmost\">rightmost</a> = <a class=\"id\" href=\"#__pick_last_entity\">__pick_last_entity</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Already in the rightmost position?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#rightmost\">rightmost</a> || <a class=\"id\" href=\"#entity_before\">entity_before</a>(<a class=\"id\" href=\"#rightmost\">rightmost</a>, <a class=\"id\" href=\"#se\">se</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Minimally necessary key value to be last in the tree:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Upon rescheduling, sched_class::put_prev_task() will place</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 'current' within the tree based on its new key value.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#vruntime\">vruntime</a> = <a class=\"id\" href=\"#rightmost\">rightmost</a>-><a class=\"id\" href=\"#vruntime\">vruntime</a> + 1;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"", 
"static void <a class=\"id\" href=\"#task_waking_fair\">task_waking_fair</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a> = &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> = <a class=\"id\" href=\"#cfs_rq_of\">cfs_rq_of</a>(<a class=\"id\" href=\"#se\">se</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#vruntime\">vruntime</a> -= <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#min_vruntime\">min_vruntime</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FAIR_GROUP_SCHED\">CONFIG_FAIR_GROUP_SCHED</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * effective_load() calculates the load change as seen from the root_task_group</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Adding load to a group doesn't make a group heavier, but can cause movement</span>", 
"<span class=\"comment\"> * of group shares between cpus. Assuming the shares were perfectly aligned one</span>", 
"<span class=\"comment\"> * can calculate the shift in shares.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The problem is that perfectly aligning the shares is rather expensive, hence</span>", 
"<span class=\"comment\"> * we try to avoid doing that too often - see update_shares(), which ratelimits</span>", 
"<span class=\"comment\"> * this change.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We compensate this by not only taking the current delta into account, but</span>", 
"<span class=\"comment\"> * also considering the delta between when the shares were last adjusted and</span>", 
"<span class=\"comment\"> * now.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We still saw a performance dip, some tracing learned us that between</span>", 
"<span class=\"comment\"> * cgroup:/ and cgroup:/foo balancing the number of affine wakeups increased</span>", 
"<span class=\"comment\"> * significantly. Therefore try to bias the error in direction of failing</span>", 
"<span class=\"comment\"> * the affine wakeup.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static long <a class=\"id\" href=\"#effective_load\">effective_load</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>long <a class=\"id\" href=\"#wl\">wl</a>, long <a class=\"id\" href=\"#wg\">wg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a> = <a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#se\">se</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#parent\">parent</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#wl\">wl</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * By not taking the decrease of shares on the other cpu into</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * account our error leans towards reducing the affine wakeups.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#wl\">wl</a> && <a class=\"id\" href=\"#sched_feat\">sched_feat</a>(<a class=\"id\" href=\"#ASYM_EFF_LOAD\">ASYM_EFF_LOAD</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#wl\">wl</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_sched_entity\">for_each_sched_entity</a>(<a class=\"id\" href=\"#se\">se</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>long <a class=\"id\" href=\"#S\">S</a>, <a class=\"id\" href=\"#rw\">rw</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>long <a class=\"id\" href=\"#more_w\">more_w</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Instead of using this increment, also add the difference</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * between when the shares were last updated and now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#more_w\">more_w</a> = <a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#my_q\">my_q</a>-><a class=\"id\" href=\"#load\">load</a>.<a class=\"id\" href=\"#weight\">weight</a> - <a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#my_q\">my_q</a>-><a class=\"id\" href=\"#rq_weight\">rq_weight</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wl\">wl</a> += <a class=\"id\" href=\"#more_w\">more_w</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wg\">wg</a> += <a class=\"id\" href=\"#more_w\">more_w</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#S\">S</a> = <a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#my_q\">my_q</a>-><a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#shares\">shares</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#my_q\">my_q</a>-><a class=\"id\" href=\"#shares\">shares</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rw\">rw</a> = <a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#my_q\">my_q</a>-><a class=\"id\" href=\"#rq_weight\">rq_weight</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#a\">a</a> = <a class=\"id\" href=\"#S\">S</a>*(<a class=\"id\" href=\"#rw\">rw</a> + <a class=\"id\" href=\"#wl\">wl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b\">b</a> = <a class=\"id\" href=\"#S\">S</a>*<a class=\"id\" href=\"#rw\">rw</a> + <a class=\"id\" href=\"#s\">s</a>*<a class=\"id\" href=\"#wg\">wg</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wl\">wl</a> = <a class=\"id\" href=\"#s\">s</a>*(<a class=\"id\" href=\"#a\">a</a>-<a class=\"id\" href=\"#b\">b</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#b\">b</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wl\">wl</a> /= <a class=\"id\" href=\"#b\">b</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Assume the group is already running and will</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * thus already be accounted for in the weight.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * That is, moving shares between CPUs, does not</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * alter the group weight.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wg\">wg</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#wl\">wl</a>;", 
"}", 
"", 
"#else", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#effective_load\">effective_load</a>(struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#wl\">wl</a>, unsigned long <a class=\"id\" href=\"#wg\">wg</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#wl\">wl</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static int <a class=\"id\" href=\"#wake_affine\">wake_affine</a>(struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#sync\">sync</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#this_load\">this_load</a>, <a class=\"id\" href=\"#load\">load</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#this_cpu\">this_cpu</a>, <a class=\"id\" href=\"#prev_cpu\">prev_cpu</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#tl_per_task\">tl_per_task</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#weight\">weight</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#balanced\">balanced</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a><span class=\"ts\"/>  = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#wake_idx\">wake_idx</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#this_cpu\">this_cpu</a>  = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev_cpu\">prev_cpu</a>  = <a class=\"id\" href=\"#task_cpu\">task_cpu</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#load\">load</a><span class=\"ts\"/>  = <a class=\"id\" href=\"#source_load\">source_load</a>(<a class=\"id\" href=\"#prev_cpu\">prev_cpu</a>, <a class=\"id\" href=\"#idx\">idx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#this_load\">this_load</a> = <a class=\"id\" href=\"#target_load\">target_load</a>(<a class=\"id\" href=\"#this_cpu\">this_cpu</a>, <a class=\"id\" href=\"#idx\">idx</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If sync wakeup then subtract the (maximum possible)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * effect of the currently running task from the load</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of the current CPU:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sync\">sync</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tg\">tg</a> = <a class=\"id\" href=\"#task_group\">task_group</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#weight\">weight</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#load\">load</a>.<a class=\"id\" href=\"#weight\">weight</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_load\">this_load</a> += <a class=\"id\" href=\"#effective_load\">effective_load</a>(<a class=\"id\" href=\"#tg\">tg</a>, <a class=\"id\" href=\"#this_cpu\">this_cpu</a>, -<a class=\"id\" href=\"#weight\">weight</a>, -<a class=\"id\" href=\"#weight\">weight</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#load\">load</a> += <a class=\"id\" href=\"#effective_load\">effective_load</a>(<a class=\"id\" href=\"#tg\">tg</a>, <a class=\"id\" href=\"#prev_cpu\">prev_cpu</a>, 0, -<a class=\"id\" href=\"#weight\">weight</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tg\">tg</a> = <a class=\"id\" href=\"#task_group\">task_group</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#weight\">weight</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#load\">load</a>.<a class=\"id\" href=\"#weight\">weight</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In low-load situations, where prev_cpu is idle and this_cpu is idle</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * due to the sync cause above having dropped this_load to 0, we'll</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * always have an imbalance, but there's really nothing you can do</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * about that, so that's good too.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Otherwise check if either cpus are near enough in load to allow this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * task to be woken on this_cpu.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#this_load\">this_load</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#this_eff_load\">this_eff_load</a>, <a class=\"id\" href=\"#prev_eff_load\">prev_eff_load</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_eff_load\">this_eff_load</a> = 100;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_eff_load\">this_eff_load</a> *= <a class=\"id\" href=\"#power_of\">power_of</a>(<a class=\"id\" href=\"#prev_cpu\">prev_cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_eff_load\">this_eff_load</a> *= <a class=\"id\" href=\"#this_load\">this_load</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#effective_load\">effective_load</a>(<a class=\"id\" href=\"#tg\">tg</a>, <a class=\"id\" href=\"#this_cpu\">this_cpu</a>, <a class=\"id\" href=\"#weight\">weight</a>, <a class=\"id\" href=\"#weight\">weight</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev_eff_load\">prev_eff_load</a> = 100 + (<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#imbalance_pct\">imbalance_pct</a> - 100) / 2;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev_eff_load\">prev_eff_load</a> *= <a class=\"id\" href=\"#power_of\">power_of</a>(<a class=\"id\" href=\"#this_cpu\">this_cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev_eff_load\">prev_eff_load</a> *= <a class=\"id\" href=\"#load\">load</a> + <a class=\"id\" href=\"#effective_load\">effective_load</a>(<a class=\"id\" href=\"#tg\">tg</a>, <a class=\"id\" href=\"#prev_cpu\">prev_cpu</a>, 0, <a class=\"id\" href=\"#weight\">weight</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#balanced\">balanced</a> = <a class=\"id\" href=\"#this_eff_load\">this_eff_load</a> <= <a class=\"id\" href=\"#prev_eff_load\">prev_eff_load</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#balanced\">balanced</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the currently running task will sleep within</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a reasonable amount of time then attract this newly</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * woken task:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sync\">sync</a> && <a class=\"id\" href=\"#balanced\">balanced</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedstat_inc\">schedstat_inc</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#statistics\">statistics</a>.<a class=\"id\" href=\"#nr_wakeups_affine_attempts\">nr_wakeups_affine_attempts</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tl_per_task\">tl_per_task</a> = <a class=\"id\" href=\"#cpu_avg_load_per_task\">cpu_avg_load_per_task</a>(<a class=\"id\" href=\"#this_cpu\">this_cpu</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#balanced\">balanced</a> ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#this_load\">this_load</a> <= <a class=\"id\" href=\"#load\">load</a> &&", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#this_load\">this_load</a> + <a class=\"id\" href=\"#target_load\">target_load</a>(<a class=\"id\" href=\"#prev_cpu\">prev_cpu</a>, <a class=\"id\" href=\"#idx\">idx</a>) <= <a class=\"id\" href=\"#tl_per_task\">tl_per_task</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This domain has SD_WAKE_AFFINE and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * p is cache cold in this domain, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * there is no bad imbalance.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedstat_inc\">schedstat_inc</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#ttwu_move_affine\">ttwu_move_affine</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedstat_inc\">schedstat_inc</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#statistics\">statistics</a>.<a class=\"id\" href=\"#nr_wakeups_affine\">nr_wakeups_affine</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * find_idlest_group finds and returns the least busy CPU group within the</span>", 
"<span class=\"comment\"> * domain.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#sched_group\">sched_group</a> *", 
"<a class=\"id\" href=\"#find_idlest_group\">find_idlest_group</a>(struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#this_cpu\">this_cpu</a>, int <a class=\"id\" href=\"#load_idx\">load_idx</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_group\">sched_group</a> *<a class=\"id\" href=\"#idlest\">idlest</a> = <a class=\"id\" href=\"#NULL\">NULL</a>, *<a class=\"id\" href=\"#group\">group</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#groups\">groups</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#min_load\">min_load</a> = <a class=\"id\" href=\"#ULONG_MAX\">ULONG_MAX</a>, <a class=\"id\" href=\"#this_load\">this_load</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#imbalance\">imbalance</a> = 100 + (<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#imbalance_pct\">imbalance_pct</a>-100)/2;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#load\">load</a>, <a class=\"id\" href=\"#avg_load\">avg_load</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#local_group\">local_group</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Skip over this group if it has no CPUs allowed */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_intersects\">cpumask_intersects</a>(<a class=\"id\" href=\"#sched_group_cpus\">sched_group_cpus</a>(<a class=\"id\" href=\"#group\">group</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#cpus_allowed\">cpus_allowed</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_group\">local_group</a> = <a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#this_cpu\">this_cpu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#sched_group_cpus\">sched_group_cpus</a>(<a class=\"id\" href=\"#group\">group</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Tally up the load of all CPUs in the group */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#avg_load\">avg_load</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#sched_group_cpus\">sched_group_cpus</a>(<a class=\"id\" href=\"#group\">group</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Bias balancing toward cpus of our domain */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#local_group\">local_group</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#load\">load</a> = <a class=\"id\" href=\"#source_load\">source_load</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#load_idx\">load_idx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#load\">load</a> = <a class=\"id\" href=\"#target_load\">target_load</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#load_idx\">load_idx</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#avg_load\">avg_load</a> += <a class=\"id\" href=\"#load\">load</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Adjust by relative CPU power of the group */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#avg_load\">avg_load</a> = (<a class=\"id\" href=\"#avg_load\">avg_load</a> * <a class=\"id\" href=\"#SCHED_LOAD_SCALE\">SCHED_LOAD_SCALE</a>) / <a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#cpu_power\">cpu_power</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#local_group\">local_group</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_load\">this_load</a> = <a class=\"id\" href=\"#avg_load\">avg_load</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#avg_load\">avg_load</a> &lt; <a class=\"id\" href=\"#min_load\">min_load</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min_load\">min_load</a> = <a class=\"id\" href=\"#avg_load\">avg_load</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idlest\">idlest</a> = <a class=\"id\" href=\"#group\">group</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#group\">group</a> = <a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#group\">group</a> != <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#groups\">groups</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#idlest\">idlest</a> || 100*<a class=\"id\" href=\"#this_load\">this_load</a> &lt; <a class=\"id\" href=\"#imbalance\">imbalance</a>*<a class=\"id\" href=\"#min_load\">min_load</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#idlest\">idlest</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * find_idlest_cpu - find the idlest cpu among the cpus in group.</span>", 
"<span class=\"comment\"> */</span>", 
"static int", 
"<a class=\"id\" href=\"#find_idlest_cpu\">find_idlest_cpu</a>(struct <a class=\"id\" href=\"#sched_group\">sched_group</a> *<a class=\"id\" href=\"#group\">group</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#this_cpu\">this_cpu</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#load\">load</a>, <a class=\"id\" href=\"#min_load\">min_load</a> = <a class=\"id\" href=\"#ULONG_MAX\">ULONG_MAX</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#idlest\">idlest</a> = -1;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Traverse only the allowed CPUs */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu_and\">for_each_cpu_and</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#sched_group_cpus\">sched_group_cpus</a>(<a class=\"id\" href=\"#group\">group</a>), &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#cpus_allowed\">cpus_allowed</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#load\">load</a> = <a class=\"id\" href=\"#weighted_cpuload\">weighted_cpuload</a>(<a class=\"id\" href=\"#i\">i</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#load\">load</a> &lt; <a class=\"id\" href=\"#min_load\">min_load</a> || (<a class=\"id\" href=\"#load\">load</a> == <a class=\"id\" href=\"#min_load\">min_load</a> && <a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#this_cpu\">this_cpu</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min_load\">min_load</a> = <a class=\"id\" href=\"#load\">load</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idlest\">idlest</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#idlest\">idlest</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Try and locate an idle CPU in the sched_domain.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#select_idle_sibling\">select_idle_sibling</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#target\">target</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#prev_cpu\">prev_cpu</a> = <a class=\"id\" href=\"#task_cpu\">task_cpu</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the task is going to be woken-up on this cpu and if it is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * already idle, then it is the right target.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#target\">target</a> == <a class=\"id\" href=\"#cpu\">cpu</a> && <a class=\"id\" href=\"#idle_cpu\">idle_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the task is going to be woken-up on the cpu where it previously</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ran and if it is currently idle, then it the right target.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#target\">target</a> == <a class=\"id\" href=\"#prev_cpu\">prev_cpu</a> && <a class=\"id\" href=\"#idle_cpu\">idle_cpu</a>(<a class=\"id\" href=\"#prev_cpu\">prev_cpu</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#prev_cpu\">prev_cpu</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Otherwise, iterate the domains and find an elegible idle cpu.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_domain\">for_each_domain</a>(<a class=\"id\" href=\"#target\">target</a>, <a class=\"id\" href=\"#sd\">sd</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SD_SHARE_PKG_RESOURCES\">SD_SHARE_PKG_RESOURCES</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu_and\">for_each_cpu_and</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#sched_domain_span\">sched_domain_span</a>(<a class=\"id\" href=\"#sd\">sd</a>), &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#cpus_allowed\">cpus_allowed</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#idle_cpu\">idle_cpu</a>(<a class=\"id\" href=\"#i\">i</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#target\">target</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Lets stop looking for an idle sibling when we reached</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the domain that spans the current cpu and prev_cpu.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#sched_domain_span\">sched_domain_span</a>(<a class=\"id\" href=\"#sd\">sd</a>)) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#prev_cpu\">prev_cpu</a>, <a class=\"id\" href=\"#sched_domain_span\">sched_domain_span</a>(<a class=\"id\" href=\"#sd\">sd</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#target\">target</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * sched_balance_self: balance the current task (running on cpu) in domains</span>", 
"<span class=\"comment\"> * that have the 'flag' flag set. In practice, this is SD_BALANCE_FORK and</span>", 
"<span class=\"comment\"> * SD_BALANCE_EXEC.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Balance, ie. select the least loaded group.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the target CPU number, or the same CPU if no balancing is needed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * preempt must be disabled.</span>", 
"<span class=\"comment\"> */</span>", 
"static int", 
"<a class=\"id\" href=\"#select_task_rq_fair\">select_task_rq_fair</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#sd_flag\">sd_flag</a>, int <a class=\"id\" href=\"#wake_flags\">wake_flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#tmp\">tmp</a>, *<a class=\"id\" href=\"#affine_sd\">affine_sd</a> = <a class=\"id\" href=\"#NULL\">NULL</a>, *<a class=\"id\" href=\"#sd\">sd</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#prev_cpu\">prev_cpu</a> = <a class=\"id\" href=\"#task_cpu\">task_cpu</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#new_cpu\">new_cpu</a> = <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#want_affine\">want_affine</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#want_sd\">want_sd</a> = 1;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#sync\">sync</a> = <a class=\"id\" href=\"#wake_flags\">wake_flags</a> &amp; <a class=\"id\" href=\"#WF_SYNC\">WF_SYNC</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sd_flag\">sd_flag</a> &amp; <a class=\"id\" href=\"#SD_BALANCE_WAKE\">SD_BALANCE_WAKE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#cpus_allowed\">cpus_allowed</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#want_affine\">want_affine</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_cpu\">new_cpu</a> = <a class=\"id\" href=\"#prev_cpu\">prev_cpu</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_domain\">for_each_domain</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#tmp\">tmp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SD_LOAD_BALANCE\">SD_LOAD_BALANCE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If power savings logic is enabled for a domain, see if we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * are not overloaded, if so, don't balance wider.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; (<a class=\"id\" href=\"#SD_POWERSAVINGS_BALANCE\">SD_POWERSAVINGS_BALANCE</a>|<a class=\"id\" href=\"#SD_PREFER_LOCAL\">SD_PREFER_LOCAL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#power\">power</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_running\">nr_running</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#capacity\">capacity</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#sched_domain_span\">sched_domain_span</a>(<a class=\"id\" href=\"#tmp\">tmp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#power\">power</a> += <a class=\"id\" href=\"#power_of\">power_of</a>(<a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_running\">nr_running</a> += <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#i\">i</a>)-><a class=\"id\" href=\"#cfs\">cfs</a>.<a class=\"id\" href=\"#nr_running\">nr_running</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#capacity\">capacity</a> = <a class=\"id\" href=\"#DIV_ROUND_CLOSEST\">DIV_ROUND_CLOSEST</a>(<a class=\"id\" href=\"#power\">power</a>, <a class=\"id\" href=\"#SCHED_LOAD_SCALE\">SCHED_LOAD_SCALE</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SD_POWERSAVINGS_BALANCE\">SD_POWERSAVINGS_BALANCE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_running\">nr_running</a> /= 2;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_running\">nr_running</a> &lt; <a class=\"id\" href=\"#capacity\">capacity</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#want_sd\">want_sd</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If both cpu and prev_cpu are part of this domain,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * cpu is a valid SD_WAKE_AFFINE target.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#want_affine\">want_affine</a> && (<a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SD_WAKE_AFFINE\">SD_WAKE_AFFINE</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#prev_cpu\">prev_cpu</a>, <a class=\"id\" href=\"#sched_domain_span\">sched_domain_span</a>(<a class=\"id\" href=\"#tmp\">tmp</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#affine_sd\">affine_sd</a> = <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#want_affine\">want_affine</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#want_sd\">want_sd</a> && !<a class=\"id\" href=\"#want_affine\">want_affine</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#sd_flag\">sd_flag</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#want_sd\">want_sd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a> = <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FAIR_GROUP_SCHED\">CONFIG_FAIR_GROUP_SCHED</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sched_feat\">sched_feat</a>(<a class=\"id\" href=\"#LB_SHARES_UPDATE\">LB_SHARES_UPDATE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Pick the largest domain to update shares over</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#sd\">sd</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#affine_sd\">affine_sd</a> && (!<a class=\"id\" href=\"#tmp\">tmp</a> || <a class=\"id\" href=\"#affine_sd\">affine_sd</a>-><a class=\"id\" href=\"#span_weight\">span_weight</a> &gt; <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#span_weight\">span_weight</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#affine_sd\">affine_sd</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_shares\">update_shares</a>(<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#affine_sd\">affine_sd</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> == <a class=\"id\" href=\"#prev_cpu\">prev_cpu</a> || <a class=\"id\" href=\"#wake_affine\">wake_affine</a>(<a class=\"id\" href=\"#affine_sd\">affine_sd</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#sync\">sync</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#select_idle_sibling\">select_idle_sibling</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#select_idle_sibling\">select_idle_sibling</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#prev_cpu\">prev_cpu</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#sd\">sd</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#load_idx\">load_idx</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#forkexec_idx\">forkexec_idx</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_group\">sched_group</a> *<a class=\"id\" href=\"#group\">group</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#weight\">weight</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#sd_flag\">sd_flag</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#child\">child</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sd_flag\">sd_flag</a> &amp; <a class=\"id\" href=\"#SD_BALANCE_WAKE\">SD_BALANCE_WAKE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#load_idx\">load_idx</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#wake_idx\">wake_idx</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a> = <a class=\"id\" href=\"#find_idlest_group\">find_idlest_group</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#load_idx\">load_idx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#group\">group</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#child\">child</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_cpu\">new_cpu</a> = <a class=\"id\" href=\"#find_idlest_cpu\">find_idlest_cpu</a>(<a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#new_cpu\">new_cpu</a> == -1 || <a class=\"id\" href=\"#new_cpu\">new_cpu</a> == <a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Now try balancing at a lower domain level of cpu */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#child\">child</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Now try balancing at a lower domain level of new_cpu */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#new_cpu\">new_cpu</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#weight\">weight</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#span_weight\">span_weight</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_domain\">for_each_domain</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#tmp\">tmp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#weight\">weight</a> <= <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#span_weight\">span_weight</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#sd_flag\">sd_flag</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a> = <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* while loop will break here if sd == NULL */</span>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#new_cpu\">new_cpu</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SMP */</span>", 
"", 
"static unsigned long", 
"<a class=\"id\" href=\"#wakeup_gran\">wakeup_gran</a>(struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#curr\">curr</a>, struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#gran\">gran</a> = <a class=\"id\" href=\"#sysctl_sched_wakeup_granularity\">sysctl_sched_wakeup_granularity</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Since its curr running now, convert the gran from real-time</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to virtual-time in his units.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * By using 'se' instead of 'curr' we penalize light tasks, so</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * they get preempted easier. That is, if 'se' &lt; 'curr' then</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the resulting gran will be larger, therefore penalizing the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * lighter, if otoh 'se' &gt; 'curr' then the resulting gran will</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be smaller, again penalizing the lighter task.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This is especially important for buddies when the leftmost</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * task is higher priority than the buddy.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#load\">load</a>.<a class=\"id\" href=\"#weight\">weight</a> != <a class=\"id\" href=\"#NICE_0_LOAD\">NICE_0_LOAD</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gran\">gran</a> = <a class=\"id\" href=\"#calc_delta_fair\">calc_delta_fair</a>(<a class=\"id\" href=\"#gran\">gran</a>, <a class=\"id\" href=\"#se\">se</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#gran\">gran</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Should 'se' preempt 'curr'.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *             |s1</span>", 
"<span class=\"comment\"> *        |s2</span>", 
"<span class=\"comment\"> *   |s3</span>", 
"<span class=\"comment\"> *         g</span>", 
"<span class=\"comment\"> *      |&lt;---&gt;|c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  w(c, s1) = -1</span>", 
"<span class=\"comment\"> *  w(c, s2) =  0</span>", 
"<span class=\"comment\"> *  w(c, s3) =  1</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static int", 
"<a class=\"id\" href=\"#wakeup_preempt_entity\">wakeup_preempt_entity</a>(struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#curr\">curr</a>, struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#gran\">gran</a>, <a class=\"id\" href=\"#vdiff\">vdiff</a> = <a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#vruntime\">vruntime</a> - <a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#vruntime\">vruntime</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vdiff\">vdiff</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gran\">gran</a> = <a class=\"id\" href=\"#wakeup_gran\">wakeup_gran</a>(<a class=\"id\" href=\"#curr\">curr</a>, <a class=\"id\" href=\"#se\">se</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vdiff\">vdiff</a> &gt; <a class=\"id\" href=\"#gran\">gran</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#set_last_buddy\">set_last_buddy</a>(struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#task_of\">task_of</a>(<a class=\"id\" href=\"#se\">se</a>)-><a class=\"id\" href=\"#policy\">policy</a> != <a class=\"id\" href=\"#SCHED_IDLE\">SCHED_IDLE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_sched_entity\">for_each_sched_entity</a>(<a class=\"id\" href=\"#se\">se</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfs_rq_of\">cfs_rq_of</a>(<a class=\"id\" href=\"#se\">se</a>)-><a class=\"id\" href=\"#last\">last</a> = <a class=\"id\" href=\"#se\">se</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#set_next_buddy\">set_next_buddy</a>(struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#task_of\">task_of</a>(<a class=\"id\" href=\"#se\">se</a>)-><a class=\"id\" href=\"#policy\">policy</a> != <a class=\"id\" href=\"#SCHED_IDLE\">SCHED_IDLE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_sched_entity\">for_each_sched_entity</a>(<a class=\"id\" href=\"#se\">se</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfs_rq_of\">cfs_rq_of</a>(<a class=\"id\" href=\"#se\">se</a>)-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#se\">se</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Preempt the current task with a newly woken task if needed:</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#check_preempt_wakeup\">check_preempt_wakeup</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#wake_flags\">wake_flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#curr\">curr</a> = <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#curr\">curr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a> = &amp;<a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#se\">se</a>, *<a class=\"id\" href=\"#pse\">pse</a> = &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> = <a class=\"id\" href=\"#task_cfs_rq\">task_cfs_rq</a>(<a class=\"id\" href=\"#curr\">curr</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#scale\">scale</a> = <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#nr_running\">nr_running</a> >= <a class=\"id\" href=\"#sched_nr_latency\">sched_nr_latency</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#rt_prio\">rt_prio</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#prio\">prio</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#preempt\">preempt</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#sched_class\">sched_class</a> != &amp;<a class=\"id\" href=\"#fair_sched_class\">fair_sched_class</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#se\">se</a> == <a class=\"id\" href=\"#pse\">pse</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sched_feat\">sched_feat</a>(<a class=\"id\" href=\"#NEXT_BUDDY\">NEXT_BUDDY</a>) && <a class=\"id\" href=\"#scale\">scale</a> && !(<a class=\"id\" href=\"#wake_flags\">wake_flags</a> &amp; <a class=\"id\" href=\"#WF_FORK\">WF_FORK</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_next_buddy\">set_next_buddy</a>(<a class=\"id\" href=\"#pse\">pse</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We can come here with TIF_NEED_RESCHED already set from new task</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * wake up path.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_tsk_need_resched\">test_tsk_need_resched</a>(<a class=\"id\" href=\"#curr\">curr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Batch and idle tasks do not preempt (their preemption is driven by</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the tick):</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#policy\">policy</a> != <a class=\"id\" href=\"#SCHED_NORMAL\">SCHED_NORMAL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Idle tasks are by definition preempted by everybody. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#policy\">policy</a> == <a class=\"id\" href=\"#SCHED_IDLE\">SCHED_IDLE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#preempt\">preempt</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sched_feat\">sched_feat</a>(<a class=\"id\" href=\"#WAKEUP_PREEMPT\">WAKEUP_PREEMPT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_curr\">update_curr</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#find_matching_se\">find_matching_se</a>(&amp;<a class=\"id\" href=\"#se\">se</a>, &amp;<a class=\"id\" href=\"#pse\">pse</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#pse\">pse</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#wakeup_preempt_entity\">wakeup_preempt_entity</a>(<a class=\"id\" href=\"#se\">se</a>, <a class=\"id\" href=\"#pse\">pse</a>) == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#preempt\">preempt</a>;", 
"", 
"<span class=\"ts\"/>return;", 
"", 
"<a class=\"id\" href=\"#preempt\">preempt</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#resched_task\">resched_task</a>(<a class=\"id\" href=\"#curr\">curr</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Only set the backward buddy when the current task is still</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * on the rq. This can happen when a wakeup gets interleaved</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * with schedule on the -&gt;pre_schedule() or idle_balance()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * point, either of which can * drop the rq lock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Also, during early boot the idle thread is in the fair class,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for obvious reasons its a bad idea to schedule back to it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#on_rq\">on_rq</a> || <a class=\"id\" href=\"#curr\">curr</a> == <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#idle\">idle</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sched_feat\">sched_feat</a>(<a class=\"id\" href=\"#LAST_BUDDY\">LAST_BUDDY</a>) && <a class=\"id\" href=\"#scale\">scale</a> && <a class=\"id\" href=\"#entity_is_task\">entity_is_task</a>(<a class=\"id\" href=\"#se\">se</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_last_buddy\">set_last_buddy</a>(<a class=\"id\" href=\"#se\">se</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#pick_next_task_fair\">pick_next_task_fair</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> = &amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cfs\">cfs</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#nr_running\">nr_running</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#se\">se</a> = <a class=\"id\" href=\"#pick_next_entity\">pick_next_entity</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_next_entity\">set_next_entity</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, <a class=\"id\" href=\"#se\">se</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> = <a class=\"id\" href=\"#group_cfs_rq\">group_cfs_rq</a>(<a class=\"id\" href=\"#se\">se</a>);", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#task_of\">task_of</a>(<a class=\"id\" href=\"#se\">se</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hrtick_start_fair\">hrtick_start_fair</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Account for a descheduled task:</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#put_prev_task_fair\">put_prev_task_fair</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#prev\">prev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a> = &amp;<a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#se\">se</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_sched_entity\">for_each_sched_entity</a>(<a class=\"id\" href=\"#se\">se</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> = <a class=\"id\" href=\"#cfs_rq_of\">cfs_rq_of</a>(<a class=\"id\" href=\"#se\">se</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_prev_entity\">put_prev_entity</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, <a class=\"id\" href=\"#se\">se</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"comment\">/**************************************************</span>", 
"<span class=\"comment\"> * Fair scheduling class load-balancing methods:</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * pull_task - move a task from a remote runqueue to the local runqueue.</span>", 
"<span class=\"comment\"> * Both runqueues must be locked.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#pull_task\">pull_task</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#src_rq\">src_rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#this_rq\">this_rq</a>, int <a class=\"id\" href=\"#this_cpu\">this_cpu</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#deactivate_task\">deactivate_task</a>(<a class=\"id\" href=\"#src_rq\">src_rq</a>, <a class=\"id\" href=\"#p\">p</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_task_cpu\">set_task_cpu</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#this_cpu\">this_cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#activate_task\">activate_task</a>(<a class=\"id\" href=\"#this_rq\">this_rq</a>, <a class=\"id\" href=\"#p\">p</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_preempt_curr\">check_preempt_curr</a>(<a class=\"id\" href=\"#this_rq\">this_rq</a>, <a class=\"id\" href=\"#p\">p</a>, 0);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * can_migrate_task - may task p from runqueue rq be migrated to this_cpu?</span>", 
"<span class=\"comment\"> */</span>", 
"static", 
"int <a class=\"id\" href=\"#can_migrate_task\">can_migrate_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, int <a class=\"id\" href=\"#this_cpu\">this_cpu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>, enum <a class=\"id\" href=\"#cpu_idle_type\">cpu_idle_type</a> <a class=\"id\" href=\"#idle\">idle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     int *<a class=\"id\" href=\"#all_pinned\">all_pinned</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#tsk_cache_hot\">tsk_cache_hot</a> = 0;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We do not migrate tasks that are:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 1) running (obviously), or</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 2) cannot be migrated to this CPU due to cpus_allowed, or</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 3) are cache-hot on their current CPU.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#this_cpu\">this_cpu</a>, &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#cpus_allowed\">cpus_allowed</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedstat_inc\">schedstat_inc</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#statistics\">statistics</a>.<a class=\"id\" href=\"#nr_failed_migrations_affine\">nr_failed_migrations_affine</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#all_pinned\">all_pinned</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#task_running\">task_running</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedstat_inc\">schedstat_inc</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#statistics\">statistics</a>.<a class=\"id\" href=\"#nr_failed_migrations_running\">nr_failed_migrations_running</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Aggressive migration if:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 1) task is cache cold, or</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 2) too many balance attempts have failed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk_cache_hot\">tsk_cache_hot</a> = <a class=\"id\" href=\"#task_hot\">task_hot</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#clock\">clock</a>, <a class=\"id\" href=\"#sd\">sd</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tsk_cache_hot\">tsk_cache_hot</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#nr_balance_failed\">nr_balance_failed</a> &gt; <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#cache_nice_tries\">cache_nice_tries</a>) {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHEDSTATS\">CONFIG_SCHEDSTATS</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tsk_cache_hot\">tsk_cache_hot</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedstat_inc\">schedstat_inc</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#lb_hot_gained\">lb_hot_gained</a>[<a class=\"id\" href=\"#idle\">idle</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedstat_inc\">schedstat_inc</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#statistics\">statistics</a>.<a class=\"id\" href=\"#nr_forced_migrations\">nr_forced_migrations</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tsk_cache_hot\">tsk_cache_hot</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedstat_inc\">schedstat_inc</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#statistics\">statistics</a>.<a class=\"id\" href=\"#nr_failed_migrations_hot\">nr_failed_migrations_hot</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * move_one_task tries to move exactly one task from busiest to this_rq, as</span>", 
"<span class=\"comment\"> * part of active balancing operations within \"domain\".</span>", 
"<span class=\"comment\"> * Returns 1 if successful and 0 otherwise.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called with both runqueues locked.</span>", 
"<span class=\"comment\"> */</span>", 
"static int", 
"<a class=\"id\" href=\"#move_one_task\">move_one_task</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#this_rq\">this_rq</a>, int <a class=\"id\" href=\"#this_cpu\">this_cpu</a>, struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#busiest\">busiest</a>,", 
"<span class=\"ts\"/>      struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>, enum <a class=\"id\" href=\"#cpu_idle_type\">cpu_idle_type</a> <a class=\"id\" href=\"#idle\">idle</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, *<a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pinned\">pinned</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_leaf_cfs_rq\">for_each_leaf_cfs_rq</a>(<a class=\"id\" href=\"#busiest\">busiest</a>, <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#n\">n</a>, &amp;<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#tasks\">tasks</a>, <a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#group_node\">group_node</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#can_migrate_task\">can_migrate_task</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#busiest\">busiest</a>, <a class=\"id\" href=\"#this_cpu\">this_cpu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#idle\">idle</a>, &amp;<a class=\"id\" href=\"#pinned\">pinned</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pull_task\">pull_task</a>(<a class=\"id\" href=\"#busiest\">busiest</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#this_rq\">this_rq</a>, <a class=\"id\" href=\"#this_cpu\">this_cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Right now, this is only the second place pull_task()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * is called, so we can safely collect pull_task()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * stats here rather than inside pull_task().</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedstat_inc\">schedstat_inc</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#lb_gained\">lb_gained</a>[<a class=\"id\" href=\"#idle\">idle</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static unsigned long", 
"<a class=\"id\" href=\"#balance_tasks\">balance_tasks</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#this_rq\">this_rq</a>, int <a class=\"id\" href=\"#this_cpu\">this_cpu</a>, struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#busiest\">busiest</a>,", 
"<span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#max_load_move\">max_load_move</a>, struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>,", 
"<span class=\"ts\"/>      enum <a class=\"id\" href=\"#cpu_idle_type\">cpu_idle_type</a> <a class=\"id\" href=\"#idle\">idle</a>, int *<a class=\"id\" href=\"#all_pinned\">all_pinned</a>,", 
"<span class=\"ts\"/>      int *<a class=\"id\" href=\"#this_best_prio\">this_best_prio</a>, struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#busiest_cfs_rq\">busiest_cfs_rq</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#loops\">loops</a> = 0, <a class=\"id\" href=\"#pulled\">pulled</a> = 0, <a class=\"id\" href=\"#pinned\">pinned</a> = 0;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#rem_load_move\">rem_load_move</a> = <a class=\"id\" href=\"#max_load_move\">max_load_move</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, *<a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#max_load_move\">max_load_move</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pinned\">pinned</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#n\">n</a>, &amp;<a class=\"id\" href=\"#busiest_cfs_rq\">busiest_cfs_rq</a>-><a class=\"id\" href=\"#tasks\">tasks</a>, <a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#group_node\">group_node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#loops\">loops</a>++ &gt; <a class=\"id\" href=\"#sysctl_sched_nr_migrate\">sysctl_sched_nr_migrate</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#load\">load</a>.<a class=\"id\" href=\"#weight\">weight</a> >> 1) &gt; <a class=\"id\" href=\"#rem_load_move\">rem_load_move</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#can_migrate_task\">can_migrate_task</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#busiest\">busiest</a>, <a class=\"id\" href=\"#this_cpu\">this_cpu</a>, <a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#idle\">idle</a>, &amp;<a class=\"id\" href=\"#pinned\">pinned</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pull_task\">pull_task</a>(<a class=\"id\" href=\"#busiest\">busiest</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#this_rq\">this_rq</a>, <a class=\"id\" href=\"#this_cpu\">this_cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pulled\">pulled</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rem_load_move\">rem_load_move</a> -= <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>.<a class=\"id\" href=\"#load\">load</a>.<a class=\"id\" href=\"#weight\">weight</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PREEMPT\">CONFIG_PREEMPT</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * NEWIDLE balancing is a source of latency, so preemptible</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * kernels will stop after the first task is pulled to minimize</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the critical section.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#idle\">idle</a> == <a class=\"id\" href=\"#CPU_NEWLY_IDLE\">CPU_NEWLY_IDLE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We only want to steal up to the prescribed amount of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * weighted load.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rem_load_move\">rem_load_move</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#prio\">prio</a> &lt; *<a class=\"id\" href=\"#this_best_prio\">this_best_prio</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#this_best_prio\">this_best_prio</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#prio\">prio</a>;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Right now, this is one of only two places pull_task() is called,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so we can safely collect pull_task() stats here rather than</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * inside pull_task().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedstat_add\">schedstat_add</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#lb_gained\">lb_gained</a>[<a class=\"id\" href=\"#idle\">idle</a>], <a class=\"id\" href=\"#pulled\">pulled</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#all_pinned\">all_pinned</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#all_pinned\">all_pinned</a> = <a class=\"id\" href=\"#pinned\">pinned</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#max_load_move\">max_load_move</a> - <a class=\"id\" href=\"#rem_load_move\">rem_load_move</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FAIR_GROUP_SCHED\">CONFIG_FAIR_GROUP_SCHED</a>", 
"static unsigned long", 
"<a class=\"id\" href=\"#load_balance_fair\">load_balance_fair</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#this_rq\">this_rq</a>, int <a class=\"id\" href=\"#this_cpu\">this_cpu</a>, struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#busiest\">busiest</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#max_load_move\">max_load_move</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>, enum <a class=\"id\" href=\"#cpu_idle_type\">cpu_idle_type</a> <a class=\"id\" href=\"#idle\">idle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  int *<a class=\"id\" href=\"#all_pinned\">all_pinned</a>, int *<a class=\"id\" href=\"#this_best_prio\">this_best_prio</a>)", 
"{", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#rem_load_move\">rem_load_move</a> = <a class=\"id\" href=\"#max_load_move\">max_load_move</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#busiest_cpu\">busiest_cpu</a> = <a class=\"id\" href=\"#cpu_of\">cpu_of</a>(<a class=\"id\" href=\"#busiest\">busiest</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_group\">task_group</a> *<a class=\"id\" href=\"#tg\">tg</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_h_load\">update_h_load</a>(<a class=\"id\" href=\"#busiest_cpu\">busiest_cpu</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#tg\">tg</a>, &amp;<a class=\"id\" href=\"#task_groups\">task_groups</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#busiest_cfs_rq\">busiest_cfs_rq</a> = <a class=\"id\" href=\"#tg\">tg</a>-><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>[<a class=\"id\" href=\"#busiest_cpu\">busiest_cpu</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#busiest_h_load\">busiest_h_load</a> = <a class=\"id\" href=\"#busiest_cfs_rq\">busiest_cfs_rq</a>-><a class=\"id\" href=\"#h_load\">h_load</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#busiest_weight\">busiest_weight</a> = <a class=\"id\" href=\"#busiest_cfs_rq\">busiest_cfs_rq</a>-><a class=\"id\" href=\"#load\">load</a>.<a class=\"id\" href=\"#weight\">weight</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#rem_load\">rem_load</a>, <a class=\"id\" href=\"#moved_load\">moved_load</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * empty group</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#busiest_cfs_rq\">busiest_cfs_rq</a>-><a class=\"id\" href=\"#task_weight\">task_weight</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rem_load\">rem_load</a> = (<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#rem_load_move\">rem_load_move</a> * <a class=\"id\" href=\"#busiest_weight\">busiest_weight</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rem_load\">rem_load</a> = <a class=\"id\" href=\"#div_u64\">div_u64</a>(<a class=\"id\" href=\"#rem_load\">rem_load</a>, <a class=\"id\" href=\"#busiest_h_load\">busiest_h_load</a> + 1);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#moved_load\">moved_load</a> = <a class=\"id\" href=\"#balance_tasks\">balance_tasks</a>(<a class=\"id\" href=\"#this_rq\">this_rq</a>, <a class=\"id\" href=\"#this_cpu\">this_cpu</a>, <a class=\"id\" href=\"#busiest\">busiest</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rem_load\">rem_load</a>, <a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#idle\">idle</a>, <a class=\"id\" href=\"#all_pinned\">all_pinned</a>, <a class=\"id\" href=\"#this_best_prio\">this_best_prio</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#busiest_cfs_rq\">busiest_cfs_rq</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#moved_load\">moved_load</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#moved_load\">moved_load</a> *= <a class=\"id\" href=\"#busiest_h_load\">busiest_h_load</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#moved_load\">moved_load</a> = <a class=\"id\" href=\"#div_u64\">div_u64</a>(<a class=\"id\" href=\"#moved_load\">moved_load</a>, <a class=\"id\" href=\"#busiest_weight\">busiest_weight</a> + 1);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rem_load_move\">rem_load_move</a> -= <a class=\"id\" href=\"#moved_load\">moved_load</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rem_load_move\">rem_load_move</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#max_load_move\">max_load_move</a> - <a class=\"id\" href=\"#rem_load_move\">rem_load_move</a>;", 
"}", 
"#else", 
"static unsigned long", 
"<a class=\"id\" href=\"#load_balance_fair\">load_balance_fair</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#this_rq\">this_rq</a>, int <a class=\"id\" href=\"#this_cpu\">this_cpu</a>, struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#busiest\">busiest</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#max_load_move\">max_load_move</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>, enum <a class=\"id\" href=\"#cpu_idle_type\">cpu_idle_type</a> <a class=\"id\" href=\"#idle\">idle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  int *<a class=\"id\" href=\"#all_pinned\">all_pinned</a>, int *<a class=\"id\" href=\"#this_best_prio\">this_best_prio</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#balance_tasks\">balance_tasks</a>(<a class=\"id\" href=\"#this_rq\">this_rq</a>, <a class=\"id\" href=\"#this_cpu\">this_cpu</a>, <a class=\"id\" href=\"#busiest\">busiest</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_load_move\">max_load_move</a>, <a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#idle\">idle</a>, <a class=\"id\" href=\"#all_pinned\">all_pinned</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_best_prio\">this_best_prio</a>, &amp;<a class=\"id\" href=\"#busiest\">busiest</a>-><a class=\"id\" href=\"#cfs\">cfs</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * move_tasks tries to move up to max_load_move weighted load from busiest to</span>", 
"<span class=\"comment\"> * this_rq, as part of a balancing operation within domain \"sd\".</span>", 
"<span class=\"comment\"> * Returns 1 if successful and 0 otherwise.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called with both runqueues locked.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#move_tasks\">move_tasks</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#this_rq\">this_rq</a>, int <a class=\"id\" href=\"#this_cpu\">this_cpu</a>, struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#busiest\">busiest</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#max_load_move\">max_load_move</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>, enum <a class=\"id\" href=\"#cpu_idle_type\">cpu_idle_type</a> <a class=\"id\" href=\"#idle\">idle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      int *<a class=\"id\" href=\"#all_pinned\">all_pinned</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#total_load_moved\">total_load_moved</a> = 0, <a class=\"id\" href=\"#load_moved\">load_moved</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#this_best_prio\">this_best_prio</a> = <a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#prio\">prio</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#load_moved\">load_moved</a> = <a class=\"id\" href=\"#load_balance_fair\">load_balance_fair</a>(<a class=\"id\" href=\"#this_rq\">this_rq</a>, <a class=\"id\" href=\"#this_cpu\">this_cpu</a>, <a class=\"id\" href=\"#busiest\">busiest</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_load_move\">max_load_move</a> - <a class=\"id\" href=\"#total_load_moved\">total_load_moved</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#idle\">idle</a>, <a class=\"id\" href=\"#all_pinned\">all_pinned</a>, &amp;<a class=\"id\" href=\"#this_best_prio\">this_best_prio</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#total_load_moved\">total_load_moved</a> += <a class=\"id\" href=\"#load_moved\">load_moved</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PREEMPT\">CONFIG_PREEMPT</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * NEWIDLE balancing is a source of latency, so preemptible</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * kernels will stop after the first task is pulled to minimize</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the critical section.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#idle\">idle</a> == <a class=\"id\" href=\"#CPU_NEWLY_IDLE\">CPU_NEWLY_IDLE</a> && <a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#nr_running\">nr_running</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#raw_spin_is_contended\">raw_spin_is_contended</a>(&amp;<a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#lock\">lock</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_is_contended\">raw_spin_is_contended</a>(&amp;<a class=\"id\" href=\"#busiest\">busiest</a>-><a class=\"id\" href=\"#lock\">lock</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#load_moved\">load_moved</a> && <a class=\"id\" href=\"#max_load_move\">max_load_move</a> &gt; <a class=\"id\" href=\"#total_load_moved\">total_load_moved</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#total_load_moved\">total_load_moved</a> &gt; 0;", 
"}", 
"", 
"<span class=\"comment\">/********** Helpers for find_busiest_group ************************/</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * sd_lb_stats - Structure to store the statistics of a sched_domain</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>during load balancing.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#sd_lb_stats\">sd_lb_stats</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_group\">sched_group</a> *<a class=\"id\" href=\"#busiest\">busiest</a>; <span class=\"comment\">/* Busiest group in this sd */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_group\">sched_group</a> *<a class=\"id\" href=\"#this\">this</a>;  <span class=\"comment\">/* Local group in this sd */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#total_load\">total_load</a>;  <span class=\"comment\">/* Total load of all groups in sd */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#total_pwr\">total_pwr</a>;   <span class=\"comment\">/*<span class=\"ts\"/>Total power of all groups in sd */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#avg_load\">avg_load</a>;<span class=\"ts\"/>   <span class=\"comment\">/* Average load across all groups in sd */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/** Statistics of this group */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#this_load\">this_load</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#this_load_per_task\">this_load_per_task</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#this_nr_running\">this_nr_running</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Statistics of the busiest group */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#max_load\">max_load</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#busiest_load_per_task\">busiest_load_per_task</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#busiest_nr_running\">busiest_nr_running</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#busiest_group_capacity\">busiest_group_capacity</a>;", 
"", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#group_imb\">group_imb</a>; <span class=\"comment\">/* Is there imbalance in this sd */</span>", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SCHED_MC\">CONFIG_SCHED_MC</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SCHED_SMT\">CONFIG_SCHED_SMT</a>)", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#power_savings_balance\">power_savings_balance</a>; <span class=\"comment\">/* Is powersave balance needed for this sd */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_group\">sched_group</a> *<a class=\"id\" href=\"#group_min\">group_min</a>; <span class=\"comment\">/* Least loaded group in sd */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_group\">sched_group</a> *<a class=\"id\" href=\"#group_leader\">group_leader</a>; <span class=\"comment\">/* Group which relieves group_min */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#min_load_per_task\">min_load_per_task</a>; <span class=\"comment\">/* load_per_task in group_min */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#leader_nr_running\">leader_nr_running</a>; <span class=\"comment\">/* Nr running of group_leader */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#min_nr_running\">min_nr_running</a>; <span class=\"comment\">/* Nr running of group_min */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * sg_lb_stats - stats of a sched_group required for load_balancing</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#sg_lb_stats\">sg_lb_stats</a> {", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#avg_load\">avg_load</a>; <span class=\"comment\">/*Avg load across the CPUs of the group */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#group_load\">group_load</a>; <span class=\"comment\">/* Total load over the CPUs of the group */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#sum_nr_running\">sum_nr_running</a>; <span class=\"comment\">/* Nr tasks running in the group */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#sum_weighted_load\">sum_weighted_load</a>; <span class=\"comment\">/* Weighted load of group's tasks */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#group_capacity\">group_capacity</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#group_imb\">group_imb</a>; <span class=\"comment\">/* Is there an imbalance in the group ? */</span>", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * group_first_cpu - Returns the first cpu in the cpumask of a sched_group.</span>", 
"<span class=\"comment\"> * @group: The group whose first cpu is to be returned.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#group_first_cpu\">group_first_cpu</a>(struct <a class=\"id\" href=\"#sched_group\">sched_group</a> *<a class=\"id\" href=\"#group\">group</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cpumask_first\">cpumask_first</a>(<a class=\"id\" href=\"#sched_group_cpus\">sched_group_cpus</a>(<a class=\"id\" href=\"#group\">group</a>));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * get_sd_load_idx - Obtain the load index for a given sched domain.</span>", 
"<span class=\"comment\"> * @sd: The sched_domain whose load_idx is to be obtained.</span>", 
"<span class=\"comment\"> * @idle: The Idle status of the CPU for whose sd load_icx is obtained.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#get_sd_load_idx\">get_sd_load_idx</a>(struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#cpu_idle_type\">cpu_idle_type</a> <a class=\"id\" href=\"#idle\">idle</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#load_idx\">load_idx</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#idle\">idle</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_NOT_IDLE\">CPU_NOT_IDLE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#load_idx\">load_idx</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#busy_idx\">busy_idx</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_NEWLY_IDLE\">CPU_NEWLY_IDLE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#load_idx\">load_idx</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#newidle_idx\">newidle_idx</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#load_idx\">load_idx</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#idle_idx\">idle_idx</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#load_idx\">load_idx</a>;", 
"}", 
"", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SCHED_MC\">CONFIG_SCHED_MC</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SCHED_SMT\">CONFIG_SCHED_SMT</a>)", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * init_sd_power_savings_stats - Initialize power savings statistics for</span>", 
"<span class=\"comment\"> * the given sched_domain, during load balancing.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @sd: Sched domain whose power-savings statistics are to be initialized.</span>", 
"<span class=\"comment\"> * @sds: Variable containing the statistics for sd.</span>", 
"<span class=\"comment\"> * @idle: Idle status of the CPU at which we're performing load-balancing.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#init_sd_power_savings_stats\">init_sd_power_savings_stats</a>(struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sd_lb_stats\">sd_lb_stats</a> *<a class=\"id\" href=\"#sds\">sds</a>, enum <a class=\"id\" href=\"#cpu_idle_type\">cpu_idle_type</a> <a class=\"id\" href=\"#idle\">idle</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Busy processors will not participate in power savings</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * balance.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#idle\">idle</a> == <a class=\"id\" href=\"#CPU_NOT_IDLE\">CPU_NOT_IDLE</a> || !(<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SD_POWERSAVINGS_BALANCE\">SD_POWERSAVINGS_BALANCE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#power_savings_balance\">power_savings_balance</a> = 0;", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#power_savings_balance\">power_savings_balance</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#min_nr_running\">min_nr_running</a> = <a class=\"id\" href=\"#ULONG_MAX\">ULONG_MAX</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#leader_nr_running\">leader_nr_running</a> = 0;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * update_sd_power_savings_stats - Update the power saving stats for a</span>", 
"<span class=\"comment\"> * sched_domain while performing load balancing.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @group: sched_group belonging to the sched_domain under consideration.</span>", 
"<span class=\"comment\"> * @sds: Variable containing the statistics of the sched_domain</span>", 
"<span class=\"comment\"> * @local_group: Does group contain the CPU for which we're performing</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>load balancing ?</span>", 
"<span class=\"comment\"> * @sgs: Variable containing the statistics of the group.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#update_sd_power_savings_stats\">update_sd_power_savings_stats</a>(struct <a class=\"id\" href=\"#sched_group\">sched_group</a> *<a class=\"id\" href=\"#group\">group</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sd_lb_stats\">sd_lb_stats</a> *<a class=\"id\" href=\"#sds\">sds</a>, int <a class=\"id\" href=\"#local_group\">local_group</a>, struct <a class=\"id\" href=\"#sg_lb_stats\">sg_lb_stats</a> *<a class=\"id\" href=\"#sgs\">sgs</a>)", 
"{", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#power_savings_balance\">power_savings_balance</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the local group is idle or completely loaded</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * no need to do power savings balance at this domain</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#local_group\">local_group</a> && (<a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#this_nr_running\">this_nr_running</a> >= <a class=\"id\" href=\"#sgs\">sgs</a>-><a class=\"id\" href=\"#group_capacity\">group_capacity</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#this_nr_running\">this_nr_running</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#power_savings_balance\">power_savings_balance</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If a group is already running at full capacity or idle,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * don't include that group in power savings calculations</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#power_savings_balance\">power_savings_balance</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sgs\">sgs</a>-><a class=\"id\" href=\"#sum_nr_running\">sum_nr_running</a> >= <a class=\"id\" href=\"#sgs\">sgs</a>-><a class=\"id\" href=\"#group_capacity\">group_capacity</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#sgs\">sgs</a>-><a class=\"id\" href=\"#sum_nr_running\">sum_nr_running</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Calculate the group which has the least non-idle load.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This is the group from where we need to pick up the load</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for saving power</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#sgs\">sgs</a>-><a class=\"id\" href=\"#sum_nr_running\">sum_nr_running</a> &lt; <a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#min_nr_running\">min_nr_running</a>) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#sgs\">sgs</a>-><a class=\"id\" href=\"#sum_nr_running\">sum_nr_running</a> == <a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#min_nr_running\">min_nr_running</a> &&", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#group_first_cpu\">group_first_cpu</a>(<a class=\"id\" href=\"#group\">group</a>) &gt; <a class=\"id\" href=\"#group_first_cpu\">group_first_cpu</a>(<a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#group_min\">group_min</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#group_min\">group_min</a> = <a class=\"id\" href=\"#group\">group</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#min_nr_running\">min_nr_running</a> = <a class=\"id\" href=\"#sgs\">sgs</a>-><a class=\"id\" href=\"#sum_nr_running\">sum_nr_running</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#min_load_per_task\">min_load_per_task</a> = <a class=\"id\" href=\"#sgs\">sgs</a>-><a class=\"id\" href=\"#sum_weighted_load\">sum_weighted_load</a> /", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sgs\">sgs</a>-><a class=\"id\" href=\"#sum_nr_running\">sum_nr_running</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Calculate the group which is almost near its</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * capacity but still has some space to pick up some load</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * from other group and save more power</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sgs\">sgs</a>-><a class=\"id\" href=\"#sum_nr_running\">sum_nr_running</a> + 1 &gt; <a class=\"id\" href=\"#sgs\">sgs</a>-><a class=\"id\" href=\"#group_capacity\">group_capacity</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sgs\">sgs</a>-><a class=\"id\" href=\"#sum_nr_running\">sum_nr_running</a> &gt; <a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#leader_nr_running\">leader_nr_running</a> ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#sgs\">sgs</a>-><a class=\"id\" href=\"#sum_nr_running\">sum_nr_running</a> == <a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#leader_nr_running\">leader_nr_running</a> &&", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#group_first_cpu\">group_first_cpu</a>(<a class=\"id\" href=\"#group\">group</a>) &lt; <a class=\"id\" href=\"#group_first_cpu\">group_first_cpu</a>(<a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a> = <a class=\"id\" href=\"#group\">group</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#leader_nr_running\">leader_nr_running</a> = <a class=\"id\" href=\"#sgs\">sgs</a>-><a class=\"id\" href=\"#sum_nr_running\">sum_nr_running</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * check_power_save_busiest_group - see if there is potential for some power-savings balance</span>", 
"<span class=\"comment\"> * @sds: Variable containing the statistics of the sched_domain</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>under consideration.</span>", 
"<span class=\"comment\"> * @this_cpu: Cpu at which we're currently performing load-balancing.</span>", 
"<span class=\"comment\"> * @imbalance: Variable to store the imbalance.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * Check if we have potential to perform some power-savings balance.</span>", 
"<span class=\"comment\"> * If yes, set the busiest group to be the least loaded group in the</span>", 
"<span class=\"comment\"> * sched_domain, so that it's CPUs can be put to idle.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 1 if there is potential to perform power-savings balance.</span>", 
"<span class=\"comment\"> * Else returns 0.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#check_power_save_busiest_group\">check_power_save_busiest_group</a>(struct <a class=\"id\" href=\"#sd_lb_stats\">sd_lb_stats</a> *<a class=\"id\" href=\"#sds\">sds</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#this_cpu\">this_cpu</a>, unsigned long *<a class=\"id\" href=\"#imbalance\">imbalance</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#power_savings_balance\">power_savings_balance</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#this\">this</a> != <a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a> == <a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#group_min\">group_min</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#imbalance\">imbalance</a> = <a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#min_load_per_task\">min_load_per_task</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#busiest\">busiest</a> = <a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#group_min\">group_min</a>;", 
"", 
"<span class=\"ts\"/>return 1;", 
"", 
"}", 
"#else <span class=\"comment\">/* CONFIG_SCHED_MC || CONFIG_SCHED_SMT */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#init_sd_power_savings_stats\">init_sd_power_savings_stats</a>(struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sd_lb_stats\">sd_lb_stats</a> *<a class=\"id\" href=\"#sds\">sds</a>, enum <a class=\"id\" href=\"#cpu_idle_type\">cpu_idle_type</a> <a class=\"id\" href=\"#idle\">idle</a>)", 
"{", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#update_sd_power_savings_stats\">update_sd_power_savings_stats</a>(struct <a class=\"id\" href=\"#sched_group\">sched_group</a> *<a class=\"id\" href=\"#group\">group</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sd_lb_stats\">sd_lb_stats</a> *<a class=\"id\" href=\"#sds\">sds</a>, int <a class=\"id\" href=\"#local_group\">local_group</a>, struct <a class=\"id\" href=\"#sg_lb_stats\">sg_lb_stats</a> *<a class=\"id\" href=\"#sgs\">sgs</a>)", 
"{", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#check_power_save_busiest_group\">check_power_save_busiest_group</a>(struct <a class=\"id\" href=\"#sd_lb_stats\">sd_lb_stats</a> *<a class=\"id\" href=\"#sds\">sds</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#this_cpu\">this_cpu</a>, unsigned long *<a class=\"id\" href=\"#imbalance\">imbalance</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SCHED_MC || CONFIG_SCHED_SMT */</span>", 
"", 
"", 
"unsigned long <a class=\"id\" href=\"#default_scale_freq_power\">default_scale_freq_power</a>(struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#SCHED_LOAD_SCALE\">SCHED_LOAD_SCALE</a>;", 
"}", 
"", 
"unsigned long <a class=\"id\" href=\"#__weak\">__weak</a> <a class=\"id\" href=\"#arch_scale_freq_power\">arch_scale_freq_power</a>(struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#default_scale_freq_power\">default_scale_freq_power</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"}", 
"", 
"unsigned long <a class=\"id\" href=\"#default_scale_smt_power\">default_scale_smt_power</a>(struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#weight\">weight</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#span_weight\">span_weight</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#smt_gain\">smt_gain</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#smt_gain\">smt_gain</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smt_gain\">smt_gain</a> /= <a class=\"id\" href=\"#weight\">weight</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#smt_gain\">smt_gain</a>;", 
"}", 
"", 
"unsigned long <a class=\"id\" href=\"#__weak\">__weak</a> <a class=\"id\" href=\"#arch_scale_smt_power\">arch_scale_smt_power</a>(struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#default_scale_smt_power\">default_scale_smt_power</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"}", 
"", 
"unsigned long <a class=\"id\" href=\"#scale_rt_power\">scale_rt_power</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#total\">total</a>, <a class=\"id\" href=\"#available\">available</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#total\">total</a> = <a class=\"id\" href=\"#sched_avg_period\">sched_avg_period</a>() + (<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#clock\">clock</a> - <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#age_stamp\">age_stamp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#available\">available</a> = <a class=\"id\" href=\"#total\">total</a> - <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rt_avg\">rt_avg</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>((<a class=\"id\" href=\"#s64\">s64</a>)<a class=\"id\" href=\"#total\">total</a> &lt; <a class=\"id\" href=\"#SCHED_LOAD_SCALE\">SCHED_LOAD_SCALE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#total\">total</a> = <a class=\"id\" href=\"#SCHED_LOAD_SCALE\">SCHED_LOAD_SCALE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#total\">total</a> >>= <a class=\"id\" href=\"#SCHED_LOAD_SHIFT\">SCHED_LOAD_SHIFT</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#div_u64\">div_u64</a>(<a class=\"id\" href=\"#available\">available</a>, <a class=\"id\" href=\"#total\">total</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#update_cpu_power\">update_cpu_power</a>(struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#weight\">weight</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#span_weight\">span_weight</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#power\">power</a> = <a class=\"id\" href=\"#SCHED_LOAD_SCALE\">SCHED_LOAD_SCALE</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_group\">sched_group</a> *<a class=\"id\" href=\"#sdg\">sdg</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#groups\">groups</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SD_SHARE_CPUPOWER\">SD_SHARE_CPUPOWER</a>) && <a class=\"id\" href=\"#weight\">weight</a> &gt; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sched_feat\">sched_feat</a>(<a class=\"id\" href=\"#ARCH_POWER\">ARCH_POWER</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#power\">power</a> *= <a class=\"id\" href=\"#arch_scale_smt_power\">arch_scale_smt_power</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#power\">power</a> *= <a class=\"id\" href=\"#default_scale_smt_power\">default_scale_smt_power</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#power\">power</a> >>= <a class=\"id\" href=\"#SCHED_LOAD_SHIFT\">SCHED_LOAD_SHIFT</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdg\">sdg</a>-><a class=\"id\" href=\"#cpu_power_orig\">cpu_power_orig</a> = <a class=\"id\" href=\"#power\">power</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sched_feat\">sched_feat</a>(<a class=\"id\" href=\"#ARCH_POWER\">ARCH_POWER</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#power\">power</a> *= <a class=\"id\" href=\"#arch_scale_freq_power\">arch_scale_freq_power</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#power\">power</a> *= <a class=\"id\" href=\"#default_scale_freq_power\">default_scale_freq_power</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#power\">power</a> >>= <a class=\"id\" href=\"#SCHED_LOAD_SHIFT\">SCHED_LOAD_SHIFT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#power\">power</a> *= <a class=\"id\" href=\"#scale_rt_power\">scale_rt_power</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#power\">power</a> >>= <a class=\"id\" href=\"#SCHED_LOAD_SHIFT\">SCHED_LOAD_SHIFT</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#power\">power</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#power\">power</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)-><a class=\"id\" href=\"#cpu_power\">cpu_power</a> = <a class=\"id\" href=\"#power\">power</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdg\">sdg</a>-><a class=\"id\" href=\"#cpu_power\">cpu_power</a> = <a class=\"id\" href=\"#power\">power</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#update_group_power\">update_group_power</a>(struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#child\">child</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#child\">child</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_group\">sched_group</a> *<a class=\"id\" href=\"#group\">group</a>, *<a class=\"id\" href=\"#sdg\">sdg</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#groups\">groups</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#power\">power</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#child\">child</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_cpu_power\">update_cpu_power</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#power\">power</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a> = <a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#groups\">groups</a>;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#power\">power</a> += <a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#cpu_power\">cpu_power</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a> = <a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#group\">group</a> != <a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#groups\">groups</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdg\">sdg</a>-><a class=\"id\" href=\"#cpu_power\">cpu_power</a> = <a class=\"id\" href=\"#power\">power</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Try and fix up capacity for tiny siblings, this is needed when</span>", 
"<span class=\"comment\"> * things like SD_ASYM_PACKING need f_b_g to select another sibling</span>", 
"<span class=\"comment\"> * which on its own isn't powerful enough.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * See update_sd_pick_busiest() and check_asym_packing().</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#fix_small_capacity\">fix_small_capacity</a>(struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>, struct <a class=\"id\" href=\"#sched_group\">sched_group</a> *<a class=\"id\" href=\"#group\">group</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Only siblings can have significantly less than SCHED_LOAD_SCALE</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#level\">level</a> != <a class=\"id\" href=\"#SD_LV_SIBLING\">SD_LV_SIBLING</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If ~90% of the cpu_power is still there, we're good.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#cpu_power\">cpu_power</a> * 32 &gt; <a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#cpu_power_orig\">cpu_power_orig</a> * 29)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * update_sg_lb_stats - Update sched_group's statistics for load balancing.</span>", 
"<span class=\"comment\"> * @sd: The sched_domain whose statistics are to be updated.</span>", 
"<span class=\"comment\"> * @group: sched_group whose statistics are to be updated.</span>", 
"<span class=\"comment\"> * @this_cpu: Cpu for which load balance is currently performed.</span>", 
"<span class=\"comment\"> * @idle: Idle status of this_cpu</span>", 
"<span class=\"comment\"> * @load_idx: Load index of sched_domain of this_cpu for load calc.</span>", 
"<span class=\"comment\"> * @sd_idle: Idle status of the sched_domain containing group.</span>", 
"<span class=\"comment\"> * @local_group: Does group contain this_cpu.</span>", 
"<span class=\"comment\"> * @cpus: Set of cpus considered for load balancing.</span>", 
"<span class=\"comment\"> * @balance: Should we balance.</span>", 
"<span class=\"comment\"> * @sgs: variable to hold the statistics for this group.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#update_sg_lb_stats\">update_sg_lb_stats</a>(struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_group\">sched_group</a> *<a class=\"id\" href=\"#group\">group</a>, int <a class=\"id\" href=\"#this_cpu\">this_cpu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#cpu_idle_type\">cpu_idle_type</a> <a class=\"id\" href=\"#idle\">idle</a>, int <a class=\"id\" href=\"#load_idx\">load_idx</a>, int *<a class=\"id\" href=\"#sd_idle\">sd_idle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#local_group\">local_group</a>, const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpus\">cpus</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int *<a class=\"id\" href=\"#balance\">balance</a>, struct <a class=\"id\" href=\"#sg_lb_stats\">sg_lb_stats</a> *<a class=\"id\" href=\"#sgs\">sgs</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#load\">load</a>, <a class=\"id\" href=\"#max_cpu_load\">max_cpu_load</a>, <a class=\"id\" href=\"#min_cpu_load\">min_cpu_load</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#balance_cpu\">balance_cpu</a> = -1, <a class=\"id\" href=\"#first_idle_cpu\">first_idle_cpu</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#avg_load_per_task\">avg_load_per_task</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#local_group\">local_group</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#balance_cpu\">balance_cpu</a> = <a class=\"id\" href=\"#group_first_cpu\">group_first_cpu</a>(<a class=\"id\" href=\"#group\">group</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Tally up the load of all CPUs in the group */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_cpu_load\">max_cpu_load</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#min_cpu_load\">min_cpu_load</a> = ~0UL;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu_and\">for_each_cpu_and</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#sched_group_cpus\">sched_group_cpus</a>(<a class=\"id\" href=\"#group\">group</a>), <a class=\"id\" href=\"#cpus\">cpus</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#i\">i</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#sd_idle\">sd_idle</a> && <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#nr_running\">nr_running</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#sd_idle\">sd_idle</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Bias balancing toward cpus of our domain */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#local_group\">local_group</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#idle_cpu\">idle_cpu</a>(<a class=\"id\" href=\"#i\">i</a>) && !<a class=\"id\" href=\"#first_idle_cpu\">first_idle_cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first_idle_cpu\">first_idle_cpu</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#balance_cpu\">balance_cpu</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#load\">load</a> = <a class=\"id\" href=\"#target_load\">target_load</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#load_idx\">load_idx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#load\">load</a> = <a class=\"id\" href=\"#source_load\">source_load</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#load_idx\">load_idx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#load\">load</a> &gt; <a class=\"id\" href=\"#max_cpu_load\">max_cpu_load</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_cpu_load\">max_cpu_load</a> = <a class=\"id\" href=\"#load\">load</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#min_cpu_load\">min_cpu_load</a> &gt; <a class=\"id\" href=\"#load\">load</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min_cpu_load\">min_cpu_load</a> = <a class=\"id\" href=\"#load\">load</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sgs\">sgs</a>-><a class=\"id\" href=\"#group_load\">group_load</a> += <a class=\"id\" href=\"#load\">load</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sgs\">sgs</a>-><a class=\"id\" href=\"#sum_nr_running\">sum_nr_running</a> += <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#nr_running\">nr_running</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sgs\">sgs</a>-><a class=\"id\" href=\"#sum_weighted_load\">sum_weighted_load</a> += <a class=\"id\" href=\"#weighted_cpuload\">weighted_cpuload</a>(<a class=\"id\" href=\"#i\">i</a>);", 
"", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * First idle cpu or the first cpu(busiest) in this sched group</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is eligible for doing load balancing at this and above</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * domains. In the newly idle case, we will allow all the cpu's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to do the newly idle load balance.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#idle\">idle</a> != <a class=\"id\" href=\"#CPU_NEWLY_IDLE\">CPU_NEWLY_IDLE</a> && <a class=\"id\" href=\"#local_group\">local_group</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#balance_cpu\">balance_cpu</a> != <a class=\"id\" href=\"#this_cpu\">this_cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#balance\">balance</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_group_power\">update_group_power</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#this_cpu\">this_cpu</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Adjust by relative CPU power of the group */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sgs\">sgs</a>-><a class=\"id\" href=\"#avg_load\">avg_load</a> = (<a class=\"id\" href=\"#sgs\">sgs</a>-><a class=\"id\" href=\"#group_load\">group_load</a> * <a class=\"id\" href=\"#SCHED_LOAD_SCALE\">SCHED_LOAD_SCALE</a>) / <a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#cpu_power\">cpu_power</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Consider the group unbalanced when the imbalance is larger</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * than the average weight of two tasks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * APZ: with cgroup the avg task weight can vary wildly and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *      might not be a suitable number - should we keep a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *      normalized nr_running number somewhere that negates</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *      the hierarchy?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sgs\">sgs</a>-><a class=\"id\" href=\"#sum_nr_running\">sum_nr_running</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#avg_load_per_task\">avg_load_per_task</a> = <a class=\"id\" href=\"#sgs\">sgs</a>-><a class=\"id\" href=\"#sum_weighted_load\">sum_weighted_load</a> / <a class=\"id\" href=\"#sgs\">sgs</a>-><a class=\"id\" href=\"#sum_nr_running\">sum_nr_running</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#max_cpu_load\">max_cpu_load</a> - <a class=\"id\" href=\"#min_cpu_load\">min_cpu_load</a>) &gt; 2*<a class=\"id\" href=\"#avg_load_per_task\">avg_load_per_task</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sgs\">sgs</a>-><a class=\"id\" href=\"#group_imb\">group_imb</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sgs\">sgs</a>-><a class=\"id\" href=\"#group_capacity\">group_capacity</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DIV_ROUND_CLOSEST\">DIV_ROUND_CLOSEST</a>(<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#cpu_power\">cpu_power</a>, <a class=\"id\" href=\"#SCHED_LOAD_SCALE\">SCHED_LOAD_SCALE</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sgs\">sgs</a>-><a class=\"id\" href=\"#group_capacity\">group_capacity</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sgs\">sgs</a>-><a class=\"id\" href=\"#group_capacity\">group_capacity</a> = <a class=\"id\" href=\"#fix_small_capacity\">fix_small_capacity</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * update_sd_pick_busiest - return 1 on busiest group</span>", 
"<span class=\"comment\"> * @sd: sched_domain whose statistics are to be checked</span>", 
"<span class=\"comment\"> * @sds: sched_domain statistics</span>", 
"<span class=\"comment\"> * @sg: sched_group candidate to be checked for being the busiest</span>", 
"<span class=\"comment\"> * @sgs: sched_group statistics</span>", 
"<span class=\"comment\"> * @this_cpu: the current cpu</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Determine if @sg is a busier group than the previously selected</span>", 
"<span class=\"comment\"> * busiest group.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#update_sd_pick_busiest\">update_sd_pick_busiest</a>(struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#sd_lb_stats\">sd_lb_stats</a> *<a class=\"id\" href=\"#sds\">sds</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#sched_group\">sched_group</a> *<a class=\"id\" href=\"#sg\">sg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#sg_lb_stats\">sg_lb_stats</a> *<a class=\"id\" href=\"#sgs\">sgs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#this_cpu\">this_cpu</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sgs\">sgs</a>-><a class=\"id\" href=\"#avg_load\">avg_load</a> <= <a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#max_load\">max_load</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sgs\">sgs</a>-><a class=\"id\" href=\"#sum_nr_running\">sum_nr_running</a> &gt; <a class=\"id\" href=\"#sgs\">sgs</a>-><a class=\"id\" href=\"#group_capacity\">group_capacity</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sgs\">sgs</a>-><a class=\"id\" href=\"#group_imb\">group_imb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ASYM_PACKING needs to move all the work to the lowest</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * numbered CPUs in the group, therefore mark all groups</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * higher than ourself as busy.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SD_ASYM_PACKING\">SD_ASYM_PACKING</a>) && <a class=\"id\" href=\"#sgs\">sgs</a>-><a class=\"id\" href=\"#sum_nr_running\">sum_nr_running</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#this_cpu\">this_cpu</a> &lt; <a class=\"id\" href=\"#group_first_cpu\">group_first_cpu</a>(<a class=\"id\" href=\"#sg\">sg</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#busiest\">busiest</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#group_first_cpu\">group_first_cpu</a>(<a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#busiest\">busiest</a>) &gt; <a class=\"id\" href=\"#group_first_cpu\">group_first_cpu</a>(<a class=\"id\" href=\"#sg\">sg</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * update_sd_lb_stats - Update sched_group's statistics for load balancing.</span>", 
"<span class=\"comment\"> * @sd: sched_domain whose statistics are to be updated.</span>", 
"<span class=\"comment\"> * @this_cpu: Cpu for which load balance is currently performed.</span>", 
"<span class=\"comment\"> * @idle: Idle status of this_cpu</span>", 
"<span class=\"comment\"> * @sd_idle: Idle status of the sched_domain containing sg.</span>", 
"<span class=\"comment\"> * @cpus: Set of cpus considered for load balancing.</span>", 
"<span class=\"comment\"> * @balance: Should we balance.</span>", 
"<span class=\"comment\"> * @sds: variable to hold the statistics for this sched_domain.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#update_sd_lb_stats\">update_sd_lb_stats</a>(struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>, int <a class=\"id\" href=\"#this_cpu\">this_cpu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#cpu_idle_type\">cpu_idle_type</a> <a class=\"id\" href=\"#idle\">idle</a>, int *<a class=\"id\" href=\"#sd_idle\">sd_idle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpus\">cpus</a>, int *<a class=\"id\" href=\"#balance\">balance</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sd_lb_stats\">sd_lb_stats</a> *<a class=\"id\" href=\"#sds\">sds</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#child\">child</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#child\">child</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_group\">sched_group</a> *<a class=\"id\" href=\"#sg\">sg</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#groups\">groups</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sg_lb_stats\">sg_lb_stats</a> <a class=\"id\" href=\"#sgs\">sgs</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#load_idx\">load_idx</a>, <a class=\"id\" href=\"#prefer_sibling\">prefer_sibling</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#child\">child</a> && <a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SD_PREFER_SIBLING\">SD_PREFER_SIBLING</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prefer_sibling\">prefer_sibling</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_sd_power_savings_stats\">init_sd_power_savings_stats</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#sds\">sds</a>, <a class=\"id\" href=\"#idle\">idle</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#load_idx\">load_idx</a> = <a class=\"id\" href=\"#get_sd_load_idx\">get_sd_load_idx</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#idle\">idle</a>);", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#local_group\">local_group</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_group\">local_group</a> = <a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#this_cpu\">this_cpu</a>, <a class=\"id\" href=\"#sched_group_cpus\">sched_group_cpus</a>(<a class=\"id\" href=\"#sg\">sg</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#sgs\">sgs</a>, 0, sizeof(<a class=\"id\" href=\"#sgs\">sgs</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_sg_lb_stats\">update_sg_lb_stats</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#sg\">sg</a>, <a class=\"id\" href=\"#this_cpu\">this_cpu</a>, <a class=\"id\" href=\"#idle\">idle</a>, <a class=\"id\" href=\"#load_idx\">load_idx</a>, <a class=\"id\" href=\"#sd_idle\">sd_idle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_group\">local_group</a>, <a class=\"id\" href=\"#cpus\">cpus</a>, <a class=\"id\" href=\"#balance\">balance</a>, &amp;<a class=\"id\" href=\"#sgs\">sgs</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#local_group\">local_group</a> && !(*<a class=\"id\" href=\"#balance\">balance</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#total_load\">total_load</a> += <a class=\"id\" href=\"#sgs\">sgs</a>.<a class=\"id\" href=\"#group_load\">group_load</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#total_pwr\">total_pwr</a> += <a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#cpu_power\">cpu_power</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * In case the child domain prefers tasks go to siblings</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * first, lower the sg capacity to one so that we'll try</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and move all the excess tasks away.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#prefer_sibling\">prefer_sibling</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sgs\">sgs</a>.<a class=\"id\" href=\"#group_capacity\">group_capacity</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#sgs\">sgs</a>.<a class=\"id\" href=\"#group_capacity\">group_capacity</a>, 1UL);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#local_group\">local_group</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#this_load\">this_load</a> = <a class=\"id\" href=\"#sgs\">sgs</a>.<a class=\"id\" href=\"#avg_load\">avg_load</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#this\">this</a> = <a class=\"id\" href=\"#sg\">sg</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#this_nr_running\">this_nr_running</a> = <a class=\"id\" href=\"#sgs\">sgs</a>.<a class=\"id\" href=\"#sum_nr_running\">sum_nr_running</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#this_load_per_task\">this_load_per_task</a> = <a class=\"id\" href=\"#sgs\">sgs</a>.<a class=\"id\" href=\"#sum_weighted_load\">sum_weighted_load</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#update_sd_pick_busiest\">update_sd_pick_busiest</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#sds\">sds</a>, <a class=\"id\" href=\"#sg\">sg</a>, &amp;<a class=\"id\" href=\"#sgs\">sgs</a>, <a class=\"id\" href=\"#this_cpu\">this_cpu</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#max_load\">max_load</a> = <a class=\"id\" href=\"#sgs\">sgs</a>.<a class=\"id\" href=\"#avg_load\">avg_load</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#busiest\">busiest</a> = <a class=\"id\" href=\"#sg\">sg</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#busiest_nr_running\">busiest_nr_running</a> = <a class=\"id\" href=\"#sgs\">sgs</a>.<a class=\"id\" href=\"#sum_nr_running\">sum_nr_running</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#busiest_group_capacity\">busiest_group_capacity</a> = <a class=\"id\" href=\"#sgs\">sgs</a>.<a class=\"id\" href=\"#group_capacity\">group_capacity</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#busiest_load_per_task\">busiest_load_per_task</a> = <a class=\"id\" href=\"#sgs\">sgs</a>.<a class=\"id\" href=\"#sum_weighted_load\">sum_weighted_load</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#group_imb\">group_imb</a> = <a class=\"id\" href=\"#sgs\">sgs</a>.<a class=\"id\" href=\"#group_imb\">group_imb</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_sd_power_savings_stats\">update_sd_power_savings_stats</a>(<a class=\"id\" href=\"#sg\">sg</a>, <a class=\"id\" href=\"#sds\">sds</a>, <a class=\"id\" href=\"#local_group\">local_group</a>, &amp;<a class=\"id\" href=\"#sgs\">sgs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg\">sg</a> = <a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#sg\">sg</a> != <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#groups\">groups</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#__weak\">__weak</a> <a class=\"id\" href=\"#arch_sd_sibling_asym_packing\">arch_sd_sibling_asym_packing</a>(void)", 
"{", 
"       return 0*<a class=\"id\" href=\"#SD_ASYM_PACKING\">SD_ASYM_PACKING</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * check_asym_packing - Check to see if the group is packed into the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sched doman.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is primarily intended to used at the sibling level.  Some</span>", 
"<span class=\"comment\"> * cores like POWER7 prefer to use lower numbered SMT threads.  In the</span>", 
"<span class=\"comment\"> * case of POWER7, it can move to lower SMT modes only when higher</span>", 
"<span class=\"comment\"> * threads are idle.  When in lower SMT modes, the threads will</span>", 
"<span class=\"comment\"> * perform better since they share less core resources.  Hence when we</span>", 
"<span class=\"comment\"> * have idle threads, we want them to be the higher ones.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This packing function is run on idle threads.  It checks to see if</span>", 
"<span class=\"comment\"> * the busiest CPU in this domain (core in the P7 case) has a higher</span>", 
"<span class=\"comment\"> * CPU number than the packing function is being run on.  Here we are</span>", 
"<span class=\"comment\"> * assuming lower CPU number will be equivalent to lower a SMT thread</span>", 
"<span class=\"comment\"> * number.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 1 when packing is required and a task should be moved to</span>", 
"<span class=\"comment\"> * this CPU.  The amount of the imbalance is returned in *imbalance.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @sd: The sched_domain whose packing is to be checked.</span>", 
"<span class=\"comment\"> * @sds: Statistics of the sched_domain which is to be packed</span>", 
"<span class=\"comment\"> * @this_cpu: The cpu at whose sched_domain we're performing load-balance.</span>", 
"<span class=\"comment\"> * @imbalance: returns amount of imbalanced due to packing.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#check_asym_packing\">check_asym_packing</a>(struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#sd_lb_stats\">sd_lb_stats</a> *<a class=\"id\" href=\"#sds\">sds</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#this_cpu\">this_cpu</a>, unsigned long *<a class=\"id\" href=\"#imbalance\">imbalance</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#busiest_cpu\">busiest_cpu</a>;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SD_ASYM_PACKING\">SD_ASYM_PACKING</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#busiest\">busiest</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#busiest_cpu\">busiest_cpu</a> = <a class=\"id\" href=\"#group_first_cpu\">group_first_cpu</a>(<a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#busiest\">busiest</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#this_cpu\">this_cpu</a> &gt; <a class=\"id\" href=\"#busiest_cpu\">busiest_cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#imbalance\">imbalance</a> = <a class=\"id\" href=\"#DIV_ROUND_CLOSEST\">DIV_ROUND_CLOSEST</a>(<a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#max_load\">max_load</a> * <a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#busiest\">busiest</a>-><a class=\"id\" href=\"#cpu_power\">cpu_power</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#SCHED_LOAD_SCALE\">SCHED_LOAD_SCALE</a>);", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * fix_small_imbalance - Calculate the minor imbalance that exists</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>amongst the groups of a sched_domain, during</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>load balancing.</span>", 
"<span class=\"comment\"> * @sds: Statistics of the sched_domain whose imbalance is to be calculated.</span>", 
"<span class=\"comment\"> * @this_cpu: The cpu at whose sched_domain we're performing load-balance.</span>", 
"<span class=\"comment\"> * @imbalance: Variable to store the imbalance.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#fix_small_imbalance\">fix_small_imbalance</a>(struct <a class=\"id\" href=\"#sd_lb_stats\">sd_lb_stats</a> *<a class=\"id\" href=\"#sds\">sds</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#this_cpu\">this_cpu</a>, unsigned long *<a class=\"id\" href=\"#imbalance\">imbalance</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#pwr_now\">pwr_now</a> = 0, <a class=\"id\" href=\"#pwr_move\">pwr_move</a> = 0;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#imbn\">imbn</a> = 2;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#scaled_busy_load_per_task\">scaled_busy_load_per_task</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#this_nr_running\">this_nr_running</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#this_load_per_task\">this_load_per_task</a> /= <a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#this_nr_running\">this_nr_running</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#busiest_load_per_task\">busiest_load_per_task</a> &gt;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#this_load_per_task\">this_load_per_task</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#imbn\">imbn</a> = 1;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#this_load_per_task\">this_load_per_task</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_avg_load_per_task\">cpu_avg_load_per_task</a>(<a class=\"id\" href=\"#this_cpu\">this_cpu</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scaled_busy_load_per_task\">scaled_busy_load_per_task</a> = <a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#busiest_load_per_task\">busiest_load_per_task</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * <a class=\"id\" href=\"#SCHED_LOAD_SCALE\">SCHED_LOAD_SCALE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scaled_busy_load_per_task\">scaled_busy_load_per_task</a> /= <a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#busiest\">busiest</a>-><a class=\"id\" href=\"#cpu_power\">cpu_power</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#max_load\">max_load</a> - <a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#this_load\">this_load</a> + <a class=\"id\" href=\"#scaled_busy_load_per_task\">scaled_busy_load_per_task</a> >=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#scaled_busy_load_per_task\">scaled_busy_load_per_task</a> * <a class=\"id\" href=\"#imbn\">imbn</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#imbalance\">imbalance</a> = <a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#busiest_load_per_task\">busiest_load_per_task</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * OK, we don't have enough imbalance to justify moving tasks,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * however we may be able to increase total CPU power used by</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * moving them.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pwr_now\">pwr_now</a> += <a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#busiest\">busiest</a>-><a class=\"id\" href=\"#cpu_power\">cpu_power</a> *", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#busiest_load_per_task\">busiest_load_per_task</a>, <a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#max_load\">max_load</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pwr_now\">pwr_now</a> += <a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#cpu_power\">cpu_power</a> *", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#this_load_per_task\">this_load_per_task</a>, <a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#this_load\">this_load</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pwr_now\">pwr_now</a> /= <a class=\"id\" href=\"#SCHED_LOAD_SCALE\">SCHED_LOAD_SCALE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Amount of load we'd subtract */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = (<a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#busiest_load_per_task\">busiest_load_per_task</a> * <a class=\"id\" href=\"#SCHED_LOAD_SCALE\">SCHED_LOAD_SCALE</a>) /", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#busiest\">busiest</a>-><a class=\"id\" href=\"#cpu_power\">cpu_power</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#max_load\">max_load</a> &gt; <a class=\"id\" href=\"#tmp\">tmp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pwr_move\">pwr_move</a> += <a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#busiest\">busiest</a>-><a class=\"id\" href=\"#cpu_power\">cpu_power</a> *", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#busiest_load_per_task\">busiest_load_per_task</a>, <a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#max_load\">max_load</a> - <a class=\"id\" href=\"#tmp\">tmp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Amount of load we'd add */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#max_load\">max_load</a> * <a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#busiest\">busiest</a>-><a class=\"id\" href=\"#cpu_power\">cpu_power</a> &lt;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#busiest_load_per_task\">busiest_load_per_task</a> * <a class=\"id\" href=\"#SCHED_LOAD_SCALE\">SCHED_LOAD_SCALE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = (<a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#max_load\">max_load</a> * <a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#busiest\">busiest</a>-><a class=\"id\" href=\"#cpu_power\">cpu_power</a>) /", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#cpu_power\">cpu_power</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = (<a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#busiest_load_per_task\">busiest_load_per_task</a> * <a class=\"id\" href=\"#SCHED_LOAD_SCALE\">SCHED_LOAD_SCALE</a>) /", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#cpu_power\">cpu_power</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pwr_move\">pwr_move</a> += <a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#cpu_power\">cpu_power</a> *", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#this_load_per_task\">this_load_per_task</a>, <a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#this_load\">this_load</a> + <a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pwr_move\">pwr_move</a> /= <a class=\"id\" href=\"#SCHED_LOAD_SCALE\">SCHED_LOAD_SCALE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Move if we gain throughput */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pwr_move\">pwr_move</a> &gt; <a class=\"id\" href=\"#pwr_now\">pwr_now</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#imbalance\">imbalance</a> = <a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#busiest_load_per_task\">busiest_load_per_task</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * calculate_imbalance - Calculate the amount of imbalance present within the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> groups of a given sched_domain during load balance.</span>", 
"<span class=\"comment\"> * @sds: statistics of the sched_domain whose imbalance is to be calculated.</span>", 
"<span class=\"comment\"> * @this_cpu: Cpu for which currently load balance is being performed.</span>", 
"<span class=\"comment\"> * @imbalance: The variable to store the imbalance.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#calculate_imbalance\">calculate_imbalance</a>(struct <a class=\"id\" href=\"#sd_lb_stats\">sd_lb_stats</a> *<a class=\"id\" href=\"#sds\">sds</a>, int <a class=\"id\" href=\"#this_cpu\">this_cpu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#imbalance\">imbalance</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#max_pull\">max_pull</a>, <a class=\"id\" href=\"#load_above_capacity\">load_above_capacity</a> = ~0UL;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#busiest_load_per_task\">busiest_load_per_task</a> /= <a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#busiest_nr_running\">busiest_nr_running</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#group_imb\">group_imb</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#busiest_load_per_task\">busiest_load_per_task</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#busiest_load_per_task\">busiest_load_per_task</a>, <a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#avg_load\">avg_load</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In the presence of smp nice balancing, certain scenarios can have</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * max load less than avg load(as we skip the groups at or below</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * its cpu_power, while calculating max_load..)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#max_load\">max_load</a> &lt; <a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#avg_load\">avg_load</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#imbalance\">imbalance</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#fix_small_imbalance\">fix_small_imbalance</a>(<a class=\"id\" href=\"#sds\">sds</a>, <a class=\"id\" href=\"#this_cpu\">this_cpu</a>, <a class=\"id\" href=\"#imbalance\">imbalance</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#group_imb\">group_imb</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Don't want to pull so many tasks that a group would go idle.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#load_above_capacity\">load_above_capacity</a> = (<a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#busiest_nr_running\">busiest_nr_running</a> -", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#busiest_group_capacity\">busiest_group_capacity</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#load_above_capacity\">load_above_capacity</a> *= (<a class=\"id\" href=\"#SCHED_LOAD_SCALE\">SCHED_LOAD_SCALE</a> * <a class=\"id\" href=\"#SCHED_LOAD_SCALE\">SCHED_LOAD_SCALE</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#load_above_capacity\">load_above_capacity</a> /= <a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#busiest\">busiest</a>-><a class=\"id\" href=\"#cpu_power\">cpu_power</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We're trying to get all the cpus to the average_load, so we don't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * want to push ourselves above the average load, nor do we wish to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reduce the max loaded cpu below the average load. At the same time,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we also don't want to reduce the group load below the group capacity</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (so that we can implement power-savings policies etc). Thus we look</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for the minimum possible imbalance.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Be careful of negative numbers as they'll appear as very large values</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * with unsigned longs.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_pull\">max_pull</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#max_load\">max_load</a> - <a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#avg_load\">avg_load</a>, <a class=\"id\" href=\"#load_above_capacity\">load_above_capacity</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* How much load to actually move to equalise the imbalance */</span>", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#imbalance\">imbalance</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#max_pull\">max_pull</a> * <a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#busiest\">busiest</a>-><a class=\"id\" href=\"#cpu_power\">cpu_power</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#avg_load\">avg_load</a> - <a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#this_load\">this_load</a>) * <a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#this\">this</a>-><a class=\"id\" href=\"#cpu_power\">cpu_power</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>/ <a class=\"id\" href=\"#SCHED_LOAD_SCALE\">SCHED_LOAD_SCALE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if *imbalance is less than the average load per runnable task</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * there is no gaurantee that any tasks will be moved so we'll have</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a think about bumping its value to force at least one task to be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * moved</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#imbalance\">imbalance</a> &lt; <a class=\"id\" href=\"#sds\">sds</a>-><a class=\"id\" href=\"#busiest_load_per_task\">busiest_load_per_task</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#fix_small_imbalance\">fix_small_imbalance</a>(<a class=\"id\" href=\"#sds\">sds</a>, <a class=\"id\" href=\"#this_cpu\">this_cpu</a>, <a class=\"id\" href=\"#imbalance\">imbalance</a>);", 
"", 
"}", 
"<span class=\"comment\">/******* find_busiest_group() helpers end here *********************/</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * find_busiest_group - Returns the busiest group within the sched_domain</span>", 
"<span class=\"comment\"> * if there is an imbalance. If there isn't an imbalance, and</span>", 
"<span class=\"comment\"> * the user has opted for power-savings, it returns a group whose</span>", 
"<span class=\"comment\"> * CPUs can be put to idle by rebalancing those tasks elsewhere, if</span>", 
"<span class=\"comment\"> * such a group exists.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Also calculates the amount of weighted load which should be moved</span>", 
"<span class=\"comment\"> * to restore balance.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @sd: The sched_domain whose busiest group is to be returned.</span>", 
"<span class=\"comment\"> * @this_cpu: The cpu for which load balancing is currently being performed.</span>", 
"<span class=\"comment\"> * @imbalance: Variable which stores amount of weighted load which should</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>be moved to restore balance/put a group to idle.</span>", 
"<span class=\"comment\"> * @idle: The idle status of this_cpu.</span>", 
"<span class=\"comment\"> * @sd_idle: The idleness of sd</span>", 
"<span class=\"comment\"> * @cpus: The set of CPUs under consideration for load-balancing.</span>", 
"<span class=\"comment\"> * @balance: Pointer to a variable indicating if this_cpu</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is the appropriate cpu to perform load balancing at this_level.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns:<span class=\"ts\"/>- the busiest group if imbalance exists.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>- If no imbalance and user has opted for power-savings balance,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>   return the least loaded group whose CPUs can be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>   put to idle by rebalancing its tasks onto our group.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#sched_group\">sched_group</a> *", 
"<a class=\"id\" href=\"#find_busiest_group\">find_busiest_group</a>(struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>, int <a class=\"id\" href=\"#this_cpu\">this_cpu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   unsigned long *<a class=\"id\" href=\"#imbalance\">imbalance</a>, enum <a class=\"id\" href=\"#cpu_idle_type\">cpu_idle_type</a> <a class=\"id\" href=\"#idle\">idle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   int *<a class=\"id\" href=\"#sd_idle\">sd_idle</a>, const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpus\">cpus</a>, int *<a class=\"id\" href=\"#balance\">balance</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sd_lb_stats\">sd_lb_stats</a> <a class=\"id\" href=\"#sds\">sds</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#sds\">sds</a>, 0, sizeof(<a class=\"id\" href=\"#sds\">sds</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Compute the various statistics relavent for load balancing at</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this level.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_sd_lb_stats\">update_sd_lb_stats</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#this_cpu\">this_cpu</a>, <a class=\"id\" href=\"#idle\">idle</a>, <a class=\"id\" href=\"#sd_idle\">sd_idle</a>, <a class=\"id\" href=\"#cpus\">cpus</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#balance\">balance</a>, &amp;<a class=\"id\" href=\"#sds\">sds</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Cases where imbalance does not exist from POV of this_cpu */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* 1) this_cpu is not the appropriate cpu to perform load balancing</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    at this level.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 2) There is no busy sibling group to pull from.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 3) This group is the busiest group.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 4) This group is more busy than the avg busieness at this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    sched_domain.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 5) The imbalance is within the specified limit.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!(*<a class=\"id\" href=\"#balance\">balance</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#idle\">idle</a> == <a class=\"id\" href=\"#CPU_IDLE\">CPU_IDLE</a> || <a class=\"id\" href=\"#idle\">idle</a> == <a class=\"id\" href=\"#CPU_NEWLY_IDLE\">CPU_NEWLY_IDLE</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#check_asym_packing\">check_asym_packing</a>(<a class=\"id\" href=\"#sd\">sd</a>, &amp;<a class=\"id\" href=\"#sds\">sds</a>, <a class=\"id\" href=\"#this_cpu\">this_cpu</a>, <a class=\"id\" href=\"#imbalance\">imbalance</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#sds\">sds</a>.<a class=\"id\" href=\"#busiest\">busiest</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sds\">sds</a>.<a class=\"id\" href=\"#busiest\">busiest</a> || <a class=\"id\" href=\"#sds\">sds</a>.<a class=\"id\" href=\"#busiest_nr_running\">busiest_nr_running</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_balanced\">out_balanced</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sds\">sds</a>.<a class=\"id\" href=\"#this_load\">this_load</a> >= <a class=\"id\" href=\"#sds\">sds</a>.<a class=\"id\" href=\"#max_load\">max_load</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_balanced\">out_balanced</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sds\">sds</a>.<a class=\"id\" href=\"#avg_load\">avg_load</a> = (<a class=\"id\" href=\"#SCHED_LOAD_SCALE\">SCHED_LOAD_SCALE</a> * <a class=\"id\" href=\"#sds\">sds</a>.<a class=\"id\" href=\"#total_load\">total_load</a>) / <a class=\"id\" href=\"#sds\">sds</a>.<a class=\"id\" href=\"#total_pwr\">total_pwr</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sds\">sds</a>.<a class=\"id\" href=\"#this_load\">this_load</a> >= <a class=\"id\" href=\"#sds\">sds</a>.<a class=\"id\" href=\"#avg_load\">avg_load</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_balanced\">out_balanced</a>;", 
"", 
"<span class=\"ts\"/>if (100 * <a class=\"id\" href=\"#sds\">sds</a>.<a class=\"id\" href=\"#max_load\">max_load</a> <= <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#imbalance_pct\">imbalance_pct</a> * <a class=\"id\" href=\"#sds\">sds</a>.<a class=\"id\" href=\"#this_load\">this_load</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_balanced\">out_balanced</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Looks like there is an imbalance. Compute it */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#calculate_imbalance\">calculate_imbalance</a>(&amp;<a class=\"id\" href=\"#sds\">sds</a>, <a class=\"id\" href=\"#this_cpu\">this_cpu</a>, <a class=\"id\" href=\"#imbalance\">imbalance</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sds\">sds</a>.<a class=\"id\" href=\"#busiest\">busiest</a>;", 
"", 
"<a class=\"id\" href=\"#out_balanced\">out_balanced</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * There is no obvious imbalance. But check if we can do some balancing</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to save power.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#check_power_save_busiest_group\">check_power_save_busiest_group</a>(&amp;<a class=\"id\" href=\"#sds\">sds</a>, <a class=\"id\" href=\"#this_cpu\">this_cpu</a>, <a class=\"id\" href=\"#imbalance\">imbalance</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#sds\">sds</a>.<a class=\"id\" href=\"#busiest\">busiest</a>;", 
"<a class=\"id\" href=\"#ret\">ret</a>:", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#imbalance\">imbalance</a> = 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * find_busiest_queue - find the busiest runqueue among the cpus in group.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#rq\">rq</a> *", 
"<a class=\"id\" href=\"#find_busiest_queue\">find_busiest_queue</a>(struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>, struct <a class=\"id\" href=\"#sched_group\">sched_group</a> *<a class=\"id\" href=\"#group\">group</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   enum <a class=\"id\" href=\"#cpu_idle_type\">cpu_idle_type</a> <a class=\"id\" href=\"#idle\">idle</a>, unsigned long <a class=\"id\" href=\"#imbalance\">imbalance</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpus\">cpus</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#busiest\">busiest</a> = <a class=\"id\" href=\"#NULL\">NULL</a>, *<a class=\"id\" href=\"#rq\">rq</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#max_load\">max_load</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#sched_group_cpus\">sched_group_cpus</a>(<a class=\"id\" href=\"#group\">group</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#power\">power</a> = <a class=\"id\" href=\"#power_of\">power_of</a>(<a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#capacity\">capacity</a> = <a class=\"id\" href=\"#DIV_ROUND_CLOSEST\">DIV_ROUND_CLOSEST</a>(<a class=\"id\" href=\"#power\">power</a>, <a class=\"id\" href=\"#SCHED_LOAD_SCALE\">SCHED_LOAD_SCALE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#wl\">wl</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#capacity\">capacity</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#capacity\">capacity</a> = <a class=\"id\" href=\"#fix_small_capacity\">fix_small_capacity</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#cpus\">cpus</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wl\">wl</a> = <a class=\"id\" href=\"#weighted_cpuload\">weighted_cpuload</a>(<a class=\"id\" href=\"#i\">i</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * When comparing with imbalance, use weighted_cpuload()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * which is not scaled with the cpu power.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#capacity\">capacity</a> && <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#nr_running\">nr_running</a> == 1 && <a class=\"id\" href=\"#wl\">wl</a> &gt; <a class=\"id\" href=\"#imbalance\">imbalance</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * For the load comparisons with the other cpu's, consider</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the weighted_cpuload() scaled with the cpu power, so that</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the load can be moved away from the cpu that is potentially</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * running at a lower capacity.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wl\">wl</a> = (<a class=\"id\" href=\"#wl\">wl</a> * <a class=\"id\" href=\"#SCHED_LOAD_SCALE\">SCHED_LOAD_SCALE</a>) / <a class=\"id\" href=\"#power\">power</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#wl\">wl</a> &gt; <a class=\"id\" href=\"#max_load\">max_load</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_load\">max_load</a> = <a class=\"id\" href=\"#wl\">wl</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#busiest\">busiest</a> = <a class=\"id\" href=\"#rq\">rq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#busiest\">busiest</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Max backoff if we encounter pinned tasks. Pretty arbitrary value, but</span>", 
"<span class=\"comment\"> * so long as it is large enough.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_PINNED_INTERVAL\">MAX_PINNED_INTERVAL</a><span class=\"ts\"/>512", 
"", 
"<span class=\"comment\">/* Working cpumask for load_balance and load_balance_newidle. */</span>", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(<a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a>, <a class=\"id\" href=\"#load_balance_tmpmask\">load_balance_tmpmask</a>);", 
"", 
"static int <a class=\"id\" href=\"#need_active_balance\">need_active_balance</a>(struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>, int <a class=\"id\" href=\"#sd_idle\">sd_idle</a>, int <a class=\"id\" href=\"#idle\">idle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       int <a class=\"id\" href=\"#busiest_cpu\">busiest_cpu</a>, int <a class=\"id\" href=\"#this_cpu\">this_cpu</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#idle\">idle</a> == <a class=\"id\" href=\"#CPU_NEWLY_IDLE\">CPU_NEWLY_IDLE</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * ASYM_PACKING needs to force migrate tasks from busy but</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * higher numbered CPUs in order to pack all tasks in the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * lowest numbered CPUs.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SD_ASYM_PACKING\">SD_ASYM_PACKING</a>) && <a class=\"id\" href=\"#busiest_cpu\">busiest_cpu</a> &gt; <a class=\"id\" href=\"#this_cpu\">this_cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The only task running in a non-idle cpu can be moved to this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * cpu in an attempt to completely freeup the other CPU</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * package.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The package power saving logic comes from</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * find_busiest_group(). If there are no imbalance, then</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * f_b_g() will return NULL. However when sched_mc={1,2} then</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * f_b_g() will select a group from which a running task may be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * pulled to this cpu in order to make the other package idle.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If there is no opportunity to make a package idle and if</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * there are no imbalance, then f_b_g() will return NULL and no</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * action will be taken in load_balance_newidle().</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Under normal task pull operation due to imbalance, there</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * will be more than one task in the source run queue and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * move_tasks() will succeed.  ld_moved will be true and this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * active balance code will not be triggered.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#sd_idle\">sd_idle</a> && <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SD_SHARE_CPUPOWER\">SD_SHARE_CPUPOWER</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#test_sd_parent\">test_sd_parent</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#SD_POWERSAVINGS_BALANCE\">SD_POWERSAVINGS_BALANCE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sched_mc_power_savings\">sched_mc_power_savings</a> &lt; <a class=\"id\" href=\"#POWERSAVINGS_BALANCE_WAKEUP\">POWERSAVINGS_BALANCE_WAKEUP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#nr_balance_failed\">nr_balance_failed</a> &gt; <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#cache_nice_tries\">cache_nice_tries</a>+2);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#active_load_balance_cpu_stop\">active_load_balance_cpu_stop</a>(void *<a class=\"id\" href=\"#data\">data</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check this_cpu to ensure it is balanced within domain. Attempt to move</span>", 
"<span class=\"comment\"> * tasks if there is an imbalance.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#load_balance\">load_balance</a>(int <a class=\"id\" href=\"#this_cpu\">this_cpu</a>, struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#this_rq\">this_rq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>, enum <a class=\"id\" href=\"#cpu_idle_type\">cpu_idle_type</a> <a class=\"id\" href=\"#idle\">idle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int *<a class=\"id\" href=\"#balance\">balance</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ld_moved\">ld_moved</a>, <a class=\"id\" href=\"#all_pinned\">all_pinned</a> = 0, <a class=\"id\" href=\"#active_balance\">active_balance</a> = 0, <a class=\"id\" href=\"#sd_idle\">sd_idle</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_group\">sched_group</a> *<a class=\"id\" href=\"#group\">group</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#imbalance\">imbalance</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#busiest\">busiest</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpus\">cpus</a> = <a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#load_balance_tmpmask\">load_balance_tmpmask</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_copy\">cpumask_copy</a>(<a class=\"id\" href=\"#cpus\">cpus</a>, <a class=\"id\" href=\"#cpu_active_mask\">cpu_active_mask</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * When power savings policy is enabled for the parent domain, idle</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * sibling can pick up load irrespective of busy siblings. In this case,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * let the state of idle sibling percolate up as CPU_IDLE, instead of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * portraying it as CPU_NOT_IDLE.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#idle\">idle</a> != <a class=\"id\" href=\"#CPU_NOT_IDLE\">CPU_NOT_IDLE</a> && <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SD_SHARE_CPUPOWER\">SD_SHARE_CPUPOWER</a> &&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#test_sd_parent\">test_sd_parent</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#SD_POWERSAVINGS_BALANCE\">SD_POWERSAVINGS_BALANCE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_idle\">sd_idle</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedstat_inc\">schedstat_inc</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#lb_count\">lb_count</a>[<a class=\"id\" href=\"#idle\">idle</a>]);", 
"", 
"<a class=\"id\" href=\"#redo\">redo</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_shares\">update_shares</a>(<a class=\"id\" href=\"#sd\">sd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a> = <a class=\"id\" href=\"#find_busiest_group\">find_busiest_group</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#this_cpu\">this_cpu</a>, &amp;<a class=\"id\" href=\"#imbalance\">imbalance</a>, <a class=\"id\" href=\"#idle\">idle</a>, &amp;<a class=\"id\" href=\"#sd_idle\">sd_idle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#cpus\">cpus</a>, <a class=\"id\" href=\"#balance\">balance</a>);", 
"", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#balance\">balance</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_balanced\">out_balanced</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#group\">group</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedstat_inc\">schedstat_inc</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#lb_nobusyg\">lb_nobusyg</a>[<a class=\"id\" href=\"#idle\">idle</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_balanced\">out_balanced</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#busiest\">busiest</a> = <a class=\"id\" href=\"#find_busiest_queue\">find_busiest_queue</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#idle\">idle</a>, <a class=\"id\" href=\"#imbalance\">imbalance</a>, <a class=\"id\" href=\"#cpus\">cpus</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#busiest\">busiest</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedstat_inc\">schedstat_inc</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#lb_nobusyq\">lb_nobusyq</a>[<a class=\"id\" href=\"#idle\">idle</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_balanced\">out_balanced</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#busiest\">busiest</a> == <a class=\"id\" href=\"#this_rq\">this_rq</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedstat_add\">schedstat_add</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#lb_imbalance\">lb_imbalance</a>[<a class=\"id\" href=\"#idle\">idle</a>], <a class=\"id\" href=\"#imbalance\">imbalance</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ld_moved\">ld_moved</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#busiest\">busiest</a>-><a class=\"id\" href=\"#nr_running\">nr_running</a> &gt; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Attempt to move tasks. If find_busiest_group has found</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * an imbalance but busiest-&gt;nr_running &lt;= 1, the group is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * still unbalanced. ld_moved simply stays zero, so it is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * correctly treated as an imbalance.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#double_rq_lock\">double_rq_lock</a>(<a class=\"id\" href=\"#this_rq\">this_rq</a>, <a class=\"id\" href=\"#busiest\">busiest</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ld_moved\">ld_moved</a> = <a class=\"id\" href=\"#move_tasks\">move_tasks</a>(<a class=\"id\" href=\"#this_rq\">this_rq</a>, <a class=\"id\" href=\"#this_cpu\">this_cpu</a>, <a class=\"id\" href=\"#busiest\">busiest</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#imbalance\">imbalance</a>, <a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#idle\">idle</a>, &amp;<a class=\"id\" href=\"#all_pinned\">all_pinned</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#double_rq_unlock\">double_rq_unlock</a>(<a class=\"id\" href=\"#this_rq\">this_rq</a>, <a class=\"id\" href=\"#busiest\">busiest</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * some other cpu did the load balance for us.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ld_moved\">ld_moved</a> && <a class=\"id\" href=\"#this_cpu\">this_cpu</a> != <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#resched_cpu\">resched_cpu</a>(<a class=\"id\" href=\"#this_cpu\">this_cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* All tasks on this runqueue were pinned by CPU affinity */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#all_pinned\">all_pinned</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear_cpu\">cpumask_clear_cpu</a>(<a class=\"id\" href=\"#cpu_of\">cpu_of</a>(<a class=\"id\" href=\"#busiest\">busiest</a>), <a class=\"id\" href=\"#cpus\">cpus</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_empty\">cpumask_empty</a>(<a class=\"id\" href=\"#cpus\">cpus</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#redo\">redo</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_balanced\">out_balanced</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ld_moved\">ld_moved</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedstat_inc\">schedstat_inc</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#lb_failed\">lb_failed</a>[<a class=\"id\" href=\"#idle\">idle</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#nr_balance_failed\">nr_balance_failed</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#need_active_balance\">need_active_balance</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#sd_idle\">sd_idle</a>, <a class=\"id\" href=\"#idle\">idle</a>, <a class=\"id\" href=\"#cpu_of\">cpu_of</a>(<a class=\"id\" href=\"#busiest\">busiest</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_cpu\">this_cpu</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#busiest\">busiest</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* don't kick the active_load_balance_cpu_stop,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * if the curr task on busiest cpu can't be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * moved to this_cpu</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#this_cpu\">this_cpu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      &amp;<a class=\"id\" href=\"#busiest\">busiest</a>-><a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#cpus_allowed\">cpus_allowed</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#busiest\">busiest</a>-><a class=\"id\" href=\"#lock\">lock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#all_pinned\">all_pinned</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_one_pinned\">out_one_pinned</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * -&gt;active_balance synchronizes accesses to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * -&gt;active_balance_work.  Once set, it's cleared</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * only after active load balance is finished.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#busiest\">busiest</a>-><a class=\"id\" href=\"#active_balance\">active_balance</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#busiest\">busiest</a>-><a class=\"id\" href=\"#active_balance\">active_balance</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#busiest\">busiest</a>-><a class=\"id\" href=\"#push_cpu\">push_cpu</a> = <a class=\"id\" href=\"#this_cpu\">this_cpu</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#active_balance\">active_balance</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#busiest\">busiest</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#active_balance\">active_balance</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stop_one_cpu_nowait\">stop_one_cpu_nowait</a>(<a class=\"id\" href=\"#cpu_of\">cpu_of</a>(<a class=\"id\" href=\"#busiest\">busiest</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#active_load_balance_cpu_stop\">active_load_balance_cpu_stop</a>, <a class=\"id\" href=\"#busiest\">busiest</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#busiest\">busiest</a>-><a class=\"id\" href=\"#active_balance_work\">active_balance_work</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We've kicked active balancing, reset the failure</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * counter.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#nr_balance_failed\">nr_balance_failed</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#cache_nice_tries\">cache_nice_tries</a>+1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#nr_balance_failed\">nr_balance_failed</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#active_balance\">active_balance</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We were unbalanced, so reset the balancing interval */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#balance_interval\">balance_interval</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#min_interval\">min_interval</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If we've begun active balancing, start to back off. This</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * case may not be covered by the all_pinned logic if there</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is only 1 task on the busy runqueue (because we don't call</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * move_tasks).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#balance_interval\">balance_interval</a> &lt; <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#max_interval\">max_interval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#balance_interval\">balance_interval</a> *= 2;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ld_moved\">ld_moved</a> && !<a class=\"id\" href=\"#sd_idle\">sd_idle</a> && <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SD_SHARE_CPUPOWER\">SD_SHARE_CPUPOWER</a> &&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#test_sd_parent\">test_sd_parent</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#SD_POWERSAVINGS_BALANCE\">SD_POWERSAVINGS_BALANCE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ld_moved\">ld_moved</a> = -1;", 
"", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<a class=\"id\" href=\"#out_balanced\">out_balanced</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedstat_inc\">schedstat_inc</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#lb_balanced\">lb_balanced</a>[<a class=\"id\" href=\"#idle\">idle</a>]);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#nr_balance_failed\">nr_balance_failed</a> = 0;", 
"", 
"<a class=\"id\" href=\"#out_one_pinned\">out_one_pinned</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* tune up the balancing interval */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#all_pinned\">all_pinned</a> && <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#balance_interval\">balance_interval</a> &lt; <a class=\"id\" href=\"#MAX_PINNED_INTERVAL\">MAX_PINNED_INTERVAL</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#balance_interval\">balance_interval</a> &lt; <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#max_interval\">max_interval</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#balance_interval\">balance_interval</a> *= 2;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sd_idle\">sd_idle</a> && <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SD_SHARE_CPUPOWER\">SD_SHARE_CPUPOWER</a> &&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#test_sd_parent\">test_sd_parent</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#SD_POWERSAVINGS_BALANCE\">SD_POWERSAVINGS_BALANCE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ld_moved\">ld_moved</a> = -1;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ld_moved\">ld_moved</a> = 0;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ld_moved\">ld_moved</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_shares\">update_shares</a>(<a class=\"id\" href=\"#sd\">sd</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ld_moved\">ld_moved</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * idle_balance is called by schedule() if this_cpu is about to become</span>", 
"<span class=\"comment\"> * idle. Attempts to pull tasks from other CPUs.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#idle_balance\">idle_balance</a>(int <a class=\"id\" href=\"#this_cpu\">this_cpu</a>, struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#this_rq\">this_rq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pulled_task\">pulled_task</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#next_balance\">next_balance</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#HZ\">HZ</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#idle_stamp\">idle_stamp</a> = <a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#clock\">clock</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#avg_idle\">avg_idle</a> &lt; <a class=\"id\" href=\"#sysctl_sched_migration_cost\">sysctl_sched_migration_cost</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Drop the rq-&gt;lock, but keep IRQ/preempt disabled.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_domain\">for_each_domain</a>(<a class=\"id\" href=\"#this_cpu\">this_cpu</a>, <a class=\"id\" href=\"#sd\">sd</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#interval\">interval</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#balance\">balance</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SD_LOAD_BALANCE\">SD_LOAD_BALANCE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SD_BALANCE_NEWIDLE\">SD_BALANCE_NEWIDLE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If we've pulled tasks over stop searching: */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pulled_task\">pulled_task</a> = <a class=\"id\" href=\"#load_balance\">load_balance</a>(<a class=\"id\" href=\"#this_cpu\">this_cpu</a>, <a class=\"id\" href=\"#this_rq\">this_rq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#CPU_NEWLY_IDLE\">CPU_NEWLY_IDLE</a>, &amp;<a class=\"id\" href=\"#balance\">balance</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#interval\">interval</a> = <a class=\"id\" href=\"#msecs_to_jiffies\">msecs_to_jiffies</a>(<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#balance_interval\">balance_interval</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#time_after\">time_after</a>(<a class=\"id\" href=\"#next_balance\">next_balance</a>, <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#last_balance\">last_balance</a> + <a class=\"id\" href=\"#interval\">interval</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_balance\">next_balance</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#last_balance\">last_balance</a> + <a class=\"id\" href=\"#interval\">interval</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pulled_task\">pulled_task</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#idle_stamp\">idle_stamp</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pulled_task\">pulled_task</a> || <a class=\"id\" href=\"#time_after\">time_after</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#next_balance\">next_balance</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We are going idle. next_balance may be set based on</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * a busy processor. So reset next_balance.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#next_balance\">next_balance</a> = <a class=\"id\" href=\"#next_balance\">next_balance</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * active_load_balance_cpu_stop is run by cpu stopper. It pushes</span>", 
"<span class=\"comment\"> * running tasks off the busiest CPU onto idle CPUs. It requires at</span>", 
"<span class=\"comment\"> * least 1 task to be running on each physical CPU where possible, and</span>", 
"<span class=\"comment\"> * avoids physical / logical imbalances.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#active_load_balance_cpu_stop\">active_load_balance_cpu_stop</a>(void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#busiest_rq\">busiest_rq</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#busiest_cpu\">busiest_cpu</a> = <a class=\"id\" href=\"#cpu_of\">cpu_of</a>(<a class=\"id\" href=\"#busiest_rq\">busiest_rq</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#target_cpu\">target_cpu</a> = <a class=\"id\" href=\"#busiest_rq\">busiest_rq</a>-><a class=\"id\" href=\"#push_cpu\">push_cpu</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#target_rq\">target_rq</a> = <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#target_cpu\">target_cpu</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irq\">raw_spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#busiest_rq\">busiest_rq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* make sure the requested cpu hasn't gone down in the meantime */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#busiest_cpu\">busiest_cpu</a> != <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>() ||", 
"<span class=\"ts\"/><span class=\"ts\"/>     !<a class=\"id\" href=\"#busiest_rq\">busiest_rq</a>-><a class=\"id\" href=\"#active_balance\">active_balance</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Is there any task to move? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#busiest_rq\">busiest_rq</a>-><a class=\"id\" href=\"#nr_running\">nr_running</a> <= 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This condition is \"impossible\", if it occurs</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we need to fix it. Originally reported by</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Bjorn Helgaas on a 128-cpu setup.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#busiest_rq\">busiest_rq</a> == <a class=\"id\" href=\"#target_rq\">target_rq</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* move a task from busiest_rq to target_rq */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#double_lock_balance\">double_lock_balance</a>(<a class=\"id\" href=\"#busiest_rq\">busiest_rq</a>, <a class=\"id\" href=\"#target_rq\">target_rq</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Search for an sd spanning us and the target CPU. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_domain\">for_each_domain</a>(<a class=\"id\" href=\"#target_cpu\">target_cpu</a>, <a class=\"id\" href=\"#sd\">sd</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SD_LOAD_BALANCE\">SD_LOAD_BALANCE</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#busiest_cpu\">busiest_cpu</a>, <a class=\"id\" href=\"#sched_domain_span\">sched_domain_span</a>(<a class=\"id\" href=\"#sd\">sd</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#sd\">sd</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedstat_inc\">schedstat_inc</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#alb_count\">alb_count</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#move_one_task\">move_one_task</a>(<a class=\"id\" href=\"#target_rq\">target_rq</a>, <a class=\"id\" href=\"#target_cpu\">target_cpu</a>, <a class=\"id\" href=\"#busiest_rq\">busiest_rq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#CPU_IDLE\">CPU_IDLE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedstat_inc\">schedstat_inc</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#alb_pushed\">alb_pushed</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedstat_inc\">schedstat_inc</a>(<a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#alb_failed\">alb_failed</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#double_unlock_balance\">double_unlock_balance</a>(<a class=\"id\" href=\"#busiest_rq\">busiest_rq</a>, <a class=\"id\" href=\"#target_rq\">target_rq</a>);", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#busiest_rq\">busiest_rq</a>-><a class=\"id\" href=\"#active_balance\">active_balance</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irq\">raw_spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#busiest_rq\">busiest_rq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NO_HZ\">CONFIG_NO_HZ</a>", 
"", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#call_single_data\">call_single_data</a>, <a class=\"id\" href=\"#remote_sched_softirq_cb\">remote_sched_softirq_cb</a>);", 
"", 
"static void <a class=\"id\" href=\"#trigger_sched_softirq\">trigger_sched_softirq</a>(void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raise_softirq_irqoff\">raise_softirq_irqoff</a>(<a class=\"id\" href=\"#SCHED_SOFTIRQ\">SCHED_SOFTIRQ</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#init_sched_softirq_csd\">init_sched_softirq_csd</a>(struct <a class=\"id\" href=\"#call_single_data\">call_single_data</a> *<a class=\"id\" href=\"#csd\">csd</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#csd\">csd</a>-><a class=\"id\" href=\"#func\">func</a> = <a class=\"id\" href=\"#trigger_sched_softirq\">trigger_sched_softirq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#csd\">csd</a>-><a class=\"id\" href=\"#info\">info</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#csd\">csd</a>-><a class=\"id\" href=\"#flags\">flags</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#csd\">csd</a>-><a class=\"id\" href=\"#priv\">priv</a> = 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * idle load balancing details</span>", 
"<span class=\"comment\"> * - One of the idle CPUs nominates itself as idle load_balancer, while</span>", 
"<span class=\"comment\"> *   entering idle.</span>", 
"<span class=\"comment\"> * - This idle load balancer CPU will also go into tickless mode when</span>", 
"<span class=\"comment\"> *   it is idle, just like all other idle CPUs</span>", 
"<span class=\"comment\"> * - When one of the busy CPUs notice that there may be an idle rebalancing</span>", 
"<span class=\"comment\"> *   needed, they will kick the idle load balancer, which then does idle</span>", 
"<span class=\"comment\"> *   load balancing for all the idle CPUs.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#load_balancer\">load_balancer</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#first_pick_cpu\">first_pick_cpu</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#second_pick_cpu\">second_pick_cpu</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> <a class=\"id\" href=\"#idle_cpus_mask\">idle_cpus_mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> <a class=\"id\" href=\"#grp_idle_mask\">grp_idle_mask</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#next_balance\">next_balance</a>;     <span class=\"comment\">/* in jiffy units */</span>", 
"} <a class=\"id\" href=\"#nohz\">nohz</a> <a class=\"id\" href=\"#____cacheline_aligned\">____cacheline_aligned</a>;", 
"", 
"int <a class=\"id\" href=\"#get_nohz_load_balancer\">get_nohz_load_balancer</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#nohz\">nohz</a>.<a class=\"id\" href=\"#load_balancer\">load_balancer</a>);", 
"}", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SCHED_MC\">CONFIG_SCHED_MC</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SCHED_SMT\">CONFIG_SCHED_SMT</a>)", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * lowest_flag_domain - Return lowest sched_domain containing flag.</span>", 
"<span class=\"comment\"> * @cpu:<span class=\"ts\"/>The cpu whose lowest level of sched domain is to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>be returned.</span>", 
"<span class=\"comment\"> * @flag:<span class=\"ts\"/>The flag to check for the lowest sched_domain</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>for the given cpu.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the lowest sched_domain of a cpu which contains the given flag.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#lowest_flag_domain\">lowest_flag_domain</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, int <a class=\"id\" href=\"#flag\">flag</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_domain\">for_each_domain</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#sd\">sd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sd\">sd</a> && (<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#flag\">flag</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sd\">sd</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * for_each_flag_domain - Iterates over sched_domains containing the flag.</span>", 
"<span class=\"comment\"> * @cpu:<span class=\"ts\"/>The cpu whose domains we're iterating over.</span>", 
"<span class=\"comment\"> * @sd:<span class=\"ts\"/><span class=\"ts\"/>variable holding the value of the power_savings_sd</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>for cpu.</span>", 
"<span class=\"comment\"> * @flag:<span class=\"ts\"/>The flag to filter the sched_domains to be iterated.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Iterates over all the scheduler domains for a given cpu that has the 'flag'</span>", 
"<span class=\"comment\"> * set, starting from the lowest sched_domain to the highest.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_flag_domain\">for_each_flag_domain</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#flag\">flag</a>) \\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#sd\">sd</a> = <a class=\"id\" href=\"#lowest_flag_domain\">lowest_flag_domain</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#flag\">flag</a>); \\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#sd\">sd</a> && (<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#flag\">flag</a>)); <a class=\"id\" href=\"#sd\">sd</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#parent\">parent</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * is_semi_idle_group - Checks if the given sched_group is semi-idle.</span>", 
"<span class=\"comment\"> * @ilb_group:<span class=\"ts\"/>group to be checked for semi-idleness</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns:<span class=\"ts\"/>1 if the group is semi-idle. 0 otherwise.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We define a sched_group to be semi idle if it has atleast one idle-CPU</span>", 
"<span class=\"comment\"> * and atleast one non-idle CPU. This helper function checks if the given</span>", 
"<span class=\"comment\"> * sched_group is semi-idle or not.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#is_semi_idle_group\">is_semi_idle_group</a>(struct <a class=\"id\" href=\"#sched_group\">sched_group</a> *<a class=\"id\" href=\"#ilb_group\">ilb_group</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_and\">cpumask_and</a>(<a class=\"id\" href=\"#nohz\">nohz</a>.<a class=\"id\" href=\"#grp_idle_mask\">grp_idle_mask</a>, <a class=\"id\" href=\"#nohz\">nohz</a>.<a class=\"id\" href=\"#idle_cpus_mask\">idle_cpus_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sched_group_cpus\">sched_group_cpus</a>(<a class=\"id\" href=\"#ilb_group\">ilb_group</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A sched_group is semi-idle when it has atleast one busy cpu</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and atleast one idle cpu.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_empty\">cpumask_empty</a>(<a class=\"id\" href=\"#nohz\">nohz</a>.<a class=\"id\" href=\"#grp_idle_mask\">grp_idle_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_equal\">cpumask_equal</a>(<a class=\"id\" href=\"#nohz\">nohz</a>.<a class=\"id\" href=\"#grp_idle_mask\">grp_idle_mask</a>, <a class=\"id\" href=\"#sched_group_cpus\">sched_group_cpus</a>(<a class=\"id\" href=\"#ilb_group\">ilb_group</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * find_new_ilb - Finds the optimum idle load balancer for nomination.</span>", 
"<span class=\"comment\"> * @cpu:<span class=\"ts\"/>The cpu which is nominating a new idle_load_balancer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns:<span class=\"ts\"/>Returns the id of the idle load balancer if it exists,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Else, returns &gt;= nr_cpu_ids.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This algorithm picks the idle load balancer such that it belongs to a</span>", 
"<span class=\"comment\"> * semi-idle powersavings sched_domain. The idea is to try and avoid</span>", 
"<span class=\"comment\"> * completely idle packages/cores just for the purpose of idle load balancing</span>", 
"<span class=\"comment\"> * when there are other idle cpu's which are better suited for that job.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#find_new_ilb\">find_new_ilb</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_group\">sched_group</a> *<a class=\"id\" href=\"#ilb_group\">ilb_group</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Have idle load balancer selection from semi-idle packages only</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * when power-aware load balancing is enabled</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#sched_smt_power_savings\">sched_smt_power_savings</a> || <a class=\"id\" href=\"#sched_mc_power_savings\">sched_mc_power_savings</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_done\">out_done</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Optimize for the case when we have no idle CPUs or only one</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * idle CPU. Don't walk the sched_domain hierarchy in such cases</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_weight\">cpumask_weight</a>(<a class=\"id\" href=\"#nohz\">nohz</a>.<a class=\"id\" href=\"#idle_cpus_mask\">idle_cpus_mask</a>) &lt; 2)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_done\">out_done</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_flag_domain\">for_each_flag_domain</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#SD_POWERSAVINGS_BALANCE\">SD_POWERSAVINGS_BALANCE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ilb_group\">ilb_group</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#groups\">groups</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_semi_idle_group\">is_semi_idle_group</a>(<a class=\"id\" href=\"#ilb_group\">ilb_group</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#cpumask_first\">cpumask_first</a>(<a class=\"id\" href=\"#nohz\">nohz</a>.<a class=\"id\" href=\"#grp_idle_mask\">grp_idle_mask</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ilb_group\">ilb_group</a> = <a class=\"id\" href=\"#ilb_group\">ilb_group</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>} while (<a class=\"id\" href=\"#ilb_group\">ilb_group</a> != <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#groups\">groups</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#out_done\">out_done</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>;", 
"}", 
"#else <span class=\"comment\">/*  (CONFIG_SCHED_MC || CONFIG_SCHED_SMT) */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#find_new_ilb\">find_new_ilb</a>(int <a class=\"id\" href=\"#call_cpu\">call_cpu</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Kick a CPU to do the nohz balancing, if it is time for it. We pick the</span>", 
"<span class=\"comment\"> * nohz_load_balancer CPU (if there is one) otherwise fallback to any idle</span>", 
"<span class=\"comment\"> * CPU (if there is one).</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#nohz_balancer_kick\">nohz_balancer_kick</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ilb_cpu\">ilb_cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nohz\">nohz</a>.<a class=\"id\" href=\"#next_balance\">next_balance</a>++;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ilb_cpu\">ilb_cpu</a> = <a class=\"id\" href=\"#get_nohz_load_balancer\">get_nohz_load_balancer</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ilb_cpu\">ilb_cpu</a> >= <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ilb_cpu\">ilb_cpu</a> = <a class=\"id\" href=\"#cpumask_first\">cpumask_first</a>(<a class=\"id\" href=\"#nohz\">nohz</a>.<a class=\"id\" href=\"#idle_cpus_mask\">idle_cpus_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ilb_cpu\">ilb_cpu</a> >= <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#ilb_cpu\">ilb_cpu</a>)-><a class=\"id\" href=\"#nohz_balance_kick\">nohz_balance_kick</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#call_single_data\">call_single_data</a> *<a class=\"id\" href=\"#cp\">cp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#ilb_cpu\">ilb_cpu</a>)-><a class=\"id\" href=\"#nohz_balance_kick\">nohz_balance_kick</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#remote_sched_softirq_cb\">remote_sched_softirq_cb</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__smp_call_function_single\">__smp_call_function_single</a>(<a class=\"id\" href=\"#ilb_cpu\">ilb_cpu</a>, <a class=\"id\" href=\"#cp\">cp</a>, 0);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This routine will try to nominate the ilb (idle load balancing)</span>", 
"<span class=\"comment\"> * owner among the cpus whose ticks are stopped. ilb owner will do the idle</span>", 
"<span class=\"comment\"> * load balancing on behalf of all those cpus.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When the ilb owner becomes busy, we will not have new ilb owner until some</span>", 
"<span class=\"comment\"> * idle CPU wakes up and goes back to idle or some busy CPU tries to kick</span>", 
"<span class=\"comment\"> * idle load balancing by kicking one of the idle CPUs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Ticks are stopped for the ilb owner as well, with busy CPU kicking this</span>", 
"<span class=\"comment\"> * ilb owner CPU in future (when there is a need for idle load balancing on</span>", 
"<span class=\"comment\"> * behalf of all idle CPUs).</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#select_nohz_load_balancer\">select_nohz_load_balancer</a>(int <a class=\"id\" href=\"#stop_tick\">stop_tick</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#stop_tick\">stop_tick</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpu_active\">cpu_active</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#nohz\">nohz</a>.<a class=\"id\" href=\"#load_balancer\">load_balancer</a>) != <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If we are going offline and still the leader,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * give up!</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_cmpxchg\">atomic_cmpxchg</a>(&amp;<a class=\"id\" href=\"#nohz\">nohz</a>.<a class=\"id\" href=\"#load_balancer\">load_balancer</a>, <a class=\"id\" href=\"#cpu\">cpu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>) != <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_set_cpu\">cpumask_set_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#nohz\">nohz</a>.<a class=\"id\" href=\"#idle_cpus_mask\">idle_cpus_mask</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#nohz\">nohz</a>.<a class=\"id\" href=\"#first_pick_cpu\">first_pick_cpu</a>) == <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_cmpxchg\">atomic_cmpxchg</a>(&amp;<a class=\"id\" href=\"#nohz\">nohz</a>.<a class=\"id\" href=\"#first_pick_cpu\">first_pick_cpu</a>, <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#nohz\">nohz</a>.<a class=\"id\" href=\"#second_pick_cpu\">second_pick_cpu</a>) == <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_cmpxchg\">atomic_cmpxchg</a>(&amp;<a class=\"id\" href=\"#nohz\">nohz</a>.<a class=\"id\" href=\"#second_pick_cpu\">second_pick_cpu</a>, <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#nohz\">nohz</a>.<a class=\"id\" href=\"#load_balancer\">load_balancer</a>) >= <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#new_ilb\">new_ilb</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* make me the ilb owner */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_cmpxchg\">atomic_cmpxchg</a>(&amp;<a class=\"id\" href=\"#nohz\">nohz</a>.<a class=\"id\" href=\"#load_balancer\">load_balancer</a>, <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#cpu\">cpu</a>) != <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Check to see if there is a more power-efficient</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * ilb.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_ilb\">new_ilb</a> = <a class=\"id\" href=\"#find_new_ilb\">find_new_ilb</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#new_ilb\">new_ilb</a> &lt; <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a> && <a class=\"id\" href=\"#new_ilb\">new_ilb</a> != <a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#nohz\">nohz</a>.<a class=\"id\" href=\"#load_balancer\">load_balancer</a>, <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#resched_cpu\">resched_cpu</a>(<a class=\"id\" href=\"#new_ilb\">new_ilb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#nohz\">nohz</a>.<a class=\"id\" href=\"#idle_cpus_mask\">idle_cpus_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear_cpu\">cpumask_clear_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#nohz\">nohz</a>.<a class=\"id\" href=\"#idle_cpus_mask\">idle_cpus_mask</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#nohz\">nohz</a>.<a class=\"id\" href=\"#load_balancer\">load_balancer</a>) == <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_cmpxchg\">atomic_cmpxchg</a>(&amp;<a class=\"id\" href=\"#nohz\">nohz</a>.<a class=\"id\" href=\"#load_balancer\">load_balancer</a>, <a class=\"id\" href=\"#cpu\">cpu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>) != <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#balancing\">balancing</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * It checks each scheduling domain to see if it is due to be balanced,</span>", 
"<span class=\"comment\"> * and initiates a balancing operation if so.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Balancing parameters are set up in arch_init_sched_domains.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#rebalance_domains\">rebalance_domains</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, enum <a class=\"id\" href=\"#cpu_idle_type\">cpu_idle_type</a> <a class=\"id\" href=\"#idle\">idle</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#balance\">balance</a> = 1;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#interval\">interval</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_domain\">sched_domain</a> *<a class=\"id\" href=\"#sd\">sd</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Earliest time when we have to do rebalance again */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#next_balance\">next_balance</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> + 60*<a class=\"id\" href=\"#HZ\">HZ</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#update_next_balance\">update_next_balance</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#need_serialize\">need_serialize</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_domain\">for_each_domain</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#sd\">sd</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SD_LOAD_BALANCE\">SD_LOAD_BALANCE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#interval\">interval</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#balance_interval\">balance_interval</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#idle\">idle</a> != <a class=\"id\" href=\"#CPU_IDLE\">CPU_IDLE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#interval\">interval</a> *= <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#busy_factor\">busy_factor</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* scale ms to jiffies */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#interval\">interval</a> = <a class=\"id\" href=\"#msecs_to_jiffies\">msecs_to_jiffies</a>(<a class=\"id\" href=\"#interval\">interval</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#interval\">interval</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#interval\">interval</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#interval\">interval</a> &gt; <a class=\"id\" href=\"#HZ\">HZ</a>*<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>/10)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#interval\">interval</a> = <a class=\"id\" href=\"#HZ\">HZ</a>*<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>/10;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#need_serialize\">need_serialize</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#SD_SERIALIZE\">SD_SERIALIZE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#need_serialize\">need_serialize</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#spin_trylock\">spin_trylock</a>(&amp;<a class=\"id\" href=\"#balancing\">balancing</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#time_after_eq\">time_after_eq</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#last_balance\">last_balance</a> + <a class=\"id\" href=\"#interval\">interval</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#load_balance\">load_balance</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#sd\">sd</a>, <a class=\"id\" href=\"#idle\">idle</a>, &amp;<a class=\"id\" href=\"#balance\">balance</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We've pulled tasks over so either we're no</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * longer idle, or one of our SMT siblings is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * not idle.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idle\">idle</a> = <a class=\"id\" href=\"#CPU_NOT_IDLE\">CPU_NOT_IDLE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#last_balance\">last_balance</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#need_serialize\">need_serialize</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#balancing\">balancing</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#time_after\">time_after</a>(<a class=\"id\" href=\"#next_balance\">next_balance</a>, <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#last_balance\">last_balance</a> + <a class=\"id\" href=\"#interval\">interval</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_balance\">next_balance</a> = <a class=\"id\" href=\"#sd\">sd</a>-><a class=\"id\" href=\"#last_balance\">last_balance</a> + <a class=\"id\" href=\"#interval\">interval</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_next_balance\">update_next_balance</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Stop the load balance at this level. There is another</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * CPU in our sched group which is doing load balancing more</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * actively.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#balance\">balance</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * next_balance will be updated only when there is a need.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * When the cpu is attached to null domain for ex, it will not be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * updated.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#update_next_balance\">update_next_balance</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#next_balance\">next_balance</a> = <a class=\"id\" href=\"#next_balance\">next_balance</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NO_HZ\">CONFIG_NO_HZ</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * In CONFIG_NO_HZ case, the idle balance kickee will do the</span>", 
"<span class=\"comment\"> * rebalancing for all the cpus for whom scheduler ticks are stopped.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#nohz_idle_balance\">nohz_idle_balance</a>(int <a class=\"id\" href=\"#this_cpu\">this_cpu</a>, enum <a class=\"id\" href=\"#cpu_idle_type\">cpu_idle_type</a> <a class=\"id\" href=\"#idle\">idle</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#this_rq\">this_rq</a> = <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#this_cpu\">this_cpu</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#balance_cpu\">balance_cpu</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#idle\">idle</a> != <a class=\"id\" href=\"#CPU_IDLE\">CPU_IDLE</a> || !<a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#nohz_balance_kick\">nohz_balance_kick</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>(<a class=\"id\" href=\"#balance_cpu\">balance_cpu</a>, <a class=\"id\" href=\"#nohz\">nohz</a>.<a class=\"id\" href=\"#idle_cpus_mask\">idle_cpus_mask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#balance_cpu\">balance_cpu</a> == <a class=\"id\" href=\"#this_cpu\">this_cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If this cpu gets work to do, stop the load balancing</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * work being done for other cpus. Next load</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * balancing owner will pick it up.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#need_resched\">need_resched</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#nohz_balance_kick\">nohz_balance_kick</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irq\">raw_spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_rq_clock\">update_rq_clock</a>(<a class=\"id\" href=\"#this_rq\">this_rq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_cpu_load\">update_cpu_load</a>(<a class=\"id\" href=\"#this_rq\">this_rq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irq\">raw_spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rebalance_domains\">rebalance_domains</a>(<a class=\"id\" href=\"#balance_cpu\">balance_cpu</a>, <a class=\"id\" href=\"#CPU_IDLE\">CPU_IDLE</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#balance_cpu\">balance_cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#time_after\">time_after</a>(<a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#next_balance\">next_balance</a>, <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#next_balance\">next_balance</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#next_balance\">next_balance</a> = <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#next_balance\">next_balance</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nohz\">nohz</a>.<a class=\"id\" href=\"#next_balance\">next_balance</a> = <a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#next_balance\">next_balance</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#nohz_balance_kick\">nohz_balance_kick</a> = 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Current heuristic for kicking the idle load balancer</span>", 
"<span class=\"comment\"> * - first_pick_cpu is the one of the busy CPUs. It will kick</span>", 
"<span class=\"comment\"> *   idle load balancer when it has more than one process active. This</span>", 
"<span class=\"comment\"> *   eliminates the need for idle load balancing altogether when we have</span>", 
"<span class=\"comment\"> *   only one running process in the system (common case).</span>", 
"<span class=\"comment\"> * - If there are more than one busy CPU, idle load balancer may have</span>", 
"<span class=\"comment\"> *   to run for active_load_balance to happen (i.e., two busy CPUs are</span>", 
"<span class=\"comment\"> *   SMT or core siblings and can run better if they move to different</span>", 
"<span class=\"comment\"> *   physical CPUs). So, second_pick_cpu is the second of the busy CPUs</span>", 
"<span class=\"comment\"> *   which will kick idle load balancer as soon as it has any load.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#nohz_kick_needed\">nohz_kick_needed</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#first_pick_cpu\">first_pick_cpu</a>, <a class=\"id\" href=\"#second_pick_cpu\">second_pick_cpu</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#time_before\">time_before</a>(<a class=\"id\" href=\"#now\">now</a>, <a class=\"id\" href=\"#nohz\">nohz</a>.<a class=\"id\" href=\"#next_balance\">next_balance</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#idle_at_tick\">idle_at_tick</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#first_pick_cpu\">first_pick_cpu</a> = <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#nohz\">nohz</a>.<a class=\"id\" href=\"#first_pick_cpu\">first_pick_cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#second_pick_cpu\">second_pick_cpu</a> = <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#nohz\">nohz</a>.<a class=\"id\" href=\"#second_pick_cpu\">second_pick_cpu</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#first_pick_cpu\">first_pick_cpu</a> &lt; <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a> && <a class=\"id\" href=\"#first_pick_cpu\">first_pick_cpu</a> != <a class=\"id\" href=\"#cpu\">cpu</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#second_pick_cpu\">second_pick_cpu</a> &lt; <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a> && <a class=\"id\" href=\"#second_pick_cpu\">second_pick_cpu</a> != <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#atomic_cmpxchg\">atomic_cmpxchg</a>(&amp;<a class=\"id\" href=\"#nohz\">nohz</a>.<a class=\"id\" href=\"#first_pick_cpu\">first_pick_cpu</a>, <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a> || <a class=\"id\" href=\"#ret\">ret</a> == <a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_cmpxchg\">atomic_cmpxchg</a>(&amp;<a class=\"id\" href=\"#nohz\">nohz</a>.<a class=\"id\" href=\"#second_pick_cpu\">second_pick_cpu</a>, <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#nr_running\">nr_running</a> &gt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#atomic_cmpxchg\">atomic_cmpxchg</a>(&amp;<a class=\"id\" href=\"#nohz\">nohz</a>.<a class=\"id\" href=\"#second_pick_cpu\">second_pick_cpu</a>, <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a> || <a class=\"id\" href=\"#ret\">ret</a> == <a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#nr_running\">nr_running</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#else", 
"static void <a class=\"id\" href=\"#nohz_idle_balance\">nohz_idle_balance</a>(int <a class=\"id\" href=\"#this_cpu\">this_cpu</a>, enum <a class=\"id\" href=\"#cpu_idle_type\">cpu_idle_type</a> <a class=\"id\" href=\"#idle\">idle</a>) { }", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * run_rebalance_domains is triggered when needed from the scheduler tick.</span>", 
"<span class=\"comment\"> * Also triggered for nohz idle balancing (with nohz_balancing_kick set).</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#run_rebalance_domains\">run_rebalance_domains</a>(struct <a class=\"id\" href=\"#softirq_action\">softirq_action</a> *<a class=\"id\" href=\"#h\">h</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#this_cpu\">this_cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#this_rq\">this_rq</a> = <a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#this_cpu\">this_cpu</a>);", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#cpu_idle_type\">cpu_idle_type</a> <a class=\"id\" href=\"#idle\">idle</a> = <a class=\"id\" href=\"#this_rq\">this_rq</a>-><a class=\"id\" href=\"#idle_at_tick\">idle_at_tick</a> ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#CPU_IDLE\">CPU_IDLE</a> : <a class=\"id\" href=\"#CPU_NOT_IDLE\">CPU_NOT_IDLE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rebalance_domains\">rebalance_domains</a>(<a class=\"id\" href=\"#this_cpu\">this_cpu</a>, <a class=\"id\" href=\"#idle\">idle</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this cpu has a pending nohz_balance_kick, then do the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * balancing on behalf of the other idle cpus whose ticks are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * stopped.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nohz_idle_balance\">nohz_idle_balance</a>(<a class=\"id\" href=\"#this_cpu\">this_cpu</a>, <a class=\"id\" href=\"#idle\">idle</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#on_null_domain\">on_null_domain</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#rcu_dereference_sched\">rcu_dereference_sched</a>(<a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)-><a class=\"id\" href=\"#sd\">sd</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Trigger the SCHED_SOFTIRQ if it is time to do periodic load balancing.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#trigger_load_balance\">trigger_load_balance</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't need to rebalance while attached to NULL domain */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#time_after_eq\">time_after_eq</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#next_balance\">next_balance</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#on_null_domain\">on_null_domain</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raise_softirq\">raise_softirq</a>(<a class=\"id\" href=\"#SCHED_SOFTIRQ\">SCHED_SOFTIRQ</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NO_HZ\">CONFIG_NO_HZ</a>", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#nohz_kick_needed\">nohz_kick_needed</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) && <a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#on_null_domain\">on_null_domain</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nohz_balancer_kick\">nohz_balancer_kick</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static void <a class=\"id\" href=\"#rq_online_fair\">rq_online_fair</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_sysctl\">update_sysctl</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#rq_offline_fair\">rq_offline_fair</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_sysctl\">update_sysctl</a>();", 
"}", 
"", 
"#else<span class=\"ts\"/><span class=\"comment\">/* CONFIG_SMP */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * on UP we do not need to balance between CPUs:</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#idle_balance\">idle_balance</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_SMP */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * scheduler tick hitting a task of our scheduling class:</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#task_tick_fair\">task_tick_fair</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#curr\">curr</a>, int <a class=\"id\" href=\"#queued\">queued</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a> = &amp;<a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#se\">se</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_sched_entity\">for_each_sched_entity</a>(<a class=\"id\" href=\"#se\">se</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> = <a class=\"id\" href=\"#cfs_rq_of\">cfs_rq_of</a>(<a class=\"id\" href=\"#se\">se</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entity_tick\">entity_tick</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, <a class=\"id\" href=\"#se\">se</a>, <a class=\"id\" href=\"#queued\">queued</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * called on fork with the child task as argument from the parent's context</span>", 
"<span class=\"comment\"> *  - child not yet on the tasklist</span>", 
"<span class=\"comment\"> *  - preemption disabled</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#task_fork_fair\">task_fork_fair</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> = <a class=\"id\" href=\"#task_cfs_rq\">task_cfs_rq</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a> = &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>, *<a class=\"id\" href=\"#curr\">curr</a> = <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#curr\">curr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#this_cpu\">this_cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#this_rq\">this_rq</a>();", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_rq_clock\">update_rq_clock</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#task_cpu\">task_cpu</a>(<a class=\"id\" href=\"#p\">p</a>) != <a class=\"id\" href=\"#this_cpu\">this_cpu</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_task_cpu\">__set_task_cpu</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#this_cpu\">this_cpu</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_curr\">update_curr</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#curr\">curr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#vruntime\">vruntime</a> = <a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#vruntime\">vruntime</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#place_entity\">place_entity</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, <a class=\"id\" href=\"#se\">se</a>, 1);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sysctl_sched_child_runs_first\">sysctl_sched_child_runs_first</a> && <a class=\"id\" href=\"#curr\">curr</a> && <a class=\"id\" href=\"#entity_before\">entity_before</a>(<a class=\"id\" href=\"#curr\">curr</a>, <a class=\"id\" href=\"#se\">se</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Upon rescheduling, sched_class::put_prev_task() will place</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * 'current' within the tree based on its new key value.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swap\">swap</a>(<a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#vruntime\">vruntime</a>, <a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#vruntime\">vruntime</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#resched_task\">resched_task</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#curr\">curr</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#se\">se</a>-><a class=\"id\" href=\"#vruntime\">vruntime</a> -= <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>-><a class=\"id\" href=\"#min_vruntime\">min_vruntime</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Priority of the task has changed. Check to see if we preempt</span>", 
"<span class=\"comment\"> * the current task.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#prio_changed_fair\">prio_changed_fair</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#oldprio\">oldprio</a>, int <a class=\"id\" href=\"#running\">running</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Reschedule if we are currently running on this runqueue and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * our priority decreased, or if we are not currently running on</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this runqueue and our priority is higher than the current's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#running\">running</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#prio\">prio</a> &gt; <a class=\"id\" href=\"#oldprio\">oldprio</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#resched_task\">resched_task</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#curr\">curr</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#check_preempt_curr\">check_preempt_curr</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>, 0);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We switched to the sched_fair class.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#switched_to_fair\">switched_to_fair</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#running\">running</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We were most likely switched from sched_rt, so</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * kick off the schedule if running, otherwise just see</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if we can still preempt the current task.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#running\">running</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#resched_task\">resched_task</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#curr\">curr</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#check_preempt_curr\">check_preempt_curr</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#p\">p</a>, 0);", 
"}", 
"", 
"<span class=\"comment\">/* Account for a task changing its policy or group.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This routine is mostly called to set cfs_rq-&gt;curr field when a task</span>", 
"<span class=\"comment\"> * migrates between groups/classes.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#set_curr_task_fair\">set_curr_task_fair</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a> = &amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#se\">se</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_sched_entity\">for_each_sched_entity</a>(<a class=\"id\" href=\"#se\">se</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_next_entity\">set_next_entity</a>(<a class=\"id\" href=\"#cfs_rq_of\">cfs_rq_of</a>(<a class=\"id\" href=\"#se\">se</a>), <a class=\"id\" href=\"#se\">se</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FAIR_GROUP_SCHED\">CONFIG_FAIR_GROUP_SCHED</a>", 
"static void <a class=\"id\" href=\"#moved_group_fair\">moved_group_fair</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#on_rq\">on_rq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> = <a class=\"id\" href=\"#task_cfs_rq\">task_cfs_rq</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_curr\">update_curr</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#on_rq\">on_rq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#place_entity\">place_entity</a>(<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>, &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#se\">se</a>, 1);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static unsigned int <a class=\"id\" href=\"#get_rr_interval_fair\">get_rr_interval_fair</a>(struct <a class=\"id\" href=\"#rq\">rq</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_entity\">sched_entity</a> *<a class=\"id\" href=\"#se\">se</a> = &amp;<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#se\">se</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#rr_interval\">rr_interval</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Time slice is 0 for SCHED_OTHER tasks that are on an otherwise</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * idle runqueue:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cfs\">cfs</a>.<a class=\"id\" href=\"#load\">load</a>.<a class=\"id\" href=\"#weight\">weight</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rr_interval\">rr_interval</a> = <a class=\"id\" href=\"#NS_TO_JIFFIES\">NS_TO_JIFFIES</a>(<a class=\"id\" href=\"#sched_slice\">sched_slice</a>(&amp;<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cfs\">cfs</a>, <a class=\"id\" href=\"#se\">se</a>));", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rr_interval\">rr_interval</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * All the scheduling class methods:</span>", 
"<span class=\"comment\"> */</span>", 
"static const struct <a class=\"id\" href=\"#sched_class\">sched_class</a> <a class=\"id\" href=\"#fair_sched_class\">fair_sched_class</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#next\">next</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#idle_sched_class\">idle_sched_class</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#enqueue_task\">enqueue_task</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#enqueue_task_fair\">enqueue_task_fair</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#dequeue_task\">dequeue_task</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#dequeue_task_fair\">dequeue_task_fair</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#yield_task\">yield_task</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#yield_task_fair\">yield_task_fair</a>,", 
"", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#check_preempt_curr\">check_preempt_curr</a><span class=\"ts\"/>= <a class=\"id\" href=\"#check_preempt_wakeup\">check_preempt_wakeup</a>,", 
"", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#pick_next_task\">pick_next_task</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#pick_next_task_fair\">pick_next_task_fair</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#put_prev_task\">put_prev_task</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#put_prev_task_fair\">put_prev_task_fair</a>,", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#select_task_rq\">select_task_rq</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#select_task_rq_fair\">select_task_rq_fair</a>,", 
"", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#rq_online\">rq_online</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#rq_online_fair\">rq_online_fair</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#rq_offline\">rq_offline</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#rq_offline_fair\">rq_offline_fair</a>,", 
"", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#task_waking\">task_waking</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#task_waking_fair\">task_waking_fair</a>,", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#set_curr_task\">set_curr_task</a>          = <a class=\"id\" href=\"#set_curr_task_fair\">set_curr_task_fair</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#task_tick\">task_tick</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#task_tick_fair\">task_tick_fair</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#task_fork\">task_fork</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#task_fork_fair\">task_fork_fair</a>,", 
"", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#prio_changed\">prio_changed</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#prio_changed_fair\">prio_changed_fair</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#switched_to\">switched_to</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#switched_to_fair\">switched_to_fair</a>,", 
"", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#get_rr_interval\">get_rr_interval</a><span class=\"ts\"/>= <a class=\"id\" href=\"#get_rr_interval_fair\">get_rr_interval_fair</a>,", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FAIR_GROUP_SCHED\">CONFIG_FAIR_GROUP_SCHED</a>", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#moved_group\">moved_group</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#moved_group_fair\">moved_group_fair</a>,", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHED_DEBUG\">CONFIG_SCHED_DEBUG</a>", 
"static void <a class=\"id\" href=\"#print_cfs_stats\">print_cfs_stats</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_leaf_cfs_rq\">for_each_leaf_cfs_rq</a>(<a class=\"id\" href=\"#cpu_rq\">cpu_rq</a>(<a class=\"id\" href=\"#cpu\">cpu</a>), <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print_cfs_rq\">print_cfs_rq</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/0c/f74829cf11d4d73f29945aaf5a5a5f33662245.xr', __xr_tmp);
