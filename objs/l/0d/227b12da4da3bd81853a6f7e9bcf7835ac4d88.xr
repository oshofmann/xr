var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * drivers/base/power/trace.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2006 Linus Torvalds</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Trace facility for suspend/resume problems, when none of the</span>", 
"<span class=\"comment\"> * devices may be working.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#resume\">resume</a>-<a class=\"id\" href=\"#trace\">trace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rtc\">rtc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#rtc\">rtc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"power.h\"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Horrid, horrid, horrid.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It turns out that the _only_ piece of hardware that actually</span>", 
"<span class=\"comment\"> * keeps its value across a hard boot (and, more importantly, the</span>", 
"<span class=\"comment\"> * POST init sequence) is literally the realtime clock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Never mind that an RTC chip has 114 bytes (and often a whole</span>", 
"<span class=\"comment\"> * other bank of an additional 128 bytes) of nice SRAM that is</span>", 
"<span class=\"comment\"> * _designed_ to keep data - the POST will clear it. So we literally</span>", 
"<span class=\"comment\"> * can just use the few bytes of actual time data, which means that</span>", 
"<span class=\"comment\"> * we're really limited.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It means, for example, that we can't use the seconds at all</span>", 
"<span class=\"comment\"> * (since the time between the hang and the boot might be more</span>", 
"<span class=\"comment\"> * than a minute), and we'd better not depend on the low bits of</span>", 
"<span class=\"comment\"> * the minutes either.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * There are the wday fields etc, but I wouldn't guarantee those</span>", 
"<span class=\"comment\"> * are dependable either. And if the date isn't valid, either the</span>", 
"<span class=\"comment\"> * hw or POST will do strange things.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * So we're left with:</span>", 
"<span class=\"comment\"> *  - year: 0-99</span>", 
"<span class=\"comment\"> *  - month: 0-11</span>", 
"<span class=\"comment\"> *  - day-of-month: 1-28</span>", 
"<span class=\"comment\"> *  - hour: 0-23</span>", 
"<span class=\"comment\"> *  - min: (0-30)*2</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Giving us a total range of 0-16128000 (0xf61800), ie less</span>", 
"<span class=\"comment\"> * than 24 bits of actual data we can save across reboots.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * And if your box can't boot in less than three minutes,</span>", 
"<span class=\"comment\"> * you're screwed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Now, almost 24 bits of data is pitifully small, so we need</span>", 
"<span class=\"comment\"> * to be pretty dense if we want to use it for anything nice.</span>", 
"<span class=\"comment\"> * What we do is that instead of saving off nice readable info,</span>", 
"<span class=\"comment\"> * we save off _hashes_ of information that we can hopefully</span>", 
"<span class=\"comment\"> * regenerate after the reboot.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In particular, this means that we might be unlucky, and hit</span>", 
"<span class=\"comment\"> * a case where we have a hash collision, and we end up not</span>", 
"<span class=\"comment\"> * being able to tell for certain exactly which case happened.</span>", 
"<span class=\"comment\"> * But that's hopefully unlikely.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * What we do is to take the bits we can fit, and split them</span>", 
"<span class=\"comment\"> * into three parts (16*997*1009 = 16095568), and use the values</span>", 
"<span class=\"comment\"> * for:</span>", 
"<span class=\"comment\"> *  - 0-15: user-settable</span>", 
"<span class=\"comment\"> *  - 0-996: file + line number</span>", 
"<span class=\"comment\"> *  - 0-1008: device</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#USERHASH\">USERHASH</a> (16)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FILEHASH\">FILEHASH</a> (997)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEVHASH\">DEVHASH</a> (1009)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEVSEED\">DEVSEED</a> (7919)", 
"", 
"static unsigned int <a class=\"id\" href=\"#dev_hash_value\">dev_hash_value</a>;", 
"", 
"static int <a class=\"id\" href=\"#set_magic_time\">set_magic_time</a>(unsigned int <a class=\"id\" href=\"#user\">user</a>, unsigned int <a class=\"id\" href=\"#file\">file</a>, unsigned int <a class=\"id\" href=\"#device\">device</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#user\">user</a> + <a class=\"id\" href=\"#USERHASH\">USERHASH</a>*(<a class=\"id\" href=\"#file\">file</a> + <a class=\"id\" href=\"#FILEHASH\">FILEHASH</a>*<a class=\"id\" href=\"#device\">device</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">// June 7th, 2006</span>", 
"<span class=\"ts\"/>static struct <a class=\"id\" href=\"#rtc_time\">rtc_time</a> <a class=\"id\" href=\"#time\">time</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#tm_sec\">tm_sec</a> = 0,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#tm_min\">tm_min</a> = 0,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#tm_hour\">tm_hour</a> = 0,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#tm_mday\">tm_mday</a> = 7,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#tm_mon\">tm_mon</a> = 5,<span class=\"ts\"/><span class=\"comment\">// June - counting from zero</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#tm_year\">tm_year</a> = 106,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#tm_wday\">tm_wday</a> = 3,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#tm_yday\">tm_yday</a> = 160,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#tm_isdst\">tm_isdst</a> = 1", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#time\">time</a>.<a class=\"id\" href=\"#tm_year\">tm_year</a> = (<a class=\"id\" href=\"#n\">n</a> % 100);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> /= 100;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#time\">time</a>.<a class=\"id\" href=\"#tm_mon\">tm_mon</a> = (<a class=\"id\" href=\"#n\">n</a> % 12);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> /= 12;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#time\">time</a>.<a class=\"id\" href=\"#tm_mday\">tm_mday</a> = (<a class=\"id\" href=\"#n\">n</a> % 28) + 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> /= 28;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#time\">time</a>.<a class=\"id\" href=\"#tm_hour\">tm_hour</a> = (<a class=\"id\" href=\"#n\">n</a> % 24);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> /= 24;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#time\">time</a>.<a class=\"id\" href=\"#tm_min\">tm_min</a> = (<a class=\"id\" href=\"#n\">n</a> % 20) * 3;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> /= 20;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_rtc_time\">set_rtc_time</a>(&amp;<a class=\"id\" href=\"#time\">time</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#n\">n</a> ? -1 : 0;", 
"}", 
"", 
"static unsigned int <a class=\"id\" href=\"#read_magic_time\">read_magic_time</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rtc_time\">rtc_time</a> <a class=\"id\" href=\"#time\">time</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#val\">val</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_rtc_time\">get_rtc_time</a>(&amp;<a class=\"id\" href=\"#time\">time</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"Time: %2d:%02d:%02d  Date: %02d/%02d/%02d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#time\">time</a>.<a class=\"id\" href=\"#tm_hour\">tm_hour</a>, <a class=\"id\" href=\"#time\">time</a>.<a class=\"id\" href=\"#tm_min\">tm_min</a>, <a class=\"id\" href=\"#time\">time</a>.<a class=\"id\" href=\"#tm_sec\">tm_sec</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#time\">time</a>.<a class=\"id\" href=\"#tm_mon\">tm_mon</a> + 1, <a class=\"id\" href=\"#time\">time</a>.<a class=\"id\" href=\"#tm_mday\">tm_mday</a>, <a class=\"id\" href=\"#time\">time</a>.<a class=\"id\" href=\"#tm_year\">tm_year</a> % 100);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#time\">time</a>.<a class=\"id\" href=\"#tm_year\">tm_year</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 100 years */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a> &gt; 100)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> -= 100;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> += <a class=\"id\" href=\"#time\">time</a>.<a class=\"id\" href=\"#tm_mon\">tm_mon</a> * 100;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 12 months */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> += (<a class=\"id\" href=\"#time\">time</a>.<a class=\"id\" href=\"#tm_mday\">tm_mday</a>-1) * 100 * 12;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 28 month-days */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> += <a class=\"id\" href=\"#time\">time</a>.<a class=\"id\" href=\"#tm_hour\">tm_hour</a> * 100 * 12 * 28;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 24 hours */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> += (<a class=\"id\" href=\"#time\">time</a>.<a class=\"id\" href=\"#tm_min\">tm_min</a> / 3) * 100 * 12 * 28 * 24;<span class=\"ts\"/><span class=\"comment\">/* 20 3-minute intervals */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#val\">val</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is just the sdbm hash function with a user-supplied</span>", 
"<span class=\"comment\"> * seed and final size parameter.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned int <a class=\"id\" href=\"#hash_string\">hash_string</a>(unsigned int <a class=\"id\" href=\"#seed\">seed</a>, const char *<a class=\"id\" href=\"#data\">data</a>, unsigned int <a class=\"id\" href=\"#mod\">mod</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#c\">c</a> = *<a class=\"id\" href=\"#data\">data</a>++) != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seed\">seed</a> = (<a class=\"id\" href=\"#seed\">seed</a> << 16) + (<a class=\"id\" href=\"#seed\">seed</a> << 6) - <a class=\"id\" href=\"#seed\">seed</a> + <a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seed\">seed</a> % <a class=\"id\" href=\"#mod\">mod</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#set_trace_device\">set_trace_device</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_hash_value\">dev_hash_value</a> = <a class=\"id\" href=\"#hash_string\">hash_string</a>(<a class=\"id\" href=\"#DEVSEED\">DEVSEED</a>, <a class=\"id\" href=\"#dev_name\">dev_name</a>(<a class=\"id\" href=\"#dev\">dev</a>), <a class=\"id\" href=\"#DEVHASH\">DEVHASH</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#set_trace_device\">set_trace_device</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We could just take the \"tracedata\" index into the .tracedata</span>", 
"<span class=\"comment\"> * section instead. Generating a hash of the data gives us a</span>", 
"<span class=\"comment\"> * chance to work across kernel versions, and perhaps more</span>", 
"<span class=\"comment\"> * importantly it also gives us valid/invalid check (ie we will</span>", 
"<span class=\"comment\"> * likely not give totally bogus reports - if the hash matches,</span>", 
"<span class=\"comment\"> * it's not any guarantee, but it's a high _likelihood_ that</span>", 
"<span class=\"comment\"> * the match is valid).</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#generate_resume_trace\">generate_resume_trace</a>(const void *<a class=\"id\" href=\"#tracedata\">tracedata</a>, unsigned int <a class=\"id\" href=\"#user\">user</a>)", 
"{", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#lineno\">lineno</a> = *(unsigned short *)<a class=\"id\" href=\"#tracedata\">tracedata</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#file\">file</a> = *(const char **)(<a class=\"id\" href=\"#tracedata\">tracedata</a> + 2);", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#user_hash_value\">user_hash_value</a>, <a class=\"id\" href=\"#file_hash_value\">file_hash_value</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#user_hash_value\">user_hash_value</a> = <a class=\"id\" href=\"#user\">user</a> % <a class=\"id\" href=\"#USERHASH\">USERHASH</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file_hash_value\">file_hash_value</a> = <a class=\"id\" href=\"#hash_string\">hash_string</a>(<a class=\"id\" href=\"#lineno\">lineno</a>, <a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#FILEHASH\">FILEHASH</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_magic_time\">set_magic_time</a>(<a class=\"id\" href=\"#user_hash_value\">user_hash_value</a>, <a class=\"id\" href=\"#file_hash_value\">file_hash_value</a>, <a class=\"id\" href=\"#dev_hash_value\">dev_hash_value</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#generate_resume_trace\">generate_resume_trace</a>);", 
"", 
"extern char <a class=\"id\" href=\"#__tracedata_start\">__tracedata_start</a>, <a class=\"id\" href=\"#__tracedata_end\">__tracedata_end</a>;", 
"static int <a class=\"id\" href=\"#show_file_hash\">show_file_hash</a>(unsigned int <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#match\">match</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#tracedata\">tracedata</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#match\">match</a> = 0;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#tracedata\">tracedata</a> = &amp;<a class=\"id\" href=\"#__tracedata_start\">__tracedata_start</a> ; <a class=\"id\" href=\"#tracedata\">tracedata</a> &lt; &amp;<a class=\"id\" href=\"#__tracedata_end\">__tracedata_end</a> ;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tracedata\">tracedata</a> += 2 + sizeof(unsigned long)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#lineno\">lineno</a> = *(unsigned short *)<a class=\"id\" href=\"#tracedata\">tracedata</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#file\">file</a> = *(const char **)(<a class=\"id\" href=\"#tracedata\">tracedata</a> + 2);", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#hash_string\">hash_string</a>(<a class=\"id\" href=\"#lineno\">lineno</a>, <a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#FILEHASH\">FILEHASH</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hash\">hash</a> != <a class=\"id\" href=\"#value\">value</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"  hash matches %s:%u\\n\", <a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#lineno\">lineno</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#match\">match</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#match\">match</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#show_dev_hash\">show_dev_hash</a>(unsigned int <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#match\">match</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#dpm_list\">dpm_list</a>.<a class=\"id\" href=\"#prev\">prev</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#entry\">entry</a> != &amp;<a class=\"id\" href=\"#dpm_list\">dpm_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> * <a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#to_device\">to_device</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#hash_string\">hash_string</a>(<a class=\"id\" href=\"#DEVSEED\">DEVSEED</a>, <a class=\"id\" href=\"#dev_name\">dev_name</a>(<a class=\"id\" href=\"#dev\">dev</a>), <a class=\"id\" href=\"#DEVHASH\">DEVHASH</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hash\">hash</a> == <a class=\"id\" href=\"#value\">value</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(<a class=\"id\" href=\"#dev\">dev</a>, \"hash matches\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#match\">match</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#match\">match</a>;", 
"}", 
"", 
"static unsigned int <a class=\"id\" href=\"#hash_value_early_read\">hash_value_early_read</a>;", 
"", 
"static int <a class=\"id\" href=\"#early_resume_init\">early_resume_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hash_value_early_read\">hash_value_early_read</a> = <a class=\"id\" href=\"#read_magic_time\">read_magic_time</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#late_resume_init\">late_resume_init</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#hash_value_early_read\">hash_value_early_read</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#user\">user</a>, <a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#user\">user</a> = <a class=\"id\" href=\"#val\">val</a> % <a class=\"id\" href=\"#USERHASH\">USERHASH</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#val\">val</a> / <a class=\"id\" href=\"#USERHASH\">USERHASH</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#val\">val</a> % <a class=\"id\" href=\"#FILEHASH\">FILEHASH</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#val\">val</a> / <a class=\"id\" href=\"#FILEHASH\">FILEHASH</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#val\">val</a> <span class=\"comment\">/* % DEVHASH */</span>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"  Magic number: %d:%d:%d\\n\", <a class=\"id\" href=\"#user\">user</a>, <a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#show_file_hash\">show_file_hash</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#show_dev_hash\">show_dev_hash</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#core_initcall\">core_initcall</a>(<a class=\"id\" href=\"#early_resume_init\">early_resume_init</a>);", 
"<a class=\"id\" href=\"#late_initcall\">late_initcall</a>(<a class=\"id\" href=\"#late_resume_init\">late_resume_init</a>);", 
];
xr_frag_insert('l/0d/227b12da4da3bd81853a6f7e9bcf7835ac4d88.xr', __xr_tmp);
