var __xr_tmp = [
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_count\">pa_count</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pa\">pa</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * search goal blocks in preallocated space</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#noinline_for_stack\">noinline_for_stack</a> int", 
"<a class=\"id\" href=\"#ext4_mb_use_preallocated\">ext4_mb_use_preallocated</a>(struct <a class=\"id\" href=\"#ext4_allocation_context\">ext4_allocation_context</a> *<a class=\"id\" href=\"#ac\">ac</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_inode_info\">ext4_inode_info</a> *<a class=\"id\" href=\"#ei\">ei</a> = <a class=\"id\" href=\"#EXT4_I\">EXT4_I</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_inode\">ac_inode</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_locality_group\">ext4_locality_group</a> *<a class=\"id\" href=\"#lg\">lg</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_prealloc_space\">ext4_prealloc_space</a> *<a class=\"id\" href=\"#pa\">pa</a>, *<a class=\"id\" href=\"#cpa\">cpa</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#goal_block\">goal_block</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* only data can be preallocated */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_flags\">ac_flags</a> &amp; <a class=\"id\" href=\"#EXT4_MB_HINT_DATA\">EXT4_MB_HINT_DATA</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* first, try per-file preallocation */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#pa\">pa</a>, &amp;<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_prealloc_list\">i_prealloc_list</a>, <a class=\"id\" href=\"#pa_inode_list\">pa_inode_list</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* all fields in this condition don't change,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * so we can skip locking for them */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_o_ex\">ac_o_ex</a>.<a class=\"id\" href=\"#fe_logical\">fe_logical</a> &lt; <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lstart\">pa_lstart</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_o_ex\">ac_o_ex</a>.<a class=\"id\" href=\"#fe_logical\">fe_logical</a> >= <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lstart\">pa_lstart</a> + <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_len\">pa_len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* non-extent files can't have physical blocks past 2^32 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#ext4_test_inode_flag\">ext4_test_inode_flag</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_inode\">ac_inode</a>, <a class=\"id\" href=\"#EXT4_INODE_EXTENTS\">EXT4_INODE_EXTENTS</a>)) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_pstart\">pa_pstart</a> + <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_len\">pa_len</a> &gt; <a class=\"id\" href=\"#EXT4_MAX_BLOCK_FILE_PHYS\">EXT4_MAX_BLOCK_FILE_PHYS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* found preallocated blocks, use them */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lock\">pa_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_deleted\">pa_deleted</a> == 0 && <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_free\">pa_free</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_count\">pa_count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_mb_use_inode_pa\">ext4_mb_use_inode_pa</a>(<a class=\"id\" href=\"#ac\">ac</a>, <a class=\"id\" href=\"#pa\">pa</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lock\">pa_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_criteria\">ac_criteria</a> = 10;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lock\">pa_lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* can we use group allocation? */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_flags\">ac_flags</a> &amp; <a class=\"id\" href=\"#EXT4_MB_HINT_GROUP_ALLOC\">EXT4_MB_HINT_GROUP_ALLOC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* inode may have no locality group for some reason */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lg\">lg</a> = <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_lg\">ac_lg</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#lg\">lg</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#order\">order</a>  = <a class=\"id\" href=\"#fls\">fls</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_o_ex\">ac_o_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a>) - 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#order\">order</a> &gt; <a class=\"id\" href=\"#PREALLOC_TB_SIZE\">PREALLOC_TB_SIZE</a> - 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The max size of hash table is PREALLOC_TB_SIZE */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#order\">order</a> = <a class=\"id\" href=\"#PREALLOC_TB_SIZE\">PREALLOC_TB_SIZE</a> - 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#goal_block\">goal_block</a> = <a class=\"id\" href=\"#ext4_grp_offs_to_block\">ext4_grp_offs_to_block</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_sb\">ac_sb</a>, &amp;<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_g_ex\">ac_g_ex</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * search for the prealloc space that is having</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * minimal distance from the goal block.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#order\">order</a>; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#PREALLOC_TB_SIZE\">PREALLOC_TB_SIZE</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#pa\">pa</a>, &amp;<a class=\"id\" href=\"#lg\">lg</a>-><a class=\"id\" href=\"#lg_prealloc_list\">lg_prealloc_list</a>[<a class=\"id\" href=\"#i\">i</a>],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pa_inode_list\">pa_inode_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lock\">pa_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_deleted\">pa_deleted</a> == 0 &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_free\">pa_free</a> >= <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_o_ex\">ac_o_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpa\">cpa</a> = <a class=\"id\" href=\"#ext4_mb_check_group_pa\">ext4_mb_check_group_pa</a>(<a class=\"id\" href=\"#goal_block\">goal_block</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pa\">pa</a>, <a class=\"id\" href=\"#cpa\">cpa</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lock\">pa_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpa\">cpa</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_mb_use_group_pa\">ext4_mb_use_group_pa</a>(<a class=\"id\" href=\"#ac\">ac</a>, <a class=\"id\" href=\"#cpa\">cpa</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_criteria\">ac_criteria</a> = 20;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * the function goes through all block freed in the group</span>", 
"<span class=\"comment\"> * but not yet committed and marks them used in in-core bitmap.</span>", 
"<span class=\"comment\"> * buddy must be generated from this bitmap</span>", 
"<span class=\"comment\"> * Need to be called with the ext4 group lock held</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ext4_mb_generate_from_freelist\">ext4_mb_generate_from_freelist</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, void *<a class=\"id\" href=\"#bitmap\">bitmap</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_group_t\">ext4_group_t</a> <a class=\"id\" href=\"#group\">group</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_group_info\">ext4_group_info</a> *<a class=\"id\" href=\"#grp\">grp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_free_data\">ext4_free_data</a> *<a class=\"id\" href=\"#entry\">entry</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#grp\">grp</a> = <a class=\"id\" href=\"#ext4_get_group_info\">ext4_get_group_info</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#rb_first\">rb_first</a>(&amp;(<a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#bb_free_root\">bb_free_root</a>));", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#n\">n</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#n\">n</a>, struct <a class=\"id\" href=\"#ext4_free_data\">ext4_free_data</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mb_set_bits\">mb_set_bits</a>(<a class=\"id\" href=\"#bitmap\">bitmap</a>, <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#start_blk\">start_blk</a>, <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#rb_next\">rb_next</a>(<a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * the function goes through all preallocation in this group and marks them</span>", 
"<span class=\"comment\"> * used in in-core bitmap. buddy must be generated from this bitmap</span>", 
"<span class=\"comment\"> * Need to be called with ext4 group lock held</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#noinline_for_stack\">noinline_for_stack</a>", 
"void <a class=\"id\" href=\"#ext4_mb_generate_from_pa\">ext4_mb_generate_from_pa</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, void *<a class=\"id\" href=\"#bitmap\">bitmap</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_group_t\">ext4_group_t</a> <a class=\"id\" href=\"#group\">group</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_group_info\">ext4_group_info</a> *<a class=\"id\" href=\"#grp\">grp</a> = <a class=\"id\" href=\"#ext4_get_group_info\">ext4_get_group_info</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_prealloc_space\">ext4_prealloc_space</a> *<a class=\"id\" href=\"#pa\">pa</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#cur\">cur</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_group_t\">ext4_group_t</a> <a class=\"id\" href=\"#groupnr\">groupnr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_grpblk_t\">ext4_grpblk_t</a> <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#preallocated\">preallocated</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* all form of preallocation discards first load group,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so the only competing code is preallocation use.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we don't need any locking here</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * notice we do NOT ignore preallocations with pa_deleted</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * otherwise we could leave used blocks available for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * allocation in buddy when concurrent ext4_mb_put_pa()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is dropping preallocation</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each\">list_for_each</a>(<a class=\"id\" href=\"#cur\">cur</a>, &amp;<a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#bb_prealloc_list\">bb_prealloc_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pa\">pa</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#cur\">cur</a>, struct <a class=\"id\" href=\"#ext4_prealloc_space\">ext4_prealloc_space</a>, <a class=\"id\" href=\"#pa_group_list\">pa_group_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lock\">pa_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_get_group_no_and_offset\">ext4_get_group_no_and_offset</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_pstart\">pa_pstart</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     &amp;<a class=\"id\" href=\"#groupnr\">groupnr</a>, &amp;<a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_len\">pa_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lock\">pa_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#len\">len</a> == 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#groupnr\">groupnr</a> != <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mb_set_bits\">mb_set_bits</a>(<a class=\"id\" href=\"#bitmap\">bitmap</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preallocated\">preallocated</a> += <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mb_debug\">mb_debug</a>(1, \"prellocated %u for group %u\\n\", <a class=\"id\" href=\"#preallocated\">preallocated</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ext4_mb_pa_callback\">ext4_mb_pa_callback</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_prealloc_space\">ext4_prealloc_space</a> *<a class=\"id\" href=\"#pa\">pa</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pa\">pa</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#head\">head</a>, struct <a class=\"id\" href=\"#ext4_prealloc_space\">ext4_prealloc_space</a>, <a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#pa_rcu\">pa_rcu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#ext4_pspace_cachep\">ext4_pspace_cachep</a>, <a class=\"id\" href=\"#pa\">pa</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * drops a reference to preallocated space descriptor</span>", 
"<span class=\"comment\"> * if this was the last reference and the space is consumed</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ext4_mb_put_pa\">ext4_mb_put_pa</a>(struct <a class=\"id\" href=\"#ext4_allocation_context\">ext4_allocation_context</a> *<a class=\"id\" href=\"#ac\">ac</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, struct <a class=\"id\" href=\"#ext4_prealloc_space\">ext4_prealloc_space</a> *<a class=\"id\" href=\"#pa\">pa</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_group_t\">ext4_group_t</a> <a class=\"id\" href=\"#grp\">grp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#grp_blk\">grp_blk</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_count\">pa_count</a>) || <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_free\">pa_free</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* in this short window concurrent discard can set pa_deleted */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lock\">pa_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_deleted\">pa_deleted</a> == 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lock\">pa_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_deleted\">pa_deleted</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lock\">pa_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#grp_blk\">grp_blk</a> = <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_pstart\">pa_pstart</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If doing group-based preallocation, pa_pstart may be in the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * next group when pa is used up</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_type\">pa_type</a> == <a class=\"id\" href=\"#MB_GROUP_PA\">MB_GROUP_PA</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#grp_blk\">grp_blk</a>--;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_get_group_no_and_offset\">ext4_get_group_no_and_offset</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#grp_blk\">grp_blk</a>, &amp;<a class=\"id\" href=\"#grp\">grp</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * possible race:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  P1 (buddy init)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>P2 (regular allocation)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>find block B in PA</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  copy on-disk bitmap to buddy</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>mark B in on-disk bitmap</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>drop PA from group</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  mark all PAs in buddy</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * thus, P1 initializes buddy with B available. to prevent this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we make \"copy\" and \"mark all PAs\" atomic and serialize \"drop PA\"</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * against that pair</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_lock_group\">ext4_lock_group</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#grp\">grp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_group_list\">pa_group_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_unlock_group\">ext4_unlock_group</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#grp\">grp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_obj_lock\">pa_obj_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_inode_list\">pa_inode_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_obj_lock\">pa_obj_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;(<a class=\"id\" href=\"#pa\">pa</a>)-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#pa_rcu\">pa_rcu</a>, <a class=\"id\" href=\"#ext4_mb_pa_callback\">ext4_mb_pa_callback</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * creates new preallocated space for given inode</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#noinline_for_stack\">noinline_for_stack</a> int", 
"<a class=\"id\" href=\"#ext4_mb_new_inode_pa\">ext4_mb_new_inode_pa</a>(struct <a class=\"id\" href=\"#ext4_allocation_context\">ext4_allocation_context</a> *<a class=\"id\" href=\"#ac\">ac</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_sb\">ac_sb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_prealloc_space\">ext4_prealloc_space</a> *<a class=\"id\" href=\"#pa\">pa</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_group_info\">ext4_group_info</a> *<a class=\"id\" href=\"#grp\">grp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_inode_info\">ext4_inode_info</a> *<a class=\"id\" href=\"#ei\">ei</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* preallocate only when found space is larger then requested */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_o_ex\">ac_o_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a> >= <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_status\">ac_status</a> != <a class=\"id\" href=\"#AC_STATUS_FOUND\">AC_STATUS_FOUND</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#S_ISREG\">S_ISREG</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_inode\">ac_inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pa\">pa</a> = <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#ext4_pspace_cachep\">ext4_pspace_cachep</a>, <a class=\"id\" href=\"#GFP_NOFS\">GFP_NOFS</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pa\">pa</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a> &lt; <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_g_ex\">ac_g_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#winl\">winl</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#wins\">wins</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#win\">win</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#offs\">offs</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we can't allocate as much as normalizer wants.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * so, found space must get proper lstart</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to cover original request */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_g_ex\">ac_g_ex</a>.<a class=\"id\" href=\"#fe_logical\">fe_logical</a> &gt; <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_o_ex\">ac_o_ex</a>.<a class=\"id\" href=\"#fe_logical\">fe_logical</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_g_ex\">ac_g_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a> &lt; <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_o_ex\">ac_o_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we're limited by original request in that</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * logical block must be covered any way</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * winl is window we can move our chunk within */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#winl\">winl</a> = <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_o_ex\">ac_o_ex</a>.<a class=\"id\" href=\"#fe_logical\">fe_logical</a> - <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_g_ex\">ac_g_ex</a>.<a class=\"id\" href=\"#fe_logical\">fe_logical</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* also, we should cover whole original request */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wins\">wins</a> = <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a> - <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_o_ex\">ac_o_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* the smallest one defines real window */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#win\">win</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#winl\">winl</a>, <a class=\"id\" href=\"#wins\">wins</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offs\">offs</a> = <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_o_ex\">ac_o_ex</a>.<a class=\"id\" href=\"#fe_logical\">fe_logical</a> % <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#offs\">offs</a> && <a class=\"id\" href=\"#offs\">offs</a> &lt; <a class=\"id\" href=\"#win\">win</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#win\">win</a> = <a class=\"id\" href=\"#offs\">offs</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_logical\">fe_logical</a> = <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_o_ex\">ac_o_ex</a>.<a class=\"id\" href=\"#fe_logical\">fe_logical</a> - <a class=\"id\" href=\"#win\">win</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_o_ex\">ac_o_ex</a>.<a class=\"id\" href=\"#fe_logical\">fe_logical</a> &lt; <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_logical\">fe_logical</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_o_ex\">ac_o_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a> &gt; <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* preallocation can change ac_b_ex, thus we store actually</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * allocated blocks for history */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_f_ex\">ac_f_ex</a> = <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lstart\">pa_lstart</a> = <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_logical\">fe_logical</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_pstart\">pa_pstart</a> = <a class=\"id\" href=\"#ext4_grp_offs_to_block\">ext4_grp_offs_to_block</a>(<a class=\"id\" href=\"#sb\">sb</a>, &amp;<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_len\">pa_len</a> = <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_free\">pa_free</a> = <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_len\">pa_len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_count\">pa_count</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lock\">pa_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_inode_list\">pa_inode_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_group_list\">pa_group_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_deleted\">pa_deleted</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_type\">pa_type</a> = <a class=\"id\" href=\"#MB_INODE_PA\">MB_INODE_PA</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mb_debug\">mb_debug</a>(1, \"new inode pa %p: %llu/%u for %u\\n\", <a class=\"id\" href=\"#pa\">pa</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_pstart\">pa_pstart</a>, <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_len\">pa_len</a>, <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lstart\">pa_lstart</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_ext4_mb_new_inode_pa\">trace_ext4_mb_new_inode_pa</a>(<a class=\"id\" href=\"#ac\">ac</a>, <a class=\"id\" href=\"#pa\">pa</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_mb_use_inode_pa\">ext4_mb_use_inode_pa</a>(<a class=\"id\" href=\"#ac\">ac</a>, <a class=\"id\" href=\"#pa\">pa</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_add\">atomic_add</a>(<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_free\">pa_free</a>, &amp;<a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_mb_preallocated\">s_mb_preallocated</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ei\">ei</a> = <a class=\"id\" href=\"#EXT4_I\">EXT4_I</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_inode\">ac_inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#grp\">grp</a> = <a class=\"id\" href=\"#ext4_get_group_info\">ext4_get_group_info</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_group\">fe_group</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_obj_lock\">pa_obj_lock</a> = &amp;<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_prealloc_lock\">i_prealloc_lock</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_inode\">pa_inode</a> = <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_inode\">ac_inode</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_lock_group\">ext4_lock_group</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_group\">fe_group</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_group_list\">pa_group_list</a>, &amp;<a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#bb_prealloc_list\">bb_prealloc_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_unlock_group\">ext4_unlock_group</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_group\">fe_group</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_obj_lock\">pa_obj_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_rcu\">list_add_rcu</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_inode_list\">pa_inode_list</a>, &amp;<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_prealloc_list\">i_prealloc_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_obj_lock\">pa_obj_lock</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * creates new preallocated space for locality group inodes belongs to</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#noinline_for_stack\">noinline_for_stack</a> int", 
"<a class=\"id\" href=\"#ext4_mb_new_group_pa\">ext4_mb_new_group_pa</a>(struct <a class=\"id\" href=\"#ext4_allocation_context\">ext4_allocation_context</a> *<a class=\"id\" href=\"#ac\">ac</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_sb\">ac_sb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_locality_group\">ext4_locality_group</a> *<a class=\"id\" href=\"#lg\">lg</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_prealloc_space\">ext4_prealloc_space</a> *<a class=\"id\" href=\"#pa\">pa</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_group_info\">ext4_group_info</a> *<a class=\"id\" href=\"#grp\">grp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* preallocate only when found space is larger then requested */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_o_ex\">ac_o_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a> >= <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_status\">ac_status</a> != <a class=\"id\" href=\"#AC_STATUS_FOUND\">AC_STATUS_FOUND</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#S_ISREG\">S_ISREG</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_inode\">ac_inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ext4_pspace_cachep\">ext4_pspace_cachep</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pa\">pa</a> = <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#ext4_pspace_cachep\">ext4_pspace_cachep</a>, <a class=\"id\" href=\"#GFP_NOFS\">GFP_NOFS</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pa\">pa</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* preallocation can change ac_b_ex, thus we store actually</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * allocated blocks for history */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_f_ex\">ac_f_ex</a> = <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_pstart\">pa_pstart</a> = <a class=\"id\" href=\"#ext4_grp_offs_to_block\">ext4_grp_offs_to_block</a>(<a class=\"id\" href=\"#sb\">sb</a>, &amp;<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lstart\">pa_lstart</a> = <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_pstart\">pa_pstart</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_len\">pa_len</a> = <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_free\">pa_free</a> = <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_len\">pa_len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_count\">pa_count</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lock\">pa_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_inode_list\">pa_inode_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_group_list\">pa_group_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_deleted\">pa_deleted</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_type\">pa_type</a> = <a class=\"id\" href=\"#MB_GROUP_PA\">MB_GROUP_PA</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mb_debug\">mb_debug</a>(1, \"new group pa %p: %llu/%u for %u\\n\", <a class=\"id\" href=\"#pa\">pa</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_pstart\">pa_pstart</a>, <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_len\">pa_len</a>, <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lstart\">pa_lstart</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_ext4_mb_new_group_pa\">trace_ext4_mb_new_group_pa</a>(<a class=\"id\" href=\"#ac\">ac</a>, <a class=\"id\" href=\"#pa\">pa</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_mb_use_group_pa\">ext4_mb_use_group_pa</a>(<a class=\"id\" href=\"#ac\">ac</a>, <a class=\"id\" href=\"#pa\">pa</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_add\">atomic_add</a>(<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_free\">pa_free</a>, &amp;<a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_mb_preallocated\">s_mb_preallocated</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#grp\">grp</a> = <a class=\"id\" href=\"#ext4_get_group_info\">ext4_get_group_info</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_group\">fe_group</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lg\">lg</a> = <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_lg\">ac_lg</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#lg\">lg</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_obj_lock\">pa_obj_lock</a> = &amp;<a class=\"id\" href=\"#lg\">lg</a>-><a class=\"id\" href=\"#lg_prealloc_lock\">lg_prealloc_lock</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_inode\">pa_inode</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_lock_group\">ext4_lock_group</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_group\">fe_group</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_group_list\">pa_group_list</a>, &amp;<a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#bb_prealloc_list\">bb_prealloc_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_unlock_group\">ext4_unlock_group</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_group\">fe_group</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We will later add the new pa to the right bucket</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * after updating the pa_free in ext4_mb_release_context</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ext4_mb_new_preallocation\">ext4_mb_new_preallocation</a>(struct <a class=\"id\" href=\"#ext4_allocation_context\">ext4_allocation_context</a> *<a class=\"id\" href=\"#ac\">ac</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_flags\">ac_flags</a> &amp; <a class=\"id\" href=\"#EXT4_MB_HINT_GROUP_ALLOC\">EXT4_MB_HINT_GROUP_ALLOC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext4_mb_new_group_pa\">ext4_mb_new_group_pa</a>(<a class=\"id\" href=\"#ac\">ac</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext4_mb_new_inode_pa\">ext4_mb_new_inode_pa</a>(<a class=\"id\" href=\"#ac\">ac</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * finds all unused blocks in on-disk bitmap, frees them in</span>", 
"<span class=\"comment\"> * in-core bitmap and buddy.</span>", 
"<span class=\"comment\"> * @pa must be unlinked from inode and group lists, so that</span>", 
"<span class=\"comment\"> * nobody else can find/use it.</span>", 
"<span class=\"comment\"> * the caller MUST hold group/inode locks.</span>", 
"<span class=\"comment\"> * TODO: optimize the case when there are no in-core structures yet</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#noinline_for_stack\">noinline_for_stack</a> int", 
"<a class=\"id\" href=\"#ext4_mb_release_inode_pa\">ext4_mb_release_inode_pa</a>(struct <a class=\"id\" href=\"#ext4_buddy\">ext4_buddy</a> *<a class=\"id\" href=\"#e4b\">e4b</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_prealloc_space\">ext4_prealloc_space</a> *<a class=\"id\" href=\"#pa\">pa</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_allocation_context\">ext4_allocation_context</a> *<a class=\"id\" href=\"#ac\">ac</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_sb\">bd_sb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_sb_info\">ext4_sb_info</a> *<a class=\"id\" href=\"#sbi\">sbi</a> = <a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_group_t\">ext4_group_t</a> <a class=\"id\" href=\"#group\">group</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_grpblk_t\">ext4_grpblk_t</a> <a class=\"id\" href=\"#bit\">bit</a>;", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#grp_blk_start\">grp_blk_start</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#free\">free</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_deleted\">pa_deleted</a> == 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_get_group_no_and_offset\">ext4_get_group_no_and_offset</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_pstart\">pa_pstart</a>, &amp;<a class=\"id\" href=\"#group\">group</a>, &amp;<a class=\"id\" href=\"#bit\">bit</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#grp_blk_start\">grp_blk_start</a> = <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_pstart\">pa_pstart</a> - <a class=\"id\" href=\"#bit\">bit</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#group\">group</a> != <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_group\">bd_group</a> && <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_len\">pa_len</a> != 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#bit\">bit</a> + <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_len\">pa_len</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ac\">ac</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_sb\">ac_sb</a> = <a class=\"id\" href=\"#sb\">sb</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_inode\">ac_inode</a> = <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_inode\">pa_inode</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#bit\">bit</a> &lt; <a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bit\">bit</a> = <a class=\"id\" href=\"#mb_find_next_zero_bit\">mb_find_next_zero_bit</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#bit\">bit</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bit\">bit</a> >= <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#mb_find_next_bit\">mb_find_next_bit</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#bit\">bit</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mb_debug\">mb_debug</a>(1, \"    free preallocated %u/%u in group %u\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> (unsigned) <a class=\"id\" href=\"#ext4_group_first_block_no\">ext4_group_first_block_no</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>) + <a class=\"id\" href=\"#bit\">bit</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> (unsigned) <a class=\"id\" href=\"#next\">next</a> - <a class=\"id\" href=\"#bit\">bit</a>, (unsigned) <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free\">free</a> += <a class=\"id\" href=\"#next\">next</a> - <a class=\"id\" href=\"#bit\">bit</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ac\">ac</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_group\">fe_group</a> = <a class=\"id\" href=\"#group\">group</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_start\">fe_start</a> = <a class=\"id\" href=\"#bit\">bit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a> = <a class=\"id\" href=\"#next\">next</a> - <a class=\"id\" href=\"#bit\">bit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_logical\">fe_logical</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_ext4_mballoc_discard\">trace_ext4_mballoc_discard</a>(<a class=\"id\" href=\"#ac\">ac</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_ext4_mb_release_inode_pa\">trace_ext4_mb_release_inode_pa</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#ac\">ac</a>, <a class=\"id\" href=\"#pa\">pa</a>, <a class=\"id\" href=\"#grp_blk_start\">grp_blk_start</a> + <a class=\"id\" href=\"#bit\">bit</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#next\">next</a> - <a class=\"id\" href=\"#bit\">bit</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mb_free_blocks\">mb_free_blocks</a>(<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_inode\">pa_inode</a>, <a class=\"id\" href=\"#e4b\">e4b</a>, <a class=\"id\" href=\"#bit\">bit</a>, <a class=\"id\" href=\"#next\">next</a> - <a class=\"id\" href=\"#bit\">bit</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bit\">bit</a> = <a class=\"id\" href=\"#next\">next</a> + 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#free\">free</a> != <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_free\">pa_free</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CRIT\">KERN_CRIT</a> \"pa %p: logic %lu, phys. %lu, len %lu\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pa\">pa</a>, (unsigned long) <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lstart\">pa_lstart</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long) <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_pstart\">pa_pstart</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long) <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_len\">pa_len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_grp_locked_error\">ext4_grp_locked_error</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>, 0, 0, \"free %u, pa_free %u\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free\">free</a>, <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_free\">pa_free</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * pa is already deleted so we use the value obtained</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * from the bitmap and continue.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_add\">atomic_add</a>(<a class=\"id\" href=\"#free\">free</a>, &amp;<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_mb_discarded\">s_mb_discarded</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#noinline_for_stack\">noinline_for_stack</a> int", 
"<a class=\"id\" href=\"#ext4_mb_release_group_pa\">ext4_mb_release_group_pa</a>(struct <a class=\"id\" href=\"#ext4_buddy\">ext4_buddy</a> *<a class=\"id\" href=\"#e4b\">e4b</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_prealloc_space\">ext4_prealloc_space</a> *<a class=\"id\" href=\"#pa\">pa</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_allocation_context\">ext4_allocation_context</a> *<a class=\"id\" href=\"#ac\">ac</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_sb\">bd_sb</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_group_t\">ext4_group_t</a> <a class=\"id\" href=\"#group\">group</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_grpblk_t\">ext4_grpblk_t</a> <a class=\"id\" href=\"#bit\">bit</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_ext4_mb_release_group_pa\">trace_ext4_mb_release_group_pa</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#ac\">ac</a>, <a class=\"id\" href=\"#pa\">pa</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_deleted\">pa_deleted</a> == 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_get_group_no_and_offset\">ext4_get_group_no_and_offset</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_pstart\">pa_pstart</a>, &amp;<a class=\"id\" href=\"#group\">group</a>, &amp;<a class=\"id\" href=\"#bit\">bit</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#group\">group</a> != <a class=\"id\" href=\"#e4b\">e4b</a>-><a class=\"id\" href=\"#bd_group\">bd_group</a> && <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_len\">pa_len</a> != 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mb_free_blocks\">mb_free_blocks</a>(<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_inode\">pa_inode</a>, <a class=\"id\" href=\"#e4b\">e4b</a>, <a class=\"id\" href=\"#bit\">bit</a>, <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_len\">pa_len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_add\">atomic_add</a>(<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_len\">pa_len</a>, &amp;<a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_mb_discarded\">s_mb_discarded</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ac\">ac</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_sb\">ac_sb</a> = <a class=\"id\" href=\"#sb\">sb</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_inode\">ac_inode</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_group\">fe_group</a> = <a class=\"id\" href=\"#group\">group</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_start\">fe_start</a> = <a class=\"id\" href=\"#bit\">bit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a> = <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_len\">pa_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_logical\">fe_logical</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_ext4_mballoc_discard\">trace_ext4_mballoc_discard</a>(<a class=\"id\" href=\"#ac\">ac</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * releases all preallocations in given group</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * first, we need to decide discard policy:</span>", 
"<span class=\"comment\"> * - when do we discard</span>", 
"<span class=\"comment\"> *   1) ENOSPC</span>", 
"<span class=\"comment\"> * - how many do we discard</span>", 
"<span class=\"comment\"> *   1) how many requested</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#noinline_for_stack\">noinline_for_stack</a> int", 
"<a class=\"id\" href=\"#ext4_mb_discard_group_preallocations\">ext4_mb_discard_group_preallocations</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_group_t\">ext4_group_t</a> <a class=\"id\" href=\"#group\">group</a>, int <a class=\"id\" href=\"#needed\">needed</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_group_info\">ext4_group_info</a> *<a class=\"id\" href=\"#grp\">grp</a> = <a class=\"id\" href=\"#ext4_get_group_info\">ext4_get_group_info</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_prealloc_space\">ext4_prealloc_space</a> *<a class=\"id\" href=\"#pa\">pa</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_allocation_context\">ext4_allocation_context</a> *<a class=\"id\" href=\"#ac\">ac</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_buddy\">ext4_buddy</a> <a class=\"id\" href=\"#e4b\">e4b</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#busy\">busy</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#free\">free</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mb_debug\">mb_debug</a>(1, \"discard preallocation for group %u\\n\", <a class=\"id\" href=\"#group\">group</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#bb_prealloc_list\">bb_prealloc_list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a> = <a class=\"id\" href=\"#ext4_read_block_bitmap\">ext4_read_block_bitmap</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_error\">ext4_error</a>(<a class=\"id\" href=\"#sb\">sb</a>, \"Error reading block bitmap for %u\", <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext4_mb_load_buddy\">ext4_mb_load_buddy</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>, &amp;<a class=\"id\" href=\"#e4b\">e4b</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_error\">ext4_error</a>(<a class=\"id\" href=\"#sb\">sb</a>, \"Error loading buddy information for %u\", <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_bh\">put_bh</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#needed\">needed</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#needed\">needed</a> = <a class=\"id\" href=\"#EXT4_BLOCKS_PER_GROUP\">EXT4_BLOCKS_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>) + 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a> = <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#ext4_ac_cachep\">ext4_ac_cachep</a>, <a class=\"id\" href=\"#GFP_NOFS\">GFP_NOFS</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ac\">ac</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_sb\">ac_sb</a> = <a class=\"id\" href=\"#sb\">sb</a>;", 
"<a class=\"id\" href=\"#repeat\">repeat</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_lock_group\">ext4_lock_group</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#pa\">pa</a>, <a class=\"id\" href=\"#tmp\">tmp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#bb_prealloc_list\">bb_prealloc_list</a>, <a class=\"id\" href=\"#pa_group_list\">pa_group_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lock\">pa_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_count\">pa_count</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lock\">pa_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#busy\">busy</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_deleted\">pa_deleted</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lock\">pa_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* seems this one can be freed ... */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_deleted\">pa_deleted</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we can trust pa_free ... */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free\">free</a> += <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_free\">pa_free</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lock\">pa_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_group_list\">pa_group_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#pa_tmp_list\">pa_tmp_list</a>, &amp;<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* if we still need more blocks and some PAs were used, try again */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#free\">free</a> &lt; <a class=\"id\" href=\"#needed\">needed</a> && <a class=\"id\" href=\"#busy\">busy</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#busy\">busy</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_unlock_group\">ext4_unlock_group</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Yield the CPU here so that we don't get soft lockup</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * in non preempt case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#yield\">yield</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#repeat\">repeat</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* found anything to free? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#list\">list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#free\">free</a> != 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* now free all selected PAs */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#pa\">pa</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#pa_tmp_list\">pa_tmp_list</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* remove from object (inode or locality group) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_obj_lock\">pa_obj_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_inode_list\">pa_inode_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_obj_lock\">pa_obj_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_type\">pa_type</a> == <a class=\"id\" href=\"#MB_GROUP_PA\">MB_GROUP_PA</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_mb_release_group_pa\">ext4_mb_release_group_pa</a>(&amp;<a class=\"id\" href=\"#e4b\">e4b</a>, <a class=\"id\" href=\"#pa\">pa</a>, <a class=\"id\" href=\"#ac\">ac</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_mb_release_inode_pa\">ext4_mb_release_inode_pa</a>(&amp;<a class=\"id\" href=\"#e4b\">e4b</a>, <a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>, <a class=\"id\" href=\"#pa\">pa</a>, <a class=\"id\" href=\"#ac\">ac</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#pa_tmp_list\">pa_tmp_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;(<a class=\"id\" href=\"#pa\">pa</a>)-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#pa_rcu\">pa_rcu</a>, <a class=\"id\" href=\"#ext4_mb_pa_callback\">ext4_mb_pa_callback</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_unlock_group\">ext4_unlock_group</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ac\">ac</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#ext4_ac_cachep\">ext4_ac_cachep</a>, <a class=\"id\" href=\"#ac\">ac</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_mb_unload_buddy\">ext4_mb_unload_buddy</a>(&amp;<a class=\"id\" href=\"#e4b\">e4b</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_bh\">put_bh</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#free\">free</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * releases all non-used preallocated blocks for given inode</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It's important to discard preallocations under i_data_sem</span>", 
"<span class=\"comment\"> * We don't want another block to be served from the prealloc</span>", 
"<span class=\"comment\"> * space when we are discarding the inode prealloc space.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FIXME!! Make sure it is valid at all the call sites</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ext4_discard_preallocations\">ext4_discard_preallocations</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_inode_info\">ext4_inode_info</a> *<a class=\"id\" href=\"#ei\">ei</a> = <a class=\"id\" href=\"#EXT4_I\">EXT4_I</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_prealloc_space\">ext4_prealloc_space</a> *<a class=\"id\" href=\"#pa\">pa</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_allocation_context\">ext4_allocation_context</a> *<a class=\"id\" href=\"#ac\">ac</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_group_t\">ext4_group_t</a> <a class=\"id\" href=\"#group\">group</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_buddy\">ext4_buddy</a> <a class=\"id\" href=\"#e4b\">e4b</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#S_ISREG\">S_ISREG</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*BUG_ON(!list_empty(&amp;ei-&gt;i_prealloc_list));*/</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mb_debug\">mb_debug</a>(1, \"discard preallocation for inode %lu\\n\", <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_ext4_discard_preallocations\">trace_ext4_discard_preallocations</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#list\">list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a> = <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#ext4_ac_cachep\">ext4_ac_cachep</a>, <a class=\"id\" href=\"#GFP_NOFS\">GFP_NOFS</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ac\">ac</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_sb\">ac_sb</a> = <a class=\"id\" href=\"#sb\">sb</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_inode\">ac_inode</a> = <a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#repeat\">repeat</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* first, collect all pa's in the inode */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_prealloc_lock\">i_prealloc_lock</a>);", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_prealloc_list\">i_prealloc_list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pa\">pa</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_prealloc_list\">i_prealloc_list</a>.<a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_prealloc_space\">ext4_prealloc_space</a>, <a class=\"id\" href=\"#pa_inode_list\">pa_inode_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_obj_lock\">pa_obj_lock</a> != &amp;<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_prealloc_lock\">i_prealloc_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lock\">pa_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_count\">pa_count</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* this shouldn't happen often - nobody should</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * use preallocation while we're discarding it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lock\">pa_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_prealloc_lock\">i_prealloc_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"uh-oh! used pa while discarding\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule_timeout_uninterruptible\">schedule_timeout_uninterruptible</a>(<a class=\"id\" href=\"#HZ\">HZ</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#repeat\">repeat</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_deleted\">pa_deleted</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_deleted\">pa_deleted</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lock\">pa_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_inode_list\">pa_inode_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#pa_tmp_list\">pa_tmp_list</a>, &amp;<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* someone is deleting pa right now */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lock\">pa_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_prealloc_lock\">i_prealloc_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we have to wait here because pa_deleted</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * doesn't mean pa is already unlinked from</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the list. as we might be called from</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * -&gt;clear_inode() the inode will get freed</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and concurrent thread which is unlinking</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * pa from inode's list may access already</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * freed memory, bad-bad-bad */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* XXX: if this happens too often, we can</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * add a flag to force wait only in case</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * of -&gt;clear_inode(), but not in case of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * regular truncate */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule_timeout_uninterruptible\">schedule_timeout_uninterruptible</a>(<a class=\"id\" href=\"#HZ\">HZ</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#repeat\">repeat</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_prealloc_lock\">i_prealloc_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#pa\">pa</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#pa_tmp_list\">pa_tmp_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_type\">pa_type</a> != <a class=\"id\" href=\"#MB_INODE_PA\">MB_INODE_PA</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_get_group_no_and_offset\">ext4_get_group_no_and_offset</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_pstart\">pa_pstart</a>, &amp;<a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext4_mb_load_buddy\">ext4_mb_load_buddy</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>, &amp;<a class=\"id\" href=\"#e4b\">e4b</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_error\">ext4_error</a>(<a class=\"id\" href=\"#sb\">sb</a>, \"Error loading buddy information for %u\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a> = <a class=\"id\" href=\"#ext4_read_block_bitmap\">ext4_read_block_bitmap</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_error\">ext4_error</a>(<a class=\"id\" href=\"#sb\">sb</a>, \"Error reading block bitmap for %u\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_mb_unload_buddy\">ext4_mb_unload_buddy</a>(&amp;<a class=\"id\" href=\"#e4b\">e4b</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_lock_group\">ext4_lock_group</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_group_list\">pa_group_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_mb_release_inode_pa\">ext4_mb_release_inode_pa</a>(&amp;<a class=\"id\" href=\"#e4b\">e4b</a>, <a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>, <a class=\"id\" href=\"#pa\">pa</a>, <a class=\"id\" href=\"#ac\">ac</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_unlock_group\">ext4_unlock_group</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_mb_unload_buddy\">ext4_mb_unload_buddy</a>(&amp;<a class=\"id\" href=\"#e4b\">e4b</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_bh\">put_bh</a>(<a class=\"id\" href=\"#bitmap_bh\">bitmap_bh</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#pa_tmp_list\">pa_tmp_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;(<a class=\"id\" href=\"#pa\">pa</a>)-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#pa_rcu\">pa_rcu</a>, <a class=\"id\" href=\"#ext4_mb_pa_callback\">ext4_mb_pa_callback</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ac\">ac</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#ext4_ac_cachep\">ext4_ac_cachep</a>, <a class=\"id\" href=\"#ac\">ac</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * finds all preallocated spaces and return blocks being freed to them</span>", 
"<span class=\"comment\"> * if preallocated space becomes full (no block is used from the space)</span>", 
"<span class=\"comment\"> * then the function frees space in buddy</span>", 
"<span class=\"comment\"> * XXX: at the moment, truncate (which is the only way to free blocks)</span>", 
"<span class=\"comment\"> * discards all preallocations</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ext4_mb_return_to_preallocation\">ext4_mb_return_to_preallocation</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_buddy\">ext4_buddy</a> *<a class=\"id\" href=\"#e4b\">e4b</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#block\">block</a>, int <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#EXT4_I\">EXT4_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_prealloc_list\">i_prealloc_list</a>));", 
"}", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_EXT4_DEBUG\">CONFIG_EXT4_DEBUG</a>", 
"static void <a class=\"id\" href=\"#ext4_mb_show_ac\">ext4_mb_show_ac</a>(struct <a class=\"id\" href=\"#ext4_allocation_context\">ext4_allocation_context</a> *<a class=\"id\" href=\"#ac\">ac</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_sb\">ac_sb</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_group_t\">ext4_group_t</a> <a class=\"id\" href=\"#ngroups\">ngroups</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>)-><a class=\"id\" href=\"#s_mount_flags\">s_mount_flags</a> &amp; <a class=\"id\" href=\"#EXT4_MF_FS_ABORTED\">EXT4_MF_FS_ABORTED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"EXT4-fs: Can't allocate:\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" Allocation context details:\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"EXT4-fs: status %d flags %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_status\">ac_status</a>, <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_flags\">ac_flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"EXT4-fs: orig %lu/%lu/%lu@%lu, goal %lu/%lu/%lu@%lu, \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"best %lu/%lu/%lu@%lu cr %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long)<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_o_ex\">ac_o_ex</a>.<a class=\"id\" href=\"#fe_group\">fe_group</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long)<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_o_ex\">ac_o_ex</a>.<a class=\"id\" href=\"#fe_start\">fe_start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long)<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_o_ex\">ac_o_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long)<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_o_ex\">ac_o_ex</a>.<a class=\"id\" href=\"#fe_logical\">fe_logical</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long)<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_g_ex\">ac_g_ex</a>.<a class=\"id\" href=\"#fe_group\">fe_group</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long)<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_g_ex\">ac_g_ex</a>.<a class=\"id\" href=\"#fe_start\">fe_start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long)<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_g_ex\">ac_g_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long)<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_g_ex\">ac_g_ex</a>.<a class=\"id\" href=\"#fe_logical\">fe_logical</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long)<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_group\">fe_group</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long)<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_start\">fe_start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long)<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long)<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_logical\">fe_logical</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(int)<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_criteria\">ac_criteria</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"EXT4-fs: %lu scanned, %d found\\n\", <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_ex_scanned\">ac_ex_scanned</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_found\">ac_found</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"EXT4-fs: groups: \\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ngroups\">ngroups</a> = <a class=\"id\" href=\"#ext4_get_groups_count\">ext4_get_groups_count</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ngroups\">ngroups</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_group_info\">ext4_group_info</a> *<a class=\"id\" href=\"#grp\">grp</a> = <a class=\"id\" href=\"#ext4_get_group_info\">ext4_get_group_info</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_prealloc_space\">ext4_prealloc_space</a> *<a class=\"id\" href=\"#pa\">pa</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_grpblk_t\">ext4_grpblk_t</a> <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#cur\">cur</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_lock_group\">ext4_lock_group</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each\">list_for_each</a>(<a class=\"id\" href=\"#cur\">cur</a>, &amp;<a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#bb_prealloc_list\">bb_prealloc_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pa\">pa</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#cur\">cur</a>, struct <a class=\"id\" href=\"#ext4_prealloc_space\">ext4_prealloc_space</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pa_group_list\">pa_group_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lock\">pa_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_get_group_no_and_offset\">ext4_get_group_no_and_offset</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_pstart\">pa_pstart</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lock\">pa_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"PA:%u:%d:%u \\n\", <a class=\"id\" href=\"#i\">i</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_len\">pa_len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_unlock_group\">ext4_unlock_group</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#bb_free\">bb_free</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%u: %d/%d \\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#bb_free\">bb_free</a>, <a class=\"id\" href=\"#grp\">grp</a>-><a class=\"id\" href=\"#bb_fragments\">bb_fragments</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"\\n\");", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ext4_mb_show_ac\">ext4_mb_show_ac</a>(struct <a class=\"id\" href=\"#ext4_allocation_context\">ext4_allocation_context</a> *<a class=\"id\" href=\"#ac\">ac</a>)", 
"{", 
"<span class=\"ts\"/>return;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We use locality group preallocation for small size file. The size of the</span>", 
"<span class=\"comment\"> * file is determined by the current size or the resulting size after</span>", 
"<span class=\"comment\"> * allocation which ever is larger</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * One can tune this size via /sys/fs/ext4/&lt;partition&gt;/mb_stream_req</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ext4_mb_group_or_file\">ext4_mb_group_or_file</a>(struct <a class=\"id\" href=\"#ext4_allocation_context\">ext4_allocation_context</a> *<a class=\"id\" href=\"#ac\">ac</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_sb_info\">ext4_sb_info</a> *<a class=\"id\" href=\"#sbi\">sbi</a> = <a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_sb\">ac_sb</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#bsbits\">bsbits</a> = <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_sb\">ac_sb</a>-><a class=\"id\" href=\"#s_blocksize_bits\">s_blocksize_bits</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#isize\">isize</a>;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_flags\">ac_flags</a> &amp; <a class=\"id\" href=\"#EXT4_MB_HINT_DATA\">EXT4_MB_HINT_DATA</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_flags\">ac_flags</a> &amp; <a class=\"id\" href=\"#EXT4_MB_HINT_GOAL_ONLY\">EXT4_MB_HINT_GOAL_ONLY</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_o_ex\">ac_o_ex</a>.<a class=\"id\" href=\"#fe_logical\">fe_logical</a> + <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_o_ex\">ac_o_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#isize\">isize</a> = (<a class=\"id\" href=\"#i_size_read\">i_size_read</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_inode\">ac_inode</a>) + <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_sb\">ac_sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a> - 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>>> <a class=\"id\" href=\"#bsbits\">bsbits</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#size\">size</a> == <a class=\"id\" href=\"#isize\">isize</a>) &&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#ext4_fs_is_busy\">ext4_fs_is_busy</a>(<a class=\"id\" href=\"#sbi\">sbi</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_inode\">ac_inode</a>-><a class=\"id\" href=\"#i_writecount\">i_writecount</a>) == 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_flags\">ac_flags</a> |= <a class=\"id\" href=\"#EXT4_MB_HINT_NOPREALLOC\">EXT4_MB_HINT_NOPREALLOC</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* don't use group allocation for large files */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#isize\">isize</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_mb_stream_request\">s_mb_stream_request</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_flags\">ac_flags</a> |= <a class=\"id\" href=\"#EXT4_MB_STREAM_ALLOC\">EXT4_MB_STREAM_ALLOC</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_lg\">ac_lg</a> != <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * locality group prealloc space are per cpu. The reason for having</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * per cpu locality group is to reduce the contention between block</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * request from multiple CPUs.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_lg\">ac_lg</a> = <a class=\"id\" href=\"#__this_cpu_ptr\">__this_cpu_ptr</a>(<a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_locality_groups\">s_locality_groups</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we're going to use group allocation */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_flags\">ac_flags</a> |= <a class=\"id\" href=\"#EXT4_MB_HINT_GROUP_ALLOC\">EXT4_MB_HINT_GROUP_ALLOC</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* serialize all allocations in the group */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_lg\">ac_lg</a>-><a class=\"id\" href=\"#lg_mutex\">lg_mutex</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#noinline_for_stack\">noinline_for_stack</a> int", 
"<a class=\"id\" href=\"#ext4_mb_initialize_context\">ext4_mb_initialize_context</a>(struct <a class=\"id\" href=\"#ext4_allocation_context\">ext4_allocation_context</a> *<a class=\"id\" href=\"#ac\">ac</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_allocation_request\">ext4_allocation_request</a> *<a class=\"id\" href=\"#ar\">ar</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#ar\">ar</a>-><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_sb_info\">ext4_sb_info</a> *<a class=\"id\" href=\"#sbi\">sbi</a> = <a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_super_block\">ext4_super_block</a> *<a class=\"id\" href=\"#es\">es</a> = <a class=\"id\" href=\"#sbi\">sbi</a>-><a class=\"id\" href=\"#s_es\">s_es</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_group_t\">ext4_group_t</a> <a class=\"id\" href=\"#group\">group</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#goal\">goal</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_grpblk_t\">ext4_grpblk_t</a> <a class=\"id\" href=\"#block\">block</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we can't allocate &gt; group size */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#ar\">ar</a>-><a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* just a dirty hack to filter too big requests  */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> >= <a class=\"id\" href=\"#EXT4_BLOCKS_PER_GROUP\">EXT4_BLOCKS_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>) - 10)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#EXT4_BLOCKS_PER_GROUP\">EXT4_BLOCKS_PER_GROUP</a>(<a class=\"id\" href=\"#sb\">sb</a>) - 10;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* start searching from the goal */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#goal\">goal</a> = <a class=\"id\" href=\"#ar\">ar</a>-><a class=\"id\" href=\"#goal\">goal</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#goal\">goal</a> &lt; <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#es\">es</a>-><a class=\"id\" href=\"#s_first_data_block\">s_first_data_block</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#goal\">goal</a> >= <a class=\"id\" href=\"#ext4_blocks_count\">ext4_blocks_count</a>(<a class=\"id\" href=\"#es\">es</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#goal\">goal</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#es\">es</a>-><a class=\"id\" href=\"#s_first_data_block\">s_first_data_block</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_get_group_no_and_offset\">ext4_get_group_no_and_offset</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#goal\">goal</a>, &amp;<a class=\"id\" href=\"#group\">group</a>, &amp;<a class=\"id\" href=\"#block\">block</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* set up allocation goals */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#ac\">ac</a>, 0, sizeof(struct <a class=\"id\" href=\"#ext4_allocation_context\">ext4_allocation_context</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_b_ex\">ac_b_ex</a>.<a class=\"id\" href=\"#fe_logical\">fe_logical</a> = <a class=\"id\" href=\"#ar\">ar</a>-><a class=\"id\" href=\"#logical\">logical</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_status\">ac_status</a> = <a class=\"id\" href=\"#AC_STATUS_CONTINUE\">AC_STATUS_CONTINUE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_sb\">ac_sb</a> = <a class=\"id\" href=\"#sb\">sb</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_inode\">ac_inode</a> = <a class=\"id\" href=\"#ar\">ar</a>-><a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_o_ex\">ac_o_ex</a>.<a class=\"id\" href=\"#fe_logical\">fe_logical</a> = <a class=\"id\" href=\"#ar\">ar</a>-><a class=\"id\" href=\"#logical\">logical</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_o_ex\">ac_o_ex</a>.<a class=\"id\" href=\"#fe_group\">fe_group</a> = <a class=\"id\" href=\"#group\">group</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_o_ex\">ac_o_ex</a>.<a class=\"id\" href=\"#fe_start\">fe_start</a> = <a class=\"id\" href=\"#block\">block</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_o_ex\">ac_o_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_g_ex\">ac_g_ex</a>.<a class=\"id\" href=\"#fe_logical\">fe_logical</a> = <a class=\"id\" href=\"#ar\">ar</a>-><a class=\"id\" href=\"#logical\">logical</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_g_ex\">ac_g_ex</a>.<a class=\"id\" href=\"#fe_group\">fe_group</a> = <a class=\"id\" href=\"#group\">group</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_g_ex\">ac_g_ex</a>.<a class=\"id\" href=\"#fe_start\">fe_start</a> = <a class=\"id\" href=\"#block\">block</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_g_ex\">ac_g_ex</a>.<a class=\"id\" href=\"#fe_len\">fe_len</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_flags\">ac_flags</a> = <a class=\"id\" href=\"#ar\">ar</a>-><a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we have to define context: we'll we work with a file or</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * locality group. this is a policy, actually */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_mb_group_or_file\">ext4_mb_group_or_file</a>(<a class=\"id\" href=\"#ac\">ac</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mb_debug\">mb_debug</a>(1, \"init ac: %u blocks @ %u, goal %u, flags %x, 2^%d, \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"left: %u/%u, right %u/%u to %swritable\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned) <a class=\"id\" href=\"#ar\">ar</a>-><a class=\"id\" href=\"#len\">len</a>, (unsigned) <a class=\"id\" href=\"#ar\">ar</a>-><a class=\"id\" href=\"#logical\">logical</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned) <a class=\"id\" href=\"#ar\">ar</a>-><a class=\"id\" href=\"#goal\">goal</a>, <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_flags\">ac_flags</a>, <a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_2order\">ac_2order</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned) <a class=\"id\" href=\"#ar\">ar</a>-><a class=\"id\" href=\"#lleft\">lleft</a>, (unsigned) <a class=\"id\" href=\"#ar\">ar</a>-><a class=\"id\" href=\"#pleft\">pleft</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned) <a class=\"id\" href=\"#ar\">ar</a>-><a class=\"id\" href=\"#lright\">lright</a>, (unsigned) <a class=\"id\" href=\"#ar\">ar</a>-><a class=\"id\" href=\"#pright\">pright</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#ar\">ar</a>-><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_writecount\">i_writecount</a>) ? \"\" : \"non-\");", 
"<span class=\"ts\"/>return 0;", 
"", 
"}", 
"", 
"static <a class=\"id\" href=\"#noinline_for_stack\">noinline_for_stack</a> void", 
"<a class=\"id\" href=\"#ext4_mb_discard_lg_preallocations\">ext4_mb_discard_lg_preallocations</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_locality_group\">ext4_locality_group</a> *<a class=\"id\" href=\"#lg\">lg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#order\">order</a>, int <a class=\"id\" href=\"#total_entries\">total_entries</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_group_t\">ext4_group_t</a> <a class=\"id\" href=\"#group\">group</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_buddy\">ext4_buddy</a> <a class=\"id\" href=\"#e4b\">e4b</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#discard_list\">discard_list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_prealloc_space\">ext4_prealloc_space</a> *<a class=\"id\" href=\"#pa\">pa</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_allocation_context\">ext4_allocation_context</a> *<a class=\"id\" href=\"#ac\">ac</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mb_debug\">mb_debug</a>(1, \"discard locality group preallocation\\n\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#discard_list\">discard_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a> = <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#ext4_ac_cachep\">ext4_ac_cachep</a>, <a class=\"id\" href=\"#GFP_NOFS\">GFP_NOFS</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ac\">ac</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ac\">ac</a>-><a class=\"id\" href=\"#ac_sb\">ac_sb</a> = <a class=\"id\" href=\"#sb\">sb</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#lg\">lg</a>-><a class=\"id\" href=\"#lg_prealloc_lock\">lg_prealloc_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#pa\">pa</a>, &amp;<a class=\"id\" href=\"#lg\">lg</a>-><a class=\"id\" href=\"#lg_prealloc_list\">lg_prealloc_list</a>[<a class=\"id\" href=\"#order\">order</a>],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pa_inode_list\">pa_inode_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lock\">pa_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_count\">pa_count</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * This is the pa that we just used</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * for block allocation. So don't</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * free that</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lock\">pa_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_deleted\">pa_deleted</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lock\">pa_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* only lg prealloc space */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_type\">pa_type</a> != <a class=\"id\" href=\"#MB_GROUP_PA\">MB_GROUP_PA</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* seems this one can be freed ... */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_deleted\">pa_deleted</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_lock\">pa_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#pa_inode_list\">pa_inode_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#pa\">pa</a>-><a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#pa_tmp_list\">pa_tmp_list</a>, &amp;<a class=\"id\" href=\"#discard_list\">discard_list</a>);", 
];
xr_frag_insert('l/0d/9c8b1eebf30b5da8dcda08836c4882762cedd6.xr', __xr_tmp);
