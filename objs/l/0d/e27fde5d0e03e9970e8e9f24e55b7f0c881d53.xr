var __xr_tmp = [
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CPU_SUP_INTEL\">CONFIG_CPU_SUP_INTEL</a>", 
"", 
"<span class=\"comment\">/* The maximal number of PEBS events: */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_PEBS_EVENTS\">MAX_PEBS_EVENTS</a><span class=\"ts\"/><span class=\"ts\"/>4", 
"", 
"<span class=\"comment\">/* The size of a BTS record in bytes: */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BTS_RECORD_SIZE\">BTS_RECORD_SIZE</a><span class=\"ts\"/><span class=\"ts\"/>24", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BTS_BUFFER_SIZE\">BTS_BUFFER_SIZE</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> << 4)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PEBS_BUFFER_SIZE\">PEBS_BUFFER_SIZE</a><span class=\"ts\"/><a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * pebs_record_32 for p4 and core not supported</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">struct pebs_record_32 {</span>", 
"<span class=\"comment\"><span class=\"ts\"/>u32 flags, ip;</span>", 
"<span class=\"comment\"><span class=\"ts\"/>u32 ax, bc, cx, dx;</span>", 
"<span class=\"comment\"><span class=\"ts\"/>u32 si, di, bp, sp;</span>", 
"<span class=\"comment\">};</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#pebs_record_core\">pebs_record_core</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#ip\">ip</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#ax\">ax</a>, <a class=\"id\" href=\"#bx\">bx</a>, <a class=\"id\" href=\"#cx\">cx</a>, <a class=\"id\" href=\"#dx\">dx</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#si\">si</a>, <a class=\"id\" href=\"#di\">di</a>, <a class=\"id\" href=\"#bp\">bp</a>, <a class=\"id\" href=\"#sp\">sp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#r8\">r8</a>,  <a class=\"id\" href=\"#r9\">r9</a>,  <a class=\"id\" href=\"#r10\">r10</a>, <a class=\"id\" href=\"#r11\">r11</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#r12\">r12</a>, <a class=\"id\" href=\"#r13\">r13</a>, <a class=\"id\" href=\"#r14\">r14</a>, <a class=\"id\" href=\"#r15\">r15</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#pebs_record_nhm\">pebs_record_nhm</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#ip\">ip</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#ax\">ax</a>, <a class=\"id\" href=\"#bx\">bx</a>, <a class=\"id\" href=\"#cx\">cx</a>, <a class=\"id\" href=\"#dx\">dx</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#si\">si</a>, <a class=\"id\" href=\"#di\">di</a>, <a class=\"id\" href=\"#bp\">bp</a>, <a class=\"id\" href=\"#sp\">sp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#r8\">r8</a>,  <a class=\"id\" href=\"#r9\">r9</a>,  <a class=\"id\" href=\"#r10\">r10</a>, <a class=\"id\" href=\"#r11\">r11</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#r12\">r12</a>, <a class=\"id\" href=\"#r13\">r13</a>, <a class=\"id\" href=\"#r14\">r14</a>, <a class=\"id\" href=\"#r15\">r15</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#status\">status</a>, <a class=\"id\" href=\"#dla\">dla</a>, <a class=\"id\" href=\"#dse\">dse</a>, <a class=\"id\" href=\"#lat\">lat</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A debug store configuration.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We only support architectures that use 64bit fields.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#debug_store\">debug_store</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><a class=\"id\" href=\"#bts_buffer_base\">bts_buffer_base</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><a class=\"id\" href=\"#bts_index\">bts_index</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><a class=\"id\" href=\"#bts_absolute_maximum\">bts_absolute_maximum</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><a class=\"id\" href=\"#bts_interrupt_threshold\">bts_interrupt_threshold</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><a class=\"id\" href=\"#pebs_buffer_base\">pebs_buffer_base</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><a class=\"id\" href=\"#pebs_index\">pebs_index</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><a class=\"id\" href=\"#pebs_absolute_maximum\">pebs_absolute_maximum</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><a class=\"id\" href=\"#pebs_interrupt_threshold\">pebs_interrupt_threshold</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><a class=\"id\" href=\"#pebs_event_reset\">pebs_event_reset</a>[<a class=\"id\" href=\"#MAX_PEBS_EVENTS\">MAX_PEBS_EVENTS</a>];", 
"};", 
"", 
"static void <a class=\"id\" href=\"#init_debug_store_on_cpu\">init_debug_store_on_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#debug_store\">debug_store</a> *<a class=\"id\" href=\"#ds\">ds</a> = <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a>, <a class=\"id\" href=\"#cpu\">cpu</a>).<a class=\"id\" href=\"#ds\">ds</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ds\">ds</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wrmsr_on_cpu\">wrmsr_on_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#MSR_IA32_DS_AREA\">MSR_IA32_DS_AREA</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     (<a class=\"id\" href=\"#u32\">u32</a>)((<a class=\"id\" href=\"#u64\">u64</a>)(unsigned long)<a class=\"id\" href=\"#ds\">ds</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>     (<a class=\"id\" href=\"#u32\">u32</a>)((<a class=\"id\" href=\"#u64\">u64</a>)(unsigned long)<a class=\"id\" href=\"#ds\">ds</a> >> 32));", 
"}", 
"", 
"static void <a class=\"id\" href=\"#fini_debug_store_on_cpu\">fini_debug_store_on_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a>, <a class=\"id\" href=\"#cpu\">cpu</a>).<a class=\"id\" href=\"#ds\">ds</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wrmsr_on_cpu\">wrmsr_on_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#MSR_IA32_DS_AREA\">MSR_IA32_DS_AREA</a>, 0, 0);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#release_ds_buffers\">release_ds_buffers</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#bts\">bts</a> && !<a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#pebs\">pebs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_online_cpus\">get_online_cpus</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fini_debug_store_on_cpu\">fini_debug_store_on_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#debug_store\">debug_store</a> *<a class=\"id\" href=\"#ds\">ds</a> = <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a>, <a class=\"id\" href=\"#cpu\">cpu</a>).<a class=\"id\" href=\"#ds\">ds</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ds\">ds</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a>, <a class=\"id\" href=\"#cpu\">cpu</a>).<a class=\"id\" href=\"#ds\">ds</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>((void *)(unsigned long)<a class=\"id\" href=\"#ds\">ds</a>-><a class=\"id\" href=\"#pebs_buffer_base\">pebs_buffer_base</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>((void *)(unsigned long)<a class=\"id\" href=\"#ds\">ds</a>-><a class=\"id\" href=\"#bts_buffer_base\">bts_buffer_base</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ds\">ds</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_online_cpus\">put_online_cpus</a>();", 
"}", 
"", 
"static int <a class=\"id\" href=\"#reserve_ds_buffers\">reserve_ds_buffers</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#bts\">bts</a> && !<a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#pebs\">pebs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_online_cpus\">get_online_cpus</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#debug_store\">debug_store</a> *<a class=\"id\" href=\"#ds\">ds</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#max\">max</a>, <a class=\"id\" href=\"#thresh\">thresh</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ds\">ds</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#ds\">ds</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#ds\">ds</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a>, <a class=\"id\" href=\"#cpu\">cpu</a>).<a class=\"id\" href=\"#ds\">ds</a> = <a class=\"id\" href=\"#ds\">ds</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#bts\">bts</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#BTS_BUFFER_SIZE\">BTS_BUFFER_SIZE</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#buffer\">buffer</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a> = <a class=\"id\" href=\"#BTS_BUFFER_SIZE\">BTS_BUFFER_SIZE</a> / <a class=\"id\" href=\"#BTS_RECORD_SIZE\">BTS_RECORD_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#thresh\">thresh</a> = <a class=\"id\" href=\"#max\">max</a> / 16;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ds\">ds</a>-><a class=\"id\" href=\"#bts_buffer_base\">bts_buffer_base</a> = (<a class=\"id\" href=\"#u64\">u64</a>)(unsigned long)<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ds\">ds</a>-><a class=\"id\" href=\"#bts_index\">bts_index</a> = <a class=\"id\" href=\"#ds\">ds</a>-><a class=\"id\" href=\"#bts_buffer_base\">bts_buffer_base</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ds\">ds</a>-><a class=\"id\" href=\"#bts_absolute_maximum\">bts_absolute_maximum</a> = <a class=\"id\" href=\"#ds\">ds</a>-><a class=\"id\" href=\"#bts_buffer_base\">bts_buffer_base</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a> * <a class=\"id\" href=\"#BTS_RECORD_SIZE\">BTS_RECORD_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ds\">ds</a>-><a class=\"id\" href=\"#bts_interrupt_threshold\">bts_interrupt_threshold</a> = <a class=\"id\" href=\"#ds\">ds</a>-><a class=\"id\" href=\"#bts_absolute_maximum\">bts_absolute_maximum</a> -", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#thresh\">thresh</a> * <a class=\"id\" href=\"#BTS_RECORD_SIZE\">BTS_RECORD_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#pebs\">pebs</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#PEBS_BUFFER_SIZE\">PEBS_BUFFER_SIZE</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#buffer\">buffer</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a> = <a class=\"id\" href=\"#PEBS_BUFFER_SIZE\">PEBS_BUFFER_SIZE</a> / <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#pebs_record_size\">pebs_record_size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ds\">ds</a>-><a class=\"id\" href=\"#pebs_buffer_base\">pebs_buffer_base</a> = (<a class=\"id\" href=\"#u64\">u64</a>)(unsigned long)<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ds\">ds</a>-><a class=\"id\" href=\"#pebs_index\">pebs_index</a> = <a class=\"id\" href=\"#ds\">ds</a>-><a class=\"id\" href=\"#pebs_buffer_base\">pebs_buffer_base</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ds\">ds</a>-><a class=\"id\" href=\"#pebs_absolute_maximum\">pebs_absolute_maximum</a> = <a class=\"id\" href=\"#ds\">ds</a>-><a class=\"id\" href=\"#pebs_buffer_base\">pebs_buffer_base</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a> * <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#pebs_record_size\">pebs_record_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Always use single record PEBS</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ds\">ds</a>-><a class=\"id\" href=\"#pebs_interrupt_threshold\">pebs_interrupt_threshold</a> = <a class=\"id\" href=\"#ds\">ds</a>-><a class=\"id\" href=\"#pebs_buffer_base\">pebs_buffer_base</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#pebs_record_size\">pebs_record_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#release_ds_buffers\">release_ds_buffers</a>();", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_debug_store_on_cpu\">init_debug_store_on_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_online_cpus\">put_online_cpus</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * BTS</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static struct <a class=\"id\" href=\"#event_constraint\">event_constraint</a> <a class=\"id\" href=\"#bts_constraint\">bts_constraint</a> =", 
"<span class=\"ts\"/><a class=\"id\" href=\"#EVENT_CONSTRAINT\">EVENT_CONSTRAINT</a>(0, 1ULL << <a class=\"id\" href=\"#X86_PMC_IDX_FIXED_BTS\">X86_PMC_IDX_FIXED_BTS</a>, 0);", 
"", 
"static void <a class=\"id\" href=\"#intel_pmu_enable_bts\">intel_pmu_enable_bts</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#config\">config</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#debugctlmsr\">debugctlmsr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debugctlmsr\">debugctlmsr</a> = <a class=\"id\" href=\"#get_debugctlmsr\">get_debugctlmsr</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debugctlmsr\">debugctlmsr</a> |= <a class=\"id\" href=\"#DEBUGCTLMSR_TR\">DEBUGCTLMSR_TR</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debugctlmsr\">debugctlmsr</a> |= <a class=\"id\" href=\"#DEBUGCTLMSR_BTS\">DEBUGCTLMSR_BTS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debugctlmsr\">debugctlmsr</a> |= <a class=\"id\" href=\"#DEBUGCTLMSR_BTINT\">DEBUGCTLMSR_BTINT</a>;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#config\">config</a> &amp; <a class=\"id\" href=\"#ARCH_PERFMON_EVENTSEL_OS\">ARCH_PERFMON_EVENTSEL_OS</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debugctlmsr\">debugctlmsr</a> |= <a class=\"id\" href=\"#DEBUGCTLMSR_BTS_OFF_OS\">DEBUGCTLMSR_BTS_OFF_OS</a>;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#config\">config</a> &amp; <a class=\"id\" href=\"#ARCH_PERFMON_EVENTSEL_USR\">ARCH_PERFMON_EVENTSEL_USR</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debugctlmsr\">debugctlmsr</a> |= <a class=\"id\" href=\"#DEBUGCTLMSR_BTS_OFF_USR\">DEBUGCTLMSR_BTS_OFF_USR</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_debugctlmsr\">update_debugctlmsr</a>(<a class=\"id\" href=\"#debugctlmsr\">debugctlmsr</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#intel_pmu_disable_bts\">intel_pmu_disable_bts</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a> *<a class=\"id\" href=\"#cpuc\">cpuc</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#debugctlmsr\">debugctlmsr</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#ds\">ds</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debugctlmsr\">debugctlmsr</a> = <a class=\"id\" href=\"#get_debugctlmsr\">get_debugctlmsr</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debugctlmsr\">debugctlmsr</a> &=", 
"<span class=\"ts\"/><span class=\"ts\"/>~(<a class=\"id\" href=\"#DEBUGCTLMSR_TR\">DEBUGCTLMSR_TR</a> | <a class=\"id\" href=\"#DEBUGCTLMSR_BTS\">DEBUGCTLMSR_BTS</a> | <a class=\"id\" href=\"#DEBUGCTLMSR_BTINT\">DEBUGCTLMSR_BTINT</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#DEBUGCTLMSR_BTS_OFF_OS\">DEBUGCTLMSR_BTS_OFF_OS</a> | <a class=\"id\" href=\"#DEBUGCTLMSR_BTS_OFF_USR\">DEBUGCTLMSR_BTS_OFF_USR</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_debugctlmsr\">update_debugctlmsr</a>(<a class=\"id\" href=\"#debugctlmsr\">debugctlmsr</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#intel_pmu_drain_bts_buffer\">intel_pmu_drain_bts_buffer</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a> *<a class=\"id\" href=\"#cpuc\">cpuc</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#debug_store\">debug_store</a> *<a class=\"id\" href=\"#ds\">ds</a> = <a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#ds\">ds</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bts_record\">bts_record</a> {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><a class=\"id\" href=\"#from\">from</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#events\">events</a>[<a class=\"id\" href=\"#X86_PMC_IDX_FIXED_BTS\">X86_PMC_IDX_FIXED_BTS</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bts_record\">bts_record</a> *<a class=\"id\" href=\"#at\">at</a>, *<a class=\"id\" href=\"#top\">top</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_output_handle\">perf_output_handle</a> <a class=\"id\" href=\"#handle\">handle</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_header\">perf_event_header</a> <a class=\"id\" href=\"#header\">header</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_sample_data\">perf_sample_data</a> <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> <a class=\"id\" href=\"#regs\">regs</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#event\">event</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ds\">ds</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#at\">at</a>  = (struct <a class=\"id\" href=\"#bts_record\">bts_record</a> *)(unsigned long)<a class=\"id\" href=\"#ds\">ds</a>-><a class=\"id\" href=\"#bts_buffer_base\">bts_buffer_base</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#top\">top</a> = (struct <a class=\"id\" href=\"#bts_record\">bts_record</a> *)(unsigned long)<a class=\"id\" href=\"#ds\">ds</a>-><a class=\"id\" href=\"#bts_index\">bts_index</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#top\">top</a> <= <a class=\"id\" href=\"#at\">at</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ds\">ds</a>-><a class=\"id\" href=\"#bts_index\">bts_index</a> = <a class=\"id\" href=\"#ds\">ds</a>-><a class=\"id\" href=\"#bts_buffer_base\">bts_buffer_base</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_sample_data_init\">perf_sample_data_init</a>(&amp;<a class=\"id\" href=\"#data\">data</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#period\">period</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>.<a class=\"id\" href=\"#last_period\">last_period</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>.<a class=\"id\" href=\"#ip\">ip</a>     = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Prepare a generic sample, i.e. fill in the invariant fields.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We will overwrite the from and to address before we output</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the sample.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_prepare_sample\">perf_prepare_sample</a>(&amp;<a class=\"id\" href=\"#header\">header</a>, &amp;<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#event\">event</a>, &amp;<a class=\"id\" href=\"#regs\">regs</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#perf_output_begin\">perf_output_begin</a>(&amp;<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#header\">header</a>.<a class=\"id\" href=\"#size\">size</a> * (<a class=\"id\" href=\"#top\">top</a> - <a class=\"id\" href=\"#at\">at</a>), 1, 1))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>for (; <a class=\"id\" href=\"#at\">at</a> &lt; <a class=\"id\" href=\"#top\">top</a>; <a class=\"id\" href=\"#at\">at</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#ip\">ip</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#at\">at</a>-><a class=\"id\" href=\"#from\">from</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#addr\">addr</a><span class=\"ts\"/>= <a class=\"id\" href=\"#at\">at</a>-><a class=\"id\" href=\"#to\">to</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_output_sample\">perf_output_sample</a>(&amp;<a class=\"id\" href=\"#handle\">handle</a>, &amp;<a class=\"id\" href=\"#header\">header</a>, &amp;<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_output_end\">perf_output_end</a>(&amp;<a class=\"id\" href=\"#handle\">handle</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* There's new data available. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>.<a class=\"id\" href=\"#interrupts\">interrupts</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#pending_kill\">pending_kill</a> = <a class=\"id\" href=\"#POLL_IN\">POLL_IN</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * PEBS</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static struct <a class=\"id\" href=\"#event_constraint\">event_constraint</a> <a class=\"id\" href=\"#intel_core_pebs_events\">intel_core_pebs_events</a>[] = {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PEBS_EVENT_CONSTRAINT\">PEBS_EVENT_CONSTRAINT</a>(0x00c0, 0x1), <span class=\"comment\">/* INSTR_RETIRED.ANY */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PEBS_EVENT_CONSTRAINT\">PEBS_EVENT_CONSTRAINT</a>(0xfec1, 0x1), <span class=\"comment\">/* X87_OPS_RETIRED.ANY */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PEBS_EVENT_CONSTRAINT\">PEBS_EVENT_CONSTRAINT</a>(0x00c5, 0x1), <span class=\"comment\">/* BR_INST_RETIRED.MISPRED */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PEBS_EVENT_CONSTRAINT\">PEBS_EVENT_CONSTRAINT</a>(0x1fc7, 0x1), <span class=\"comment\">/* SIMD_INST_RETURED.ANY */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PEBS_EVENT_CONSTRAINT\">PEBS_EVENT_CONSTRAINT</a>(0x01cb, 0x1), <span class=\"comment\">/* MEM_LOAD_RETIRED.L1D_MISS */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PEBS_EVENT_CONSTRAINT\">PEBS_EVENT_CONSTRAINT</a>(0x02cb, 0x1), <span class=\"comment\">/* MEM_LOAD_RETIRED.L1D_LINE_MISS */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PEBS_EVENT_CONSTRAINT\">PEBS_EVENT_CONSTRAINT</a>(0x04cb, 0x1), <span class=\"comment\">/* MEM_LOAD_RETIRED.L2_MISS */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PEBS_EVENT_CONSTRAINT\">PEBS_EVENT_CONSTRAINT</a>(0x08cb, 0x1), <span class=\"comment\">/* MEM_LOAD_RETIRED.L2_LINE_MISS */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PEBS_EVENT_CONSTRAINT\">PEBS_EVENT_CONSTRAINT</a>(0x10cb, 0x1), <span class=\"comment\">/* MEM_LOAD_RETIRED.DTLB_MISS */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#EVENT_CONSTRAINT_END\">EVENT_CONSTRAINT_END</a>", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#event_constraint\">event_constraint</a> <a class=\"id\" href=\"#intel_nehalem_pebs_events\">intel_nehalem_pebs_events</a>[] = {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PEBS_EVENT_CONSTRAINT\">PEBS_EVENT_CONSTRAINT</a>(0x00c0, 0xf), <span class=\"comment\">/* INSTR_RETIRED.ANY */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PEBS_EVENT_CONSTRAINT\">PEBS_EVENT_CONSTRAINT</a>(0xfec1, 0xf), <span class=\"comment\">/* X87_OPS_RETIRED.ANY */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PEBS_EVENT_CONSTRAINT\">PEBS_EVENT_CONSTRAINT</a>(0x00c5, 0xf), <span class=\"comment\">/* BR_INST_RETIRED.MISPRED */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PEBS_EVENT_CONSTRAINT\">PEBS_EVENT_CONSTRAINT</a>(0x1fc7, 0xf), <span class=\"comment\">/* SIMD_INST_RETURED.ANY */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PEBS_EVENT_CONSTRAINT\">PEBS_EVENT_CONSTRAINT</a>(0x01cb, 0xf), <span class=\"comment\">/* MEM_LOAD_RETIRED.L1D_MISS */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PEBS_EVENT_CONSTRAINT\">PEBS_EVENT_CONSTRAINT</a>(0x02cb, 0xf), <span class=\"comment\">/* MEM_LOAD_RETIRED.L1D_LINE_MISS */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PEBS_EVENT_CONSTRAINT\">PEBS_EVENT_CONSTRAINT</a>(0x04cb, 0xf), <span class=\"comment\">/* MEM_LOAD_RETIRED.L2_MISS */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PEBS_EVENT_CONSTRAINT\">PEBS_EVENT_CONSTRAINT</a>(0x08cb, 0xf), <span class=\"comment\">/* MEM_LOAD_RETIRED.L2_LINE_MISS */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PEBS_EVENT_CONSTRAINT\">PEBS_EVENT_CONSTRAINT</a>(0x10cb, 0xf), <span class=\"comment\">/* MEM_LOAD_RETIRED.DTLB_MISS */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#EVENT_CONSTRAINT_END\">EVENT_CONSTRAINT_END</a>", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#event_constraint\">event_constraint</a> *", 
"<a class=\"id\" href=\"#intel_pebs_constraints\">intel_pebs_constraints</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#event_constraint\">event_constraint</a> *<a class=\"id\" href=\"#c\">c</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#precise_ip\">precise_ip</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#pebs_constraints\">pebs_constraints</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_event_constraint\">for_each_event_constraint</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#pebs_constraints\">pebs_constraints</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>.<a class=\"id\" href=\"#config\">config</a> &amp; <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#cmask\">cmask</a>) == <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#code\">code</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#emptyconstraint\">emptyconstraint</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#intel_pmu_pebs_enable\">intel_pmu_pebs_enable</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a> *<a class=\"id\" href=\"#cpuc\">cpuc</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hw_perf_event\">hw_perf_event</a> *<a class=\"id\" href=\"#hwc\">hwc</a> = &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#config\">config</a> &= ~<a class=\"id\" href=\"#ARCH_PERFMON_EVENTSEL_INT\">ARCH_PERFMON_EVENTSEL_INT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#pebs_enabled\">pebs_enabled</a> |= 1ULL << <a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#idx\">idx</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#enabled\">enabled</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#intel_cap\">intel_cap</a>.<a class=\"id\" href=\"#pebs_trap\">pebs_trap</a> && <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#precise_ip\">precise_ip</a> &gt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#intel_pmu_lbr_enable\">intel_pmu_lbr_enable</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#intel_pmu_pebs_disable\">intel_pmu_pebs_disable</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a> *<a class=\"id\" href=\"#cpuc\">cpuc</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hw_perf_event\">hw_perf_event</a> *<a class=\"id\" href=\"#hwc\">hwc</a> = &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#pebs_enabled\">pebs_enabled</a> &= ~(1ULL << <a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#idx\">idx</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#enabled\">enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wrmsrl\">wrmsrl</a>(<a class=\"id\" href=\"#MSR_IA32_PEBS_ENABLE\">MSR_IA32_PEBS_ENABLE</a>, <a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#pebs_enabled\">pebs_enabled</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#config\">config</a> |= <a class=\"id\" href=\"#ARCH_PERFMON_EVENTSEL_INT\">ARCH_PERFMON_EVENTSEL_INT</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#intel_cap\">intel_cap</a>.<a class=\"id\" href=\"#pebs_trap\">pebs_trap</a> && <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#precise_ip\">precise_ip</a> &gt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#intel_pmu_lbr_disable\">intel_pmu_lbr_disable</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#intel_pmu_pebs_enable_all\">intel_pmu_pebs_enable_all</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a> *<a class=\"id\" href=\"#cpuc\">cpuc</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#pebs_enabled\">pebs_enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wrmsrl\">wrmsrl</a>(<a class=\"id\" href=\"#MSR_IA32_PEBS_ENABLE\">MSR_IA32_PEBS_ENABLE</a>, <a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#pebs_enabled\">pebs_enabled</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#intel_pmu_pebs_disable_all\">intel_pmu_pebs_disable_all</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a> *<a class=\"id\" href=\"#cpuc\">cpuc</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#pebs_enabled\">pebs_enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wrmsrl\">wrmsrl</a>(<a class=\"id\" href=\"#MSR_IA32_PEBS_ENABLE\">MSR_IA32_PEBS_ENABLE</a>, 0);", 
"}", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#insn\">insn</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#kernel_ip\">kernel_ip</a>(unsigned long <a class=\"id\" href=\"#ip\">ip</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ip\">ip</a> &gt; <a class=\"id\" href=\"#PAGE_OFFSET\">PAGE_OFFSET</a>;", 
"#else", 
"<span class=\"ts\"/>return (long)<a class=\"id\" href=\"#ip\">ip</a> &lt; 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static int <a class=\"id\" href=\"#intel_pmu_pebs_fixup_ip\">intel_pmu_pebs_fixup_ip</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a> *<a class=\"id\" href=\"#cpuc\">cpuc</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#from\">from</a> = <a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#lbr_entries\">lbr_entries</a>[0].<a class=\"id\" href=\"#from\">from</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#old_to\">old_to</a>, <a class=\"id\" href=\"#to\">to</a> = <a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#lbr_entries\">lbr_entries</a>[0].<a class=\"id\" href=\"#to\">to</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ip\">ip</a> = <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We don't need to fixup if the PEBS assist is fault like</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#intel_cap\">intel_cap</a>.<a class=\"id\" href=\"#pebs_trap\">pebs_trap</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * No LBR entry, no basic block, no rewinding</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#lbr_stack\">lbr_stack</a>.<a class=\"id\" href=\"#nr\">nr</a> || !<a class=\"id\" href=\"#from\">from</a> || !<a class=\"id\" href=\"#to\">to</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Basic blocks should never cross user/kernel boundaries</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kernel_ip\">kernel_ip</a>(<a class=\"id\" href=\"#ip\">ip</a>) != <a class=\"id\" href=\"#kernel_ip\">kernel_ip</a>(<a class=\"id\" href=\"#to\">to</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * unsigned math, either ip is before the start (impossible) or</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the basic block is larger than 1 page (sanity)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#ip\">ip</a> - <a class=\"id\" href=\"#to\">to</a>) &gt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We sampled a branch insn, rewind using the LBR stack</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ip\">ip</a> == <a class=\"id\" href=\"#to\">to</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a> = <a class=\"id\" href=\"#from\">from</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#insn\">insn</a> <a class=\"id\" href=\"#insn\">insn</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#MAX_INSN_SIZE\">MAX_INSN_SIZE</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#kaddr\">kaddr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old_to\">old_to</a> = <a class=\"id\" href=\"#to\">to</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#kernel_ip\">kernel_ip</a>(<a class=\"id\" href=\"#ip\">ip</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#bytes\">bytes</a>, <a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#MAX_INSN_SIZE\">MAX_INSN_SIZE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bytes\">bytes</a> = <a class=\"id\" href=\"#copy_from_user_nmi\">copy_from_user_nmi</a>(<a class=\"id\" href=\"#buf\">buf</a>, (void <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bytes\">bytes</a> != <a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kaddr\">kaddr</a> = <a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kaddr\">kaddr</a> = (void *)<a class=\"id\" href=\"#to\">to</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kernel_insn_init\">kernel_insn_init</a>(&amp;<a class=\"id\" href=\"#insn\">insn</a>, <a class=\"id\" href=\"#kaddr\">kaddr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn_get_length\">insn_get_length</a>(&amp;<a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a> += <a class=\"id\" href=\"#insn\">insn</a>.<a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#to\">to</a> &lt; <a class=\"id\" href=\"#ip\">ip</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#to\">to</a> == <a class=\"id\" href=\"#ip\">ip</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a> = <a class=\"id\" href=\"#old_to\">old_to</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Even though we decoded the basic block, the instruction stream</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * never matched the given IP, either the TO or the IP got corrupted.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#intel_pmu_save_and_restart\">intel_pmu_save_and_restart</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"static void <a class=\"id\" href=\"#__intel_pmu_pebs_event\">__intel_pmu_pebs_event</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#iregs\">iregs</a>, void *<a class=\"id\" href=\"#__pebs\">__pebs</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We cast to pebs_record_core since that is a subset of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * both formats and we don't use the other fields in this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * routine.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pebs_record_core\">pebs_record_core</a> *<a class=\"id\" href=\"#pebs\">pebs</a> = <a class=\"id\" href=\"#__pebs\">__pebs</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_sample_data\">perf_sample_data</a> <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> <a class=\"id\" href=\"#regs\">regs</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#intel_pmu_save_and_restart\">intel_pmu_save_and_restart</a>(<a class=\"id\" href=\"#event\">event</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_sample_data_init\">perf_sample_data_init</a>(&amp;<a class=\"id\" href=\"#data\">data</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#period\">period</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>.<a class=\"id\" href=\"#last_period\">last_period</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We use the interrupt regs as a base because the PEBS record</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * does not contain a full regs set, specifically it seems to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * lack segment descriptors, which get used by things like</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * user_mode().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In the simple case fix up only the IP and BP,SP regs, for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * PERF_SAMPLE_IP and PERF_SAMPLE_CALLCHAIN to function properly.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A possible PERF_SAMPLE_REGS will have to transfer all regs.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a> = *<a class=\"id\" href=\"#iregs\">iregs</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>.<a class=\"id\" href=\"#ip\">ip</a> = <a class=\"id\" href=\"#pebs\">pebs</a>-><a class=\"id\" href=\"#ip\">ip</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>.<a class=\"id\" href=\"#bp\">bp</a> = <a class=\"id\" href=\"#pebs\">pebs</a>-><a class=\"id\" href=\"#bp\">bp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>.<a class=\"id\" href=\"#sp\">sp</a> = <a class=\"id\" href=\"#pebs\">pebs</a>-><a class=\"id\" href=\"#sp\">sp</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#precise_ip\">precise_ip</a> &gt; 1 && <a class=\"id\" href=\"#intel_pmu_pebs_fixup_ip\">intel_pmu_pebs_fixup_ip</a>(&amp;<a class=\"id\" href=\"#regs\">regs</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>.<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#PERF_EFLAGS_EXACT\">PERF_EFLAGS_EXACT</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>.<a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#PERF_EFLAGS_EXACT\">PERF_EFLAGS_EXACT</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#perf_event_overflow\">perf_event_overflow</a>(<a class=\"id\" href=\"#event\">event</a>, 1, &amp;<a class=\"id\" href=\"#data\">data</a>, &amp;<a class=\"id\" href=\"#regs\">regs</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#x86_pmu_stop\">x86_pmu_stop</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#intel_pmu_drain_pebs_core\">intel_pmu_drain_pebs_core</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#iregs\">iregs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a> *<a class=\"id\" href=\"#cpuc\">cpuc</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#cpu_hw_events\">cpu_hw_events</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#debug_store\">debug_store</a> *<a class=\"id\" href=\"#ds\">ds</a> = <a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#ds\">ds</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#events\">events</a>[0]; <span class=\"comment\">/* PMC0 only */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pebs_record_core\">pebs_record_core</a> *<a class=\"id\" href=\"#at\">at</a>, *<a class=\"id\" href=\"#top\">top</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ds\">ds</a> || !<a class=\"id\" href=\"#x86_pmu\">x86_pmu</a>.<a class=\"id\" href=\"#pebs\">pebs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#at\">at</a>  = (struct <a class=\"id\" href=\"#pebs_record_core\">pebs_record_core</a> *)(unsigned long)<a class=\"id\" href=\"#ds\">ds</a>-><a class=\"id\" href=\"#pebs_buffer_base\">pebs_buffer_base</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#top\">top</a> = (struct <a class=\"id\" href=\"#pebs_record_core\">pebs_record_core</a> *)(unsigned long)<a class=\"id\" href=\"#ds\">ds</a>-><a class=\"id\" href=\"#pebs_index\">pebs_index</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Whatever else happens, drain the thing</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ds\">ds</a>-><a class=\"id\" href=\"#pebs_index\">pebs_index</a> = <a class=\"id\" href=\"#ds\">ds</a>-><a class=\"id\" href=\"#pebs_buffer_base\">pebs_buffer_base</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(0, <a class=\"id\" href=\"#cpuc\">cpuc</a>-><a class=\"id\" href=\"#active_mask\">active_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(!<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#precise_ip\">precise_ip</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#top\">top</a> - <a class=\"id\" href=\"#at\">at</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Should not happen, we program the threshold at 1 and do not</span>", 
];
xr_frag_insert('l/0d/e27fde5d0e03e9970e8e9f24e55b7f0c881d53.xr', __xr_tmp);
