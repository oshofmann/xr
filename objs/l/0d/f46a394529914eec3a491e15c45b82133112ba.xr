var __xr_tmp = [
"", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sv_max_payload\">sv_max_payload</a>;<span class=\"ts\"/><span class=\"comment\">/* datagram payload size */</span>", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sv_max_mesg\">sv_max_mesg</a>;<span class=\"ts\"/><span class=\"comment\">/* max_payload + 1 page for overheads */</span>", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sv_xdrsize\">sv_xdrsize</a>;<span class=\"ts\"/><span class=\"comment\">/* XDR buffer size */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#sv_permsocks\">sv_permsocks</a>;<span class=\"ts\"/><span class=\"comment\">/* all permanent sockets */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#sv_tempsocks\">sv_tempsocks</a>;<span class=\"ts\"/><span class=\"comment\">/* all temporary sockets */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sv_tmpcnt\">sv_tmpcnt</a>;<span class=\"ts\"/><span class=\"comment\">/* count of temporary sockets */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timer_list\">timer_list</a><span class=\"ts\"/><a class=\"id\" href=\"#sv_temptimer\">sv_temptimer</a>;<span class=\"ts\"/><span class=\"comment\">/* timer for aging temporary sockets */</span>", 
"", 
"<span class=\"ts\"/>char *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sv_name\">sv_name</a>;<span class=\"ts\"/><span class=\"comment\">/* service name */</span>", 
"", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sv_nrpools\">sv_nrpools</a>;<span class=\"ts\"/><span class=\"comment\">/* number of thread pools */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#svc_pool\">svc_pool</a> *<span class=\"ts\"/><a class=\"id\" href=\"#sv_pools\">sv_pools</a>;<span class=\"ts\"/><span class=\"comment\">/* array of thread pools */</span>", 
"", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#sv_shutdown\">sv_shutdown</a>)(struct <a class=\"id\" href=\"#svc_serv\">svc_serv</a> *<a class=\"id\" href=\"#serv\">serv</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Callback to use when last thread</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * exits.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sv_module\">sv_module</a>;<span class=\"ts\"/><span class=\"comment\">/* optional module to count when</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * adding threads */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#svc_thread_fn\">svc_thread_fn</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sv_function\">sv_function</a>;<span class=\"ts\"/><span class=\"comment\">/* main function for threads */</span>", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_NFS_V4_1\">CONFIG_NFS_V4_1</a>)", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#sv_cb_list\">sv_cb_list</a>;<span class=\"ts\"/><span class=\"comment\">/* queue for callback requests</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * that arrive over the same</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * connection */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sv_cb_lock\">sv_cb_lock</a>;<span class=\"ts\"/><span class=\"comment\">/* protects the svc_cb_list */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a><span class=\"ts\"/><a class=\"id\" href=\"#sv_cb_waitq\">sv_cb_waitq</a>;<span class=\"ts\"/><span class=\"comment\">/* sleep here if there are no</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * entries in the svc_cb_list */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#svc_xprt\">svc_xprt</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#bc_xprt\">bc_xprt</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_NFS_V4_1 */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We use sv_nrthreads as a reference count.  svc_destroy() drops</span>", 
"<span class=\"comment\"> * this refcount, so we need to bump it up around operations that</span>", 
"<span class=\"comment\"> * change the number of threads.  Horrible, but there it is.</span>", 
"<span class=\"comment\"> * Should be called with the BKL held.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#svc_get\">svc_get</a>(struct <a class=\"id\" href=\"#svc_serv\">svc_serv</a> *<a class=\"id\" href=\"#serv\">serv</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serv\">serv</a>-><a class=\"id\" href=\"#sv_nrthreads\">sv_nrthreads</a>++;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Maximum payload size supported by a kernel RPC server.</span>", 
"<span class=\"comment\"> * This is use to determine the max number of pages nfsd is</span>", 
"<span class=\"comment\"> * willing to return in a single READ operation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * These happen to all be powers of 2, which is not strictly</span>", 
"<span class=\"comment\"> * necessary but helps enforce the real limitation, which is</span>", 
"<span class=\"comment\"> * that they should be multiples of PAGE_CACHE_SIZE.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For UDP transports, a block plus NFS,RPC, and UDP headers</span>", 
"<span class=\"comment\"> * has to fit into the IP datagram limit of 64K.  The largest</span>", 
"<span class=\"comment\"> * feasible number for all known page sizes is probably 48K,</span>", 
"<span class=\"comment\"> * but we choose 32K here.  This is the same as the historical</span>", 
"<span class=\"comment\"> * Linux limit; someone who cares more about NFS/UDP performance</span>", 
"<span class=\"comment\"> * can test a larger number.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For TCP transports we have more freedom.  A size of 1MB is</span>", 
"<span class=\"comment\"> * chosen to match the client limit.  Other OSes are known to</span>", 
"<span class=\"comment\"> * have larger limits, but those numbers are probably beyond</span>", 
"<span class=\"comment\"> * the point of diminishing returns.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RPCSVC_MAXPAYLOAD\">RPCSVC_MAXPAYLOAD</a><span class=\"ts\"/>(1*1024*1024u)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RPCSVC_MAXPAYLOAD_TCP\">RPCSVC_MAXPAYLOAD_TCP</a><span class=\"ts\"/><a class=\"id\" href=\"#RPCSVC_MAXPAYLOAD\">RPCSVC_MAXPAYLOAD</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RPCSVC_MAXPAYLOAD_UDP\">RPCSVC_MAXPAYLOAD_UDP</a><span class=\"ts\"/>(32*1024u)", 
"", 
"extern <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#svc_max_payload\">svc_max_payload</a>(const struct <a class=\"id\" href=\"#svc_rqst\">svc_rqst</a> *<a class=\"id\" href=\"#rqstp\">rqstp</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * RPC Requsts and replies are stored in one or more pages.</span>", 
"<span class=\"comment\"> * We maintain an array of pages for each server thread.</span>", 
"<span class=\"comment\"> * Requests are copied into these pages as they arrive.  Remaining</span>", 
"<span class=\"comment\"> * pages are available to write the reply into.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Pages are sent using -&gt;sendpage so each server thread needs to</span>", 
"<span class=\"comment\"> * allocate more to replace those used in sending.  To help keep track</span>", 
"<span class=\"comment\"> * of these pages we have a receive list where all pages initialy live,</span>", 
"<span class=\"comment\"> * and a send list where pages are moved to when there are to be part</span>", 
"<span class=\"comment\"> * of a reply.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We use xdr_buf for holding responses as it fits well with NFS</span>", 
"<span class=\"comment\"> * read responses (that have a header, and some data pages, and possibly</span>", 
"<span class=\"comment\"> * a tail) and means we can share some client side routines.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The xdr_buf.head kvec always points to the first page in the rq_*pages</span>", 
"<span class=\"comment\"> * list.  The xdr_buf.pages pointer points to the second page on that</span>", 
"<span class=\"comment\"> * list.  xdr_buf.tail points to the end of the first page.</span>", 
"<span class=\"comment\"> * This assumes that the non-page part of an rpc reply will fit</span>", 
"<span class=\"comment\"> * in a page - NFSd ensures this.  lockd also has no trouble.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Each request/reply pair can have at most one \"payload\", plus two pages,</span>", 
"<span class=\"comment\"> * one for the request, and one for the reply.</span>", 
"<span class=\"comment\"> * We using -&gt;sendfile to return read data, we might need one extra page</span>", 
"<span class=\"comment\"> * if the request is not page-aligned.  So add another '1'.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RPCSVC_MAXPAGES\">RPCSVC_MAXPAGES</a><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#RPCSVC_MAXPAYLOAD\">RPCSVC_MAXPAYLOAD</a>+<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>-1)/<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>+ 2 + 1)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#svc_getnl\">svc_getnl</a>(struct <a class=\"id\" href=\"#kvec\">kvec</a> *<a class=\"id\" href=\"#iov\">iov</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#val\">val</a>, *<a class=\"id\" href=\"#vp\">vp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vp\">vp</a> = <a class=\"id\" href=\"#iov\">iov</a>-><a class=\"id\" href=\"#iov_base\">iov_base</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = *<a class=\"id\" href=\"#vp\">vp</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iov\">iov</a>-><a class=\"id\" href=\"#iov_base\">iov_base</a> = (void*)<a class=\"id\" href=\"#vp\">vp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iov\">iov</a>-><a class=\"id\" href=\"#iov_len\">iov_len</a> -= sizeof(<a class=\"id\" href=\"#__be32\">__be32</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ntohl\">ntohl</a>(<a class=\"id\" href=\"#val\">val</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#svc_putnl\">svc_putnl</a>(struct <a class=\"id\" href=\"#kvec\">kvec</a> *<a class=\"id\" href=\"#iov\">iov</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be32\">__be32</a> *<a class=\"id\" href=\"#vp\">vp</a> = <a class=\"id\" href=\"#iov\">iov</a>-><a class=\"id\" href=\"#iov_base\">iov_base</a> + <a class=\"id\" href=\"#iov\">iov</a>-><a class=\"id\" href=\"#iov_len\">iov_len</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#vp\">vp</a> = <a class=\"id\" href=\"#htonl\">htonl</a>(<a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iov\">iov</a>-><a class=\"id\" href=\"#iov_len\">iov_len</a> += sizeof(<a class=\"id\" href=\"#__be32\">__be32</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#svc_getu32\">svc_getu32</a>(struct <a class=\"id\" href=\"#kvec\">kvec</a> *<a class=\"id\" href=\"#iov\">iov</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#val\">val</a>, *<a class=\"id\" href=\"#vp\">vp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vp\">vp</a> = <a class=\"id\" href=\"#iov\">iov</a>-><a class=\"id\" href=\"#iov_base\">iov_base</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = *<a class=\"id\" href=\"#vp\">vp</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iov\">iov</a>-><a class=\"id\" href=\"#iov_base\">iov_base</a> = (void*)<a class=\"id\" href=\"#vp\">vp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iov\">iov</a>-><a class=\"id\" href=\"#iov_len\">iov_len</a> -= sizeof(<a class=\"id\" href=\"#__be32\">__be32</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#val\">val</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#svc_ungetu32\">svc_ungetu32</a>(struct <a class=\"id\" href=\"#kvec\">kvec</a> *<a class=\"id\" href=\"#iov\">iov</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be32\">__be32</a> *<a class=\"id\" href=\"#vp\">vp</a> = (<a class=\"id\" href=\"#__be32\">__be32</a> *)<a class=\"id\" href=\"#iov\">iov</a>-><a class=\"id\" href=\"#iov_base\">iov_base</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iov\">iov</a>-><a class=\"id\" href=\"#iov_base\">iov_base</a> = (void *)(<a class=\"id\" href=\"#vp\">vp</a> - 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iov\">iov</a>-><a class=\"id\" href=\"#iov_len\">iov_len</a> += sizeof(*<a class=\"id\" href=\"#vp\">vp</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#svc_putu32\">svc_putu32</a>(struct <a class=\"id\" href=\"#kvec\">kvec</a> *<a class=\"id\" href=\"#iov\">iov</a>, <a class=\"id\" href=\"#__be32\">__be32</a> <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be32\">__be32</a> *<a class=\"id\" href=\"#vp\">vp</a> = <a class=\"id\" href=\"#iov\">iov</a>-><a class=\"id\" href=\"#iov_base\">iov_base</a> + <a class=\"id\" href=\"#iov\">iov</a>-><a class=\"id\" href=\"#iov_len\">iov_len</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#vp\">vp</a> = <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iov\">iov</a>-><a class=\"id\" href=\"#iov_len\">iov_len</a> += sizeof(<a class=\"id\" href=\"#__be32\">__be32</a>);", 
"}", 
"", 
"union <a class=\"id\" href=\"#svc_addr_u\">svc_addr_u</a> {", 
"    struct <a class=\"id\" href=\"#in_addr\">in_addr</a><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a>;", 
"    struct <a class=\"id\" href=\"#in6_addr\">in6_addr</a><span class=\"ts\"/><a class=\"id\" href=\"#addr6\">addr6</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The context of a single thread, including the request currently being</span>", 
"<span class=\"comment\"> * processed.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#svc_rqst\">svc_rqst</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#rq_list\">rq_list</a>;<span class=\"ts\"/><span class=\"comment\">/* idle list */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#rq_all\">rq_all</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* all threads list */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#svc_xprt\">svc_xprt</a> *<span class=\"ts\"/><a class=\"id\" href=\"#rq_xprt\">rq_xprt</a>;<span class=\"ts\"/><span class=\"comment\">/* transport ptr */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sockaddr_storage\">sockaddr_storage</a><span class=\"ts\"/><a class=\"id\" href=\"#rq_addr\">rq_addr</a>;<span class=\"ts\"/><span class=\"comment\">/* peer address */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq_addrlen\">rq_addrlen</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#svc_serv\">svc_serv</a> *<span class=\"ts\"/><a class=\"id\" href=\"#rq_server\">rq_server</a>;<span class=\"ts\"/><span class=\"comment\">/* RPC service definition */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#svc_pool\">svc_pool</a> *<span class=\"ts\"/><a class=\"id\" href=\"#rq_pool\">rq_pool</a>;<span class=\"ts\"/><span class=\"comment\">/* thread pool */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#svc_procedure\">svc_procedure</a> *<span class=\"ts\"/><a class=\"id\" href=\"#rq_procinfo\">rq_procinfo</a>;<span class=\"ts\"/><span class=\"comment\">/* procedure info */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#auth_ops\">auth_ops</a> *<span class=\"ts\"/><a class=\"id\" href=\"#rq_authop\">rq_authop</a>;<span class=\"ts\"/><span class=\"comment\">/* authentication flavour */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq_flavor\">rq_flavor</a>;<span class=\"ts\"/><span class=\"comment\">/* pseudoflavor */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#svc_cred\">svc_cred</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq_cred\">rq_cred</a>;<span class=\"ts\"/><span class=\"comment\">/* auth info */</span>", 
"<span class=\"ts\"/>void *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq_xprt_ctxt\">rq_xprt_ctxt</a>;<span class=\"ts\"/><span class=\"comment\">/* transport specific context ptr */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#svc_deferred_req\">svc_deferred_req</a>*<a class=\"id\" href=\"#rq_deferred\">rq_deferred</a>;<span class=\"ts\"/><span class=\"comment\">/* deferred request we are replaying */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq_usedeferral\">rq_usedeferral</a>;<span class=\"ts\"/><span class=\"comment\">/* use deferral */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq_xprt_hlen\">rq_xprt_hlen</a>;<span class=\"ts\"/><span class=\"comment\">/* xprt header len */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#xdr_buf\">xdr_buf</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq_arg\">rq_arg</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#xdr_buf\">xdr_buf</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq_res\">rq_res</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq_pages\">rq_pages</a>[<a class=\"id\" href=\"#RPCSVC_MAXPAGES\">RPCSVC_MAXPAGES</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#rq_respages\">rq_respages</a>;<span class=\"ts\"/><span class=\"comment\">/* points into rq_pages */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq_resused\">rq_resused</a>;<span class=\"ts\"/><span class=\"comment\">/* number of pages used for result */</span>", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kvec\">kvec</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq_vec\">rq_vec</a>[<a class=\"id\" href=\"#RPCSVC_MAXPAGES\">RPCSVC_MAXPAGES</a>]; <span class=\"comment\">/* generally useful.. */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be32\">__be32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq_xid\">rq_xid</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* transmission id */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq_prog\">rq_prog</a>;<span class=\"ts\"/><span class=\"comment\">/* program number */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq_vers\">rq_vers</a>;<span class=\"ts\"/><span class=\"comment\">/* program version */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq_proc\">rq_proc</a>;<span class=\"ts\"/><span class=\"comment\">/* procedure number */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq_prot\">rq_prot</a>;<span class=\"ts\"/><span class=\"comment\">/* IP protocol */</span>", 
"<span class=\"ts\"/>unsigned short", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq_secure\">rq_secure</a>  : 1;<span class=\"ts\"/><span class=\"comment\">/* secure port */</span>", 
"", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#svc_addr_u\">svc_addr_u</a><span class=\"ts\"/><a class=\"id\" href=\"#rq_daddr\">rq_daddr</a>;<span class=\"ts\"/><span class=\"comment\">/* dest addr of request</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *  - reply from here */</span>", 
"", 
"<span class=\"ts\"/>void *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq_argp\">rq_argp</a>;<span class=\"ts\"/><span class=\"comment\">/* decoded arguments */</span>", 
"<span class=\"ts\"/>void *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq_resp\">rq_resp</a>;<span class=\"ts\"/><span class=\"comment\">/* xdr'd results */</span>", 
"<span class=\"ts\"/>void *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq_auth_data\">rq_auth_data</a>;<span class=\"ts\"/><span class=\"comment\">/* flavor-specific data */</span>", 
"", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq_reserved\">rq_reserved</a>;<span class=\"ts\"/><span class=\"comment\">/* space on socket outq</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * reserved for this request</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cache_req\">cache_req</a><span class=\"ts\"/><a class=\"id\" href=\"#rq_chandle\">rq_chandle</a>;<span class=\"ts\"/><span class=\"comment\">/* handle passed to caches for </span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * request delaying </span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* Catering to nfsd */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#auth_domain\">auth_domain</a> *<span class=\"ts\"/><a class=\"id\" href=\"#rq_client\">rq_client</a>;<span class=\"ts\"/><span class=\"comment\">/* RPC peer info */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#auth_domain\">auth_domain</a> *<span class=\"ts\"/><a class=\"id\" href=\"#rq_gssclient\">rq_gssclient</a>;<span class=\"ts\"/><span class=\"comment\">/* \"gss/\"-style peer info */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#svc_cacherep\">svc_cacherep</a> *<span class=\"ts\"/><a class=\"id\" href=\"#rq_cacherep\">rq_cacherep</a>;<span class=\"ts\"/><span class=\"comment\">/* cache info */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq_splice_ok\">rq_splice_ok</a>;   <span class=\"comment\">/* turned off in gss privacy</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * to prevent encrypting page</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * cache pages */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a><span class=\"ts\"/><a class=\"id\" href=\"#rq_wait\">rq_wait</a>;<span class=\"ts\"/><span class=\"comment\">/* synchronization */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a><span class=\"ts\"/>*<a class=\"id\" href=\"#rq_task\">rq_task</a>;<span class=\"ts\"/><span class=\"comment\">/* service thread */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Rigorous type checking on sockaddr type conversions</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sockaddr_in\">sockaddr_in</a> *<a class=\"id\" href=\"#svc_addr_in\">svc_addr_in</a>(const struct <a class=\"id\" href=\"#svc_rqst\">svc_rqst</a> *<a class=\"id\" href=\"#rqst\">rqst</a>)", 
"{", 
"<span class=\"ts\"/>return (struct <a class=\"id\" href=\"#sockaddr_in\">sockaddr_in</a> *) &amp;<a class=\"id\" href=\"#rqst\">rqst</a>-><a class=\"id\" href=\"#rq_addr\">rq_addr</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sockaddr_in6\">sockaddr_in6</a> *<a class=\"id\" href=\"#svc_addr_in6\">svc_addr_in6</a>(const struct <a class=\"id\" href=\"#svc_rqst\">svc_rqst</a> *<a class=\"id\" href=\"#rqst\">rqst</a>)", 
"{", 
"<span class=\"ts\"/>return (struct <a class=\"id\" href=\"#sockaddr_in6\">sockaddr_in6</a> *) &amp;<a class=\"id\" href=\"#rqst\">rqst</a>-><a class=\"id\" href=\"#rq_addr\">rq_addr</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sockaddr\">sockaddr</a> *<a class=\"id\" href=\"#svc_addr\">svc_addr</a>(const struct <a class=\"id\" href=\"#svc_rqst\">svc_rqst</a> *<a class=\"id\" href=\"#rqst\">rqst</a>)", 
"{", 
"<span class=\"ts\"/>return (struct <a class=\"id\" href=\"#sockaddr\">sockaddr</a> *) &amp;<a class=\"id\" href=\"#rqst\">rqst</a>-><a class=\"id\" href=\"#rq_addr\">rq_addr</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check buffer bounds after decoding arguments</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#xdr_argsize_check\">xdr_argsize_check</a>(struct <a class=\"id\" href=\"#svc_rqst\">svc_rqst</a> *<a class=\"id\" href=\"#rqstp\">rqstp</a>, <a class=\"id\" href=\"#__be32\">__be32</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#cp\">cp</a> = (char *)<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kvec\">kvec</a> *<a class=\"id\" href=\"#vec\">vec</a> = &amp;<a class=\"id\" href=\"#rqstp\">rqstp</a>-><a class=\"id\" href=\"#rq_arg\">rq_arg</a>.<a class=\"id\" href=\"#head\">head</a>[0];", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cp\">cp</a> >= (char*)<a class=\"id\" href=\"#vec\">vec</a>-><a class=\"id\" href=\"#iov_base\">iov_base</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>&& <a class=\"id\" href=\"#cp\">cp</a> <= (char*)<a class=\"id\" href=\"#vec\">vec</a>-><a class=\"id\" href=\"#iov_base\">iov_base</a> + <a class=\"id\" href=\"#vec\">vec</a>-><a class=\"id\" href=\"#iov_len\">iov_len</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#xdr_ressize_check\">xdr_ressize_check</a>(struct <a class=\"id\" href=\"#svc_rqst\">svc_rqst</a> *<a class=\"id\" href=\"#rqstp\">rqstp</a>, <a class=\"id\" href=\"#__be32\">__be32</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kvec\">kvec</a> *<a class=\"id\" href=\"#vec\">vec</a> = &amp;<a class=\"id\" href=\"#rqstp\">rqstp</a>-><a class=\"id\" href=\"#rq_res\">rq_res</a>.<a class=\"id\" href=\"#head\">head</a>[0];", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#cp\">cp</a> = (char*)<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vec\">vec</a>-><a class=\"id\" href=\"#iov_len\">iov_len</a> = <a class=\"id\" href=\"#cp\">cp</a> - (char*)<a class=\"id\" href=\"#vec\">vec</a>-><a class=\"id\" href=\"#iov_base\">iov_base</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#vec\">vec</a>-><a class=\"id\" href=\"#iov_len\">iov_len</a> <= <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#svc_free_res_pages\">svc_free_res_pages</a>(struct <a class=\"id\" href=\"#svc_rqst\">svc_rqst</a> *<a class=\"id\" href=\"#rqstp\">rqstp</a>)", 
"{", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#rqstp\">rqstp</a>-><a class=\"id\" href=\"#rq_resused\">rq_resused</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pp\">pp</a> = (<a class=\"id\" href=\"#rqstp\">rqstp</a>-><a class=\"id\" href=\"#rq_respages\">rq_respages</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    --<a class=\"id\" href=\"#rqstp\">rqstp</a>-><a class=\"id\" href=\"#rq_resused\">rq_resused</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#pp\">pp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(*<a class=\"id\" href=\"#pp\">pp</a>);", 
];
xr_frag_insert('l/0d/f46a394529914eec3a491e15c45b82133112ba.xr', __xr_tmp);
