var __xr_tmp = [
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#waitqueue_active\">waitqueue_active</a>(&amp;<a class=\"id\" href=\"#log_wait\">log_wait</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__raw_get_cpu_var\">__raw_get_cpu_var</a>(<a class=\"id\" href=\"#printk_pending\">printk_pending</a>) = 1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * release_console_sem - unlock the console system</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Releases the semaphore which the caller holds on the console system</span>", 
"<span class=\"comment\"> * and the console driver list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * While the semaphore was held, console output may have been buffered</span>", 
"<span class=\"comment\"> * by printk().  If this is the case, release_console_sem() emits</span>", 
"<span class=\"comment\"> * the output prior to releasing the semaphore.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If there is output waiting for klogd, we wake it up.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * release_console_sem() may be called from any context.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#release_console_sem\">release_console_sem</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#_con_start\">_con_start</a>, <a class=\"id\" href=\"#_log_end\">_log_end</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#wake_klogd\">wake_klogd</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#console_suspended\">console_suspended</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>(&amp;<a class=\"id\" href=\"#console_sem\">console_sem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#console_may_schedule\">console_may_schedule</a> = 0;", 
"", 
"<span class=\"ts\"/>for ( ; ; ) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#logbuf_lock\">logbuf_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_klogd\">wake_klogd</a> |= <a class=\"id\" href=\"#log_start\">log_start</a> - <a class=\"id\" href=\"#log_end\">log_end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#con_start\">con_start</a> == <a class=\"id\" href=\"#log_end\">log_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Nothing to print */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#_con_start\">_con_start</a> = <a class=\"id\" href=\"#con_start\">con_start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#_log_end\">_log_end</a> = <a class=\"id\" href=\"#log_end\">log_end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#con_start\">con_start</a> = <a class=\"id\" href=\"#log_end\">log_end</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Flush */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#logbuf_lock\">logbuf_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stop_critical_timings\">stop_critical_timings</a>();<span class=\"ts\"/><span class=\"comment\">/* don't trace print latency */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call_console_drivers\">call_console_drivers</a>(<a class=\"id\" href=\"#_con_start\">_con_start</a>, <a class=\"id\" href=\"#_log_end\">_log_end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_critical_timings\">start_critical_timings</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#console_locked\">console_locked</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>(&amp;<a class=\"id\" href=\"#console_sem\">console_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#logbuf_lock\">logbuf_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#wake_klogd\">wake_klogd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_klogd\">wake_up_klogd</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#release_console_sem\">release_console_sem</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * console_conditional_schedule - yield the CPU if required</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the console code is currently allowed to sleep, and</span>", 
"<span class=\"comment\"> * if this CPU should yield the CPU to another task, do</span>", 
"<span class=\"comment\"> * so here.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Must be called within acquire_console_sem().</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__sched\">__sched</a> <a class=\"id\" href=\"#console_conditional_schedule\">console_conditional_schedule</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#console_may_schedule\">console_may_schedule</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#console_conditional_schedule\">console_conditional_schedule</a>);", 
"", 
"void <a class=\"id\" href=\"#console_unblank\">console_unblank</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#console\">console</a> *<a class=\"id\" href=\"#c\">c</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * console_unblank can no longer be called in interrupt context unless</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * oops_in_progress is set to 1..</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#oops_in_progress\">oops_in_progress</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#down_trylock\">down_trylock</a>(&amp;<a class=\"id\" href=\"#console_sem\">console_sem</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acquire_console_sem\">acquire_console_sem</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#console_locked\">console_locked</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#console_may_schedule\">console_may_schedule</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_console\">for_each_console</a>(<a class=\"id\" href=\"#c\">c</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CON_ENABLED\">CON_ENABLED</a>) && <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#unblank\">unblank</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#unblank\">unblank</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#release_console_sem\">release_console_sem</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return the console tty driver structure and its associated index</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#tty_driver\">tty_driver</a> *<a class=\"id\" href=\"#console_device\">console_device</a>(int *<a class=\"id\" href=\"#index\">index</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#console\">console</a> *<a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tty_driver\">tty_driver</a> *<a class=\"id\" href=\"#driver\">driver</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acquire_console_sem\">acquire_console_sem</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_console\">for_each_console</a>(<a class=\"id\" href=\"#c\">c</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#device\">device</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#driver\">driver</a> = <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#device\">device</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#index\">index</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#driver\">driver</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#release_console_sem\">release_console_sem</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#driver\">driver</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Prevent further output on the passed console device so that (for example)</span>", 
"<span class=\"comment\"> * serial drivers can disable console output before suspending a port, and can</span>", 
"<span class=\"comment\"> * re-enable output afterwards.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#console_stop\">console_stop</a>(struct <a class=\"id\" href=\"#console\">console</a> *<a class=\"id\" href=\"#console\">console</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acquire_console_sem\">acquire_console_sem</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#console\">console</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#CON_ENABLED\">CON_ENABLED</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#release_console_sem\">release_console_sem</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#console_stop\">console_stop</a>);", 
"", 
"void <a class=\"id\" href=\"#console_start\">console_start</a>(struct <a class=\"id\" href=\"#console\">console</a> *<a class=\"id\" href=\"#console\">console</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acquire_console_sem\">acquire_console_sem</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#console\">console</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#CON_ENABLED\">CON_ENABLED</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#release_console_sem\">release_console_sem</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#console_start\">console_start</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The console driver calls this routine during kernel initialization</span>", 
"<span class=\"comment\"> * to register the console printing procedure with printk() and to</span>", 
"<span class=\"comment\"> * print any messages that were printed by the kernel before the</span>", 
"<span class=\"comment\"> * console driver was initialized.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This can happen pretty early during the boot process (because of</span>", 
"<span class=\"comment\"> * early_printk) - sometimes before setup_arch() completes - be careful</span>", 
"<span class=\"comment\"> * of what kernel features are used - they may not be initialised yet.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * There are two types of consoles - bootconsoles (early_printk) and</span>", 
"<span class=\"comment\"> * \"real\" consoles (everything which is not a bootconsole) which are</span>", 
"<span class=\"comment\"> * handled differently.</span>", 
"<span class=\"comment\"> *  - Any number of bootconsoles can be registered at any time.</span>", 
"<span class=\"comment\"> *  - As soon as a \"real\" console is registered, all bootconsoles</span>", 
"<span class=\"comment\"> *    will be unregistered automatically.</span>", 
"<span class=\"comment\"> *  - Once a \"real\" console is registered, any attempt to register a</span>", 
"<span class=\"comment\"> *    bootconsoles will be rejected</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#register_console\">register_console</a>(struct <a class=\"id\" href=\"#console\">console</a> *<a class=\"id\" href=\"#newcon\">newcon</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#console\">console</a> *<a class=\"id\" href=\"#bcon\">bcon</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * before we register a new CON_BOOT console, make sure we don't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * already have a valid console</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#console_drivers\">console_drivers</a> && <a class=\"id\" href=\"#newcon\">newcon</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CON_BOOT\">CON_BOOT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* find the last or real console */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_console\">for_each_console</a>(<a class=\"id\" href=\"#bcon\">bcon</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#bcon\">bcon</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CON_BOOT\">CON_BOOT</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Too late to register bootconsole %s%d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newcon\">newcon</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#newcon\">newcon</a>-><a class=\"id\" href=\"#index\">index</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#console_drivers\">console_drivers</a> && <a class=\"id\" href=\"#console_drivers\">console_drivers</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CON_BOOT\">CON_BOOT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bcon\">bcon</a> = <a class=\"id\" href=\"#console_drivers\">console_drivers</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#preferred_console\">preferred_console</a> &lt; 0 || <a class=\"id\" href=\"#bcon\">bcon</a> || !<a class=\"id\" href=\"#console_drivers\">console_drivers</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preferred_console\">preferred_console</a> = <a class=\"id\" href=\"#selected_console\">selected_console</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#newcon\">newcon</a>-><a class=\"id\" href=\"#early_setup\">early_setup</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newcon\">newcon</a>-><a class=\"id\" href=\"#early_setup\">early_setup</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>See if we want to use this console driver. If we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>didn't select a console we take the first one</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>that registers here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#preferred_console\">preferred_console</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#newcon\">newcon</a>-><a class=\"id\" href=\"#index\">index</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newcon\">newcon</a>-><a class=\"id\" href=\"#index\">index</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#newcon\">newcon</a>-><a class=\"id\" href=\"#setup\">setup</a> == <a class=\"id\" href=\"#NULL\">NULL</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#newcon\">newcon</a>-><a class=\"id\" href=\"#setup\">setup</a>(<a class=\"id\" href=\"#newcon\">newcon</a>, <a class=\"id\" href=\"#NULL\">NULL</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newcon\">newcon</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#CON_ENABLED\">CON_ENABLED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#newcon\">newcon</a>-><a class=\"id\" href=\"#device\">device</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newcon\">newcon</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#CON_CONSDEV\">CON_CONSDEV</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preferred_console\">preferred_console</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>See if this console matches one we selected on</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>the command line.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAX_CMDLINECONSOLES\">MAX_CMDLINECONSOLES</a> && <a class=\"id\" href=\"#console_cmdline\">console_cmdline</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>[0];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#console_cmdline\">console_cmdline</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#newcon\">newcon</a>-><a class=\"id\" href=\"#name\">name</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#newcon\">newcon</a>-><a class=\"id\" href=\"#index\">index</a> >= 0 &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#newcon\">newcon</a>-><a class=\"id\" href=\"#index\">index</a> != <a class=\"id\" href=\"#console_cmdline\">console_cmdline</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#index\">index</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#newcon\">newcon</a>-><a class=\"id\" href=\"#index\">index</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newcon\">newcon</a>-><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#console_cmdline\">console_cmdline</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#index\">index</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_A11Y_BRAILLE_CONSOLE\">CONFIG_A11Y_BRAILLE_CONSOLE</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#console_cmdline\">console_cmdline</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#brl_options\">brl_options</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newcon\">newcon</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#CON_BRL\">CON_BRL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#braille_register_console\">braille_register_console</a>(<a class=\"id\" href=\"#newcon\">newcon</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#console_cmdline\">console_cmdline</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#index\">index</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#console_cmdline\">console_cmdline</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#options\">options</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#console_cmdline\">console_cmdline</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#brl_options\">brl_options</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#newcon\">newcon</a>-><a class=\"id\" href=\"#setup\">setup</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#newcon\">newcon</a>-><a class=\"id\" href=\"#setup\">setup</a>(<a class=\"id\" href=\"#newcon\">newcon</a>, <a class=\"id\" href=\"#console_cmdline\">console_cmdline</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#options\">options</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newcon\">newcon</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#CON_ENABLED\">CON_ENABLED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newcon\">newcon</a>-><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#console_cmdline\">console_cmdline</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#selected_console\">selected_console</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newcon\">newcon</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#CON_CONSDEV\">CON_CONSDEV</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preferred_console\">preferred_console</a> = <a class=\"id\" href=\"#selected_console\">selected_console</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#newcon\">newcon</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CON_ENABLED\">CON_ENABLED</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we have a bootconsole, and are switching to a real console,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * don't print everything out again, since when the boot console, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the real console are the same physical device, it's annoying to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * see the beginning boot messages twice</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bcon\">bcon</a> && ((<a class=\"id\" href=\"#newcon\">newcon</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; (<a class=\"id\" href=\"#CON_CONSDEV\">CON_CONSDEV</a> | <a class=\"id\" href=\"#CON_BOOT\">CON_BOOT</a>)) == <a class=\"id\" href=\"#CON_CONSDEV\">CON_CONSDEV</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newcon\">newcon</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#CON_PRINTBUFFER\">CON_PRINTBUFFER</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>Put this console in the list - keep the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>preferred driver at the head of the list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acquire_console_sem\">acquire_console_sem</a>();", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#newcon\">newcon</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CON_CONSDEV\">CON_CONSDEV</a>) || <a class=\"id\" href=\"#console_drivers\">console_drivers</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newcon\">newcon</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#console_drivers\">console_drivers</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#console_drivers\">console_drivers</a> = <a class=\"id\" href=\"#newcon\">newcon</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#newcon\">newcon</a>-><a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newcon\">newcon</a>-><a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#CON_CONSDEV\">CON_CONSDEV</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newcon\">newcon</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#console_drivers\">console_drivers</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#console_drivers\">console_drivers</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#newcon\">newcon</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#newcon\">newcon</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CON_PRINTBUFFER\">CON_PRINTBUFFER</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * release_console_sem() will print out the buffered messages</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * for us.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#logbuf_lock\">logbuf_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#con_start\">con_start</a> = <a class=\"id\" href=\"#log_start\">log_start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#logbuf_lock\">logbuf_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#release_console_sem\">release_console_sem</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * By unregistering the bootconsoles after we enable the real console</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we get the \"console xxx enabled\" message on all the consoles -</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * boot consoles, real consoles, etc - this is to ensure that end</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * users know there might be something in the kernel's log buffer that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * went to the bootconsole (that they do not see on the real console)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bcon\">bcon</a> && ((<a class=\"id\" href=\"#newcon\">newcon</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; (<a class=\"id\" href=\"#CON_CONSDEV\">CON_CONSDEV</a> | <a class=\"id\" href=\"#CON_BOOT\">CON_BOOT</a>)) == <a class=\"id\" href=\"#CON_CONSDEV\">CON_CONSDEV</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we need to iterate through twice, to make sure we print</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * everything out, before we unregister the console(s)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"console [%s%d] enabled, bootconsole disabled\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newcon\">newcon</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#newcon\">newcon</a>-><a class=\"id\" href=\"#index\">index</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_console\">for_each_console</a>(<a class=\"id\" href=\"#bcon\">bcon</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bcon\">bcon</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CON_BOOT\">CON_BOOT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unregister_console\">unregister_console</a>(<a class=\"id\" href=\"#bcon\">bcon</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"%sconsole [%s%d] enabled\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#newcon\">newcon</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CON_BOOT\">CON_BOOT</a>) ? \"boot\" : \"\" ,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newcon\">newcon</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#newcon\">newcon</a>-><a class=\"id\" href=\"#index\">index</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#register_console\">register_console</a>);", 
"", 
"int <a class=\"id\" href=\"#unregister_console\">unregister_console</a>(struct <a class=\"id\" href=\"#console\">console</a> *<a class=\"id\" href=\"#console\">console</a>)", 
"{", 
"        struct <a class=\"id\" href=\"#console\">console</a> *<a class=\"id\" href=\"#a\">a</a>, *<a class=\"id\" href=\"#b\">b</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a> = 1;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_A11Y_BRAILLE_CONSOLE\">CONFIG_A11Y_BRAILLE_CONSOLE</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#console\">console</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CON_BRL\">CON_BRL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#braille_unregister_console\">braille_unregister_console</a>(<a class=\"id\" href=\"#console\">console</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acquire_console_sem\">acquire_console_sem</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#console_drivers\">console_drivers</a> == <a class=\"id\" href=\"#console\">console</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#console_drivers\">console_drivers</a>=<a class=\"id\" href=\"#console\">console</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = 0;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#console_drivers\">console_drivers</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#a\">a</a>=<a class=\"id\" href=\"#console_drivers\">console_drivers</a>-><a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#b\">b</a>=<a class=\"id\" href=\"#console_drivers\">console_drivers</a> ;", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#a\">a</a>; <a class=\"id\" href=\"#b\">b</a>=<a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#a\">a</a>=<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#a\">a</a> == <a class=\"id\" href=\"#console\">console</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this isn't the last console and it has CON_CONSDEV set, we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * need to set it on the next preferred console.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#console_drivers\">console_drivers</a> != <a class=\"id\" href=\"#NULL\">NULL</a> && <a class=\"id\" href=\"#console\">console</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CON_CONSDEV\">CON_CONSDEV</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#console_drivers\">console_drivers</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#CON_CONSDEV\">CON_CONSDEV</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#release_console_sem\">release_console_sem</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#unregister_console\">unregister_console</a>);", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#printk_late_init\">printk_late_init</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#console\">console</a> *<a class=\"id\" href=\"#con\">con</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_console\">for_each_console</a>(<a class=\"id\" href=\"#con\">con</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#con\">con</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CON_BOOT\">CON_BOOT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"turn off boot console %s%d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#con\">con</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#con\">con</a>-><a class=\"id\" href=\"#index\">index</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unregister_console\">unregister_console</a>(<a class=\"id\" href=\"#con\">con</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hotcpu_notifier\">hotcpu_notifier</a>(<a class=\"id\" href=\"#console_cpu_notify\">console_cpu_notify</a>, 0);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#late_initcall\">late_initcall</a>(<a class=\"id\" href=\"#printk_late_init\">printk_late_init</a>);", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a> <a class=\"id\" href=\"#CONFIG_PRINTK\">CONFIG_PRINTK</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * printk rate limiting, lifted from the networking subsystem.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This enforces a rate limit: not more than 10 kernel messages</span>", 
"<span class=\"comment\"> * every 5s to make a denial-of-service attack impossible.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#DEFINE_RATELIMIT_STATE\">DEFINE_RATELIMIT_STATE</a>(<a class=\"id\" href=\"#printk_ratelimit_state\">printk_ratelimit_state</a>, 5 * <a class=\"id\" href=\"#HZ\">HZ</a>, 10);", 
"", 
"int <a class=\"id\" href=\"#__printk_ratelimit\">__printk_ratelimit</a>(const char *<a class=\"id\" href=\"#func\">func</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#___ratelimit\">___ratelimit</a>(&amp;<a class=\"id\" href=\"#printk_ratelimit_state\">printk_ratelimit_state</a>, <a class=\"id\" href=\"#func\">func</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__printk_ratelimit\">__printk_ratelimit</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * printk_timed_ratelimit - caller-controlled printk ratelimiting</span>", 
"<span class=\"comment\"> * @caller_jiffies: pointer to caller's state</span>", 
"<span class=\"comment\"> * @interval_msecs: minimum interval between prints</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * printk_timed_ratelimit() returns true if more than @interval_msecs</span>", 
"<span class=\"comment\"> * milliseconds have elapsed since the last time printk_timed_ratelimit()</span>", 
"<span class=\"comment\"> * returned true.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#printk_timed_ratelimit\">printk_timed_ratelimit</a>(unsigned long *<a class=\"id\" href=\"#caller_jiffies\">caller_jiffies</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#interval_msecs\">interval_msecs</a>)", 
"{", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#caller_jiffies\">caller_jiffies</a> == 0", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>|| !<a class=\"id\" href=\"#time_in_range\">time_in_range</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, *<a class=\"id\" href=\"#caller_jiffies\">caller_jiffies</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#caller_jiffies\">caller_jiffies</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>+ <a class=\"id\" href=\"#msecs_to_jiffies\">msecs_to_jiffies</a>(<a class=\"id\" href=\"#interval_msecs\">interval_msecs</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#caller_jiffies\">caller_jiffies</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#printk_timed_ratelimit\">printk_timed_ratelimit</a>);", 
"", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#dump_list_lock\">dump_list_lock</a>);", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#dump_list\">dump_list</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kmsg_dump_register - register a kernel log dumper.</span>", 
"<span class=\"comment\"> * @dumper: pointer to the kmsg_dumper structure</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Adds a kernel log dumper to the system. The dump callback in the</span>", 
"<span class=\"comment\"> * structure will be called when the kernel oopses or panics and must be</span>", 
"<span class=\"comment\"> * set. Returns zero on success and %-EINVAL or %-EBUSY otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#kmsg_dump_register\">kmsg_dump_register</a>(struct <a class=\"id\" href=\"#kmsg_dumper\">kmsg_dumper</a> *<a class=\"id\" href=\"#dumper\">dumper</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The dump callback needs to be set */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dumper\">dumper</a>-><a class=\"id\" href=\"#dump\">dump</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#dump_list_lock\">dump_list_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't allow registering multiple times */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dumper\">dumper</a>-><a class=\"id\" href=\"#registered\">registered</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dumper\">dumper</a>-><a class=\"id\" href=\"#registered\">registered</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#dumper\">dumper</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#dump_list\">dump_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#dump_list_lock\">dump_list_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#kmsg_dump_register\">kmsg_dump_register</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kmsg_dump_unregister - unregister a kmsg dumper.</span>", 
"<span class=\"comment\"> * @dumper: pointer to the kmsg_dumper structure</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Removes a dump device from the system. Returns zero on success and</span>", 
"<span class=\"comment\"> * %-EINVAL otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#kmsg_dump_unregister\">kmsg_dump_unregister</a>(struct <a class=\"id\" href=\"#kmsg_dumper\">kmsg_dumper</a> *<a class=\"id\" href=\"#dumper\">dumper</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#dump_list_lock\">dump_list_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dumper\">dumper</a>-><a class=\"id\" href=\"#registered\">registered</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dumper\">dumper</a>-><a class=\"id\" href=\"#registered\">registered</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#dumper\">dumper</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#dump_list_lock\">dump_list_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#kmsg_dump_unregister\">kmsg_dump_unregister</a>);", 
"", 
"static const char const *<a class=\"id\" href=\"#kmsg_reasons\">kmsg_reasons</a>[] = {", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#KMSG_DUMP_OOPS\">KMSG_DUMP_OOPS</a>]<span class=\"ts\"/>= \"oops\",", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#KMSG_DUMP_PANIC\">KMSG_DUMP_PANIC</a>]<span class=\"ts\"/>= \"panic\",", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#KMSG_DUMP_KEXEC\">KMSG_DUMP_KEXEC</a>]<span class=\"ts\"/>= \"kexec\",", 
"};", 
"", 
"static const char *<a class=\"id\" href=\"#kmsg_to_str\">kmsg_to_str</a>(enum <a class=\"id\" href=\"#kmsg_dump_reason\">kmsg_dump_reason</a> <a class=\"id\" href=\"#reason\">reason</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#reason\">reason</a> >= <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#kmsg_reasons\">kmsg_reasons</a>) || <a class=\"id\" href=\"#reason\">reason</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return \"unknown\";", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kmsg_reasons\">kmsg_reasons</a>[<a class=\"id\" href=\"#reason\">reason</a>];", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kmsg_dump - dump kernel log to kernel message dumpers.</span>", 
"<span class=\"comment\"> * @reason: the reason (oops, panic etc) for dumping</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Iterate through each of the dump devices and call the oops/panic</span>", 
"<span class=\"comment\"> * callbacks with the log buffer.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#kmsg_dump\">kmsg_dump</a>(enum <a class=\"id\" href=\"#kmsg_dump_reason\">kmsg_dump_reason</a> <a class=\"id\" href=\"#reason\">reason</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#chars\">chars</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmsg_dumper\">kmsg_dumper</a> *<a class=\"id\" href=\"#dumper\">dumper</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#s1\">s1</a>, *<a class=\"id\" href=\"#s2\">s2</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#l1\">l1</a>, <a class=\"id\" href=\"#l2\">l2</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Theoretically, the log could move on after we do this, but</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   there's not a lot we can do about that. The new messages</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   will overwrite the start of what we dump. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#logbuf_lock\">logbuf_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#log_end\">log_end</a> &amp; <a class=\"id\" href=\"#LOG_BUF_MASK\">LOG_BUF_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chars\">chars</a> = <a class=\"id\" href=\"#logged_chars\">logged_chars</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#logbuf_lock\">logbuf_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#chars\">chars</a> &gt; <a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s1\">s1</a> = <a class=\"id\" href=\"#log_buf\">log_buf</a> + <a class=\"id\" href=\"#log_buf_len\">log_buf_len</a> - <a class=\"id\" href=\"#chars\">chars</a> + <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l1\">l1</a> = <a class=\"id\" href=\"#chars\">chars</a> - <a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s2\">s2</a> = <a class=\"id\" href=\"#log_buf\">log_buf</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l2\">l2</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s1\">s1</a> = \"\";", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l1\">l1</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s2\">s2</a> = <a class=\"id\" href=\"#log_buf\">log_buf</a> + <a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#chars\">chars</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l2\">l2</a> = <a class=\"id\" href=\"#chars\">chars</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#spin_trylock_irqsave\">spin_trylock_irqsave</a>(&amp;<a class=\"id\" href=\"#dump_list_lock\">dump_list_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"dump_kmsg: dump list lock is held during %s, skipping dump\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmsg_to_str\">kmsg_to_str</a>(<a class=\"id\" href=\"#reason\">reason</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#dumper\">dumper</a>, &amp;<a class=\"id\" href=\"#dump_list\">dump_list</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dumper\">dumper</a>-><a class=\"id\" href=\"#dump\">dump</a>(<a class=\"id\" href=\"#dumper\">dumper</a>, <a class=\"id\" href=\"#reason\">reason</a>, <a class=\"id\" href=\"#s1\">s1</a>, <a class=\"id\" href=\"#l1\">l1</a>, <a class=\"id\" href=\"#s2\">s2</a>, <a class=\"id\" href=\"#l2\">l2</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#dump_list_lock\">dump_list_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/0e/27dd0120d3e4aa3001a752a6dbc2785f5e24db.xr', __xr_tmp);
