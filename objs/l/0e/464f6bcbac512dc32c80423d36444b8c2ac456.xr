var __xr_tmp = [
"<span class=\"comment\"> * To make it easier to use in export operations a %NULL or IS_ERR inode may</span>", 
"<span class=\"comment\"> * be passed in and will be the error will be propagate to the return value,</span>", 
"<span class=\"comment\"> * with a %NULL @inode replaced by ERR_PTR(-ESTALE).</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#d_obtain_alias\">d_obtain_alias</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>static const struct <a class=\"id\" href=\"#qstr\">qstr</a> <a class=\"id\" href=\"#anonstring\">anonstring</a> = { .<a class=\"id\" href=\"#name\">name</a> = \"\" };", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#res\">res</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#inode\">inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ESTALE\">ESTALE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_CAST\">ERR_CAST</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#d_find_alias\">d_find_alias</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_iput\">out_iput</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#d_alloc\">d_alloc</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#anonstring\">anonstring</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tmp\">tmp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_iput\">out_iput</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#d_parent\">d_parent</a> = <a class=\"id\" href=\"#tmp\">tmp</a>; <span class=\"comment\">/* make sure dput doesn't croak */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#__d_find_alias\">__d_find_alias</a>(<a class=\"id\" href=\"#inode\">inode</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_iput\">out_iput</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* attach a disconnected dentry */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#d_lock\">d_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#d_sb\">d_sb</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a> = <a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#d_flags\">d_flags</a> |= <a class=\"id\" href=\"#DCACHE_DISCONNECTED\">DCACHE_DISCONNECTED</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#d_flags\">d_flags</a> &= ~<a class=\"id\" href=\"#DCACHE_UNHASHED\">DCACHE_UNHASHED</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#d_alias\">d_alias</a>, &amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_dentry\">i_dentry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_add_head\">hlist_add_head</a>(&amp;<a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#d_hash\">d_hash</a>, &amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_anon\">s_anon</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#d_lock\">d_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
" <a class=\"id\" href=\"#out_iput\">out_iput</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iput\">iput</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#d_obtain_alias\">d_obtain_alias</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * d_splice_alias - splice a disconnected dentry into the tree if one exists</span>", 
"<span class=\"comment\"> * @inode:  the inode which may have a disconnected dentry</span>", 
"<span class=\"comment\"> * @dentry: a negative dentry which we want to point to the inode.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If inode is a directory and has a 'disconnected' dentry (i.e. IS_ROOT and</span>", 
"<span class=\"comment\"> * DCACHE_DISCONNECTED), then d_move that in place of the given dentry</span>", 
"<span class=\"comment\"> * and return it, else simply d_add the inode to the dentry and return NULL.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is needed in the lookup routine of any filesystem that is exportable</span>", 
"<span class=\"comment\"> * (via knfsd) so that we can build dcache paths to directories effectively.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If a dentry was found and moved, then it is returned.  Otherwise NULL</span>", 
"<span class=\"comment\"> * is returned.  This matches the expected return value of -&gt;lookup.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#d_splice_alias\">d_splice_alias</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a> && <a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#__d_find_alias\">__d_find_alias</a>(<a class=\"id\" href=\"#inode\">inode</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#new\">new</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!(<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#d_flags\">d_flags</a> &amp; <a class=\"id\" href=\"#DCACHE_DISCONNECTED\">DCACHE_DISCONNECTED</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#security_d_instantiate\">security_d_instantiate</a>(<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d_move\">d_move</a>(<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iput\">iput</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* already taking dcache_lock, so d_add() by hand */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__d_instantiate\">__d_instantiate</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#security_d_instantiate\">security_d_instantiate</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d_rehash\">d_rehash</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d_add\">d_add</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#new\">new</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#d_splice_alias\">d_splice_alias</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * d_add_ci - lookup or allocate new dentry with case-exact name</span>", 
"<span class=\"comment\"> * @inode:  the inode case-insensitive lookup has found</span>", 
"<span class=\"comment\"> * @dentry: the negative dentry that was passed to the parent's lookup func</span>", 
"<span class=\"comment\"> * @name:   the case-exact name to be associated with the returned dentry</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is to avoid filling the dcache with case-insensitive names to the</span>", 
"<span class=\"comment\"> * same inode, only the actual correct case is stored in the dcache for</span>", 
"<span class=\"comment\"> * case-insensitive filesystems.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For a case-insensitive lookup match and if the the case-exact dentry</span>", 
"<span class=\"comment\"> * already exists in in the dcache, use it and return it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If no entry exists with the exact case name, allocate new dentry with</span>", 
"<span class=\"comment\"> * the exact case, and return the spliced entry.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#d_add_ci\">d_add_ci</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#qstr\">qstr</a> *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#found\">found</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#new\">new</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * First check if a dentry matching the name already exists,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if not go ahead and create it now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#found\">found</a> = <a class=\"id\" href=\"#d_hash_and_lookup\">d_hash_and_lookup</a>(<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_parent\">d_parent</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#found\">found</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#d_alloc\">d_alloc</a>(<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_parent\">d_parent</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#new\">new</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#found\">found</a> = <a class=\"id\" href=\"#d_splice_alias\">d_splice_alias</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#found\">found</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#found\">found</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#new\">new</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If a matching dentry exists, and it's not negative use it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Decrement the reference count to balance the iget() done</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * earlier on.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#found\">found</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#found\">found</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a> != <a class=\"id\" href=\"#inode\">inode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This can't happen because bad inodes are unhashed. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#is_bad_inode\">is_bad_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#is_bad_inode\">is_bad_inode</a>(<a class=\"id\" href=\"#found\">found</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iput\">iput</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#found\">found</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Negative dentry: instantiate it unless the inode is a directory and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * already has a dentry.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>) || <a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_dentry\">i_dentry</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__d_instantiate\">__d_instantiate</a>(<a class=\"id\" href=\"#found\">found</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#security_d_instantiate\">security_d_instantiate</a>(<a class=\"id\" href=\"#found\">found</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#found\">found</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In case a directory already has a (disconnected) entry grab a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reference to it, move it in place and use it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_dentry\">i_dentry</a>.<a class=\"id\" href=\"#next\">next</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#d_alias\">d_alias</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dget_locked\">dget_locked</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dcache_lock\">dcache_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#security_d_instantiate\">security_d_instantiate</a>(<a class=\"id\" href=\"#found\">found</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d_move\">d_move</a>(<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#found\">found</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iput\">iput</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(<a class=\"id\" href=\"#found\">found</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#new\">new</a>;", 
"", 
"<a class=\"id\" href=\"#err_out\">err_out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iput\">iput</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#error\">error</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#d_add_ci\">d_add_ci</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * d_lookup - search for a dentry</span>", 
"<span class=\"comment\"> * @parent: parent dentry</span>", 
"<span class=\"comment\"> * @name: qstr of name we wish to find</span>", 
"<span class=\"comment\"> * Returns: dentry, or NULL</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * d_lookup searches the children of the parent dentry for the name in</span>", 
"<span class=\"comment\"> * question. If the dentry is found its reference count is incremented and the</span>", 
"<span class=\"comment\"> * dentry is returned. The caller must use dput to free the entry when it has</span>", 
"<span class=\"comment\"> * finished using it. %NULL is returned if the dentry does not exist.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#dentry\">dentry</a> * <a class=\"id\" href=\"#d_lookup\">d_lookup</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> * <a class=\"id\" href=\"#parent\">parent</a>, struct <a class=\"id\" href=\"#qstr\">qstr</a> * <a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> * <a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#seq\">seq</a>;", 
"", 
"        do {", 
"                <a class=\"id\" href=\"#seq\">seq</a> = <a class=\"id\" href=\"#read_seqbegin\">read_seqbegin</a>(&amp;<a class=\"id\" href=\"#rename_lock\">rename_lock</a>);", 
"                <a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#__d_lookup\">__d_lookup</a>(<a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"                if (<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#read_seqretry\">read_seqretry</a>(&amp;<a class=\"id\" href=\"#rename_lock\">rename_lock</a>, <a class=\"id\" href=\"#seq\">seq</a>));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dentry\">dentry</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#d_lookup\">d_lookup</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * __d_lookup - search for a dentry (racy)</span>", 
"<span class=\"comment\"> * @parent: parent dentry</span>", 
"<span class=\"comment\"> * @name: qstr of name we wish to find</span>", 
"<span class=\"comment\"> * Returns: dentry, or NULL</span>", 
"<span class=\"comment\"> *</span>", 
];
xr_frag_insert('l/0e/464f6bcbac512dc32c80423d36444b8c2ac456.xr', __xr_tmp);
