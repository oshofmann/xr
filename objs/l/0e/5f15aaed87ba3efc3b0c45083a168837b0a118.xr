var __xr_tmp = [
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pr_fmt\">pr_fmt</a>(<a class=\"id\" href=\"#fmt\">fmt</a>) <a class=\"id\" href=\"#KBUILD_MODNAME\">KBUILD_MODNAME</a> \": \" <a class=\"id\" href=\"#fmt\">fmt</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bootmem\">bootmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#percpu\">percpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kexec\">kexec</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#crash_dump\">crash_dump</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#smp\">smp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#topology\">topology</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pfn\">pfn</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#sections\">sections</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#processor\">processor</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#setup\">setup</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#mpspec\">mpspec</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#apicdef\">apicdef</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#highmem\">highmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#proto\">proto</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#cpumask\">cpumask</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#stackprotector\">stackprotector</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(int, <a class=\"id\" href=\"#cpu_number\">cpu_number</a>);", 
"<a class=\"id\" href=\"#EXPORT_PER_CPU_SYMBOL\">EXPORT_PER_CPU_SYMBOL</a>(<a class=\"id\" href=\"#cpu_number\">cpu_number</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BOOT_PERCPU_OFFSET\">BOOT_PERCPU_OFFSET</a> ((unsigned long)<a class=\"id\" href=\"#__per_cpu_load\">__per_cpu_load</a>)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BOOT_PERCPU_OFFSET\">BOOT_PERCPU_OFFSET</a> 0", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(unsigned long, <a class=\"id\" href=\"#this_cpu_off\">this_cpu_off</a>) = <a class=\"id\" href=\"#BOOT_PERCPU_OFFSET\">BOOT_PERCPU_OFFSET</a>;", 
"<a class=\"id\" href=\"#EXPORT_PER_CPU_SYMBOL\">EXPORT_PER_CPU_SYMBOL</a>(<a class=\"id\" href=\"#this_cpu_off\">this_cpu_off</a>);", 
"", 
"unsigned long <a class=\"id\" href=\"#__per_cpu_offset\">__per_cpu_offset</a>[<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>] <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = {", 
"<span class=\"ts\"/>[0 ... <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>-1] = <a class=\"id\" href=\"#BOOT_PERCPU_OFFSET\">BOOT_PERCPU_OFFSET</a>,", 
"};", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__per_cpu_offset\">__per_cpu_offset</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * On x86_64 symbols referenced from code should be reachable using</span>", 
"<span class=\"comment\"> * 32bit relocations.  Reserve space for static percpu variables in</span>", 
"<span class=\"comment\"> * modules so that they are always served from the first chunk which</span>", 
"<span class=\"comment\"> * is located at the percpu segment base.  On x86_32, anything can</span>", 
"<span class=\"comment\"> * address anywhere.  No need to reserve space in the first chunk.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PERCPU_FIRST_CHUNK_RESERVE\">PERCPU_FIRST_CHUNK_RESERVE</a><span class=\"ts\"/><a class=\"id\" href=\"#PERCPU_MODULE_RESERVE\">PERCPU_MODULE_RESERVE</a>", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PERCPU_FIRST_CHUNK_RESERVE\">PERCPU_FIRST_CHUNK_RESERVE</a><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pcpu_need_numa - determine percpu allocation needs to consider NUMA</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If NUMA is not configured or there is only one NUMA node available,</span>", 
"<span class=\"comment\"> * there is no reason to consider NUMA.  This function determines</span>", 
"<span class=\"comment\"> * whether percpu allocation should consider NUMA or not.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * true if NUMA should be considered; otherwise, false.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#pcpu_need_numa\">pcpu_need_numa</a>(void)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NEED_MULTIPLE_NODES\">CONFIG_NEED_MULTIPLE_NODES</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pg_data_t\">pg_data_t</a> *<a class=\"id\" href=\"#last\">last</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#early_cpu_to_node\">early_cpu_to_node</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#node_online\">node_online</a>(<a class=\"id\" href=\"#node\">node</a>) && <a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#node\">node</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#last\">last</a> && <a class=\"id\" href=\"#last\">last</a> != <a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#node\">node</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last\">last</a> = <a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pcpu_alloc_bootmem - NUMA friendly alloc_bootmem wrapper for percpu</span>", 
"<span class=\"comment\"> * @cpu: cpu to allocate for</span>", 
"<span class=\"comment\"> * @size: size allocation in bytes</span>", 
"<span class=\"comment\"> * @align: alignment</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Allocate @size bytes aligned at @align for cpu @cpu.  This wrapper</span>", 
"<span class=\"comment\"> * does the right thing for NUMA regardless of the current</span>", 
"<span class=\"comment\"> * configuration.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * Pointer to the allocated area on success, NULL on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"static void * <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#pcpu_alloc_bootmem\">pcpu_alloc_bootmem</a>(unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#align\">align</a>)", 
"{", 
"<span class=\"ts\"/>const unsigned long <a class=\"id\" href=\"#goal\">goal</a> = <a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#MAX_DMA_ADDRESS\">MAX_DMA_ADDRESS</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NEED_MULTIPLE_NODES\">CONFIG_NEED_MULTIPLE_NODES</a>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#early_cpu_to_node\">early_cpu_to_node</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#ptr\">ptr</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#node_online\">node_online</a>(<a class=\"id\" href=\"#node\">node</a>) || !<a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#node\">node</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#__alloc_bootmem_nopanic\">__alloc_bootmem_nopanic</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>, <a class=\"id\" href=\"#goal\">goal</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"cpu %d has no node %d or node-local memory\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"per cpu data for cpu%d %lu bytes at %016lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#ptr\">ptr</a>));", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#__alloc_bootmem_node_nopanic\">__alloc_bootmem_node_nopanic</a>(<a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#node\">node</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>, <a class=\"id\" href=\"#goal\">goal</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"per cpu data for cpu%d %lu bytes on node%d at %016lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#ptr\">ptr</a>));", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ptr\">ptr</a>;", 
"#else", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__alloc_bootmem_nopanic\">__alloc_bootmem_nopanic</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>, <a class=\"id\" href=\"#goal\">goal</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Helpers for first chunk memory allocation</span>", 
"<span class=\"comment\"> */</span>", 
"static void * <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#pcpu_fc_alloc\">pcpu_fc_alloc</a>(unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#align\">align</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pcpu_alloc_bootmem\">pcpu_alloc_bootmem</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#pcpu_fc_free\">pcpu_fc_free</a>(void *<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NO_BOOTMEM\">CONFIG_NO_BOOTMEM</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_early_partial\">free_early_partial</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_bootmem\">free_bootmem</a>(<a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#ptr\">ptr</a>), <a class=\"id\" href=\"#size\">size</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#pcpu_cpu_distance\">pcpu_cpu_distance</a>(unsigned int <a class=\"id\" href=\"#from\">from</a>, unsigned int <a class=\"id\" href=\"#to\">to</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NEED_MULTIPLE_NODES\">CONFIG_NEED_MULTIPLE_NODES</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#early_cpu_to_node\">early_cpu_to_node</a>(<a class=\"id\" href=\"#from\">from</a>) == <a class=\"id\" href=\"#early_cpu_to_node\">early_cpu_to_node</a>(<a class=\"id\" href=\"#to\">to</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#LOCAL_DISTANCE\">LOCAL_DISTANCE</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#REMOTE_DISTANCE\">REMOTE_DISTANCE</a>;", 
"#else", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#LOCAL_DISTANCE\">LOCAL_DISTANCE</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#pcpup_populate_pte\">pcpup_populate_pte</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#populate_extra_pte\">populate_extra_pte</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#setup_percpu_segment\">setup_percpu_segment</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#desc_struct\">desc_struct</a> <a class=\"id\" href=\"#gdt\">gdt</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pack_descriptor\">pack_descriptor</a>(&amp;<a class=\"id\" href=\"#gdt\">gdt</a>, <a class=\"id\" href=\"#per_cpu_offset\">per_cpu_offset</a>(<a class=\"id\" href=\"#cpu\">cpu</a>), 0xFFFFF,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0x2 | <a class=\"id\" href=\"#DESCTYPE_S\">DESCTYPE_S</a>, 0x8);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gdt\">gdt</a>.<a class=\"id\" href=\"#s\">s</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_gdt_entry\">write_gdt_entry</a>(<a class=\"id\" href=\"#get_cpu_gdt_table\">get_cpu_gdt_table</a>(<a class=\"id\" href=\"#cpu\">cpu</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#GDT_ENTRY_PERCPU\">GDT_ENTRY_PERCPU</a>, &amp;<a class=\"id\" href=\"#gdt\">gdt</a>, <a class=\"id\" href=\"#DESCTYPE_S\">DESCTYPE_S</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#setup_per_cpu_areas\">setup_per_cpu_areas</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#delta\">delta</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"NR_CPUS:%d nr_cpumask_bits:%d nr_cpu_ids:%d nr_node_ids:%d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>, <a class=\"id\" href=\"#nr_cpumask_bits\">nr_cpumask_bits</a>, <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>, <a class=\"id\" href=\"#nr_node_ids\">nr_node_ids</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Allocate percpu area.  Embedding allocator is our favorite;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * however, on NUMA configurations, it can result in very</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * sparse unit mapping and vmalloc area isn't spacious enough</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * on 32bit.  Use page in that case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pcpu_chosen_fc\">pcpu_chosen_fc</a> == <a class=\"id\" href=\"#PCPU_FC_AUTO\">PCPU_FC_AUTO</a> && <a class=\"id\" href=\"#pcpu_need_numa\">pcpu_need_numa</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcpu_chosen_fc\">pcpu_chosen_fc</a> = <a class=\"id\" href=\"#PCPU_FC_PAGE\">PCPU_FC_PAGE</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pcpu_chosen_fc\">pcpu_chosen_fc</a> != <a class=\"id\" href=\"#PCPU_FC_PAGE\">PCPU_FC_PAGE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#atom_size\">atom_size</a> = <a class=\"id\" href=\"#cpu_has_pse\">cpu_has_pse</a> ? <a class=\"id\" href=\"#PMD_SIZE\">PMD_SIZE</a> : <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#dyn_size\">dyn_size</a> = <a class=\"id\" href=\"#PERCPU_MODULE_RESERVE\">PERCPU_MODULE_RESERVE</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PERCPU_DYNAMIC_RESERVE\">PERCPU_DYNAMIC_RESERVE</a> - <a class=\"id\" href=\"#PERCPU_FIRST_CHUNK_RESERVE\">PERCPU_FIRST_CHUNK_RESERVE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#pcpu_embed_first_chunk\">pcpu_embed_first_chunk</a>(<a class=\"id\" href=\"#PERCPU_FIRST_CHUNK_RESERVE\">PERCPU_FIRST_CHUNK_RESERVE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#dyn_size\">dyn_size</a>, <a class=\"id\" href=\"#atom_size\">atom_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#pcpu_cpu_distance\">pcpu_cpu_distance</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#pcpu_fc_alloc\">pcpu_fc_alloc</a>, <a class=\"id\" href=\"#pcpu_fc_free\">pcpu_fc_free</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"%s allocator failed (%d), falling back to page size\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#pcpu_fc_names\">pcpu_fc_names</a>[<a class=\"id\" href=\"#pcpu_chosen_fc\">pcpu_chosen_fc</a>], <a class=\"id\" href=\"#rc\">rc</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#pcpu_page_first_chunk\">pcpu_page_first_chunk</a>(<a class=\"id\" href=\"#PERCPU_FIRST_CHUNK_RESERVE\">PERCPU_FIRST_CHUNK_RESERVE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#pcpu_fc_alloc\">pcpu_fc_alloc</a>, <a class=\"id\" href=\"#pcpu_fc_free\">pcpu_fc_free</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#pcpup_populate_pte\">pcpup_populate_pte</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"cannot initialize percpu area (err=%d)\", <a class=\"id\" href=\"#rc\">rc</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* alrighty, percpu areas up and running */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = (unsigned long)<a class=\"id\" href=\"#pcpu_base_addr\">pcpu_base_addr</a> - (unsigned long)<a class=\"id\" href=\"#__per_cpu_start\">__per_cpu_start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu_offset\">per_cpu_offset</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) = <a class=\"id\" href=\"#delta\">delta</a> + <a class=\"id\" href=\"#pcpu_unit_offsets\">pcpu_unit_offsets</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#this_cpu_off\">this_cpu_off</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) = <a class=\"id\" href=\"#per_cpu_offset\">per_cpu_offset</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_number\">cpu_number</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) = <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#setup_percpu_segment\">setup_percpu_segment</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#setup_stack_canary_segment\">setup_stack_canary_segment</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Copy data used in early init routines from the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * initial arrays to the per cpu data areas.  These</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * arrays then become expendable and the *_early_ptr's</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * are zeroed indicating that the static arrays are</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * gone.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_LOCAL_APIC\">CONFIG_X86_LOCAL_APIC</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#x86_cpu_to_apicid\">x86_cpu_to_apicid</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#early_per_cpu_map\">early_per_cpu_map</a>(<a class=\"id\" href=\"#x86_cpu_to_apicid\">x86_cpu_to_apicid</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#x86_bios_cpu_apicid\">x86_bios_cpu_apicid</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#early_per_cpu_map\">early_per_cpu_map</a>(<a class=\"id\" href=\"#x86_bios_cpu_apicid\">x86_bios_cpu_apicid</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#irq_stack_ptr\">irq_stack_ptr</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#irq_stack_union\">irq_stack_union</a>.<a class=\"id\" href=\"#irq_stack\">irq_stack</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#IRQ_STACK_SIZE\">IRQ_STACK_SIZE</a> - 64;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#x86_cpu_to_node_map\">x86_cpu_to_node_map</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#early_per_cpu_map\">early_per_cpu_map</a>(<a class=\"id\" href=\"#x86_cpu_to_node_map\">x86_cpu_to_node_map</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Ensure that the boot cpu numa_node is correct when the boot</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * cpu is on a node that doesn't have memory installed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Also cpu_up() will call cpu_to_node() for APs when</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * MEMORY_HOTPLUG is defined, before per_cpu(numa_node) is set</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * up later with c_init aka intel_init/amd_init.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * So set them all (boot cpu and all APs).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_cpu_numa_node\">set_cpu_numa_node</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#early_cpu_to_node\">early_cpu_to_node</a>(<a class=\"id\" href=\"#cpu\">cpu</a>));", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Up to this point, the boot CPU has been using .init.data</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * area.  Reload any changed state for the boot CPU.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> == <a class=\"id\" href=\"#boot_cpu_id\">boot_cpu_id</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#switch_to_new_gdt\">switch_to_new_gdt</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* indicate the early static arrays will soon be gone */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_LOCAL_APIC\">CONFIG_X86_LOCAL_APIC</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#early_per_cpu_ptr\">early_per_cpu_ptr</a>(<a class=\"id\" href=\"#x86_cpu_to_apicid\">x86_cpu_to_apicid</a>) = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#early_per_cpu_ptr\">early_per_cpu_ptr</a>(<a class=\"id\" href=\"#x86_bios_cpu_apicid\">x86_bios_cpu_apicid</a>) = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>) && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#early_per_cpu_ptr\">early_per_cpu_ptr</a>(<a class=\"id\" href=\"#x86_cpu_to_node_map\">x86_cpu_to_node_map</a>) = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Setup node to cpumask map */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_node_to_cpumask_map\">setup_node_to_cpumask_map</a>();", 
"", 
];
xr_frag_insert('l/0e/5f15aaed87ba3efc3b0c45083a168837b0a118.xr', __xr_tmp);
