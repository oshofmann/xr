var __xr_tmp = [
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KPROBE_EVENT_SYSTEM\">KPROBE_EVENT_SYSTEM</a> \"kprobes\"", 
"", 
"<span class=\"comment\">/* Reserved field names */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FIELD_STRING_IP\">FIELD_STRING_IP</a> \"__probe_ip\"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FIELD_STRING_RETIP\">FIELD_STRING_RETIP</a> \"__probe_ret_ip\"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FIELD_STRING_FUNC\">FIELD_STRING_FUNC</a> \"__probe_func\"", 
"", 
"const char *<a class=\"id\" href=\"#reserved_field_names\">reserved_field_names</a>[] = {", 
"<span class=\"ts\"/>\"common_type\",", 
"<span class=\"ts\"/>\"common_flags\",", 
"<span class=\"ts\"/>\"common_preempt_count\",", 
"<span class=\"ts\"/>\"common_pid\",", 
"<span class=\"ts\"/>\"common_tgid\",", 
"<span class=\"ts\"/>\"common_lock_depth\",", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FIELD_STRING_IP\">FIELD_STRING_IP</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FIELD_STRING_RETIP\">FIELD_STRING_RETIP</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FIELD_STRING_FUNC\">FIELD_STRING_FUNC</a>,", 
"};", 
"", 
"<span class=\"comment\">/* Printing function type */</span>", 
"typedef int (*<a class=\"id\" href=\"#print_type_func_t\">print_type_func_t</a>)(struct <a class=\"id\" href=\"#trace_seq\">trace_seq</a> *, const char *, void *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> void *);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PRINT_TYPE_FUNC_NAME\">PRINT_TYPE_FUNC_NAME</a>(<a class=\"id\" href=\"#type\">type</a>)<span class=\"ts\"/><a class=\"id\" href=\"#print_type_\">print_type_</a>##<a class=\"id\" href=\"#type\">type</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PRINT_TYPE_FMT_NAME\">PRINT_TYPE_FMT_NAME</a>(<a class=\"id\" href=\"#type\">type</a>)<span class=\"ts\"/><a class=\"id\" href=\"#print_type_format_\">print_type_format_</a>##<a class=\"id\" href=\"#type\">type</a>", 
"", 
"<span class=\"comment\">/* Printing  in basic type function template */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEFINE_BASIC_PRINT_TYPE_FUNC\">DEFINE_BASIC_PRINT_TYPE_FUNC</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#cast\">cast</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#__kprobes\">__kprobes</a> int <a class=\"id\" href=\"#PRINT_TYPE_FUNC_NAME\">PRINT_TYPE_FUNC_NAME</a>(<a class=\"id\" href=\"#type\">type</a>)(struct <a class=\"id\" href=\"#trace_seq\">trace_seq</a> *<a class=\"id\" href=\"#s\">s</a>,<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a>,<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a>, void *<a class=\"id\" href=\"#ent\">ent</a>)\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \" %s=\" <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#name\">name</a>, (<a class=\"id\" href=\"#cast\">cast</a>)*(<a class=\"id\" href=\"#type\">type</a> *)<a class=\"id\" href=\"#data\">data</a>);\\", 
"}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static const char <a class=\"id\" href=\"#PRINT_TYPE_FMT_NAME\">PRINT_TYPE_FMT_NAME</a>(<a class=\"id\" href=\"#type\">type</a>)[] = <a class=\"id\" href=\"#fmt\">fmt</a>;", 
"", 
"<a class=\"id\" href=\"#DEFINE_BASIC_PRINT_TYPE_FUNC\">DEFINE_BASIC_PRINT_TYPE_FUNC</a>(<a class=\"id\" href=\"#u8\">u8</a>, \"%x\", unsigned int)", 
"<a class=\"id\" href=\"#DEFINE_BASIC_PRINT_TYPE_FUNC\">DEFINE_BASIC_PRINT_TYPE_FUNC</a>(<a class=\"id\" href=\"#u16\">u16</a>, \"%x\", unsigned int)", 
"<a class=\"id\" href=\"#DEFINE_BASIC_PRINT_TYPE_FUNC\">DEFINE_BASIC_PRINT_TYPE_FUNC</a>(<a class=\"id\" href=\"#u32\">u32</a>, \"%lx\", unsigned long)", 
"<a class=\"id\" href=\"#DEFINE_BASIC_PRINT_TYPE_FUNC\">DEFINE_BASIC_PRINT_TYPE_FUNC</a>(<a class=\"id\" href=\"#u64\">u64</a>, \"%llx\", unsigned long long)", 
"<a class=\"id\" href=\"#DEFINE_BASIC_PRINT_TYPE_FUNC\">DEFINE_BASIC_PRINT_TYPE_FUNC</a>(<a class=\"id\" href=\"#s8\">s8</a>, \"%d\", int)", 
"<a class=\"id\" href=\"#DEFINE_BASIC_PRINT_TYPE_FUNC\">DEFINE_BASIC_PRINT_TYPE_FUNC</a>(<a class=\"id\" href=\"#s16\">s16</a>, \"%d\", int)", 
"<a class=\"id\" href=\"#DEFINE_BASIC_PRINT_TYPE_FUNC\">DEFINE_BASIC_PRINT_TYPE_FUNC</a>(<a class=\"id\" href=\"#s32\">s32</a>, \"%ld\", long)", 
"<a class=\"id\" href=\"#DEFINE_BASIC_PRINT_TYPE_FUNC\">DEFINE_BASIC_PRINT_TYPE_FUNC</a>(<a class=\"id\" href=\"#s64\">s64</a>, \"%lld\", long long)", 
"", 
"<span class=\"comment\">/* data_rloc: data relative location, compatible with u32 */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#make_data_rloc\">make_data_rloc</a>(<a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#roffs\">roffs</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(((<a class=\"id\" href=\"#u32\">u32</a>)(<a class=\"id\" href=\"#len\">len</a>) << 16) | ((<a class=\"id\" href=\"#u32\">u32</a>)(<a class=\"id\" href=\"#roffs\">roffs</a>) &amp; 0xffff))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#get_rloc_len\">get_rloc_len</a>(<a class=\"id\" href=\"#dl\">dl</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#u32\">u32</a>)(<a class=\"id\" href=\"#dl\">dl</a>) >> 16)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#get_rloc_offs\">get_rloc_offs</a>(<a class=\"id\" href=\"#dl\">dl</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#u32\">u32</a>)(<a class=\"id\" href=\"#dl\">dl</a>) &amp; 0xffff)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *<a class=\"id\" href=\"#get_rloc_data\">get_rloc_data</a>(<a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#dl\">dl</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#u8\">u8</a> *)<a class=\"id\" href=\"#dl\">dl</a> + <a class=\"id\" href=\"#get_rloc_offs\">get_rloc_offs</a>(*<a class=\"id\" href=\"#dl\">dl</a>);", 
"}", 
"", 
"<span class=\"comment\">/* For data_loc conversion */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *<a class=\"id\" href=\"#get_loc_data\">get_loc_data</a>(<a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#dl\">dl</a>, void *<a class=\"id\" href=\"#ent\">ent</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#u8\">u8</a> *)<a class=\"id\" href=\"#ent\">ent</a> + <a class=\"id\" href=\"#get_rloc_offs\">get_rloc_offs</a>(*<a class=\"id\" href=\"#dl\">dl</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Convert data_rloc to data_loc:</span>", 
"<span class=\"comment\"> *  data_rloc stores the offset from data_rloc itself, but data_loc</span>", 
"<span class=\"comment\"> *  stores the offset from event entry.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#convert_rloc_to_loc\">convert_rloc_to_loc</a>(<a class=\"id\" href=\"#dl\">dl</a>, <a class=\"id\" href=\"#offs\">offs</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#u32\">u32</a>)(<a class=\"id\" href=\"#dl\">dl</a>) + (<a class=\"id\" href=\"#offs\">offs</a>))", 
"", 
"<span class=\"comment\">/* For defining macros, define string/string_size types */</span>", 
"typedef <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#string\">string</a>;", 
"typedef <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#string_size\">string_size</a>;", 
"", 
"<span class=\"comment\">/* Print type function for string type */</span>", 
"static <a class=\"id\" href=\"#__kprobes\">__kprobes</a> int <a class=\"id\" href=\"#PRINT_TYPE_FUNC_NAME\">PRINT_TYPE_FUNC_NAME</a>(<a class=\"id\" href=\"#string\">string</a>)(struct <a class=\"id\" href=\"#trace_seq\">trace_seq</a> *<a class=\"id\" href=\"#s\">s</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  void *<a class=\"id\" href=\"#data\">data</a>, void *<a class=\"id\" href=\"#ent\">ent</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a> = *(<a class=\"id\" href=\"#u32\">u32</a> *)<a class=\"id\" href=\"#data\">data</a> >> 16;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \" %s=(fault)\", <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \" %s=\\\"%s\\\"\", <a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(const char *)<a class=\"id\" href=\"#get_loc_data\">get_loc_data</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#ent\">ent</a>));", 
"}", 
"static const char <a class=\"id\" href=\"#PRINT_TYPE_FMT_NAME\">PRINT_TYPE_FMT_NAME</a>(<a class=\"id\" href=\"#string\">string</a>)[] = \"\\\\\\\"%s\\\\\\\"\";", 
"", 
"<span class=\"comment\">/* Data fetch function type */</span>", 
"typedef<span class=\"ts\"/>void (*<a class=\"id\" href=\"#fetch_func_t\">fetch_func_t</a>)(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *, void *, void *);", 
"", 
"struct <a class=\"id\" href=\"#fetch_param\">fetch_param</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fetch_func_t\">fetch_func_t</a><span class=\"ts\"/><a class=\"id\" href=\"#fn\">fn</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a>;", 
"};", 
"", 
"static <a class=\"id\" href=\"#__kprobes\">__kprobes</a> void <a class=\"id\" href=\"#call_fetch\">call_fetch</a>(struct <a class=\"id\" href=\"#fetch_param\">fetch_param</a> *<a class=\"id\" href=\"#fprm\">fprm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, void *<a class=\"id\" href=\"#dest\">dest</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#fprm\">fprm</a>-><a class=\"id\" href=\"#fn\">fn</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#fprm\">fprm</a>-><a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#dest\">dest</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FETCH_FUNC_NAME\">FETCH_FUNC_NAME</a>(<a class=\"id\" href=\"#method\">method</a>, <a class=\"id\" href=\"#type\">type</a>)<span class=\"ts\"/><a class=\"id\" href=\"#fetch_\">fetch_</a>##<a class=\"id\" href=\"#method\">method</a>##<a class=\"id\" href=\"#_\">_</a>##<a class=\"id\" href=\"#type\">type</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Define macro for basic types - we don't need to define s* types, because</span>", 
"<span class=\"comment\"> * we have to care only about bitwidth at recording time.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEFINE_BASIC_FETCH_FUNCS\">DEFINE_BASIC_FETCH_FUNCS</a>(<a class=\"id\" href=\"#method\">method</a>) \\", 
"<a class=\"id\" href=\"#DEFINE_FETCH_\">DEFINE_FETCH_</a>##<a class=\"id\" href=\"#method\">method</a>(<a class=\"id\" href=\"#u8\">u8</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<a class=\"id\" href=\"#DEFINE_FETCH_\">DEFINE_FETCH_</a>##<a class=\"id\" href=\"#method\">method</a>(<a class=\"id\" href=\"#u16\">u16</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<a class=\"id\" href=\"#DEFINE_FETCH_\">DEFINE_FETCH_</a>##<a class=\"id\" href=\"#method\">method</a>(<a class=\"id\" href=\"#u32\">u32</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<a class=\"id\" href=\"#DEFINE_FETCH_\">DEFINE_FETCH_</a>##<a class=\"id\" href=\"#method\">method</a>(<a class=\"id\" href=\"#u64\">u64</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CHECK_FETCH_FUNCS\">CHECK_FETCH_FUNCS</a>(<a class=\"id\" href=\"#method\">method</a>, <a class=\"id\" href=\"#fn\">fn</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(((<a class=\"id\" href=\"#FETCH_FUNC_NAME\">FETCH_FUNC_NAME</a>(<a class=\"id\" href=\"#method\">method</a>, <a class=\"id\" href=\"#u8\">u8</a>) == <a class=\"id\" href=\"#fn\">fn</a>) ||<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>  (<a class=\"id\" href=\"#FETCH_FUNC_NAME\">FETCH_FUNC_NAME</a>(<a class=\"id\" href=\"#method\">method</a>, <a class=\"id\" href=\"#u16\">u16</a>) == <a class=\"id\" href=\"#fn\">fn</a>) ||<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>  (<a class=\"id\" href=\"#FETCH_FUNC_NAME\">FETCH_FUNC_NAME</a>(<a class=\"id\" href=\"#method\">method</a>, <a class=\"id\" href=\"#u32\">u32</a>) == <a class=\"id\" href=\"#fn\">fn</a>) ||<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>  (<a class=\"id\" href=\"#FETCH_FUNC_NAME\">FETCH_FUNC_NAME</a>(<a class=\"id\" href=\"#method\">method</a>, <a class=\"id\" href=\"#u64\">u64</a>) == <a class=\"id\" href=\"#fn\">fn</a>) ||<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>  (<a class=\"id\" href=\"#FETCH_FUNC_NAME\">FETCH_FUNC_NAME</a>(<a class=\"id\" href=\"#method\">method</a>, <a class=\"id\" href=\"#string\">string</a>) == <a class=\"id\" href=\"#fn\">fn</a>) ||<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>  (<a class=\"id\" href=\"#FETCH_FUNC_NAME\">FETCH_FUNC_NAME</a>(<a class=\"id\" href=\"#method\">method</a>, <a class=\"id\" href=\"#string_size\">string_size</a>) == <a class=\"id\" href=\"#fn\">fn</a>)) \\", 
"<span class=\"ts\"/> && (<a class=\"id\" href=\"#fn\">fn</a> != <a class=\"id\" href=\"#NULL\">NULL</a>))", 
"", 
"<span class=\"comment\">/* Data fetch function templates */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEFINE_FETCH_reg\">DEFINE_FETCH_reg</a>(<a class=\"id\" href=\"#type\">type</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#__kprobes\">__kprobes</a> void <a class=\"id\" href=\"#FETCH_FUNC_NAME\">FETCH_FUNC_NAME</a>(<a class=\"id\" href=\"#reg\">reg</a>, <a class=\"id\" href=\"#type\">type</a>)(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>,<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#offset\">offset</a>, void *<a class=\"id\" href=\"#dest\">dest</a>)<span class=\"ts\"/>\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>*(<a class=\"id\" href=\"#type\">type</a> *)<a class=\"id\" href=\"#dest\">dest</a> = (<a class=\"id\" href=\"#type\">type</a>)<a class=\"id\" href=\"#regs_get_register\">regs_get_register</a>(<a class=\"id\" href=\"#regs\">regs</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned int)((unsigned long)<a class=\"id\" href=\"#offset\">offset</a>));<span class=\"ts\"/>\\", 
"}", 
"<a class=\"id\" href=\"#DEFINE_BASIC_FETCH_FUNCS\">DEFINE_BASIC_FETCH_FUNCS</a>(<a class=\"id\" href=\"#reg\">reg</a>)", 
"<span class=\"comment\">/* No string on the register */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#fetch_reg_string\">fetch_reg_string</a> <a class=\"id\" href=\"#NULL\">NULL</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#fetch_reg_string_size\">fetch_reg_string_size</a> <a class=\"id\" href=\"#NULL\">NULL</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEFINE_FETCH_stack\">DEFINE_FETCH_stack</a>(<a class=\"id\" href=\"#type\">type</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#__kprobes\">__kprobes</a> void <a class=\"id\" href=\"#FETCH_FUNC_NAME\">FETCH_FUNC_NAME</a>(<a class=\"id\" href=\"#stack\">stack</a>, <a class=\"id\" href=\"#type\">type</a>)(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>,\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  void *<a class=\"id\" href=\"#offset\">offset</a>, void *<a class=\"id\" href=\"#dest\">dest</a>)<span class=\"ts\"/>\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>*(<a class=\"id\" href=\"#type\">type</a> *)<a class=\"id\" href=\"#dest\">dest</a> = (<a class=\"id\" href=\"#type\">type</a>)<a class=\"id\" href=\"#regs_get_kernel_stack_nth\">regs_get_kernel_stack_nth</a>(<a class=\"id\" href=\"#regs\">regs</a>,<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned int)((unsigned long)<a class=\"id\" href=\"#offset\">offset</a>));<span class=\"ts\"/>\\", 
"}", 
"<a class=\"id\" href=\"#DEFINE_BASIC_FETCH_FUNCS\">DEFINE_BASIC_FETCH_FUNCS</a>(<a class=\"id\" href=\"#stack\">stack</a>)", 
"<span class=\"comment\">/* No string on the stack entry */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#fetch_stack_string\">fetch_stack_string</a> <a class=\"id\" href=\"#NULL\">NULL</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#fetch_stack_string_size\">fetch_stack_string_size</a> <a class=\"id\" href=\"#NULL\">NULL</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEFINE_FETCH_retval\">DEFINE_FETCH_retval</a>(<a class=\"id\" href=\"#type\">type</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#__kprobes\">__kprobes</a> void <a class=\"id\" href=\"#FETCH_FUNC_NAME\">FETCH_FUNC_NAME</a>(<a class=\"id\" href=\"#retval\">retval</a>, <a class=\"id\" href=\"#type\">type</a>)(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>,\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  void *<a class=\"id\" href=\"#dummy\">dummy</a>, void *<a class=\"id\" href=\"#dest\">dest</a>)<span class=\"ts\"/>\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>*(<a class=\"id\" href=\"#type\">type</a> *)<a class=\"id\" href=\"#dest\">dest</a> = (<a class=\"id\" href=\"#type\">type</a>)<a class=\"id\" href=\"#regs_return_value\">regs_return_value</a>(<a class=\"id\" href=\"#regs\">regs</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"}", 
"<a class=\"id\" href=\"#DEFINE_BASIC_FETCH_FUNCS\">DEFINE_BASIC_FETCH_FUNCS</a>(<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"comment\">/* No string on the retval */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#fetch_retval_string\">fetch_retval_string</a> <a class=\"id\" href=\"#NULL\">NULL</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#fetch_retval_string_size\">fetch_retval_string_size</a> <a class=\"id\" href=\"#NULL\">NULL</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEFINE_FETCH_memory\">DEFINE_FETCH_memory</a>(<a class=\"id\" href=\"#type\">type</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#__kprobes\">__kprobes</a> void <a class=\"id\" href=\"#FETCH_FUNC_NAME\">FETCH_FUNC_NAME</a>(<a class=\"id\" href=\"#memory\">memory</a>, <a class=\"id\" href=\"#type\">type</a>)(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>,\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  void *<a class=\"id\" href=\"#addr\">addr</a>, void *<a class=\"id\" href=\"#dest\">dest</a>)<span class=\"ts\"/>\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> <a class=\"id\" href=\"#retval\">retval</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#probe_kernel_address\">probe_kernel_address</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#retval\">retval</a>))<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>*(<a class=\"id\" href=\"#type\">type</a> *)<a class=\"id\" href=\"#dest\">dest</a> = 0;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>else<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>*(<a class=\"id\" href=\"#type\">type</a> *)<a class=\"id\" href=\"#dest\">dest</a> = <a class=\"id\" href=\"#retval\">retval</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"}", 
"<a class=\"id\" href=\"#DEFINE_BASIC_FETCH_FUNCS\">DEFINE_BASIC_FETCH_FUNCS</a>(<a class=\"id\" href=\"#memory\">memory</a>)", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Fetch a null-terminated string. Caller MUST set *(u32 *)dest with max</span>", 
"<span class=\"comment\"> * length and relative data location.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#__kprobes\">__kprobes</a> void <a class=\"id\" href=\"#FETCH_FUNC_NAME\">FETCH_FUNC_NAME</a>(<a class=\"id\" href=\"#memory\">memory</a>, <a class=\"id\" href=\"#string\">string</a>)(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      void *<a class=\"id\" href=\"#addr\">addr</a>, void *<a class=\"id\" href=\"#dest\">dest</a>)", 
"{", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#maxlen\">maxlen</a> = <a class=\"id\" href=\"#get_rloc_len\">get_rloc_len</a>(*(<a class=\"id\" href=\"#u32\">u32</a> *)<a class=\"id\" href=\"#dest\">dest</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#dst\">dst</a> = <a class=\"id\" href=\"#get_rloc_data\">get_rloc_data</a>(<a class=\"id\" href=\"#dest\">dest</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#src\">src</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm_segment_t\">mm_segment_t</a> <a class=\"id\" href=\"#old_fs\">old_fs</a> = <a class=\"id\" href=\"#get_fs\">get_fs</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#maxlen\">maxlen</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Try to get string again, since the string can be changed while</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * probing.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_fs\">set_fs</a>(<a class=\"id\" href=\"#KERNEL_DS\">KERNEL_DS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pagefault_disable\">pagefault_disable</a>();", 
"<span class=\"ts\"/>do", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__copy_from_user_inatomic\">__copy_from_user_inatomic</a>(<a class=\"id\" href=\"#dst\">dst</a>++, <a class=\"id\" href=\"#src\">src</a>++, 1);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#dst\">dst</a>[-1] && <a class=\"id\" href=\"#ret\">ret</a> == 0 && <a class=\"id\" href=\"#src\">src</a> - (<a class=\"id\" href=\"#u8\">u8</a> *)<a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#maxlen\">maxlen</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>[-1] = '\\0';", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pagefault_enable\">pagefault_enable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_fs\">set_fs</a>(<a class=\"id\" href=\"#old_fs\">old_fs</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0) {<span class=\"ts\"/><span class=\"comment\">/* Failed to fetch string */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#u8\">u8</a> *)<a class=\"id\" href=\"#get_rloc_data\">get_rloc_data</a>(<a class=\"id\" href=\"#dest\">dest</a>))[0] = '\\0';", 
"<span class=\"ts\"/><span class=\"ts\"/>*(<a class=\"id\" href=\"#u32\">u32</a> *)<a class=\"id\" href=\"#dest\">dest</a> = <a class=\"id\" href=\"#make_data_rloc\">make_data_rloc</a>(0, <a class=\"id\" href=\"#get_rloc_offs\">get_rloc_offs</a>(*(<a class=\"id\" href=\"#u32\">u32</a> *)<a class=\"id\" href=\"#dest\">dest</a>));", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/>*(<a class=\"id\" href=\"#u32\">u32</a> *)<a class=\"id\" href=\"#dest\">dest</a> = <a class=\"id\" href=\"#make_data_rloc\">make_data_rloc</a>(<a class=\"id\" href=\"#src\">src</a> - (<a class=\"id\" href=\"#u8\">u8</a> *)<a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#get_rloc_offs\">get_rloc_offs</a>(*(<a class=\"id\" href=\"#u32\">u32</a> *)<a class=\"id\" href=\"#dest\">dest</a>));", 
"}", 
"<span class=\"comment\">/* Return the length of string -- including null terminal byte */</span>", 
"static <a class=\"id\" href=\"#__kprobes\">__kprobes</a> void <a class=\"id\" href=\"#FETCH_FUNC_NAME\">FETCH_FUNC_NAME</a>(<a class=\"id\" href=\"#memory\">memory</a>, <a class=\"id\" href=\"#string_size\">string_size</a>)(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#addr\">addr</a>, void *<a class=\"id\" href=\"#dest\">dest</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#len\">len</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm_segment_t\">mm_segment_t</a> <a class=\"id\" href=\"#old_fs\">old_fs</a> = <a class=\"id\" href=\"#get_fs\">get_fs</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_fs\">set_fs</a>(<a class=\"id\" href=\"#KERNEL_DS\">KERNEL_DS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pagefault_disable\">pagefault_disable</a>();", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__copy_from_user_inatomic\">__copy_from_user_inatomic</a>(&amp;<a class=\"id\" href=\"#c\">c</a>, (<a class=\"id\" href=\"#u8\">u8</a> *)<a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#len\">len</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a>++;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#c\">c</a> && <a class=\"id\" href=\"#ret\">ret</a> == 0 && <a class=\"id\" href=\"#len\">len</a> &lt; <a class=\"id\" href=\"#MAX_STRING_SIZE\">MAX_STRING_SIZE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pagefault_enable\">pagefault_enable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_fs\">set_fs</a>(<a class=\"id\" href=\"#old_fs\">old_fs</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)<span class=\"ts\"/><span class=\"comment\">/* Failed to check the length */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>*(<a class=\"id\" href=\"#u32\">u32</a> *)<a class=\"id\" href=\"#dest\">dest</a> = 0;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>*(<a class=\"id\" href=\"#u32\">u32</a> *)<a class=\"id\" href=\"#dest\">dest</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Memory fetching by symbol */</span>", 
"struct <a class=\"id\" href=\"#symbol_cache\">symbol_cache</a> {", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#symbol\">symbol</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>;", 
"};", 
"", 
"static unsigned long <a class=\"id\" href=\"#update_symbol_cache\">update_symbol_cache</a>(struct <a class=\"id\" href=\"#symbol_cache\">symbol_cache</a> *<a class=\"id\" href=\"#sc\">sc</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#addr\">addr</a> = (unsigned long)<a class=\"id\" href=\"#kallsyms_lookup_name\">kallsyms_lookup_name</a>(<a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#symbol\">symbol</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#addr\">addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#addr\">addr</a> += <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#addr\">addr</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#free_symbol_cache\">free_symbol_cache</a>(struct <a class=\"id\" href=\"#symbol_cache\">symbol_cache</a> *<a class=\"id\" href=\"#sc\">sc</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#symbol\">symbol</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#sc\">sc</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#symbol_cache\">symbol_cache</a> *<a class=\"id\" href=\"#alloc_symbol_cache\">alloc_symbol_cache</a>(const char *<a class=\"id\" href=\"#sym\">sym</a>, long <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#symbol_cache\">symbol_cache</a> *<a class=\"id\" href=\"#sc\">sc</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sym\">sym</a> || <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#sym\">sym</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sc\">sc</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#symbol_cache\">symbol_cache</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sc\">sc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#symbol\">symbol</a> = <a class=\"id\" href=\"#kstrdup\">kstrdup</a>(<a class=\"id\" href=\"#sym\">sym</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#symbol\">symbol</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#sc\">sc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#offset\">offset</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_symbol_cache\">update_symbol_cache</a>(<a class=\"id\" href=\"#sc\">sc</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sc\">sc</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEFINE_FETCH_symbol\">DEFINE_FETCH_symbol</a>(<a class=\"id\" href=\"#type\">type</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#__kprobes\">__kprobes</a> void <a class=\"id\" href=\"#FETCH_FUNC_NAME\">FETCH_FUNC_NAME</a>(<a class=\"id\" href=\"#symbol\">symbol</a>, <a class=\"id\" href=\"#type\">type</a>)(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>,\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  void *<a class=\"id\" href=\"#data\">data</a>, void *<a class=\"id\" href=\"#dest\">dest</a>)<span class=\"ts\"/>\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#symbol_cache\">symbol_cache</a> *<a class=\"id\" href=\"#sc\">sc</a> = <a class=\"id\" href=\"#data\">data</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#addr\">addr</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fetch_memory_\">fetch_memory_</a>##<a class=\"id\" href=\"#type\">type</a>(<a class=\"id\" href=\"#regs\">regs</a>, (void *)<a class=\"id\" href=\"#sc\">sc</a>-><a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#dest\">dest</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>else<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>*(<a class=\"id\" href=\"#type\">type</a> *)<a class=\"id\" href=\"#dest\">dest</a> = 0;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"}", 
"<a class=\"id\" href=\"#DEFINE_BASIC_FETCH_FUNCS\">DEFINE_BASIC_FETCH_FUNCS</a>(<a class=\"id\" href=\"#symbol\">symbol</a>)", 
"<a class=\"id\" href=\"#DEFINE_FETCH_symbol\">DEFINE_FETCH_symbol</a>(<a class=\"id\" href=\"#string\">string</a>)", 
"<a class=\"id\" href=\"#DEFINE_FETCH_symbol\">DEFINE_FETCH_symbol</a>(<a class=\"id\" href=\"#string_size\">string_size</a>)", 
"", 
"<span class=\"comment\">/* Dereference memory access function */</span>", 
"struct <a class=\"id\" href=\"#deref_fetch_param\">deref_fetch_param</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fetch_param\">fetch_param</a> <a class=\"id\" href=\"#orig\">orig</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#offset\">offset</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEFINE_FETCH_deref\">DEFINE_FETCH_deref</a>(<a class=\"id\" href=\"#type\">type</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"static <a class=\"id\" href=\"#__kprobes\">__kprobes</a> void <a class=\"id\" href=\"#FETCH_FUNC_NAME\">FETCH_FUNC_NAME</a>(<a class=\"id\" href=\"#deref\">deref</a>, <a class=\"id\" href=\"#type\">type</a>)(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>,\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    void *<a class=\"id\" href=\"#data\">data</a>, void *<a class=\"id\" href=\"#dest\">dest</a>)<span class=\"ts\"/>\\", 
"{<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#deref_fetch_param\">deref_fetch_param</a> *<a class=\"id\" href=\"#dprm\">dprm</a> = <a class=\"id\" href=\"#data\">data</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_fetch\">call_fetch</a>(&amp;<a class=\"id\" href=\"#dprm\">dprm</a>-><a class=\"id\" href=\"#orig\">orig</a>, <a class=\"id\" href=\"#regs\">regs</a>, &amp;<a class=\"id\" href=\"#addr\">addr</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a>) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> += <a class=\"id\" href=\"#dprm\">dprm</a>-><a class=\"id\" href=\"#offset\">offset</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fetch_memory_\">fetch_memory_</a>##<a class=\"id\" href=\"#type\">type</a>(<a class=\"id\" href=\"#regs\">regs</a>, (void *)<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#dest\">dest</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} else<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>*(<a class=\"id\" href=\"#type\">type</a> *)<a class=\"id\" href=\"#dest\">dest</a> = 0;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"}", 
"<a class=\"id\" href=\"#DEFINE_BASIC_FETCH_FUNCS\">DEFINE_BASIC_FETCH_FUNCS</a>(<a class=\"id\" href=\"#deref\">deref</a>)", 
"<a class=\"id\" href=\"#DEFINE_FETCH_deref\">DEFINE_FETCH_deref</a>(<a class=\"id\" href=\"#string\">string</a>)", 
"<a class=\"id\" href=\"#DEFINE_FETCH_deref\">DEFINE_FETCH_deref</a>(<a class=\"id\" href=\"#string_size\">string_size</a>)", 
"", 
"static <a class=\"id\" href=\"#__kprobes\">__kprobes</a> void <a class=\"id\" href=\"#free_deref_fetch_param\">free_deref_fetch_param</a>(struct <a class=\"id\" href=\"#deref_fetch_param\">deref_fetch_param</a> *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#CHECK_FETCH_FUNCS\">CHECK_FETCH_FUNCS</a>(<a class=\"id\" href=\"#deref\">deref</a>, <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#orig\">orig</a>.<a class=\"id\" href=\"#fn\">fn</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_deref_fetch_param\">free_deref_fetch_param</a>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#orig\">orig</a>.<a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#CHECK_FETCH_FUNCS\">CHECK_FETCH_FUNCS</a>(<a class=\"id\" href=\"#symbol\">symbol</a>, <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#orig\">orig</a>.<a class=\"id\" href=\"#fn\">fn</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_symbol_cache\">free_symbol_cache</a>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#orig\">orig</a>.<a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#data\">data</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Default (unsigned long) fetch type */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__DEFAULT_FETCH_TYPE\">__DEFAULT_FETCH_TYPE</a>(<a class=\"id\" href=\"#t\">t</a>) <a class=\"id\" href=\"#u\">u</a>##<a class=\"id\" href=\"#t\">t</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_DEFAULT_FETCH_TYPE\">_DEFAULT_FETCH_TYPE</a>(<a class=\"id\" href=\"#t\">t</a>) <a class=\"id\" href=\"#__DEFAULT_FETCH_TYPE\">__DEFAULT_FETCH_TYPE</a>(<a class=\"id\" href=\"#t\">t</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEFAULT_FETCH_TYPE\">DEFAULT_FETCH_TYPE</a> <a class=\"id\" href=\"#_DEFAULT_FETCH_TYPE\">_DEFAULT_FETCH_TYPE</a>(<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEFAULT_FETCH_TYPE_STR\">DEFAULT_FETCH_TYPE_STR</a> <a class=\"id\" href=\"#__stringify\">__stringify</a>(<a class=\"id\" href=\"#DEFAULT_FETCH_TYPE\">DEFAULT_FETCH_TYPE</a>)", 
"", 
"<span class=\"comment\">/* Fetch types */</span>", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FETCH_MTD_reg\">FETCH_MTD_reg</a> = 0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FETCH_MTD_stack\">FETCH_MTD_stack</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FETCH_MTD_retval\">FETCH_MTD_retval</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FETCH_MTD_memory\">FETCH_MTD_memory</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FETCH_MTD_symbol\">FETCH_MTD_symbol</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FETCH_MTD_deref\">FETCH_MTD_deref</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FETCH_MTD_END\">FETCH_MTD_END</a>,", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ASSIGN_FETCH_FUNC\">ASSIGN_FETCH_FUNC</a>(<a class=\"id\" href=\"#method\">method</a>, <a class=\"id\" href=\"#type\">type</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#FETCH_MTD_\">FETCH_MTD_</a>##<a class=\"id\" href=\"#method\">method</a>] = <a class=\"id\" href=\"#FETCH_FUNC_NAME\">FETCH_FUNC_NAME</a>(<a class=\"id\" href=\"#method\">method</a>, <a class=\"id\" href=\"#type\">type</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__ASSIGN_FETCH_TYPE\">__ASSIGN_FETCH_TYPE</a>(<a class=\"id\" href=\"#_name\">_name</a>, <a class=\"id\" href=\"#ptype\">ptype</a>, <a class=\"id\" href=\"#ftype\">ftype</a>, <a class=\"id\" href=\"#_size\">_size</a>, <a class=\"id\" href=\"#sign\">sign</a>, <a class=\"id\" href=\"#_fmttype\">_fmttype</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>{.<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#_name\">_name</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/> .<a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#_size\">_size</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/> .<a class=\"id\" href=\"#is_signed\">is_signed</a> = <a class=\"id\" href=\"#sign\">sign</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/> .<a class=\"id\" href=\"#print\">print</a> = <a class=\"id\" href=\"#PRINT_TYPE_FUNC_NAME\">PRINT_TYPE_FUNC_NAME</a>(<a class=\"id\" href=\"#ptype\">ptype</a>),<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/> .<a class=\"id\" href=\"#fmt\">fmt</a> = <a class=\"id\" href=\"#PRINT_TYPE_FMT_NAME\">PRINT_TYPE_FMT_NAME</a>(<a class=\"id\" href=\"#ptype\">ptype</a>),<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/> .<a class=\"id\" href=\"#fmttype\">fmttype</a> = <a class=\"id\" href=\"#_fmttype\">_fmttype</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/> .<a class=\"id\" href=\"#fetch\">fetch</a> = {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<a class=\"id\" href=\"#ASSIGN_FETCH_FUNC\">ASSIGN_FETCH_FUNC</a>(<a class=\"id\" href=\"#reg\">reg</a>, <a class=\"id\" href=\"#ftype\">ftype</a>),<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<a class=\"id\" href=\"#ASSIGN_FETCH_FUNC\">ASSIGN_FETCH_FUNC</a>(<a class=\"id\" href=\"#stack\">stack</a>, <a class=\"id\" href=\"#ftype\">ftype</a>),<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<a class=\"id\" href=\"#ASSIGN_FETCH_FUNC\">ASSIGN_FETCH_FUNC</a>(<a class=\"id\" href=\"#retval\">retval</a>, <a class=\"id\" href=\"#ftype\">ftype</a>),<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<a class=\"id\" href=\"#ASSIGN_FETCH_FUNC\">ASSIGN_FETCH_FUNC</a>(<a class=\"id\" href=\"#memory\">memory</a>, <a class=\"id\" href=\"#ftype\">ftype</a>),<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<a class=\"id\" href=\"#ASSIGN_FETCH_FUNC\">ASSIGN_FETCH_FUNC</a>(<a class=\"id\" href=\"#symbol\">symbol</a>, <a class=\"id\" href=\"#ftype\">ftype</a>),<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<a class=\"id\" href=\"#ASSIGN_FETCH_FUNC\">ASSIGN_FETCH_FUNC</a>(<a class=\"id\" href=\"#deref\">deref</a>, <a class=\"id\" href=\"#ftype\">ftype</a>),<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>  }<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ASSIGN_FETCH_TYPE\">ASSIGN_FETCH_TYPE</a>(<a class=\"id\" href=\"#ptype\">ptype</a>, <a class=\"id\" href=\"#ftype\">ftype</a>, <a class=\"id\" href=\"#sign\">sign</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ASSIGN_FETCH_TYPE\">__ASSIGN_FETCH_TYPE</a>(#<a class=\"id\" href=\"#ptype\">ptype</a>, <a class=\"id\" href=\"#ptype\">ptype</a>, <a class=\"id\" href=\"#ftype\">ftype</a>, sizeof(<a class=\"id\" href=\"#ftype\">ftype</a>), <a class=\"id\" href=\"#sign\">sign</a>, #<a class=\"id\" href=\"#ptype\">ptype</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FETCH_TYPE_STRING\">FETCH_TYPE_STRING</a> 0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FETCH_TYPE_STRSIZE\">FETCH_TYPE_STRSIZE</a> 1", 
"", 
"<span class=\"comment\">/* Fetch type information table */</span>", 
"static const struct <a class=\"id\" href=\"#fetch_type\">fetch_type</a> {", 
"<span class=\"ts\"/>const char<span class=\"ts\"/>*<a class=\"id\" href=\"#name\">name</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Name of type */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Byte size of type */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#is_signed\">is_signed</a>;<span class=\"ts\"/><span class=\"comment\">/* Signed flag */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#print_type_func_t\">print_type_func_t</a><span class=\"ts\"/><a class=\"id\" href=\"#print\">print</a>;<span class=\"ts\"/><span class=\"comment\">/* Print functions */</span>", 
"<span class=\"ts\"/>const char<span class=\"ts\"/>*<a class=\"id\" href=\"#fmt\">fmt</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Fromat string */</span>", 
"<span class=\"ts\"/>const char<span class=\"ts\"/>*<a class=\"id\" href=\"#fmttype\">fmttype</a>;<span class=\"ts\"/><span class=\"comment\">/* Name in format file */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* Fetch functions */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fetch_func_t\">fetch_func_t</a><span class=\"ts\"/><a class=\"id\" href=\"#fetch\">fetch</a>[<a class=\"id\" href=\"#FETCH_MTD_END\">FETCH_MTD_END</a>];", 
"} <a class=\"id\" href=\"#fetch_type_table\">fetch_type_table</a>[] = {", 
"<span class=\"ts\"/><span class=\"comment\">/* Special types */</span>", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#FETCH_TYPE_STRING\">FETCH_TYPE_STRING</a>] = <a class=\"id\" href=\"#__ASSIGN_FETCH_TYPE\">__ASSIGN_FETCH_TYPE</a>(\"string\", <a class=\"id\" href=\"#string\">string</a>, <a class=\"id\" href=\"#string\">string</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(<a class=\"id\" href=\"#u32\">u32</a>), 1, \"__data_loc char[]\"),", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#FETCH_TYPE_STRSIZE\">FETCH_TYPE_STRSIZE</a>] = <a class=\"id\" href=\"#__ASSIGN_FETCH_TYPE\">__ASSIGN_FETCH_TYPE</a>(\"string_size\", <a class=\"id\" href=\"#u32\">u32</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#string_size\">string_size</a>, sizeof(<a class=\"id\" href=\"#u32\">u32</a>), 0, \"u32\"),", 
"<span class=\"ts\"/><span class=\"comment\">/* Basic types */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ASSIGN_FETCH_TYPE\">ASSIGN_FETCH_TYPE</a>(<a class=\"id\" href=\"#u8\">u8</a>,  <a class=\"id\" href=\"#u8\">u8</a>,  0),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ASSIGN_FETCH_TYPE\">ASSIGN_FETCH_TYPE</a>(<a class=\"id\" href=\"#u16\">u16</a>, <a class=\"id\" href=\"#u16\">u16</a>, 0),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ASSIGN_FETCH_TYPE\">ASSIGN_FETCH_TYPE</a>(<a class=\"id\" href=\"#u32\">u32</a>, <a class=\"id\" href=\"#u32\">u32</a>, 0),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ASSIGN_FETCH_TYPE\">ASSIGN_FETCH_TYPE</a>(<a class=\"id\" href=\"#u64\">u64</a>, <a class=\"id\" href=\"#u64\">u64</a>, 0),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ASSIGN_FETCH_TYPE\">ASSIGN_FETCH_TYPE</a>(<a class=\"id\" href=\"#s8\">s8</a>,  <a class=\"id\" href=\"#u8\">u8</a>,  1),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ASSIGN_FETCH_TYPE\">ASSIGN_FETCH_TYPE</a>(<a class=\"id\" href=\"#s16\">s16</a>, <a class=\"id\" href=\"#u16\">u16</a>, 1),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ASSIGN_FETCH_TYPE\">ASSIGN_FETCH_TYPE</a>(<a class=\"id\" href=\"#s32\">s32</a>, <a class=\"id\" href=\"#u32\">u32</a>, 1),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ASSIGN_FETCH_TYPE\">ASSIGN_FETCH_TYPE</a>(<a class=\"id\" href=\"#s64\">s64</a>, <a class=\"id\" href=\"#u64\">u64</a>, 1),", 
"};", 
"", 
"static const struct <a class=\"id\" href=\"#fetch_type\">fetch_type</a> *<a class=\"id\" href=\"#find_fetch_type\">find_fetch_type</a>(const char *<a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#type\">type</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#DEFAULT_FETCH_TYPE_STR\">DEFAULT_FETCH_TYPE_STR</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#fetch_type_table\">fetch_type_table</a>); <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#fetch_type_table\">fetch_type_table</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#fetch_type_table\">fetch_type_table</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Special function : only accept unsigned long */</span>", 
"static <a class=\"id\" href=\"#__kprobes\">__kprobes</a> void <a class=\"id\" href=\"#fetch_stack_address\">fetch_stack_address</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  void *<a class=\"id\" href=\"#dummy\">dummy</a>, void *<a class=\"id\" href=\"#dest\">dest</a>)", 
"{", 
"<span class=\"ts\"/>*(unsigned long *)<a class=\"id\" href=\"#dest\">dest</a> = <a class=\"id\" href=\"#kernel_stack_pointer\">kernel_stack_pointer</a>(<a class=\"id\" href=\"#regs\">regs</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#fetch_func_t\">fetch_func_t</a> <a class=\"id\" href=\"#get_fetch_size_function\">get_fetch_size_function</a>(const struct <a class=\"id\" href=\"#fetch_type\">fetch_type</a> *<a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#fetch_func_t\">fetch_func_t</a> <a class=\"id\" href=\"#orig_fn\">orig_fn</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> != &amp;<a class=\"id\" href=\"#fetch_type_table\">fetch_type_table</a>[<a class=\"id\" href=\"#FETCH_TYPE_STRING\">FETCH_TYPE_STRING</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;<span class=\"ts\"/><span class=\"comment\">/* Only string type needs size function */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#FETCH_MTD_END\">FETCH_MTD_END</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#fetch\">fetch</a>[<a class=\"id\" href=\"#i\">i</a>] == <a class=\"id\" href=\"#orig_fn\">orig_fn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#fetch_type_table\">fetch_type_table</a>[<a class=\"id\" href=\"#FETCH_TYPE_STRSIZE\">FETCH_TYPE_STRSIZE</a>].<a class=\"id\" href=\"#fetch\">fetch</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);<span class=\"ts\"/><span class=\"comment\">/* This should not happen */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * Kprobe event core functions</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#probe_arg\">probe_arg</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fetch_param\">fetch_param</a><span class=\"ts\"/><a class=\"id\" href=\"#fetch\">fetch</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fetch_param\">fetch_param</a><span class=\"ts\"/><a class=\"id\" href=\"#fetch_size\">fetch_size</a>;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a>;<span class=\"ts\"/><span class=\"comment\">/* Offset from argument entry */</span>", 
"<span class=\"ts\"/>const char<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#name\">name</a>;<span class=\"ts\"/><span class=\"comment\">/* Name of this argument */</span>", 
"<span class=\"ts\"/>const char<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#comm\">comm</a>;<span class=\"ts\"/><span class=\"comment\">/* Command of this argument */</span>", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#fetch_type\">fetch_type</a><span class=\"ts\"/>*<a class=\"id\" href=\"#type\">type</a>;<span class=\"ts\"/><span class=\"comment\">/* Type of this argument */</span>", 
"};", 
"", 
"<span class=\"comment\">/* Flags for trace_probe */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TP_FLAG_TRACE\">TP_FLAG_TRACE</a><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TP_FLAG_PROFILE\">TP_FLAG_PROFILE</a><span class=\"ts\"/>2", 
"", 
"struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kretprobe\">kretprobe</a><span class=\"ts\"/><a class=\"id\" href=\"#rp\">rp</a>;<span class=\"ts\"/><span class=\"comment\">/* Use rp.kp for kprobe use */</span>", 
"<span class=\"ts\"/>unsigned long <span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nhit\">nhit</a>;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>;<span class=\"ts\"/><span class=\"comment\">/* For TP_FLAG_* */</span>", 
"<span class=\"ts\"/>const char<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#symbol\">symbol</a>;<span class=\"ts\"/><span class=\"comment\">/* symbol name */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_event_class\">ftrace_event_class</a><span class=\"ts\"/><a class=\"id\" href=\"#class\">class</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_event_call\">ftrace_event_call</a><span class=\"ts\"/><a class=\"id\" href=\"#call\">call</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* trace entry size */</span>", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_args\">nr_args</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#probe_arg\">probe_arg</a><span class=\"ts\"/><a class=\"id\" href=\"#args\">args</a>[];", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SIZEOF_TRACE_PROBE\">SIZEOF_TRACE_PROBE</a>(<a class=\"id\" href=\"#n\">n</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a>, <a class=\"id\" href=\"#args\">args</a>) +<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(sizeof(struct <a class=\"id\" href=\"#probe_arg\">probe_arg</a>) * (<a class=\"id\" href=\"#n\">n</a>)))", 
"", 
"", 
"static <a class=\"id\" href=\"#__kprobes\">__kprobes</a> int <a class=\"id\" href=\"#probe_is_return\">probe_is_return</a>(struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rp\">rp</a>.<a class=\"id\" href=\"#handler\">handler</a> != <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#__kprobes\">__kprobes</a> const char *<a class=\"id\" href=\"#probe_symbol\">probe_symbol</a>(struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#symbol\">symbol</a> ? <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#symbol\">symbol</a> : \"unknown\";", 
"}", 
"", 
"static int <a class=\"id\" href=\"#register_probe_event\">register_probe_event</a>(struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a> *<a class=\"id\" href=\"#tp\">tp</a>);", 
"static void <a class=\"id\" href=\"#unregister_probe_event\">unregister_probe_event</a>(struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a> *<a class=\"id\" href=\"#tp\">tp</a>);", 
"", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#probe_lock\">probe_lock</a>);", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#probe_list\">probe_list</a>);", 
"", 
"static int <a class=\"id\" href=\"#kprobe_dispatcher\">kprobe_dispatcher</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#kp\">kp</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>);", 
"static int <a class=\"id\" href=\"#kretprobe_dispatcher\">kretprobe_dispatcher</a>(struct <a class=\"id\" href=\"#kretprobe_instance\">kretprobe_instance</a> *<a class=\"id\" href=\"#ri\">ri</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>);", 
"", 
"<span class=\"comment\">/* Check the name is good for event/group/fields */</span>", 
"static int <a class=\"id\" href=\"#is_good_name\">is_good_name</a>(const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#isalpha\">isalpha</a>(*<a class=\"id\" href=\"#name\">name</a>) && *<a class=\"id\" href=\"#name\">name</a> != '_')", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>while (*++<a class=\"id\" href=\"#name\">name</a> != '\\0') {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#isalpha\">isalpha</a>(*<a class=\"id\" href=\"#name\">name</a>) && !<a class=\"id\" href=\"#isdigit\">isdigit</a>(*<a class=\"id\" href=\"#name\">name</a>) && *<a class=\"id\" href=\"#name\">name</a> != '_')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Allocate new trace_probe and initialize it (including kprobes).</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a> *<a class=\"id\" href=\"#alloc_trace_probe\">alloc_trace_probe</a>(const char *<a class=\"id\" href=\"#group\">group</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const char *<a class=\"id\" href=\"#event\">event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     void *<a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const char *<a class=\"id\" href=\"#symbol\">symbol</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#offs\">offs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#nargs\">nargs</a>, int <a class=\"id\" href=\"#is_return\">is_return</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a> *<a class=\"id\" href=\"#tp\">tp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#SIZEOF_TRACE_PROBE\">SIZEOF_TRACE_PROBE</a>(<a class=\"id\" href=\"#nargs\">nargs</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tp\">tp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#ret\">ret</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#symbol\">symbol</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#symbol\">symbol</a> = <a class=\"id\" href=\"#kstrdup\">kstrdup</a>(<a class=\"id\" href=\"#symbol\">symbol</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#symbol\">symbol</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rp\">rp</a>.<a class=\"id\" href=\"#kp\">kp</a>.<a class=\"id\" href=\"#symbol_name\">symbol_name</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#symbol\">symbol</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rp\">rp</a>.<a class=\"id\" href=\"#kp\">kp</a>.<a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#offs\">offs</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rp\">rp</a>.<a class=\"id\" href=\"#kp\">kp</a>.<a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_return\">is_return</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rp\">rp</a>.<a class=\"id\" href=\"#handler\">handler</a> = <a class=\"id\" href=\"#kretprobe_dispatcher\">kretprobe_dispatcher</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rp\">rp</a>.<a class=\"id\" href=\"#kp\">kp</a>.<a class=\"id\" href=\"#pre_handler\">pre_handler</a> = <a class=\"id\" href=\"#kprobe_dispatcher\">kprobe_dispatcher</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#event\">event</a> || !<a class=\"id\" href=\"#is_good_name\">is_good_name</a>(<a class=\"id\" href=\"#event\">event</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#call\">call</a>.<a class=\"id\" href=\"#class\">class</a> = &amp;<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#class\">class</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#call\">call</a>.<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#kstrdup\">kstrdup</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#call\">call</a>.<a class=\"id\" href=\"#name\">name</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#group\">group</a> || !<a class=\"id\" href=\"#is_good_name\">is_good_name</a>(<a class=\"id\" href=\"#group\">group</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#class\">class</a>.<a class=\"id\" href=\"#system\">system</a> = <a class=\"id\" href=\"#kstrdup\">kstrdup</a>(<a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#class\">class</a>.<a class=\"id\" href=\"#system\">system</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tp\">tp</a>;", 
"<a class=\"id\" href=\"#error\">error</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#call\">call</a>.<a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#symbol\">symbol</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#ret\">ret</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#free_probe_arg\">free_probe_arg</a>(struct <a class=\"id\" href=\"#probe_arg\">probe_arg</a> *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#CHECK_FETCH_FUNCS\">CHECK_FETCH_FUNCS</a>(<a class=\"id\" href=\"#deref\">deref</a>, <a class=\"id\" href=\"#arg\">arg</a>-><a class=\"id\" href=\"#fetch\">fetch</a>.<a class=\"id\" href=\"#fn\">fn</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_deref_fetch_param\">free_deref_fetch_param</a>(<a class=\"id\" href=\"#arg\">arg</a>-><a class=\"id\" href=\"#fetch\">fetch</a>.<a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#CHECK_FETCH_FUNCS\">CHECK_FETCH_FUNCS</a>(<a class=\"id\" href=\"#symbol\">symbol</a>, <a class=\"id\" href=\"#arg\">arg</a>-><a class=\"id\" href=\"#fetch\">fetch</a>.<a class=\"id\" href=\"#fn\">fn</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_symbol_cache\">free_symbol_cache</a>(<a class=\"id\" href=\"#arg\">arg</a>-><a class=\"id\" href=\"#fetch\">fetch</a>.<a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#arg\">arg</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#arg\">arg</a>-><a class=\"id\" href=\"#comm\">comm</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#free_trace_probe\">free_trace_probe</a>(struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#nr_args\">nr_args</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_probe_arg\">free_probe_arg</a>(&amp;<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#call\">call</a>.<a class=\"id\" href=\"#class\">class</a>-><a class=\"id\" href=\"#system\">system</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#call\">call</a>.<a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#symbol\">symbol</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a> *<a class=\"id\" href=\"#find_probe_event\">find_probe_event</a>(const char *<a class=\"id\" href=\"#event\">event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const char *<a class=\"id\" href=\"#group\">group</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a> *<a class=\"id\" href=\"#tp\">tp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#tp\">tp</a>, &amp;<a class=\"id\" href=\"#probe_list\">probe_list</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#call\">call</a>.<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#event\">event</a>) == 0 &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#call\">call</a>.<a class=\"id\" href=\"#class\">class</a>-><a class=\"id\" href=\"#system\">system</a>, <a class=\"id\" href=\"#group\">group</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#tp\">tp</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Unregister a trace_probe and probe_event: call with locking probe_lock */</span>", 
"static void <a class=\"id\" href=\"#unregister_trace_probe\">unregister_trace_probe</a>(struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#probe_is_return\">probe_is_return</a>(<a class=\"id\" href=\"#tp\">tp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unregister_kretprobe\">unregister_kretprobe</a>(&amp;<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rp\">rp</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unregister_kprobe\">unregister_kprobe</a>(&amp;<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rp\">rp</a>.<a class=\"id\" href=\"#kp\">kp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unregister_probe_event\">unregister_probe_event</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Register a trace_probe and probe_event */</span>", 
"static int <a class=\"id\" href=\"#register_trace_probe\">register_trace_probe</a>(struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a> *<a class=\"id\" href=\"#old_tp\">old_tp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#probe_lock\">probe_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* register as an event */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_tp\">old_tp</a> = <a class=\"id\" href=\"#find_probe_event\">find_probe_event</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#call\">call</a>.<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#call\">call</a>.<a class=\"id\" href=\"#class\">class</a>-><a class=\"id\" href=\"#system\">system</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#old_tp\">old_tp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* delete old event */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unregister_trace_probe\">unregister_trace_probe</a>(<a class=\"id\" href=\"#old_tp\">old_tp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_trace_probe\">free_trace_probe</a>(<a class=\"id\" href=\"#old_tp\">old_tp</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#register_probe_event\">register_probe_event</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"Faild to register probe event(%d)\\n\", <a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rp\">rp</a>.<a class=\"id\" href=\"#kp\">kp</a>.<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#KPROBE_FLAG_DISABLED\">KPROBE_FLAG_DISABLED</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#probe_is_return\">probe_is_return</a>(<a class=\"id\" href=\"#tp\">tp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#register_kretprobe\">register_kretprobe</a>(&amp;<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rp\">rp</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#register_kprobe\">register_kprobe</a>(&amp;<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rp\">rp</a>.<a class=\"id\" href=\"#kp\">kp</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"Could not insert probe(%d)\\n\", <a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == -<a class=\"id\" href=\"#EILSEQ\">EILSEQ</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"Probing address(0x%p) is not an \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"instruction boundary.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rp\">rp</a>.<a class=\"id\" href=\"#kp\">kp</a>.<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unregister_probe_event\">unregister_probe_event</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#probe_list\">probe_list</a>);", 
"<a class=\"id\" href=\"#end\">end</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#probe_lock\">probe_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Split symbol and offset. */</span>", 
"static int <a class=\"id\" href=\"#split_symbol_offset\">split_symbol_offset</a>(char *<a class=\"id\" href=\"#symbol\">symbol</a>, unsigned long *<a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#offset\">offset</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#strchr\">strchr</a>(<a class=\"id\" href=\"#symbol\">symbol</a>, '+');", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* skip sign because strict_strtol doesn't accept '+' */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#strict_strtoul\">strict_strtoul</a>(<a class=\"id\" href=\"#tmp\">tmp</a> + 1, 0, <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#tmp\">tmp</a> = '\\0';", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#offset\">offset</a> = 0;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PARAM_MAX_ARGS\">PARAM_MAX_ARGS</a> 16", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PARAM_MAX_STACK\">PARAM_MAX_STACK</a> (<a class=\"id\" href=\"#THREAD_SIZE\">THREAD_SIZE</a> / sizeof(unsigned long))", 
"", 
"static int <a class=\"id\" href=\"#parse_probe_vars\">parse_probe_vars</a>(char *<a class=\"id\" href=\"#arg\">arg</a>, const struct <a class=\"id\" href=\"#fetch_type\">fetch_type</a> *<a class=\"id\" href=\"#t\">t</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#fetch_param\">fetch_param</a> *<a class=\"id\" href=\"#f\">f</a>, int <a class=\"id\" href=\"#is_return\">is_return</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#param\">param</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#arg\">arg</a>, \"retval\") == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_return\">is_return</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#fn\">fn</a> = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#fetch\">fetch</a>[<a class=\"id\" href=\"#FETCH_MTD_retval\">FETCH_MTD_retval</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#arg\">arg</a>, \"stack\", 5) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#arg\">arg</a>[5] == '\\0') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#DEFAULT_FETCH_TYPE_STR\">DEFAULT_FETCH_TYPE_STR</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#fn\">fn</a> = <a class=\"id\" href=\"#fetch_stack_address\">fetch_stack_address</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#isdigit\">isdigit</a>(<a class=\"id\" href=\"#arg\">arg</a>[5])) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#strict_strtoul\">strict_strtoul</a>(<a class=\"id\" href=\"#arg\">arg</a> + 5, 10, &amp;<a class=\"id\" href=\"#param\">param</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> || <a class=\"id\" href=\"#param\">param</a> &gt; <a class=\"id\" href=\"#PARAM_MAX_STACK\">PARAM_MAX_STACK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#fn\">fn</a> = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#fetch\">fetch</a>[<a class=\"id\" href=\"#FETCH_MTD_stack\">FETCH_MTD_stack</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#data\">data</a> = (void *)<a class=\"id\" href=\"#param\">param</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Recursive argument parser */</span>", 
"static int <a class=\"id\" href=\"#__parse_probe_arg\">__parse_probe_arg</a>(char *<a class=\"id\" href=\"#arg\">arg</a>, const struct <a class=\"id\" href=\"#fetch_type\">fetch_type</a> *<a class=\"id\" href=\"#t\">t</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#fetch_param\">fetch_param</a> *<a class=\"id\" href=\"#f\">f</a>, int <a class=\"id\" href=\"#is_return\">is_return</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#param\">param</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#arg\">arg</a>[0]) {", 
"<span class=\"ts\"/>case '$':", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#parse_probe_vars\">parse_probe_vars</a>(<a class=\"id\" href=\"#arg\">arg</a> + 1, <a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#f\">f</a>, <a class=\"id\" href=\"#is_return\">is_return</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case '%':<span class=\"ts\"/><span class=\"comment\">/* named register */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#regs_query_register_offset\">regs_query_register_offset</a>(<a class=\"id\" href=\"#arg\">arg</a> + 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#fn\">fn</a> = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#fetch\">fetch</a>[<a class=\"id\" href=\"#FETCH_MTD_reg\">FETCH_MTD_reg</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#data\">data</a> = (void *)(unsigned long)<a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case '@':<span class=\"ts\"/><span class=\"comment\">/* memory or symbol */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#isdigit\">isdigit</a>(<a class=\"id\" href=\"#arg\">arg</a>[1])) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#strict_strtoul\">strict_strtoul</a>(<a class=\"id\" href=\"#arg\">arg</a> + 1, 0, &amp;<a class=\"id\" href=\"#param\">param</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#fn\">fn</a> = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#fetch\">fetch</a>[<a class=\"id\" href=\"#FETCH_MTD_memory\">FETCH_MTD_memory</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#data\">data</a> = (void *)<a class=\"id\" href=\"#param\">param</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#split_symbol_offset\">split_symbol_offset</a>(<a class=\"id\" href=\"#arg\">arg</a> + 1, &amp;<a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#alloc_symbol_cache\">alloc_symbol_cache</a>(<a class=\"id\" href=\"#arg\">arg</a> + 1, <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#data\">data</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#fn\">fn</a> = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#fetch\">fetch</a>[<a class=\"id\" href=\"#FETCH_MTD_symbol\">FETCH_MTD_symbol</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case '+':<span class=\"ts\"/><span class=\"comment\">/* deref memory */</span>", 
"<span class=\"ts\"/>case '-':", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#strchr\">strchr</a>(<a class=\"id\" href=\"#arg\">arg</a>, '(');", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tmp\">tmp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#tmp\">tmp</a> = '\\0';", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#strict_strtol\">strict_strtol</a>(<a class=\"id\" href=\"#arg\">arg</a> + 1, 0, &amp;<a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#arg\">arg</a>[0] == '-')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = -<a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arg\">arg</a> = <a class=\"id\" href=\"#tmp\">tmp</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#strrchr\">strrchr</a>(<a class=\"id\" href=\"#arg\">arg</a>, ')');", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#deref_fetch_param\">deref_fetch_param</a> *<a class=\"id\" href=\"#dprm\">dprm</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#fetch_type\">fetch_type</a> *<a class=\"id\" href=\"#t2\">t2</a> = <a class=\"id\" href=\"#find_fetch_type\">find_fetch_type</a>(<a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#tmp\">tmp</a> = '\\0';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dprm\">dprm</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#deref_fetch_param\">deref_fetch_param</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#dprm\">dprm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dprm\">dprm</a>-><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__parse_probe_arg\">__parse_probe_arg</a>(<a class=\"id\" href=\"#arg\">arg</a>, <a class=\"id\" href=\"#t2\">t2</a>, &amp;<a class=\"id\" href=\"#dprm\">dprm</a>-><a class=\"id\" href=\"#orig\">orig</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#is_return\">is_return</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#dprm\">dprm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#fn\">fn</a> = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#fetch\">fetch</a>[<a class=\"id\" href=\"#FETCH_MTD_deref\">FETCH_MTD_deref</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#data\">data</a> = (void *)<a class=\"id\" href=\"#dprm\">dprm</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a> && !<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#fn\">fn</a>) {<span class=\"ts\"/><span class=\"comment\">/* Parsed, but do not find fetch method */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"%s type has no corresponding fetch method.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/* String length checking wrapper */</span>", 
"static int <a class=\"id\" href=\"#parse_probe_arg\">parse_probe_arg</a>(char *<a class=\"id\" href=\"#arg\">arg</a>, struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a> *<a class=\"id\" href=\"#tp\">tp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#probe_arg\">probe_arg</a> *<a class=\"id\" href=\"#parg\">parg</a>, int <a class=\"id\" href=\"#is_return\">is_return</a>)", 
"{", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#t\">t</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#arg\">arg</a>) &gt; <a class=\"id\" href=\"#MAX_ARGSTR_LEN\">MAX_ARGSTR_LEN</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Argument is too long.: %s\\n\",  <a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parg\">parg</a>-><a class=\"id\" href=\"#comm\">comm</a> = <a class=\"id\" href=\"#kstrdup\">kstrdup</a>(<a class=\"id\" href=\"#arg\">arg</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#parg\">parg</a>-><a class=\"id\" href=\"#comm\">comm</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Failed to allocate memory for command '%s'.\\n\", <a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#strchr\">strchr</a>(<a class=\"id\" href=\"#parg\">parg</a>-><a class=\"id\" href=\"#comm\">comm</a>, ':');", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arg\">arg</a>[<a class=\"id\" href=\"#t\">t</a> - <a class=\"id\" href=\"#parg\">parg</a>-><a class=\"id\" href=\"#comm\">comm</a>] = '\\0';", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parg\">parg</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#find_fetch_type\">find_fetch_type</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#parg\">parg</a>-><a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Unsupported type: %s\\n\", <a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parg\">parg</a>-><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#size\">size</a> += <a class=\"id\" href=\"#parg\">parg</a>-><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__parse_probe_arg\">__parse_probe_arg</a>(<a class=\"id\" href=\"#arg\">arg</a>, <a class=\"id\" href=\"#parg\">parg</a>-><a class=\"id\" href=\"#type\">type</a>, &amp;<a class=\"id\" href=\"#parg\">parg</a>-><a class=\"id\" href=\"#fetch\">fetch</a>, <a class=\"id\" href=\"#is_return\">is_return</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parg\">parg</a>-><a class=\"id\" href=\"#fetch_size\">fetch_size</a>.<a class=\"id\" href=\"#fn\">fn</a> = <a class=\"id\" href=\"#get_fetch_size_function\">get_fetch_size_function</a>(<a class=\"id\" href=\"#parg\">parg</a>-><a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#parg\">parg</a>-><a class=\"id\" href=\"#fetch\">fetch</a>.<a class=\"id\" href=\"#fn\">fn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parg\">parg</a>-><a class=\"id\" href=\"#fetch_size\">fetch_size</a>.<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#parg\">parg</a>-><a class=\"id\" href=\"#fetch\">fetch</a>.<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Return 1 if name is reserved or already used by another argument */</span>", 
"static int <a class=\"id\" href=\"#conflict_field_name\">conflict_field_name</a>(const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#probe_arg\">probe_arg</a> *<a class=\"id\" href=\"#args\">args</a>, int <a class=\"id\" href=\"#narg\">narg</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#reserved_field_names\">reserved_field_names</a>); <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#reserved_field_names\">reserved_field_names</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#name\">name</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#narg\">narg</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#name\">name</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#create_trace_probe\">create_trace_probe</a>(int <a class=\"id\" href=\"#argc\">argc</a>, char **<a class=\"id\" href=\"#argv\">argv</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Argument syntax:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  - Add kprobe: p[:[GRP/]EVENT] KSYM[+OFFS]|KADDR [FETCHARGS]</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  - Add kretprobe: r[:[GRP/]EVENT] KSYM[+0] [FETCHARGS]</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Fetch args:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  $retval<span class=\"ts\"/>: fetch return value</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  $stack<span class=\"ts\"/>: fetch stack address</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  $stackN<span class=\"ts\"/>: fetch Nth of stack (N:0-)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  @ADDR<span class=\"ts\"/>: fetch memory at ADDR (ADDR should be in kernel)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  @SYM[+|-offs] : fetch memory at SYM +|- offs (SYM is a data symbol)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  %REG<span class=\"ts\"/>: fetch register REG</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Dereferencing memory fetch:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  +|-offs(ARG) : fetch memory at ARG +|- offs address.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Alias name of args:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  NAME=FETCHARG : set NAME as alias of FETCHARG.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Type of args:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  FETCHARG:TYPE : use TYPE instead of unsigned long.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a> *<a class=\"id\" href=\"#tp\">tp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#is_return\">is_return</a> = 0, <a class=\"id\" href=\"#is_delete\">is_delete</a> = 0;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#symbol\">symbol</a> = <a class=\"id\" href=\"#NULL\">NULL</a>, *<a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#NULL\">NULL</a>, *<a class=\"id\" href=\"#group\">group</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#arg\">arg</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#offset\">offset</a> = 0;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#MAX_EVENT_NAME_LEN\">MAX_EVENT_NAME_LEN</a>];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* argc must be &gt;= 1 */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#argv\">argv</a>[0][0] == 'p')", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#is_return\">is_return</a> = 0;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#argv\">argv</a>[0][0] == 'r')", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#is_return\">is_return</a> = 1;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#argv\">argv</a>[0][0] == '-')", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#is_delete\">is_delete</a> = 1;", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Probe definition must be started with 'p', 'r' or\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\" '-'.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#argv\">argv</a>[0][1] == ':') {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = &amp;<a class=\"id\" href=\"#argv\">argv</a>[0][2];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strchr\">strchr</a>(<a class=\"id\" href=\"#event\">event</a>, '/')) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a> = <a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#strchr\">strchr</a>(<a class=\"id\" href=\"#group\">group</a>, '/') + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>[-1] = '\\0';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#group\">group</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Group name is not specified\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#event\">event</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Event name is not specified\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#group\">group</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a> = <a class=\"id\" href=\"#KPROBE_EVENT_SYSTEM\">KPROBE_EVENT_SYSTEM</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_delete\">is_delete</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#event\">event</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Delete command needs an event name.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#probe_lock\">probe_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#find_probe_event\">find_probe_event</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tp\">tp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#probe_lock\">probe_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Event %s/%s doesn't exist.\\n\", <a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* delete an event */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unregister_trace_probe\">unregister_trace_probe</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_trace_probe\">free_trace_probe</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#probe_lock\">probe_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#argc\">argc</a> &lt; 2) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Probe point is not specified.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#isdigit\">isdigit</a>(<a class=\"id\" href=\"#argv\">argv</a>[1][0])) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_return\">is_return</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Return probe point must be a symbol.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* an address specified */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#strict_strtoul\">strict_strtoul</a>(&amp;<a class=\"id\" href=\"#argv\">argv</a>[1][0], 0, (unsigned long *)&amp;<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Failed to parse address.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* a symbol specified */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#symbol\">symbol</a> = <a class=\"id\" href=\"#argv\">argv</a>[1];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* TODO: support .init module functions */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#split_symbol_offset\">split_symbol_offset</a>(<a class=\"id\" href=\"#symbol\">symbol</a>, &amp;<a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Failed to parse symbol.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> && <a class=\"id\" href=\"#is_return\">is_return</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Return probe must be used without offset.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#argc\">argc</a> -= 2; <a class=\"id\" href=\"#argv\">argv</a> += 2;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* setup a probe */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#event\">event</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Make a new event name */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#symbol\">symbol</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#MAX_EVENT_NAME_LEN\">MAX_EVENT_NAME_LEN</a>, \"%c_%s_%ld\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#is_return\">is_return</a> ? 'r' : 'p', <a class=\"id\" href=\"#symbol\">symbol</a>, <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#MAX_EVENT_NAME_LEN\">MAX_EVENT_NAME_LEN</a>, \"%c_0x%p\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#is_return\">is_return</a> ? 'r' : 'p', <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#alloc_trace_probe\">alloc_trace_probe</a>(<a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#symbol\">symbol</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#argc\">argc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#is_return\">is_return</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#tp\">tp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Failed to allocate trace_probe.(%d)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(int)<a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#tp\">tp</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* parse arguments */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#argc\">argc</a> && <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAX_TRACE_ARGS\">MAX_TRACE_ARGS</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Increment count for freeing args in error case */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#nr_args\">nr_args</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Parse argument name */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arg\">arg</a> = <a class=\"id\" href=\"#strchr\">strchr</a>(<a class=\"id\" href=\"#argv\">argv</a>[<a class=\"id\" href=\"#i\">i</a>], '=');", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#arg\">arg</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#arg\">arg</a>++ = '\\0';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#kstrdup\">kstrdup</a>(<a class=\"id\" href=\"#argv\">argv</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arg\">arg</a> = <a class=\"id\" href=\"#argv\">argv</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If argument name is omitted, set \"argN\" */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#MAX_EVENT_NAME_LEN\">MAX_EVENT_NAME_LEN</a>, \"arg%d\", <a class=\"id\" href=\"#i\">i</a> + 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#kstrdup\">kstrdup</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Failed to allocate argument[%d] name.\\n\", <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_good_name\">is_good_name</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Invalid argument[%d] name: %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#conflict_field_name\">conflict_field_name</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#i\">i</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Argument[%d] name '%s' conflicts with \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"another field.\\n\", <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#argv\">argv</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Parse fetch argument */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#parse_probe_arg\">parse_probe_arg</a>(<a class=\"id\" href=\"#arg\">arg</a>, <a class=\"id\" href=\"#tp\">tp</a>, &amp;<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#is_return\">is_return</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Parse error at argument[%d]. (%d)\\n\", <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#register_trace_probe\">register_trace_probe</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#error\">error</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_trace_probe\">free_trace_probe</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#cleanup_all_probes\">cleanup_all_probes</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a> *<a class=\"id\" href=\"#tp\">tp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#probe_lock\">probe_lock</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* TODO: Use batch unregistration */</span>", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#probe_list\">probe_list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#probe_list\">probe_list</a>.<a class=\"id\" href=\"#next\">next</a>, struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unregister_trace_probe\">unregister_trace_probe</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_trace_probe\">free_trace_probe</a>(<a class=\"id\" href=\"#tp\">tp</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#probe_lock\">probe_lock</a>);", 
"}", 
"", 
"", 
"<span class=\"comment\">/* Probes listing interfaces */</span>", 
"static void *<a class=\"id\" href=\"#probes_seq_start\">probes_seq_start</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#probe_lock\">probe_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seq_list_start\">seq_list_start</a>(&amp;<a class=\"id\" href=\"#probe_list\">probe_list</a>, *<a class=\"id\" href=\"#pos\">pos</a>);", 
"}", 
"", 
"static void *<a class=\"id\" href=\"#probes_seq_next\">probes_seq_next</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, void *<a class=\"id\" href=\"#v\">v</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#pos\">pos</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seq_list_next\">seq_list_next</a>(<a class=\"id\" href=\"#v\">v</a>, &amp;<a class=\"id\" href=\"#probe_list\">probe_list</a>, <a class=\"id\" href=\"#pos\">pos</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#probes_seq_stop\">probes_seq_stop</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#probe_lock\">probe_lock</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#probes_seq_show\">probes_seq_show</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#v\">v</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"%c\", <a class=\"id\" href=\"#probe_is_return\">probe_is_return</a>(<a class=\"id\" href=\"#tp\">tp</a>) ? 'r' : 'p');", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \":%s/%s\", <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#call\">call</a>.<a class=\"id\" href=\"#class\">class</a>-><a class=\"id\" href=\"#system\">system</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#call\">call</a>.<a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#symbol\">symbol</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \" 0x%p\", <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rp\">rp</a>.<a class=\"id\" href=\"#kp\">kp</a>.<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rp\">rp</a>.<a class=\"id\" href=\"#kp\">kp</a>.<a class=\"id\" href=\"#offset\">offset</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \" %s+%u\", <a class=\"id\" href=\"#probe_symbol\">probe_symbol</a>(<a class=\"id\" href=\"#tp\">tp</a>), <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rp\">rp</a>.<a class=\"id\" href=\"#kp\">kp</a>.<a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \" %s\", <a class=\"id\" href=\"#probe_symbol\">probe_symbol</a>(<a class=\"id\" href=\"#tp\">tp</a>));", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#nr_args\">nr_args</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \" %s=%s\", <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#comm\">comm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"\\n\");", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#seq_operations\">seq_operations</a> <a class=\"id\" href=\"#probes_seq_op\">probes_seq_op</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#start\">start</a>  = <a class=\"id\" href=\"#probes_seq_start\">probes_seq_start</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#next\">next</a>   = <a class=\"id\" href=\"#probes_seq_next\">probes_seq_next</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#stop\">stop</a>   = <a class=\"id\" href=\"#probes_seq_stop\">probes_seq_stop</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#show\">show</a>   = <a class=\"id\" href=\"#probes_seq_show\">probes_seq_show</a>", 
"};", 
"", 
"static int <a class=\"id\" href=\"#probes_open\">probes_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_WRITE\">FMODE_WRITE</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a> &amp; <a class=\"id\" href=\"#O_TRUNC\">O_TRUNC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cleanup_all_probes\">cleanup_all_probes</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seq_open\">seq_open</a>(<a class=\"id\" href=\"#file\">file</a>, &amp;<a class=\"id\" href=\"#probes_seq_op\">probes_seq_op</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#command_trace_probe\">command_trace_probe</a>(const char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>char **<a class=\"id\" href=\"#argv\">argv</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#argc\">argc</a> = 0, <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#argv\">argv</a> = <a class=\"id\" href=\"#argv_split\">argv_split</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, <a class=\"id\" href=\"#buf\">buf</a>, &amp;<a class=\"id\" href=\"#argc\">argc</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#argv\">argv</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#argc\">argc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#create_trace_probe\">create_trace_probe</a>(<a class=\"id\" href=\"#argc\">argc</a>, <a class=\"id\" href=\"#argv\">argv</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#argv_free\">argv_free</a>(<a class=\"id\" href=\"#argv\">argv</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#WRITE_BUFSIZE\">WRITE_BUFSIZE</a> 128", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#probes_write\">probes_write</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#kbuf\">kbuf</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kbuf\">kbuf</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#WRITE_BUFSIZE\">WRITE_BUFSIZE</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kbuf\">kbuf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#done\">done</a> = 0;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#done\">done</a> &lt; <a class=\"id\" href=\"#count\">count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#count\">count</a> - <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> >= <a class=\"id\" href=\"#WRITE_BUFSIZE\">WRITE_BUFSIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#WRITE_BUFSIZE\">WRITE_BUFSIZE</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(<a class=\"id\" href=\"#kbuf\">kbuf</a>, <a class=\"id\" href=\"#buffer\">buffer</a> + <a class=\"id\" href=\"#done\">done</a>, <a class=\"id\" href=\"#size\">size</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kbuf\">kbuf</a>[<a class=\"id\" href=\"#size\">size</a>] = '\\0';", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#strchr\">strchr</a>(<a class=\"id\" href=\"#kbuf\">kbuf</a>, '\\n');", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#tmp\">tmp</a> = '\\0';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#tmp\">tmp</a> - <a class=\"id\" href=\"#kbuf\">kbuf</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#done\">done</a> + <a class=\"id\" href=\"#size\">size</a> &lt; <a class=\"id\" href=\"#count\">count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"Line length is too long: \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"Should be less than %d.\", <a class=\"id\" href=\"#WRITE_BUFSIZE\">WRITE_BUFSIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#done\">done</a> += <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Remove comments */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#strchr\">strchr</a>(<a class=\"id\" href=\"#kbuf\">kbuf</a>, '#');", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#tmp\">tmp</a> = '\\0';", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#command_trace_probe\">command_trace_probe</a>(<a class=\"id\" href=\"#kbuf\">kbuf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#done\">done</a>;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#kbuf\">kbuf</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#kprobe_events_ops\">kprobe_events_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#owner\">owner</a>          = <a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a>           = <a class=\"id\" href=\"#probes_open\">probes_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a>           = <a class=\"id\" href=\"#seq_read\">seq_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a>         = <a class=\"id\" href=\"#seq_lseek\">seq_lseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a>        = <a class=\"id\" href=\"#seq_release\">seq_release</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write\">write</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#probes_write\">probes_write</a>,", 
"};", 
"", 
"<span class=\"comment\">/* Probes profiling interfaces */</span>", 
"static int <a class=\"id\" href=\"#probes_profile_seq_show\">probes_profile_seq_show</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#v\">v</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"  %-44s %15lu %15lu\\n\", <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#call\">call</a>.<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#nhit\">nhit</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rp\">rp</a>.<a class=\"id\" href=\"#kp\">kp</a>.<a class=\"id\" href=\"#nmissed\">nmissed</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#seq_operations\">seq_operations</a> <a class=\"id\" href=\"#profile_seq_op\">profile_seq_op</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#start\">start</a>  = <a class=\"id\" href=\"#probes_seq_start\">probes_seq_start</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#next\">next</a>   = <a class=\"id\" href=\"#probes_seq_next\">probes_seq_next</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#stop\">stop</a>   = <a class=\"id\" href=\"#probes_seq_stop\">probes_seq_stop</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#show\">show</a>   = <a class=\"id\" href=\"#probes_profile_seq_show\">probes_profile_seq_show</a>", 
"};", 
"", 
"static int <a class=\"id\" href=\"#profile_open\">profile_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#seq_open\">seq_open</a>(<a class=\"id\" href=\"#file\">file</a>, &amp;<a class=\"id\" href=\"#profile_seq_op\">profile_seq_op</a>);", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#kprobe_profile_ops\">kprobe_profile_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#owner\">owner</a>          = <a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a>           = <a class=\"id\" href=\"#profile_open\">profile_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a>           = <a class=\"id\" href=\"#seq_read\">seq_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a>         = <a class=\"id\" href=\"#seq_lseek\">seq_lseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a>        = <a class=\"id\" href=\"#seq_release\">seq_release</a>,", 
"};", 
"", 
"<span class=\"comment\">/* Sum up total data length for dynamic arraies (strings) */</span>", 
"static <a class=\"id\" href=\"#__kprobes\">__kprobes</a> int <a class=\"id\" href=\"#__get_data_size\">__get_data_size</a>(struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a> *<a class=\"id\" href=\"#tp\">tp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#nr_args\">nr_args</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#fetch_size\">fetch_size</a>.<a class=\"id\" href=\"#fn\">fn</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call_fetch\">call_fetch</a>(&amp;<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#fetch_size\">fetch_size</a>, <a class=\"id\" href=\"#regs\">regs</a>, &amp;<a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> += <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Store the value of each argument */</span>", 
"static <a class=\"id\" href=\"#__kprobes\">__kprobes</a> void <a class=\"id\" href=\"#store_trace_args\">store_trace_args</a>(int <a class=\"id\" href=\"#ent_size\">ent_size</a>, struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a> *<a class=\"id\" href=\"#tp\">tp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#data\">data</a>, int <a class=\"id\" href=\"#maxlen\">maxlen</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#dl\">dl</a>;<span class=\"ts\"/><span class=\"comment\">/* Data (relative) location */</span>", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#nr_args\">nr_args</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#fetch_size\">fetch_size</a>.<a class=\"id\" href=\"#fn\">fn</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * First, we set the relative location and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * maximum data length to *dl</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dl\">dl</a> = (<a class=\"id\" href=\"#u32\">u32</a> *)(<a class=\"id\" href=\"#data\">data</a> + <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#dl\">dl</a> = <a class=\"id\" href=\"#make_data_rloc\">make_data_rloc</a>(<a class=\"id\" href=\"#maxlen\">maxlen</a>, <a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Then try to fetch string or dynamic array data */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call_fetch\">call_fetch</a>(&amp;<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#fetch\">fetch</a>, <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#dl\">dl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Reduce maximum length */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> += <a class=\"id\" href=\"#get_rloc_len\">get_rloc_len</a>(*<a class=\"id\" href=\"#dl\">dl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#maxlen\">maxlen</a> -= <a class=\"id\" href=\"#get_rloc_len\">get_rloc_len</a>(*<a class=\"id\" href=\"#dl\">dl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Trick here, convert data_rloc to data_loc */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#dl\">dl</a> = <a class=\"id\" href=\"#convert_rloc_to_loc\">convert_rloc_to_loc</a>(*<a class=\"id\" href=\"#dl\">dl</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#ent_size\">ent_size</a> + <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Just fetching data normally */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call_fetch\">call_fetch</a>(&amp;<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#fetch\">fetch</a>, <a class=\"id\" href=\"#regs\">regs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#data\">data</a> + <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* Kprobe handler */</span>", 
"static <a class=\"id\" href=\"#__kprobes\">__kprobes</a> void <a class=\"id\" href=\"#kprobe_trace_func\">kprobe_trace_func</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#kp\">kp</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#kp\">kp</a>, struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a>, <a class=\"id\" href=\"#rp\">rp</a>.<a class=\"id\" href=\"#kp\">kp</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe_trace_entry_head\">kprobe_trace_entry_head</a> *<a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#dsize\">dsize</a>, <a class=\"id\" href=\"#pc\">pc</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#irq_flags\">irq_flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_event_call\">ftrace_event_call</a> *<a class=\"id\" href=\"#call\">call</a> = &amp;<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#call\">call</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#nhit\">nhit</a>++;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_save_flags\">local_save_flags</a>(<a class=\"id\" href=\"#irq_flags\">irq_flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pc\">pc</a> = <a class=\"id\" href=\"#preempt_count\">preempt_count</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dsize\">dsize</a> = <a class=\"id\" href=\"#__get_data_size\">__get_data_size</a>(<a class=\"id\" href=\"#tp\">tp</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = sizeof(*<a class=\"id\" href=\"#entry\">entry</a>) + <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#size\">size</a> + <a class=\"id\" href=\"#dsize\">dsize</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#trace_current_buffer_lock_reserve\">trace_current_buffer_lock_reserve</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#call\">call</a>-><a class=\"id\" href=\"#event\">event</a>.<a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#irq_flags\">irq_flags</a>, <a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#event\">event</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#ring_buffer_event_data\">ring_buffer_event_data</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#ip\">ip</a> = (unsigned long)<a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#store_trace_args\">store_trace_args</a>(sizeof(*<a class=\"id\" href=\"#entry\">entry</a>), <a class=\"id\" href=\"#tp\">tp</a>, <a class=\"id\" href=\"#regs\">regs</a>, (<a class=\"id\" href=\"#u8\">u8</a> *)&amp;<a class=\"id\" href=\"#entry\">entry</a>[1], <a class=\"id\" href=\"#dsize\">dsize</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#filter_current_check_discard\">filter_current_check_discard</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#call\">call</a>, <a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#event\">event</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_nowake_buffer_unlock_commit\">trace_nowake_buffer_unlock_commit</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#irq_flags\">irq_flags</a>, <a class=\"id\" href=\"#pc\">pc</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Kretprobe handler */</span>", 
"static <a class=\"id\" href=\"#__kprobes\">__kprobes</a> void <a class=\"id\" href=\"#kretprobe_trace_func\">kretprobe_trace_func</a>(struct <a class=\"id\" href=\"#kretprobe_instance\">kretprobe_instance</a> *<a class=\"id\" href=\"#ri\">ri</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#ri\">ri</a>-><a class=\"id\" href=\"#rp\">rp</a>, struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a>, <a class=\"id\" href=\"#rp\">rp</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kretprobe_trace_entry_head\">kretprobe_trace_entry_head</a> *<a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#pc\">pc</a>, <a class=\"id\" href=\"#dsize\">dsize</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#irq_flags\">irq_flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_event_call\">ftrace_event_call</a> *<a class=\"id\" href=\"#call\">call</a> = &amp;<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#call\">call</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_save_flags\">local_save_flags</a>(<a class=\"id\" href=\"#irq_flags\">irq_flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pc\">pc</a> = <a class=\"id\" href=\"#preempt_count\">preempt_count</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dsize\">dsize</a> = <a class=\"id\" href=\"#__get_data_size\">__get_data_size</a>(<a class=\"id\" href=\"#tp\">tp</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = sizeof(*<a class=\"id\" href=\"#entry\">entry</a>) + <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#size\">size</a> + <a class=\"id\" href=\"#dsize\">dsize</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#trace_current_buffer_lock_reserve\">trace_current_buffer_lock_reserve</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#call\">call</a>-><a class=\"id\" href=\"#event\">event</a>.<a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#irq_flags\">irq_flags</a>, <a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#event\">event</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#ring_buffer_event_data\">ring_buffer_event_data</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#func\">func</a> = (unsigned long)<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rp\">rp</a>.<a class=\"id\" href=\"#kp\">kp</a>.<a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#ret_ip\">ret_ip</a> = (unsigned long)<a class=\"id\" href=\"#ri\">ri</a>-><a class=\"id\" href=\"#ret_addr\">ret_addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#store_trace_args\">store_trace_args</a>(sizeof(*<a class=\"id\" href=\"#entry\">entry</a>), <a class=\"id\" href=\"#tp\">tp</a>, <a class=\"id\" href=\"#regs\">regs</a>, (<a class=\"id\" href=\"#u8\">u8</a> *)&amp;<a class=\"id\" href=\"#entry\">entry</a>[1], <a class=\"id\" href=\"#dsize\">dsize</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#filter_current_check_discard\">filter_current_check_discard</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#call\">call</a>, <a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#event\">event</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_nowake_buffer_unlock_commit\">trace_nowake_buffer_unlock_commit</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#irq_flags\">irq_flags</a>, <a class=\"id\" href=\"#pc\">pc</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Event entry printers */</span>", 
"enum <a class=\"id\" href=\"#print_line_t\">print_line_t</a>", 
"<a class=\"id\" href=\"#print_kprobe_event\">print_kprobe_event</a>(struct <a class=\"id\" href=\"#trace_iterator\">trace_iterator</a> *<a class=\"id\" href=\"#iter\">iter</a>, int <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#trace_event\">trace_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe_trace_entry_head\">kprobe_trace_entry_head</a> *<a class=\"id\" href=\"#field\">field</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_seq\">trace_seq</a> *<a class=\"id\" href=\"#s\">s</a> = &amp;<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#seq\">seq</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a> *<a class=\"id\" href=\"#tp\">tp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#field\">field</a> = (struct <a class=\"id\" href=\"#kprobe_trace_entry_head\">kprobe_trace_entry_head</a> *)<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#ent\">ent</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#event\">event</a>, struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a>, <a class=\"id\" href=\"#call\">call</a>.<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"%s: (\", <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#call\">call</a>.<a class=\"id\" href=\"#name\">name</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#partial\">partial</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#seq_print_ip_sym\">seq_print_ip_sym</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#field\">field</a>-><a class=\"id\" href=\"#ip\">ip</a>, <a class=\"id\" href=\"#flags\">flags</a> | <a class=\"id\" href=\"#TRACE_ITER_SYM_OFFSET\">TRACE_ITER_SYM_OFFSET</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#partial\">partial</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#trace_seq_puts\">trace_seq_puts</a>(<a class=\"id\" href=\"#s\">s</a>, \")\"))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#partial\">partial</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = (<a class=\"id\" href=\"#u8\">u8</a> *)&amp;<a class=\"id\" href=\"#field\">field</a>[1];", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#nr_args\">nr_args</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#print\">print</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#data\">data</a> + <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#field\">field</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#partial\">partial</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#trace_seq_puts\">trace_seq_puts</a>(<a class=\"id\" href=\"#s\">s</a>, \"\\n\"))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#partial\">partial</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_HANDLED\">TRACE_TYPE_HANDLED</a>;", 
"<a class=\"id\" href=\"#partial\">partial</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"}", 
"", 
"enum <a class=\"id\" href=\"#print_line_t\">print_line_t</a>", 
"<a class=\"id\" href=\"#print_kretprobe_event\">print_kretprobe_event</a>(struct <a class=\"id\" href=\"#trace_iterator\">trace_iterator</a> *<a class=\"id\" href=\"#iter\">iter</a>, int <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#trace_event\">trace_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kretprobe_trace_entry_head\">kretprobe_trace_entry_head</a> *<a class=\"id\" href=\"#field\">field</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_seq\">trace_seq</a> *<a class=\"id\" href=\"#s\">s</a> = &amp;<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#seq\">seq</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a> *<a class=\"id\" href=\"#tp\">tp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#field\">field</a> = (struct <a class=\"id\" href=\"#kretprobe_trace_entry_head\">kretprobe_trace_entry_head</a> *)<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#ent\">ent</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#event\">event</a>, struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a>, <a class=\"id\" href=\"#call\">call</a>.<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"%s: (\", <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#call\">call</a>.<a class=\"id\" href=\"#name\">name</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#partial\">partial</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#seq_print_ip_sym\">seq_print_ip_sym</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#field\">field</a>-><a class=\"id\" href=\"#ret_ip\">ret_ip</a>, <a class=\"id\" href=\"#flags\">flags</a> | <a class=\"id\" href=\"#TRACE_ITER_SYM_OFFSET\">TRACE_ITER_SYM_OFFSET</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#partial\">partial</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#trace_seq_puts\">trace_seq_puts</a>(<a class=\"id\" href=\"#s\">s</a>, \" <- \"))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#partial\">partial</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#seq_print_ip_sym\">seq_print_ip_sym</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#field\">field</a>-><a class=\"id\" href=\"#func\">func</a>, <a class=\"id\" href=\"#flags\">flags</a> &amp; ~<a class=\"id\" href=\"#TRACE_ITER_SYM_OFFSET\">TRACE_ITER_SYM_OFFSET</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#partial\">partial</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#trace_seq_puts\">trace_seq_puts</a>(<a class=\"id\" href=\"#s\">s</a>, \")\"))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#partial\">partial</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = (<a class=\"id\" href=\"#u8\">u8</a> *)&amp;<a class=\"id\" href=\"#field\">field</a>[1];", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#nr_args\">nr_args</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#print\">print</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#data\">data</a> + <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#field\">field</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#partial\">partial</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#trace_seq_puts\">trace_seq_puts</a>(<a class=\"id\" href=\"#s\">s</a>, \"\\n\"))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#partial\">partial</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_HANDLED\">TRACE_TYPE_HANDLED</a>;", 
"<a class=\"id\" href=\"#partial\">partial</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#probe_event_enable\">probe_event_enable</a>(struct <a class=\"id\" href=\"#ftrace_event_call\">ftrace_event_call</a> *<a class=\"id\" href=\"#call\">call</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a> *<a class=\"id\" href=\"#tp\">tp</a> = (struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a> *)<a class=\"id\" href=\"#call\">call</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#TP_FLAG_TRACE\">TP_FLAG_TRACE</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#probe_is_return\">probe_is_return</a>(<a class=\"id\" href=\"#tp\">tp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#enable_kretprobe\">enable_kretprobe</a>(&amp;<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rp\">rp</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#enable_kprobe\">enable_kprobe</a>(&amp;<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rp\">rp</a>.<a class=\"id\" href=\"#kp\">kp</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#probe_event_disable\">probe_event_disable</a>(struct <a class=\"id\" href=\"#ftrace_event_call\">ftrace_event_call</a> *<a class=\"id\" href=\"#call\">call</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a> *<a class=\"id\" href=\"#tp\">tp</a> = (struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a> *)<a class=\"id\" href=\"#call\">call</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#TP_FLAG_TRACE\">TP_FLAG_TRACE</a>;", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; (<a class=\"id\" href=\"#TP_FLAG_TRACE\">TP_FLAG_TRACE</a> | <a class=\"id\" href=\"#TP_FLAG_PROFILE\">TP_FLAG_PROFILE</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#probe_is_return\">probe_is_return</a>(<a class=\"id\" href=\"#tp\">tp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disable_kretprobe\">disable_kretprobe</a>(&amp;<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rp\">rp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disable_kprobe\">disable_kprobe</a>(&amp;<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rp\">rp</a>.<a class=\"id\" href=\"#kp\">kp</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#DEFINE_FIELD\">DEFINE_FIELD</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEFINE_FIELD\">DEFINE_FIELD</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#item\">item</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#is_signed\">is_signed</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_define_field\">trace_define_field</a>(<a class=\"id\" href=\"#event_call\">event_call</a>, #<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#name\">name</a>,<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#offsetof\">offsetof</a>(<a class=\"id\" href=\"#typeof\">typeof</a>(<a class=\"id\" href=\"#field\">field</a>), <a class=\"id\" href=\"#item\">item</a>),<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> sizeof(<a class=\"id\" href=\"#field\">field</a>.<a class=\"id\" href=\"#item\">item</a>), <a class=\"id\" href=\"#is_signed\">is_signed</a>, \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#FILTER_OTHER\">FILTER_OTHER</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (0)", 
"", 
"static int <a class=\"id\" href=\"#kprobe_event_define_fields\">kprobe_event_define_fields</a>(struct <a class=\"id\" href=\"#ftrace_event_call\">ftrace_event_call</a> *<a class=\"id\" href=\"#event_call\">event_call</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe_trace_entry_head\">kprobe_trace_entry_head</a> <a class=\"id\" href=\"#field\">field</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a> *<a class=\"id\" href=\"#tp\">tp</a> = (struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a> *)<a class=\"id\" href=\"#event_call\">event_call</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEFINE_FIELD\">DEFINE_FIELD</a>(unsigned long, <a class=\"id\" href=\"#ip\">ip</a>, <a class=\"id\" href=\"#FIELD_STRING_IP\">FIELD_STRING_IP</a>, 0);", 
"<span class=\"ts\"/><span class=\"comment\">/* Set argument names as fields */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#nr_args\">nr_args</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_define_field\">trace_define_field</a>(<a class=\"id\" href=\"#event_call\">event_call</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#fmttype\">fmttype</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> sizeof(<a class=\"id\" href=\"#field\">field</a>) + <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#is_signed\">is_signed</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#FILTER_OTHER\">FILTER_OTHER</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#kretprobe_event_define_fields\">kretprobe_event_define_fields</a>(struct <a class=\"id\" href=\"#ftrace_event_call\">ftrace_event_call</a> *<a class=\"id\" href=\"#event_call\">event_call</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kretprobe_trace_entry_head\">kretprobe_trace_entry_head</a> <a class=\"id\" href=\"#field\">field</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a> *<a class=\"id\" href=\"#tp\">tp</a> = (struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a> *)<a class=\"id\" href=\"#event_call\">event_call</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEFINE_FIELD\">DEFINE_FIELD</a>(unsigned long, <a class=\"id\" href=\"#func\">func</a>, <a class=\"id\" href=\"#FIELD_STRING_FUNC\">FIELD_STRING_FUNC</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEFINE_FIELD\">DEFINE_FIELD</a>(unsigned long, <a class=\"id\" href=\"#ret_ip\">ret_ip</a>, <a class=\"id\" href=\"#FIELD_STRING_RETIP\">FIELD_STRING_RETIP</a>, 0);", 
"<span class=\"ts\"/><span class=\"comment\">/* Set argument names as fields */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#nr_args\">nr_args</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_define_field\">trace_define_field</a>(<a class=\"id\" href=\"#event_call\">event_call</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#fmttype\">fmttype</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> sizeof(<a class=\"id\" href=\"#field\">field</a>) + <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#is_signed\">is_signed</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#FILTER_OTHER\">FILTER_OTHER</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__set_print_fmt\">__set_print_fmt</a>(struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a> *<a class=\"id\" href=\"#tp\">tp</a>, char *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pos\">pos</a> = 0;", 
"", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#fmt\">fmt</a>, *<a class=\"id\" href=\"#arg\">arg</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#probe_is_return\">probe_is_return</a>(<a class=\"id\" href=\"#tp\">tp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fmt\">fmt</a> = \"(%lx)\";", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arg\">arg</a> = \"REC->\" <a class=\"id\" href=\"#FIELD_STRING_IP\">FIELD_STRING_IP</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fmt\">fmt</a> = \"(%lx <- %lx)\";", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arg\">arg</a> = \"REC->\" <a class=\"id\" href=\"#FIELD_STRING_FUNC\">FIELD_STRING_FUNC</a> \", REC->\" <a class=\"id\" href=\"#FIELD_STRING_RETIP\">FIELD_STRING_RETIP</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* When len=0, we just calculate the needed length */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LEN_OR_ZERO\">LEN_OR_ZERO</a> (<a class=\"id\" href=\"#len\">len</a> ? <a class=\"id\" href=\"#len\">len</a> - <a class=\"id\" href=\"#pos\">pos</a> : 0)", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> += <a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#LEN_OR_ZERO\">LEN_OR_ZERO</a>, \"\\\"%s\", <a class=\"id\" href=\"#fmt\">fmt</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#nr_args\">nr_args</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> += <a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#LEN_OR_ZERO\">LEN_OR_ZERO</a>, \" %s=%s\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#fmt\">fmt</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> += <a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#LEN_OR_ZERO\">LEN_OR_ZERO</a>, \"\\\", %s\", <a class=\"id\" href=\"#arg\">arg</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#nr_args\">nr_args</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#name\">name</a>, \"string\") == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> += <a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#LEN_OR_ZERO\">LEN_OR_ZERO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\", __get_str(%s)\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> += <a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#LEN_OR_ZERO\">LEN_OR_ZERO</a>, \", REC->%s\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#LEN_OR_ZERO\">LEN_OR_ZERO</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* return the length of print_fmt */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pos\">pos</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#set_print_fmt\">set_print_fmt</a>(struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#print_fmt\">print_fmt</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* First: called with 0 length to calculate the needed length */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#__set_print_fmt\">__set_print_fmt</a>(<a class=\"id\" href=\"#tp\">tp</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#print_fmt\">print_fmt</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#len\">len</a> + 1, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#print_fmt\">print_fmt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Second: actually write the @print_fmt */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_print_fmt\">__set_print_fmt</a>(<a class=\"id\" href=\"#tp\">tp</a>, <a class=\"id\" href=\"#print_fmt\">print_fmt</a>, <a class=\"id\" href=\"#len\">len</a> + 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#call\">call</a>.<a class=\"id\" href=\"#print_fmt\">print_fmt</a> = <a class=\"id\" href=\"#print_fmt\">print_fmt</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PERF_EVENTS\">CONFIG_PERF_EVENTS</a>", 
"", 
"<span class=\"comment\">/* Kprobe profile handler */</span>", 
"static <a class=\"id\" href=\"#__kprobes\">__kprobes</a> void <a class=\"id\" href=\"#kprobe_perf_func\">kprobe_perf_func</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#kp\">kp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#kp\">kp</a>, struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a>, <a class=\"id\" href=\"#rp\">rp</a>.<a class=\"id\" href=\"#kp\">kp</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_event_call\">ftrace_event_call</a> *<a class=\"id\" href=\"#call\">call</a> = &amp;<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#call\">call</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kprobe_trace_entry_head\">kprobe_trace_entry_head</a> *<a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#__size\">__size</a>, <a class=\"id\" href=\"#dsize\">dsize</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rctx\">rctx</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dsize\">dsize</a> = <a class=\"id\" href=\"#__get_data_size\">__get_data_size</a>(<a class=\"id\" href=\"#tp\">tp</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__size\">__size</a> = sizeof(*<a class=\"id\" href=\"#entry\">entry</a>) + <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#size\">size</a> + <a class=\"id\" href=\"#dsize\">dsize</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#__size\">__size</a> + sizeof(<a class=\"id\" href=\"#u32\">u32</a>), sizeof(<a class=\"id\" href=\"#u64\">u64</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> -= sizeof(<a class=\"id\" href=\"#u32\">u32</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#WARN_ONCE\">WARN_ONCE</a>(<a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#PERF_MAX_TRACE_SIZE\">PERF_MAX_TRACE_SIZE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"profile buffer not large enough\"))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#perf_trace_buf_prepare\">perf_trace_buf_prepare</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#call\">call</a>-><a class=\"id\" href=\"#event\">event</a>.<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#regs\">regs</a>, &amp;<a class=\"id\" href=\"#rctx\">rctx</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#entry\">entry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#ip\">ip</a> = (unsigned long)<a class=\"id\" href=\"#kp\">kp</a>-><a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>[1], 0, <a class=\"id\" href=\"#dsize\">dsize</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#store_trace_args\">store_trace_args</a>(sizeof(*<a class=\"id\" href=\"#entry\">entry</a>), <a class=\"id\" href=\"#tp\">tp</a>, <a class=\"id\" href=\"#regs\">regs</a>, (<a class=\"id\" href=\"#u8\">u8</a> *)&amp;<a class=\"id\" href=\"#entry\">entry</a>[1], <a class=\"id\" href=\"#dsize\">dsize</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#this_cpu_ptr\">this_cpu_ptr</a>(<a class=\"id\" href=\"#call\">call</a>-><a class=\"id\" href=\"#perf_events\">perf_events</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_trace_buf_submit\">perf_trace_buf_submit</a>(<a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#rctx\">rctx</a>, <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#ip\">ip</a>, 1, <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#head\">head</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Kretprobe profile handler */</span>", 
"static <a class=\"id\" href=\"#__kprobes\">__kprobes</a> void <a class=\"id\" href=\"#kretprobe_perf_func\">kretprobe_perf_func</a>(struct <a class=\"id\" href=\"#kretprobe_instance\">kretprobe_instance</a> *<a class=\"id\" href=\"#ri\">ri</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#ri\">ri</a>-><a class=\"id\" href=\"#rp\">rp</a>, struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a>, <a class=\"id\" href=\"#rp\">rp</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_event_call\">ftrace_event_call</a> *<a class=\"id\" href=\"#call\">call</a> = &amp;<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#call\">call</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kretprobe_trace_entry_head\">kretprobe_trace_entry_head</a> *<a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#__size\">__size</a>, <a class=\"id\" href=\"#dsize\">dsize</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rctx\">rctx</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dsize\">dsize</a> = <a class=\"id\" href=\"#__get_data_size\">__get_data_size</a>(<a class=\"id\" href=\"#tp\">tp</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__size\">__size</a> = sizeof(*<a class=\"id\" href=\"#entry\">entry</a>) + <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#size\">size</a> + <a class=\"id\" href=\"#dsize\">dsize</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#__size\">__size</a> + sizeof(<a class=\"id\" href=\"#u32\">u32</a>), sizeof(<a class=\"id\" href=\"#u64\">u64</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> -= sizeof(<a class=\"id\" href=\"#u32\">u32</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#WARN_ONCE\">WARN_ONCE</a>(<a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#PERF_MAX_TRACE_SIZE\">PERF_MAX_TRACE_SIZE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"profile buffer not large enough\"))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#perf_trace_buf_prepare\">perf_trace_buf_prepare</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#call\">call</a>-><a class=\"id\" href=\"#event\">event</a>.<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#regs\">regs</a>, &amp;<a class=\"id\" href=\"#rctx\">rctx</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#entry\">entry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#func\">func</a> = (unsigned long)<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rp\">rp</a>.<a class=\"id\" href=\"#kp\">kp</a>.<a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#ret_ip\">ret_ip</a> = (unsigned long)<a class=\"id\" href=\"#ri\">ri</a>-><a class=\"id\" href=\"#ret_addr\">ret_addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#store_trace_args\">store_trace_args</a>(sizeof(*<a class=\"id\" href=\"#entry\">entry</a>), <a class=\"id\" href=\"#tp\">tp</a>, <a class=\"id\" href=\"#regs\">regs</a>, (<a class=\"id\" href=\"#u8\">u8</a> *)&amp;<a class=\"id\" href=\"#entry\">entry</a>[1], <a class=\"id\" href=\"#dsize\">dsize</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#this_cpu_ptr\">this_cpu_ptr</a>(<a class=\"id\" href=\"#call\">call</a>-><a class=\"id\" href=\"#perf_events\">perf_events</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_trace_buf_submit\">perf_trace_buf_submit</a>(<a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#rctx\">rctx</a>, <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#ret_ip\">ret_ip</a>, 1, <a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#head\">head</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#probe_perf_enable\">probe_perf_enable</a>(struct <a class=\"id\" href=\"#ftrace_event_call\">ftrace_event_call</a> *<a class=\"id\" href=\"#call\">call</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a> *<a class=\"id\" href=\"#tp\">tp</a> = (struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a> *)<a class=\"id\" href=\"#call\">call</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#TP_FLAG_PROFILE\">TP_FLAG_PROFILE</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#probe_is_return\">probe_is_return</a>(<a class=\"id\" href=\"#tp\">tp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#enable_kretprobe\">enable_kretprobe</a>(&amp;<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rp\">rp</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#enable_kprobe\">enable_kprobe</a>(&amp;<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rp\">rp</a>.<a class=\"id\" href=\"#kp\">kp</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#probe_perf_disable\">probe_perf_disable</a>(struct <a class=\"id\" href=\"#ftrace_event_call\">ftrace_event_call</a> *<a class=\"id\" href=\"#call\">call</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a> *<a class=\"id\" href=\"#tp\">tp</a> = (struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a> *)<a class=\"id\" href=\"#call\">call</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#TP_FLAG_PROFILE\">TP_FLAG_PROFILE</a>;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#TP_FLAG_TRACE\">TP_FLAG_TRACE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#probe_is_return\">probe_is_return</a>(<a class=\"id\" href=\"#tp\">tp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disable_kretprobe\">disable_kretprobe</a>(&amp;<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rp\">rp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disable_kprobe\">disable_kprobe</a>(&amp;<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#rp\">rp</a>.<a class=\"id\" href=\"#kp\">kp</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* CONFIG_PERF_EVENTS */</span>", 
"", 
"static <a class=\"id\" href=\"#__kprobes\">__kprobes</a>", 
"int <a class=\"id\" href=\"#kprobe_register\">kprobe_register</a>(struct <a class=\"id\" href=\"#ftrace_event_call\">ftrace_event_call</a> *<a class=\"id\" href=\"#event\">event</a>, enum <a class=\"id\" href=\"#trace_reg\">trace_reg</a> <a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#TRACE_REG_REGISTER\">TRACE_REG_REGISTER</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#probe_event_enable\">probe_event_enable</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#TRACE_REG_UNREGISTER\">TRACE_REG_UNREGISTER</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#probe_event_disable\">probe_event_disable</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PERF_EVENTS\">CONFIG_PERF_EVENTS</a>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#TRACE_REG_PERF_REGISTER\">TRACE_REG_PERF_REGISTER</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#probe_perf_enable\">probe_perf_enable</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#TRACE_REG_PERF_UNREGISTER\">TRACE_REG_PERF_UNREGISTER</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#probe_perf_disable\">probe_perf_disable</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#__kprobes\">__kprobes</a>", 
"int <a class=\"id\" href=\"#kprobe_dispatcher\">kprobe_dispatcher</a>(struct <a class=\"id\" href=\"#kprobe\">kprobe</a> *<a class=\"id\" href=\"#kp\">kp</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#kp\">kp</a>, struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a>, <a class=\"id\" href=\"#rp\">rp</a>.<a class=\"id\" href=\"#kp\">kp</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#TP_FLAG_TRACE\">TP_FLAG_TRACE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kprobe_trace_func\">kprobe_trace_func</a>(<a class=\"id\" href=\"#kp\">kp</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PERF_EVENTS\">CONFIG_PERF_EVENTS</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#TP_FLAG_PROFILE\">TP_FLAG_PROFILE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kprobe_perf_func\">kprobe_perf_func</a>(<a class=\"id\" href=\"#kp\">kp</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return 0;<span class=\"ts\"/><span class=\"comment\">/* We don't tweek kernel, so just return 0 */</span>", 
"}", 
"", 
"static <a class=\"id\" href=\"#__kprobes\">__kprobes</a>", 
"int <a class=\"id\" href=\"#kretprobe_dispatcher\">kretprobe_dispatcher</a>(struct <a class=\"id\" href=\"#kretprobe_instance\">kretprobe_instance</a> *<a class=\"id\" href=\"#ri\">ri</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#ri\">ri</a>-><a class=\"id\" href=\"#rp\">rp</a>, struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a>, <a class=\"id\" href=\"#rp\">rp</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#TP_FLAG_TRACE\">TP_FLAG_TRACE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kretprobe_trace_func\">kretprobe_trace_func</a>(<a class=\"id\" href=\"#ri\">ri</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PERF_EVENTS\">CONFIG_PERF_EVENTS</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#TP_FLAG_PROFILE\">TP_FLAG_PROFILE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kretprobe_perf_func\">kretprobe_perf_func</a>(<a class=\"id\" href=\"#ri\">ri</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return 0;<span class=\"ts\"/><span class=\"comment\">/* We don't tweek kernel, so just return 0 */</span>", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#trace_event_functions\">trace_event_functions</a> <a class=\"id\" href=\"#kretprobe_funcs\">kretprobe_funcs</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#trace\">trace</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#print_kretprobe_event\">print_kretprobe_event</a>", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#trace_event_functions\">trace_event_functions</a> <a class=\"id\" href=\"#kprobe_funcs\">kprobe_funcs</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#trace\">trace</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#print_kprobe_event\">print_kprobe_event</a>", 
"};", 
"", 
"static int <a class=\"id\" href=\"#register_probe_event\">register_probe_event</a>(struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_event_call\">ftrace_event_call</a> *<a class=\"id\" href=\"#call\">call</a> = &amp;<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#call\">call</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Initialize ftrace_event_call */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#call\">call</a>-><a class=\"id\" href=\"#class\">class</a>-><a class=\"id\" href=\"#fields\">fields</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#probe_is_return\">probe_is_return</a>(<a class=\"id\" href=\"#tp\">tp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call\">call</a>-><a class=\"id\" href=\"#event\">event</a>.<a class=\"id\" href=\"#funcs\">funcs</a> = &amp;<a class=\"id\" href=\"#kretprobe_funcs\">kretprobe_funcs</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call\">call</a>-><a class=\"id\" href=\"#class\">class</a>-><a class=\"id\" href=\"#define_fields\">define_fields</a> = <a class=\"id\" href=\"#kretprobe_event_define_fields\">kretprobe_event_define_fields</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call\">call</a>-><a class=\"id\" href=\"#event\">event</a>.<a class=\"id\" href=\"#funcs\">funcs</a> = &amp;<a class=\"id\" href=\"#kprobe_funcs\">kprobe_funcs</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#call\">call</a>-><a class=\"id\" href=\"#class\">class</a>-><a class=\"id\" href=\"#define_fields\">define_fields</a> = <a class=\"id\" href=\"#kprobe_event_define_fields\">kprobe_event_define_fields</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#set_print_fmt\">set_print_fmt</a>(<a class=\"id\" href=\"#tp\">tp</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#register_ftrace_event\">register_ftrace_event</a>(&amp;<a class=\"id\" href=\"#call\">call</a>-><a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#call\">call</a>-><a class=\"id\" href=\"#print_fmt\">print_fmt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call\">call</a>-><a class=\"id\" href=\"#flags\">flags</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call\">call</a>-><a class=\"id\" href=\"#class\">class</a>-><a class=\"id\" href=\"#reg\">reg</a> = <a class=\"id\" href=\"#kprobe_register\">kprobe_register</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call\">call</a>-><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#tp\">tp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_add_event_call\">trace_add_event_call</a>(<a class=\"id\" href=\"#call\">call</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Failed to register kprobe event: %s\\n\", <a class=\"id\" href=\"#call\">call</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#call\">call</a>-><a class=\"id\" href=\"#print_fmt\">print_fmt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unregister_ftrace_event\">unregister_ftrace_event</a>(&amp;<a class=\"id\" href=\"#call\">call</a>-><a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#unregister_probe_event\">unregister_probe_event</a>(struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a> *<a class=\"id\" href=\"#tp\">tp</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* tp-&gt;event is unregistered in trace_remove_event_call() */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_remove_event_call\">trace_remove_event_call</a>(&amp;<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#call\">call</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#call\">call</a>.<a class=\"id\" href=\"#print_fmt\">print_fmt</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Make a debugfs interface for controling probe points */</span>", 
"static <a class=\"id\" href=\"#__init\">__init</a> int <a class=\"id\" href=\"#init_kprobe_trace\">init_kprobe_trace</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#d_tracer\">d_tracer</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#entry\">entry</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d_tracer\">d_tracer</a> = <a class=\"id\" href=\"#tracing_init_dentry\">tracing_init_dentry</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#d_tracer\">d_tracer</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#debugfs_create_file\">debugfs_create_file</a>(\"kprobe_events\", 0644, <a class=\"id\" href=\"#d_tracer\">d_tracer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#kprobe_events_ops\">kprobe_events_ops</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Event list interface */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#entry\">entry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"Could not create debugfs \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"'kprobe_events' entry\\n\");", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Profile interface */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#debugfs_create_file\">debugfs_create_file</a>(\"kprobe_profile\", 0444, <a class=\"id\" href=\"#d_tracer\">d_tracer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#kprobe_profile_ops\">kprobe_profile_ops</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#entry\">entry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"Could not create debugfs \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"'kprobe_profile' entry\\n\");", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#fs_initcall\">fs_initcall</a>(<a class=\"id\" href=\"#init_kprobe_trace\">init_kprobe_trace</a>);", 
"", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FTRACE_STARTUP_TEST\">CONFIG_FTRACE_STARTUP_TEST</a>", 
"", 
"static int <a class=\"id\" href=\"#kprobe_trace_selftest_target\">kprobe_trace_selftest_target</a>(int <a class=\"id\" href=\"#a1\">a1</a>, int <a class=\"id\" href=\"#a2\">a2</a>, int <a class=\"id\" href=\"#a3\">a3</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#a4\">a4</a>, int <a class=\"id\" href=\"#a5\">a5</a>, int <a class=\"id\" href=\"#a6\">a6</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#a1\">a1</a> + <a class=\"id\" href=\"#a2\">a2</a> + <a class=\"id\" href=\"#a3\">a3</a> + <a class=\"id\" href=\"#a4\">a4</a> + <a class=\"id\" href=\"#a5\">a5</a> + <a class=\"id\" href=\"#a6\">a6</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#__init\">__init</a> int <a class=\"id\" href=\"#kprobe_trace_self_tests_init\">kprobe_trace_self_tests_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#warn\">warn</a> = 0;", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#target\">target</a>)(int, int, int, int, int, int);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_probe\">trace_probe</a> *<a class=\"id\" href=\"#tp\">tp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#target\">target</a> = <a class=\"id\" href=\"#kprobe_trace_selftest_target\">kprobe_trace_selftest_target</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Testing kprobe tracing: \");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#command_trace_probe\">command_trace_probe</a>(\"p:testprobe kprobe_trace_selftest_target \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"$stack $stack0 +0($stack)\");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#ret\">ret</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"error on probing function entry.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#warn\">warn</a>++;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Enable trace point */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#find_probe_event\">find_probe_event</a>(\"testprobe\", <a class=\"id\" href=\"#KPROBE_EVENT_SYSTEM\">KPROBE_EVENT_SYSTEM</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#tp\">tp</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"error on getting new probe.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#warn\">warn</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#probe_event_enable\">probe_event_enable</a>(&amp;<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#call\">call</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#command_trace_probe\">command_trace_probe</a>(\"r:testprobe2 kprobe_trace_selftest_target \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"$retval\");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#ret\">ret</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"error on probing function return.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#warn\">warn</a>++;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Enable trace point */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#find_probe_event\">find_probe_event</a>(\"testprobe2\", <a class=\"id\" href=\"#KPROBE_EVENT_SYSTEM\">KPROBE_EVENT_SYSTEM</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#tp\">tp</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"error on getting new probe.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#warn\">warn</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#probe_event_enable\">probe_event_enable</a>(&amp;<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#call\">call</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#warn\">warn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#end\">end</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#target\">target</a>(1, 2, 3, 4, 5, 6);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#command_trace_probe\">command_trace_probe</a>(\"-:testprobe\");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#ret\">ret</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"error on deleting a probe.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#warn\">warn</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#command_trace_probe\">command_trace_probe</a>(\"-:testprobe2\");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#ret\">ret</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"error on deleting a probe.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#warn\">warn</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#end\">end</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cleanup_all_probes\">cleanup_all_probes</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#warn\">warn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_cont\">pr_cont</a>(\"NG: Some tests are failed. Please check them.\\n\");", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_cont\">pr_cont</a>(\"OK\\n\");", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#late_initcall\">late_initcall</a>(<a class=\"id\" href=\"#kprobe_trace_self_tests_init\">kprobe_trace_self_tests_init</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/0f/5ee3c5e3e4482e5bd5fde18c694893f0dd0023.xr', __xr_tmp);
