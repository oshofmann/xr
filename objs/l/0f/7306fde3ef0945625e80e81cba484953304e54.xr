var __xr_tmp = [
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i8042_mux_present\">i8042_mux_present</a> && (<a class=\"id\" href=\"#str\">str</a> &amp; <a class=\"id\" href=\"#I8042_STR_AUXDATA\">I8042_STR_AUXDATA</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>static unsigned long <a class=\"id\" href=\"#last_transmit\">last_transmit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>static unsigned char <a class=\"id\" href=\"#last_str\">last_str</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dfl\">dfl</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#str\">str</a> &amp; <a class=\"id\" href=\"#I8042_STR_MUXERR\">I8042_STR_MUXERR</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dbg\">dbg</a>(\"MUX error, status is %02x, data is %02x\", <a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * When MUXERR condition is signalled the data register can only contain</span>", 
"<span class=\"comment\"> * 0xfd, 0xfe or 0xff if implementation follows the spec. Unfortunately</span>", 
"<span class=\"comment\"> * it is not always the case. Some KBCs also report 0xfc when there is</span>", 
"<span class=\"comment\"> * nothing connected to the port while others sometimes get confused which</span>", 
"<span class=\"comment\"> * port the data came from and signal error leaving the data intact. They</span>", 
"<span class=\"comment\"> * _do not_ revert to legacy mode (actually I've never seen KBC reverting</span>", 
"<span class=\"comment\"> * to legacy mode yet, when we see one we'll add proper handling).</span>", 
"<span class=\"comment\"> * Anyway, we process 0xfc, 0xfd, 0xfe and 0xff as timeouts, and for the</span>", 
"<span class=\"comment\"> * rest assume that the data came from the same serio last byte</span>", 
"<span class=\"comment\"> * was transmitted (if transmission happened not too long ago).</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#data\">data</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#time_before\">time_before</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#last_transmit\">last_transmit</a> + <a class=\"id\" href=\"#HZ\">HZ</a>/10)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#str\">str</a> = <a class=\"id\" href=\"#last_str\">last_str</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fall through - report timeout */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case 0xfc:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case 0xfd:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case 0xfe: <a class=\"id\" href=\"#dfl\">dfl</a> = <a class=\"id\" href=\"#SERIO_TIMEOUT\">SERIO_TIMEOUT</a>; <a class=\"id\" href=\"#data\">data</a> = 0xfe; break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case 0xff: <a class=\"id\" href=\"#dfl\">dfl</a> = <a class=\"id\" href=\"#SERIO_PARITY\">SERIO_PARITY</a>;  <a class=\"id\" href=\"#data\">data</a> = 0xfe; break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#port_no\">port_no</a> = <a class=\"id\" href=\"#I8042_MUX_PORT_NO\">I8042_MUX_PORT_NO</a> + ((<a class=\"id\" href=\"#str\">str</a> >> 6) &amp; 3);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_str\">last_str</a> = <a class=\"id\" href=\"#str\">str</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_transmit\">last_transmit</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/>} else {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dfl\">dfl</a> = ((<a class=\"id\" href=\"#str\">str</a> &amp; <a class=\"id\" href=\"#I8042_STR_PARITY\">I8042_STR_PARITY</a>) ? <a class=\"id\" href=\"#SERIO_PARITY\">SERIO_PARITY</a> : 0) |", 
"<span class=\"ts\"/><span class=\"ts\"/>      ((<a class=\"id\" href=\"#str\">str</a> &amp; <a class=\"id\" href=\"#I8042_STR_TIMEOUT\">I8042_STR_TIMEOUT</a>) ? <a class=\"id\" href=\"#SERIO_TIMEOUT\">SERIO_TIMEOUT</a> : 0);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#port_no\">port_no</a> = (<a class=\"id\" href=\"#str\">str</a> &amp; <a class=\"id\" href=\"#I8042_STR_AUXDATA\">I8042_STR_AUXDATA</a>) ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#I8042_AUX_PORT_NO\">I8042_AUX_PORT_NO</a> : <a class=\"id\" href=\"#I8042_KBD_PORT_NO\">I8042_KBD_PORT_NO</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#port\">port</a> = &amp;<a class=\"id\" href=\"#i8042_ports\">i8042_ports</a>[<a class=\"id\" href=\"#port_no\">port_no</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#serio\">serio</a> = <a class=\"id\" href=\"#port\">port</a>-><a class=\"id\" href=\"#exists\">exists</a> ? <a class=\"id\" href=\"#port\">port</a>-><a class=\"id\" href=\"#serio\">serio</a> : <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dbg\">dbg</a>(\"%02x <- i8042 (interrupt, %d, %d%s%s)\",", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#port_no\">port_no</a>, <a class=\"id\" href=\"#irq\">irq</a>,", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#dfl\">dfl</a> &amp; <a class=\"id\" href=\"#SERIO_PARITY\">SERIO_PARITY</a> ? \", bad parity\" : \"\",", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#dfl\">dfl</a> &amp; <a class=\"id\" href=\"#SERIO_TIMEOUT\">SERIO_TIMEOUT</a> ? \", timeout\" : \"\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#filtered\">filtered</a> = <a class=\"id\" href=\"#i8042_filter\">i8042_filter</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#serio\">serio</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#i8042_lock\">i8042_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#port\">port</a>-><a class=\"id\" href=\"#exists\">exists</a> && !<a class=\"id\" href=\"#filtered\">filtered</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#serio_interrupt\">serio_interrupt</a>(<a class=\"id\" href=\"#serio\">serio</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#dfl\">dfl</a>);", 
"", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#IRQ_RETVAL\">IRQ_RETVAL</a>(<a class=\"id\" href=\"#ret\">ret</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * i8042_enable_kbd_port enables keyboard port on chip</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#i8042_enable_kbd_port\">i8042_enable_kbd_port</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i8042_ctr\">i8042_ctr</a> &= ~<a class=\"id\" href=\"#I8042_CTR_KBDDIS\">I8042_CTR_KBDDIS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i8042_ctr\">i8042_ctr</a> |= <a class=\"id\" href=\"#I8042_CTR_KBDINT\">I8042_CTR_KBDINT</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i8042_command\">i8042_command</a>(&amp;<a class=\"id\" href=\"#i8042_ctr\">i8042_ctr</a>, <a class=\"id\" href=\"#I8042_CMD_CTL_WCTR\">I8042_CMD_CTL_WCTR</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i8042_ctr\">i8042_ctr</a> &= ~<a class=\"id\" href=\"#I8042_CTR_KBDINT\">I8042_CTR_KBDINT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i8042_ctr\">i8042_ctr</a> |= <a class=\"id\" href=\"#I8042_CTR_KBDDIS\">I8042_CTR_KBDDIS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"i8042.c: Failed to enable KBD port.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * i8042_enable_aux_port enables AUX (mouse) port on chip</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#i8042_enable_aux_port\">i8042_enable_aux_port</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i8042_ctr\">i8042_ctr</a> &= ~<a class=\"id\" href=\"#I8042_CTR_AUXDIS\">I8042_CTR_AUXDIS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i8042_ctr\">i8042_ctr</a> |= <a class=\"id\" href=\"#I8042_CTR_AUXINT\">I8042_CTR_AUXINT</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i8042_command\">i8042_command</a>(&amp;<a class=\"id\" href=\"#i8042_ctr\">i8042_ctr</a>, <a class=\"id\" href=\"#I8042_CMD_CTL_WCTR\">I8042_CMD_CTL_WCTR</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i8042_ctr\">i8042_ctr</a> &= ~<a class=\"id\" href=\"#I8042_CTR_AUXINT\">I8042_CTR_AUXINT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i8042_ctr\">i8042_ctr</a> |= <a class=\"id\" href=\"#I8042_CTR_AUXDIS\">I8042_CTR_AUXDIS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"i8042.c: Failed to enable AUX port.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * i8042_enable_mux_ports enables 4 individual AUX ports after</span>", 
"<span class=\"comment\"> * the controller has been switched into Multiplexed mode</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#i8042_enable_mux_ports\">i8042_enable_mux_ports</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#param\">param</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#I8042_NUM_MUX_PORTS\">I8042_NUM_MUX_PORTS</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i8042_command\">i8042_command</a>(&amp;<a class=\"id\" href=\"#param\">param</a>, <a class=\"id\" href=\"#I8042_CMD_MUX_PFX\">I8042_CMD_MUX_PFX</a> + <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i8042_command\">i8042_command</a>(&amp;<a class=\"id\" href=\"#param\">param</a>, <a class=\"id\" href=\"#I8042_CMD_AUX_ENABLE\">I8042_CMD_AUX_ENABLE</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i8042_enable_aux_port\">i8042_enable_aux_port</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * i8042_set_mux_mode checks whether the controller has an</span>", 
"<span class=\"comment\"> * active multiplexor and puts the chip into Multiplexed (true)</span>", 
"<span class=\"comment\"> * or Legacy (false) mode.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#i8042_set_mux_mode\">i8042_set_mux_mode</a>(<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#multiplex\">multiplex</a>, unsigned char *<a class=\"id\" href=\"#mux_version\">mux_version</a>)", 
"{", 
"", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#param\">param</a>, <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Get rid of bytes in the queue.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i8042_flush\">i8042_flush</a>();", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Internal loopback test - send three bytes, they should come back from the</span>", 
"<span class=\"comment\"> * mouse interface, the last should be version.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#param\">param</a> = <a class=\"id\" href=\"#val\">val</a> = 0xf0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i8042_command\">i8042_command</a>(&amp;<a class=\"id\" href=\"#param\">param</a>, <a class=\"id\" href=\"#I8042_CMD_AUX_LOOP\">I8042_CMD_AUX_LOOP</a>) || <a class=\"id\" href=\"#param\">param</a> != <a class=\"id\" href=\"#val\">val</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#param\">param</a> = <a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#multiplex\">multiplex</a> ? 0x56 : 0xf6;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i8042_command\">i8042_command</a>(&amp;<a class=\"id\" href=\"#param\">param</a>, <a class=\"id\" href=\"#I8042_CMD_AUX_LOOP\">I8042_CMD_AUX_LOOP</a>) || <a class=\"id\" href=\"#param\">param</a> != <a class=\"id\" href=\"#val\">val</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#param\">param</a> = <a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#multiplex\">multiplex</a> ? 0xa4 : 0xa5;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i8042_command\">i8042_command</a>(&amp;<a class=\"id\" href=\"#param\">param</a>, <a class=\"id\" href=\"#I8042_CMD_AUX_LOOP\">I8042_CMD_AUX_LOOP</a>) || <a class=\"id\" href=\"#param\">param</a> == <a class=\"id\" href=\"#val\">val</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Workaround for interference with USB Legacy emulation</span>", 
"<span class=\"comment\"> * that causes a v10.12 MUX to be found.</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#param\">param</a> == 0xac)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mux_version\">mux_version</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#mux_version\">mux_version</a> = <a class=\"id\" href=\"#param\">param</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * i8042_check_mux() checks whether the controller supports the PS/2 Active</span>", 
"<span class=\"comment\"> * Multiplexing specification by Synaptics, Phoenix, Insyde and</span>", 
"<span class=\"comment\"> * LCS/Telegraphics.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#i8042_check_mux\">i8042_check_mux</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#mux_version\">mux_version</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i8042_set_mux_mode\">i8042_set_mux_mode</a>(<a class=\"id\" href=\"#true\">true</a>, &amp;<a class=\"id\" href=\"#mux_version\">mux_version</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"i8042.c: Detected active multiplexing controller, rev %d.%d.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#mux_version\">mux_version</a> >> 4) &amp; 0xf, <a class=\"id\" href=\"#mux_version\">mux_version</a> &amp; 0xf);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Disable all muxed ports by disabling AUX.</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i8042_ctr\">i8042_ctr</a> |= <a class=\"id\" href=\"#I8042_CTR_AUXDIS\">I8042_CTR_AUXDIS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i8042_ctr\">i8042_ctr</a> &= ~<a class=\"id\" href=\"#I8042_CTR_AUXINT\">I8042_CTR_AUXINT</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i8042_command\">i8042_command</a>(&amp;<a class=\"id\" href=\"#i8042_ctr\">i8042_ctr</a>, <a class=\"id\" href=\"#I8042_CMD_CTL_WCTR\">I8042_CMD_CTL_WCTR</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"i8042.c: Failed to disable AUX port, can't use MUX.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i8042_mux_present\">i8042_mux_present</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The following is used to test AUX IRQ delivery.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#completion\">completion</a> <a class=\"id\" href=\"#i8042_aux_irq_delivered\">i8042_aux_irq_delivered</a> <a class=\"id\" href=\"#__initdata\">__initdata</a>;", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#i8042_irq_being_tested\">i8042_irq_being_tested</a> <a class=\"id\" href=\"#__initdata\">__initdata</a>;", 
"", 
"static <a class=\"id\" href=\"#irqreturn_t\">irqreturn_t</a> <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#i8042_aux_test_irq\">i8042_aux_test_irq</a>(int <a class=\"id\" href=\"#irq\">irq</a>, void *<a class=\"id\" href=\"#dev_id\">dev_id</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#i8042_lock\">i8042_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#str\">str</a> = <a class=\"id\" href=\"#i8042_read_status\">i8042_read_status</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#str\">str</a> &amp; <a class=\"id\" href=\"#I8042_STR_OBF\">I8042_STR_OBF</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#i8042_read_data\">i8042_read_data</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dbg\">dbg</a>(\"%02x <- i8042 (aux_test_irq, %s)\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#str\">str</a> &amp; <a class=\"id\" href=\"#I8042_STR_AUXDATA\">I8042_STR_AUXDATA</a> ? \"aux\" : \"kbd\");", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i8042_irq_being_tested\">i8042_irq_being_tested</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#data\">data</a> == 0xa5 && (<a class=\"id\" href=\"#str\">str</a> &amp; <a class=\"id\" href=\"#I8042_STR_AUXDATA\">I8042_STR_AUXDATA</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#complete\">complete</a>(&amp;<a class=\"id\" href=\"#i8042_aux_irq_delivered\">i8042_aux_irq_delivered</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#i8042_lock\">i8042_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#IRQ_RETVAL\">IRQ_RETVAL</a>(<a class=\"id\" href=\"#ret\">ret</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * i8042_toggle_aux - enables or disables AUX port on i8042 via command and</span>", 
"<span class=\"comment\"> * verifies success by readinng CTR. Used when testing for presence of AUX</span>", 
"<span class=\"comment\"> * port.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#i8042_toggle_aux\">i8042_toggle_aux</a>(<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#on\">on</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#param\">param</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i8042_command\">i8042_command</a>(&amp;<a class=\"id\" href=\"#param\">param</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#on\">on</a> ? <a class=\"id\" href=\"#I8042_CMD_AUX_ENABLE\">I8042_CMD_AUX_ENABLE</a> : <a class=\"id\" href=\"#I8042_CMD_AUX_DISABLE\">I8042_CMD_AUX_DISABLE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* some chips need some time to set the I8042_CTR_AUXDIS bit */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 100; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#udelay\">udelay</a>(50);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i8042_command\">i8042_command</a>(&amp;<a class=\"id\" href=\"#param\">param</a>, <a class=\"id\" href=\"#I8042_CMD_CTL_RCTR\">I8042_CMD_CTL_RCTR</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#param\">param</a> &amp; <a class=\"id\" href=\"#I8042_CTR_AUXDIS\">I8042_CTR_AUXDIS</a>) == <a class=\"id\" href=\"#on\">on</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return -1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * i8042_check_aux() applies as much paranoia as it can at detecting</span>", 
"<span class=\"comment\"> * the presence of an AUX interface.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#i8042_check_aux\">i8042_check_aux</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a> = -1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#irq_registered\">irq_registered</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#aux_loop_broken\">aux_loop_broken</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#param\">param</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Get rid of bytes in the queue.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i8042_flush\">i8042_flush</a>();", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Internal loopback test - filters out AT-type i8042's. Unfortunately</span>", 
"<span class=\"comment\"> * SiS screwed up and their 5597 doesn't support the LOOP command even</span>", 
"<span class=\"comment\"> * though it has an AUX port.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#param\">param</a> = 0x5a;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#i8042_command\">i8042_command</a>(&amp;<a class=\"id\" href=\"#param\">param</a>, <a class=\"id\" href=\"#I8042_CMD_AUX_LOOP\">I8042_CMD_AUX_LOOP</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> || <a class=\"id\" href=\"#param\">param</a> != 0x5a) {", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * External connection test - filters out AT-soldered PS/2 i8042's</span>", 
"<span class=\"comment\"> * 0x00 - no error, 0x01-0x03 - clock/data stuck, 0xff - general error</span>", 
"<span class=\"comment\"> * 0xfa - no error on some notebooks which ignore the spec</span>", 
"<span class=\"comment\"> * Because it's common for chipsets to return error on perfectly functioning</span>", 
"<span class=\"comment\"> * AUX ports, we test for this only when the LOOP command failed.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i8042_command\">i8042_command</a>(&amp;<a class=\"id\" href=\"#param\">param</a>, <a class=\"id\" href=\"#I8042_CMD_AUX_TEST\">I8042_CMD_AUX_TEST</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#param\">param</a> && <a class=\"id\" href=\"#param\">param</a> != 0xfa && <a class=\"id\" href=\"#param\">param</a> != 0xff))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If AUX_LOOP completed without error but returned unexpected data</span>", 
"<span class=\"comment\"> * mark it as broken</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#aux_loop_broken\">aux_loop_broken</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Bit assignment test - filters out PS/2 i8042's in AT mode</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i8042_toggle_aux\">i8042_toggle_aux</a>(<a class=\"id\" href=\"#false\">false</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Failed to disable AUX port, but continuing anyway... Is this a SiS?\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"If AUX port is really absent please use the 'i8042.noaux' option.\\n\");", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i8042_toggle_aux\">i8042_toggle_aux</a>(<a class=\"id\" href=\"#true\">true</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Test AUX IRQ delivery to make sure BIOS did not grab the IRQ and</span>", 
"<span class=\"comment\"> * used it for a PCI card or somethig else.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i8042_noloop\">i8042_noloop</a> || <a class=\"id\" href=\"#i8042_bypass_aux_irq_test\">i8042_bypass_aux_irq_test</a> || <a class=\"id\" href=\"#aux_loop_broken\">aux_loop_broken</a>) {", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Without LOOP command we can't test AUX IRQ delivery. Assume the port</span>", 
"<span class=\"comment\"> * is working and hope we are right.</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#request_irq\">request_irq</a>(<a class=\"id\" href=\"#I8042_AUX_IRQ\">I8042_AUX_IRQ</a>, <a class=\"id\" href=\"#i8042_aux_test_irq\">i8042_aux_test_irq</a>, <a class=\"id\" href=\"#IRQF_SHARED\">IRQF_SHARED</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"i8042\", <a class=\"id\" href=\"#i8042_platform_device\">i8042_platform_device</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#irq_registered\">irq_registered</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i8042_enable_aux_port\">i8042_enable_aux_port</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#i8042_lock\">i8042_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_completion\">init_completion</a>(&amp;<a class=\"id\" href=\"#i8042_aux_irq_delivered\">i8042_aux_irq_delivered</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i8042_irq_being_tested\">i8042_irq_being_tested</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#param\">param</a> = 0xa5;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#__i8042_command\">__i8042_command</a>(&amp;<a class=\"id\" href=\"#param\">param</a>, <a class=\"id\" href=\"#I8042_CMD_AUX_LOOP\">I8042_CMD_AUX_LOOP</a> &amp; 0xf0ff);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#i8042_lock\">i8042_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#wait_for_completion_timeout\">wait_for_completion_timeout</a>(&amp;<a class=\"id\" href=\"#i8042_aux_irq_delivered\">i8042_aux_irq_delivered</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msecs_to_jiffies\">msecs_to_jiffies</a>(250)) == 0) {", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * AUX IRQ was never delivered so we need to flush the controller to</span>", 
"<span class=\"comment\"> * get rid of the byte we put there; otherwise keyboard may not work.</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dbg\">dbg</a>(\"     -- i8042 (aux irq test timeout)\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i8042_flush\">i8042_flush</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -1;", 
"<span class=\"ts\"/>}", 
"", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Disable the interface.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i8042_ctr\">i8042_ctr</a> |= <a class=\"id\" href=\"#I8042_CTR_AUXDIS\">I8042_CTR_AUXDIS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i8042_ctr\">i8042_ctr</a> &= ~<a class=\"id\" href=\"#I8042_CTR_AUXINT\">I8042_CTR_AUXINT</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i8042_command\">i8042_command</a>(&amp;<a class=\"id\" href=\"#i8042_ctr\">i8042_ctr</a>, <a class=\"id\" href=\"#I8042_CMD_CTL_WCTR\">I8042_CMD_CTL_WCTR</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#irq_registered\">irq_registered</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_irq\">free_irq</a>(<a class=\"id\" href=\"#I8042_AUX_IRQ\">I8042_AUX_IRQ</a>, <a class=\"id\" href=\"#i8042_platform_device\">i8042_platform_device</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#i8042_controller_check\">i8042_controller_check</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i8042_flush\">i8042_flush</a>() == <a class=\"id\" href=\"#I8042_BUFFER_SIZE\">I8042_BUFFER_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"i8042.c: No controller found.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#i8042_controller_selftest\">i8042_controller_selftest</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#param\">param</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We try this 5 times; on some really fragile systems this does not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * take the first time...</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>do {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i8042_command\">i8042_command</a>(&amp;<a class=\"id\" href=\"#param\">param</a>, <a class=\"id\" href=\"#I8042_CMD_CTL_TEST\">I8042_CMD_CTL_TEST</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"i8042.c: i8042 controller self test timeout.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#param\">param</a> == <a class=\"id\" href=\"#I8042_RET_CTL_TEST\">I8042_RET_CTL_TEST</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"i8042.c: i8042 controller selftest failed. (%#x != %#x)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#param\">param</a>, <a class=\"id\" href=\"#I8042_RET_CTL_TEST\">I8042_RET_CTL_TEST</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>(50);", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#i\">i</a>++ &lt; 5);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86\">CONFIG_X86</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * On x86, we don't fail entire i8042 initialization if controller</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reset fails in hopes that keyboard port will still be functional</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and user will still get a working keyboard. This is especially</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * important on netbooks. On other arches we trust hardware more.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>\"i8042: giving up on controller selftest, continuing anyway...\\n\");", 
"<span class=\"ts\"/>return 0;", 
"#else", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * i8042_controller init initializes the i8042 controller, and,</span>", 
"<span class=\"comment\"> * most importantly, sets it into non-xlated mode if that's</span>", 
"<span class=\"comment\"> * desired.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#i8042_controller_init\">i8042_controller_init</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a> = 0;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#ctr\">ctr</a>[2];", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Save the CTR for restore on unload / reboot.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> >= 10) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"i8042.c: Unable to get stable CTR read.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#udelay\">udelay</a>(50);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i8042_command\">i8042_command</a>(&amp;<a class=\"id\" href=\"#ctr\">ctr</a>[<a class=\"id\" href=\"#n\">n</a>++ % 2], <a class=\"id\" href=\"#I8042_CMD_CTL_RCTR\">I8042_CMD_CTL_RCTR</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"i8042.c: Can't read CTR while initializing i8042.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#n\">n</a> &lt; 2 || <a class=\"id\" href=\"#ctr\">ctr</a>[0] != <a class=\"id\" href=\"#ctr\">ctr</a>[1]);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i8042_initial_ctr\">i8042_initial_ctr</a> = <a class=\"id\" href=\"#i8042_ctr\">i8042_ctr</a> = <a class=\"id\" href=\"#ctr\">ctr</a>[0];", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Disable the keyboard interface and interrupt.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i8042_ctr\">i8042_ctr</a> |= <a class=\"id\" href=\"#I8042_CTR_KBDDIS\">I8042_CTR_KBDDIS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i8042_ctr\">i8042_ctr</a> &= ~<a class=\"id\" href=\"#I8042_CTR_KBDINT\">I8042_CTR_KBDINT</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Handle keylock.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#i8042_lock\">i8042_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (~<a class=\"id\" href=\"#i8042_read_status\">i8042_read_status</a>() &amp; <a class=\"id\" href=\"#I8042_STR_KEYLOCK\">I8042_STR_KEYLOCK</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i8042_unlock\">i8042_unlock</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i8042_ctr\">i8042_ctr</a> |= <a class=\"id\" href=\"#I8042_CTR_IGNKEYLOCK\">I8042_CTR_IGNKEYLOCK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"i8042.c: Warning: Keylock active.\\n\");", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#i8042_lock\">i8042_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If the chip is configured into nontranslated mode by the BIOS, don't</span>", 
"<span class=\"comment\"> * bother enabling translating and be happy.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"ts\"/>if (~<a class=\"id\" href=\"#i8042_ctr\">i8042_ctr</a> &amp; <a class=\"id\" href=\"#I8042_CTR_XLATE\">I8042_CTR_XLATE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i8042_direct\">i8042_direct</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Set nontranslated mode for the kbd interface if requested by an option.</span>", 
"<span class=\"comment\"> * After this the kbd interface becomes a simple serial in/out, like the aux</span>", 
"<span class=\"comment\"> * interface is. We don't do this by default, since it can confuse notebook</span>", 
"<span class=\"comment\"> * BIOSes.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i8042_direct\">i8042_direct</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i8042_ctr\">i8042_ctr</a> &= ~<a class=\"id\" href=\"#I8042_CTR_XLATE\">I8042_CTR_XLATE</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Write CTR back.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i8042_command\">i8042_command</a>(&amp;<a class=\"id\" href=\"#i8042_ctr\">i8042_ctr</a>, <a class=\"id\" href=\"#I8042_CMD_CTL_WCTR\">I8042_CMD_CTL_WCTR</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"i8042.c: Can't write CTR while initializing i8042.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Flush whatever accumulated while we were disabling keyboard port.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i8042_flush\">i8042_flush</a>();", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Reset the controller and reset CRT to the original value set by BIOS.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#i8042_controller_reset\">i8042_controller_reset</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i8042_flush\">i8042_flush</a>();", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Disable both KBD and AUX interfaces so they don't get in the way</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i8042_ctr\">i8042_ctr</a> |= <a class=\"id\" href=\"#I8042_CTR_KBDDIS\">I8042_CTR_KBDDIS</a> | <a class=\"id\" href=\"#I8042_CTR_AUXDIS\">I8042_CTR_AUXDIS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i8042_ctr\">i8042_ctr</a> &= ~(<a class=\"id\" href=\"#I8042_CTR_KBDINT\">I8042_CTR_KBDINT</a> | <a class=\"id\" href=\"#I8042_CTR_AUXINT\">I8042_CTR_AUXINT</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i8042_command\">i8042_command</a>(&amp;<a class=\"id\" href=\"#i8042_ctr\">i8042_ctr</a>, <a class=\"id\" href=\"#I8042_CMD_CTL_WCTR\">I8042_CMD_CTL_WCTR</a>))", 
];
xr_frag_insert('l/0f/7306fde3ef0945625e80e81cba484953304e54.xr', __xr_tmp);
