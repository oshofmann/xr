var __xr_tmp = [
"<span class=\"ts\"/>int <a class=\"id\" href=\"#index\">index</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* index first long of region in bitmap */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#offset\">offset</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* bit offset region in bitmap[index] */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nlongs_reg\">nlongs_reg</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* num longs spanned by region in bitmap */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nbitsinlong\">nbitsinlong</a>;<span class=\"ts\"/><span class=\"comment\">/* num bits of region in each spanned long */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mask\">mask</a>;<span class=\"ts\"/><span class=\"comment\">/* bitmask for one long of region */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* scans bitmap by longs */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* return value */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Either nlongs_reg == 1 (for small orders that fit in one long)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * or (offset == 0 &amp;&amp; mask == ~0UL) (for larger multiword orders.)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nbits_reg\">nbits_reg</a> = 1 << <a class=\"id\" href=\"#order\">order</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#pos\">pos</a> / <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#pos\">pos</a> - (<a class=\"id\" href=\"#index\">index</a> * <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nlongs_reg\">nlongs_reg</a> = <a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#nbits_reg\">nbits_reg</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nbitsinlong\">nbitsinlong</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#nbits_reg\">nbits_reg</a>,  <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Can't do \"mask = (1UL &lt;&lt; nbitsinlong) - 1\", as that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * overflows if nbitsinlong == BITS_PER_LONG.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = (1UL << (<a class=\"id\" href=\"#nbitsinlong\">nbitsinlong</a> - 1));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> += <a class=\"id\" href=\"#mask\">mask</a> - 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> <<= <a class=\"id\" href=\"#offset\">offset</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#reg_op\">reg_op</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#REG_OP_ISFREE\">REG_OP_ISFREE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nlongs_reg\">nlongs_reg</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bitmap\">bitmap</a>[<a class=\"id\" href=\"#index\">index</a> + <a class=\"id\" href=\"#i\">i</a>] &amp; <a class=\"id\" href=\"#mask\">mask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;<span class=\"ts\"/><span class=\"comment\">/* all bits in region free (zero) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#REG_OP_ALLOC\">REG_OP_ALLOC</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nlongs_reg\">nlongs_reg</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bitmap\">bitmap</a>[<a class=\"id\" href=\"#index\">index</a> + <a class=\"id\" href=\"#i\">i</a>] |= <a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#REG_OP_RELEASE\">REG_OP_RELEASE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nlongs_reg\">nlongs_reg</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bitmap\">bitmap</a>[<a class=\"id\" href=\"#index\">index</a> + <a class=\"id\" href=\"#i\">i</a>] &= ~<a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#done\">done</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bitmap_find_free_region - find a contiguous aligned mem region</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@bitmap: array of unsigned longs corresponding to the bitmap</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@bits: number of bits in the bitmap</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@order: region size (log base 2 of number of bits) to find</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Find a region of free (zero) bits in a @bitmap of @bits bits and</span>", 
"<span class=\"comment\"> * allocate them (set them to one).  Only consider regions of length</span>", 
"<span class=\"comment\"> * a power (@order) of two, aligned to that power of two, which</span>", 
"<span class=\"comment\"> * makes the search algorithm much faster.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return the bit offset in bitmap of the allocated region,</span>", 
"<span class=\"comment\"> * or -errno on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#bitmap_find_free_region\">bitmap_find_free_region</a>(unsigned long *<a class=\"id\" href=\"#bitmap\">bitmap</a>, int <a class=\"id\" href=\"#bits\">bits</a>, int <a class=\"id\" href=\"#order\">order</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#end\">end</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* scans bitmap by regions of size order */</span>", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pos\">pos</a> = 0 ; (<a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#pos\">pos</a> + (1 << <a class=\"id\" href=\"#order\">order</a>)) <= <a class=\"id\" href=\"#bits\">bits</a>; <a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#__reg_op\">__reg_op</a>(<a class=\"id\" href=\"#bitmap\">bitmap</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#REG_OP_ISFREE\">REG_OP_ISFREE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__reg_op\">__reg_op</a>(<a class=\"id\" href=\"#bitmap\">bitmap</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#REG_OP_ALLOC\">REG_OP_ALLOC</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bitmap_find_free_region\">bitmap_find_free_region</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bitmap_release_region - release allocated bitmap region</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@bitmap: array of unsigned longs corresponding to the bitmap</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@pos: beginning of bit region to release</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@order: region size (log base 2 of number of bits) to release</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is the complement to __bitmap_find_free_region() and releases</span>", 
"<span class=\"comment\"> * the found region (by clearing it in the bitmap).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * No return value.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#bitmap_release_region\">bitmap_release_region</a>(unsigned long *<a class=\"id\" href=\"#bitmap\">bitmap</a>, int <a class=\"id\" href=\"#pos\">pos</a>, int <a class=\"id\" href=\"#order\">order</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__reg_op\">__reg_op</a>(<a class=\"id\" href=\"#bitmap\">bitmap</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#REG_OP_RELEASE\">REG_OP_RELEASE</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bitmap_release_region\">bitmap_release_region</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bitmap_allocate_region - allocate bitmap region</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@bitmap: array of unsigned longs corresponding to the bitmap</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@pos: beginning of bit region to allocate</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@order: region size (log base 2 of number of bits) to allocate</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Allocate (set bits in) a specified region of a bitmap.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return 0 on success, or %-EBUSY if specified region wasn't</span>", 
"<span class=\"comment\"> * free (not all bits were zero).</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#bitmap_allocate_region\">bitmap_allocate_region</a>(unsigned long *<a class=\"id\" href=\"#bitmap\">bitmap</a>, int <a class=\"id\" href=\"#pos\">pos</a>, int <a class=\"id\" href=\"#order\">order</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#__reg_op\">__reg_op</a>(<a class=\"id\" href=\"#bitmap\">bitmap</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#REG_OP_ISFREE\">REG_OP_ISFREE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__reg_op\">__reg_op</a>(<a class=\"id\" href=\"#bitmap\">bitmap</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#REG_OP_ALLOC\">REG_OP_ALLOC</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bitmap_allocate_region\">bitmap_allocate_region</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bitmap_copy_le - copy a bitmap, putting the bits into little-endian order.</span>", 
"<span class=\"comment\"> * @dst:   destination buffer</span>", 
"<span class=\"comment\"> * @src:   bitmap to copy</span>", 
"<span class=\"comment\"> * @nbits: number of bits in the bitmap</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Require nbits % BITS_PER_LONG == 0.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#bitmap_copy_le\">bitmap_copy_le</a>(void *<a class=\"id\" href=\"#dst\">dst</a>, const unsigned long *<a class=\"id\" href=\"#src\">src</a>, int <a class=\"id\" href=\"#nbits\">nbits</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#d\">d</a> = <a class=\"id\" href=\"#dst\">dst</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nbits\">nbits</a>/<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> == 64)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#cpu_to_le64\">cpu_to_le64</a>(<a class=\"id\" href=\"#src\">src</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#cpu_to_le32\">cpu_to_le32</a>(<a class=\"id\" href=\"#src\">src</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bitmap_copy_le\">bitmap_copy_le</a>);", 
];
xr_frag_insert('l/0f/945eece4163adce912c102d663576adacd16bf.xr', __xr_tmp);
