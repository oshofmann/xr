var __xr_tmp = [
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#fastdrain_timer\">fastdrain_timer</a>.<a class=\"id\" href=\"#data\">data</a> = (unsigned long)<a class=\"id\" href=\"#ap\">ap</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#cbl\">cbl</a> = <a class=\"id\" href=\"#ATA_CBL_NONE\">ATA_CBL_NONE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_link_init\">ata_link_init</a>(<a class=\"id\" href=\"#ap\">ap</a>, &amp;<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#link\">link</a>, 0);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#ATA_IRQ_TRAP\">ATA_IRQ_TRAP</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#stats\">stats</a>.<a class=\"id\" href=\"#unhandled_irq\">unhandled_irq</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#stats\">stats</a>.<a class=\"id\" href=\"#idle_irq\">idle_irq</a> = 1;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_sff_port_init\">ata_sff_port_init</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ap\">ap</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ata_host_release\">ata_host_release</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#gendev\">gendev</a>, void *<a class=\"id\" href=\"#res\">res</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_host\">ata_host</a> *<a class=\"id\" href=\"#host\">host</a> = <a class=\"id\" href=\"#dev_get_drvdata\">dev_get_drvdata</a>(<a class=\"id\" href=\"#gendev\">gendev</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#n_ports\">n_ports</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#ports\">ports</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ap\">ap</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#scsi_host\">scsi_host</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_host_put\">scsi_host_put</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#scsi_host\">scsi_host</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#pmp_link\">pmp_link</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#slave_link\">slave_link</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#ports\">ports</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_set_drvdata\">dev_set_drvdata</a>(<a class=\"id\" href=\"#gendev\">gendev</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_host_alloc - allocate and init basic ATA host resources</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: generic device this host is associated with</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@max_ports: maximum number of ATA ports associated with this host</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Allocate and initialize basic ATA host resources.  LLD calls</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>this function to allocate a host, initializes it fully and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>attaches it using ata_host_register().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@max_ports ports are allocated and host-&gt;n_ports is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>initialized to @max_ports.  The caller is allowed to decrease</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>host-&gt;n_ports before calling ata_host_register().  The unused</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ports will be automatically freed on registration.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Allocate ATA host on success, NULL on failure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Inherited from calling layer (may sleep).</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ata_host\">ata_host</a> *<a class=\"id\" href=\"#ata_host_alloc\">ata_host_alloc</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#max_ports\">max_ports</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_host\">ata_host</a> *<a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#sz\">sz</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(\"ENTER\\n\");", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#devres_open_group\">devres_open_group</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* alloc a container for our list of ATA ports (buses) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sz\">sz</a> = sizeof(struct <a class=\"id\" href=\"#ata_host\">ata_host</a>) + (<a class=\"id\" href=\"#max_ports\">max_ports</a> + 1) * sizeof(void *);", 
"<span class=\"ts\"/><span class=\"comment\">/* alloc a container for our list of ATA ports (buses) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#host\">host</a> = <a class=\"id\" href=\"#devres_alloc\">devres_alloc</a>(<a class=\"id\" href=\"#ata_host_release\">ata_host_release</a>, <a class=\"id\" href=\"#sz\">sz</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#host\">host</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#devres_add\">devres_add</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#host\">host</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_set_drvdata\">dev_set_drvdata</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#host\">host</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#n_ports\">n_ports</a> = <a class=\"id\" href=\"#max_ports\">max_ports</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* allocate ports bound to this host */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#max_ports\">max_ports</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#ata_port_alloc\">ata_port_alloc</a>(<a class=\"id\" href=\"#host\">host</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ap\">ap</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#port_no\">port_no</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#ports\">ports</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#ap\">ap</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#devres_remove_group\">devres_remove_group</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#host\">host</a>;", 
"", 
" <a class=\"id\" href=\"#err_out\">err_out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#devres_release_group\">devres_release_group</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_host_alloc_pinfo - alloc host and init with port_info array</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: generic device this host is associated with</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ppi: array of ATA port_info to initialize host with</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@n_ports: number of ATA ports attached to this host</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Allocate ATA host and initialize with info from @ppi.  If NULL</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>terminated, @ppi may contain fewer entries than @n_ports.  The</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>last entry will be used for the remaining ports.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Allocate ATA host on success, NULL on failure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Inherited from calling layer (may sleep).</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ata_host\">ata_host</a> *<a class=\"id\" href=\"#ata_host_alloc_pinfo\">ata_host_alloc_pinfo</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      const struct <a class=\"id\" href=\"#ata_port_info\">ata_port_info</a> * const * <a class=\"id\" href=\"#ppi\">ppi</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#n_ports\">n_ports</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#ata_port_info\">ata_port_info</a> *<a class=\"id\" href=\"#pi\">pi</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_host\">ata_host</a> *<a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#host\">host</a> = <a class=\"id\" href=\"#ata_host_alloc\">ata_host_alloc</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#n_ports\">n_ports</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#host\">host</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0, <a class=\"id\" href=\"#j\">j</a> = 0, <a class=\"id\" href=\"#pi\">pi</a> = <a class=\"id\" href=\"#NULL\">NULL</a>; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#n_ports\">n_ports</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#ports\">ports</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ppi\">ppi</a>[<a class=\"id\" href=\"#j\">j</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pi\">pi</a> = <a class=\"id\" href=\"#ppi\">ppi</a>[<a class=\"id\" href=\"#j\">j</a>++];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#pio_mask\">pio_mask</a> = <a class=\"id\" href=\"#pi\">pi</a>-><a class=\"id\" href=\"#pio_mask\">pio_mask</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#mwdma_mask\">mwdma_mask</a> = <a class=\"id\" href=\"#pi\">pi</a>-><a class=\"id\" href=\"#mwdma_mask\">mwdma_mask</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#udma_mask\">udma_mask</a> = <a class=\"id\" href=\"#pi\">pi</a>-><a class=\"id\" href=\"#udma_mask\">udma_mask</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#pi\">pi</a>-><a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#link\">link</a>.<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#pi\">pi</a>-><a class=\"id\" href=\"#link_flags\">link_flags</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a> = <a class=\"id\" href=\"#pi\">pi</a>-><a class=\"id\" href=\"#port_ops\">port_ops</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#ops\">ops</a> && (<a class=\"id\" href=\"#pi\">pi</a>-><a class=\"id\" href=\"#port_ops\">port_ops</a> != &amp;<a class=\"id\" href=\"#ata_dummy_port_ops\">ata_dummy_port_ops</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#ops\">ops</a> = <a class=\"id\" href=\"#pi\">pi</a>-><a class=\"id\" href=\"#port_ops\">port_ops</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#host\">host</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_slave_link_init - initialize slave link</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ap: port to initialize slave link for</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Create and initialize slave link for @ap.  This enables slave</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>link handling on the port.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>In libata, a port contains links and a link contains devices.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>There is single host link but if a PMP is attached to it,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>there can be multiple fan-out links.  On SATA, there's usually</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>a single device connected to a link but PATA and SATA</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>controllers emulating TF based interface can have two - master</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and slave.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>However, there are a few controllers which don't fit into this</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>abstraction too well - SATA controllers which emulate TF</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>interface with both master and slave devices but also have</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>separate SCR register sets for each device.  These controllers</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>need separate links for physical link handling</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(e.g. onlineness, link speed) but should be treated like a</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>traditional M/S controller for everything else (e.g. command</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>issue, softreset).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>slave_link is libata's way of handling this class of</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>controllers without impacting core layer too much.  For</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>anything other than physical link handling, the default host</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>link is used for both master and slave.  For physical link</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>handling, separate @ap-&gt;slave_link is used.  All dirty details</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>are implemented inside libata core layer.  From LLD's POV, the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>only difference is that prereset, hardreset and postreset are</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>called once more for the slave link, so the reset sequence</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>looks like the following.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>prereset(M) -&gt; prereset(S) -&gt; hardreset(M) -&gt; hardreset(S) -&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>softreset(M) -&gt; postreset(M) -&gt; postreset(S)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Note that softreset is called only for the master.  Softreset</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>resets both M/S by definition, so SRST on master should handle</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>both (the standard method will work just fine).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Should be called before host is registered.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0 on success, -errno on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ata_slave_link_init\">ata_slave_link_init</a>(struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_link\">ata_link</a> *<a class=\"id\" href=\"#link\">link</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#slave_link\">slave_link</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_FLAG_PMP\">ATA_FLAG_PMP</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#link\">link</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#link\">link</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#link\">link</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_link_init\">ata_link_init</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#link\">link</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#slave_link\">slave_link</a> = <a class=\"id\" href=\"#link\">link</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ata_host_stop\">ata_host_stop</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#gendev\">gendev</a>, void *<a class=\"id\" href=\"#res\">res</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_host\">ata_host</a> *<a class=\"id\" href=\"#host\">host</a> = <a class=\"id\" href=\"#dev_get_drvdata\">dev_get_drvdata</a>(<a class=\"id\" href=\"#gendev\">gendev</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!(<a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_HOST_STARTED\">ATA_HOST_STARTED</a>));", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#n_ports\">n_ports</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#ports\">ports</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#port_stop\">port_stop</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#port_stop\">port_stop</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#host_stop\">host_stop</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#host_stop\">host_stop</a>(<a class=\"id\" href=\"#host\">host</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_finalize_port_ops - finalize ata_port_operations</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ops: ata_port_operations to finalize</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>An ata_port_operations can inherit from another ops and that</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ops can again inherit from another.  This can go on as many</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>times as necessary as long as there is no loop in the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>inheritance chain.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Ops tables are finalized when the host is started.  NULL or</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>unspecified entries are inherited from the closet ancestor</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>which has the method and the entry is populated with it.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>After finalization, the ops table directly points to all the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>methods and -&gt;inherits is no longer necessary and cleared.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Using ATA_OP_NULL, inheriting ops can force a method to NULL.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>None.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ata_finalize_port_ops\">ata_finalize_port_ops</a>(struct <a class=\"id\" href=\"#ata_port_operations\">ata_port_operations</a> *<a class=\"id\" href=\"#ops\">ops</a>)", 
"{", 
"<span class=\"ts\"/>static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#ata_port_operations\">ata_port_operations</a> *<a class=\"id\" href=\"#cur\">cur</a>;", 
"<span class=\"ts\"/>void **<a class=\"id\" href=\"#begin\">begin</a> = (void **)<a class=\"id\" href=\"#ops\">ops</a>;", 
"<span class=\"ts\"/>void **<a class=\"id\" href=\"#end\">end</a> = (void **)&amp;<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#inherits\">inherits</a>;", 
"<span class=\"ts\"/>void **<a class=\"id\" href=\"#pp\">pp</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ops\">ops</a> || !<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#inherits\">inherits</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#inherits\">inherits</a>; <a class=\"id\" href=\"#cur\">cur</a>; <a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#cur\">cur</a>-><a class=\"id\" href=\"#inherits\">inherits</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>void **<a class=\"id\" href=\"#inherit\">inherit</a> = (void **)<a class=\"id\" href=\"#cur\">cur</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#pp\">pp</a> = <a class=\"id\" href=\"#begin\">begin</a>; <a class=\"id\" href=\"#pp\">pp</a> &lt; <a class=\"id\" href=\"#end\">end</a>; <a class=\"id\" href=\"#pp\">pp</a>++, <a class=\"id\" href=\"#inherit\">inherit</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!*<a class=\"id\" href=\"#pp\">pp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#pp\">pp</a> = *<a class=\"id\" href=\"#inherit\">inherit</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pp\">pp</a> = <a class=\"id\" href=\"#begin\">begin</a>; <a class=\"id\" href=\"#pp\">pp</a> &lt; <a class=\"id\" href=\"#end\">end</a>; <a class=\"id\" href=\"#pp\">pp</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(*<a class=\"id\" href=\"#pp\">pp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#pp\">pp</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#inherits\">inherits</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_host_start - start and freeze ports of an ATA host</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@host: ATA host to start ports for</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Start and then freeze ports of @host.  Started status is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>recorded in host-&gt;flags, so this function can be called</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>multiple times.  Ports are guaranteed to get started only</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>once.  If host-&gt;ops isn't initialized yet, its set to the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>first non-dummy port ops.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Inherited from calling layer (may sleep).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0 if all ports are started successfully, -errno otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ata_host_start\">ata_host_start</a>(struct <a class=\"id\" href=\"#ata_host\">ata_host</a> *<a class=\"id\" href=\"#host\">host</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#have_stop\">have_stop</a> = 0;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#start_dr\">start_dr</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_HOST_STARTED\">ATA_HOST_STARTED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_finalize_port_ops\">ata_finalize_port_ops</a>(<a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#ops\">ops</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#n_ports\">n_ports</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#ports\">ports</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_finalize_port_ops\">ata_finalize_port_ops</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#ops\">ops</a> && !<a class=\"id\" href=\"#ata_port_is_dummy\">ata_port_is_dummy</a>(<a class=\"id\" href=\"#ap\">ap</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#ops\">ops</a> = <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#port_stop\">port_stop</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#have_stop\">have_stop</a> = 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#host_stop\">host_stop</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#have_stop\">have_stop</a> = 1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#have_stop\">have_stop</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_dr\">start_dr</a> = <a class=\"id\" href=\"#devres_alloc\">devres_alloc</a>(<a class=\"id\" href=\"#ata_host_stop\">ata_host_stop</a>, 0, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#start_dr\">start_dr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#n_ports\">n_ports</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#ports\">ports</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#port_start\">port_start</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#port_start\">port_start</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> != -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_printk\">dev_printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>, <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"failed to start port %d \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"(errno=%d)\\n\", <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#rc\">rc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_eh_freeze_port\">ata_eh_freeze_port</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#start_dr\">start_dr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#devres_add\">devres_add</a>(<a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#start_dr\">start_dr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_HOST_STARTED\">ATA_HOST_STARTED</a>;", 
"<span class=\"ts\"/>return 0;", 
"", 
" <a class=\"id\" href=\"#err_out\">err_out</a>:", 
"<span class=\"ts\"/>while (--<a class=\"id\" href=\"#i\">i</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#ports\">ports</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#port_stop\">port_stop</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#port_stop\">port_stop</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#devres_free\">devres_free</a>(<a class=\"id\" href=\"#start_dr\">start_dr</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_sas_host_init - Initialize a host struct</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@host:<span class=\"ts\"/>host to initialize</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev:<span class=\"ts\"/>device host is attached to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@flags:<span class=\"ts\"/>host flags</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ops:<span class=\"ts\"/>port_ops</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>PCI/etc. bus probe sem.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"comment\">/* KILLME - the only user left is ipr */</span>", 
"void <a class=\"id\" href=\"#ata_host_init\">ata_host_init</a>(struct <a class=\"id\" href=\"#ata_host\">ata_host</a> *<a class=\"id\" href=\"#host\">host</a>, struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#flags\">flags</a>, struct <a class=\"id\" href=\"#ata_port_operations\">ata_port_operations</a> *<a class=\"id\" href=\"#ops\">ops</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#ops\">ops</a> = <a class=\"id\" href=\"#ops\">ops</a>;", 
"}", 
"", 
"", 
"static void <a class=\"id\" href=\"#async_port_probe\">async_port_probe</a>(void *<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#async_cookie_t\">async_cookie_t</a> <a class=\"id\" href=\"#cookie\">cookie</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we're not allowed to scan this host in parallel,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we need to wait until all previous scans have completed</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * before going further.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Jeff Garzik says this is only within a controller, so we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * don't need to wait for port 0, only for later ports.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_HOST_PARALLEL_SCAN\">ATA_HOST_PARALLEL_SCAN</a>) && <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#port_no\">port_no</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#async_synchronize_cookie\">async_synchronize_cookie</a>(<a class=\"id\" href=\"#cookie\">cookie</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* probe */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#error_handler\">error_handler</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_eh_info\">ata_eh_info</a> *<a class=\"id\" href=\"#ehi\">ehi</a> = &amp;<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#link\">link</a>.<a class=\"id\" href=\"#eh_info\">eh_info</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* kick EH for boot probing */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ehi\">ehi</a>-><a class=\"id\" href=\"#probe_mask\">probe_mask</a> |= <a class=\"id\" href=\"#ATA_ALL_DEVICES\">ATA_ALL_DEVICES</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ehi\">ehi</a>-><a class=\"id\" href=\"#action\">action</a> |= <a class=\"id\" href=\"#ATA_EH_RESET\">ATA_EH_RESET</a> | <a class=\"id\" href=\"#ATA_EH_LPM\">ATA_EH_LPM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ehi\">ehi</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_EHI_NO_AUTOPSY\">ATA_EHI_NO_AUTOPSY</a> | <a class=\"id\" href=\"#ATA_EHI_QUIET\">ATA_EHI_QUIET</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#pflags\">pflags</a> &= ~<a class=\"id\" href=\"#ATA_PFLAG_INITIALIZING\">ATA_PFLAG_INITIALIZING</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#pflags\">pflags</a> |= <a class=\"id\" href=\"#ATA_PFLAG_LOADING\">ATA_PFLAG_LOADING</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_port_schedule_eh\">ata_port_schedule_eh</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* wait for EH to finish */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_port_wait_eh\">ata_port_wait_eh</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(\"ata%u: bus probe begin\\n\", <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#print_id\">print_id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ata_bus_probe\">ata_bus_probe</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(\"ata%u: bus probe end\\n\", <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#print_id\">print_id</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* FIXME: do something useful here?</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Current libata behavior will</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * tear down everything when</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the module is removed</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * or the h/w is unplugged.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* in order to keep device order, we need to synchronize at this point */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#async_synchronize_cookie\">async_synchronize_cookie</a>(<a class=\"id\" href=\"#cookie\">cookie</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_scsi_scan_host\">ata_scsi_scan_host</a>(<a class=\"id\" href=\"#ap\">ap</a>, 1);", 
"", 
"}", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_host_register - register initialized ATA host</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@host: ATA host to register</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sht: template for SCSI host</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Register initialized ATA host.  @host is allocated using</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_host_alloc() and fully initialized by LLD.  This function</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>starts ports, registers @host with ATA and SCSI layers and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>probe registered devices.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Inherited from calling layer (may sleep).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0 on success, -errno otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ata_host_register\">ata_host_register</a>(struct <a class=\"id\" href=\"#ata_host\">ata_host</a> *<a class=\"id\" href=\"#host\">host</a>, struct <a class=\"id\" href=\"#scsi_host_template\">scsi_host_template</a> *<a class=\"id\" href=\"#sht\">sht</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* host must have been started */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_HOST_STARTED\">ATA_HOST_STARTED</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_printk\">dev_printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>, <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"BUG: trying to register unstarted host\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Blow away unused ports.  This happens when LLD can't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * determine the exact number of ports to allocate at</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * allocation time.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#n_ports\">n_ports</a>; <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#ports\">ports</a>[<a class=\"id\" href=\"#i\">i</a>]; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#ports\">ports</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* give ports names and add SCSI hosts */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#n_ports\">n_ports</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#ports\">ports</a>[<a class=\"id\" href=\"#i\">i</a>]-><a class=\"id\" href=\"#print_id\">print_id</a> = <a class=\"id\" href=\"#ata_print_id\">ata_print_id</a>++;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ata_scsi_add_hosts\">ata_scsi_add_hosts</a>(<a class=\"id\" href=\"#host\">host</a>, <a class=\"id\" href=\"#sht\">sht</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* associate with ACPI nodes */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_acpi_associate\">ata_acpi_associate</a>(<a class=\"id\" href=\"#host\">host</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* set cable, sata_spd_limit and report */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#n_ports\">n_ports</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#ports\">ports</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#xfer_mask\">xfer_mask</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* set SATA cable type if still unset */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#cbl\">cbl</a> == <a class=\"id\" href=\"#ATA_CBL_NONE\">ATA_CBL_NONE</a> && (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_FLAG_SATA\">ATA_FLAG_SATA</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#cbl\">cbl</a> = <a class=\"id\" href=\"#ATA_CBL_SATA\">ATA_CBL_SATA</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* init sata_spd_limit to the current value */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sata_link_init_spd\">sata_link_init_spd</a>(&amp;<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#link\">link</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#slave_link\">slave_link</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sata_link_init_spd\">sata_link_init_spd</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#slave_link\">slave_link</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* print per-port info to dmesg */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xfer_mask\">xfer_mask</a> = <a class=\"id\" href=\"#ata_pack_xfermask\">ata_pack_xfermask</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#pio_mask\">pio_mask</a>, <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#mwdma_mask\">mwdma_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#udma_mask\">udma_mask</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ata_port_is_dummy\">ata_port_is_dummy</a>(<a class=\"id\" href=\"#ap\">ap</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_port_printk\">ata_port_printk</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"%cATA max %s %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_FLAG_SATA\">ATA_FLAG_SATA</a>) ? 'S' : 'P',", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_mode_string\">ata_mode_string</a>(<a class=\"id\" href=\"#xfer_mask\">xfer_mask</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#link\">link</a>.<a class=\"id\" href=\"#eh_info\">eh_info</a>.<a class=\"id\" href=\"#desc\">desc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_ehi_clear_desc\">ata_ehi_clear_desc</a>(&amp;<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#link\">link</a>.<a class=\"id\" href=\"#eh_info\">eh_info</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_port_printk\">ata_port_printk</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>, \"DUMMY\\n\");", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* perform each probe asynchronously */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#n_ports\">n_ports</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#ports\">ports</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#async_schedule\">async_schedule</a>(<a class=\"id\" href=\"#async_port_probe\">async_port_probe</a>, <a class=\"id\" href=\"#ap\">ap</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_host_activate - start host, request IRQ and register it</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@host: target ATA host</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@irq: IRQ to request</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@irq_handler: irq_handler used when requesting IRQ</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@irq_flags: irq_flags used when requesting IRQ</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sht: scsi_host_template to use when registering the host</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>After allocating an ATA host and initializing it, most libata</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LLDs perform three steps to activate the host - start host,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>request IRQ and register it.  This helper takes necessasry</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>arguments and performs the three steps in one go.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>An invalid IRQ skips the IRQ registration and expects the host to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>have set polling mode on the port. In this case, @irq_handler</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>should be NULL.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Inherited from calling layer (may sleep).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0 on success, -errno otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ata_host_activate\">ata_host_activate</a>(struct <a class=\"id\" href=\"#ata_host\">ata_host</a> *<a class=\"id\" href=\"#host\">host</a>, int <a class=\"id\" href=\"#irq\">irq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#irq_handler_t\">irq_handler_t</a> <a class=\"id\" href=\"#irq_handler\">irq_handler</a>, unsigned long <a class=\"id\" href=\"#irq_flags\">irq_flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#scsi_host_template\">scsi_host_template</a> *<a class=\"id\" href=\"#sht\">sht</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ata_host_start\">ata_host_start</a>(<a class=\"id\" href=\"#host\">host</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Special case for polling mode */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#irq\">irq</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#irq_handler\">irq_handler</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ata_host_register\">ata_host_register</a>(<a class=\"id\" href=\"#host\">host</a>, <a class=\"id\" href=\"#sht\">sht</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#devm_request_irq\">devm_request_irq</a>(<a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#irq_handler\">irq_handler</a>, <a class=\"id\" href=\"#irq_flags\">irq_flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#dev_driver_string\">dev_driver_string</a>(<a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#dev\">dev</a>), <a class=\"id\" href=\"#host\">host</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#n_ports\">n_ports</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_port_desc\">ata_port_desc</a>(<a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#ports\">ports</a>[<a class=\"id\" href=\"#i\">i</a>], \"irq %d\", <a class=\"id\" href=\"#irq\">irq</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ata_host_register\">ata_host_register</a>(<a class=\"id\" href=\"#host\">host</a>, <a class=\"id\" href=\"#sht\">sht</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* if failed, just free the IRQ and leave ports alone */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#devm_free_irq\">devm_free_irq</a>(<a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#host\">host</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_port_detach - Detach ATA port in prepration of device removal</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ap: ATA port to be detached</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Detach all ATA devices and the associated SCSI devices of @ap;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>then, remove the associated SCSI host.  @ap is guaranteed to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>be quiescent on return from this function.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Kernel thread context (may sleep).</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#ata_port_detach\">ata_port_detach</a>(struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#error_handler\">error_handler</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#skip_eh\">skip_eh</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* tell EH we're leaving &amp; flush EH */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#pflags\">pflags</a> |= <a class=\"id\" href=\"#ATA_PFLAG_UNLOADING\">ATA_PFLAG_UNLOADING</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_port_schedule_eh\">ata_port_schedule_eh</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* wait till EH commits suicide */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_port_wait_eh\">ata_port_wait_eh</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* it better be dead now */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#pflags\">pflags</a> &amp; <a class=\"id\" href=\"#ATA_PFLAG_UNLOADED\">ATA_PFLAG_UNLOADED</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cancel_rearming_delayed_work\">cancel_rearming_delayed_work</a>(&amp;<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#hotplug_task\">hotplug_task</a>);", 
"", 
" <a class=\"id\" href=\"#skip_eh\">skip_eh</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* remove the associated SCSI host */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_remove_host\">scsi_remove_host</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#scsi_host\">scsi_host</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_host_detach - Detach all ports of an ATA host</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@host: Host to detach</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Detach all ports of @host.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Kernel thread context (may sleep).</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ata_host_detach\">ata_host_detach</a>(struct <a class=\"id\" href=\"#ata_host\">ata_host</a> *<a class=\"id\" href=\"#host\">host</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#n_ports\">n_ports</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_port_detach\">ata_port_detach</a>(<a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#ports\">ports</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* the host is dead now, dissociate ACPI */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_acpi_dissociate\">ata_acpi_dissociate</a>(<a class=\"id\" href=\"#host\">host</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PCI\">CONFIG_PCI</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_pci_remove_one - PCI layer callback for device removal</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@pdev: PCI device that was removed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>PCI layer indicates to libata via this hook that hot-unplug or</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>module unload event has occurred.  Detach all ports.  Resource</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>release is handled via devres.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Inherited from PCI layer (may sleep).</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ata_pci_remove_one\">ata_pci_remove_one</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a> = &amp;<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_host\">ata_host</a> *<a class=\"id\" href=\"#host\">host</a> = <a class=\"id\" href=\"#dev_get_drvdata\">dev_get_drvdata</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_host_detach\">ata_host_detach</a>(<a class=\"id\" href=\"#host\">host</a>);", 
"}", 
"", 
"<span class=\"comment\">/* move to PCI subsystem */</span>", 
"int <a class=\"id\" href=\"#pci_test_config_bits\">pci_test_config_bits</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>, const struct <a class=\"id\" href=\"#pci_bits\">pci_bits</a> *<a class=\"id\" href=\"#bits\">bits</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#tmp\">tmp</a> = 0;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#bits\">bits</a>-><a class=\"id\" href=\"#width\">width</a>) {", 
"<span class=\"ts\"/>case 1: {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#tmp8\">tmp8</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_byte\">pci_read_config_byte</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#bits\">bits</a>-><a class=\"id\" href=\"#reg\">reg</a>, &amp;<a class=\"id\" href=\"#tmp8\">tmp8</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#tmp8\">tmp8</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>case 2: {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#tmp16\">tmp16</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#bits\">bits</a>-><a class=\"id\" href=\"#reg\">reg</a>, &amp;<a class=\"id\" href=\"#tmp16\">tmp16</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#tmp16\">tmp16</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>case 4: {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#tmp32\">tmp32</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#bits\">bits</a>-><a class=\"id\" href=\"#reg\">reg</a>, &amp;<a class=\"id\" href=\"#tmp32\">tmp32</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#tmp32\">tmp32</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> &= <a class=\"id\" href=\"#bits\">bits</a>-><a class=\"id\" href=\"#mask\">mask</a>;", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#tmp\">tmp</a> == <a class=\"id\" href=\"#bits\">bits</a>-><a class=\"id\" href=\"#val\">val</a>) ? 1 : 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PM\">CONFIG_PM</a>", 
"void <a class=\"id\" href=\"#ata_pci_device_do_suspend\">ata_pci_device_do_suspend</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#pm_message_t\">pm_message_t</a> <a class=\"id\" href=\"#mesg\">mesg</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_save_state\">pci_save_state</a>(<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_disable_device\">pci_disable_device</a>(<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mesg\">mesg</a>.<a class=\"id\" href=\"#event\">event</a> &amp; <a class=\"id\" href=\"#PM_EVENT_SLEEP\">PM_EVENT_SLEEP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_set_power_state\">pci_set_power_state</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#PCI_D3hot\">PCI_D3hot</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#ata_pci_device_do_resume\">ata_pci_device_do_resume</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_set_power_state\">pci_set_power_state</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#PCI_D0\">PCI_D0</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_restore_state\">pci_restore_state</a>(<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#pcim_enable_device\">pcim_enable_device</a>(<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_printk\">dev_printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>, &amp;<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"failed to enable device after resume (%d)\\n\", <a class=\"id\" href=\"#rc\">rc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_set_master\">pci_set_master</a>(<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#ata_pci_device_suspend\">ata_pci_device_suspend</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#pm_message_t\">pm_message_t</a> <a class=\"id\" href=\"#mesg\">mesg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_host\">ata_host</a> *<a class=\"id\" href=\"#host\">host</a> = <a class=\"id\" href=\"#dev_get_drvdata\">dev_get_drvdata</a>(&amp;<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ata_host_suspend\">ata_host_suspend</a>(<a class=\"id\" href=\"#host\">host</a>, <a class=\"id\" href=\"#mesg\">mesg</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_pci_device_do_suspend\">ata_pci_device_do_suspend</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#mesg\">mesg</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#ata_pci_device_resume\">ata_pci_device_resume</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_host\">ata_host</a> *<a class=\"id\" href=\"#host\">host</a> = <a class=\"id\" href=\"#dev_get_drvdata\">dev_get_drvdata</a>(&amp;<a class=\"id\" href=\"#pdev\">pdev</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ata_pci_device_do_resume\">ata_pci_device_do_resume</a>(<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_host_resume\">ata_host_resume</a>(<a class=\"id\" href=\"#host\">host</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PM */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PCI */</span>", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#ata_parse_force_one\">ata_parse_force_one</a>(char **<a class=\"id\" href=\"#cur\">cur</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#ata_force_ent\">ata_force_ent</a> *<a class=\"id\" href=\"#force_ent\">force_ent</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      const char **<a class=\"id\" href=\"#reason\">reason</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* FIXME: Currently, there's no way to tag init const data and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * using __initdata causes build failure on some versions of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * gcc.  Once __initdataconst is implemented, add const to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * following structure.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>static struct <a class=\"id\" href=\"#ata_force_param\">ata_force_param</a> <a class=\"id\" href=\"#force_tbl\">force_tbl</a>[] <a class=\"id\" href=\"#__initdata\">__initdata</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"40c\",<span class=\"ts\"/>.<a class=\"id\" href=\"#cbl\">cbl</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ATA_CBL_PATA40\">ATA_CBL_PATA40</a> },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"80c\",<span class=\"ts\"/>.<a class=\"id\" href=\"#cbl\">cbl</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ATA_CBL_PATA80\">ATA_CBL_PATA80</a> },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"short40c\",<span class=\"ts\"/>.<a class=\"id\" href=\"#cbl\">cbl</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ATA_CBL_PATA40_SHORT\">ATA_CBL_PATA40_SHORT</a> },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"unk\",<span class=\"ts\"/>.<a class=\"id\" href=\"#cbl\">cbl</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ATA_CBL_PATA_UNK\">ATA_CBL_PATA_UNK</a> },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"ign\",<span class=\"ts\"/>.<a class=\"id\" href=\"#cbl\">cbl</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ATA_CBL_PATA_IGN\">ATA_CBL_PATA_IGN</a> },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"sata\",<span class=\"ts\"/>.<a class=\"id\" href=\"#cbl\">cbl</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ATA_CBL_SATA\">ATA_CBL_SATA</a> },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"1.5Gbps\",<span class=\"ts\"/>.<a class=\"id\" href=\"#spd_limit\">spd_limit</a><span class=\"ts\"/>= 1 },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"3.0Gbps\",<span class=\"ts\"/>.<a class=\"id\" href=\"#spd_limit\">spd_limit</a><span class=\"ts\"/>= 2 },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"noncq\",<span class=\"ts\"/>.<a class=\"id\" href=\"#horkage_on\">horkage_on</a><span class=\"ts\"/>= <a class=\"id\" href=\"#ATA_HORKAGE_NONCQ\">ATA_HORKAGE_NONCQ</a> },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"ncq\",<span class=\"ts\"/>.<a class=\"id\" href=\"#horkage_off\">horkage_off</a><span class=\"ts\"/>= <a class=\"id\" href=\"#ATA_HORKAGE_NONCQ\">ATA_HORKAGE_NONCQ</a> },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"dump_id\",<span class=\"ts\"/>.<a class=\"id\" href=\"#horkage_on\">horkage_on</a><span class=\"ts\"/>= <a class=\"id\" href=\"#ATA_HORKAGE_DUMP_ID\">ATA_HORKAGE_DUMP_ID</a> },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"pio0\",<span class=\"ts\"/>.<a class=\"id\" href=\"#xfer_mask\">xfer_mask</a><span class=\"ts\"/>= 1 << (<a class=\"id\" href=\"#ATA_SHIFT_PIO\">ATA_SHIFT_PIO</a> + 0) },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"pio1\",<span class=\"ts\"/>.<a class=\"id\" href=\"#xfer_mask\">xfer_mask</a><span class=\"ts\"/>= 1 << (<a class=\"id\" href=\"#ATA_SHIFT_PIO\">ATA_SHIFT_PIO</a> + 1) },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"pio2\",<span class=\"ts\"/>.<a class=\"id\" href=\"#xfer_mask\">xfer_mask</a><span class=\"ts\"/>= 1 << (<a class=\"id\" href=\"#ATA_SHIFT_PIO\">ATA_SHIFT_PIO</a> + 2) },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"pio3\",<span class=\"ts\"/>.<a class=\"id\" href=\"#xfer_mask\">xfer_mask</a><span class=\"ts\"/>= 1 << (<a class=\"id\" href=\"#ATA_SHIFT_PIO\">ATA_SHIFT_PIO</a> + 3) },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"pio4\",<span class=\"ts\"/>.<a class=\"id\" href=\"#xfer_mask\">xfer_mask</a><span class=\"ts\"/>= 1 << (<a class=\"id\" href=\"#ATA_SHIFT_PIO\">ATA_SHIFT_PIO</a> + 4) },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"pio5\",<span class=\"ts\"/>.<a class=\"id\" href=\"#xfer_mask\">xfer_mask</a><span class=\"ts\"/>= 1 << (<a class=\"id\" href=\"#ATA_SHIFT_PIO\">ATA_SHIFT_PIO</a> + 5) },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"pio6\",<span class=\"ts\"/>.<a class=\"id\" href=\"#xfer_mask\">xfer_mask</a><span class=\"ts\"/>= 1 << (<a class=\"id\" href=\"#ATA_SHIFT_PIO\">ATA_SHIFT_PIO</a> + 6) },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"mwdma0\",<span class=\"ts\"/>.<a class=\"id\" href=\"#xfer_mask\">xfer_mask</a><span class=\"ts\"/>= 1 << (<a class=\"id\" href=\"#ATA_SHIFT_MWDMA\">ATA_SHIFT_MWDMA</a> + 0) },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"mwdma1\",<span class=\"ts\"/>.<a class=\"id\" href=\"#xfer_mask\">xfer_mask</a><span class=\"ts\"/>= 1 << (<a class=\"id\" href=\"#ATA_SHIFT_MWDMA\">ATA_SHIFT_MWDMA</a> + 1) },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"mwdma2\",<span class=\"ts\"/>.<a class=\"id\" href=\"#xfer_mask\">xfer_mask</a><span class=\"ts\"/>= 1 << (<a class=\"id\" href=\"#ATA_SHIFT_MWDMA\">ATA_SHIFT_MWDMA</a> + 2) },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"mwdma3\",<span class=\"ts\"/>.<a class=\"id\" href=\"#xfer_mask\">xfer_mask</a><span class=\"ts\"/>= 1 << (<a class=\"id\" href=\"#ATA_SHIFT_MWDMA\">ATA_SHIFT_MWDMA</a> + 3) },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"mwdma4\",<span class=\"ts\"/>.<a class=\"id\" href=\"#xfer_mask\">xfer_mask</a><span class=\"ts\"/>= 1 << (<a class=\"id\" href=\"#ATA_SHIFT_MWDMA\">ATA_SHIFT_MWDMA</a> + 4) },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"udma0\",<span class=\"ts\"/>.<a class=\"id\" href=\"#xfer_mask\">xfer_mask</a><span class=\"ts\"/>= 1 << (<a class=\"id\" href=\"#ATA_SHIFT_UDMA\">ATA_SHIFT_UDMA</a> + 0) },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"udma16\",<span class=\"ts\"/>.<a class=\"id\" href=\"#xfer_mask\">xfer_mask</a><span class=\"ts\"/>= 1 << (<a class=\"id\" href=\"#ATA_SHIFT_UDMA\">ATA_SHIFT_UDMA</a> + 0) },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"udma/16\",<span class=\"ts\"/>.<a class=\"id\" href=\"#xfer_mask\">xfer_mask</a><span class=\"ts\"/>= 1 << (<a class=\"id\" href=\"#ATA_SHIFT_UDMA\">ATA_SHIFT_UDMA</a> + 0) },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"udma1\",<span class=\"ts\"/>.<a class=\"id\" href=\"#xfer_mask\">xfer_mask</a><span class=\"ts\"/>= 1 << (<a class=\"id\" href=\"#ATA_SHIFT_UDMA\">ATA_SHIFT_UDMA</a> + 1) },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"udma25\",<span class=\"ts\"/>.<a class=\"id\" href=\"#xfer_mask\">xfer_mask</a><span class=\"ts\"/>= 1 << (<a class=\"id\" href=\"#ATA_SHIFT_UDMA\">ATA_SHIFT_UDMA</a> + 1) },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"udma/25\",<span class=\"ts\"/>.<a class=\"id\" href=\"#xfer_mask\">xfer_mask</a><span class=\"ts\"/>= 1 << (<a class=\"id\" href=\"#ATA_SHIFT_UDMA\">ATA_SHIFT_UDMA</a> + 1) },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"udma2\",<span class=\"ts\"/>.<a class=\"id\" href=\"#xfer_mask\">xfer_mask</a><span class=\"ts\"/>= 1 << (<a class=\"id\" href=\"#ATA_SHIFT_UDMA\">ATA_SHIFT_UDMA</a> + 2) },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"udma33\",<span class=\"ts\"/>.<a class=\"id\" href=\"#xfer_mask\">xfer_mask</a><span class=\"ts\"/>= 1 << (<a class=\"id\" href=\"#ATA_SHIFT_UDMA\">ATA_SHIFT_UDMA</a> + 2) },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"udma/33\",<span class=\"ts\"/>.<a class=\"id\" href=\"#xfer_mask\">xfer_mask</a><span class=\"ts\"/>= 1 << (<a class=\"id\" href=\"#ATA_SHIFT_UDMA\">ATA_SHIFT_UDMA</a> + 2) },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"udma3\",<span class=\"ts\"/>.<a class=\"id\" href=\"#xfer_mask\">xfer_mask</a><span class=\"ts\"/>= 1 << (<a class=\"id\" href=\"#ATA_SHIFT_UDMA\">ATA_SHIFT_UDMA</a> + 3) },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"udma44\",<span class=\"ts\"/>.<a class=\"id\" href=\"#xfer_mask\">xfer_mask</a><span class=\"ts\"/>= 1 << (<a class=\"id\" href=\"#ATA_SHIFT_UDMA\">ATA_SHIFT_UDMA</a> + 3) },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"udma/44\",<span class=\"ts\"/>.<a class=\"id\" href=\"#xfer_mask\">xfer_mask</a><span class=\"ts\"/>= 1 << (<a class=\"id\" href=\"#ATA_SHIFT_UDMA\">ATA_SHIFT_UDMA</a> + 3) },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"udma4\",<span class=\"ts\"/>.<a class=\"id\" href=\"#xfer_mask\">xfer_mask</a><span class=\"ts\"/>= 1 << (<a class=\"id\" href=\"#ATA_SHIFT_UDMA\">ATA_SHIFT_UDMA</a> + 4) },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"udma66\",<span class=\"ts\"/>.<a class=\"id\" href=\"#xfer_mask\">xfer_mask</a><span class=\"ts\"/>= 1 << (<a class=\"id\" href=\"#ATA_SHIFT_UDMA\">ATA_SHIFT_UDMA</a> + 4) },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"udma/66\",<span class=\"ts\"/>.<a class=\"id\" href=\"#xfer_mask\">xfer_mask</a><span class=\"ts\"/>= 1 << (<a class=\"id\" href=\"#ATA_SHIFT_UDMA\">ATA_SHIFT_UDMA</a> + 4) },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"udma5\",<span class=\"ts\"/>.<a class=\"id\" href=\"#xfer_mask\">xfer_mask</a><span class=\"ts\"/>= 1 << (<a class=\"id\" href=\"#ATA_SHIFT_UDMA\">ATA_SHIFT_UDMA</a> + 5) },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"udma100\",<span class=\"ts\"/>.<a class=\"id\" href=\"#xfer_mask\">xfer_mask</a><span class=\"ts\"/>= 1 << (<a class=\"id\" href=\"#ATA_SHIFT_UDMA\">ATA_SHIFT_UDMA</a> + 5) },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"udma/100\",<span class=\"ts\"/>.<a class=\"id\" href=\"#xfer_mask\">xfer_mask</a><span class=\"ts\"/>= 1 << (<a class=\"id\" href=\"#ATA_SHIFT_UDMA\">ATA_SHIFT_UDMA</a> + 5) },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"udma6\",<span class=\"ts\"/>.<a class=\"id\" href=\"#xfer_mask\">xfer_mask</a><span class=\"ts\"/>= 1 << (<a class=\"id\" href=\"#ATA_SHIFT_UDMA\">ATA_SHIFT_UDMA</a> + 6) },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"udma133\",<span class=\"ts\"/>.<a class=\"id\" href=\"#xfer_mask\">xfer_mask</a><span class=\"ts\"/>= 1 << (<a class=\"id\" href=\"#ATA_SHIFT_UDMA\">ATA_SHIFT_UDMA</a> + 6) },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"udma/133\",<span class=\"ts\"/>.<a class=\"id\" href=\"#xfer_mask\">xfer_mask</a><span class=\"ts\"/>= 1 << (<a class=\"id\" href=\"#ATA_SHIFT_UDMA\">ATA_SHIFT_UDMA</a> + 6) },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"udma7\",<span class=\"ts\"/>.<a class=\"id\" href=\"#xfer_mask\">xfer_mask</a><span class=\"ts\"/>= 1 << (<a class=\"id\" href=\"#ATA_SHIFT_UDMA\">ATA_SHIFT_UDMA</a> + 7) },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"nohrst\",<span class=\"ts\"/>.<a class=\"id\" href=\"#lflags\">lflags</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ATA_LFLAG_NO_HRST\">ATA_LFLAG_NO_HRST</a> },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"nosrst\",<span class=\"ts\"/>.<a class=\"id\" href=\"#lflags\">lflags</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ATA_LFLAG_NO_SRST\">ATA_LFLAG_NO_SRST</a> },", 
"<span class=\"ts\"/><span class=\"ts\"/>{ \"norst\",<span class=\"ts\"/>.<a class=\"id\" href=\"#lflags\">lflags</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ATA_LFLAG_NO_HRST\">ATA_LFLAG_NO_HRST</a> | <a class=\"id\" href=\"#ATA_LFLAG_NO_SRST\">ATA_LFLAG_NO_SRST</a> },", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#start\">start</a> = *<a class=\"id\" href=\"#cur\">cur</a>, *<a class=\"id\" href=\"#p\">p</a> = *<a class=\"id\" href=\"#cur\">cur</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#id\">id</a>, *<a class=\"id\" href=\"#val\">val</a>, *<a class=\"id\" href=\"#endp\">endp</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#ata_force_param\">ata_force_param</a> *<a class=\"id\" href=\"#match_fp\">match_fp</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_matches\">nr_matches</a> = 0, <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* find where this param ends and update *cur */</span>", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#p\">p</a> != '\\0' && *<a class=\"id\" href=\"#p\">p</a> != ',')", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>++;", 
"", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#p\">p</a> == '\\0')", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#p\">p</a> + 1;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a> = '\\0';", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* parse */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#strchr\">strchr</a>(<a class=\"id\" href=\"#start\">start</a>, ':');", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#strstrip\">strstrip</a>(<a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#parse_val\">parse_val</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a> = '\\0';", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#strstrip\">strstrip</a>(<a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#strstrip\">strstrip</a>(<a class=\"id\" href=\"#p\">p</a> + 1);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* parse id */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#strchr\">strchr</a>(<a class=\"id\" href=\"#id\">id</a>, '.');", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a>++ = '\\0';", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#force_ent\">force_ent</a>-><a class=\"id\" href=\"#device\">device</a> = <a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#endp\">endp</a>, 10);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> == <a class=\"id\" href=\"#endp\">endp</a> || *<a class=\"id\" href=\"#endp\">endp</a> != '\\0') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#reason\">reason</a> = \"invalid device\";", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#force_ent\">force_ent</a>-><a class=\"id\" href=\"#port\">port</a> = <a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#id\">id</a>, &amp;<a class=\"id\" href=\"#endp\">endp</a>, 10);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> == <a class=\"id\" href=\"#endp\">endp</a> || *<a class=\"id\" href=\"#endp\">endp</a> != '\\0') {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#reason\">reason</a> = \"invalid port/link\";", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
" <a class=\"id\" href=\"#parse_val\">parse_val</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* parse val, allow shortcuts so that both 1.5 and 1.5Gbps work */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#force_tbl\">force_tbl</a>); <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#ata_force_param\">ata_force_param</a> *<a class=\"id\" href=\"#fp\">fp</a> = &amp;<a class=\"id\" href=\"#force_tbl\">force_tbl</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strncasecmp\">strncasecmp</a>(<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#fp\">fp</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#val\">val</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_matches\">nr_matches</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#match_fp\">match_fp</a> = <a class=\"id\" href=\"#fp\">fp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strcasecmp\">strcasecmp</a>(<a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#fp\">fp</a>-><a class=\"id\" href=\"#name\">name</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_matches\">nr_matches</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#nr_matches\">nr_matches</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#reason\">reason</a> = \"unknown value\";", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_matches\">nr_matches</a> &gt; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#reason\">reason</a> = \"ambigious value\";", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#force_ent\">force_ent</a>-><a class=\"id\" href=\"#param\">param</a> = *<a class=\"id\" href=\"#match_fp\">match_fp</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#ata_parse_force_param\">ata_parse_force_param</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#idx\">idx</a> = 0, <a class=\"id\" href=\"#size\">size</a> = 1;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#last_port\">last_port</a> = -1, <a class=\"id\" href=\"#last_device\">last_device</a> = -1;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#p\">p</a>, *<a class=\"id\" href=\"#cur\">cur</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* calculate maximum number of params and allocate force_tbl */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#ata_force_param_buf\">ata_force_param_buf</a>; *<a class=\"id\" href=\"#p\">p</a>; <a class=\"id\" href=\"#p\">p</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#p\">p</a> == ',')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a>++;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_force_tbl\">ata_force_tbl</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(<a class=\"id\" href=\"#ata_force_tbl\">ata_force_tbl</a>[0]) * <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ata_force_tbl\">ata_force_tbl</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"ata: failed to extend force table, \"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"libata.force ignored\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* parse and populate the table */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#ata_force_param_buf\">ata_force_param_buf</a>; *<a class=\"id\" href=\"#cur\">cur</a> != '\\0'; <a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#reason\">reason</a> = \"\";", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_force_ent\">ata_force_ent</a> <a class=\"id\" href=\"#te\">te</a> = { .<a class=\"id\" href=\"#port\">port</a> = -1, .<a class=\"id\" href=\"#device\">device</a> = -1 };", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#cur\">cur</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_parse_force_one\">ata_parse_force_one</a>(&amp;<a class=\"id\" href=\"#next\">next</a>, &amp;<a class=\"id\" href=\"#te\">te</a>, &amp;<a class=\"id\" href=\"#reason\">reason</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"ata: failed to parse force \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"parameter \\\"%s\\\" (%s)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#cur\">cur</a>, <a class=\"id\" href=\"#reason\">reason</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#te\">te</a>.<a class=\"id\" href=\"#port\">port</a> == -1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#te\">te</a>.<a class=\"id\" href=\"#port\">port</a> = <a class=\"id\" href=\"#last_port\">last_port</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#te\">te</a>.<a class=\"id\" href=\"#device\">device</a> = <a class=\"id\" href=\"#last_device\">last_device</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_force_tbl\">ata_force_tbl</a>[<a class=\"id\" href=\"#idx\">idx</a>++] = <a class=\"id\" href=\"#te\">te</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_port\">last_port</a> = <a class=\"id\" href=\"#te\">te</a>.<a class=\"id\" href=\"#port\">port</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_device\">last_device</a> = <a class=\"id\" href=\"#te\">te</a>.<a class=\"id\" href=\"#device\">device</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_force_tbl_size\">ata_force_tbl_size</a> = <a class=\"id\" href=\"#idx\">idx</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#ata_init\">ata_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_parse_force_param\">ata_parse_force_param</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ata_sff_init\">ata_sff_init</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ata_force_tbl\">ata_force_tbl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"libata version \" <a class=\"id\" href=\"#DRV_VERSION\">DRV_VERSION</a> \" loaded.\\n\");", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__exit\">__exit</a> <a class=\"id\" href=\"#ata_exit\">ata_exit</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_sff_exit\">ata_sff_exit</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ata_force_tbl\">ata_force_tbl</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#subsys_initcall\">subsys_initcall</a>(<a class=\"id\" href=\"#ata_init\">ata_init</a>);", 
"<a class=\"id\" href=\"#module_exit\">module_exit</a>(<a class=\"id\" href=\"#ata_exit\">ata_exit</a>);", 
"", 
"static <a class=\"id\" href=\"#DEFINE_RATELIMIT_STATE\">DEFINE_RATELIMIT_STATE</a>(<a class=\"id\" href=\"#ratelimit\">ratelimit</a>, <a class=\"id\" href=\"#HZ\">HZ</a> / 5, 1);", 
"", 
"int <a class=\"id\" href=\"#ata_ratelimit\">ata_ratelimit</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__ratelimit\">__ratelimit</a>(&amp;<a class=\"id\" href=\"#ratelimit\">ratelimit</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_wait_register - wait until register value changes</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@reg: IO-mapped register</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@mask: Mask to apply to read register value</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@val: Wait condition</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@interval: polling interval in milliseconds</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@timeout: timeout in milliseconds</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Waiting for some bits of register to change is a common</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>operation for ATA controllers.  This function reads 32bit LE</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>IO-mapped register @reg and tests for the following condition.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(*@reg &amp; mask) != val</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If the condition is met, it returns; otherwise, the process is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>repeated after @interval_msec until timeout.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Kernel thread context (may sleep)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The final register value.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#ata_wait_register\">ata_wait_register</a>(void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#reg\">reg</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#val\">val</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#interval\">interval</a>, unsigned long <a class=\"id\" href=\"#timeout\">timeout</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#deadline\">deadline</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#ioread32\">ioread32</a>(<a class=\"id\" href=\"#reg\">reg</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Calculate timeout _after_ the first read to make sure</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * preceding writes reach the controller before starting to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * eat away the timeout.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#deadline\">deadline</a> = <a class=\"id\" href=\"#ata_deadline\">ata_deadline</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#timeout\">timeout</a>);", 
"", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#tmp\">tmp</a> &amp; <a class=\"id\" href=\"#mask\">mask</a>) == <a class=\"id\" href=\"#val\">val</a> && <a class=\"id\" href=\"#time_before\">time_before</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#deadline\">deadline</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>(<a class=\"id\" href=\"#interval\">interval</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#ioread32\">ioread32</a>(<a class=\"id\" href=\"#reg\">reg</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Dummy port_ops</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned int <a class=\"id\" href=\"#ata_dummy_qc_issue\">ata_dummy_qc_issue</a>(struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#AC_ERR_SYSTEM\">AC_ERR_SYSTEM</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ata_dummy_error_handler\">ata_dummy_error_handler</a>(struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* truly dummy */</span>", 
"}", 
"", 
"struct <a class=\"id\" href=\"#ata_port_operations\">ata_port_operations</a> <a class=\"id\" href=\"#ata_dummy_port_ops\">ata_dummy_port_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#qc_prep\">qc_prep</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ata_noop_qc_prep\">ata_noop_qc_prep</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#qc_issue\">qc_issue</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ata_dummy_qc_issue\">ata_dummy_qc_issue</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#error_handler\">error_handler</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ata_dummy_error_handler\">ata_dummy_error_handler</a>,", 
"};", 
"", 
"const struct <a class=\"id\" href=\"#ata_port_info\">ata_port_info</a> <a class=\"id\" href=\"#ata_dummy_port_info\">ata_dummy_port_info</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#port_ops\">port_ops</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#ata_dummy_port_ops\">ata_dummy_port_ops</a>,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * libata is essentially a library of internal helper functions for</span>", 
"<span class=\"comment\"> * low-level ATA host controller drivers.  As such, the API/ABI is</span>", 
"<span class=\"comment\"> * likely to change as new drivers are added and updated.</span>", 
"<span class=\"comment\"> * Do not depend on ABI/API stability.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#sata_deb_timing_normal\">sata_deb_timing_normal</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#sata_deb_timing_hotplug\">sata_deb_timing_hotplug</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#sata_deb_timing_long\">sata_deb_timing_long</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_base_port_ops\">ata_base_port_ops</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#sata_port_ops\">sata_port_ops</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_dummy_port_ops\">ata_dummy_port_ops</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_dummy_port_info\">ata_dummy_port_info</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_link_next\">ata_link_next</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_dev_next\">ata_dev_next</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_std_bios_param\">ata_std_bios_param</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_scsi_unlock_native_capacity\">ata_scsi_unlock_native_capacity</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_host_init\">ata_host_init</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_host_alloc\">ata_host_alloc</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_host_alloc_pinfo\">ata_host_alloc_pinfo</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_slave_link_init\">ata_slave_link_init</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_host_start\">ata_host_start</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_host_register\">ata_host_register</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_host_activate\">ata_host_activate</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_host_detach\">ata_host_detach</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_sg_init\">ata_sg_init</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_qc_complete\">ata_qc_complete</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_qc_complete_multiple\">ata_qc_complete_multiple</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#atapi_cmd_type\">atapi_cmd_type</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_tf_to_fis\">ata_tf_to_fis</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_tf_from_fis\">ata_tf_from_fis</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_pack_xfermask\">ata_pack_xfermask</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_unpack_xfermask\">ata_unpack_xfermask</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_xfer_mask2mode\">ata_xfer_mask2mode</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_xfer_mode2mask\">ata_xfer_mode2mask</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_xfer_mode2shift\">ata_xfer_mode2shift</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_mode_string\">ata_mode_string</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_id_xfermask\">ata_id_xfermask</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_do_set_mode\">ata_do_set_mode</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_std_qc_defer\">ata_std_qc_defer</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_noop_qc_prep\">ata_noop_qc_prep</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_dev_disable\">ata_dev_disable</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#sata_set_spd\">sata_set_spd</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_wait_after_reset\">ata_wait_after_reset</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#sata_link_debounce\">sata_link_debounce</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#sata_link_resume\">sata_link_resume</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_std_prereset\">ata_std_prereset</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#sata_link_hardreset\">sata_link_hardreset</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#sata_std_hardreset\">sata_std_hardreset</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_std_postreset\">ata_std_postreset</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_dev_classify\">ata_dev_classify</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_dev_pair\">ata_dev_pair</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_ratelimit\">ata_ratelimit</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_wait_register\">ata_wait_register</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_scsi_queuecmd\">ata_scsi_queuecmd</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_scsi_slave_config\">ata_scsi_slave_config</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_scsi_slave_destroy\">ata_scsi_slave_destroy</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_scsi_change_queue_depth\">ata_scsi_change_queue_depth</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#sata_scr_valid\">sata_scr_valid</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#sata_scr_read\">sata_scr_read</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#sata_scr_write\">sata_scr_write</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#sata_scr_write_flush\">sata_scr_write_flush</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_link_online\">ata_link_online</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_link_offline\">ata_link_offline</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PM\">CONFIG_PM</a>", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_host_suspend\">ata_host_suspend</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_host_resume\">ata_host_resume</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PM */</span>", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_id_string\">ata_id_string</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_id_c_string\">ata_id_c_string</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_do_dev_read_id\">ata_do_dev_read_id</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_scsi_simulate\">ata_scsi_simulate</a>);", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_pio_need_iordy\">ata_pio_need_iordy</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_timing_find_mode\">ata_timing_find_mode</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_timing_compute\">ata_timing_compute</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_timing_merge\">ata_timing_merge</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_timing_cycle2mode\">ata_timing_cycle2mode</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PCI\">CONFIG_PCI</a>", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#pci_test_config_bits\">pci_test_config_bits</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_pci_remove_one\">ata_pci_remove_one</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PM\">CONFIG_PM</a>", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_pci_device_do_suspend\">ata_pci_device_do_suspend</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_pci_device_do_resume\">ata_pci_device_do_resume</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_pci_device_suspend\">ata_pci_device_suspend</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_pci_device_resume\">ata_pci_device_resume</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PM */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PCI */</span>", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__ata_ehi_push_desc\">__ata_ehi_push_desc</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_ehi_push_desc\">ata_ehi_push_desc</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_ehi_clear_desc\">ata_ehi_clear_desc</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_port_desc\">ata_port_desc</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PCI\">CONFIG_PCI</a>", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_port_pbar_desc\">ata_port_pbar_desc</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PCI */</span>", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_port_schedule_eh\">ata_port_schedule_eh</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_link_abort\">ata_link_abort</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_port_abort\">ata_port_abort</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_port_freeze\">ata_port_freeze</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#sata_async_notification\">sata_async_notification</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_eh_freeze_port\">ata_eh_freeze_port</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_eh_thaw_port\">ata_eh_thaw_port</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_eh_qc_complete\">ata_eh_qc_complete</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_eh_qc_retry\">ata_eh_qc_retry</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_eh_analyze_ncq_error\">ata_eh_analyze_ncq_error</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_do_eh\">ata_do_eh</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_std_error_handler\">ata_std_error_handler</a>);", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_cable_40wire\">ata_cable_40wire</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_cable_80wire\">ata_cable_80wire</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_cable_unknown\">ata_cable_unknown</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_cable_ignore\">ata_cable_ignore</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ata_cable_sata\">ata_cable_sata</a>);", 
];
xr_frag_insert('l/0f/c5b17818266d019df94a759d41e756e4724717.xr', __xr_tmp);
