var __xr_tmp = [
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#action\">action</a> != <a class=\"id\" href=\"#CPU_DEAD\">CPU_DEAD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_OK\">NOTIFY_OK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stock\">stock</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#memcg_stock\">memcg_stock</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#drain_stock\">drain_stock</a>(<a class=\"id\" href=\"#stock\">stock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_OK\">NOTIFY_OK</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/* See __mem_cgroup_try_charge() for details */</span>", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CHARGE_OK\">CHARGE_OK</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* success */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CHARGE_RETRY\">CHARGE_RETRY</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* need to retry but retry is not bad */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CHARGE_NOMEM\">CHARGE_NOMEM</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we can't do more. return -ENOMEM */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CHARGE_WOULDBLOCK\">CHARGE_WOULDBLOCK</a>,<span class=\"ts\"/><span class=\"comment\">/* GFP_WAIT wasn't set and no enough res. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#CHARGE_OOM_DIE\">CHARGE_OOM_DIE</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* the current is killed because of OOM */</span>", 
"};", 
"", 
"static int <a class=\"id\" href=\"#__mem_cgroup_do_charge\">__mem_cgroup_do_charge</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#csize\">csize</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#oom_check\">oom_check</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem_over_limit\">mem_over_limit</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#res_counter\">res_counter</a> *<a class=\"id\" href=\"#fail_res\">fail_res</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#res_counter_charge\">res_counter_charge</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#csize\">csize</a>, &amp;<a class=\"id\" href=\"#fail_res\">fail_res</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#ret\">ret</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#do_swap_account\">do_swap_account</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#CHARGE_OK\">CHARGE_OK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#res_counter_charge\">res_counter_charge</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#memsw\">memsw</a>, <a class=\"id\" href=\"#csize\">csize</a>, &amp;<a class=\"id\" href=\"#fail_res\">fail_res</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#ret\">ret</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#CHARGE_OK\">CHARGE_OK</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_over_limit\">mem_over_limit</a> = <a class=\"id\" href=\"#mem_cgroup_from_res_counter\">mem_cgroup_from_res_counter</a>(<a class=\"id\" href=\"#fail_res\">fail_res</a>, <a class=\"id\" href=\"#memsw\">memsw</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#MEM_CGROUP_RECLAIM_NOSWAP\">MEM_CGROUP_RECLAIM_NOSWAP</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem_over_limit\">mem_over_limit</a> = <a class=\"id\" href=\"#mem_cgroup_from_res_counter\">mem_cgroup_from_res_counter</a>(<a class=\"id\" href=\"#fail_res\">fail_res</a>, <a class=\"id\" href=\"#res\">res</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#csize\">csize</a> &gt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>) <span class=\"comment\">/* change csize and retry */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#CHARGE_RETRY\">CHARGE_RETRY</a>;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#__GFP_WAIT\">__GFP_WAIT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#CHARGE_WOULDBLOCK\">CHARGE_WOULDBLOCK</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#mem_cgroup_hierarchical_reclaim\">mem_cgroup_hierarchical_reclaim</a>(<a class=\"id\" href=\"#mem_over_limit\">mem_over_limit</a>, <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * try_to_free_mem_cgroup_pages() might not give us a full</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * picture of reclaim. Some pages are reclaimed and might be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * moved to swap cache or just unmapped from the cgroup.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check the limit again to see if the reclaim reduced the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * current usage of the cgroup before giving up</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> || <a class=\"id\" href=\"#mem_cgroup_check_under_limit\">mem_cgroup_check_under_limit</a>(<a class=\"id\" href=\"#mem_over_limit\">mem_over_limit</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#CHARGE_RETRY\">CHARGE_RETRY</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * At task move, charge accounts can be doubly counted. So, it's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * better to wait until the end of task_move if something is going on.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mem_cgroup_wait_acct_move\">mem_cgroup_wait_acct_move</a>(<a class=\"id\" href=\"#mem_over_limit\">mem_over_limit</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#CHARGE_RETRY\">CHARGE_RETRY</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If we don't need to call oom-killer at el, return immediately */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#oom_check\">oom_check</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#CHARGE_NOMEM\">CHARGE_NOMEM</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* check OOM */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mem_cgroup_handle_oom\">mem_cgroup_handle_oom</a>(<a class=\"id\" href=\"#mem_over_limit\">mem_over_limit</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#CHARGE_OOM_DIE\">CHARGE_OOM_DIE</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#CHARGE_RETRY\">CHARGE_RETRY</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Unlike exported interface, \"oom\" parameter is added. if oom==true,</span>", 
"<span class=\"comment\"> * oom-killer can be invoked.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__mem_cgroup_try_charge\">__mem_cgroup_try_charge</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> **<a class=\"id\" href=\"#memcg\">memcg</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#oom\">oom</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_oom_retries\">nr_oom_retries</a> = <a class=\"id\" href=\"#MEM_CGROUP_RECLAIM_RETRIES\">MEM_CGROUP_RECLAIM_RETRIES</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#csize\">csize</a> = <a class=\"id\" href=\"#CHARGE_SIZE\">CHARGE_SIZE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Unlike gloval-vm's OOM-kill, we're not in memory shortage</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in system level. So, allow to go ahead dying process in addition to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * MEMDIE process.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#test_thread_flag\">test_thread_flag</a>(<a class=\"id\" href=\"#TIF_MEMDIE\">TIF_MEMDIE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>     || <a class=\"id\" href=\"#fatal_signal_pending\">fatal_signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bypass\">bypass</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We always charge the cgroup the mm_struct belongs to.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The mm_struct's mem_cgroup changes on task migration if the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * thread group leader migrates. It's possible that mm is not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * set, if so charge the init_mm (happens for pagecache usage).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!*<a class=\"id\" href=\"#memcg\">memcg</a> && !<a class=\"id\" href=\"#mm\">mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bypass\">bypass</a>;", 
"<a class=\"id\" href=\"#again\">again</a>:", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#memcg\">memcg</a>) { <span class=\"comment\">/* css should be a valid one */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a> = *<a class=\"id\" href=\"#memcg\">memcg</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#css_is_removed\">css_is_removed</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#css\">css</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mem_cgroup_is_root\">mem_cgroup_is_root</a>(<a class=\"id\" href=\"#mem\">mem</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#consume_stock\">consume_stock</a>(<a class=\"id\" href=\"#mem\">mem</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#css_get\">css_get</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#css\">css</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#owner\">owner</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(!<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * because we don't have task_lock(), \"p\" can exit while</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we're here. In that case, \"mem\" can point to root</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * cgroup but never be NULL. (and task_struct itself is freed</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * by RCU, cgroup itself is RCU safe.) Then, we have small</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * risk here to get wrong cgroup. But such kind of mis-account</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * by race always happens because we don't have cgroup_mutex().</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * It's overkill and we allow that small race, here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#mem_cgroup_from_task\">mem_cgroup_from_task</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(!<a class=\"id\" href=\"#mem\">mem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mem_cgroup_is_root\">mem_cgroup_is_root</a>(<a class=\"id\" href=\"#mem\">mem</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#consume_stock\">consume_stock</a>(<a class=\"id\" href=\"#mem\">mem</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * It seems dagerous to access memcg without css_get().</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * But considering how consume_stok works, it's not</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * necessary. If consume_stock success, some charges</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * from this memcg are cached on this cpu. So, we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * don't need to call css_get()/css_tryget() before</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * calling consume_stock().</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* after here, we may be blocked. we need to get refcnt */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#css_tryget\">css_tryget</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#css\">css</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#oom_check\">oom_check</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If killed, bypass charge */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fatal_signal_pending\">fatal_signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#css_put\">css_put</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#css\">css</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bypass\">bypass</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#oom_check\">oom_check</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#oom\">oom</a> && !<a class=\"id\" href=\"#nr_oom_retries\">nr_oom_retries</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#oom_check\">oom_check</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_oom_retries\">nr_oom_retries</a> = <a class=\"id\" href=\"#MEM_CGROUP_RECLAIM_RETRIES\">MEM_CGROUP_RECLAIM_RETRIES</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__mem_cgroup_do_charge\">__mem_cgroup_do_charge</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#csize\">csize</a>, <a class=\"id\" href=\"#oom_check\">oom_check</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#CHARGE_OK\">CHARGE_OK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#CHARGE_RETRY\">CHARGE_RETRY</a>: <span class=\"comment\">/* not in OOM situation but retry */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#csize\">csize</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#css_put\">css_put</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#css\">css</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#CHARGE_WOULDBLOCK\">CHARGE_WOULDBLOCK</a>: <span class=\"comment\">/* !__GFP_WAIT */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#css_put\">css_put</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#css\">css</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#nomem\">nomem</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#CHARGE_NOMEM\">CHARGE_NOMEM</a>: <span class=\"comment\">/* OOM routine works */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#oom\">oom</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#css_put\">css_put</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#css\">css</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#nomem\">nomem</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If oom, we never return -ENOMEM */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_oom_retries\">nr_oom_retries</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#CHARGE_OOM_DIE\">CHARGE_OOM_DIE</a>: <span class=\"comment\">/* Killed by OOM Killer */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#css_put\">css_put</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#css\">css</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bypass\">bypass</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#ret\">ret</a> != <a class=\"id\" href=\"#CHARGE_OK\">CHARGE_OK</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#csize\">csize</a> &gt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#refill_stock\">refill_stock</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#csize\">csize</a> - <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#css_put\">css_put</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#css\">css</a>);", 
"<a class=\"id\" href=\"#done\">done</a>:", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#memcg\">memcg</a> = <a class=\"id\" href=\"#mem\">mem</a>;", 
"<span class=\"ts\"/>return 0;", 
"<a class=\"id\" href=\"#nomem\">nomem</a>:", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#memcg\">memcg</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<a class=\"id\" href=\"#bypass\">bypass</a>:", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#memcg\">memcg</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Somemtimes we have to undo a charge we got by try_charge().</span>", 
"<span class=\"comment\"> * This function is for that and do uncharge, put css's refcnt.</span>", 
"<span class=\"comment\"> * gotten by try_charge().</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__mem_cgroup_cancel_charge\">__mem_cgroup_cancel_charge</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mem_cgroup_is_root\">mem_cgroup_is_root</a>(<a class=\"id\" href=\"#mem\">mem</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res_counter_uncharge\">res_counter_uncharge</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> * <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#do_swap_account\">do_swap_account</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res_counter_uncharge\">res_counter_uncharge</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#memsw\">memsw</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> * <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#mem_cgroup_cancel_charge\">mem_cgroup_cancel_charge</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mem_cgroup_cancel_charge\">__mem_cgroup_cancel_charge</a>(<a class=\"id\" href=\"#mem\">mem</a>, 1);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A helper function to get mem_cgroup from ID. must be called under</span>", 
"<span class=\"comment\"> * rcu_read_lock(). The caller must check css_is_removed() or some if</span>", 
"<span class=\"comment\"> * it's concern. (dropping refcnt from swap can be called against removed</span>", 
"<span class=\"comment\"> * memcg.)</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem_cgroup_lookup\">mem_cgroup_lookup</a>(unsigned short <a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys_state\">cgroup_subsys_state</a> *<a class=\"id\" href=\"#css\">css</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* ID 0 is unused ID */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#id\">id</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#css\">css</a> = <a class=\"id\" href=\"#css_lookup\">css_lookup</a>(&amp;<a class=\"id\" href=\"#mem_cgroup_subsys\">mem_cgroup_subsys</a>, <a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#css\">css</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#css\">css</a>, struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a>, <a class=\"id\" href=\"#css\">css</a>);", 
"}", 
"", 
"struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#try_get_mem_cgroup_from_page\">try_get_mem_cgroup_from_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page_cgroup\">page_cgroup</a> *<a class=\"id\" href=\"#pc\">pc</a>;", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#ent\">ent</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(!<a class=\"id\" href=\"#PageLocked\">PageLocked</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pc\">pc</a> = <a class=\"id\" href=\"#lookup_page_cgroup\">lookup_page_cgroup</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_page_cgroup\">lock_page_cgroup</a>(<a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageCgroupUsed\">PageCgroupUsed</a>(<a class=\"id\" href=\"#pc\">pc</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#pc\">pc</a>-><a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mem\">mem</a> && !<a class=\"id\" href=\"#css_tryget\">css_tryget</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#css\">css</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#PageSwapCache\">PageSwapCache</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ent\">ent</a>.<a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#page_private\">page_private</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#lookup_swap_cgroup\">lookup_swap_cgroup</a>(<a class=\"id\" href=\"#ent\">ent</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#mem_cgroup_lookup\">mem_cgroup_lookup</a>(<a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mem\">mem</a> && !<a class=\"id\" href=\"#css_tryget\">css_tryget</a>(&amp;<a class=\"id\" href=\"#mem\">mem</a>-><a class=\"id\" href=\"#css\">css</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_page_cgroup\">unlock_page_cgroup</a>(<a class=\"id\" href=\"#pc\">pc</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mem\">mem</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * commit a charge got by __mem_cgroup_try_charge() and makes page_cgroup to be</span>", 
"<span class=\"comment\"> * USED state. If already USED, uncharge and return.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#__mem_cgroup_commit_charge\">__mem_cgroup_commit_charge</a>(struct <a class=\"id\" href=\"#mem_cgroup\">mem_cgroup</a> *<a class=\"id\" href=\"#mem\">mem</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#page_cgroup\">page_cgroup</a> *<a class=\"id\" href=\"#pc\">pc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     enum <a class=\"id\" href=\"#charge_type\">charge_type</a> <a class=\"id\" href=\"#ctype\">ctype</a>)", 
];
xr_frag_insert('l/0f/e1ec6f6a3e925fc9aa154a1a3c70941d74bf93.xr', __xr_tmp);
