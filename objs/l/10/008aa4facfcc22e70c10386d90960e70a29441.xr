var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> * the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\"> * (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> * GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> * along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) IBM Corporation, 2005</span>", 
"<span class=\"comment\"> *               Jeff Muizelaar, 2006, 2007</span>", 
"<span class=\"comment\"> *               Pekka Paalanen, 2008 &lt;pq@iki.fi&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Derived from the read-mod example from relay-examples by Tom Zanussi.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pr_fmt\">pr_fmt</a>(<a class=\"id\" href=\"#fmt\">fmt</a>) \"mmiotrace: \" <a class=\"id\" href=\"#fmt\">fmt</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEBUG\">DEBUG</a> 1", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#debugfs\">debugfs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#version\">version</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kallsyms\">kallsyms</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pgtable\">pgtable</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mmiotrace\">mmiotrace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#e820\">e820</a>.<a class=\"id\" href=\"#h\">h</a>&gt; <span class=\"comment\">/* for ISA_START_ADDRESS */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#atomic\">atomic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#percpu\">percpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"pf_in.h\"", 
"", 
"struct <a class=\"id\" href=\"#trap_reason\">trap_reason</a> {", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ip\">ip</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#reason_type\">reason_type</a> <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#active_traces\">active_traces</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#remap_trace\">remap_trace</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmmio_probe\">kmmio_probe</a> <a class=\"id\" href=\"#probe\">probe</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#phys\">phys</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#id\">id</a>;", 
"};", 
"", 
"<span class=\"comment\">/* Accessed per-cpu. */</span>", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#trap_reason\">trap_reason</a>, <a class=\"id\" href=\"#pf_reason\">pf_reason</a>);", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#mmiotrace_rw\">mmiotrace_rw</a>, <a class=\"id\" href=\"#cpu_trace\">cpu_trace</a>);", 
"", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#mmiotrace_mutex\">mmiotrace_mutex</a>);", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#trace_lock\">trace_lock</a>);", 
"static <a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#mmiotrace_enabled\">mmiotrace_enabled</a>;", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#trace_list\">trace_list</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* struct remap_trace */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Locking in this file:</span>", 
"<span class=\"comment\"> * - mmiotrace_mutex enforces enable/disable_mmiotrace() critical sections.</span>", 
"<span class=\"comment\"> * - mmiotrace_enabled may be modified only when holding mmiotrace_mutex</span>", 
"<span class=\"comment\"> *   and trace_lock.</span>", 
"<span class=\"comment\"> * - Routines depending on is_enabled() must take trace_lock.</span>", 
"<span class=\"comment\"> * - trace_list users must hold trace_lock.</span>", 
"<span class=\"comment\"> * - is_enabled() guarantees that mmio_trace_{rw,mapping} are allowed.</span>", 
"<span class=\"comment\"> * - pre/post callbacks assume the effect of is_enabled() being true.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* module parameters */</span>", 
"static unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#filter_offset\">filter_offset</a>;", 
"static int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nommiotrace\">nommiotrace</a>;", 
"static int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_pc\">trace_pc</a>;", 
"", 
"<a class=\"id\" href=\"#module_param\">module_param</a>(<a class=\"id\" href=\"#filter_offset\">filter_offset</a>, <a class=\"id\" href=\"#ulong\">ulong</a>, 0);", 
"<a class=\"id\" href=\"#module_param\">module_param</a>(<a class=\"id\" href=\"#nommiotrace\">nommiotrace</a>, <a class=\"id\" href=\"#bool\">bool</a>, 0);", 
"<a class=\"id\" href=\"#module_param\">module_param</a>(<a class=\"id\" href=\"#trace_pc\">trace_pc</a>, <a class=\"id\" href=\"#bool\">bool</a>, 0);", 
"", 
"<a class=\"id\" href=\"#MODULE_PARM_DESC\">MODULE_PARM_DESC</a>(<a class=\"id\" href=\"#filter_offset\">filter_offset</a>, \"Start address of traced mappings.\");", 
"<a class=\"id\" href=\"#MODULE_PARM_DESC\">MODULE_PARM_DESC</a>(<a class=\"id\" href=\"#nommiotrace\">nommiotrace</a>, \"Disable actual MMIO tracing.\");", 
"<a class=\"id\" href=\"#MODULE_PARM_DESC\">MODULE_PARM_DESC</a>(<a class=\"id\" href=\"#trace_pc\">trace_pc</a>, \"Record address of faulting instructions.\");", 
"", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_enabled\">is_enabled</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#mmiotrace_enabled\">mmiotrace_enabled</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#print_pte\">print_pte</a>(unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#level\">level</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#lookup_address\">lookup_address</a>(<a class=\"id\" href=\"#address\">address</a>, &amp;<a class=\"id\" href=\"#level\">level</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pte\">pte</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_err\">pr_err</a>(\"Error in %s: no pte for page 0x%08lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#level\">level</a> == <a class=\"id\" href=\"#PG_LEVEL_2M\">PG_LEVEL_2M</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_emerg\">pr_emerg</a>(\"4MB pages are not currently supported: 0x%08lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"pte for 0x%lx: 0x%llx 0x%llx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#address\">address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>(unsigned long long)<a class=\"id\" href=\"#pte_val\">pte_val</a>(*<a class=\"id\" href=\"#pte\">pte</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>(unsigned long long)<a class=\"id\" href=\"#pte_val\">pte_val</a>(*<a class=\"id\" href=\"#pte\">pte</a>) &amp; <a class=\"id\" href=\"#_PAGE_PRESENT\">_PAGE_PRESENT</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * For some reason the pre/post pairs have been called in an</span>", 
"<span class=\"comment\"> * unmatched order. Report and die.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#die_kmmio_nesting_error\">die_kmmio_nesting_error</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#trap_reason\">trap_reason</a> *<a class=\"id\" href=\"#my_reason\">my_reason</a> = &amp;<a class=\"id\" href=\"#get_cpu_var\">get_cpu_var</a>(<a class=\"id\" href=\"#pf_reason\">pf_reason</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_emerg\">pr_emerg</a>(\"unexpected fault for address: 0x%08lx, last fault for address: 0x%08lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#my_reason\">my_reason</a>-><a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#print_pte\">print_pte</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#print_symbol\">print_symbol</a>(<a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a> \"faulting IP is at %s\\n\", <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ip\">ip</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#print_symbol\">print_symbol</a>(<a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a> \"last faulting IP was at %s\\n\", <a class=\"id\" href=\"#my_reason\">my_reason</a>-><a class=\"id\" href=\"#ip\">ip</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__i386__\">__i386__</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_emerg\">pr_emerg</a>(\"eax: %08lx   ebx: %08lx   ecx: %08lx   edx: %08lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ax\">ax</a>, <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#bx\">bx</a>, <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#cx\">cx</a>, <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#dx\">dx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_emerg\">pr_emerg</a>(\"esi: %08lx   edi: %08lx   ebp: %08lx   esp: %08lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#si\">si</a>, <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#di\">di</a>, <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#bp\">bp</a>, <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#sp\">sp</a>);", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_emerg\">pr_emerg</a>(\"rax: %016lx   rcx: %016lx   rdx: %016lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#ax\">ax</a>, <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#cx\">cx</a>, <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#dx\">dx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_emerg\">pr_emerg</a>(\"rsi: %016lx   rdi: %016lx   rbp: %016lx   rsp: %016lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#si\">si</a>, <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#di\">di</a>, <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#bp\">bp</a>, <a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#sp\">sp</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu_var\">put_cpu_var</a>(<a class=\"id\" href=\"#pf_reason\">pf_reason</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#pre\">pre</a>(struct <a class=\"id\" href=\"#kmmio_probe\">kmmio_probe</a> *<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trap_reason\">trap_reason</a> *<a class=\"id\" href=\"#my_reason\">my_reason</a> = &amp;<a class=\"id\" href=\"#get_cpu_var\">get_cpu_var</a>(<a class=\"id\" href=\"#pf_reason\">pf_reason</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mmiotrace_rw\">mmiotrace_rw</a> *<a class=\"id\" href=\"#my_trace\">my_trace</a> = &amp;<a class=\"id\" href=\"#get_cpu_var\">get_cpu_var</a>(<a class=\"id\" href=\"#cpu_trace\">cpu_trace</a>);", 
"<span class=\"ts\"/>const unsigned long <a class=\"id\" href=\"#instptr\">instptr</a> = <a class=\"id\" href=\"#instruction_pointer\">instruction_pointer</a>(<a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/>const enum <a class=\"id\" href=\"#reason_type\">reason_type</a> <a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#get_ins_type\">get_ins_type</a>(<a class=\"id\" href=\"#instptr\">instptr</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#remap_trace\">remap_trace</a> *<a class=\"id\" href=\"#trace\">trace</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* it doesn't make sense to have more than one active trace per cpu */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#my_reason\">my_reason</a>-><a class=\"id\" href=\"#active_traces\">active_traces</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#die_kmmio_nesting_error\">die_kmmio_nesting_error</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#my_reason\">my_reason</a>-><a class=\"id\" href=\"#active_traces\">active_traces</a>++;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#my_reason\">my_reason</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#my_reason\">my_reason</a>-><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#my_reason\">my_reason</a>-><a class=\"id\" href=\"#ip\">ip</a> = <a class=\"id\" href=\"#instptr\">instptr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#my_trace\">my_trace</a>-><a class=\"id\" href=\"#phys\">phys</a> = <a class=\"id\" href=\"#addr\">addr</a> - <a class=\"id\" href=\"#trace\">trace</a>-><a class=\"id\" href=\"#probe\">probe</a>.<a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#trace\">trace</a>-><a class=\"id\" href=\"#phys\">phys</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#my_trace\">my_trace</a>-><a class=\"id\" href=\"#map_id\">map_id</a> = <a class=\"id\" href=\"#trace\">trace</a>-><a class=\"id\" href=\"#id\">id</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Only record the program counter when requested.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It may taint clean-room reverse engineering.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#trace_pc\">trace_pc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#my_trace\">my_trace</a>-><a class=\"id\" href=\"#pc\">pc</a> = <a class=\"id\" href=\"#instptr\">instptr</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#my_trace\">my_trace</a>-><a class=\"id\" href=\"#pc\">pc</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * XXX: the timestamp recorded will be *after* the tracing has been</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * done, not at the time we hit the instruction. SMP implications</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * on event ordering?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#REG_READ\">REG_READ</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#my_trace\">my_trace</a>-><a class=\"id\" href=\"#opcode\">opcode</a> = <a class=\"id\" href=\"#MMIO_READ\">MMIO_READ</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#my_trace\">my_trace</a>-><a class=\"id\" href=\"#width\">width</a> = <a class=\"id\" href=\"#get_ins_mem_width\">get_ins_mem_width</a>(<a class=\"id\" href=\"#instptr\">instptr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#REG_WRITE\">REG_WRITE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#my_trace\">my_trace</a>-><a class=\"id\" href=\"#opcode\">opcode</a> = <a class=\"id\" href=\"#MMIO_WRITE\">MMIO_WRITE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#my_trace\">my_trace</a>-><a class=\"id\" href=\"#width\">width</a> = <a class=\"id\" href=\"#get_ins_mem_width\">get_ins_mem_width</a>(<a class=\"id\" href=\"#instptr\">instptr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#my_trace\">my_trace</a>-><a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#get_ins_reg_val\">get_ins_reg_val</a>(<a class=\"id\" href=\"#instptr\">instptr</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IMM_WRITE\">IMM_WRITE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#my_trace\">my_trace</a>-><a class=\"id\" href=\"#opcode\">opcode</a> = <a class=\"id\" href=\"#MMIO_WRITE\">MMIO_WRITE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#my_trace\">my_trace</a>-><a class=\"id\" href=\"#width\">width</a> = <a class=\"id\" href=\"#get_ins_mem_width\">get_ins_mem_width</a>(<a class=\"id\" href=\"#instptr\">instptr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#my_trace\">my_trace</a>-><a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#get_ins_imm_val\">get_ins_imm_val</a>(<a class=\"id\" href=\"#instptr\">instptr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#ip\">ip</a> = (unsigned char *)<a class=\"id\" href=\"#instptr\">instptr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#my_trace\">my_trace</a>-><a class=\"id\" href=\"#opcode\">opcode</a> = <a class=\"id\" href=\"#MMIO_UNKNOWN_OP\">MMIO_UNKNOWN_OP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#my_trace\">my_trace</a>-><a class=\"id\" href=\"#width\">width</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#my_trace\">my_trace</a>-><a class=\"id\" href=\"#value\">value</a> = (*<a class=\"id\" href=\"#ip\">ip</a>) << 16 | *(<a class=\"id\" href=\"#ip\">ip</a> + 1) << 8 |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*(<a class=\"id\" href=\"#ip\">ip</a> + 2);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu_var\">put_cpu_var</a>(<a class=\"id\" href=\"#cpu_trace\">cpu_trace</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu_var\">put_cpu_var</a>(<a class=\"id\" href=\"#pf_reason\">pf_reason</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#post\">post</a>(struct <a class=\"id\" href=\"#kmmio_probe\">kmmio_probe</a> *<a class=\"id\" href=\"#p\">p</a>, unsigned long <a class=\"id\" href=\"#condition\">condition</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trap_reason\">trap_reason</a> *<a class=\"id\" href=\"#my_reason\">my_reason</a> = &amp;<a class=\"id\" href=\"#get_cpu_var\">get_cpu_var</a>(<a class=\"id\" href=\"#pf_reason\">pf_reason</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mmiotrace_rw\">mmiotrace_rw</a> *<a class=\"id\" href=\"#my_trace\">my_trace</a> = &amp;<a class=\"id\" href=\"#get_cpu_var\">get_cpu_var</a>(<a class=\"id\" href=\"#cpu_trace\">cpu_trace</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* this should always return the active_trace count to 0 */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#my_reason\">my_reason</a>-><a class=\"id\" href=\"#active_traces\">active_traces</a>--;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#my_reason\">my_reason</a>-><a class=\"id\" href=\"#active_traces\">active_traces</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_emerg\">pr_emerg</a>(\"unexpected post handler\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#my_reason\">my_reason</a>-><a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#REG_READ\">REG_READ</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#my_trace\">my_trace</a>-><a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#get_ins_reg_val\">get_ins_reg_val</a>(<a class=\"id\" href=\"#my_reason\">my_reason</a>-><a class=\"id\" href=\"#ip\">ip</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mmio_trace_rw\">mmio_trace_rw</a>(<a class=\"id\" href=\"#my_trace\">my_trace</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu_var\">put_cpu_var</a>(<a class=\"id\" href=\"#cpu_trace\">cpu_trace</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu_var\">put_cpu_var</a>(<a class=\"id\" href=\"#pf_reason\">pf_reason</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ioremap_trace_core\">ioremap_trace_core</a>(<a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#offset\">offset</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>static <a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#next_id\">next_id</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#remap_trace\">remap_trace</a> *<a class=\"id\" href=\"#trace\">trace</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#trace\">trace</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* These are page-unaligned. */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mmiotrace_map\">mmiotrace_map</a> <a class=\"id\" href=\"#map\">map</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#phys\">phys</a> = <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#virt\">virt</a> = (unsigned long)<a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#opcode\">opcode</a> = <a class=\"id\" href=\"#MMIO_PROBE\">MMIO_PROBE</a>", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#trace\">trace</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_err\">pr_err</a>(\"kmalloc failed in ioremap\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#trace\">trace</a> = (struct <a class=\"id\" href=\"#remap_trace\">remap_trace</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#probe\">probe</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#addr\">addr</a> = (unsigned long)<a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#pre_handler\">pre_handler</a> = <a class=\"id\" href=\"#pre\">pre</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#post_handler\">post_handler</a> = <a class=\"id\" href=\"#post\">post</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#trace\">trace</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>},", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#phys\">phys</a> = <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#atomic_inc_return\">atomic_inc_return</a>(&amp;<a class=\"id\" href=\"#next_id\">next_id</a>)", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a>.<a class=\"id\" href=\"#map_id\">map_id</a> = <a class=\"id\" href=\"#trace\">trace</a>-><a class=\"id\" href=\"#id\">id</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#trace_lock\">trace_lock</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_enabled\">is_enabled</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#trace\">trace</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#not_enabled\">not_enabled</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mmio_trace_mapping\">mmio_trace_mapping</a>(&amp;<a class=\"id\" href=\"#map\">map</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#trace\">trace</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#trace_list\">trace_list</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#nommiotrace\">nommiotrace</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#register_kmmio_probe\">register_kmmio_probe</a>(&amp;<a class=\"id\" href=\"#trace\">trace</a>-><a class=\"id\" href=\"#probe\">probe</a>);", 
"", 
"<a class=\"id\" href=\"#not_enabled\">not_enabled</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#trace_lock\">trace_lock</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#mmiotrace_ioremap\">mmiotrace_ioremap</a>(<a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#offset\">offset</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_enabled\">is_enabled</a>()) <span class=\"comment\">/* recheck and proper locking in *_core() */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"ioremap_*(0x%llx, 0x%lx) = %p\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/> (unsigned long long)<a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#filter_offset\">filter_offset</a>) && (<a class=\"id\" href=\"#offset\">offset</a> != <a class=\"id\" href=\"#filter_offset\">filter_offset</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ioremap_trace_core\">ioremap_trace_core</a>(<a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#iounmap_trace_core\">iounmap_trace_core</a>(volatile void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mmiotrace_map\">mmiotrace_map</a> <a class=\"id\" href=\"#map\">map</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#phys\">phys</a> = 0,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#virt\">virt</a> = (unsigned long)<a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#len\">len</a> = 0,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#opcode\">opcode</a> = <a class=\"id\" href=\"#MMIO_UNPROBE\">MMIO_UNPROBE</a>", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#remap_trace\">remap_trace</a> *<a class=\"id\" href=\"#trace\">trace</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#remap_trace\">remap_trace</a> *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#remap_trace\">remap_trace</a> *<a class=\"id\" href=\"#found_trace\">found_trace</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"Unmapping %p.\\n\", <a class=\"id\" href=\"#addr\">addr</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#trace_lock\">trace_lock</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_enabled\">is_enabled</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#not_enabled\">not_enabled</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#trace\">trace</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#trace_list\">trace_list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((unsigned long)<a class=\"id\" href=\"#addr\">addr</a> == <a class=\"id\" href=\"#trace\">trace</a>-><a class=\"id\" href=\"#probe\">probe</a>.<a class=\"id\" href=\"#addr\">addr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#nommiotrace\">nommiotrace</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unregister_kmmio_probe\">unregister_kmmio_probe</a>(&amp;<a class=\"id\" href=\"#trace\">trace</a>-><a class=\"id\" href=\"#probe\">probe</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#trace\">trace</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#found_trace\">found_trace</a> = <a class=\"id\" href=\"#trace\">trace</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a>.<a class=\"id\" href=\"#map_id\">map_id</a> = (<a class=\"id\" href=\"#found_trace\">found_trace</a>) ? <a class=\"id\" href=\"#found_trace\">found_trace</a>-><a class=\"id\" href=\"#id\">id</a> : -1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mmio_trace_mapping\">mmio_trace_mapping</a>(&amp;<a class=\"id\" href=\"#map\">map</a>);", 
"", 
"<a class=\"id\" href=\"#not_enabled\">not_enabled</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#trace_lock\">trace_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#found_trace\">found_trace</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#synchronize_rcu\">synchronize_rcu</a>(); <span class=\"comment\">/* unregister_kmmio_probe() requirement */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#found_trace\">found_trace</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#mmiotrace_iounmap\">mmiotrace_iounmap</a>(volatile void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_enabled\">is_enabled</a>()) <span class=\"comment\">/* recheck and proper locking in *_core() */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iounmap_trace_core\">iounmap_trace_core</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#mmiotrace_printk\">mmiotrace_printk</a>(const char *<a class=\"id\" href=\"#fmt\">fmt</a>, ...)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_start\">va_start</a>(<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#fmt\">fmt</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#trace_lock\">trace_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_enabled\">is_enabled</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#mmio_trace_printk\">mmio_trace_printk</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#trace_lock\">trace_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a>(<a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#mmiotrace_printk\">mmiotrace_printk</a>);", 
"", 
"static void <a class=\"id\" href=\"#clear_trace_list\">clear_trace_list</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#remap_trace\">remap_trace</a> *<a class=\"id\" href=\"#trace\">trace</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#remap_trace\">remap_trace</a> *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
];
xr_frag_insert('l/10/008aa4facfcc22e70c10386d90960e70a29441.xr', __xr_tmp);
