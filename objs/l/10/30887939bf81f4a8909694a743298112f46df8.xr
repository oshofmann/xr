var __xr_tmp = [
"<span class=\"comment\">/* Fallback functions when the main IOMMU code is not compiled in. This</span>", 
"<span class=\"comment\">   code is roughly equivalent to i386. */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#dma\">dma</a>-<a class=\"id\" href=\"#mapping\">mapping</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#scatterlist\">scatterlist</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#gfp\">gfp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pci\">pci</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#processor\">processor</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#iommu\">iommu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#dma\">dma</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static int", 
"<a class=\"id\" href=\"#check_addr\">check_addr</a>(char *<a class=\"id\" href=\"#name\">name</a>, struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hwdev\">hwdev</a> && !<a class=\"id\" href=\"#dma_capable\">dma_capable</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#size\">size</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#hwdev\">hwdev</a>-><a class=\"id\" href=\"#dma_mask\">dma_mask</a> >= <a class=\"id\" href=\"#DMA_BIT_MASK\">DMA_BIT_MASK</a>(32))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"nommu_%s: overflow %Lx+%zu of device mask %Lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#name\">name</a>, (long long)<a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(long long)*<a class=\"id\" href=\"#hwdev\">hwdev</a>-><a class=\"id\" href=\"#dma_mask\">dma_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#nommu_map_page\">nommu_map_page</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#dma_attrs\">dma_attrs</a> *<a class=\"id\" href=\"#attrs\">attrs</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#bus\">bus</a> = <a class=\"id\" href=\"#page_to_phys\">page_to_phys</a>(<a class=\"id\" href=\"#page\">page</a>) + <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#size\">size</a> == 0);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#check_addr\">check_addr</a>(\"map_single\", <a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#size\">size</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#DMA_ERROR_CODE\">DMA_ERROR_CODE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_write_buffers\">flush_write_buffers</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bus\">bus</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Map a set of buffers described by scatterlist in streaming</span>", 
"<span class=\"comment\"> * mode for DMA.  This is the scatter-gather version of the</span>", 
"<span class=\"comment\"> * above pci_map_single interface.  Here the scatter gather list</span>", 
"<span class=\"comment\"> * elements are each tagged with the appropriate dma address</span>", 
"<span class=\"comment\"> * and length.  They are obtained via sg_dma_{address,length}(SG).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE: An implementation may be able to use a smaller number of</span>", 
"<span class=\"comment\"> *       DMA address/length pairs than there are SG table elements.</span>", 
"<span class=\"comment\"> *       (for example via virtual mapping capabilities)</span>", 
"<span class=\"comment\"> *       The routine returns the number of addr/length pairs actually</span>", 
"<span class=\"comment\"> *       used, at most nents.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Device ownership issues as mentioned above for pci_map_single are</span>", 
"<span class=\"comment\"> * the same here.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#nommu_map_sg\">nommu_map_sg</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#hwdev\">hwdev</a>, struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sg\">sg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#nents\">nents</a>, enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_attrs\">dma_attrs</a> *<a class=\"id\" href=\"#attrs\">attrs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#s\">s</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#nents\">nents</a> == 0 || <a class=\"id\" href=\"#sg\">sg</a>[0].<a class=\"id\" href=\"#length\">length</a> == 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_sg\">for_each_sg</a>(<a class=\"id\" href=\"#sg\">sg</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#nents\">nents</a>, <a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#sg_page\">sg_page</a>(<a class=\"id\" href=\"#s\">s</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#dma_address\">dma_address</a> = <a class=\"id\" href=\"#sg_phys\">sg_phys</a>(<a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#check_addr\">check_addr</a>(\"map_sg\", <a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#dma_address\">dma_address</a>, <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#length\">length</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#dma_length\">dma_length</a> = <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_write_buffers\">flush_write_buffers</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nents\">nents</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#nommu_free_coherent\">nommu_free_coherent</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, void *<a class=\"id\" href=\"#vaddr\">vaddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#dma_addr\">dma_addr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_pages\">free_pages</a>((unsigned long)<a class=\"id\" href=\"#vaddr\">vaddr</a>, <a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#size\">size</a>));", 
"}", 
"", 
"static void <a class=\"id\" href=\"#nommu_sync_single_for_device\">nommu_sync_single_for_device</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#dir\">dir</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_write_buffers\">flush_write_buffers</a>();", 
"}", 
"", 
"", 
"static void <a class=\"id\" href=\"#nommu_sync_sg_for_device\">nommu_sync_sg_for_device</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sg\">sg</a>, int <a class=\"id\" href=\"#nelems\">nelems</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#dir\">dir</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_write_buffers\">flush_write_buffers</a>();", 
"}", 
"", 
"struct <a class=\"id\" href=\"#dma_map_ops\">dma_map_ops</a> <a class=\"id\" href=\"#nommu_dma_ops\">nommu_dma_ops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#alloc_coherent\">alloc_coherent</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#dma_generic_alloc_coherent\">dma_generic_alloc_coherent</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#free_coherent\">free_coherent</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#nommu_free_coherent\">nommu_free_coherent</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#map_sg\">map_sg</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#nommu_map_sg\">nommu_map_sg</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#map_page\">map_page</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#nommu_map_page\">nommu_map_page</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#sync_single_for_device\">sync_single_for_device</a> = <a class=\"id\" href=\"#nommu_sync_single_for_device\">nommu_sync_single_for_device</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#sync_sg_for_device\">sync_sg_for_device</a><span class=\"ts\"/>= <a class=\"id\" href=\"#nommu_sync_sg_for_device\">nommu_sync_sg_for_device</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#is_phys\">is_phys</a><span class=\"ts\"/><span class=\"ts\"/>= 1,", 
"};", 
];
xr_frag_insert('l/10/30887939bf81f4a8909694a743298112f46df8.xr', __xr_tmp);
