var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_WAIT_H\">_LINUX_WAIT_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_WAIT_H\">_LINUX_WAIT_H</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#WNOHANG\">WNOHANG</a><span class=\"ts\"/><span class=\"ts\"/>0x00000001", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#WUNTRACED\">WUNTRACED</a><span class=\"ts\"/>0x00000002", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#WSTOPPED\">WSTOPPED</a><span class=\"ts\"/><a class=\"id\" href=\"#WUNTRACED\">WUNTRACED</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#WEXITED\">WEXITED</a><span class=\"ts\"/><span class=\"ts\"/>0x00000004", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#WCONTINUED\">WCONTINUED</a><span class=\"ts\"/>0x00000008", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#WNOWAIT\">WNOWAIT</a><span class=\"ts\"/><span class=\"ts\"/>0x01000000<span class=\"ts\"/><span class=\"comment\">/* Don't reap, just poll status.  */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__WNOTHREAD\">__WNOTHREAD</a><span class=\"ts\"/>0x20000000<span class=\"ts\"/><span class=\"comment\">/* Don't wait on children of other threads in this group */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__WALL\">__WALL</a><span class=\"ts\"/><span class=\"ts\"/>0x40000000<span class=\"ts\"/><span class=\"comment\">/* Wait on all children, regardless of type */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__WCLONE\">__WCLONE</a><span class=\"ts\"/>0x80000000<span class=\"ts\"/><span class=\"comment\">/* Wait only on non-SIGCHLD children */</span>", 
"", 
"<span class=\"comment\">/* First argument to waitid: */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#P_ALL\">P_ALL</a><span class=\"ts\"/><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#P_PID\">P_PID</a><span class=\"ts\"/><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#P_PGID\">P_PGID</a><span class=\"ts\"/><span class=\"ts\"/>2", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stddef\">stddef</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#system\">system</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#current\">current</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"typedef struct <a class=\"id\" href=\"#__wait_queue\">__wait_queue</a> <a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a>;", 
"typedef int (*<a class=\"id\" href=\"#wait_queue_func_t\">wait_queue_func_t</a>)(<a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> *<a class=\"id\" href=\"#wait\">wait</a>, unsigned <a class=\"id\" href=\"#mode\">mode</a>, int <a class=\"id\" href=\"#flags\">flags</a>, void *<a class=\"id\" href=\"#key\">key</a>);", 
"int <a class=\"id\" href=\"#default_wake_function\">default_wake_function</a>(<a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> *<a class=\"id\" href=\"#wait\">wait</a>, unsigned <a class=\"id\" href=\"#mode\">mode</a>, int <a class=\"id\" href=\"#flags\">flags</a>, void *<a class=\"id\" href=\"#key\">key</a>);", 
"", 
"struct <a class=\"id\" href=\"#__wait_queue\">__wait_queue</a> {", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#flags\">flags</a>;", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#WQ_FLAG_EXCLUSIVE\">WQ_FLAG_EXCLUSIVE</a><span class=\"ts\"/>0x01", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_func_t\">wait_queue_func_t</a> <a class=\"id\" href=\"#func\">func</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#task_list\">task_list</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#wait_bit_key\">wait_bit_key</a> {", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#bit_nr\">bit_nr</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#wait_bit_queue\">wait_bit_queue</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#wait_bit_key\">wait_bit_key</a> <a class=\"id\" href=\"#key\">key</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> <a class=\"id\" href=\"#wait\">wait</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#__wait_queue_head\">__wait_queue_head</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#lock\">lock</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#task_list\">task_list</a>;", 
"};", 
"typedef struct <a class=\"id\" href=\"#__wait_queue_head\">__wait_queue_head</a> <a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a>;", 
"", 
"struct <a class=\"id\" href=\"#task_struct\">task_struct</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Macros for declaration and initialisaton of the datatypes</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__WAITQUEUE_INITIALIZER\">__WAITQUEUE_INITIALIZER</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#tsk\">tsk</a>) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#private\">private</a><span class=\"ts\"/>= <a class=\"id\" href=\"#tsk\">tsk</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#func\">func</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#default_wake_function\">default_wake_function</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#task_list\">task_list</a><span class=\"ts\"/>= { <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a> } }", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DECLARE_WAITQUEUE\">DECLARE_WAITQUEUE</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#tsk\">tsk</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> <a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#__WAITQUEUE_INITIALIZER\">__WAITQUEUE_INITIALIZER</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#tsk\">tsk</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__WAIT_QUEUE_HEAD_INITIALIZER\">__WAIT_QUEUE_HEAD_INITIALIZER</a>(<a class=\"id\" href=\"#name\">name</a>) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#lock\">lock</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#__SPIN_LOCK_UNLOCKED\">__SPIN_LOCK_UNLOCKED</a>(<a class=\"id\" href=\"#name\">name</a>.<a class=\"id\" href=\"#lock\">lock</a>),<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#task_list\">task_list</a><span class=\"ts\"/>= { &amp;(<a class=\"id\" href=\"#name\">name</a>).<a class=\"id\" href=\"#task_list\">task_list</a>, &amp;(<a class=\"id\" href=\"#name\">name</a>).<a class=\"id\" href=\"#task_list\">task_list</a> } }", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DECLARE_WAIT_QUEUE_HEAD\">DECLARE_WAIT_QUEUE_HEAD</a>(<a class=\"id\" href=\"#name\">name</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> <a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#__WAIT_QUEUE_HEAD_INITIALIZER\">__WAIT_QUEUE_HEAD_INITIALIZER</a>(<a class=\"id\" href=\"#name\">name</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__WAIT_BIT_KEY_INITIALIZER\">__WAIT_BIT_KEY_INITIALIZER</a>(<a class=\"id\" href=\"#word\">word</a>, <a class=\"id\" href=\"#bit\">bit</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>{ .<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#word\">word</a>, .<a class=\"id\" href=\"#bit_nr\">bit_nr</a> = <a class=\"id\" href=\"#bit\">bit</a>, }", 
"", 
"extern void <a class=\"id\" href=\"#__init_waitqueue_head\">__init_waitqueue_head</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> *);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#init_waitqueue_head\">init_waitqueue_head</a>(<a class=\"id\" href=\"#q\">q</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>static struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> <a class=\"id\" href=\"#__key\">__key</a>;<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__init_waitqueue_head\">__init_waitqueue_head</a>((<a class=\"id\" href=\"#q\">q</a>), &amp;<a class=\"id\" href=\"#__key\">__key</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (0)", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_LOCKDEP\">CONFIG_LOCKDEP</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__WAIT_QUEUE_HEAD_INIT_ONSTACK\">__WAIT_QUEUE_HEAD_INIT_ONSTACK</a>(<a class=\"id\" href=\"#name\">name</a>) \\", 
"<span class=\"ts\"/>({ <a class=\"id\" href=\"#init_waitqueue_head\">init_waitqueue_head</a>(&amp;<a class=\"id\" href=\"#name\">name</a>); <a class=\"id\" href=\"#name\">name</a>; })", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DECLARE_WAIT_QUEUE_HEAD_ONSTACK\">DECLARE_WAIT_QUEUE_HEAD_ONSTACK</a>(<a class=\"id\" href=\"#name\">name</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> <a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#__WAIT_QUEUE_HEAD_INIT_ONSTACK\">__WAIT_QUEUE_HEAD_INIT_ONSTACK</a>(<a class=\"id\" href=\"#name\">name</a>)", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DECLARE_WAIT_QUEUE_HEAD_ONSTACK\">DECLARE_WAIT_QUEUE_HEAD_ONSTACK</a>(<a class=\"id\" href=\"#name\">name</a>) <a class=\"id\" href=\"#DECLARE_WAIT_QUEUE_HEAD\">DECLARE_WAIT_QUEUE_HEAD</a>(<a class=\"id\" href=\"#name\">name</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#init_waitqueue_entry\">init_waitqueue_entry</a>(<a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#flags\">flags</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#func\">func</a> = <a class=\"id\" href=\"#default_wake_function\">default_wake_function</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#init_waitqueue_func_entry\">init_waitqueue_func_entry</a>(<a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> *<a class=\"id\" href=\"#q\">q</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_func_t\">wait_queue_func_t</a> <a class=\"id\" href=\"#func\">func</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#flags\">flags</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#func\">func</a> = <a class=\"id\" href=\"#func\">func</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#waitqueue_active\">waitqueue_active</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#task_list\">task_list</a>);", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#add_wait_queue\">add_wait_queue</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> *<a class=\"id\" href=\"#wait\">wait</a>);", 
"extern void <a class=\"id\" href=\"#add_wait_queue_exclusive\">add_wait_queue_exclusive</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> *<a class=\"id\" href=\"#wait\">wait</a>);", 
"extern void <a class=\"id\" href=\"#remove_wait_queue\">remove_wait_queue</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> *<a class=\"id\" href=\"#wait\">wait</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__add_wait_queue\">__add_wait_queue</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> *<a class=\"id\" href=\"#new\">new</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#task_list\">task_list</a>, &amp;<a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#task_list\">task_list</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Used for wake-one threads:</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__add_wait_queue_exclusive\">__add_wait_queue_exclusive</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#q\">q</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> *<a class=\"id\" href=\"#wait\">wait</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait\">wait</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#WQ_FLAG_EXCLUSIVE\">WQ_FLAG_EXCLUSIVE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__add_wait_queue\">__add_wait_queue</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#wait\">wait</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__add_wait_queue_tail\">__add_wait_queue_tail</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#head\">head</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> *<a class=\"id\" href=\"#new\">new</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#task_list\">task_list</a>, &amp;<a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#task_list\">task_list</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__add_wait_queue_tail_exclusive\">__add_wait_queue_tail_exclusive</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#q\">q</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> *<a class=\"id\" href=\"#wait\">wait</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait\">wait</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#WQ_FLAG_EXCLUSIVE\">WQ_FLAG_EXCLUSIVE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__add_wait_queue_tail\">__add_wait_queue_tail</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#wait\">wait</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__remove_wait_queue\">__remove_wait_queue</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#head\">head</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_t\">wait_queue_t</a> *<a class=\"id\" href=\"#old\">old</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#task_list\">task_list</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#__wake_up\">__wake_up</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#q\">q</a>, unsigned int <a class=\"id\" href=\"#mode\">mode</a>, int <a class=\"id\" href=\"#nr\">nr</a>, void *<a class=\"id\" href=\"#key\">key</a>);", 
"void <a class=\"id\" href=\"#__wake_up_locked_key\">__wake_up_locked_key</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#q\">q</a>, unsigned int <a class=\"id\" href=\"#mode\">mode</a>, void *<a class=\"id\" href=\"#key\">key</a>);", 
"void <a class=\"id\" href=\"#__wake_up_sync_key\">__wake_up_sync_key</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#q\">q</a>, unsigned int <a class=\"id\" href=\"#mode\">mode</a>, int <a class=\"id\" href=\"#nr\">nr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#key\">key</a>);", 
"void <a class=\"id\" href=\"#__wake_up_locked\">__wake_up_locked</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#q\">q</a>, unsigned int <a class=\"id\" href=\"#mode\">mode</a>);", 
"void <a class=\"id\" href=\"#__wake_up_sync\">__wake_up_sync</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#q\">q</a>, unsigned int <a class=\"id\" href=\"#mode\">mode</a>, int <a class=\"id\" href=\"#nr\">nr</a>);", 
"void <a class=\"id\" href=\"#__wake_up_bit\">__wake_up_bit</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *, void *, int);", 
"int <a class=\"id\" href=\"#__wait_on_bit\">__wait_on_bit</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *, struct <a class=\"id\" href=\"#wait_bit_queue\">wait_bit_queue</a> *, int (*)(void *), unsigned);", 
"int <a class=\"id\" href=\"#__wait_on_bit_lock\">__wait_on_bit_lock</a>(<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *, struct <a class=\"id\" href=\"#wait_bit_queue\">wait_bit_queue</a> *, int (*)(void *), unsigned);", 
"void <a class=\"id\" href=\"#wake_up_bit\">wake_up_bit</a>(void *, int);", 
"int <a class=\"id\" href=\"#out_of_line_wait_on_bit\">out_of_line_wait_on_bit</a>(void *, int, int (*)(void *), unsigned);", 
"int <a class=\"id\" href=\"#out_of_line_wait_on_bit_lock\">out_of_line_wait_on_bit_lock</a>(void *, int, int (*)(void *), unsigned);", 
"<a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#bit_waitqueue\">bit_waitqueue</a>(void *, int);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#wake_up\">wake_up</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__wake_up\">__wake_up</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#TASK_NORMAL\">TASK_NORMAL</a>, 1, <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#wake_up_nr\">wake_up_nr</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#nr\">nr</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__wake_up\">__wake_up</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#TASK_NORMAL\">TASK_NORMAL</a>, <a class=\"id\" href=\"#nr\">nr</a>, <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#wake_up_all\">wake_up_all</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__wake_up\">__wake_up</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#TASK_NORMAL\">TASK_NORMAL</a>, 0, <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#wake_up_locked\">wake_up_locked</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__wake_up_locked\">__wake_up_locked</a>((<a class=\"id\" href=\"#x\">x</a>), <a class=\"id\" href=\"#TASK_NORMAL\">TASK_NORMAL</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#wake_up_interruptible\">wake_up_interruptible</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><a class=\"id\" href=\"#__wake_up\">__wake_up</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>, 1, <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#wake_up_interruptible_nr\">wake_up_interruptible_nr</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#nr\">nr</a>)<span class=\"ts\"/><a class=\"id\" href=\"#__wake_up\">__wake_up</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>, <a class=\"id\" href=\"#nr\">nr</a>, <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#wake_up_interruptible_all\">wake_up_interruptible_all</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><a class=\"id\" href=\"#__wake_up\">__wake_up</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>, 0, <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#wake_up_interruptible_sync\">wake_up_interruptible_sync</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><a class=\"id\" href=\"#__wake_up_sync\">__wake_up_sync</a>((<a class=\"id\" href=\"#x\">x</a>), <a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>, 1)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Wakeup macros to be used to report events to the targets.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#wake_up_poll\">wake_up_poll</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#m\">m</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__wake_up\">__wake_up</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#TASK_NORMAL\">TASK_NORMAL</a>, 1, (void *) (<a class=\"id\" href=\"#m\">m</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#wake_up_locked_poll\">wake_up_locked_poll</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#m\">m</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__wake_up_locked_key\">__wake_up_locked_key</a>((<a class=\"id\" href=\"#x\">x</a>), <a class=\"id\" href=\"#TASK_NORMAL\">TASK_NORMAL</a>, (void *) (<a class=\"id\" href=\"#m\">m</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#wake_up_interruptible_poll\">wake_up_interruptible_poll</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#m\">m</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__wake_up\">__wake_up</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>, 1, (void *) (<a class=\"id\" href=\"#m\">m</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#wake_up_interruptible_sync_poll\">wake_up_interruptible_sync_poll</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#m\">m</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__wake_up_sync_key\">__wake_up_sync_key</a>((<a class=\"id\" href=\"#x\">x</a>), <a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>, 1, (void *) (<a class=\"id\" href=\"#m\">m</a>))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__wait_event\">__wait_event</a>(<a class=\"id\" href=\"#wq\">wq</a>, <a class=\"id\" href=\"#condition\">condition</a>) <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEFINE_WAIT\">DEFINE_WAIT</a>(<a class=\"id\" href=\"#__wait\">__wait</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>for (;;) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prepare_to_wait\">prepare_to_wait</a>(&amp;<a class=\"id\" href=\"#wq\">wq</a>, &amp;<a class=\"id\" href=\"#__wait\">__wait</a>, <a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#condition\">condition</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#finish_wait\">finish_wait</a>(&amp;<a class=\"id\" href=\"#wq\">wq</a>, &amp;<a class=\"id\" href=\"#__wait\">__wait</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while (0)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * wait_event - sleep until a condition gets true</span>", 
"<span class=\"comment\"> * @wq: the waitqueue to wait on</span>", 
"<span class=\"comment\"> * @condition: a C expression for the event to wait for</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The process is put to sleep (TASK_UNINTERRUPTIBLE) until the</span>", 
"<span class=\"comment\"> * @condition evaluates to true. The @condition is checked each time</span>", 
"<span class=\"comment\"> * the waitqueue @wq is woken up.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * wake_up() has to be called after changing any variable that could</span>", 
"<span class=\"comment\"> * change the result of the wait condition.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#wait_event\">wait_event</a>(<a class=\"id\" href=\"#wq\">wq</a>, <a class=\"id\" href=\"#condition\">condition</a>) <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#condition\">condition</a>)<span class=\"ts\"/> <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__wait_event\">__wait_event</a>(<a class=\"id\" href=\"#wq\">wq</a>, <a class=\"id\" href=\"#condition\">condition</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while (0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__wait_event_timeout\">__wait_event_timeout</a>(<a class=\"id\" href=\"#wq\">wq</a>, <a class=\"id\" href=\"#condition\">condition</a>, <a class=\"id\" href=\"#ret\">ret</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEFINE_WAIT\">DEFINE_WAIT</a>(<a class=\"id\" href=\"#__wait\">__wait</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>for (;;) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prepare_to_wait\">prepare_to_wait</a>(&amp;<a class=\"id\" href=\"#wq\">wq</a>, &amp;<a class=\"id\" href=\"#__wait\">__wait</a>, <a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#condition\">condition</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#schedule_timeout\">schedule_timeout</a>(<a class=\"id\" href=\"#ret\">ret</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#finish_wait\">finish_wait</a>(&amp;<a class=\"id\" href=\"#wq\">wq</a>, &amp;<a class=\"id\" href=\"#__wait\">__wait</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while (0)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * wait_event_timeout - sleep until a condition gets true or a timeout elapses</span>", 
"<span class=\"comment\"> * @wq: the waitqueue to wait on</span>", 
"<span class=\"comment\"> * @condition: a C expression for the event to wait for</span>", 
"<span class=\"comment\"> * @timeout: timeout, in jiffies</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The process is put to sleep (TASK_UNINTERRUPTIBLE) until the</span>", 
"<span class=\"comment\"> * @condition evaluates to true. The @condition is checked each time</span>", 
"<span class=\"comment\"> * the waitqueue @wq is woken up.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * wake_up() has to be called after changing any variable that could</span>", 
"<span class=\"comment\"> * change the result of the wait condition.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The function returns 0 if the @timeout elapsed, and the remaining</span>", 
"<span class=\"comment\"> * jiffies if the condition evaluated to true before the timeout elapsed.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#wait_event_timeout\">wait_event_timeout</a>(<a class=\"id\" href=\"#wq\">wq</a>, <a class=\"id\" href=\"#condition\">condition</a>, <a class=\"id\" href=\"#timeout\">timeout</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#__ret\">__ret</a> = <a class=\"id\" href=\"#timeout\">timeout</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#condition\">condition</a>)) <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__wait_event_timeout\">__wait_event_timeout</a>(<a class=\"id\" href=\"#wq\">wq</a>, <a class=\"id\" href=\"#condition\">condition</a>, <a class=\"id\" href=\"#__ret\">__ret</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ret\">__ret</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__wait_event_interruptible\">__wait_event_interruptible</a>(<a class=\"id\" href=\"#wq\">wq</a>, <a class=\"id\" href=\"#condition\">condition</a>, <a class=\"id\" href=\"#ret\">ret</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEFINE_WAIT\">DEFINE_WAIT</a>(<a class=\"id\" href=\"#__wait\">__wait</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>for (;;) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prepare_to_wait\">prepare_to_wait</a>(&amp;<a class=\"id\" href=\"#wq\">wq</a>, &amp;<a class=\"id\" href=\"#__wait\">__wait</a>, <a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#condition\">condition</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#signal_pending\">signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>)) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ERESTARTSYS\">ERESTARTSYS</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#finish_wait\">finish_wait</a>(&amp;<a class=\"id\" href=\"#wq\">wq</a>, &amp;<a class=\"id\" href=\"#__wait\">__wait</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while (0)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * wait_event_interruptible - sleep until a condition gets true</span>", 
"<span class=\"comment\"> * @wq: the waitqueue to wait on</span>", 
"<span class=\"comment\"> * @condition: a C expression for the event to wait for</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The process is put to sleep (TASK_INTERRUPTIBLE) until the</span>", 
"<span class=\"comment\"> * @condition evaluates to true or a signal is received.</span>", 
"<span class=\"comment\"> * The @condition is checked each time the waitqueue @wq is woken up.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * wake_up() has to be called after changing any variable that could</span>", 
"<span class=\"comment\"> * change the result of the wait condition.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The function will return -ERESTARTSYS if it was interrupted by a</span>", 
"<span class=\"comment\"> * signal and 0 if @condition evaluated to true.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#wait_event_interruptible\">wait_event_interruptible</a>(<a class=\"id\" href=\"#wq\">wq</a>, <a class=\"id\" href=\"#condition\">condition</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#__ret\">__ret</a> = 0;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#condition\">condition</a>))<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__wait_event_interruptible\">__wait_event_interruptible</a>(<a class=\"id\" href=\"#wq\">wq</a>, <a class=\"id\" href=\"#condition\">condition</a>, <a class=\"id\" href=\"#__ret\">__ret</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ret\">__ret</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__wait_event_interruptible_timeout\">__wait_event_interruptible_timeout</a>(<a class=\"id\" href=\"#wq\">wq</a>, <a class=\"id\" href=\"#condition\">condition</a>, <a class=\"id\" href=\"#ret\">ret</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEFINE_WAIT\">DEFINE_WAIT</a>(<a class=\"id\" href=\"#__wait\">__wait</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>for (;;) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prepare_to_wait\">prepare_to_wait</a>(&amp;<a class=\"id\" href=\"#wq\">wq</a>, &amp;<a class=\"id\" href=\"#__wait\">__wait</a>, <a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#condition\">condition</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#signal_pending\">signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>)) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#schedule_timeout\">schedule_timeout</a>(<a class=\"id\" href=\"#ret\">ret</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ERESTARTSYS\">ERESTARTSYS</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#finish_wait\">finish_wait</a>(&amp;<a class=\"id\" href=\"#wq\">wq</a>, &amp;<a class=\"id\" href=\"#__wait\">__wait</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while (0)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * wait_event_interruptible_timeout - sleep until a condition gets true or a timeout elapses</span>", 
"<span class=\"comment\"> * @wq: the waitqueue to wait on</span>", 
"<span class=\"comment\"> * @condition: a C expression for the event to wait for</span>", 
"<span class=\"comment\"> * @timeout: timeout, in jiffies</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The process is put to sleep (TASK_INTERRUPTIBLE) until the</span>", 
"<span class=\"comment\"> * @condition evaluates to true or a signal is received.</span>", 
"<span class=\"comment\"> * The @condition is checked each time the waitqueue @wq is woken up.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * wake_up() has to be called after changing any variable that could</span>", 
"<span class=\"comment\"> * change the result of the wait condition.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The function returns 0 if the @timeout elapsed, -ERESTARTSYS if it</span>", 
"<span class=\"comment\"> * was interrupted by a signal, and the remaining jiffies otherwise</span>", 
"<span class=\"comment\"> * if the condition evaluated to true before the timeout elapsed.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#wait_event_interruptible_timeout\">wait_event_interruptible_timeout</a>(<a class=\"id\" href=\"#wq\">wq</a>, <a class=\"id\" href=\"#condition\">condition</a>, <a class=\"id\" href=\"#timeout\">timeout</a>)<span class=\"ts\"/>\\", 
"({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#__ret\">__ret</a> = <a class=\"id\" href=\"#timeout\">timeout</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#condition\">condition</a>))<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__wait_event_interruptible_timeout\">__wait_event_interruptible_timeout</a>(<a class=\"id\" href=\"#wq\">wq</a>, <a class=\"id\" href=\"#condition\">condition</a>, <a class=\"id\" href=\"#__ret\">__ret</a>); \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ret\">__ret</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__wait_event_interruptible_exclusive\">__wait_event_interruptible_exclusive</a>(<a class=\"id\" href=\"#wq\">wq</a>, <a class=\"id\" href=\"#condition\">condition</a>, <a class=\"id\" href=\"#ret\">ret</a>)<span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEFINE_WAIT\">DEFINE_WAIT</a>(<a class=\"id\" href=\"#__wait\">__wait</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>for (;;) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prepare_to_wait_exclusive\">prepare_to_wait_exclusive</a>(&amp;<a class=\"id\" href=\"#wq\">wq</a>, &amp;<a class=\"id\" href=\"#__wait\">__wait</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#condition\">condition</a>) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#finish_wait\">finish_wait</a>(&amp;<a class=\"id\" href=\"#wq\">wq</a>, &amp;<a class=\"id\" href=\"#__wait\">__wait</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#signal_pending\">signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>)) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ERESTARTSYS\">ERESTARTSYS</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#abort_exclusive_wait\">abort_exclusive_wait</a>(&amp;<a class=\"id\" href=\"#wq\">wq</a>, &amp;<a class=\"id\" href=\"#__wait\">__wait</a>, <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while (0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#wait_event_interruptible_exclusive\">wait_event_interruptible_exclusive</a>(<a class=\"id\" href=\"#wq\">wq</a>, <a class=\"id\" href=\"#condition\">condition</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#__ret\">__ret</a> = 0;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#condition\">condition</a>))<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__wait_event_interruptible_exclusive\">__wait_event_interruptible_exclusive</a>(<a class=\"id\" href=\"#wq\">wq</a>, <a class=\"id\" href=\"#condition\">condition</a>, <a class=\"id\" href=\"#__ret\">__ret</a>);\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ret\">__ret</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__wait_event_interruptible_locked\">__wait_event_interruptible_locked</a>(<a class=\"id\" href=\"#wq\">wq</a>, <a class=\"id\" href=\"#condition\">condition</a>, <a class=\"id\" href=\"#exclusive\">exclusive</a>, <a class=\"id\" href=\"#irq\">irq</a>) \\", 
"({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#__ret\">__ret</a> = 0;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEFINE_WAIT\">DEFINE_WAIT</a>(<a class=\"id\" href=\"#__wait\">__wait</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#exclusive\">exclusive</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__wait\">__wait</a>.<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#WQ_FLAG_EXCLUSIVE\">WQ_FLAG_EXCLUSIVE</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#__wait\">__wait</a>.<a class=\"id\" href=\"#task_list\">task_list</a>)))<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__add_wait_queue_tail\">__add_wait_queue_tail</a>(&amp;(<a class=\"id\" href=\"#wq\">wq</a>), &amp;<a class=\"id\" href=\"#__wait\">__wait</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_current_state\">set_current_state</a>(<a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#signal_pending\">signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>)) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__ret\">__ret</a> = -<a class=\"id\" href=\"#ERESTARTSYS\">ERESTARTSYS</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#irq\">irq</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;(<a class=\"id\" href=\"#wq\">wq</a>).<a class=\"id\" href=\"#lock\">lock</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>else<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;(<a class=\"id\" href=\"#wq\">wq</a>).<a class=\"id\" href=\"#lock\">lock</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#irq\">irq</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;(<a class=\"id\" href=\"#wq\">wq</a>).<a class=\"id\" href=\"#lock\">lock</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>else<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;(<a class=\"id\" href=\"#wq\">wq</a>).<a class=\"id\" href=\"#lock\">lock</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (!(<a class=\"id\" href=\"#condition\">condition</a>));<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__remove_wait_queue\">__remove_wait_queue</a>(&amp;(<a class=\"id\" href=\"#wq\">wq</a>), &amp;<a class=\"id\" href=\"#__wait\">__wait</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ret\">__ret</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * wait_event_interruptible_locked - sleep until a condition gets true</span>", 
"<span class=\"comment\"> * @wq: the waitqueue to wait on</span>", 
"<span class=\"comment\"> * @condition: a C expression for the event to wait for</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The process is put to sleep (TASK_INTERRUPTIBLE) until the</span>", 
"<span class=\"comment\"> * @condition evaluates to true or a signal is received.</span>", 
"<span class=\"comment\"> * The @condition is checked each time the waitqueue @wq is woken up.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It must be called with wq.lock being held.  This spinlock is</span>", 
"<span class=\"comment\"> * unlocked while sleeping but @condition testing is done while lock</span>", 
"<span class=\"comment\"> * is held and when this macro exits the lock is held.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The lock is locked/unlocked using spin_lock()/spin_unlock()</span>", 
"<span class=\"comment\"> * functions which must match the way they are locked/unlocked outside</span>", 
"<span class=\"comment\"> * of this macro.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * wake_up_locked() has to be called after changing any variable that could</span>", 
"<span class=\"comment\"> * change the result of the wait condition.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The function will return -ERESTARTSYS if it was interrupted by a</span>", 
"<span class=\"comment\"> * signal and 0 if @condition evaluated to true.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#wait_event_interruptible_locked\">wait_event_interruptible_locked</a>(<a class=\"id\" href=\"#wq\">wq</a>, <a class=\"id\" href=\"#condition\">condition</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>((<a class=\"id\" href=\"#condition\">condition</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/> ? 0 : <a class=\"id\" href=\"#__wait_event_interruptible_locked\">__wait_event_interruptible_locked</a>(<a class=\"id\" href=\"#wq\">wq</a>, <a class=\"id\" href=\"#condition\">condition</a>, 0, 0))", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * wait_event_interruptible_locked_irq - sleep until a condition gets true</span>", 
"<span class=\"comment\"> * @wq: the waitqueue to wait on</span>", 
"<span class=\"comment\"> * @condition: a C expression for the event to wait for</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The process is put to sleep (TASK_INTERRUPTIBLE) until the</span>", 
"<span class=\"comment\"> * @condition evaluates to true or a signal is received.</span>", 
"<span class=\"comment\"> * The @condition is checked each time the waitqueue @wq is woken up.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It must be called with wq.lock being held.  This spinlock is</span>", 
"<span class=\"comment\"> * unlocked while sleeping but @condition testing is done while lock</span>", 
"<span class=\"comment\"> * is held and when this macro exits the lock is held.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The lock is locked/unlocked using spin_lock_irq()/spin_unlock_irq()</span>", 
"<span class=\"comment\"> * functions which must match the way they are locked/unlocked outside</span>", 
"<span class=\"comment\"> * of this macro.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * wake_up_locked() has to be called after changing any variable that could</span>", 
"<span class=\"comment\"> * change the result of the wait condition.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The function will return -ERESTARTSYS if it was interrupted by a</span>", 
"<span class=\"comment\"> * signal and 0 if @condition evaluated to true.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#wait_event_interruptible_locked_irq\">wait_event_interruptible_locked_irq</a>(<a class=\"id\" href=\"#wq\">wq</a>, <a class=\"id\" href=\"#condition\">condition</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>((<a class=\"id\" href=\"#condition\">condition</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/> ? 0 : <a class=\"id\" href=\"#__wait_event_interruptible_locked\">__wait_event_interruptible_locked</a>(<a class=\"id\" href=\"#wq\">wq</a>, <a class=\"id\" href=\"#condition\">condition</a>, 0, 1))", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * wait_event_interruptible_exclusive_locked - sleep exclusively until a condition gets true</span>", 
"<span class=\"comment\"> * @wq: the waitqueue to wait on</span>", 
"<span class=\"comment\"> * @condition: a C expression for the event to wait for</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The process is put to sleep (TASK_INTERRUPTIBLE) until the</span>", 
"<span class=\"comment\"> * @condition evaluates to true or a signal is received.</span>", 
"<span class=\"comment\"> * The @condition is checked each time the waitqueue @wq is woken up.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It must be called with wq.lock being held.  This spinlock is</span>", 
"<span class=\"comment\"> * unlocked while sleeping but @condition testing is done while lock</span>", 
"<span class=\"comment\"> * is held and when this macro exits the lock is held.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The lock is locked/unlocked using spin_lock()/spin_unlock()</span>", 
"<span class=\"comment\"> * functions which must match the way they are locked/unlocked outside</span>", 
"<span class=\"comment\"> * of this macro.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The process is put on the wait queue with an WQ_FLAG_EXCLUSIVE flag</span>", 
"<span class=\"comment\"> * set thus when other process waits process on the list if this</span>", 
"<span class=\"comment\"> * process is awaken further processes are not considered.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * wake_up_locked() has to be called after changing any variable that could</span>", 
"<span class=\"comment\"> * change the result of the wait condition.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The function will return -ERESTARTSYS if it was interrupted by a</span>", 
"<span class=\"comment\"> * signal and 0 if @condition evaluated to true.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#wait_event_interruptible_exclusive_locked\">wait_event_interruptible_exclusive_locked</a>(<a class=\"id\" href=\"#wq\">wq</a>, <a class=\"id\" href=\"#condition\">condition</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>((<a class=\"id\" href=\"#condition\">condition</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/> ? 0 : <a class=\"id\" href=\"#__wait_event_interruptible_locked\">__wait_event_interruptible_locked</a>(<a class=\"id\" href=\"#wq\">wq</a>, <a class=\"id\" href=\"#condition\">condition</a>, 1, 0))", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * wait_event_interruptible_exclusive_locked_irq - sleep until a condition gets true</span>", 
"<span class=\"comment\"> * @wq: the waitqueue to wait on</span>", 
"<span class=\"comment\"> * @condition: a C expression for the event to wait for</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The process is put to sleep (TASK_INTERRUPTIBLE) until the</span>", 
"<span class=\"comment\"> * @condition evaluates to true or a signal is received.</span>", 
"<span class=\"comment\"> * The @condition is checked each time the waitqueue @wq is woken up.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It must be called with wq.lock being held.  This spinlock is</span>", 
"<span class=\"comment\"> * unlocked while sleeping but @condition testing is done while lock</span>", 
"<span class=\"comment\"> * is held and when this macro exits the lock is held.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The lock is locked/unlocked using spin_lock_irq()/spin_unlock_irq()</span>", 
"<span class=\"comment\"> * functions which must match the way they are locked/unlocked outside</span>", 
"<span class=\"comment\"> * of this macro.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The process is put on the wait queue with an WQ_FLAG_EXCLUSIVE flag</span>", 
"<span class=\"comment\"> * set thus when other process waits process on the list if this</span>", 
"<span class=\"comment\"> * process is awaken further processes are not considered.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * wake_up_locked() has to be called after changing any variable that could</span>", 
"<span class=\"comment\"> * change the result of the wait condition.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The function will return -ERESTARTSYS if it was interrupted by a</span>", 
"<span class=\"comment\"> * signal and 0 if @condition evaluated to true.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#wait_event_interruptible_exclusive_locked_irq\">wait_event_interruptible_exclusive_locked_irq</a>(<a class=\"id\" href=\"#wq\">wq</a>, <a class=\"id\" href=\"#condition\">condition</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>((<a class=\"id\" href=\"#condition\">condition</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/> ? 0 : <a class=\"id\" href=\"#__wait_event_interruptible_locked\">__wait_event_interruptible_locked</a>(<a class=\"id\" href=\"#wq\">wq</a>, <a class=\"id\" href=\"#condition\">condition</a>, 1, 1))", 
"", 
"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__wait_event_killable\">__wait_event_killable</a>(<a class=\"id\" href=\"#wq\">wq</a>, <a class=\"id\" href=\"#condition\">condition</a>, <a class=\"id\" href=\"#ret\">ret</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEFINE_WAIT\">DEFINE_WAIT</a>(<a class=\"id\" href=\"#__wait\">__wait</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>for (;;) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prepare_to_wait\">prepare_to_wait</a>(&amp;<a class=\"id\" href=\"#wq\">wq</a>, &amp;<a class=\"id\" href=\"#__wait\">__wait</a>, <a class=\"id\" href=\"#TASK_KILLABLE\">TASK_KILLABLE</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#condition\">condition</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#fatal_signal_pending\">fatal_signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>)) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ERESTARTSYS\">ERESTARTSYS</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#finish_wait\">finish_wait</a>(&amp;<a class=\"id\" href=\"#wq\">wq</a>, &amp;<a class=\"id\" href=\"#__wait\">__wait</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while (0)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * wait_event_killable - sleep until a condition gets true</span>", 
"<span class=\"comment\"> * @wq: the waitqueue to wait on</span>", 
"<span class=\"comment\"> * @condition: a C expression for the event to wait for</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The process is put to sleep (TASK_KILLABLE) until the</span>", 
"<span class=\"comment\"> * @condition evaluates to true or a signal is received.</span>", 
"<span class=\"comment\"> * The @condition is checked each time the waitqueue @wq is woken up.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * wake_up() has to be called after changing any variable that could</span>", 
"<span class=\"comment\"> * change the result of the wait condition.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The function will return -ERESTARTSYS if it was interrupted by a</span>", 
"<span class=\"comment\"> * signal and 0 if @condition evaluated to true.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#wait_event_killable\">wait_event_killable</a>(<a class=\"id\" href=\"#wq\">wq</a>, <a class=\"id\" href=\"#condition\">condition</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
];
xr_frag_insert('l/10/53ddd211c9323117740db468f3d97b047f927c.xr', __xr_tmp);
