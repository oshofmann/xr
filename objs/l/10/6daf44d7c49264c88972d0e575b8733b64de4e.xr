var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Network interface table.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Network interfaces (devices) do not have a security field, so we</span>", 
"<span class=\"comment\"> * maintain a table associating each interface with a SID.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Author: James Morris &lt;jmorris@redhat.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2003 Red Hat, Inc., James Morris &lt;jmorris@redhat.com&gt;</span>", 
"<span class=\"comment\"> * Copyright (C) 2007 Hewlett-Packard Development Company, L.P.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>      Paul Moore &lt;paul.moore@hp.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License version 2,</span>", 
"<span class=\"comment\"> * as published by the Free Software Foundation.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stddef\">stddef</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#notifier\">notifier</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#netdevice\">netdevice</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rcupdate\">rcupdate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#net_namespace\">net_namespace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"security.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"objsec.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"netif.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SEL_NETIF_HASH_SIZE\">SEL_NETIF_HASH_SIZE</a><span class=\"ts\"/>64", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SEL_NETIF_HASH_MAX\">SEL_NETIF_HASH_MAX</a><span class=\"ts\"/>1024", 
"", 
"struct <a class=\"id\" href=\"#sel_netif\">sel_netif</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#netif_security_struct\">netif_security_struct</a> <a class=\"id\" href=\"#nsec\">nsec</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> <a class=\"id\" href=\"#rcu_head\">rcu_head</a>;", 
"};", 
"", 
"static <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sel_netif_total\">sel_netif_total</a>;", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#sel_netif_list\">sel_netif_list</a>);", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#sel_netif_lock\">sel_netif_lock</a>);", 
"static struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#sel_netif_hash\">sel_netif_hash</a>[<a class=\"id\" href=\"#SEL_NETIF_HASH_SIZE\">SEL_NETIF_HASH_SIZE</a>];", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sel_netif_hashfn - Hashing function for the interface table</span>", 
"<span class=\"comment\"> * @ifindex: the network interface</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * This is the hashing function for the network interface table, it returns the</span>", 
"<span class=\"comment\"> * bucket number for the given interface.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sel_netif_hashfn\">sel_netif_hashfn</a>(int <a class=\"id\" href=\"#ifindex\">ifindex</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#ifindex\">ifindex</a> &amp; (<a class=\"id\" href=\"#SEL_NETIF_HASH_SIZE\">SEL_NETIF_HASH_SIZE</a> - 1));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sel_netif_find - Search for an interface record</span>", 
"<span class=\"comment\"> * @ifindex: the network interface</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * Search the network interface table and return the record matching @ifindex.</span>", 
"<span class=\"comment\"> * If an entry can not be found in the table return NULL.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#sel_netif\">sel_netif</a> *<a class=\"id\" href=\"#sel_netif_find\">sel_netif_find</a>(int <a class=\"id\" href=\"#ifindex\">ifindex</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#sel_netif_hashfn\">sel_netif_hashfn</a>(<a class=\"id\" href=\"#ifindex\">ifindex</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sel_netif\">sel_netif</a> *<a class=\"id\" href=\"#netif\">netif</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#netif\">netif</a>, &amp;<a class=\"id\" href=\"#sel_netif_hash\">sel_netif_hash</a>[<a class=\"id\" href=\"#idx\">idx</a>], <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* all of the devices should normally fit in the hash, so we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * optimize for that case */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#netif\">netif</a>-><a class=\"id\" href=\"#nsec\">nsec</a>.<a class=\"id\" href=\"#ifindex\">ifindex</a> == <a class=\"id\" href=\"#ifindex\">ifindex</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#netif\">netif</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sel_netif_insert - Insert a new interface into the table</span>", 
"<span class=\"comment\"> * @netif: the new interface record</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * Add a new interface record to the network interface hash table.  Returns</span>", 
"<span class=\"comment\"> * zero on success, negative values on failure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#sel_netif_insert\">sel_netif_insert</a>(struct <a class=\"id\" href=\"#sel_netif\">sel_netif</a> *<a class=\"id\" href=\"#netif\">netif</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#idx\">idx</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sel_netif_total\">sel_netif_total</a> >= <a class=\"id\" href=\"#SEL_NETIF_HASH_MAX\">SEL_NETIF_HASH_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#sel_netif_hashfn\">sel_netif_hashfn</a>(<a class=\"id\" href=\"#netif\">netif</a>-><a class=\"id\" href=\"#nsec\">nsec</a>.<a class=\"id\" href=\"#ifindex\">ifindex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_rcu\">list_add_rcu</a>(&amp;<a class=\"id\" href=\"#netif\">netif</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#sel_netif_hash\">sel_netif_hash</a>[<a class=\"id\" href=\"#idx\">idx</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sel_netif_total\">sel_netif_total</a>++;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sel_netif_free - Frees an interface entry</span>", 
"<span class=\"comment\"> * @p: the entry's RCU field</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * This function is designed to be used as a callback to the call_rcu()</span>", 
"<span class=\"comment\"> * function so that memory allocated to a hash table interface entry can be</span>", 
"<span class=\"comment\"> * released safely.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#sel_netif_free\">sel_netif_free</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sel_netif\">sel_netif</a> *<a class=\"id\" href=\"#netif\">netif</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#sel_netif\">sel_netif</a>, <a class=\"id\" href=\"#rcu_head\">rcu_head</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#netif\">netif</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sel_netif_destroy - Remove an interface record from the table</span>", 
"<span class=\"comment\"> * @netif: the existing interface record</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * Remove an existing interface record from the network interface table.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#sel_netif_destroy\">sel_netif_destroy</a>(struct <a class=\"id\" href=\"#sel_netif\">sel_netif</a> *<a class=\"id\" href=\"#netif\">netif</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#netif\">netif</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sel_netif_total\">sel_netif_total</a>--;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#netif\">netif</a>-><a class=\"id\" href=\"#rcu_head\">rcu_head</a>, <a class=\"id\" href=\"#sel_netif_free\">sel_netif_free</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sel_netif_sid_slow - Lookup the SID of a network interface using the policy</span>", 
"<span class=\"comment\"> * @ifindex: the network interface</span>", 
"<span class=\"comment\"> * @sid: interface SID</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * This function determines the SID of a network interface by quering the</span>", 
"<span class=\"comment\"> * security policy.  The result is added to the network interface table to</span>", 
"<span class=\"comment\"> * speedup future queries.  Returns zero on success, negative values on</span>", 
"<span class=\"comment\"> * failure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#sel_netif_sid_slow\">sel_netif_sid_slow</a>(int <a class=\"id\" href=\"#ifindex\">ifindex</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#sid\">sid</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sel_netif\">sel_netif</a> *<a class=\"id\" href=\"#netif\">netif</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sel_netif\">sel_netif</a> *<a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* NOTE: we always use init's network namespace since we don't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * currently support containers */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#dev_get_by_index\">dev_get_by_index</a>(&amp;<a class=\"id\" href=\"#init_net\">init_net</a>, <a class=\"id\" href=\"#ifindex\">ifindex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#dev\">dev</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"SELinux: failure in sel_netif_sid_slow(),\"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \" invalid network interface (%d)\\n\", <a class=\"id\" href=\"#ifindex\">ifindex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(&amp;<a class=\"id\" href=\"#sel_netif_lock\">sel_netif_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netif\">netif</a> = <a class=\"id\" href=\"#sel_netif_find\">sel_netif_find</a>(<a class=\"id\" href=\"#ifindex\">ifindex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#netif\">netif</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#sid\">sid</a> = <a class=\"id\" href=\"#netif\">netif</a>-><a class=\"id\" href=\"#nsec\">nsec</a>.<a class=\"id\" href=\"#sid\">sid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#new\">new</a>), <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new\">new</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#security_netif_sid\">security_netif_sid</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#name\">name</a>, &amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#nsec\">nsec</a>.<a class=\"id\" href=\"#sid\">sid</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#nsec\">nsec</a>.<a class=\"id\" href=\"#ifindex\">ifindex</a> = <a class=\"id\" href=\"#ifindex\">ifindex</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#sel_netif_insert\">sel_netif_insert</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#sid\">sid</a> = <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#nsec\">nsec</a>.<a class=\"id\" href=\"#sid\">sid</a>;", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#sel_netif_lock\">sel_netif_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_put\">dev_put</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"SELinux: failure in sel_netif_sid_slow(),\"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \" unable to determine network interface label (%d)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#ifindex\">ifindex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sel_netif_sid - Lookup the SID of a network interface</span>", 
"<span class=\"comment\"> * @ifindex: the network interface</span>", 
"<span class=\"comment\"> * @sid: interface SID</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * This function determines the SID of a network interface using the fastest</span>", 
"<span class=\"comment\"> * method possible.  First the interface table is queried, but if an entry</span>", 
"<span class=\"comment\"> * can't be found then the policy is queried and the result is added to the</span>", 
"<span class=\"comment\"> * table to speedup future queries.  Returns zero on success, negative values</span>", 
"<span class=\"comment\"> * on failure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#sel_netif_sid\">sel_netif_sid</a>(int <a class=\"id\" href=\"#ifindex\">ifindex</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#sid\">sid</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sel_netif\">sel_netif</a> *<a class=\"id\" href=\"#netif\">netif</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netif\">netif</a> = <a class=\"id\" href=\"#sel_netif_find\">sel_netif_find</a>(<a class=\"id\" href=\"#ifindex\">ifindex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#netif\">netif</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#sid\">sid</a> = <a class=\"id\" href=\"#netif\">netif</a>-><a class=\"id\" href=\"#nsec\">nsec</a>.<a class=\"id\" href=\"#sid\">sid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sel_netif_sid_slow\">sel_netif_sid_slow</a>(<a class=\"id\" href=\"#ifindex\">ifindex</a>, <a class=\"id\" href=\"#sid\">sid</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sel_netif_kill - Remove an entry from the network interface table</span>", 
"<span class=\"comment\"> * @ifindex: the network interface</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * This function removes the entry matching @ifindex from the network interface</span>", 
"<span class=\"comment\"> * table if it exists.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#sel_netif_kill\">sel_netif_kill</a>(int <a class=\"id\" href=\"#ifindex\">ifindex</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sel_netif\">sel_netif</a> *<a class=\"id\" href=\"#netif\">netif</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(&amp;<a class=\"id\" href=\"#sel_netif_lock\">sel_netif_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#netif\">netif</a> = <a class=\"id\" href=\"#sel_netif_find\">sel_netif_find</a>(<a class=\"id\" href=\"#ifindex\">ifindex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#netif\">netif</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sel_netif_destroy\">sel_netif_destroy</a>(<a class=\"id\" href=\"#netif\">netif</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#sel_netif_lock\">sel_netif_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sel_netif_flush - Flush the entire network interface table</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> * Remove all entries from the network interface table.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#sel_netif_flush\">sel_netif_flush</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#idx\">idx</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sel_netif\">sel_netif</a> *<a class=\"id\" href=\"#netif\">netif</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(&amp;<a class=\"id\" href=\"#sel_netif_lock\">sel_netif_lock</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#idx\">idx</a> = 0; <a class=\"id\" href=\"#idx\">idx</a> &lt; <a class=\"id\" href=\"#SEL_NETIF_HASH_SIZE\">SEL_NETIF_HASH_SIZE</a>; <a class=\"id\" href=\"#idx\">idx</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#netif\">netif</a>, &amp;<a class=\"id\" href=\"#sel_netif_hash\">sel_netif_hash</a>[<a class=\"id\" href=\"#idx\">idx</a>], <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sel_netif_destroy\">sel_netif_destroy</a>(<a class=\"id\" href=\"#netif\">netif</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#sel_netif_lock\">sel_netif_lock</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#sel_netif_avc_callback\">sel_netif_avc_callback</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#ssid\">ssid</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#tsid\">tsid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#class\">class</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#perms\">perms</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#retained\">retained</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a> == <a class=\"id\" href=\"#AVC_CALLBACK_RESET\">AVC_CALLBACK_RESET</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sel_netif_flush\">sel_netif_flush</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#synchronize_net\">synchronize_net</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#sel_netif_netdev_notifier_handler\">sel_netif_netdev_notifier_handler</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#this\">this</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#event\">event</a>, void *<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#ptr\">ptr</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev_net\">dev_net</a>(<a class=\"id\" href=\"#dev\">dev</a>) != &amp;<a class=\"id\" href=\"#init_net\">init_net</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_DONE\">NOTIFY_DONE</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a> == <a class=\"id\" href=\"#NETDEV_DOWN\">NETDEV_DOWN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sel_netif_kill\">sel_netif_kill</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#ifindex\">ifindex</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_DONE\">NOTIFY_DONE</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> <a class=\"id\" href=\"#sel_netif_netdev_notifier\">sel_netif_netdev_notifier</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#notifier_call\">notifier_call</a> = <a class=\"id\" href=\"#sel_netif_netdev_notifier_handler\">sel_netif_netdev_notifier_handler</a>,", 
"};", 
"", 
"static <a class=\"id\" href=\"#__init\">__init</a> int <a class=\"id\" href=\"#sel_netif_init\">sel_netif_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#selinux_enabled\">selinux_enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#SEL_NETIF_HASH_SIZE\">SEL_NETIF_HASH_SIZE</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#sel_netif_hash\">sel_netif_hash</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_netdevice_notifier\">register_netdevice_notifier</a>(&amp;<a class=\"id\" href=\"#sel_netif_netdev_notifier\">sel_netif_netdev_notifier</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#avc_add_callback\">avc_add_callback</a>(<a class=\"id\" href=\"#sel_netif_avc_callback\">sel_netif_avc_callback</a>, <a class=\"id\" href=\"#AVC_CALLBACK_RESET\">AVC_CALLBACK_RESET</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#SECSID_NULL\">SECSID_NULL</a>, <a class=\"id\" href=\"#SECSID_NULL\">SECSID_NULL</a>, <a class=\"id\" href=\"#SECCLASS_NULL\">SECCLASS_NULL</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"avc_add_callback() failed, error %d\\n\", <a class=\"id\" href=\"#err\">err</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#__initcall\">__initcall</a>(<a class=\"id\" href=\"#sel_netif_init\">sel_netif_init</a>);", 
"", 
];
xr_frag_insert('l/10/6daf44d7c49264c88972d0e575b8733b64de4e.xr', __xr_tmp);
