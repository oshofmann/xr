var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#value\">value</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#KVAL\">KVAL</a>(<a class=\"id\" href=\"#K_PCOMMA\">K_PCOMMA</a>):", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#KVAL\">KVAL</a>(<a class=\"id\" href=\"#K_PDOT\">K_PDOT</a>):", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k_fn\">k_fn</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#KVAL\">KVAL</a>(<a class=\"id\" href=\"#K_REMOVE\">K_REMOVE</a>), 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#KVAL\">KVAL</a>(<a class=\"id\" href=\"#K_P0\">K_P0</a>):", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k_fn\">k_fn</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#KVAL\">KVAL</a>(<a class=\"id\" href=\"#K_INSERT\">K_INSERT</a>), 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#KVAL\">KVAL</a>(<a class=\"id\" href=\"#K_P1\">K_P1</a>):", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k_fn\">k_fn</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#KVAL\">KVAL</a>(<a class=\"id\" href=\"#K_SELECT\">K_SELECT</a>), 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#KVAL\">KVAL</a>(<a class=\"id\" href=\"#K_P2\">K_P2</a>):", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k_cur\">k_cur</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#KVAL\">KVAL</a>(<a class=\"id\" href=\"#K_DOWN\">K_DOWN</a>), 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#KVAL\">KVAL</a>(<a class=\"id\" href=\"#K_P3\">K_P3</a>):", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k_fn\">k_fn</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#KVAL\">KVAL</a>(<a class=\"id\" href=\"#K_PGDN\">K_PGDN</a>), 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#KVAL\">KVAL</a>(<a class=\"id\" href=\"#K_P4\">K_P4</a>):", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k_cur\">k_cur</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#KVAL\">KVAL</a>(<a class=\"id\" href=\"#K_LEFT\">K_LEFT</a>), 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#KVAL\">KVAL</a>(<a class=\"id\" href=\"#K_P6\">K_P6</a>):", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k_cur\">k_cur</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#KVAL\">KVAL</a>(<a class=\"id\" href=\"#K_RIGHT\">K_RIGHT</a>), 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#KVAL\">KVAL</a>(<a class=\"id\" href=\"#K_P7\">K_P7</a>):", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k_fn\">k_fn</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#KVAL\">KVAL</a>(<a class=\"id\" href=\"#K_FIND\">K_FIND</a>), 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#KVAL\">KVAL</a>(<a class=\"id\" href=\"#K_P8\">K_P8</a>):", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k_cur\">k_cur</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#KVAL\">KVAL</a>(<a class=\"id\" href=\"#K_UP\">K_UP</a>), 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#KVAL\">KVAL</a>(<a class=\"id\" href=\"#K_P9\">K_P9</a>):", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k_fn\">k_fn</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#KVAL\">KVAL</a>(<a class=\"id\" href=\"#K_PGUP\">K_PGUP</a>), 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#KVAL\">KVAL</a>(<a class=\"id\" href=\"#K_P5\">K_P5</a>):", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#applkey\">applkey</a>(<a class=\"id\" href=\"#vc\">vc</a>, 'G', <a class=\"id\" href=\"#vc_kbd_mode\">vc_kbd_mode</a>(<a class=\"id\" href=\"#kbd\">kbd</a>, <a class=\"id\" href=\"#VC_APPLIC\">VC_APPLIC</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_queue\">put_queue</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#pad_chars\">pad_chars</a>[<a class=\"id\" href=\"#value\">value</a>]);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#value\">value</a> == <a class=\"id\" href=\"#KVAL\">KVAL</a>(<a class=\"id\" href=\"#K_PENTER\">K_PENTER</a>) && <a class=\"id\" href=\"#vc_kbd_mode\">vc_kbd_mode</a>(<a class=\"id\" href=\"#kbd\">kbd</a>, <a class=\"id\" href=\"#VC_CRLF\">VC_CRLF</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_queue\">put_queue</a>(<a class=\"id\" href=\"#vc\">vc</a>, 10);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#k_shift\">k_shift</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>, unsigned char <a class=\"id\" href=\"#value\">value</a>, char <a class=\"id\" href=\"#up_flag\">up_flag</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#old_state\">old_state</a> = <a class=\"id\" href=\"#shift_state\">shift_state</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rep\">rep</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Mimic typewriter:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a CapsShift key acts like Shift but undoes CapsLock</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#value\">value</a> == <a class=\"id\" href=\"#KVAL\">KVAL</a>(<a class=\"id\" href=\"#K_CAPSSHIFT\">K_CAPSSHIFT</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#KVAL\">KVAL</a>(<a class=\"id\" href=\"#K_SHIFT\">K_SHIFT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#up_flag\">up_flag</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clr_vc_kbd_led\">clr_vc_kbd_led</a>(<a class=\"id\" href=\"#kbd\">kbd</a>, <a class=\"id\" href=\"#VC_CAPSLOCK\">VC_CAPSLOCK</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#up_flag\">up_flag</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * handle the case that two shift or control</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * keys are depressed simultaneously</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#shift_down\">shift_down</a>[<a class=\"id\" href=\"#value\">value</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shift_down\">shift_down</a>[<a class=\"id\" href=\"#value\">value</a>]--;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shift_down\">shift_down</a>[<a class=\"id\" href=\"#value\">value</a>]++;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#shift_down\">shift_down</a>[<a class=\"id\" href=\"#value\">value</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shift_state\">shift_state</a> |= (1 << <a class=\"id\" href=\"#value\">value</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shift_state\">shift_state</a> &= ~(1 << <a class=\"id\" href=\"#value\">value</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* kludge */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#up_flag\">up_flag</a> && <a class=\"id\" href=\"#shift_state\">shift_state</a> != <a class=\"id\" href=\"#old_state\">old_state</a> && <a class=\"id\" href=\"#npadch\">npadch</a> != -1) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kbd\">kbd</a>-><a class=\"id\" href=\"#kbdmode\">kbdmode</a> == <a class=\"id\" href=\"#VC_UNICODE\">VC_UNICODE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to_utf8\">to_utf8</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#npadch\">npadch</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_queue\">put_queue</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#npadch\">npadch</a> &amp; 0xff);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#npadch\">npadch</a> = -1;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#k_meta\">k_meta</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>, unsigned char <a class=\"id\" href=\"#value\">value</a>, char <a class=\"id\" href=\"#up_flag\">up_flag</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#up_flag\">up_flag</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vc_kbd_mode\">vc_kbd_mode</a>(<a class=\"id\" href=\"#kbd\">kbd</a>, <a class=\"id\" href=\"#VC_META\">VC_META</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_queue\">put_queue</a>(<a class=\"id\" href=\"#vc\">vc</a>, '\\033');", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_queue\">put_queue</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_queue\">put_queue</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#value\">value</a> | 0x80);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#k_ascii\">k_ascii</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>, unsigned char <a class=\"id\" href=\"#value\">value</a>, char <a class=\"id\" href=\"#up_flag\">up_flag</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#base\">base</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#up_flag\">up_flag</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#value\">value</a> &lt; 10) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* decimal input of code, while Alt depressed */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = 10;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* hexadecimal input of code, while AltGr depressed */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> -= 10;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = 16;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#npadch\">npadch</a> == -1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#npadch\">npadch</a> = <a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#npadch\">npadch</a> = <a class=\"id\" href=\"#npadch\">npadch</a> * <a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#value\">value</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#k_lock\">k_lock</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>, unsigned char <a class=\"id\" href=\"#value\">value</a>, char <a class=\"id\" href=\"#up_flag\">up_flag</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#up_flag\">up_flag</a> || <a class=\"id\" href=\"#rep\">rep</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chg_vc_kbd_lock\">chg_vc_kbd_lock</a>(<a class=\"id\" href=\"#kbd\">kbd</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#k_slock\">k_slock</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>, unsigned char <a class=\"id\" href=\"#value\">value</a>, char <a class=\"id\" href=\"#up_flag\">up_flag</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#k_shift\">k_shift</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#up_flag\">up_flag</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#up_flag\">up_flag</a> || <a class=\"id\" href=\"#rep\">rep</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chg_vc_kbd_slock\">chg_vc_kbd_slock</a>(<a class=\"id\" href=\"#kbd\">kbd</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* try to make Alt, oops, AltGr and such work */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#key_maps\">key_maps</a>[<a class=\"id\" href=\"#kbd\">kbd</a>-><a class=\"id\" href=\"#lockstate\">lockstate</a> ^ <a class=\"id\" href=\"#kbd\">kbd</a>-><a class=\"id\" href=\"#slockstate\">slockstate</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kbd\">kbd</a>-><a class=\"id\" href=\"#slockstate\">slockstate</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chg_vc_kbd_slock\">chg_vc_kbd_slock</a>(<a class=\"id\" href=\"#kbd\">kbd</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* by default, 300ms interval for combination release */</span>", 
"static unsigned <a class=\"id\" href=\"#brl_timeout\">brl_timeout</a> = 300;", 
"<a class=\"id\" href=\"#MODULE_PARM_DESC\">MODULE_PARM_DESC</a>(<a class=\"id\" href=\"#brl_timeout\">brl_timeout</a>, \"Braille keys release delay in ms (0 for commit on first key release)\");", 
"<a class=\"id\" href=\"#module_param\">module_param</a>(<a class=\"id\" href=\"#brl_timeout\">brl_timeout</a>, <a class=\"id\" href=\"#uint\">uint</a>, 0644);", 
"", 
"static unsigned <a class=\"id\" href=\"#brl_nbchords\">brl_nbchords</a> = 1;", 
"<a class=\"id\" href=\"#MODULE_PARM_DESC\">MODULE_PARM_DESC</a>(<a class=\"id\" href=\"#brl_nbchords\">brl_nbchords</a>, \"Number of chords that produce a braille pattern (0 for dead chords)\");", 
"<a class=\"id\" href=\"#module_param\">module_param</a>(<a class=\"id\" href=\"#brl_nbchords\">brl_nbchords</a>, <a class=\"id\" href=\"#uint\">uint</a>, 0644);", 
"", 
"static void <a class=\"id\" href=\"#k_brlcommit\">k_brlcommit</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>, unsigned int <a class=\"id\" href=\"#pattern\">pattern</a>, char <a class=\"id\" href=\"#up_flag\">up_flag</a>)", 
"{", 
"<span class=\"ts\"/>static unsigned long <a class=\"id\" href=\"#chords\">chords</a>;", 
"<span class=\"ts\"/>static unsigned <a class=\"id\" href=\"#committed\">committed</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#brl_nbchords\">brl_nbchords</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k_deadunicode\">k_deadunicode</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#BRL_UC_ROW\">BRL_UC_ROW</a> | <a class=\"id\" href=\"#pattern\">pattern</a>, <a class=\"id\" href=\"#up_flag\">up_flag</a>);", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#committed\">committed</a> |= <a class=\"id\" href=\"#pattern\">pattern</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chords\">chords</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#chords\">chords</a> == <a class=\"id\" href=\"#brl_nbchords\">brl_nbchords</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k_unicode\">k_unicode</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#BRL_UC_ROW\">BRL_UC_ROW</a> | <a class=\"id\" href=\"#committed\">committed</a>, <a class=\"id\" href=\"#up_flag\">up_flag</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chords\">chords</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#committed\">committed</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#k_brl\">k_brl</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>, unsigned char <a class=\"id\" href=\"#value\">value</a>, char <a class=\"id\" href=\"#up_flag\">up_flag</a>)", 
"{", 
"<span class=\"ts\"/>static unsigned <a class=\"id\" href=\"#pressed\">pressed</a>, <a class=\"id\" href=\"#committing\">committing</a>;", 
"<span class=\"ts\"/>static unsigned long <a class=\"id\" href=\"#releasestart\">releasestart</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kbd\">kbd</a>-><a class=\"id\" href=\"#kbdmode\">kbdmode</a> != <a class=\"id\" href=\"#VC_UNICODE\">VC_UNICODE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#up_flag\">up_flag</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"keyboard mode must be unicode for braille patterns\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#value\">value</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k_unicode\">k_unicode</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#BRL_UC_ROW\">BRL_UC_ROW</a>, <a class=\"id\" href=\"#up_flag\">up_flag</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#value\">value</a> &gt; 8)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#up_flag\">up_flag</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pressed\">pressed</a> |= 1 << (<a class=\"id\" href=\"#value\">value</a> - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#brl_timeout\">brl_timeout</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#committing\">committing</a> = <a class=\"id\" href=\"#pressed\">pressed</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#brl_timeout\">brl_timeout</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#committing\">committing</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#time_after\">time_after</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#releasestart\">releasestart</a> + <a class=\"id\" href=\"#msecs_to_jiffies\">msecs_to_jiffies</a>(<a class=\"id\" href=\"#brl_timeout\">brl_timeout</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#committing\">committing</a> = <a class=\"id\" href=\"#pressed\">pressed</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#releasestart\">releasestart</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pressed\">pressed</a> &= ~(1 << (<a class=\"id\" href=\"#value\">value</a> - 1));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pressed\">pressed</a> && <a class=\"id\" href=\"#committing\">committing</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k_brlcommit\">k_brlcommit</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#committing\">committing</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#committing\">committing</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#committing\">committing</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k_brlcommit\">k_brlcommit</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#committing\">committing</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#committing\">committing</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pressed\">pressed</a> &= ~(1 << (<a class=\"id\" href=\"#value\">value</a> - 1));", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The leds display either (i) the status of NumLock, CapsLock, ScrollLock,</span>", 
"<span class=\"comment\"> * or (ii) whatever pattern of lights people want to show using KDSETLED,</span>", 
"<span class=\"comment\"> * or (iii) specified bits of specified words in kernel memory.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned char <a class=\"id\" href=\"#getledstate\">getledstate</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ledstate\">ledstate</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#setledstate\">setledstate</a>(struct <a class=\"id\" href=\"#kbd_struct\">kbd_struct</a> *<a class=\"id\" href=\"#kbd\">kbd</a>, unsigned int <a class=\"id\" href=\"#led\">led</a>)", 
"{", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#led\">led</a> &amp; ~7)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ledioctl\">ledioctl</a> = <a class=\"id\" href=\"#led\">led</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kbd\">kbd</a>-><a class=\"id\" href=\"#ledmode\">ledmode</a> = <a class=\"id\" href=\"#LED_SHOW_IOCTL\">LED_SHOW_IOCTL</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kbd\">kbd</a>-><a class=\"id\" href=\"#ledmode\">ledmode</a> = <a class=\"id\" href=\"#LED_SHOW_FLAGS\">LED_SHOW_FLAGS</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_leds\">set_leds</a>();", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned char <a class=\"id\" href=\"#getleds\">getleds</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kbd_struct\">kbd_struct</a> *<a class=\"id\" href=\"#kbd\">kbd</a> = <a class=\"id\" href=\"#kbd_table\">kbd_table</a> + <a class=\"id\" href=\"#fg_console\">fg_console</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#leds\">leds</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kbd\">kbd</a>-><a class=\"id\" href=\"#ledmode\">ledmode</a> == <a class=\"id\" href=\"#LED_SHOW_IOCTL\">LED_SHOW_IOCTL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ledioctl\">ledioctl</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#leds\">leds</a> = <a class=\"id\" href=\"#kbd\">kbd</a>-><a class=\"id\" href=\"#ledflagstate\">ledflagstate</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kbd\">kbd</a>-><a class=\"id\" href=\"#ledmode\">ledmode</a> == <a class=\"id\" href=\"#LED_SHOW_MEM\">LED_SHOW_MEM</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 3; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ledptrs\">ledptrs</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#valid\">valid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#ledptrs\">ledptrs</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#addr\">addr</a> &amp; <a class=\"id\" href=\"#ledptrs\">ledptrs</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#mask\">mask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#leds\">leds</a> |= (1 << <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#leds\">leds</a> &= ~(1 << <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#leds\">leds</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#kbd_update_leds_helper\">kbd_update_leds_helper</a>(struct <a class=\"id\" href=\"#input_handle\">input_handle</a> *<a class=\"id\" href=\"#handle\">handle</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#leds\">leds</a> = *(unsigned char *)<a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#EV_LED\">EV_LED</a>, <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#evbit\">evbit</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_inject_event\">input_inject_event</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#EV_LED\">EV_LED</a>, <a class=\"id\" href=\"#LED_SCROLLL\">LED_SCROLLL</a>, !!(<a class=\"id\" href=\"#leds\">leds</a> &amp; 0x01));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_inject_event\">input_inject_event</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#EV_LED\">EV_LED</a>, <a class=\"id\" href=\"#LED_NUML\">LED_NUML</a>,    !!(<a class=\"id\" href=\"#leds\">leds</a> &amp; 0x02));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_inject_event\">input_inject_event</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#EV_LED\">EV_LED</a>, <a class=\"id\" href=\"#LED_CAPSL\">LED_CAPSL</a>,   !!(<a class=\"id\" href=\"#leds\">leds</a> &amp; 0x04));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_inject_event\">input_inject_event</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#EV_SYN\">EV_SYN</a>, <a class=\"id\" href=\"#SYN_REPORT\">SYN_REPORT</a>, 0);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is the tasklet that updates LED state on all keyboards</span>", 
"<span class=\"comment\"> * attached to the box. The reason we use tasklet is that we</span>", 
"<span class=\"comment\"> * need to handle the scenario when keyboard handler is not</span>", 
"<span class=\"comment\"> * registered yet but we already getting updates form VT to</span>", 
"<span class=\"comment\"> * update led state.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#kbd_bh\">kbd_bh</a>(unsigned long <a class=\"id\" href=\"#dummy\">dummy</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#leds\">leds</a> = <a class=\"id\" href=\"#getleds\">getleds</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#leds\">leds</a> != <a class=\"id\" href=\"#ledstate\">ledstate</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_handler_for_each_handle\">input_handler_for_each_handle</a>(&amp;<a class=\"id\" href=\"#kbd_handler\">kbd_handler</a>, &amp;<a class=\"id\" href=\"#leds\">leds</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#kbd_update_leds_helper\">kbd_update_leds_helper</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ledstate\">ledstate</a> = <a class=\"id\" href=\"#leds\">leds</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<a class=\"id\" href=\"#DECLARE_TASKLET_DISABLED\">DECLARE_TASKLET_DISABLED</a>(<a class=\"id\" href=\"#keyboard_tasklet\">keyboard_tasklet</a>, <a class=\"id\" href=\"#kbd_bh\">kbd_bh</a>, 0);", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_X86\">CONFIG_X86</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IA64\">CONFIG_IA64</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_ALPHA\">CONFIG_ALPHA</a>) ||\\", 
"    <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_MIPS\">CONFIG_MIPS</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_PPC\">CONFIG_PPC</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SPARC\">CONFIG_SPARC</a>) ||\\", 
"    <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_PARISC\">CONFIG_PARISC</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SUPERH\">CONFIG_SUPERH</a>) ||\\", 
"    (<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_ARM\">CONFIG_ARM</a>) && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_KEYBOARD_ATKBD\">CONFIG_KEYBOARD_ATKBD</a>) && !<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_ARCH_RPC\">CONFIG_ARCH_RPC</a>)) ||\\", 
"    <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_AVR32\">CONFIG_AVR32</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HW_RAW\">HW_RAW</a>(<a class=\"id\" href=\"#dev\">dev</a>) (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#EV_MSC\">EV_MSC</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#evbit\">evbit</a>) && <a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#MSC_RAW\">MSC_RAW</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mscbit\">mscbit</a>) &&\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#dev\">dev</a>)-><a class=\"id\" href=\"#id\">id</a>.<a class=\"id\" href=\"#bustype\">bustype</a> == <a class=\"id\" href=\"#BUS_I8042\">BUS_I8042</a>) && ((<a class=\"id\" href=\"#dev\">dev</a>)-><a class=\"id\" href=\"#id\">id</a>.<a class=\"id\" href=\"#vendor\">vendor</a> == 0x0001) && ((<a class=\"id\" href=\"#dev\">dev</a>)-><a class=\"id\" href=\"#id\">id</a>.<a class=\"id\" href=\"#product\">product</a> == 0x0001))", 
"", 
"static const unsigned short <a class=\"id\" href=\"#x86_keycodes\">x86_keycodes</a>[256] =", 
"<span class=\"ts\"/>{ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,", 
"<span class=\"ts\"/> 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,", 
"<span class=\"ts\"/> 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,", 
"<span class=\"ts\"/> 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,", 
"<span class=\"ts\"/> 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,", 
"<span class=\"ts\"/> 80, 81, 82, 83, 84,118, 86, 87, 88,115,120,119,121,112,123, 92,", 
"<span class=\"ts\"/>284,285,309,  0,312, 91,327,328,329,331,333,335,336,337,338,339,", 
"<span class=\"ts\"/>367,288,302,304,350, 89,334,326,267,126,268,269,125,347,348,349,", 
"<span class=\"ts\"/>360,261,262,263,268,376,100,101,321,316,373,286,289,102,351,355,", 
"<span class=\"ts\"/>103,104,105,275,287,279,258,106,274,107,294,364,358,363,362,361,", 
"<span class=\"ts\"/>291,108,381,281,290,272,292,305,280, 99,112,257,306,359,113,114,", 
"<span class=\"ts\"/>264,117,271,374,379,265,266, 93, 94, 95, 85,259,375,260, 90,116,", 
"<span class=\"ts\"/>377,109,111,277,278,282,283,295,296,297,299,300,301,293,303,307,", 
"<span class=\"ts\"/>308,310,313,314,315,317,318,319,320,357,322,323,324,325,276,330,", 
"<span class=\"ts\"/>332,340,365,342,343,344,345,346,356,270,341,368,369,370,371,372 };", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SPARC\">CONFIG_SPARC</a>", 
"static int <a class=\"id\" href=\"#sparc_l1_a_state\">sparc_l1_a_state</a>;", 
"extern void <a class=\"id\" href=\"#sun_do_break\">sun_do_break</a>(void);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static int <a class=\"id\" href=\"#emulate_raw\">emulate_raw</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>, unsigned int <a class=\"id\" href=\"#keycode\">keycode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       unsigned char <a class=\"id\" href=\"#up_flag\">up_flag</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#code\">code</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#keycode\">keycode</a>) {", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#KEY_PAUSE\">KEY_PAUSE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_queue\">put_queue</a>(<a class=\"id\" href=\"#vc\">vc</a>, 0xe1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_queue\">put_queue</a>(<a class=\"id\" href=\"#vc\">vc</a>, 0x1d | <a class=\"id\" href=\"#up_flag\">up_flag</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_queue\">put_queue</a>(<a class=\"id\" href=\"#vc\">vc</a>, 0x45 | <a class=\"id\" href=\"#up_flag\">up_flag</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#KEY_HANGEUL\">KEY_HANGEUL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#up_flag\">up_flag</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_queue\">put_queue</a>(<a class=\"id\" href=\"#vc\">vc</a>, 0xf2);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#KEY_HANJA\">KEY_HANJA</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#up_flag\">up_flag</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_queue\">put_queue</a>(<a class=\"id\" href=\"#vc\">vc</a>, 0xf1);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#KEY_SYSRQ\">KEY_SYSRQ</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Real AT keyboards (that's what we're trying</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to emulate here emit 0xe0 0x2a 0xe0 0x37 when</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * pressing PrtSc/SysRq alone, but simply 0x54</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * when pressing Alt+PrtSc/SysRq.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#KEY_LEFTALT\">KEY_LEFTALT</a>, <a class=\"id\" href=\"#key_down\">key_down</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#KEY_RIGHTALT\">KEY_RIGHTALT</a>, <a class=\"id\" href=\"#key_down\">key_down</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_queue\">put_queue</a>(<a class=\"id\" href=\"#vc\">vc</a>, 0x54 | <a class=\"id\" href=\"#up_flag\">up_flag</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_queue\">put_queue</a>(<a class=\"id\" href=\"#vc\">vc</a>, 0xe0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_queue\">put_queue</a>(<a class=\"id\" href=\"#vc\">vc</a>, 0x2a | <a class=\"id\" href=\"#up_flag\">up_flag</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_queue\">put_queue</a>(<a class=\"id\" href=\"#vc\">vc</a>, 0xe0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_queue\">put_queue</a>(<a class=\"id\" href=\"#vc\">vc</a>, 0x37 | <a class=\"id\" href=\"#up_flag\">up_flag</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#keycode\">keycode</a> &gt; 255)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#code\">code</a> = <a class=\"id\" href=\"#x86_keycodes\">x86_keycodes</a>[<a class=\"id\" href=\"#keycode\">keycode</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#code\">code</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#code\">code</a> &amp; 0x100)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_queue\">put_queue</a>(<a class=\"id\" href=\"#vc\">vc</a>, 0xe0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_queue\">put_queue</a>(<a class=\"id\" href=\"#vc\">vc</a>, (<a class=\"id\" href=\"#code\">code</a> &amp; 0x7f) | <a class=\"id\" href=\"#up_flag\">up_flag</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#else", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HW_RAW\">HW_RAW</a>(<a class=\"id\" href=\"#dev\">dev</a>)<span class=\"ts\"/>0", 
"", 
"static int <a class=\"id\" href=\"#emulate_raw\">emulate_raw</a>(struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a>, unsigned int <a class=\"id\" href=\"#keycode\">keycode</a>, unsigned char <a class=\"id\" href=\"#up_flag\">up_flag</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#keycode\">keycode</a> &gt; 127)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_queue\">put_queue</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#keycode\">keycode</a> | <a class=\"id\" href=\"#up_flag\">up_flag</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static void <a class=\"id\" href=\"#kbd_rawcode\">kbd_rawcode</a>(unsigned char <a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a> = <a class=\"id\" href=\"#vc_cons\">vc_cons</a>[<a class=\"id\" href=\"#fg_console\">fg_console</a>].<a class=\"id\" href=\"#d\">d</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kbd\">kbd</a> = <a class=\"id\" href=\"#kbd_table\">kbd_table</a> + <a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#vc_num\">vc_num</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kbd\">kbd</a>-><a class=\"id\" href=\"#kbdmode\">kbdmode</a> == <a class=\"id\" href=\"#VC_RAW\">VC_RAW</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_queue\">put_queue</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#kbd_keycode\">kbd_keycode</a>(unsigned int <a class=\"id\" href=\"#keycode\">keycode</a>, int <a class=\"id\" href=\"#down\">down</a>, int <a class=\"id\" href=\"#hw_raw\">hw_raw</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vc_data\">vc_data</a> *<a class=\"id\" href=\"#vc\">vc</a> = <a class=\"id\" href=\"#vc_cons\">vc_cons</a>[<a class=\"id\" href=\"#fg_console\">fg_console</a>].<a class=\"id\" href=\"#d\">d</a>;", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#keysym\">keysym</a>, *<a class=\"id\" href=\"#key_map\">key_map</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#raw_mode\">raw_mode</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tty_struct\">tty_struct</a> *<a class=\"id\" href=\"#tty\">tty</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#shift_final\">shift_final</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#keyboard_notifier_param\">keyboard_notifier_param</a> <a class=\"id\" href=\"#param\">param</a> = { .<a class=\"id\" href=\"#vc\">vc</a> = <a class=\"id\" href=\"#vc\">vc</a>, .<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#keycode\">keycode</a>, .<a class=\"id\" href=\"#down\">down</a> = <a class=\"id\" href=\"#down\">down</a> };", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tty\">tty</a> = <a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#port\">port</a>.<a class=\"id\" href=\"#tty\">tty</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tty\">tty</a> && (!<a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#driver_data\">driver_data</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* No driver data? Strange. Okay we fix it then. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tty\">tty</a>-><a class=\"id\" href=\"#driver_data\">driver_data</a> = <a class=\"id\" href=\"#vc\">vc</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kbd\">kbd</a> = <a class=\"id\" href=\"#kbd_table\">kbd_table</a> + <a class=\"id\" href=\"#vc\">vc</a>-><a class=\"id\" href=\"#vc_num\">vc_num</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SPARC\">CONFIG_SPARC</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#keycode\">keycode</a> == <a class=\"id\" href=\"#KEY_STOP\">KEY_STOP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sparc_l1_a_state\">sparc_l1_a_state</a> = <a class=\"id\" href=\"#down\">down</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rep\">rep</a> = (<a class=\"id\" href=\"#down\">down</a> == 2);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_mode\">raw_mode</a> = (<a class=\"id\" href=\"#kbd\">kbd</a>-><a class=\"id\" href=\"#kbdmode\">kbdmode</a> == <a class=\"id\" href=\"#VC_RAW\">VC_RAW</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#raw_mode\">raw_mode</a> && !<a class=\"id\" href=\"#hw_raw\">hw_raw</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#emulate_raw\">emulate_raw</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#keycode\">keycode</a>, !<a class=\"id\" href=\"#down\">down</a> << 7))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#keycode\">keycode</a> &lt; <a class=\"id\" href=\"#BTN_MISC\">BTN_MISC</a> && <a class=\"id\" href=\"#printk_ratelimit\">printk_ratelimit</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"can't emulate rawmode for keycode %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#keycode\">keycode</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SPARC\">CONFIG_SPARC</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#keycode\">keycode</a> == <a class=\"id\" href=\"#KEY_A\">KEY_A</a> && <a class=\"id\" href=\"#sparc_l1_a_state\">sparc_l1_a_state</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sparc_l1_a_state\">sparc_l1_a_state</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sun_do_break\">sun_do_break</a>();", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kbd\">kbd</a>-><a class=\"id\" href=\"#kbdmode\">kbdmode</a> == <a class=\"id\" href=\"#VC_MEDIUMRAW\">VC_MEDIUMRAW</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This is extended medium raw mode, with keys above 127</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * encoded as 0, high 7 bits, low 7 bits, with the 0 bearing</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the 'up' flag if needed. 0 is reserved, so this shouldn't</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * interfere with anything else. The two bytes after 0 will</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * always have the up flag set not to interfere with older</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * applications. This allows for 16384 different keycodes,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * which should be enough.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#keycode\">keycode</a> &lt; 128) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_queue\">put_queue</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#keycode\">keycode</a> | (!<a class=\"id\" href=\"#down\">down</a> << 7));", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_queue\">put_queue</a>(<a class=\"id\" href=\"#vc\">vc</a>, !<a class=\"id\" href=\"#down\">down</a> << 7);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_queue\">put_queue</a>(<a class=\"id\" href=\"#vc\">vc</a>, (<a class=\"id\" href=\"#keycode\">keycode</a> >> 7) | 0x80);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_queue\">put_queue</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#keycode\">keycode</a> | 0x80);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_mode\">raw_mode</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#down\">down</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#keycode\">keycode</a>, <a class=\"id\" href=\"#key_down\">key_down</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#keycode\">keycode</a>, <a class=\"id\" href=\"#key_down\">key_down</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rep\">rep</a> &&", 
"<span class=\"ts\"/>    (!<a class=\"id\" href=\"#vc_kbd_mode\">vc_kbd_mode</a>(<a class=\"id\" href=\"#kbd\">kbd</a>, <a class=\"id\" href=\"#VC_REPEAT\">VC_REPEAT</a>) ||", 
"<span class=\"ts\"/>     (<a class=\"id\" href=\"#tty\">tty</a> && !<a class=\"id\" href=\"#L_ECHO\">L_ECHO</a>(<a class=\"id\" href=\"#tty\">tty</a>) && <a class=\"id\" href=\"#tty_chars_in_buffer\">tty_chars_in_buffer</a>(<a class=\"id\" href=\"#tty\">tty</a>)))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Don't repeat a key if the input buffers are not empty and the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * characters get aren't echoed locally. This makes key repeat</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * usable with slow applications and under heavy loads.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#param\">param</a>.<a class=\"id\" href=\"#shift\">shift</a> = <a class=\"id\" href=\"#shift_final\">shift_final</a> = (<a class=\"id\" href=\"#shift_state\">shift_state</a> | <a class=\"id\" href=\"#kbd\">kbd</a>-><a class=\"id\" href=\"#slockstate\">slockstate</a>) ^ <a class=\"id\" href=\"#kbd\">kbd</a>-><a class=\"id\" href=\"#lockstate\">lockstate</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#param\">param</a>.<a class=\"id\" href=\"#ledstate\">ledstate</a> = <a class=\"id\" href=\"#kbd\">kbd</a>-><a class=\"id\" href=\"#ledflagstate\">ledflagstate</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#key_map\">key_map</a> = <a class=\"id\" href=\"#key_maps\">key_maps</a>[<a class=\"id\" href=\"#shift_final\">shift_final</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#atomic_notifier_call_chain\">atomic_notifier_call_chain</a>(&amp;<a class=\"id\" href=\"#keyboard_notifier_list\">keyboard_notifier_list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#KBD_KEYCODE\">KBD_KEYCODE</a>, &amp;<a class=\"id\" href=\"#param\">param</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == <a class=\"id\" href=\"#NOTIFY_STOP\">NOTIFY_STOP</a> || !<a class=\"id\" href=\"#key_map\">key_map</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_notifier_call_chain\">atomic_notifier_call_chain</a>(&amp;<a class=\"id\" href=\"#keyboard_notifier_list\">keyboard_notifier_list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#KBD_UNBOUND_KEYCODE\">KBD_UNBOUND_KEYCODE</a>, &amp;<a class=\"id\" href=\"#param\">param</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#compute_shiftstate\">compute_shiftstate</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kbd\">kbd</a>-><a class=\"id\" href=\"#slockstate\">slockstate</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#keycode\">keycode</a> &lt; <a class=\"id\" href=\"#NR_KEYS\">NR_KEYS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#keysym\">keysym</a> = <a class=\"id\" href=\"#key_map\">key_map</a>[<a class=\"id\" href=\"#keycode\">keycode</a>];", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#keycode\">keycode</a> >= <a class=\"id\" href=\"#KEY_BRL_DOT1\">KEY_BRL_DOT1</a> && <a class=\"id\" href=\"#keycode\">keycode</a> <= <a class=\"id\" href=\"#KEY_BRL_DOT8\">KEY_BRL_DOT8</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#keysym\">keysym</a> = <a class=\"id\" href=\"#U\">U</a>(<a class=\"id\" href=\"#K\">K</a>(<a class=\"id\" href=\"#KT_BRL\">KT_BRL</a>, <a class=\"id\" href=\"#keycode\">keycode</a> - <a class=\"id\" href=\"#KEY_BRL_DOT1\">KEY_BRL_DOT1</a> + 1));", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#KTYP\">KTYP</a>(<a class=\"id\" href=\"#keysym\">keysym</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> &lt; 0xf0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#param\">param</a>.<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#keysym\">keysym</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#atomic_notifier_call_chain\">atomic_notifier_call_chain</a>(&amp;<a class=\"id\" href=\"#keyboard_notifier_list\">keyboard_notifier_list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#KBD_UNICODE\">KBD_UNICODE</a>, &amp;<a class=\"id\" href=\"#param\">param</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> != <a class=\"id\" href=\"#NOTIFY_STOP\">NOTIFY_STOP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#down\">down</a> && !<a class=\"id\" href=\"#raw_mode\">raw_mode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to_utf8\">to_utf8</a>(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#keysym\">keysym</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> -= 0xf0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#KT_LETTER\">KT_LETTER</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#KT_LATIN\">KT_LATIN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vc_kbd_led\">vc_kbd_led</a>(<a class=\"id\" href=\"#kbd\">kbd</a>, <a class=\"id\" href=\"#VC_CAPSLOCK\">VC_CAPSLOCK</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#key_map\">key_map</a> = <a class=\"id\" href=\"#key_maps\">key_maps</a>[<a class=\"id\" href=\"#shift_final\">shift_final</a> ^ (1 << <a class=\"id\" href=\"#KG_SHIFT\">KG_SHIFT</a>)];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#key_map\">key_map</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#keysym\">keysym</a> = <a class=\"id\" href=\"#key_map\">key_map</a>[<a class=\"id\" href=\"#keycode\">keycode</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#param\">param</a>.<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#keysym\">keysym</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#atomic_notifier_call_chain\">atomic_notifier_call_chain</a>(&amp;<a class=\"id\" href=\"#keyboard_notifier_list\">keyboard_notifier_list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#KBD_KEYSYM\">KBD_KEYSYM</a>, &amp;<a class=\"id\" href=\"#param\">param</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == <a class=\"id\" href=\"#NOTIFY_STOP\">NOTIFY_STOP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#raw_mode\">raw_mode</a> && <a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#KT_SPEC\">KT_SPEC</a> && <a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#KT_SHIFT\">KT_SHIFT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>(*<a class=\"id\" href=\"#k_handler\">k_handler</a>[<a class=\"id\" href=\"#type\">type</a>])(<a class=\"id\" href=\"#vc\">vc</a>, <a class=\"id\" href=\"#keysym\">keysym</a> &amp; 0xff, !<a class=\"id\" href=\"#down\">down</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#param\">param</a>.<a class=\"id\" href=\"#ledstate\">ledstate</a> = <a class=\"id\" href=\"#kbd\">kbd</a>-><a class=\"id\" href=\"#ledflagstate\">ledflagstate</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_notifier_call_chain\">atomic_notifier_call_chain</a>(&amp;<a class=\"id\" href=\"#keyboard_notifier_list\">keyboard_notifier_list</a>, <a class=\"id\" href=\"#KBD_POST_KEYSYM\">KBD_POST_KEYSYM</a>, &amp;<a class=\"id\" href=\"#param\">param</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#KT_SLOCK\">KT_SLOCK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kbd\">kbd</a>-><a class=\"id\" href=\"#slockstate\">slockstate</a> = 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#kbd_event\">kbd_event</a>(struct <a class=\"id\" href=\"#input_handle\">input_handle</a> *<a class=\"id\" href=\"#handle\">handle</a>, unsigned int <a class=\"id\" href=\"#event_type\">event_type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      unsigned int <a class=\"id\" href=\"#event_code\">event_code</a>, int <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* We are called with interrupts disabled, just take the lock */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#kbd_event_lock\">kbd_event_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event_type\">event_type</a> == <a class=\"id\" href=\"#EV_MSC\">EV_MSC</a> && <a class=\"id\" href=\"#event_code\">event_code</a> == <a class=\"id\" href=\"#MSC_RAW\">MSC_RAW</a> && <a class=\"id\" href=\"#HW_RAW\">HW_RAW</a>(<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kbd_rawcode\">kbd_rawcode</a>(<a class=\"id\" href=\"#value\">value</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event_type\">event_type</a> == <a class=\"id\" href=\"#EV_KEY\">EV_KEY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kbd_keycode\">kbd_keycode</a>(<a class=\"id\" href=\"#event_code\">event_code</a>, <a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#HW_RAW\">HW_RAW</a>(<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#dev\">dev</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#kbd_event_lock\">kbd_event_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tasklet_schedule\">tasklet_schedule</a>(&amp;<a class=\"id\" href=\"#keyboard_tasklet\">keyboard_tasklet</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_poke_blanked_console\">do_poke_blanked_console</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedule_console_callback\">schedule_console_callback</a>();", 
"}", 
"", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#kbd_match\">kbd_match</a>(struct <a class=\"id\" href=\"#input_handler\">input_handler</a> *<a class=\"id\" href=\"#handler\">handler</a>, struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#EV_SND\">EV_SND</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#evbit\">evbit</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#EV_KEY\">EV_KEY</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#evbit\">evbit</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#KEY_RESERVED\">KEY_RESERVED</a>; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#BTN_MISC\">BTN_MISC</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#keybit\">keybit</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#KEY_BRL_DOT1\">KEY_BRL_DOT1</a>; <a class=\"id\" href=\"#i\">i</a> <= <a class=\"id\" href=\"#KEY_BRL_DOT10\">KEY_BRL_DOT10</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#keybit\">keybit</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * When a keyboard (or other input device) is found, the kbd_connect</span>", 
"<span class=\"comment\"> * function is called. The function then looks at the device, and if it</span>", 
"<span class=\"comment\"> * likes it, it can open it and get events from it. In this (kbd_connect)</span>", 
"<span class=\"comment\"> * function, we should decide which VT to bind that keyboard to initially.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#kbd_connect\">kbd_connect</a>(struct <a class=\"id\" href=\"#input_handler\">input_handler</a> *<a class=\"id\" href=\"#handler\">handler</a>, struct <a class=\"id\" href=\"#input_dev\">input_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#input_device_id\">input_device_id</a> *<a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#input_handle\">input_handle</a> *<a class=\"id\" href=\"#handle\">handle</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#input_handle\">input_handle</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#handle\">handle</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#handler\">handler</a> = <a class=\"id\" href=\"#handler\">handler</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#name\">name</a> = \"kbd\";", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#input_register_handle\">input_register_handle</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_free_handle\">err_free_handle</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#input_open_device\">input_open_device</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_unregister_handle\">err_unregister_handle</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
" <a class=\"id\" href=\"#err_unregister_handle\">err_unregister_handle</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#input_unregister_handle\">input_unregister_handle</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
" <a class=\"id\" href=\"#err_free_handle\">err_free_handle</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#kbd_disconnect\">kbd_disconnect</a>(struct <a class=\"id\" href=\"#input_handle\">input_handle</a> *<a class=\"id\" href=\"#handle\">handle</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#input_close_device\">input_close_device</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#input_unregister_handle\">input_unregister_handle</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Start keyboard handler on the new keyboard by refreshing LED state to</span>", 
"<span class=\"comment\"> * match the rest of the system.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#kbd_start\">kbd_start</a>(struct <a class=\"id\" href=\"#input_handle\">input_handle</a> *<a class=\"id\" href=\"#handle\">handle</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tasklet_disable\">tasklet_disable</a>(&amp;<a class=\"id\" href=\"#keyboard_tasklet\">keyboard_tasklet</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ledstate\">ledstate</a> != 0xff)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kbd_update_leds_helper\">kbd_update_leds_helper</a>(<a class=\"id\" href=\"#handle\">handle</a>, &amp;<a class=\"id\" href=\"#ledstate\">ledstate</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tasklet_enable\">tasklet_enable</a>(&amp;<a class=\"id\" href=\"#keyboard_tasklet\">keyboard_tasklet</a>);", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#input_device_id\">input_device_id</a> <a class=\"id\" href=\"#kbd_ids\">kbd_ids</a>[] = {", 
"<span class=\"ts\"/>{", 
"                .<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#INPUT_DEVICE_ID_MATCH_EVBIT\">INPUT_DEVICE_ID_MATCH_EVBIT</a>,", 
"                .<a class=\"id\" href=\"#evbit\">evbit</a> = { <a class=\"id\" href=\"#BIT_MASK\">BIT_MASK</a>(<a class=\"id\" href=\"#EV_KEY\">EV_KEY</a>) },", 
"        },", 
"", 
"<span class=\"ts\"/>{", 
"                .<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#INPUT_DEVICE_ID_MATCH_EVBIT\">INPUT_DEVICE_ID_MATCH_EVBIT</a>,", 
"                .<a class=\"id\" href=\"#evbit\">evbit</a> = { <a class=\"id\" href=\"#BIT_MASK\">BIT_MASK</a>(<a class=\"id\" href=\"#EV_SND\">EV_SND</a>) },", 
"        },", 
"", 
"<span class=\"ts\"/>{ },    <span class=\"comment\">/* Terminating entry */</span>", 
"};", 
"", 
"<a class=\"id\" href=\"#MODULE_DEVICE_TABLE\">MODULE_DEVICE_TABLE</a>(<a class=\"id\" href=\"#input\">input</a>, <a class=\"id\" href=\"#kbd_ids\">kbd_ids</a>);", 
"", 
"static struct <a class=\"id\" href=\"#input_handler\">input_handler</a> <a class=\"id\" href=\"#kbd_handler\">kbd_handler</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#event\">event</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#kbd_event\">kbd_event</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#match\">match</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#kbd_match\">kbd_match</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#connect\">connect</a><span class=\"ts\"/>= <a class=\"id\" href=\"#kbd_connect\">kbd_connect</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#disconnect\">disconnect</a><span class=\"ts\"/>= <a class=\"id\" href=\"#kbd_disconnect\">kbd_disconnect</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#start\">start</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#kbd_start\">kbd_start</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>= \"kbd\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#id_table\">id_table</a><span class=\"ts\"/>= <a class=\"id\" href=\"#kbd_ids\">kbd_ids</a>,", 
"};", 
"", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#kbd_init\">kbd_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"        for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAX_NR_CONSOLES\">MAX_NR_CONSOLES</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kbd_table\">kbd_table</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#ledflagstate\">ledflagstate</a> = <a class=\"id\" href=\"#KBD_DEFLEDS\">KBD_DEFLEDS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kbd_table\">kbd_table</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#default_ledflagstate\">default_ledflagstate</a> = <a class=\"id\" href=\"#KBD_DEFLEDS\">KBD_DEFLEDS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kbd_table\">kbd_table</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#ledmode\">ledmode</a> = <a class=\"id\" href=\"#LED_SHOW_FLAGS\">LED_SHOW_FLAGS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kbd_table\">kbd_table</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#lockstate\">lockstate</a> = <a class=\"id\" href=\"#KBD_DEFLOCK\">KBD_DEFLOCK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kbd_table\">kbd_table</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#slockstate\">slockstate</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kbd_table\">kbd_table</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#modeflags\">modeflags</a> = <a class=\"id\" href=\"#KBD_DEFMODE\">KBD_DEFMODE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kbd_table\">kbd_table</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#kbdmode\">kbdmode</a> = <a class=\"id\" href=\"#default_utf8\">default_utf8</a> ? <a class=\"id\" href=\"#VC_UNICODE\">VC_UNICODE</a> : <a class=\"id\" href=\"#VC_XLATE\">VC_XLATE</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#input_register_handler\">input_register_handler</a>(&amp;<a class=\"id\" href=\"#kbd_handler\">kbd_handler</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tasklet_enable\">tasklet_enable</a>(&amp;<a class=\"id\" href=\"#keyboard_tasklet\">keyboard_tasklet</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tasklet_schedule\">tasklet_schedule</a>(&amp;<a class=\"id\" href=\"#keyboard_tasklet\">keyboard_tasklet</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
];
xr_frag_insert('l/10/72d2d85f525b4198cb818f65da152df443deaa.xr', __xr_tmp);
