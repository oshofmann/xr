var __xr_tmp = [
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a> = <a class=\"id\" href=\"#current_cred\">current_cred</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dentry_has_perm\">dentry_has_perm</a>(<a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#FILE__GETATTR\">FILE__GETATTR</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#selinux_inode_listxattr\">selinux_inode_listxattr</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a> = <a class=\"id\" href=\"#current_cred\">current_cred</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dentry_has_perm\">dentry_has_perm</a>(<a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#FILE__GETATTR\">FILE__GETATTR</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#selinux_inode_removexattr\">selinux_inode_removexattr</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#XATTR_NAME_SELINUX\">XATTR_NAME_SELINUX</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#selinux_inode_setotherxattr\">selinux_inode_setotherxattr</a>(<a class=\"id\" href=\"#dentry\">dentry</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* No one is allowed to remove a SELinux security label.</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   You can change the label, but all data must be labeled. */</span>", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EACCES\">EACCES</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copy the inode security context value to the user.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Permission check is handled by selinux_inode_getxattr hook.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#selinux_inode_getsecurity\">selinux_inode_getsecurity</a>(const struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, const char *<a class=\"id\" href=\"#name\">name</a>, void **<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#alloc\">alloc</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#context\">context</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode_security_struct\">inode_security_struct</a> *<a class=\"id\" href=\"#isec\">isec</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_security\">i_security</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#XATTR_SELINUX_SUFFIX\">XATTR_SELINUX_SUFFIX</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the caller has CAP_MAC_ADMIN, then get the raw context</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * value even if it is not defined by current policy; otherwise,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * use the in-core value under current policy.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Use the non-auditing forms of the permission checks since</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * getxattr may be called by unprivileged processes commonly</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and lack of permission just means that we fall back to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in-core context value, not a denial.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#selinux_capable\">selinux_capable</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#current_cred\">current_cred</a>(), <a class=\"id\" href=\"#CAP_MAC_ADMIN\">CAP_MAC_ADMIN</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SECURITY_CAP_NOAUDIT\">SECURITY_CAP_NOAUDIT</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#security_sid_to_context_force\">security_sid_to_context_force</a>(<a class=\"id\" href=\"#isec\">isec</a>-><a class=\"id\" href=\"#sid\">sid</a>, &amp;<a class=\"id\" href=\"#context\">context</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      &amp;<a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#security_sid_to_context\">security_sid_to_context</a>(<a class=\"id\" href=\"#isec\">isec</a>-><a class=\"id\" href=\"#sid\">sid</a>, &amp;<a class=\"id\" href=\"#context\">context</a>, &amp;<a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#alloc\">alloc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#context\">context</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_nofree\">out_nofree</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#context\">context</a>);", 
"<a class=\"id\" href=\"#out_nofree\">out_nofree</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#selinux_inode_setsecurity\">selinux_inode_setsecurity</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const void *<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode_security_struct\">inode_security_struct</a> *<a class=\"id\" href=\"#isec\">isec</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_security\">i_security</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#newsid\">newsid</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#XATTR_SELINUX_SUFFIX\">XATTR_SELINUX_SUFFIX</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#value\">value</a> || !<a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EACCES\">EACCES</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#security_context_to_sid\">security_context_to_sid</a>((void *)<a class=\"id\" href=\"#value\">value</a>, <a class=\"id\" href=\"#size\">size</a>, &amp;<a class=\"id\" href=\"#newsid\">newsid</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#isec\">isec</a>-><a class=\"id\" href=\"#sid\">sid</a> = <a class=\"id\" href=\"#newsid\">newsid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#isec\">isec</a>-><a class=\"id\" href=\"#initialized\">initialized</a> = 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#selinux_inode_listsecurity\">selinux_inode_listsecurity</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, char *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#buffer_size\">buffer_size</a>)", 
"{", 
"<span class=\"ts\"/>const int <a class=\"id\" href=\"#len\">len</a> = sizeof(<a class=\"id\" href=\"#XATTR_NAME_SELINUX\">XATTR_NAME_SELINUX</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer\">buffer</a> && <a class=\"id\" href=\"#len\">len</a> <= <a class=\"id\" href=\"#buffer_size\">buffer_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#XATTR_NAME_SELINUX\">XATTR_NAME_SELINUX</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#len\">len</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#selinux_inode_getsecid\">selinux_inode_getsecid</a>(const struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#secid\">secid</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode_security_struct\">inode_security_struct</a> *<a class=\"id\" href=\"#isec\">isec</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_security\">i_security</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#secid\">secid</a> = <a class=\"id\" href=\"#isec\">isec</a>-><a class=\"id\" href=\"#sid\">sid</a>;", 
"}", 
"", 
"<span class=\"comment\">/* file security operations */</span>", 
"", 
"static int <a class=\"id\" href=\"#selinux_revalidate_file_permission\">selinux_revalidate_file_permission</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, int <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a> = <a class=\"id\" href=\"#current_cred\">current_cred</a>();", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* file_mask_to_av won't add FILE__WRITE if MAY_APPEND is set */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a> &amp; <a class=\"id\" href=\"#O_APPEND\">O_APPEND</a>) && (<a class=\"id\" href=\"#mask\">mask</a> &amp; <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> |= <a class=\"id\" href=\"#MAY_APPEND\">MAY_APPEND</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#file_has_perm\">file_has_perm</a>(<a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#file\">file</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#file_mask_to_av\">file_mask_to_av</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>, <a class=\"id\" href=\"#mask\">mask</a>));", 
"}", 
"", 
"static int <a class=\"id\" href=\"#selinux_file_permission\">selinux_file_permission</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, int <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_security_struct\">file_security_struct</a> *<a class=\"id\" href=\"#fsec\">fsec</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_security\">f_security</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode_security_struct\">inode_security_struct</a> *<a class=\"id\" href=\"#isec\">isec</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_security\">i_security</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sid\">sid</a> = <a class=\"id\" href=\"#current_sid\">current_sid</a>();", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mask\">mask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* No permission to check.  Existence test. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sid\">sid</a> == <a class=\"id\" href=\"#fsec\">fsec</a>-><a class=\"id\" href=\"#sid\">sid</a> && <a class=\"id\" href=\"#fsec\">fsec</a>-><a class=\"id\" href=\"#isid\">isid</a> == <a class=\"id\" href=\"#isec\">isec</a>-><a class=\"id\" href=\"#sid\">sid</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#fsec\">fsec</a>-><a class=\"id\" href=\"#pseqno\">pseqno</a> == <a class=\"id\" href=\"#avc_policy_seqno\">avc_policy_seqno</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* No change since dentry_open check. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#selinux_revalidate_file_permission\">selinux_revalidate_file_permission</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#selinux_file_alloc_security\">selinux_file_alloc_security</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#file_alloc_security\">file_alloc_security</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#selinux_file_free_security\">selinux_file_free_security</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file_free_security\">file_free_security</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#selinux_file_ioctl\">selinux_file_ioctl</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a> = <a class=\"id\" href=\"#current_cred\">current_cred</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#av\">av</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#_IOC_DIR\">_IOC_DIR</a>(<a class=\"id\" href=\"#cmd\">cmd</a>) &amp; <a class=\"id\" href=\"#_IOC_WRITE\">_IOC_WRITE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#av\">av</a> |= <a class=\"id\" href=\"#FILE__WRITE\">FILE__WRITE</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#_IOC_DIR\">_IOC_DIR</a>(<a class=\"id\" href=\"#cmd\">cmd</a>) &amp; <a class=\"id\" href=\"#_IOC_READ\">_IOC_READ</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#av\">av</a> |= <a class=\"id\" href=\"#FILE__READ\">FILE__READ</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#av\">av</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#av\">av</a> = <a class=\"id\" href=\"#FILE__IOCTL\">FILE__IOCTL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#file_has_perm\">file_has_perm</a>(<a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#av\">av</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#default_noexec\">default_noexec</a>;", 
"", 
"static int <a class=\"id\" href=\"#file_map_prot_check\">file_map_prot_check</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, unsigned long <a class=\"id\" href=\"#prot\">prot</a>, int <a class=\"id\" href=\"#shared\">shared</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a> = <a class=\"id\" href=\"#current_cred\">current_cred</a>();", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#default_noexec\">default_noexec</a> &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#prot\">prot</a> &amp; <a class=\"id\" href=\"#PROT_EXEC\">PROT_EXEC</a>) && (!<a class=\"id\" href=\"#file\">file</a> || (!<a class=\"id\" href=\"#shared\">shared</a> && (<a class=\"id\" href=\"#prot\">prot</a> &amp; <a class=\"id\" href=\"#PROT_WRITE\">PROT_WRITE</a>)))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We are making executable an anonymous mapping or a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * private file mapping that will also be writable.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This has an additional check.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#cred_has_perm\">cred_has_perm</a>(<a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#PROCESS__EXECMEM\">PROCESS__EXECMEM</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* read access is always possible with a mapping */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#av\">av</a> = <a class=\"id\" href=\"#FILE__READ\">FILE__READ</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* write access only matters if the mapping is shared */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#shared\">shared</a> && (<a class=\"id\" href=\"#prot\">prot</a> &amp; <a class=\"id\" href=\"#PROT_WRITE\">PROT_WRITE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#av\">av</a> |= <a class=\"id\" href=\"#FILE__WRITE\">FILE__WRITE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#prot\">prot</a> &amp; <a class=\"id\" href=\"#PROT_EXEC\">PROT_EXEC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#av\">av</a> |= <a class=\"id\" href=\"#FILE__EXECUTE\">FILE__EXECUTE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#file_has_perm\">file_has_perm</a>(<a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#av\">av</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#error\">error</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#selinux_file_mmap\">selinux_file_mmap</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, unsigned long <a class=\"id\" href=\"#reqprot\">reqprot</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#prot\">prot</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#addr_only\">addr_only</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sid\">sid</a> = <a class=\"id\" href=\"#current_sid\">current_sid</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * notice that we are intentionally putting the SELinux check before</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the secondary cap_file_mmap check.  This is such a likely attempt</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * at bad behaviour/exploit that we always want to get the AVC, even</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if DAC would have also denied the operation.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#CONFIG_LSM_MMAP_MIN_ADDR\">CONFIG_LSM_MMAP_MIN_ADDR</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#avc_has_perm\">avc_has_perm</a>(<a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#SECCLASS_MEMPROTECT\">SECCLASS_MEMPROTECT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#MEMPROTECT__MMAP_ZERO\">MEMPROTECT__MMAP_ZERO</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* do DAC check on address space usage */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#cap_file_mmap\">cap_file_mmap</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#reqprot\">reqprot</a>, <a class=\"id\" href=\"#prot\">prot</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#addr_only\">addr_only</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> || <a class=\"id\" href=\"#addr_only\">addr_only</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#selinux_checkreqprot\">selinux_checkreqprot</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prot\">prot</a> = <a class=\"id\" href=\"#reqprot\">reqprot</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#file_map_prot_check\">file_map_prot_check</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#prot\">prot</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MAP_TYPE\">MAP_TYPE</a>) == <a class=\"id\" href=\"#MAP_SHARED\">MAP_SHARED</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#selinux_file_mprotect\">selinux_file_mprotect</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#reqprot\">reqprot</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#prot\">prot</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a> = <a class=\"id\" href=\"#current_cred\">current_cred</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#selinux_checkreqprot\">selinux_checkreqprot</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prot\">prot</a> = <a class=\"id\" href=\"#reqprot\">reqprot</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#default_noexec\">default_noexec</a> &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#prot\">prot</a> &amp; <a class=\"id\" href=\"#PROT_EXEC\">PROT_EXEC</a>) && !(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_EXEC\">VM_EXEC</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> >= <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>-><a class=\"id\" href=\"#start_brk\">start_brk</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> <= <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>-><a class=\"id\" href=\"#brk\">brk</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#cred_has_perm\">cred_has_perm</a>(<a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#PROCESS__EXECHEAP\">PROCESS__EXECHEAP</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (!<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a> <= <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>-><a class=\"id\" href=\"#start_stack\">start_stack</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> >= <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>-><a class=\"id\" href=\"#start_stack\">start_stack</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#current_has_perm\">current_has_perm</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#PROCESS__EXECSTACK\">PROCESS__EXECSTACK</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a> && <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We are making executable a file mapping that has</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * had some COW done. Since pages might have been</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * written, check ability to execute the possibly</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * modified content.  This typically should only</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * occur for text relocations.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#file_has_perm\">file_has_perm</a>(<a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>, <a class=\"id\" href=\"#FILE__EXECMOD\">FILE__EXECMOD</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#file_map_prot_check\">file_map_prot_check</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>, <a class=\"id\" href=\"#prot\">prot</a>, <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a>&amp;<a class=\"id\" href=\"#VM_SHARED\">VM_SHARED</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#selinux_file_lock\">selinux_file_lock</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a> = <a class=\"id\" href=\"#current_cred\">current_cred</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#file_has_perm\">file_has_perm</a>(<a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#FILE__LOCK\">FILE__LOCK</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#selinux_file_fcntl\">selinux_file_fcntl</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a> = <a class=\"id\" href=\"#current_cred\">current_cred</a>();", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#cmd\">cmd</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_SETFL\">F_SETFL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a> || !<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_flags\">f_flags</a> &amp; <a class=\"id\" href=\"#O_APPEND\">O_APPEND</a>) && !(<a class=\"id\" href=\"#arg\">arg</a> &amp; <a class=\"id\" href=\"#O_APPEND\">O_APPEND</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#file_has_perm\">file_has_perm</a>(<a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#FILE__WRITE\">FILE__WRITE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fall through */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_SETOWN\">F_SETOWN</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_SETSIG\">F_SETSIG</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_GETFL\">F_GETFL</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_GETOWN\">F_GETOWN</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_GETSIG\">F_GETSIG</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Just check FD__USE permission */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#file_has_perm\">file_has_perm</a>(<a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#file\">file</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_GETLK\">F_GETLK</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_SETLK\">F_SETLK</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_SETLKW\">F_SETLKW</a>:", 
"#if <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> == 32", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_GETLK64\">F_GETLK64</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_SETLK64\">F_SETLK64</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#F_SETLKW64\">F_SETLKW64</a>:", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a> || !<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#file_has_perm\">file_has_perm</a>(<a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#FILE__LOCK\">FILE__LOCK</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#selinux_file_set_fowner\">selinux_file_set_fowner</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_security_struct\">file_security_struct</a> *<a class=\"id\" href=\"#fsec\">fsec</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsec\">fsec</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_security\">f_security</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsec\">fsec</a>-><a class=\"id\" href=\"#fown_sid\">fown_sid</a> = <a class=\"id\" href=\"#current_sid\">current_sid</a>();", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#selinux_file_send_sigiotask\">selinux_file_send_sigiotask</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#fown_struct\">fown_struct</a> *<a class=\"id\" href=\"#fown\">fown</a>, int <a class=\"id\" href=\"#signum\">signum</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sid\">sid</a> = <a class=\"id\" href=\"#task_sid\">task_sid</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#perm\">perm</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_security_struct\">file_security_struct</a> *<a class=\"id\" href=\"#fsec\">fsec</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* struct fown_struct is never outside the context of a struct file */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#fown\">fown</a>, struct <a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#f_owner\">f_owner</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsec\">fsec</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_security\">f_security</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#signum\">signum</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perm\">perm</a> = <a class=\"id\" href=\"#signal_to_av\">signal_to_av</a>(<a class=\"id\" href=\"#SIGIO\">SIGIO</a>); <span class=\"comment\">/* as per send_sigio_to_task */</span>", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perm\">perm</a> = <a class=\"id\" href=\"#signal_to_av\">signal_to_av</a>(<a class=\"id\" href=\"#signum\">signum</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#avc_has_perm\">avc_has_perm</a>(<a class=\"id\" href=\"#fsec\">fsec</a>-><a class=\"id\" href=\"#fown_sid\">fown_sid</a>, <a class=\"id\" href=\"#sid\">sid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#SECCLASS_PROCESS\">SECCLASS_PROCESS</a>, <a class=\"id\" href=\"#perm\">perm</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#selinux_file_receive\">selinux_file_receive</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a> = <a class=\"id\" href=\"#current_cred\">current_cred</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#file_has_perm\">file_has_perm</a>(<a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#file_to_av\">file_to_av</a>(<a class=\"id\" href=\"#file\">file</a>));", 
"}", 
"", 
"static int <a class=\"id\" href=\"#selinux_dentry_open\">selinux_dentry_open</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_security_struct\">file_security_struct</a> *<a class=\"id\" href=\"#fsec\">fsec</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode_security_struct\">inode_security_struct</a> *<a class=\"id\" href=\"#isec\">isec</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsec\">fsec</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_security\">f_security</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#isec\">isec</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_security\">i_security</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Save inode label and policy sequence number</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * at open-time so that selinux_file_permission</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * can determine whether revalidation is necessary.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Task label is already saved in the file security</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * struct as its SID.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsec\">fsec</a>-><a class=\"id\" href=\"#isid\">isid</a> = <a class=\"id\" href=\"#isec\">isec</a>-><a class=\"id\" href=\"#sid\">sid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsec\">fsec</a>-><a class=\"id\" href=\"#pseqno\">pseqno</a> = <a class=\"id\" href=\"#avc_policy_seqno\">avc_policy_seqno</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Since the inode label or policy seqno may have changed</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * between the selinux_inode_permission check and the saving</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of state above, recheck that access is still permitted.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Otherwise, access might never be revalidated against the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * new inode label or new policy.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This check is not redundant - do not remove.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#inode_has_perm\">inode_has_perm</a>(<a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#open_file_to_av\">open_file_to_av</a>(<a class=\"id\" href=\"#file\">file</a>), <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"<span class=\"comment\">/* task security operations */</span>", 
"", 
"static int <a class=\"id\" href=\"#selinux_task_create\">selinux_task_create</a>(unsigned long <a class=\"id\" href=\"#clone_flags\">clone_flags</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#current_has_perm\">current_has_perm</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#PROCESS__FORK\">PROCESS__FORK</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * allocate the SELinux part of blank credentials</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#selinux_cred_alloc_blank\">selinux_cred_alloc_blank</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_security_struct\">task_security_struct</a> *<a class=\"id\" href=\"#tsec\">tsec</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsec\">tsec</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#task_security_struct\">task_security_struct</a>), <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tsec\">tsec</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#security\">security</a> = <a class=\"id\" href=\"#tsec\">tsec</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * detach and free the LSM part of a set of credentials</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#selinux_cred_free\">selinux_cred_free</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_security_struct\">task_security_struct</a> *<a class=\"id\" href=\"#tsec\">tsec</a> = <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#security\">security</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>((unsigned long) <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#security\">security</a> &lt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#security\">security</a> = (void *) 0x7UL;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#tsec\">tsec</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * prepare a new set of credentials for modification</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#selinux_cred_prepare\">selinux_cred_prepare</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#new\">new</a>, const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#old\">old</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#task_security_struct\">task_security_struct</a> *<a class=\"id\" href=\"#old_tsec\">old_tsec</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_security_struct\">task_security_struct</a> *<a class=\"id\" href=\"#tsec\">tsec</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_tsec\">old_tsec</a> = <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#security\">security</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsec\">tsec</a> = <a class=\"id\" href=\"#kmemdup\">kmemdup</a>(<a class=\"id\" href=\"#old_tsec\">old_tsec</a>, sizeof(struct <a class=\"id\" href=\"#task_security_struct\">task_security_struct</a>), <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tsec\">tsec</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#security\">security</a> = <a class=\"id\" href=\"#tsec\">tsec</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * transfer the SELinux data to a blank set of creds</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#selinux_cred_transfer\">selinux_cred_transfer</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#new\">new</a>, const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#old\">old</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#task_security_struct\">task_security_struct</a> *<a class=\"id\" href=\"#old_tsec\">old_tsec</a> = <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#security\">security</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_security_struct\">task_security_struct</a> *<a class=\"id\" href=\"#tsec\">tsec</a> = <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#security\">security</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#tsec\">tsec</a> = *<a class=\"id\" href=\"#old_tsec\">old_tsec</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * set the security data for a kernel service</span>", 
"<span class=\"comment\"> * - all the creation contexts are set to unlabelled</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#selinux_kernel_act_as\">selinux_kernel_act_as</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#secid\">secid</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_security_struct\">task_security_struct</a> *<a class=\"id\" href=\"#tsec\">tsec</a> = <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#security\">security</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sid\">sid</a> = <a class=\"id\" href=\"#current_sid\">current_sid</a>();", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#avc_has_perm\">avc_has_perm</a>(<a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#secid\">secid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#SECCLASS_KERNEL_SERVICE\">SECCLASS_KERNEL_SERVICE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#KERNEL_SERVICE__USE_AS_OVERRIDE\">KERNEL_SERVICE__USE_AS_OVERRIDE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsec\">tsec</a>-><a class=\"id\" href=\"#sid\">sid</a> = <a class=\"id\" href=\"#secid\">secid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsec\">tsec</a>-><a class=\"id\" href=\"#create_sid\">create_sid</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsec\">tsec</a>-><a class=\"id\" href=\"#keycreate_sid\">keycreate_sid</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsec\">tsec</a>-><a class=\"id\" href=\"#sockcreate_sid\">sockcreate_sid</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * set the file creation context in a security record to the same as the</span>", 
"<span class=\"comment\"> * objective context of the specified inode</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#selinux_kernel_create_files_as\">selinux_kernel_create_files_as</a>(struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#new\">new</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode_security_struct\">inode_security_struct</a> *<a class=\"id\" href=\"#isec\">isec</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_security\">i_security</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_security_struct\">task_security_struct</a> *<a class=\"id\" href=\"#tsec\">tsec</a> = <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#security\">security</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sid\">sid</a> = <a class=\"id\" href=\"#current_sid\">current_sid</a>();", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#avc_has_perm\">avc_has_perm</a>(<a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#isec\">isec</a>-><a class=\"id\" href=\"#sid\">sid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#SECCLASS_KERNEL_SERVICE\">SECCLASS_KERNEL_SERVICE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#KERNEL_SERVICE__CREATE_FILES_AS\">KERNEL_SERVICE__CREATE_FILES_AS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsec\">tsec</a>-><a class=\"id\" href=\"#create_sid\">create_sid</a> = <a class=\"id\" href=\"#isec\">isec</a>-><a class=\"id\" href=\"#sid\">sid</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#selinux_kernel_module_request\">selinux_kernel_module_request</a>(char *<a class=\"id\" href=\"#kmod_name\">kmod_name</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sid\">sid</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#common_audit_data\">common_audit_data</a> <a class=\"id\" href=\"#ad\">ad</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sid\">sid</a> = <a class=\"id\" href=\"#task_sid\">task_sid</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#COMMON_AUDIT_DATA_INIT\">COMMON_AUDIT_DATA_INIT</a>(&amp;<a class=\"id\" href=\"#ad\">ad</a>, <a class=\"id\" href=\"#KMOD\">KMOD</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ad\">ad</a>.<a class=\"id\" href=\"#u\">u</a>.<a class=\"id\" href=\"#kmod_name\">kmod_name</a> = <a class=\"id\" href=\"#kmod_name\">kmod_name</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#avc_has_perm\">avc_has_perm</a>(<a class=\"id\" href=\"#sid\">sid</a>, <a class=\"id\" href=\"#SECINITSID_KERNEL\">SECINITSID_KERNEL</a>, <a class=\"id\" href=\"#SECCLASS_SYSTEM\">SECCLASS_SYSTEM</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#SYSTEM__MODULE_REQUEST\">SYSTEM__MODULE_REQUEST</a>, &amp;<a class=\"id\" href=\"#ad\">ad</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#selinux_task_setpgid\">selinux_task_setpgid</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pgid\">pgid</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#current_has_perm\">current_has_perm</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#PROCESS__SETPGID\">PROCESS__SETPGID</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#selinux_task_getpgid\">selinux_task_getpgid</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#current_has_perm\">current_has_perm</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#PROCESS__GETPGID\">PROCESS__GETPGID</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#selinux_task_getsid\">selinux_task_getsid</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#current_has_perm\">current_has_perm</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#PROCESS__GETSESSION\">PROCESS__GETSESSION</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#selinux_task_getsecid\">selinux_task_getsecid</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#secid\">secid</a>)", 
"{", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#secid\">secid</a> = <a class=\"id\" href=\"#task_sid\">task_sid</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#selinux_task_setnice\">selinux_task_setnice</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#nice\">nice</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#cap_task_setnice\">cap_task_setnice</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#nice\">nice</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#current_has_perm\">current_has_perm</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#PROCESS__SETSCHED\">PROCESS__SETSCHED</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#selinux_task_setioprio\">selinux_task_setioprio</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#ioprio\">ioprio</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#cap_task_setioprio\">cap_task_setioprio</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#ioprio\">ioprio</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#current_has_perm\">current_has_perm</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#PROCESS__SETSCHED\">PROCESS__SETSCHED</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#selinux_task_getioprio\">selinux_task_getioprio</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#current_has_perm\">current_has_perm</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#PROCESS__GETSCHED\">PROCESS__GETSCHED</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#selinux_task_setrlimit\">selinux_task_setrlimit</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, unsigned int <a class=\"id\" href=\"#resource\">resource</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#rlimit\">rlimit</a> *<a class=\"id\" href=\"#new_rlim\">new_rlim</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rlimit\">rlimit</a> *<a class=\"id\" href=\"#old_rlim\">old_rlim</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#rlim\">rlim</a> + <a class=\"id\" href=\"#resource\">resource</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Control the ability to change the hard limit (whether</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   lowering or raising it), so that the hard limit can</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   later be used as a safe reset point for the soft limit</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   upon context transitions.  See selinux_bprm_committing_creds. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#old_rlim\">old_rlim</a>-><a class=\"id\" href=\"#rlim_max\">rlim_max</a> != <a class=\"id\" href=\"#new_rlim\">new_rlim</a>-><a class=\"id\" href=\"#rlim_max\">rlim_max</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#current_has_perm\">current_has_perm</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#PROCESS__SETRLIMIT\">PROCESS__SETRLIMIT</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#selinux_task_setscheduler\">selinux_task_setscheduler</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, int <a class=\"id\" href=\"#policy\">policy</a>, struct <a class=\"id\" href=\"#sched_param\">sched_param</a> *<a class=\"id\" href=\"#lp\">lp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#cap_task_setscheduler\">cap_task_setscheduler</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#policy\">policy</a>, <a class=\"id\" href=\"#lp\">lp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#current_has_perm\">current_has_perm</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#PROCESS__SETSCHED\">PROCESS__SETSCHED</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#selinux_task_getscheduler\">selinux_task_getscheduler</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#current_has_perm\">current_has_perm</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#PROCESS__GETSCHED\">PROCESS__GETSCHED</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#selinux_task_movememory\">selinux_task_movememory</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
];
xr_frag_insert('l/11/1a8ef5894a8e2d8f89712e7a192d448a4078be.xr', __xr_tmp);
