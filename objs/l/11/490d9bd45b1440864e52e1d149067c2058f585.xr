var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Generic hugetlb support.</span>", 
"<span class=\"comment\"> * (C) William Irwin, April 2004</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#seq_file\">seq_file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sysctl\">sysctl</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#highmem\">highmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mmu_notifier\">mmu_notifier</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#nodemask\">nodemask</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pagemap\">pagemap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mempolicy\">mempolicy</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpuset\">cpuset</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bootmem\">bootmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sysfs\">sysfs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rmap\">rmap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#swap\">swap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#swapops\">swapops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#page\">page</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pgtable\">pgtable</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hugetlb\">hugetlb</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#node\">node</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"internal.h\"", 
"", 
"const unsigned long <a class=\"id\" href=\"#hugetlb_zero\">hugetlb_zero</a> = 0, <a class=\"id\" href=\"#hugetlb_infinity\">hugetlb_infinity</a> = ~0UL;", 
"static <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#htlb_alloc_mask\">htlb_alloc_mask</a> = <a class=\"id\" href=\"#GFP_HIGHUSER\">GFP_HIGHUSER</a>;", 
"unsigned long <a class=\"id\" href=\"#hugepages_treat_as_movable\">hugepages_treat_as_movable</a>;", 
"", 
"static int <a class=\"id\" href=\"#max_hstate\">max_hstate</a>;", 
"unsigned int <a class=\"id\" href=\"#default_hstate_idx\">default_hstate_idx</a>;", 
"struct <a class=\"id\" href=\"#hstate\">hstate</a> <a class=\"id\" href=\"#hstates\">hstates</a>[<a class=\"id\" href=\"#HUGE_MAX_HSTATE\">HUGE_MAX_HSTATE</a>];", 
"", 
"<a class=\"id\" href=\"#__initdata\">__initdata</a> <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#huge_boot_pages\">huge_boot_pages</a>);", 
"", 
"<span class=\"comment\">/* for command line parsing */</span>", 
"static struct <a class=\"id\" href=\"#hstate\">hstate</a> * <a class=\"id\" href=\"#__initdata\">__initdata</a> <a class=\"id\" href=\"#parsed_hstate\">parsed_hstate</a>;", 
"static unsigned long <a class=\"id\" href=\"#__initdata\">__initdata</a> <a class=\"id\" href=\"#default_hstate_max_huge_pages\">default_hstate_max_huge_pages</a>;", 
"static unsigned long <a class=\"id\" href=\"#__initdata\">__initdata</a> <a class=\"id\" href=\"#default_hstate_size\">default_hstate_size</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_hstate\">for_each_hstate</a>(<a class=\"id\" href=\"#h\">h</a>) \\", 
"<span class=\"ts\"/>for ((<a class=\"id\" href=\"#h\">h</a>) = <a class=\"id\" href=\"#hstates\">hstates</a>; (<a class=\"id\" href=\"#h\">h</a>) &lt; &amp;<a class=\"id\" href=\"#hstates\">hstates</a>[<a class=\"id\" href=\"#max_hstate\">max_hstate</a>]; (<a class=\"id\" href=\"#h\">h</a>)++)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Protects updates to hugepage_freelists, nr_huge_pages, and free_huge_pages</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#hugetlb_lock\">hugetlb_lock</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Region tracking -- allows tracking of reservations and instantiated pages</span>", 
"<span class=\"comment\"> *                    across the pages in a mapping.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The region data structures are protected by a combination of the mmap_sem</span>", 
"<span class=\"comment\"> * and the hugetlb_instantion_mutex.  To access or modify a region the caller</span>", 
"<span class=\"comment\"> * must either hold the mmap_sem for write, or the mmap_sem for read and</span>", 
"<span class=\"comment\"> * the hugetlb_instantiation mutex:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>down_write(&amp;mm-&gt;mmap_sem);</span>", 
"<span class=\"comment\"> * or</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>down_read(&amp;mm-&gt;mmap_sem);</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>mutex_lock(&amp;hugetlb_instantiation_mutex);</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#file_region\">file_region</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#link\">link</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#from\">from</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#to\">to</a>;", 
"};", 
"", 
"static long <a class=\"id\" href=\"#region_add\">region_add</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>, long <a class=\"id\" href=\"#f\">f</a>, long <a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_region\">file_region</a> *<a class=\"id\" href=\"#rg\">rg</a>, *<a class=\"id\" href=\"#nrg\">nrg</a>, *<a class=\"id\" href=\"#trg\">trg</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Locate the region we are either in or before. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#rg\">rg</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#link\">link</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#f\">f</a> <= <a class=\"id\" href=\"#rg\">rg</a>-><a class=\"id\" href=\"#to\">to</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Round our left edge to the current segment if it encloses us. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#f\">f</a> &gt; <a class=\"id\" href=\"#rg\">rg</a>-><a class=\"id\" href=\"#from\">from</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a> = <a class=\"id\" href=\"#rg\">rg</a>-><a class=\"id\" href=\"#from\">from</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check for and consume any regions we now overlap with. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nrg\">nrg</a> = <a class=\"id\" href=\"#rg\">rg</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#rg\">rg</a>, <a class=\"id\" href=\"#trg\">trg</a>, <a class=\"id\" href=\"#rg\">rg</a>-><a class=\"id\" href=\"#link\">link</a>.<a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#link\">link</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (&amp;<a class=\"id\" href=\"#rg\">rg</a>-><a class=\"id\" href=\"#link\">link</a> == <a class=\"id\" href=\"#head\">head</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rg\">rg</a>-><a class=\"id\" href=\"#from\">from</a> &gt; <a class=\"id\" href=\"#t\">t</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If this area reaches higher then extend our area to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * include it completely.  If this is not the first area</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * which we intend to reuse, free it. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rg\">rg</a>-><a class=\"id\" href=\"#to\">to</a> &gt; <a class=\"id\" href=\"#t\">t</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#rg\">rg</a>-><a class=\"id\" href=\"#to\">to</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rg\">rg</a> != <a class=\"id\" href=\"#nrg\">nrg</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#rg\">rg</a>-><a class=\"id\" href=\"#link\">link</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#rg\">rg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nrg\">nrg</a>-><a class=\"id\" href=\"#from\">from</a> = <a class=\"id\" href=\"#f\">f</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nrg\">nrg</a>-><a class=\"id\" href=\"#to\">to</a> = <a class=\"id\" href=\"#t\">t</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static long <a class=\"id\" href=\"#region_chg\">region_chg</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>, long <a class=\"id\" href=\"#f\">f</a>, long <a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_region\">file_region</a> *<a class=\"id\" href=\"#rg\">rg</a>, *<a class=\"id\" href=\"#nrg\">nrg</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#chg\">chg</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Locate the region we are before or in. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#rg\">rg</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#link\">link</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#f\">f</a> <= <a class=\"id\" href=\"#rg\">rg</a>-><a class=\"id\" href=\"#to\">to</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If we are below the current region then a new region is required.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Subtle, allocate a new region at the position but make it zero</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * size such that we can guarantee to record the reservation. */</span>", 
"<span class=\"ts\"/>if (&amp;<a class=\"id\" href=\"#rg\">rg</a>-><a class=\"id\" href=\"#link\">link</a> == <a class=\"id\" href=\"#head\">head</a> || <a class=\"id\" href=\"#t\">t</a> &lt; <a class=\"id\" href=\"#rg\">rg</a>-><a class=\"id\" href=\"#from\">from</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nrg\">nrg</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#nrg\">nrg</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#nrg\">nrg</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nrg\">nrg</a>-><a class=\"id\" href=\"#from\">from</a> = <a class=\"id\" href=\"#f\">f</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nrg\">nrg</a>-><a class=\"id\" href=\"#to\">to</a>   = <a class=\"id\" href=\"#f\">f</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#nrg\">nrg</a>-><a class=\"id\" href=\"#link\">link</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#nrg\">nrg</a>-><a class=\"id\" href=\"#link\">link</a>, <a class=\"id\" href=\"#rg\">rg</a>-><a class=\"id\" href=\"#link\">link</a>.<a class=\"id\" href=\"#prev\">prev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#t\">t</a> - <a class=\"id\" href=\"#f\">f</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Round our left edge to the current segment if it encloses us. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#f\">f</a> &gt; <a class=\"id\" href=\"#rg\">rg</a>-><a class=\"id\" href=\"#from\">from</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a> = <a class=\"id\" href=\"#rg\">rg</a>-><a class=\"id\" href=\"#from\">from</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chg\">chg</a> = <a class=\"id\" href=\"#t\">t</a> - <a class=\"id\" href=\"#f\">f</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check for and consume any regions we now overlap with. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#rg\">rg</a>, <a class=\"id\" href=\"#rg\">rg</a>-><a class=\"id\" href=\"#link\">link</a>.<a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#link\">link</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (&amp;<a class=\"id\" href=\"#rg\">rg</a>-><a class=\"id\" href=\"#link\">link</a> == <a class=\"id\" href=\"#head\">head</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rg\">rg</a>-><a class=\"id\" href=\"#from\">from</a> &gt; <a class=\"id\" href=\"#t\">t</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#chg\">chg</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We overlap with this area, if it extends futher than</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * us then we must extend ourselves.  Account for its</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * existing reservation. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rg\">rg</a>-><a class=\"id\" href=\"#to\">to</a> &gt; <a class=\"id\" href=\"#t\">t</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chg\">chg</a> += <a class=\"id\" href=\"#rg\">rg</a>-><a class=\"id\" href=\"#to\">to</a> - <a class=\"id\" href=\"#t\">t</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#rg\">rg</a>-><a class=\"id\" href=\"#to\">to</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chg\">chg</a> -= <a class=\"id\" href=\"#rg\">rg</a>-><a class=\"id\" href=\"#to\">to</a> - <a class=\"id\" href=\"#rg\">rg</a>-><a class=\"id\" href=\"#from\">from</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#chg\">chg</a>;", 
"}", 
"", 
"static long <a class=\"id\" href=\"#region_truncate\">region_truncate</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>, long <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_region\">file_region</a> *<a class=\"id\" href=\"#rg\">rg</a>, *<a class=\"id\" href=\"#trg\">trg</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#chg\">chg</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Locate the region we are either in or before. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#rg\">rg</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#link\">link</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> <= <a class=\"id\" href=\"#rg\">rg</a>-><a class=\"id\" href=\"#to\">to</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>if (&amp;<a class=\"id\" href=\"#rg\">rg</a>-><a class=\"id\" href=\"#link\">link</a> == <a class=\"id\" href=\"#head\">head</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If we are in the middle of a region then adjust it. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> &gt; <a class=\"id\" href=\"#rg\">rg</a>-><a class=\"id\" href=\"#from\">from</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chg\">chg</a> = <a class=\"id\" href=\"#rg\">rg</a>-><a class=\"id\" href=\"#to\">to</a> - <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rg\">rg</a>-><a class=\"id\" href=\"#to\">to</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rg\">rg</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#rg\">rg</a>-><a class=\"id\" href=\"#link\">link</a>.<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#typeof\">typeof</a>(*<a class=\"id\" href=\"#rg\">rg</a>), <a class=\"id\" href=\"#link\">link</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Drop any remaining regions. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#rg\">rg</a>, <a class=\"id\" href=\"#trg\">trg</a>, <a class=\"id\" href=\"#rg\">rg</a>-><a class=\"id\" href=\"#link\">link</a>.<a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#link\">link</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (&amp;<a class=\"id\" href=\"#rg\">rg</a>-><a class=\"id\" href=\"#link\">link</a> == <a class=\"id\" href=\"#head\">head</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chg\">chg</a> += <a class=\"id\" href=\"#rg\">rg</a>-><a class=\"id\" href=\"#to\">to</a> - <a class=\"id\" href=\"#rg\">rg</a>-><a class=\"id\" href=\"#from\">from</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#rg\">rg</a>-><a class=\"id\" href=\"#link\">link</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#rg\">rg</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#chg\">chg</a>;", 
"}", 
"", 
"static long <a class=\"id\" href=\"#region_count\">region_count</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>, long <a class=\"id\" href=\"#f\">f</a>, long <a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file_region\">file_region</a> *<a class=\"id\" href=\"#rg\">rg</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#chg\">chg</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Locate each segment we overlap with, and count that overlap. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#rg\">rg</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#link\">link</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#seg_from\">seg_from</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#seg_to\">seg_to</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rg\">rg</a>-><a class=\"id\" href=\"#to\">to</a> <= <a class=\"id\" href=\"#f\">f</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rg\">rg</a>-><a class=\"id\" href=\"#from\">from</a> >= <a class=\"id\" href=\"#t\">t</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seg_from\">seg_from</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#rg\">rg</a>-><a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#f\">f</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seg_to\">seg_to</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#rg\">rg</a>-><a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#t\">t</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chg\">chg</a> += <a class=\"id\" href=\"#seg_to\">seg_to</a> - <a class=\"id\" href=\"#seg_from\">seg_from</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#chg\">chg</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Convert the address within this vma to the page offset within</span>", 
"<span class=\"comment\"> * the mapping, in pagecache page units; huge pages here.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#vma_hugecache_offset\">vma_hugecache_offset</a>(struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/>return ((<a class=\"id\" href=\"#address\">address</a> - <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>) >> <a class=\"id\" href=\"#huge_page_shift\">huge_page_shift</a>(<a class=\"id\" href=\"#h\">h</a>)) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a> >> <a class=\"id\" href=\"#huge_page_order\">huge_page_order</a>(<a class=\"id\" href=\"#h\">h</a>));", 
"}", 
"", 
"<a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#linear_hugepage_index\">linear_hugepage_index</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#vma_hugecache_offset\">vma_hugecache_offset</a>(<a class=\"id\" href=\"#hstate_vma\">hstate_vma</a>(<a class=\"id\" href=\"#vma\">vma</a>), <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return the size of the pages allocated when backing a VMA. In the majority</span>", 
"<span class=\"comment\"> * cases this will be same size as used by the page table entries.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#vma_kernel_pagesize\">vma_kernel_pagesize</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#hstate\">hstate</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_vm_hugetlb_page\">is_vm_hugetlb_page</a>(<a class=\"id\" href=\"#vma\">vma</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hstate\">hstate</a> = <a class=\"id\" href=\"#hstate_vma\">hstate_vma</a>(<a class=\"id\" href=\"#vma\">vma</a>);", 
"", 
"<span class=\"ts\"/>return 1UL << (<a class=\"id\" href=\"#hstate\">hstate</a>-><a class=\"id\" href=\"#order\">order</a> + <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#vma_kernel_pagesize\">vma_kernel_pagesize</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return the page size being used by the MMU to back a VMA. In the majority</span>", 
"<span class=\"comment\"> * of cases, the page size used by the kernel matches the MMU size. On</span>", 
"<span class=\"comment\"> * architectures where it differs, an architecture-specific version of this</span>", 
"<span class=\"comment\"> * function is required.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#vma_mmu_pagesize\">vma_mmu_pagesize</a>", 
"unsigned long <a class=\"id\" href=\"#vma_mmu_pagesize\">vma_mmu_pagesize</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#vma_kernel_pagesize\">vma_kernel_pagesize</a>(<a class=\"id\" href=\"#vma\">vma</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Flags for MAP_PRIVATE reservations.  These are stored in the bottom</span>", 
"<span class=\"comment\"> * bits of the reservation map pointer, which are always clear due to</span>", 
"<span class=\"comment\"> * alignment.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HPAGE_RESV_OWNER\">HPAGE_RESV_OWNER</a>    (1UL << 0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HPAGE_RESV_UNMAPPED\">HPAGE_RESV_UNMAPPED</a> (1UL << 1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HPAGE_RESV_MASK\">HPAGE_RESV_MASK</a> (<a class=\"id\" href=\"#HPAGE_RESV_OWNER\">HPAGE_RESV_OWNER</a> | <a class=\"id\" href=\"#HPAGE_RESV_UNMAPPED\">HPAGE_RESV_UNMAPPED</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * These helpers are used to track how many pages are reserved for</span>", 
"<span class=\"comment\"> * faults in a MAP_PRIVATE mapping. Only the process that called mmap()</span>", 
"<span class=\"comment\"> * is guaranteed to have their future faults succeed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * With the exception of reset_vma_resv_huge_pages() which is called at fork(),</span>", 
"<span class=\"comment\"> * the reserve counters are updated with the hugetlb_lock held. It is safe</span>", 
"<span class=\"comment\"> * to reset the VMA at fork() time as it is not in use yet and there is no</span>", 
"<span class=\"comment\"> * chance of the global counters getting corrupted as a result of the values.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The private mapping reservation is represented in a subtly different</span>", 
"<span class=\"comment\"> * manner to a shared mapping.  A shared mapping has a region map associated</span>", 
"<span class=\"comment\"> * with the underlying file, this region map represents the backing file</span>", 
"<span class=\"comment\"> * pages which have ever had a reservation assigned which this persists even</span>", 
"<span class=\"comment\"> * after the page is instantiated.  A private mapping has a region map</span>", 
"<span class=\"comment\"> * associated with the original mmap which is attached to all VMAs which</span>", 
"<span class=\"comment\"> * reference it, this region map represents those offsets which have consumed</span>", 
"<span class=\"comment\"> * reservation ie. where pages have been instantiated.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned long <a class=\"id\" href=\"#get_vma_private_data\">get_vma_private_data</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>)", 
"{", 
"<span class=\"ts\"/>return (unsigned long)<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_private_data\">vm_private_data</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#set_vma_private_data\">set_vma_private_data</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_private_data\">vm_private_data</a> = (void *)<a class=\"id\" href=\"#value\">value</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#resv_map\">resv_map</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kref\">kref</a> <a class=\"id\" href=\"#refs\">refs</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#regions\">regions</a>;", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#resv_map\">resv_map</a> *<a class=\"id\" href=\"#resv_map_alloc\">resv_map_alloc</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resv_map\">resv_map</a> *<a class=\"id\" href=\"#resv_map\">resv_map</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#resv_map\">resv_map</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#resv_map\">resv_map</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kref_init\">kref_init</a>(&amp;<a class=\"id\" href=\"#resv_map\">resv_map</a>-><a class=\"id\" href=\"#refs\">refs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#resv_map\">resv_map</a>-><a class=\"id\" href=\"#regions\">regions</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#resv_map\">resv_map</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#resv_map_release\">resv_map_release</a>(struct <a class=\"id\" href=\"#kref\">kref</a> *<a class=\"id\" href=\"#ref\">ref</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resv_map\">resv_map</a> *<a class=\"id\" href=\"#resv_map\">resv_map</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#ref\">ref</a>, struct <a class=\"id\" href=\"#resv_map\">resv_map</a>, <a class=\"id\" href=\"#refs\">refs</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Clear out any active regions before we release the map. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#region_truncate\">region_truncate</a>(&amp;<a class=\"id\" href=\"#resv_map\">resv_map</a>-><a class=\"id\" href=\"#regions\">regions</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#resv_map\">resv_map</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#resv_map\">resv_map</a> *<a class=\"id\" href=\"#vma_resv_map\">vma_resv_map</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(!<a class=\"id\" href=\"#is_vm_hugetlb_page\">is_vm_hugetlb_page</a>(<a class=\"id\" href=\"#vma\">vma</a>));", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_MAYSHARE\">VM_MAYSHARE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return (struct <a class=\"id\" href=\"#resv_map\">resv_map</a> *)(<a class=\"id\" href=\"#get_vma_private_data\">get_vma_private_data</a>(<a class=\"id\" href=\"#vma\">vma</a>) &amp;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>~<a class=\"id\" href=\"#HPAGE_RESV_MASK\">HPAGE_RESV_MASK</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#set_vma_resv_map\">set_vma_resv_map</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, struct <a class=\"id\" href=\"#resv_map\">resv_map</a> *<a class=\"id\" href=\"#map\">map</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(!<a class=\"id\" href=\"#is_vm_hugetlb_page\">is_vm_hugetlb_page</a>(<a class=\"id\" href=\"#vma\">vma</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_MAYSHARE\">VM_MAYSHARE</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_vma_private_data\">set_vma_private_data</a>(<a class=\"id\" href=\"#vma\">vma</a>, (<a class=\"id\" href=\"#get_vma_private_data\">get_vma_private_data</a>(<a class=\"id\" href=\"#vma\">vma</a>) &amp;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#HPAGE_RESV_MASK\">HPAGE_RESV_MASK</a>) | (unsigned long)<a class=\"id\" href=\"#map\">map</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#set_vma_resv_flags\">set_vma_resv_flags</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(!<a class=\"id\" href=\"#is_vm_hugetlb_page\">is_vm_hugetlb_page</a>(<a class=\"id\" href=\"#vma\">vma</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_MAYSHARE\">VM_MAYSHARE</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_vma_private_data\">set_vma_private_data</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#get_vma_private_data\">get_vma_private_data</a>(<a class=\"id\" href=\"#vma\">vma</a>) | <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#is_vma_resv_set\">is_vma_resv_set</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#flag\">flag</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(!<a class=\"id\" href=\"#is_vm_hugetlb_page\">is_vm_hugetlb_page</a>(<a class=\"id\" href=\"#vma\">vma</a>));", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#get_vma_private_data\">get_vma_private_data</a>(<a class=\"id\" href=\"#vma\">vma</a>) &amp; <a class=\"id\" href=\"#flag\">flag</a>) != 0;", 
"}", 
"", 
"<span class=\"comment\">/* Decrement the reserved pages in the hugepage pool by one */</span>", 
"static void <a class=\"id\" href=\"#decrement_hugepage_resv_vma\">decrement_hugepage_resv_vma</a>(struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_NORESERVE\">VM_NORESERVE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_MAYSHARE\">VM_MAYSHARE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Shared mappings always use reserves */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#resv_huge_pages\">resv_huge_pages</a>--;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#is_vma_resv_set\">is_vma_resv_set</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#HPAGE_RESV_OWNER\">HPAGE_RESV_OWNER</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Only the process that called mmap() has reserves for</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * private mappings.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#resv_huge_pages\">resv_huge_pages</a>--;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* Reset counters to 0 and clear all HPAGE_RESV_* flags */</span>", 
"void <a class=\"id\" href=\"#reset_vma_resv_huge_pages\">reset_vma_resv_huge_pages</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(!<a class=\"id\" href=\"#is_vm_hugetlb_page\">is_vm_hugetlb_page</a>(<a class=\"id\" href=\"#vma\">vma</a>));", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_MAYSHARE\">VM_MAYSHARE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_private_data\">vm_private_data</a> = (void *)0;", 
"}", 
"", 
"<span class=\"comment\">/* Returns true if the VMA has associated reserve pages */</span>", 
"static int <a class=\"id\" href=\"#vma_has_reserves\">vma_has_reserves</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_MAYSHARE\">VM_MAYSHARE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_vma_resv_set\">is_vma_resv_set</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#HPAGE_RESV_OWNER\">HPAGE_RESV_OWNER</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#clear_gigantic_page\">clear_gigantic_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#sz\">sz</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#sz\">sz</a>/<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>; <a class=\"id\" href=\"#i\">i</a>++, <a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#mem_map_next\">mem_map_next</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#i\">i</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_user_highpage\">clear_user_highpage</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#i\">i</a> * <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"static void <a class=\"id\" href=\"#clear_huge_page\">clear_huge_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#sz\">sz</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#sz\">sz</a>/<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> &gt; <a class=\"id\" href=\"#MAX_ORDER_NR_PAGES\">MAX_ORDER_NR_PAGES</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_gigantic_page\">clear_gigantic_page</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#sz\">sz</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#sz\">sz</a>/<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_user_highpage\">clear_user_highpage</a>(<a class=\"id\" href=\"#page\">page</a> + <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#i\">i</a> * <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#copy_gigantic_page\">copy_gigantic_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#dst\">dst</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#src\">src</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#addr\">addr</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a> = <a class=\"id\" href=\"#hstate_vma\">hstate_vma</a>(<a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#dst_base\">dst_base</a> = <a class=\"id\" href=\"#dst\">dst</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#src_base\">src_base</a> = <a class=\"id\" href=\"#src\">src</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#pages_per_huge_page\">pages_per_huge_page</a>(<a class=\"id\" href=\"#h\">h</a>); ) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copy_user_highpage\">copy_user_highpage</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#i\">i</a>*<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, <a class=\"id\" href=\"#vma\">vma</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a> = <a class=\"id\" href=\"#mem_map_next\">mem_map_next</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#dst_base\">dst_base</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#src\">src</a> = <a class=\"id\" href=\"#mem_map_next\">mem_map_next</a>(<a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#src_base\">src_base</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"static void <a class=\"id\" href=\"#copy_huge_page\">copy_huge_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#dst\">dst</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#src\">src</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#addr\">addr</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a> = <a class=\"id\" href=\"#hstate_vma\">hstate_vma</a>(<a class=\"id\" href=\"#vma\">vma</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#pages_per_huge_page\">pages_per_huge_page</a>(<a class=\"id\" href=\"#h\">h</a>) &gt; <a class=\"id\" href=\"#MAX_ORDER_NR_PAGES\">MAX_ORDER_NR_PAGES</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copy_gigantic_page\">copy_gigantic_page</a>(<a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#pages_per_huge_page\">pages_per_huge_page</a>(<a class=\"id\" href=\"#h\">h</a>); <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copy_user_highpage\">copy_user_highpage</a>(<a class=\"id\" href=\"#dst\">dst</a> + <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#src\">src</a> + <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#i\">i</a>*<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, <a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#enqueue_huge_page\">enqueue_huge_page</a>(struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nid\">nid</a> = <a class=\"id\" href=\"#page_to_nid\">page_to_nid</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>, &amp;<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#hugepage_freelists\">hugepage_freelists</a>[<a class=\"id\" href=\"#nid\">nid</a>]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#free_huge_pages\">free_huge_pages</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#free_huge_pages_node\">free_huge_pages_node</a>[<a class=\"id\" href=\"#nid\">nid</a>]++;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#dequeue_huge_page_vma\">dequeue_huge_page_vma</a>(struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#address\">address</a>, int <a class=\"id\" href=\"#avoid_reserve\">avoid_reserve</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nid\">nid</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#mpol\">mpol</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodemask\">nodemask</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#zonelist\">zonelist</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zoneref\">zoneref</a> *<a class=\"id\" href=\"#z\">z</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_mems_allowed\">get_mems_allowed</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zonelist\">zonelist</a> = <a class=\"id\" href=\"#huge_zonelist\">huge_zonelist</a>(<a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#htlb_alloc_mask\">htlb_alloc_mask</a>, &amp;<a class=\"id\" href=\"#mpol\">mpol</a>, &amp;<a class=\"id\" href=\"#nodemask\">nodemask</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A child process with MAP_PRIVATE mappings created by their parent</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * have no page reserves. This check ensures that reservations are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not \"stolen\". The child may still get SIGKILLed</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#vma_has_reserves\">vma_has_reserves</a>(<a class=\"id\" href=\"#vma\">vma</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#free_huge_pages\">free_huge_pages</a> - <a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#resv_huge_pages\">resv_huge_pages</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If reserves cannot be used, ensure enough pages are in the pool */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#avoid_reserve\">avoid_reserve</a> && <a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#free_huge_pages\">free_huge_pages</a> - <a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#resv_huge_pages\">resv_huge_pages</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_zone_zonelist_nodemask\">for_each_zone_zonelist_nodemask</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#z\">z</a>, <a class=\"id\" href=\"#zonelist\">zonelist</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MAX_NR_ZONES\">MAX_NR_ZONES</a> - 1, <a class=\"id\" href=\"#nodemask\">nodemask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nid\">nid</a> = <a class=\"id\" href=\"#zone_to_nid\">zone_to_nid</a>(<a class=\"id\" href=\"#zone\">zone</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpuset_zone_allowed_softwall\">cpuset_zone_allowed_softwall</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#htlb_alloc_mask\">htlb_alloc_mask</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#hugepage_freelists\">hugepage_freelists</a>[<a class=\"id\" href=\"#nid\">nid</a>])) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#hugepage_freelists\">hugepage_freelists</a>[<a class=\"id\" href=\"#nid\">nid</a>].<a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#free_huge_pages\">free_huge_pages</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#free_huge_pages_node\">free_huge_pages_node</a>[<a class=\"id\" href=\"#nid\">nid</a>]--;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#avoid_reserve\">avoid_reserve</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#decrement_hugepage_resv_vma\">decrement_hugepage_resv_vma</a>(<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#vma\">vma</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#err\">err</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mpol_cond_put\">mpol_cond_put</a>(<a class=\"id\" href=\"#mpol\">mpol</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_mems_allowed\">put_mems_allowed</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#update_and_free_page\">update_and_free_page</a>(struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#order\">order</a> >= <a class=\"id\" href=\"#MAX_ORDER\">MAX_ORDER</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#nr_huge_pages\">nr_huge_pages</a>--;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#nr_huge_pages_node\">nr_huge_pages_node</a>[<a class=\"id\" href=\"#page_to_nid\">page_to_nid</a>(<a class=\"id\" href=\"#page\">page</a>)]--;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#pages_per_huge_page\">pages_per_huge_page</a>(<a class=\"id\" href=\"#h\">h</a>); <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#flags\">flags</a> &= ~(1 << <a class=\"id\" href=\"#PG_locked\">PG_locked</a> | 1 << <a class=\"id\" href=\"#PG_error\">PG_error</a> | 1 << <a class=\"id\" href=\"#PG_referenced\">PG_referenced</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>1 << <a class=\"id\" href=\"#PG_dirty\">PG_dirty</a> | 1 << <a class=\"id\" href=\"#PG_active\">PG_active</a> | 1 << <a class=\"id\" href=\"#PG_reserved\">PG_reserved</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>1 << <a class=\"id\" href=\"#PG_private\">PG_private</a> | 1<< <a class=\"id\" href=\"#PG_writeback\">PG_writeback</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_compound_page_dtor\">set_compound_page_dtor</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_page_refcounted\">set_page_refcounted</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_release_hugepage\">arch_release_hugepage</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__free_pages\">__free_pages</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#huge_page_order\">huge_page_order</a>(<a class=\"id\" href=\"#h\">h</a>));", 
"}", 
"", 
"struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#size_to_hstate\">size_to_hstate</a>(unsigned long <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_hstate\">for_each_hstate</a>(<a class=\"id\" href=\"#h\">h</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#huge_page_size\">huge_page_size</a>(<a class=\"id\" href=\"#h\">h</a>) == <a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#h\">h</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#free_huge_page\">free_huge_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Can't pass hstate in here because it is called from the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * compound page destructor.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a> = <a class=\"id\" href=\"#page_hstate\">page_hstate</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nid\">nid</a> = <a class=\"id\" href=\"#page_to_nid\">page_to_nid</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mapping\">mapping</a> = (struct <a class=\"id\" href=\"#address_space\">address_space</a> *) <a class=\"id\" href=\"#page_private\">page_private</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_page_private\">set_page_private</a>(<a class=\"id\" href=\"#page\">page</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#page_count\">page_count</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#page_mapcount\">page_mapcount</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hugetlb_lock\">hugetlb_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#surplus_huge_pages_node\">surplus_huge_pages_node</a>[<a class=\"id\" href=\"#nid\">nid</a>] && <a class=\"id\" href=\"#huge_page_order\">huge_page_order</a>(<a class=\"id\" href=\"#h\">h</a>) &lt; <a class=\"id\" href=\"#MAX_ORDER\">MAX_ORDER</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_and_free_page\">update_and_free_page</a>(<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#surplus_huge_pages\">surplus_huge_pages</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#surplus_huge_pages_node\">surplus_huge_pages_node</a>[<a class=\"id\" href=\"#nid\">nid</a>]--;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enqueue_huge_page\">enqueue_huge_page</a>(<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hugetlb_lock\">hugetlb_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mapping\">mapping</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hugetlb_put_quota\">hugetlb_put_quota</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, 1);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#prep_new_huge_page\">prep_new_huge_page</a>(struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#nid\">nid</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_compound_page_dtor\">set_compound_page_dtor</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#free_huge_page\">free_huge_page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hugetlb_lock\">hugetlb_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#nr_huge_pages\">nr_huge_pages</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#nr_huge_pages_node\">nr_huge_pages_node</a>[<a class=\"id\" href=\"#nid\">nid</a>]++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hugetlb_lock\">hugetlb_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#page\">page</a>); <span class=\"comment\">/* free it into the hugepage allocator */</span>", 
"}", 
"", 
"static void <a class=\"id\" href=\"#prep_compound_gigantic_page\">prep_compound_gigantic_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, unsigned long <a class=\"id\" href=\"#order\">order</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_pages\">nr_pages</a> = 1 << <a class=\"id\" href=\"#order\">order</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#page\">page</a> + 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we rely on prep_new_huge_page to set the destructor */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_compound_order\">set_compound_order</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__SetPageHead\">__SetPageHead</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_pages\">nr_pages</a>; <a class=\"id\" href=\"#i\">i</a>++, <a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#mem_map_next\">mem_map_next</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#i\">i</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__SetPageTail\">__SetPageTail</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#first_page\">first_page</a> = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"int <a class=\"id\" href=\"#PageHuge\">PageHuge</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#compound_page_dtor\">compound_page_dtor</a> *<a class=\"id\" href=\"#dtor\">dtor</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#PageCompound\">PageCompound</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#compound_head\">compound_head</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dtor\">dtor</a> = <a class=\"id\" href=\"#get_compound_page_dtor\">get_compound_page_dtor</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dtor\">dtor</a> == <a class=\"id\" href=\"#free_huge_page\">free_huge_page</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#PageHuge\">PageHuge</a>);", 
"", 
"static struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#alloc_fresh_huge_page_node\">alloc_fresh_huge_page_node</a>(struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a>, int <a class=\"id\" href=\"#nid\">nid</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#order\">order</a> >= <a class=\"id\" href=\"#MAX_ORDER\">MAX_ORDER</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#alloc_pages_exact_node\">alloc_pages_exact_node</a>(<a class=\"id\" href=\"#nid\">nid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#htlb_alloc_mask\">htlb_alloc_mask</a>|<a class=\"id\" href=\"#__GFP_COMP\">__GFP_COMP</a>|<a class=\"id\" href=\"#__GFP_THISNODE\">__GFP_THISNODE</a>|", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__GFP_REPEAT\">__GFP_REPEAT</a>|<a class=\"id\" href=\"#__GFP_NOWARN\">__GFP_NOWARN</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#huge_page_order\">huge_page_order</a>(<a class=\"id\" href=\"#h\">h</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#arch_prepare_hugepage\">arch_prepare_hugepage</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_pages\">__free_pages</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#huge_page_order\">huge_page_order</a>(<a class=\"id\" href=\"#h\">h</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prep_new_huge_page\">prep_new_huge_page</a>(<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#nid\">nid</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * common helper functions for hstate_next_node_to_{alloc|free}.</span>", 
"<span class=\"comment\"> * We may have allocated or freed a huge page based on a different</span>", 
"<span class=\"comment\"> * nodes_allowed previously, so h-&gt;next_node_to_{alloc|free} might</span>", 
"<span class=\"comment\"> * be outside of *nodes_allowed.  Ensure that we use an allowed</span>", 
"<span class=\"comment\"> * node for alloc or free.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#next_node_allowed\">next_node_allowed</a>(int <a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nid\">nid</a> = <a class=\"id\" href=\"#next_node\">next_node</a>(<a class=\"id\" href=\"#nid\">nid</a>, *<a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nid\">nid</a> == <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nid\">nid</a> = <a class=\"id\" href=\"#first_node\">first_node</a>(*<a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#nid\">nid</a> >= <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nid\">nid</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#get_valid_node_allowed\">get_valid_node_allowed</a>(int <a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#node_isset\">node_isset</a>(<a class=\"id\" href=\"#nid\">nid</a>, *<a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nid\">nid</a> = <a class=\"id\" href=\"#next_node_allowed\">next_node_allowed</a>(<a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nid\">nid</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * returns the previously saved node [\"this node\"] from which to</span>", 
"<span class=\"comment\"> * allocate a persistent huge page for the pool and advance the</span>", 
"<span class=\"comment\"> * next node from which to allocate, handling wrap at end of node</span>", 
"<span class=\"comment\"> * mask.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#hstate_next_node_to_alloc\">hstate_next_node_to_alloc</a>(struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nid\">nid</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(!<a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nid\">nid</a> = <a class=\"id\" href=\"#get_valid_node_allowed\">get_valid_node_allowed</a>(<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#next_nid_to_alloc\">next_nid_to_alloc</a>, <a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#next_nid_to_alloc\">next_nid_to_alloc</a> = <a class=\"id\" href=\"#next_node_allowed\">next_node_allowed</a>(<a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nid\">nid</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#alloc_fresh_huge_page\">alloc_fresh_huge_page</a>(struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#start_nid\">start_nid</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#next_nid\">next_nid</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start_nid\">start_nid</a> = <a class=\"id\" href=\"#hstate_next_node_to_alloc\">hstate_next_node_to_alloc</a>(<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next_nid\">next_nid</a> = <a class=\"id\" href=\"#start_nid\">start_nid</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#alloc_fresh_huge_page_node\">alloc_fresh_huge_page_node</a>(<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#next_nid\">next_nid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_nid\">next_nid</a> = <a class=\"id\" href=\"#hstate_next_node_to_alloc\">hstate_next_node_to_alloc</a>(<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a>);", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#next_nid\">next_nid</a> != <a class=\"id\" href=\"#start_nid\">start_nid</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count_vm_event\">count_vm_event</a>(<a class=\"id\" href=\"#HTLB_BUDDY_PGALLOC\">HTLB_BUDDY_PGALLOC</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count_vm_event\">count_vm_event</a>(<a class=\"id\" href=\"#HTLB_BUDDY_PGALLOC_FAIL\">HTLB_BUDDY_PGALLOC_FAIL</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * helper for free_pool_huge_page() - return the previously saved</span>", 
"<span class=\"comment\"> * node [\"this node\"] from which to free a huge page.  Advance the</span>", 
"<span class=\"comment\"> * next node id whether or not we find a free huge page to free so</span>", 
"<span class=\"comment\"> * that the next attempt to free addresses the next node.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#hstate_next_node_to_free\">hstate_next_node_to_free</a>(struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nid\">nid</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(!<a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nid\">nid</a> = <a class=\"id\" href=\"#get_valid_node_allowed\">get_valid_node_allowed</a>(<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#next_nid_to_free\">next_nid_to_free</a>, <a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#next_nid_to_free\">next_nid_to_free</a> = <a class=\"id\" href=\"#next_node_allowed\">next_node_allowed</a>(<a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nid\">nid</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Free huge page from pool from next node to free.</span>", 
"<span class=\"comment\"> * Attempt to keep persistent huge pages more or less</span>", 
"<span class=\"comment\"> * balanced over allowed nodes.</span>", 
"<span class=\"comment\"> * Called with hugetlb_lock locked.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#free_pool_huge_page\">free_pool_huge_page</a>(struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#acct_surplus\">acct_surplus</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#start_nid\">start_nid</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#next_nid\">next_nid</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start_nid\">start_nid</a> = <a class=\"id\" href=\"#hstate_next_node_to_free\">hstate_next_node_to_free</a>(<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next_nid\">next_nid</a> = <a class=\"id\" href=\"#start_nid\">start_nid</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If we're returning unused surplus pages, only examine</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * nodes with surplus pages.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((!<a class=\"id\" href=\"#acct_surplus\">acct_surplus</a> || <a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#surplus_huge_pages_node\">surplus_huge_pages_node</a>[<a class=\"id\" href=\"#next_nid\">next_nid</a>]) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#hugepage_freelists\">hugepage_freelists</a>[<a class=\"id\" href=\"#next_nid\">next_nid</a>])) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#hugepage_freelists\">hugepage_freelists</a>[<a class=\"id\" href=\"#next_nid\">next_nid</a>].<a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#free_huge_pages\">free_huge_pages</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#free_huge_pages_node\">free_huge_pages_node</a>[<a class=\"id\" href=\"#next_nid\">next_nid</a>]--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#acct_surplus\">acct_surplus</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#surplus_huge_pages\">surplus_huge_pages</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#surplus_huge_pages_node\">surplus_huge_pages_node</a>[<a class=\"id\" href=\"#next_nid\">next_nid</a>]--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_and_free_page\">update_and_free_page</a>(<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_nid\">next_nid</a> = <a class=\"id\" href=\"#hstate_next_node_to_free\">hstate_next_node_to_free</a>(<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#nodes_allowed\">nodes_allowed</a>);", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#next_nid\">next_nid</a> != <a class=\"id\" href=\"#start_nid\">start_nid</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#alloc_buddy_huge_page\">alloc_buddy_huge_page</a>(struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#nid\">nid</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#order\">order</a> >= <a class=\"id\" href=\"#MAX_ORDER\">MAX_ORDER</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Assume we will successfully allocate the surplus page to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * prevent racing processes from causing the surplus to exceed</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * overcommit</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This however introduces a different race, where a process B</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * tries to grow the static hugepage pool while alloc_pages() is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * called by process A. B will only examine the per-node</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * counters in determining if surplus huge pages can be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * converted to normal huge pages in adjust_pool_surplus(). A</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * won't be able to increment the per-node counter, until the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * lock is dropped by B, but B doesn't drop hugetlb_lock until</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * no more huge pages can be converted from surplus to normal</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * state (and doesn't try to convert again). Thus, we have a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * case where a surplus huge page exists, the pool is grown, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the surplus huge page still exists after, even though it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * should just have been converted to a normal huge page. This</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * does not leak memory, though, as the hugepage will be freed</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * once it is out of use. It also does not allow the counters to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * go out of whack in adjust_pool_surplus() as we don't modify</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the node values until we've gotten the hugepage and only the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * per-node value is checked there.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hugetlb_lock\">hugetlb_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#surplus_huge_pages\">surplus_huge_pages</a> >= <a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#nr_overcommit_huge_pages\">nr_overcommit_huge_pages</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hugetlb_lock\">hugetlb_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#nr_huge_pages\">nr_huge_pages</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#surplus_huge_pages\">surplus_huge_pages</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hugetlb_lock\">hugetlb_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#alloc_pages\">alloc_pages</a>(<a class=\"id\" href=\"#htlb_alloc_mask\">htlb_alloc_mask</a>|<a class=\"id\" href=\"#__GFP_COMP\">__GFP_COMP</a>|", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__GFP_REPEAT\">__GFP_REPEAT</a>|<a class=\"id\" href=\"#__GFP_NOWARN\">__GFP_NOWARN</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#huge_page_order\">huge_page_order</a>(<a class=\"id\" href=\"#h\">h</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a> && <a class=\"id\" href=\"#arch_prepare_hugepage\">arch_prepare_hugepage</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_pages\">__free_pages</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#huge_page_order\">huge_page_order</a>(<a class=\"id\" href=\"#h\">h</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hugetlb_lock\">hugetlb_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This page is now managed by the hugetlb allocator and has</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * no users -- drop the buddy allocator's reference.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page_testzero\">put_page_testzero</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#page_count\">page_count</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nid\">nid</a> = <a class=\"id\" href=\"#page_to_nid\">page_to_nid</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_compound_page_dtor\">set_compound_page_dtor</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#free_huge_page\">free_huge_page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We incremented the global counters already</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#nr_huge_pages_node\">nr_huge_pages_node</a>[<a class=\"id\" href=\"#nid\">nid</a>]++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#surplus_huge_pages_node\">surplus_huge_pages_node</a>[<a class=\"id\" href=\"#nid\">nid</a>]++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__count_vm_event\">__count_vm_event</a>(<a class=\"id\" href=\"#HTLB_BUDDY_PGALLOC\">HTLB_BUDDY_PGALLOC</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#nr_huge_pages\">nr_huge_pages</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#surplus_huge_pages\">surplus_huge_pages</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__count_vm_event\">__count_vm_event</a>(<a class=\"id\" href=\"#HTLB_BUDDY_PGALLOC_FAIL\">HTLB_BUDDY_PGALLOC_FAIL</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hugetlb_lock\">hugetlb_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Increase the hugetlb pool such that it can accomodate a reservation</span>", 
"<span class=\"comment\"> * of size 'delta'.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#gather_surplus_pages\">gather_surplus_pages</a>(struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a>, int <a class=\"id\" href=\"#delta\">delta</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#surplus_list\">surplus_list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#needed\">needed</a>, <a class=\"id\" href=\"#allocated\">allocated</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#needed\">needed</a> = (<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#resv_huge_pages\">resv_huge_pages</a> + <a class=\"id\" href=\"#delta\">delta</a>) - <a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#free_huge_pages\">free_huge_pages</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#needed\">needed</a> <= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#resv_huge_pages\">resv_huge_pages</a> += <a class=\"id\" href=\"#delta\">delta</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#allocated\">allocated</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#surplus_list\">surplus_list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hugetlb_lock\">hugetlb_lock</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#needed\">needed</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#alloc_buddy_huge_page\">alloc_buddy_huge_page</a>(<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We were not able to allocate enough pages to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * satisfy the entire reservation so we free what</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * we've allocated so far.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hugetlb_lock\">hugetlb_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#needed\">needed</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free\">free</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>, &amp;<a class=\"id\" href=\"#surplus_list\">surplus_list</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#allocated\">allocated</a> += <a class=\"id\" href=\"#needed\">needed</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * After retaking hugetlb_lock, we need to recalculate 'needed'</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * because either resv_huge_pages or free_huge_pages may have changed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hugetlb_lock\">hugetlb_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#needed\">needed</a> = (<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#resv_huge_pages\">resv_huge_pages</a> + <a class=\"id\" href=\"#delta\">delta</a>) -", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#free_huge_pages\">free_huge_pages</a> + <a class=\"id\" href=\"#allocated\">allocated</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#needed\">needed</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The surplus_list now contains _at_least_ the number of extra pages</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * needed to accomodate the reservation.  Add the appropriate number</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of pages to the hugetlb pool and free the extras back to the buddy</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * allocator.  Commit the entire reservation here to prevent another</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * process from stealing the pages as they are added to the pool but</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * before they are reserved.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#needed\">needed</a> += <a class=\"id\" href=\"#allocated\">allocated</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#resv_huge_pages\">resv_huge_pages</a> += <a class=\"id\" href=\"#delta\">delta</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<a class=\"id\" href=\"#free\">free</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* Free the needed pages to the hugetlb pool */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#surplus_list\">surplus_list</a>, <a class=\"id\" href=\"#lru\">lru</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((--<a class=\"id\" href=\"#needed\">needed</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enqueue_huge_page\">enqueue_huge_page</a>(<a class=\"id\" href=\"#h\">h</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Free unnecessary surplus pages to the buddy allocator */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#surplus_list\">surplus_list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hugetlb_lock\">hugetlb_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#surplus_list\">surplus_list</a>, <a class=\"id\" href=\"#lru\">lru</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * The page has a reference count of zero already, so</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * call free_huge_page directly instead of using</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * put_page.  This must be done with hugetlb_lock</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * unlocked which is safe because free_huge_page takes</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * hugetlb_lock before deciding how to free the page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_huge_page\">free_huge_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#hugetlb_lock\">hugetlb_lock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * When releasing a hugetlb pool reservation, any surplus pages that were</span>", 
"<span class=\"comment\"> * allocated to satisfy the reservation must be explicitly freed if they were</span>", 
"<span class=\"comment\"> * never used.</span>", 
"<span class=\"comment\"> * Called with hugetlb_lock held.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#return_unused_surplus_pages\">return_unused_surplus_pages</a>(struct <a class=\"id\" href=\"#hstate\">hstate</a> *<a class=\"id\" href=\"#h\">h</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#unused_resv_pages\">unused_resv_pages</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Uncommit the reservation */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#resv_huge_pages\">resv_huge_pages</a> -= <a class=\"id\" href=\"#unused_resv_pages\">unused_resv_pages</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Cannot return gigantic pages currently */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#order\">order</a> >= <a class=\"id\" href=\"#MAX_ORDER\">MAX_ORDER</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#unused_resv_pages\">unused_resv_pages</a>, <a class=\"id\" href=\"#h\">h</a>-><a class=\"id\" href=\"#surplus_huge_pages\">surplus_huge_pages</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We want to release as many surplus pages as possible, spread</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * evenly across all nodes with memory. Iterate across these nodes</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * until we can no longer free unreserved surplus pages. This occurs</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * when the nodes with surplus pages have no free pages.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * free_pool_huge_page() will balance the the freed pages across the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * on-line nodes with memory and will handle the hstate accounting.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#nr_pages\">nr_pages</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#free_pool_huge_page\">free_pool_huge_page</a>(<a class=\"id\" href=\"#h\">h</a>, &amp;<a class=\"id\" href=\"#node_states\">node_states</a>[<a class=\"id\" href=\"#N_HIGH_MEMORY\">N_HIGH_MEMORY</a>], 1))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
];
xr_frag_insert('l/11/490d9bd45b1440864e52e1d149067c2058f585.xr', __xr_tmp);
