var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Read-Copy Update mechanism for mutual exclusion</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> * the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\"> * (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> * GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> * along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright IBM Corporation, 2008</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Authors: Dipankar Sarma &lt;dipankar@in.ibm.com&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    Manfred Spraul &lt;manfred@colorfullife.com&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    Paul E. McKenney &lt;paulmck@linux.vnet.ibm.com&gt; Hierarchical version</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Based on the original work by Paul McKenney &lt;paulmck@us.ibm.com&gt;</span>", 
"<span class=\"comment\"> * and inputs from Rusty Russell, Andrea Arcangeli and Andi Kleen.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For detailed explanation of Read-Copy Update mechanism see -</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Documentation/RCU</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#smp\">smp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rcupdate\">rcupdate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#nmi\">nmi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#atomic\">atomic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bitops\">bitops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#completion\">completion</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#moduleparam\">moduleparam</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#percpu\">percpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#notifier\">notifier</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#time\">time</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel_stat\">kernel_stat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"rcutree.h\"", 
"", 
"<span class=\"comment\">/* Data structures. */</span>", 
"", 
"static struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> <a class=\"id\" href=\"#rcu_node_class\">rcu_node_class</a>[<a class=\"id\" href=\"#NUM_RCU_LVLS\">NUM_RCU_LVLS</a>];", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RCU_STATE_INITIALIZER\">RCU_STATE_INITIALIZER</a>(<a class=\"id\" href=\"#structname\">structname</a>) { \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#level\">level</a> = { &amp;<a class=\"id\" href=\"#structname\">structname</a>.<a class=\"id\" href=\"#node\">node</a>[0] }, \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#levelcnt\">levelcnt</a> = { \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NUM_RCU_LVL_0\">NUM_RCU_LVL_0</a>,  <span class=\"comment\">/* root of hierarchy. */</span> \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NUM_RCU_LVL_1\">NUM_RCU_LVL_1</a>, \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NUM_RCU_LVL_2\">NUM_RCU_LVL_2</a>, \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NUM_RCU_LVL_3\">NUM_RCU_LVL_3</a>, \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NUM_RCU_LVL_4\">NUM_RCU_LVL_4</a>, <span class=\"comment\">/* == MAX_RCU_LVLS */</span> \\", 
"<span class=\"ts\"/>}, \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#signaled\">signaled</a> = <a class=\"id\" href=\"#RCU_GP_IDLE\">RCU_GP_IDLE</a>, \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#gpnum\">gpnum</a> = -300, \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#completed\">completed</a> = -300, \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#onofflock\">onofflock</a> = <a class=\"id\" href=\"#__RAW_SPIN_LOCK_UNLOCKED\">__RAW_SPIN_LOCK_UNLOCKED</a>(&amp;<a class=\"id\" href=\"#structname\">structname</a>.<a class=\"id\" href=\"#onofflock\">onofflock</a>), \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#orphan_cbs_list\">orphan_cbs_list</a> = <a class=\"id\" href=\"#NULL\">NULL</a>, \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#orphan_cbs_tail\">orphan_cbs_tail</a> = &amp;<a class=\"id\" href=\"#structname\">structname</a>.<a class=\"id\" href=\"#orphan_cbs_list\">orphan_cbs_list</a>, \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#orphan_qlen\">orphan_qlen</a> = 0, \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#fqslock\">fqslock</a> = <a class=\"id\" href=\"#__RAW_SPIN_LOCK_UNLOCKED\">__RAW_SPIN_LOCK_UNLOCKED</a>(&amp;<a class=\"id\" href=\"#structname\">structname</a>.<a class=\"id\" href=\"#fqslock\">fqslock</a>), \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#n_force_qs\">n_force_qs</a> = 0, \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#n_force_qs_ngp\">n_force_qs_ngp</a> = 0, \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = #<a class=\"id\" href=\"#structname\">structname</a>, \\", 
"}", 
"", 
"struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> <a class=\"id\" href=\"#rcu_sched_state\">rcu_sched_state</a> = <a class=\"id\" href=\"#RCU_STATE_INITIALIZER\">RCU_STATE_INITIALIZER</a>(<a class=\"id\" href=\"#rcu_sched_state\">rcu_sched_state</a>);", 
"<a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#rcu_data\">rcu_data</a>, <a class=\"id\" href=\"#rcu_sched_data\">rcu_sched_data</a>);", 
"", 
"struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> <a class=\"id\" href=\"#rcu_bh_state\">rcu_bh_state</a> = <a class=\"id\" href=\"#RCU_STATE_INITIALIZER\">RCU_STATE_INITIALIZER</a>(<a class=\"id\" href=\"#rcu_bh_state\">rcu_bh_state</a>);", 
"<a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#rcu_data\">rcu_data</a>, <a class=\"id\" href=\"#rcu_bh_data\">rcu_bh_data</a>);", 
"", 
"int <a class=\"id\" href=\"#rcu_scheduler_active\">rcu_scheduler_active</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#rcu_scheduler_active\">rcu_scheduler_active</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return true if an RCU grace period is in progress.  The ACCESS_ONCE()s</span>", 
"<span class=\"comment\"> * permit this function to be invoked without holding the root rcu_node</span>", 
"<span class=\"comment\"> * structure's -&gt;lock, but of course results can be subject to change.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#rcu_gp_in_progress\">rcu_gp_in_progress</a>(struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ACCESS_ONCE\">ACCESS_ONCE</a>(<a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#completed\">completed</a>) != <a class=\"id\" href=\"#ACCESS_ONCE\">ACCESS_ONCE</a>(<a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#gpnum\">gpnum</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Note a quiescent state.  Because we do not need to know</span>", 
"<span class=\"comment\"> * how many quiescent states passed, just if there was at least</span>", 
"<span class=\"comment\"> * one since the start of the grace period, this just sets a flag.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#rcu_sched_qs\">rcu_sched_qs</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_data\">rcu_data</a> *<a class=\"id\" href=\"#rdp\">rdp</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#rcu_sched_data\">rcu_sched_data</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#passed_quiesc_completed\">passed_quiesc_completed</a> = <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#gpnum\">gpnum</a> - 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#passed_quiesc\">passed_quiesc</a> = 1;", 
"}", 
"", 
"void <a class=\"id\" href=\"#rcu_bh_qs\">rcu_bh_qs</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_data\">rcu_data</a> *<a class=\"id\" href=\"#rdp\">rdp</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#rcu_bh_data\">rcu_bh_data</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#passed_quiesc_completed\">passed_quiesc_completed</a> = <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#gpnum\">gpnum</a> - 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#passed_quiesc\">passed_quiesc</a> = 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Note a context switch.  This is a quiescent state for RCU-sched,</span>", 
"<span class=\"comment\"> * and requires special handling for preemptible RCU.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#rcu_note_context_switch\">rcu_note_context_switch</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_sched_qs\">rcu_sched_qs</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_preempt_note_context_switch\">rcu_preempt_note_context_switch</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NO_HZ\">CONFIG_NO_HZ</a>", 
"<a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#rcu_dynticks\">rcu_dynticks</a>, <a class=\"id\" href=\"#rcu_dynticks\">rcu_dynticks</a>) = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#dynticks_nesting\">dynticks_nesting</a> = 1,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#dynticks\">dynticks</a> = 1,", 
"};", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #ifdef CONFIG_NO_HZ */</span>", 
"", 
"static int <a class=\"id\" href=\"#blimit\">blimit</a> = 10;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Maximum callbacks per softirq. */</span>", 
"static int <a class=\"id\" href=\"#qhimark\">qhimark</a> = 10000;<span class=\"ts\"/><span class=\"comment\">/* If this many pending, ignore blimit. */</span>", 
"static int <a class=\"id\" href=\"#qlowmark\">qlowmark</a> = 100;<span class=\"ts\"/><span class=\"comment\">/* Once only this many pending, use blimit. */</span>", 
"", 
"<a class=\"id\" href=\"#module_param\">module_param</a>(<a class=\"id\" href=\"#blimit\">blimit</a>, int, 0);", 
"<a class=\"id\" href=\"#module_param\">module_param</a>(<a class=\"id\" href=\"#qhimark\">qhimark</a>, int, 0);", 
"<a class=\"id\" href=\"#module_param\">module_param</a>(<a class=\"id\" href=\"#qlowmark\">qlowmark</a>, int, 0);", 
"", 
"static void <a class=\"id\" href=\"#force_quiescent_state\">force_quiescent_state</a>(struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>, int <a class=\"id\" href=\"#relaxed\">relaxed</a>);", 
"static int <a class=\"id\" href=\"#rcu_pending\">rcu_pending</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return the number of RCU-sched batches processed thus far for debug &amp; stats.</span>", 
"<span class=\"comment\"> */</span>", 
"long <a class=\"id\" href=\"#rcu_batches_completed_sched\">rcu_batches_completed_sched</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rcu_sched_state\">rcu_sched_state</a>.<a class=\"id\" href=\"#completed\">completed</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#rcu_batches_completed_sched\">rcu_batches_completed_sched</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return the number of RCU BH batches processed thus far for debug &amp; stats.</span>", 
"<span class=\"comment\"> */</span>", 
"long <a class=\"id\" href=\"#rcu_batches_completed_bh\">rcu_batches_completed_bh</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rcu_bh_state\">rcu_bh_state</a>.<a class=\"id\" href=\"#completed\">completed</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#rcu_batches_completed_bh\">rcu_batches_completed_bh</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Force a quiescent state for RCU BH.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#rcu_bh_force_quiescent_state\">rcu_bh_force_quiescent_state</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#force_quiescent_state\">force_quiescent_state</a>(&amp;<a class=\"id\" href=\"#rcu_bh_state\">rcu_bh_state</a>, 0);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#rcu_bh_force_quiescent_state\">rcu_bh_force_quiescent_state</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Force a quiescent state for RCU-sched.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#rcu_sched_force_quiescent_state\">rcu_sched_force_quiescent_state</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#force_quiescent_state\">force_quiescent_state</a>(&amp;<a class=\"id\" href=\"#rcu_sched_state\">rcu_sched_state</a>, 0);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#rcu_sched_force_quiescent_state\">rcu_sched_force_quiescent_state</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Does the CPU have callbacks ready to be invoked?</span>", 
"<span class=\"comment\"> */</span>", 
"static int", 
"<a class=\"id\" href=\"#cpu_has_callbacks_ready_to_invoke\">cpu_has_callbacks_ready_to_invoke</a>(struct <a class=\"id\" href=\"#rcu_data\">rcu_data</a> *<a class=\"id\" href=\"#rdp\">rdp</a>)", 
"{", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#nxtlist\">nxtlist</a> != <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#nxttail\">nxttail</a>[<a class=\"id\" href=\"#RCU_DONE_TAIL\">RCU_DONE_TAIL</a>];", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Does the current CPU require a yet-as-unscheduled grace period?</span>", 
"<span class=\"comment\"> */</span>", 
"static int", 
"<a class=\"id\" href=\"#cpu_needs_another_gp\">cpu_needs_another_gp</a>(struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>, struct <a class=\"id\" href=\"#rcu_data\">rcu_data</a> *<a class=\"id\" href=\"#rdp\">rdp</a>)", 
"{", 
"<span class=\"ts\"/>return *<a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#nxttail\">nxttail</a>[<a class=\"id\" href=\"#RCU_DONE_TAIL\">RCU_DONE_TAIL</a>] && !<a class=\"id\" href=\"#rcu_gp_in_progress\">rcu_gp_in_progress</a>(<a class=\"id\" href=\"#rsp\">rsp</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return the root node of the specified rcu_state structure.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rcu_get_root\">rcu_get_root</a>(struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>)", 
"{", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#node\">node</a>[0];", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If the specified CPU is offline, tell the caller that it is in</span>", 
"<span class=\"comment\"> * a quiescent state.  Otherwise, whack it with a reschedule IPI.</span>", 
"<span class=\"comment\"> * Grace periods can end up waiting on an offline CPU when that</span>", 
"<span class=\"comment\"> * CPU is in the process of coming online -- it will be added to the</span>", 
"<span class=\"comment\"> * rcu_node bitmasks before it actually makes it online.  The same thing</span>", 
"<span class=\"comment\"> * can happen while a CPU is in the process of coming online.  Because this</span>", 
"<span class=\"comment\"> * race is quite rare, we check for it after detecting that the grace</span>", 
"<span class=\"comment\"> * period has been delayed rather than checking each and every CPU</span>", 
"<span class=\"comment\"> * each and every time we start a new grace period.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#rcu_implicit_offline_qs\">rcu_implicit_offline_qs</a>(struct <a class=\"id\" href=\"#rcu_data\">rcu_data</a> *<a class=\"id\" href=\"#rdp\">rdp</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the CPU is offline, it is in a quiescent state.  We can</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * trust its state not to change because interrupts are disabled.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_is_offline\">cpu_is_offline</a>(<a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#cpu\">cpu</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#offline_fqs\">offline_fqs</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If preemptable RCU, no point in sending reschedule IPI. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#preemptable\">preemptable</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The CPU is online, so send it a reschedule IPI. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#cpu\">cpu</a> != <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_send_reschedule\">smp_send_reschedule</a>(<a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_need_resched\">set_need_resched</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#resched_ipi\">resched_ipi</a>++;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #ifdef CONFIG_SMP */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NO_HZ\">CONFIG_NO_HZ</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * rcu_enter_nohz - inform RCU that current CPU is entering nohz</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Enter nohz mode, in other words, -leave- the mode in which RCU</span>", 
"<span class=\"comment\"> * read-side critical sections can occur.  (Though RCU read-side</span>", 
"<span class=\"comment\"> * critical sections can occur in irq handlers in nohz mode, a possibility</span>", 
"<span class=\"comment\"> * handled by rcu_irq_enter() and rcu_irq_exit()).</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#rcu_enter_nohz\">rcu_enter_nohz</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_dynticks\">rcu_dynticks</a> *<a class=\"id\" href=\"#rdtp\">rdtp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>(); <span class=\"comment\">/* CPUs seeing ++ must see prior RCU read-side crit sects */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdtp\">rdtp</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#rcu_dynticks\">rcu_dynticks</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdtp\">rdtp</a>-><a class=\"id\" href=\"#dynticks\">dynticks</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdtp\">rdtp</a>-><a class=\"id\" href=\"#dynticks_nesting\">dynticks_nesting</a>--;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#rdtp\">rdtp</a>-><a class=\"id\" href=\"#dynticks\">dynticks</a> &amp; 0x1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * rcu_exit_nohz - inform RCU that current CPU is leaving nohz</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Exit nohz mode, in other words, -enter- the mode in which RCU</span>", 
"<span class=\"comment\"> * read-side critical sections normally occur.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#rcu_exit_nohz\">rcu_exit_nohz</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_dynticks\">rcu_dynticks</a> *<a class=\"id\" href=\"#rdtp\">rdtp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdtp\">rdtp</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#rcu_dynticks\">rcu_dynticks</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdtp\">rdtp</a>-><a class=\"id\" href=\"#dynticks\">dynticks</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdtp\">rdtp</a>-><a class=\"id\" href=\"#dynticks_nesting\">dynticks_nesting</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(!(<a class=\"id\" href=\"#rdtp\">rdtp</a>-><a class=\"id\" href=\"#dynticks\">dynticks</a> &amp; 0x1));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>(); <span class=\"comment\">/* CPUs seeing ++ must see later RCU read-side crit sects */</span>", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * rcu_nmi_enter - inform RCU of entry to NMI context</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the CPU was idle with dynamic ticks active, and there is no</span>", 
"<span class=\"comment\"> * irq handler running, this updates rdtp-&gt;dynticks_nmi to let the</span>", 
"<span class=\"comment\"> * RCU grace-period handling know that the CPU is active.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#rcu_nmi_enter\">rcu_nmi_enter</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_dynticks\">rcu_dynticks</a> *<a class=\"id\" href=\"#rdtp\">rdtp</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#rcu_dynticks\">rcu_dynticks</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rdtp\">rdtp</a>-><a class=\"id\" href=\"#dynticks\">dynticks</a> &amp; 0x1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdtp\">rdtp</a>-><a class=\"id\" href=\"#dynticks_nmi\">dynticks_nmi</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(!(<a class=\"id\" href=\"#rdtp\">rdtp</a>-><a class=\"id\" href=\"#dynticks_nmi\">dynticks_nmi</a> &amp; 0x1));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>(); <span class=\"comment\">/* CPUs seeing ++ must see later RCU read-side crit sects */</span>", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * rcu_nmi_exit - inform RCU of exit from NMI context</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the CPU was idle with dynamic ticks active, and there is no</span>", 
"<span class=\"comment\"> * irq handler running, this updates rdtp-&gt;dynticks_nmi to let the</span>", 
"<span class=\"comment\"> * RCU grace-period handling know that the CPU is no longer active.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#rcu_nmi_exit\">rcu_nmi_exit</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_dynticks\">rcu_dynticks</a> *<a class=\"id\" href=\"#rdtp\">rdtp</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#rcu_dynticks\">rcu_dynticks</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rdtp\">rdtp</a>-><a class=\"id\" href=\"#dynticks\">dynticks</a> &amp; 0x1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>(); <span class=\"comment\">/* CPUs seeing ++ must see prior RCU read-side crit sects */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdtp\">rdtp</a>-><a class=\"id\" href=\"#dynticks_nmi\">dynticks_nmi</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#rdtp\">rdtp</a>-><a class=\"id\" href=\"#dynticks_nmi\">dynticks_nmi</a> &amp; 0x1);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * rcu_irq_enter - inform RCU of entry to hard irq context</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the CPU was idle with dynamic ticks active, this updates the</span>", 
"<span class=\"comment\"> * rdtp-&gt;dynticks to let the RCU handling know that the CPU is active.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#rcu_irq_enter\">rcu_irq_enter</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_dynticks\">rcu_dynticks</a> *<a class=\"id\" href=\"#rdtp\">rdtp</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#rcu_dynticks\">rcu_dynticks</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rdtp\">rdtp</a>-><a class=\"id\" href=\"#dynticks_nesting\">dynticks_nesting</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdtp\">rdtp</a>-><a class=\"id\" href=\"#dynticks\">dynticks</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(!(<a class=\"id\" href=\"#rdtp\">rdtp</a>-><a class=\"id\" href=\"#dynticks\">dynticks</a> &amp; 0x1));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>(); <span class=\"comment\">/* CPUs seeing ++ must see later RCU read-side crit sects */</span>", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * rcu_irq_exit - inform RCU of exit from hard irq context</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the CPU was idle with dynamic ticks active, update the rdp-&gt;dynticks</span>", 
"<span class=\"comment\"> * to put let the RCU handling be aware that the CPU is going back to idle</span>", 
"<span class=\"comment\"> * with no ticks.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#rcu_irq_exit\">rcu_irq_exit</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_dynticks\">rcu_dynticks</a> *<a class=\"id\" href=\"#rdtp\">rdtp</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#rcu_dynticks\">rcu_dynticks</a>);", 
"", 
"<span class=\"ts\"/>if (--<a class=\"id\" href=\"#rdtp\">rdtp</a>-><a class=\"id\" href=\"#dynticks_nesting\">dynticks_nesting</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>(); <span class=\"comment\">/* CPUs seeing ++ must see prior RCU read-side crit sects */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdtp\">rdtp</a>-><a class=\"id\" href=\"#dynticks\">dynticks</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#rdtp\">rdtp</a>-><a class=\"id\" href=\"#dynticks\">dynticks</a> &amp; 0x1);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If the interrupt queued a callback, get out of dyntick mode. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#rcu_sched_data\">rcu_sched_data</a>).<a class=\"id\" href=\"#nxtlist\">nxtlist</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#rcu_bh_data\">rcu_bh_data</a>).<a class=\"id\" href=\"#nxtlist\">nxtlist</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_need_resched\">set_need_resched</a>();", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Snapshot the specified CPU's dynticks counter so that we can later</span>", 
"<span class=\"comment\"> * credit them with an implicit quiescent state.  Return 1 if this CPU</span>", 
"<span class=\"comment\"> * is in dynticks idle mode, which is an extended quiescent state.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#dyntick_save_progress_counter\">dyntick_save_progress_counter</a>(struct <a class=\"id\" href=\"#rcu_data\">rcu_data</a> *<a class=\"id\" href=\"#rdp\">rdp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#snap\">snap</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#snap_nmi\">snap_nmi</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#snap\">snap</a> = <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#dynticks\">dynticks</a>-><a class=\"id\" href=\"#dynticks\">dynticks</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#snap_nmi\">snap_nmi</a> = <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#dynticks\">dynticks</a>-><a class=\"id\" href=\"#dynticks_nmi\">dynticks_nmi</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();<span class=\"ts\"/><span class=\"comment\">/* Order sampling of snap with end of grace period. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#dynticks_snap\">dynticks_snap</a> = <a class=\"id\" href=\"#snap\">snap</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#dynticks_nmi_snap\">dynticks_nmi_snap</a> = <a class=\"id\" href=\"#snap_nmi\">snap_nmi</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = ((<a class=\"id\" href=\"#snap\">snap</a> &amp; 0x1) == 0) && ((<a class=\"id\" href=\"#snap_nmi\">snap_nmi</a> &amp; 0x1) == 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#dynticks_fqs\">dynticks_fqs</a>++;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return true if the specified CPU has passed through a quiescent</span>", 
"<span class=\"comment\"> * state by virtue of being in or having passed through an dynticks</span>", 
"<span class=\"comment\"> * idle state since the last call to dyntick_save_progress_counter()</span>", 
"<span class=\"comment\"> * for this same CPU.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#rcu_implicit_dynticks_qs\">rcu_implicit_dynticks_qs</a>(struct <a class=\"id\" href=\"#rcu_data\">rcu_data</a> *<a class=\"id\" href=\"#rdp\">rdp</a>)", 
"{", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#curr\">curr</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#curr_nmi\">curr_nmi</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#snap\">snap</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#snap_nmi\">snap_nmi</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#curr\">curr</a> = <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#dynticks\">dynticks</a>-><a class=\"id\" href=\"#dynticks\">dynticks</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#snap\">snap</a> = <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#dynticks_snap\">dynticks_snap</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#curr_nmi\">curr_nmi</a> = <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#dynticks\">dynticks</a>-><a class=\"id\" href=\"#dynticks_nmi\">dynticks_nmi</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#snap_nmi\">snap_nmi</a> = <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#dynticks_nmi_snap\">dynticks_nmi_snap</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>(); <span class=\"comment\">/* force ordering with cpu entering/leaving dynticks. */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the CPU passed through or entered a dynticks idle phase with</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * no active irq/NMI handlers, then we can safely pretend that the CPU</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * already acknowledged the request to pass through a quiescent</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * state.  Either way, that CPU cannot possibly be in an RCU</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * read-side critical section that started before the beginning</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of the current RCU grace period.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#curr\">curr</a> != <a class=\"id\" href=\"#snap\">snap</a> || (<a class=\"id\" href=\"#curr\">curr</a> &amp; 0x1) == 0) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#curr_nmi\">curr_nmi</a> != <a class=\"id\" href=\"#snap_nmi\">snap_nmi</a> || (<a class=\"id\" href=\"#curr_nmi\">curr_nmi</a> &amp; 0x1) == 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#dynticks_fqs\">dynticks_fqs</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Go check for the CPU being offline. */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rcu_implicit_offline_qs\">rcu_implicit_offline_qs</a>(<a class=\"id\" href=\"#rdp\">rdp</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #ifdef CONFIG_SMP */</span>", 
"", 
"#else <span class=\"comment\">/* #ifdef CONFIG_NO_HZ */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"", 
"static int <a class=\"id\" href=\"#dyntick_save_progress_counter\">dyntick_save_progress_counter</a>(struct <a class=\"id\" href=\"#rcu_data\">rcu_data</a> *<a class=\"id\" href=\"#rdp\">rdp</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#rcu_implicit_dynticks_qs\">rcu_implicit_dynticks_qs</a>(struct <a class=\"id\" href=\"#rcu_data\">rcu_data</a> *<a class=\"id\" href=\"#rdp\">rdp</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rcu_implicit_offline_qs\">rcu_implicit_offline_qs</a>(<a class=\"id\" href=\"#rdp\">rdp</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #ifdef CONFIG_SMP */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #else #ifdef CONFIG_NO_HZ */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RCU_CPU_STALL_DETECTOR\">CONFIG_RCU_CPU_STALL_DETECTOR</a>", 
"", 
"int <a class=\"id\" href=\"#rcu_cpu_stall_panicking\">rcu_cpu_stall_panicking</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"static void <a class=\"id\" href=\"#record_gp_stall_check_time\">record_gp_stall_check_time</a>(struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#gp_start\">gp_start</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#jiffies_stall\">jiffies_stall</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#RCU_SECONDS_TILL_STALL_CHECK\">RCU_SECONDS_TILL_STALL_CHECK</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#print_other_cpu_stall\">print_other_cpu_stall</a>(struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#delta\">delta</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp\">rnp</a> = <a class=\"id\" href=\"#rcu_get_root\">rcu_get_root</a>(<a class=\"id\" href=\"#rsp\">rsp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Only let one CPU complain about others per time interval. */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> - <a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#jiffies_stall\">jiffies_stall</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#delta\">delta</a> &lt; <a class=\"id\" href=\"#RCU_STALL_RAT_DELAY\">RCU_STALL_RAT_DELAY</a> || !<a class=\"id\" href=\"#rcu_gp_in_progress\">rcu_gp_in_progress</a>(<a class=\"id\" href=\"#rsp\">rsp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#jiffies_stall\">jiffies_stall</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#RCU_SECONDS_TILL_STALL_RECHECK\">RCU_SECONDS_TILL_STALL_RECHECK</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now rat on any tasks that got kicked up to the root rcu_node</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * due to CPU offlining.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_print_task_stall\">rcu_print_task_stall</a>(<a class=\"id\" href=\"#rnp\">rnp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* OK, time to rat on our buddy... */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"INFO: %s detected stalls on CPUs/tasks: {\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_for_each_leaf_node\">rcu_for_each_leaf_node</a>(<a class=\"id\" href=\"#rsp\">rsp</a>, <a class=\"id\" href=\"#rnp\">rnp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_print_task_stall\">rcu_print_task_stall</a>(<a class=\"id\" href=\"#rnp\">rnp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#qsmask\">qsmask</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#cpu\">cpu</a> = 0; <a class=\"id\" href=\"#cpu\">cpu</a> <= <a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#grphi\">grphi</a> - <a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#grplo\">grplo</a>; <a class=\"id\" href=\"#cpu\">cpu</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#qsmask\">qsmask</a> &amp; (1UL << <a class=\"id\" href=\"#cpu\">cpu</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\" %d\", <a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#grplo\">grplo</a> + <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"} (detected by %d, t=%ld jiffies)\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>(), (long)(<a class=\"id\" href=\"#jiffies\">jiffies</a> - <a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#gp_start\">gp_start</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trigger_all_cpu_backtrace\">trigger_all_cpu_backtrace</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If so configured, complain about tasks blocking the grace period. */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_print_detail_task_stall\">rcu_print_detail_task_stall</a>(<a class=\"id\" href=\"#rsp\">rsp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#force_quiescent_state\">force_quiescent_state</a>(<a class=\"id\" href=\"#rsp\">rsp</a>, 0);  <span class=\"comment\">/* Kick them all. */</span>", 
"}", 
"", 
"static void <a class=\"id\" href=\"#print_cpu_stall\">print_cpu_stall</a>(struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp\">rnp</a> = <a class=\"id\" href=\"#rcu_get_root\">rcu_get_root</a>(<a class=\"id\" href=\"#rsp\">rsp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"INFO: %s detected stall on CPU %d (t=%lu jiffies)\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>(), <a class=\"id\" href=\"#jiffies\">jiffies</a> - <a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#gp_start\">gp_start</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trigger_all_cpu_backtrace\">trigger_all_cpu_backtrace</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ULONG_CMP_GE\">ULONG_CMP_GE</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#jiffies_stall\">jiffies_stall</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#jiffies_stall\">jiffies_stall</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#RCU_SECONDS_TILL_STALL_RECHECK\">RCU_SECONDS_TILL_STALL_RECHECK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_need_resched\">set_need_resched</a>();  <span class=\"comment\">/* kick ourselves to get things going. */</span>", 
"}", 
"", 
"static void <a class=\"id\" href=\"#check_cpu_stall\">check_cpu_stall</a>(struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>, struct <a class=\"id\" href=\"#rcu_data\">rcu_data</a> *<a class=\"id\" href=\"#rdp\">rdp</a>)", 
"{", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#delta\">delta</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp\">rnp</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rcu_cpu_stall_panicking\">rcu_cpu_stall_panicking</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> - <a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#jiffies_stall\">jiffies_stall</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rnp\">rnp</a> = <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#mynode\">mynode</a>;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#qsmask\">qsmask</a> &amp; <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#grpmask\">grpmask</a>) && <a class=\"id\" href=\"#delta\">delta</a> >= 0) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We haven't checked in, so go dump stack. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print_cpu_stall\">print_cpu_stall</a>(<a class=\"id\" href=\"#rsp\">rsp</a>);", 
"", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#rcu_gp_in_progress\">rcu_gp_in_progress</a>(<a class=\"id\" href=\"#rsp\">rsp</a>) && <a class=\"id\" href=\"#delta\">delta</a> >= <a class=\"id\" href=\"#RCU_STALL_RAT_DELAY\">RCU_STALL_RAT_DELAY</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* They had two time units to dump stack, so complain. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print_other_cpu_stall\">print_other_cpu_stall</a>(<a class=\"id\" href=\"#rsp\">rsp</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#rcu_panic\">rcu_panic</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#this\">this</a>, unsigned long <a class=\"id\" href=\"#ev\">ev</a>, void *<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_cpu_stall_panicking\">rcu_cpu_stall_panicking</a> = 1;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_DONE\">NOTIFY_DONE</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> <a class=\"id\" href=\"#rcu_panic_block\">rcu_panic_block</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#notifier_call\">notifier_call</a> = <a class=\"id\" href=\"#rcu_panic\">rcu_panic</a>,", 
"};", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#check_cpu_stall_init\">check_cpu_stall_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_notifier_chain_register\">atomic_notifier_chain_register</a>(&amp;<a class=\"id\" href=\"#panic_notifier_list\">panic_notifier_list</a>, &amp;<a class=\"id\" href=\"#rcu_panic_block\">rcu_panic_block</a>);", 
"}", 
"", 
"#else <span class=\"comment\">/* #ifdef CONFIG_RCU_CPU_STALL_DETECTOR */</span>", 
"", 
"static void <a class=\"id\" href=\"#record_gp_stall_check_time\">record_gp_stall_check_time</a>(struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>)", 
"{", 
"}", 
"", 
"static void <a class=\"id\" href=\"#check_cpu_stall\">check_cpu_stall</a>(struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>, struct <a class=\"id\" href=\"#rcu_data\">rcu_data</a> *<a class=\"id\" href=\"#rdp\">rdp</a>)", 
"{", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#check_cpu_stall_init\">check_cpu_stall_init</a>(void)", 
"{", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #else #ifdef CONFIG_RCU_CPU_STALL_DETECTOR */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Update CPU-local rcu_data state to record the newly noticed grace period.</span>", 
"<span class=\"comment\"> * This is used both when we started the grace period and when we notice</span>", 
"<span class=\"comment\"> * that someone else started the grace period.  The caller must hold the</span>", 
"<span class=\"comment\"> * -&gt;lock of the leaf rcu_node structure corresponding to the current CPU,</span>", 
"<span class=\"comment\"> *  and must have irqs disabled.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__note_new_gpnum\">__note_new_gpnum</a>(struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>, struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp\">rnp</a>, struct <a class=\"id\" href=\"#rcu_data\">rcu_data</a> *<a class=\"id\" href=\"#rdp\">rdp</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#gpnum\">gpnum</a> != <a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#gpnum\">gpnum</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#qs_pending\">qs_pending</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#passed_quiesc\">passed_quiesc</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#gpnum\">gpnum</a> = <a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#gpnum\">gpnum</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#note_new_gpnum\">note_new_gpnum</a>(struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>, struct <a class=\"id\" href=\"#rcu_data\">rcu_data</a> *<a class=\"id\" href=\"#rdp\">rdp</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp\">rnp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rnp\">rnp</a> = <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#mynode\">mynode</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#gpnum\">gpnum</a> == <a class=\"id\" href=\"#ACCESS_ONCE\">ACCESS_ONCE</a>(<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#gpnum\">gpnum</a>) || <span class=\"comment\">/* outside lock. */</span>", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#raw_spin_trylock\">raw_spin_trylock</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>)) { <span class=\"comment\">/* irqs already off, so later. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__note_new_gpnum\">__note_new_gpnum</a>(<a class=\"id\" href=\"#rsp\">rsp</a>, <a class=\"id\" href=\"#rnp\">rnp</a>, <a class=\"id\" href=\"#rdp\">rdp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Did someone else start a new RCU grace period start since we last</span>", 
"<span class=\"comment\"> * checked?  Update local state appropriately if so.  Must be called</span>", 
"<span class=\"comment\"> * on the CPU corresponding to rdp.</span>", 
"<span class=\"comment\"> */</span>", 
"static int", 
"<a class=\"id\" href=\"#check_for_new_grace_period\">check_for_new_grace_period</a>(struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>, struct <a class=\"id\" href=\"#rcu_data\">rcu_data</a> *<a class=\"id\" href=\"#rdp\">rdp</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#gpnum\">gpnum</a> != <a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#gpnum\">gpnum</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#note_new_gpnum\">note_new_gpnum</a>(<a class=\"id\" href=\"#rsp\">rsp</a>, <a class=\"id\" href=\"#rdp\">rdp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Advance this CPU's callbacks, but only if the current grace period</span>", 
"<span class=\"comment\"> * has ended.  This may be called only from the CPU to whom the rdp</span>", 
"<span class=\"comment\"> * belongs.  In addition, the corresponding leaf rcu_node structure's</span>", 
"<span class=\"comment\"> * -&gt;lock must be held by the caller, with irqs disabled.</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#__rcu_process_gp_end\">__rcu_process_gp_end</a>(struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>, struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp\">rnp</a>, struct <a class=\"id\" href=\"#rcu_data\">rcu_data</a> *<a class=\"id\" href=\"#rdp\">rdp</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Did another grace period end? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#completed\">completed</a> != <a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#completed\">completed</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Advance callbacks.  No harm if list empty. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#nxttail\">nxttail</a>[<a class=\"id\" href=\"#RCU_DONE_TAIL\">RCU_DONE_TAIL</a>] = <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#nxttail\">nxttail</a>[<a class=\"id\" href=\"#RCU_WAIT_TAIL\">RCU_WAIT_TAIL</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#nxttail\">nxttail</a>[<a class=\"id\" href=\"#RCU_WAIT_TAIL\">RCU_WAIT_TAIL</a>] = <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#nxttail\">nxttail</a>[<a class=\"id\" href=\"#RCU_NEXT_READY_TAIL\">RCU_NEXT_READY_TAIL</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#nxttail\">nxttail</a>[<a class=\"id\" href=\"#RCU_NEXT_READY_TAIL\">RCU_NEXT_READY_TAIL</a>] = <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#nxttail\">nxttail</a>[<a class=\"id\" href=\"#RCU_NEXT_TAIL\">RCU_NEXT_TAIL</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Remember that we saw this grace-period completion. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#completed\">completed</a> = <a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#completed\">completed</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Advance this CPU's callbacks, but only if the current grace period</span>", 
"<span class=\"comment\"> * has ended.  This may be called only from the CPU to whom the rdp</span>", 
"<span class=\"comment\"> * belongs.</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#rcu_process_gp_end\">rcu_process_gp_end</a>(struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>, struct <a class=\"id\" href=\"#rcu_data\">rcu_data</a> *<a class=\"id\" href=\"#rdp\">rdp</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp\">rnp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rnp\">rnp</a> = <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#mynode\">mynode</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#completed\">completed</a> == <a class=\"id\" href=\"#ACCESS_ONCE\">ACCESS_ONCE</a>(<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#completed\">completed</a>) || <span class=\"comment\">/* outside lock. */</span>", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#raw_spin_trylock\">raw_spin_trylock</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>)) { <span class=\"comment\">/* irqs already off, so later. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__rcu_process_gp_end\">__rcu_process_gp_end</a>(<a class=\"id\" href=\"#rsp\">rsp</a>, <a class=\"id\" href=\"#rnp\">rnp</a>, <a class=\"id\" href=\"#rdp\">rdp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Do per-CPU grace-period initialization for running CPU.  The caller</span>", 
"<span class=\"comment\"> * must hold the lock of the leaf rcu_node structure corresponding to</span>", 
"<span class=\"comment\"> * this CPU.</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#rcu_start_gp_per_cpu\">rcu_start_gp_per_cpu</a>(struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>, struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp\">rnp</a>, struct <a class=\"id\" href=\"#rcu_data\">rcu_data</a> *<a class=\"id\" href=\"#rdp\">rdp</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Prior grace period ended, so advance callbacks for current CPU. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__rcu_process_gp_end\">__rcu_process_gp_end</a>(<a class=\"id\" href=\"#rsp\">rsp</a>, <a class=\"id\" href=\"#rnp\">rnp</a>, <a class=\"id\" href=\"#rdp\">rdp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Because this CPU just now started the new grace period, we know</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that all of its callbacks will be covered by this upcoming grace</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * period, even the ones that were registered arbitrarily recently.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Therefore, advance all outstanding callbacks to RCU_WAIT_TAIL.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Other CPUs cannot be sure exactly when the grace period started.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Therefore, their recently registered callbacks must pass through</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * an additional RCU_NEXT_READY stage, so that they will be handled</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * by the next RCU grace period.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#nxttail\">nxttail</a>[<a class=\"id\" href=\"#RCU_NEXT_READY_TAIL\">RCU_NEXT_READY_TAIL</a>] = <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#nxttail\">nxttail</a>[<a class=\"id\" href=\"#RCU_NEXT_TAIL\">RCU_NEXT_TAIL</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#nxttail\">nxttail</a>[<a class=\"id\" href=\"#RCU_WAIT_TAIL\">RCU_WAIT_TAIL</a>] = <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#nxttail\">nxttail</a>[<a class=\"id\" href=\"#RCU_NEXT_TAIL\">RCU_NEXT_TAIL</a>];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set state so that this CPU will detect the next quiescent state. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__note_new_gpnum\">__note_new_gpnum</a>(<a class=\"id\" href=\"#rsp\">rsp</a>, <a class=\"id\" href=\"#rnp\">rnp</a>, <a class=\"id\" href=\"#rdp\">rdp</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Start a new RCU grace period if warranted, re-initializing the hierarchy</span>", 
"<span class=\"comment\"> * in preparation for detecting the next grace period.  The caller must hold</span>", 
"<span class=\"comment\"> * the root node's -&gt;lock, which is released before return.  Hard irqs must</span>", 
"<span class=\"comment\"> * be disabled.</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#rcu_start_gp\">rcu_start_gp</a>(struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__releases\">__releases</a>(<a class=\"id\" href=\"#rcu_get_root\">rcu_get_root</a>(<a class=\"id\" href=\"#rsp\">rsp</a>)-><a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_data\">rcu_data</a> *<a class=\"id\" href=\"#rdp\">rdp</a> = <a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#rda\">rda</a>[<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>()];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp\">rnp</a> = <a class=\"id\" href=\"#rcu_get_root\">rcu_get_root</a>(<a class=\"id\" href=\"#rsp\">rsp</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpu_needs_another_gp\">cpu_needs_another_gp</a>(<a class=\"id\" href=\"#rsp\">rsp</a>, <a class=\"id\" href=\"#rdp\">rdp</a>) || <a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#fqs_active\">fqs_active</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_needs_another_gp\">cpu_needs_another_gp</a>(<a class=\"id\" href=\"#rsp\">rsp</a>, <a class=\"id\" href=\"#rdp\">rdp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#fqs_need_gp\">fqs_need_gp</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#completed\">completed</a> == <a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#completed\">completed</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>);<span class=\"ts\"/> <span class=\"comment\">/* irqs remain disabled. */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Propagate new -&gt;completed value to rcu_node structures</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * so that other CPUs don't have to wait until the start</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * of the next grace period to process their callbacks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_for_each_node_breadth_first\">rcu_for_each_node_breadth_first</a>(<a class=\"id\" href=\"#rsp\">rsp</a>, <a class=\"id\" href=\"#rnp\">rnp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>); <span class=\"comment\">/* irqs already disabled. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#completed\">completed</a> = <a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#completed\">completed</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>); <span class=\"comment\">/* irqs remain disabled. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Advance to a new grace period and initialize state. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#gpnum\">gpnum</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#signaled\">signaled</a> == <a class=\"id\" href=\"#RCU_GP_INIT\">RCU_GP_INIT</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#signaled\">signaled</a> = <a class=\"id\" href=\"#RCU_GP_INIT\">RCU_GP_INIT</a>; <span class=\"comment\">/* Hold off force_quiescent_state. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#jiffies_force_qs\">jiffies_force_qs</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#RCU_JIFFIES_TILL_FORCE_QS\">RCU_JIFFIES_TILL_FORCE_QS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#record_gp_stall_check_time\">record_gp_stall_check_time</a>(<a class=\"id\" href=\"#rsp\">rsp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Special-case the common single-level case. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#NUM_RCU_NODES\">NUM_RCU_NODES</a> == 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_preempt_check_blocked_tasks\">rcu_preempt_check_blocked_tasks</a>(<a class=\"id\" href=\"#rnp\">rnp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#qsmask\">qsmask</a> = <a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#qsmaskinit\">qsmaskinit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#gpnum\">gpnum</a> = <a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#gpnum\">gpnum</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#completed\">completed</a> = <a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#completed\">completed</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#signaled\">signaled</a> = <a class=\"id\" href=\"#RCU_SIGNAL_INIT\">RCU_SIGNAL_INIT</a>; <span class=\"comment\">/* force_quiescent_state OK. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_start_gp_per_cpu\">rcu_start_gp_per_cpu</a>(<a class=\"id\" href=\"#rsp\">rsp</a>, <a class=\"id\" href=\"#rnp\">rnp</a>, <a class=\"id\" href=\"#rdp\">rdp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>);  <span class=\"comment\">/* leave irqs disabled. */</span>", 
"", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Exclude any concurrent CPU-hotplug operations. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#onofflock\">onofflock</a>);  <span class=\"comment\">/* irqs already disabled. */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Set the quiescent-state-needed bits in all the rcu_node</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * structures for all currently online CPUs in breadth-first</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * order, starting from the root rcu_node structure.  This</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * operation relies on the layout of the hierarchy within the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * rsp-&gt;node[] array.  Note that other CPUs will access only</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the leaves of the hierarchy, which still indicate that no</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * grace period is in progress, at least until the corresponding</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * leaf node has been initialized.  In addition, we have excluded</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * CPU-hotplug operations.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note that the grace period cannot complete until we finish</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the initialization process, as there will be at least one</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * qsmask bit set in the root node until that time, namely the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * one corresponding to this CPU, due to the fact that we have</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * irqs disabled.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_for_each_node_breadth_first\">rcu_for_each_node_breadth_first</a>(<a class=\"id\" href=\"#rsp\">rsp</a>, <a class=\"id\" href=\"#rnp\">rnp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>);<span class=\"ts\"/><span class=\"comment\">/* irqs already disabled. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_preempt_check_blocked_tasks\">rcu_preempt_check_blocked_tasks</a>(<a class=\"id\" href=\"#rnp\">rnp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#qsmask\">qsmask</a> = <a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#qsmaskinit\">qsmaskinit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#gpnum\">gpnum</a> = <a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#gpnum\">gpnum</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#completed\">completed</a> = <a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#completed\">completed</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rnp\">rnp</a> == <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#mynode\">mynode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_start_gp_per_cpu\">rcu_start_gp_per_cpu</a>(<a class=\"id\" href=\"#rsp\">rsp</a>, <a class=\"id\" href=\"#rnp\">rnp</a>, <a class=\"id\" href=\"#rdp\">rdp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>);<span class=\"ts\"/><span class=\"comment\">/* irqs remain disabled. */</span>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rnp\">rnp</a> = <a class=\"id\" href=\"#rcu_get_root\">rcu_get_root</a>(<a class=\"id\" href=\"#rsp\">rsp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* irqs already disabled. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#signaled\">signaled</a> = <a class=\"id\" href=\"#RCU_SIGNAL_INIT\">RCU_SIGNAL_INIT</a>; <span class=\"comment\">/* force_quiescent_state now OK. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* irqs remain disabled. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#onofflock\">onofflock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Report a full set of quiescent states to the specified rcu_state</span>", 
"<span class=\"comment\"> * data structure.  This involves cleaning up after the prior grace</span>", 
"<span class=\"comment\"> * period and letting rcu_start_gp() start up the next grace period</span>", 
"<span class=\"comment\"> * if one is needed.  Note that the caller must hold rnp-&gt;lock, as</span>", 
"<span class=\"comment\"> * required by rcu_start_gp(), which will release it.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#rcu_report_qs_rsp\">rcu_report_qs_rsp</a>(struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__releases\">__releases</a>(<a class=\"id\" href=\"#rcu_get_root\">rcu_get_root</a>(<a class=\"id\" href=\"#rsp\">rsp</a>)-><a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(!<a class=\"id\" href=\"#rcu_gp_in_progress\">rcu_gp_in_progress</a>(<a class=\"id\" href=\"#rsp\">rsp</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#completed\">completed</a> = <a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#gpnum\">gpnum</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#signaled\">signaled</a> = <a class=\"id\" href=\"#RCU_GP_IDLE\">RCU_GP_IDLE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_start_gp\">rcu_start_gp</a>(<a class=\"id\" href=\"#rsp\">rsp</a>, <a class=\"id\" href=\"#flags\">flags</a>);  <span class=\"comment\">/* releases root node's rnp-&gt;lock. */</span>", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Similar to rcu_report_qs_rdp(), for which it is a helper function.</span>", 
"<span class=\"comment\"> * Allows quiescent states for a group of CPUs to be reported at one go</span>", 
"<span class=\"comment\"> * to the specified rcu_node structure, though all the CPUs in the group</span>", 
"<span class=\"comment\"> * must be represented by the same rcu_node structure (which need not be</span>", 
"<span class=\"comment\"> * a leaf rcu_node structure, though it often will be).  That structure's</span>", 
"<span class=\"comment\"> * lock must be held upon entry, and it is released before return.</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#rcu_report_qs_rnp\">rcu_report_qs_rnp</a>(unsigned long <a class=\"id\" href=\"#mask\">mask</a>, struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp\">rnp</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__releases\">__releases</a>(<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp_c\">rnp_c</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Walk up the rcu_node hierarchy. */</span>", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#qsmask\">qsmask</a> &amp; <a class=\"id\" href=\"#mask\">mask</a>)) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Our bit has already been cleared, so done. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#qsmask\">qsmask</a> &= ~<a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#qsmask\">qsmask</a> != 0 || <a class=\"id\" href=\"#rcu_preempted_readers\">rcu_preempted_readers</a>(<a class=\"id\" href=\"#rnp\">rnp</a>)) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Other bits still set at this level, so done. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#grpmask\">grpmask</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#parent\">parent</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* No more levels.  Exit loop holding root lock. */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rnp_c\">rnp_c</a> = <a class=\"id\" href=\"#rnp\">rnp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rnp\">rnp</a> = <a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#rnp_c\">rnp_c</a>-><a class=\"id\" href=\"#qsmask\">qsmask</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Get here if we are the last CPU to pass through a quiescent</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * state for this grace period.  Invoke rcu_report_qs_rsp()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to clean up and start the next grace period if one is needed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_report_qs_rsp\">rcu_report_qs_rsp</a>(<a class=\"id\" href=\"#rsp\">rsp</a>, <a class=\"id\" href=\"#flags\">flags</a>); <span class=\"comment\">/* releases rnp-&gt;lock. */</span>", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Record a quiescent state for the specified CPU to that CPU's rcu_data</span>", 
"<span class=\"comment\"> * structure.  This must be either called from the specified CPU, or</span>", 
"<span class=\"comment\"> * called when the specified CPU is known to be offline (and when it is</span>", 
"<span class=\"comment\"> * also known that no other CPU is concurrently trying to help the offline</span>", 
"<span class=\"comment\"> * CPU).  The lastcomp argument is used to make sure we are still in the</span>", 
"<span class=\"comment\"> * grace period of interest.  We don't want to end the current grace period</span>", 
"<span class=\"comment\"> * based on quiescent states detected in an earlier grace period!</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#rcu_report_qs_rdp\">rcu_report_qs_rdp</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>, struct <a class=\"id\" href=\"#rcu_data\">rcu_data</a> *<a class=\"id\" href=\"#rdp\">rdp</a>, long <a class=\"id\" href=\"#lastcomp\">lastcomp</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp\">rnp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rnp\">rnp</a> = <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#mynode\">mynode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#lastcomp\">lastcomp</a> != <a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#completed\">completed</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Someone beat us to it for this grace period, so leave.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The race with GP start is resolved by the fact that we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * hold the leaf rcu_node lock, so that the per-CPU bits</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * cannot yet be initialized -- so we would simply find our</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * CPU's bit already cleared in rcu_report_qs_rnp() if this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * race occurred.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#passed_quiesc\">passed_quiesc</a> = 0;<span class=\"ts\"/><span class=\"comment\">/* try again later! */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#grpmask\">grpmask</a>;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#qsmask\">qsmask</a> &amp; <a class=\"id\" href=\"#mask\">mask</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#qs_pending\">qs_pending</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This GP can't end until cpu checks in, so all of our</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * callbacks can be processed during the next GP.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#nxttail\">nxttail</a>[<a class=\"id\" href=\"#RCU_NEXT_READY_TAIL\">RCU_NEXT_READY_TAIL</a>] = <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#nxttail\">nxttail</a>[<a class=\"id\" href=\"#RCU_NEXT_TAIL\">RCU_NEXT_TAIL</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_report_qs_rnp\">rcu_report_qs_rnp</a>(<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#rsp\">rsp</a>, <a class=\"id\" href=\"#rnp\">rnp</a>, <a class=\"id\" href=\"#flags\">flags</a>); <span class=\"comment\">/* rlses rnp-&gt;lock */</span>", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check to see if there is a new grace period of which this CPU</span>", 
"<span class=\"comment\"> * is not yet aware, and if so, set up local rcu_data state for it.</span>", 
"<span class=\"comment\"> * Otherwise, see if this CPU has just passed through its first</span>", 
"<span class=\"comment\"> * quiescent state for this grace period, and record that fact if so.</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#rcu_check_quiescent_state\">rcu_check_quiescent_state</a>(struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>, struct <a class=\"id\" href=\"#rcu_data\">rcu_data</a> *<a class=\"id\" href=\"#rdp\">rdp</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* If there is now a new grace period, record and return. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#check_for_new_grace_period\">check_for_new_grace_period</a>(<a class=\"id\" href=\"#rsp\">rsp</a>, <a class=\"id\" href=\"#rdp\">rdp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Does this CPU still need to do its part for current grace period?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If no, return and let the other CPUs do their part as well.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#qs_pending\">qs_pending</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Was there a quiescent state since the beginning of the grace</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * period? If no, then exit and wait for the next call.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#passed_quiesc\">passed_quiesc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Tell RCU we are done (but rcu_report_qs_rdp() will be the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * judge of that).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_report_qs_rdp\">rcu_report_qs_rdp</a>(<a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#rsp\">rsp</a>, <a class=\"id\" href=\"#rdp\">rdp</a>, <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#passed_quiesc_completed\">passed_quiesc_completed</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HOTPLUG_CPU\">CONFIG_HOTPLUG_CPU</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Move a dying CPU's RCU callbacks to the -&gt;orphan_cbs_list for the</span>", 
"<span class=\"comment\"> * specified flavor of RCU.  The callbacks will be adopted by the next</span>", 
"<span class=\"comment\"> * _rcu_barrier() invocation or by the CPU_DEAD notifier, whichever</span>", 
"<span class=\"comment\"> * comes first.  Because this is invoked from the CPU_DYING notifier,</span>", 
"<span class=\"comment\"> * irqs are already disabled.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#rcu_send_cbs_to_orphanage\">rcu_send_cbs_to_orphanage</a>(struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_data\">rcu_data</a> *<a class=\"id\" href=\"#rdp\">rdp</a> = <a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#rda\">rda</a>[<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>()];", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#nxtlist\">nxtlist</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;  <span class=\"comment\">/* irqs disabled, so comparison is stable. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#onofflock\">onofflock</a>);  <span class=\"comment\">/* irqs already disabled. */</span>", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#orphan_cbs_tail\">orphan_cbs_tail</a> = <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#nxtlist\">nxtlist</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#orphan_cbs_tail\">orphan_cbs_tail</a> = <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#nxttail\">nxttail</a>[<a class=\"id\" href=\"#RCU_NEXT_TAIL\">RCU_NEXT_TAIL</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#nxtlist\">nxtlist</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#RCU_NEXT_SIZE\">RCU_NEXT_SIZE</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#nxttail\">nxttail</a>[<a class=\"id\" href=\"#i\">i</a>] = &amp;<a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#nxtlist\">nxtlist</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#orphan_qlen\">orphan_qlen</a> += <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#qlen\">qlen</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#qlen\">qlen</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#onofflock\">onofflock</a>);  <span class=\"comment\">/* irqs remain disabled. */</span>", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Adopt previously orphaned RCU callbacks.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#rcu_adopt_orphan_cbs\">rcu_adopt_orphan_cbs</a>(struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_data\">rcu_data</a> *<a class=\"id\" href=\"#rdp\">rdp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#onofflock\">onofflock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a> = <a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#rda\">rda</a>[<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>()];", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#orphan_cbs_list\">orphan_cbs_list</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#onofflock\">onofflock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#nxttail\">nxttail</a>[<a class=\"id\" href=\"#RCU_NEXT_TAIL\">RCU_NEXT_TAIL</a>] = <a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#orphan_cbs_list\">orphan_cbs_list</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#nxttail\">nxttail</a>[<a class=\"id\" href=\"#RCU_NEXT_TAIL\">RCU_NEXT_TAIL</a>] = <a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#orphan_cbs_tail\">orphan_cbs_tail</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#qlen\">qlen</a> += <a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#orphan_qlen\">orphan_qlen</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#orphan_cbs_list\">orphan_cbs_list</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#orphan_cbs_tail\">orphan_cbs_tail</a> = &amp;<a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#orphan_cbs_list\">orphan_cbs_list</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#orphan_qlen\">orphan_qlen</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#onofflock\">onofflock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Remove the outgoing CPU from the bitmasks in the rcu_node hierarchy</span>", 
"<span class=\"comment\"> * and move all callbacks from the outgoing CPU to the current one.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__rcu_offline_cpu\">__rcu_offline_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#need_report\">need_report</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_data\">rcu_data</a> *<a class=\"id\" href=\"#rdp\">rdp</a> = <a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#rda\">rda</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp\">rnp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Exclude any attempts to start a new grace period. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#onofflock\">onofflock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Remove the outgoing CPU from the masks in the rcu_node hierarchy. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rnp\">rnp</a> = <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#mynode\">mynode</a>;<span class=\"ts\"/><span class=\"comment\">/* this is the outgoing CPU's rnp. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#grpmask\">grpmask</a>;<span class=\"ts\"/><span class=\"comment\">/* rnp-&gt;grplo is constant. */</span>", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>);<span class=\"ts\"/><span class=\"comment\">/* irqs already disabled. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#qsmaskinit\">qsmaskinit</a> &= ~<a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#qsmaskinit\">qsmaskinit</a> != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rnp\">rnp</a> != <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#mynode\">mynode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>); <span class=\"comment\">/* irqs remain disabled. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rnp\">rnp</a> == <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#mynode\">mynode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#need_report\">need_report</a> = <a class=\"id\" href=\"#rcu_preempt_offline_tasks\">rcu_preempt_offline_tasks</a>(<a class=\"id\" href=\"#rsp\">rsp</a>, <a class=\"id\" href=\"#rnp\">rnp</a>, <a class=\"id\" href=\"#rdp\">rdp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>); <span class=\"comment\">/* irqs remain disabled. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#grpmask\">grpmask</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rnp\">rnp</a> = <a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#rnp\">rnp</a> != <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We still hold the leaf rcu_node structure lock here, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * irqs are still disabled.  The reason for this subterfuge is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * because invoking rcu_report_unblock_qs_rnp() with -&gt;onofflock</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * held leads to deadlock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#onofflock\">onofflock</a>); <span class=\"comment\">/* irqs remain disabled. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rnp\">rnp</a> = <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#mynode\">mynode</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#need_report\">need_report</a> &amp; <a class=\"id\" href=\"#RCU_OFL_TASKS_NORM_GP\">RCU_OFL_TASKS_NORM_GP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_report_unblock_qs_rnp\">rcu_report_unblock_qs_rnp</a>(<a class=\"id\" href=\"#rnp\">rnp</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#need_report\">need_report</a> &amp; <a class=\"id\" href=\"#RCU_OFL_TASKS_EXP_GP\">RCU_OFL_TASKS_EXP_GP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_report_exp_rnp\">rcu_report_exp_rnp</a>(<a class=\"id\" href=\"#rsp\">rsp</a>, <a class=\"id\" href=\"#rnp\">rnp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_adopt_orphan_cbs\">rcu_adopt_orphan_cbs</a>(<a class=\"id\" href=\"#rsp\">rsp</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Remove the specified CPU from the RCU hierarchy and move any pending</span>", 
"<span class=\"comment\"> * callbacks that it might have to the current CPU.  This code assumes</span>", 
"<span class=\"comment\"> * that at least one CPU in the system will remain running at all times.</span>", 
"<span class=\"comment\"> * Any attempt to offline -all- CPUs is likely to strand RCU callbacks.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#rcu_offline_cpu\">rcu_offline_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__rcu_offline_cpu\">__rcu_offline_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, &amp;<a class=\"id\" href=\"#rcu_sched_state\">rcu_sched_state</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__rcu_offline_cpu\">__rcu_offline_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, &amp;<a class=\"id\" href=\"#rcu_bh_state\">rcu_bh_state</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_preempt_offline_cpu\">rcu_preempt_offline_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"}", 
"", 
"#else <span class=\"comment\">/* #ifdef CONFIG_HOTPLUG_CPU */</span>", 
"", 
"static void <a class=\"id\" href=\"#rcu_send_cbs_to_orphanage\">rcu_send_cbs_to_orphanage</a>(struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>)", 
"{", 
"}", 
"", 
"static void <a class=\"id\" href=\"#rcu_adopt_orphan_cbs\">rcu_adopt_orphan_cbs</a>(struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>)", 
"{", 
"}", 
"", 
"static void <a class=\"id\" href=\"#rcu_offline_cpu\">rcu_offline_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #else #ifdef CONFIG_HOTPLUG_CPU */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Invoke any RCU callbacks that have made it to the end of their grace</span>", 
"<span class=\"comment\"> * period.  Thottle as specified by rdp-&gt;blimit.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#rcu_do_batch\">rcu_do_batch</a>(struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>, struct <a class=\"id\" href=\"#rcu_data\">rcu_data</a> *<a class=\"id\" href=\"#rdp\">rdp</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#next\">next</a>, *<a class=\"id\" href=\"#list\">list</a>, **<a class=\"id\" href=\"#tail\">tail</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If no callbacks are ready, just return.*/</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpu_has_callbacks_ready_to_invoke\">cpu_has_callbacks_ready_to_invoke</a>(<a class=\"id\" href=\"#rdp\">rdp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Extract the list of ready callbacks, disabling to prevent</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * races with call_rcu() from interrupt handlers.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#nxtlist\">nxtlist</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#nxtlist\">nxtlist</a> = *<a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#nxttail\">nxttail</a>[<a class=\"id\" href=\"#RCU_DONE_TAIL\">RCU_DONE_TAIL</a>];", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#nxttail\">nxttail</a>[<a class=\"id\" href=\"#RCU_DONE_TAIL\">RCU_DONE_TAIL</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tail\">tail</a> = <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#nxttail\">nxttail</a>[<a class=\"id\" href=\"#RCU_DONE_TAIL\">RCU_DONE_TAIL</a>];", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#RCU_NEXT_SIZE\">RCU_NEXT_SIZE</a> - 1; <a class=\"id\" href=\"#count\">count</a> >= 0; <a class=\"id\" href=\"#count\">count</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#nxttail\">nxttail</a>[<a class=\"id\" href=\"#count\">count</a>] == <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#nxttail\">nxttail</a>[<a class=\"id\" href=\"#RCU_DONE_TAIL\">RCU_DONE_TAIL</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#nxttail\">nxttail</a>[<a class=\"id\" href=\"#count\">count</a>] = &amp;<a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#nxtlist\">nxtlist</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Invoke callbacks. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prefetch\">prefetch</a>(<a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debug_rcu_head_unqueue\">debug_rcu_head_unqueue</a>(<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#func\">func</a>(<a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (++<a class=\"id\" href=\"#count\">count</a> >= <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#blimit\">blimit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Update count, and requeue any remaining callbacks. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#qlen\">qlen</a> -= <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list\">list</a> != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#tail\">tail</a> = <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#nxtlist\">nxtlist</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#nxtlist\">nxtlist</a> = <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#count\">count</a> = 0; <a class=\"id\" href=\"#count\">count</a> &lt; <a class=\"id\" href=\"#RCU_NEXT_SIZE\">RCU_NEXT_SIZE</a>; <a class=\"id\" href=\"#count\">count</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (&amp;<a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#nxtlist\">nxtlist</a> == <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#nxttail\">nxttail</a>[<a class=\"id\" href=\"#count\">count</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#nxttail\">nxttail</a>[<a class=\"id\" href=\"#count\">count</a>] = <a class=\"id\" href=\"#tail\">tail</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Reinstate batch limit if we have worked down the excess. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#blimit\">blimit</a> == <a class=\"id\" href=\"#LONG_MAX\">LONG_MAX</a> && <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#qlen\">qlen</a> <= <a class=\"id\" href=\"#qlowmark\">qlowmark</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#blimit\">blimit</a> = <a class=\"id\" href=\"#blimit\">blimit</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Reset -&gt;qlen_last_fqs_check trigger if enough CBs have drained. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#qlen\">qlen</a> == 0 && <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#qlen_last_fqs_check\">qlen_last_fqs_check</a> != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#qlen_last_fqs_check\">qlen_last_fqs_check</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#n_force_qs_snap\">n_force_qs_snap</a> = <a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#n_force_qs\">n_force_qs</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#qlen\">qlen</a> &lt; <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#qlen_last_fqs_check\">qlen_last_fqs_check</a> - <a class=\"id\" href=\"#qhimark\">qhimark</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#qlen_last_fqs_check\">qlen_last_fqs_check</a> = <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#qlen\">qlen</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Re-raise the RCU softirq if there are callbacks remaining. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has_callbacks_ready_to_invoke\">cpu_has_callbacks_ready_to_invoke</a>(<a class=\"id\" href=\"#rdp\">rdp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raise_softirq\">raise_softirq</a>(<a class=\"id\" href=\"#RCU_SOFTIRQ\">RCU_SOFTIRQ</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check to see if this CPU is in a non-context-switch quiescent state</span>", 
"<span class=\"comment\"> * (user mode or idle loop for rcu, non-softirq execution for rcu_bh).</span>", 
"<span class=\"comment\"> * Also schedule the RCU softirq handler.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function must be called with hardirqs disabled.  It is normally</span>", 
"<span class=\"comment\"> * invoked from the scheduling-clock interrupt.  If rcu_pending returns</span>", 
"<span class=\"comment\"> * false, there is no point in invoking rcu_check_callbacks().</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#rcu_check_callbacks\">rcu_check_callbacks</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, int <a class=\"id\" href=\"#user\">user</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#user\">user</a> ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#idle_cpu\">idle_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) && <a class=\"id\" href=\"#rcu_scheduler_active\">rcu_scheduler_active</a> &&", 
"<span class=\"ts\"/>     !<a class=\"id\" href=\"#in_softirq\">in_softirq</a>() && <a class=\"id\" href=\"#hardirq_count\">hardirq_count</a>() <= (1 << <a class=\"id\" href=\"#HARDIRQ_SHIFT\">HARDIRQ_SHIFT</a>))) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Get here if this CPU took its interrupt from user</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * mode or from the idle loop, and if this is not a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * nested interrupt.  In this case, the CPU is in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * a quiescent state, so note it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * No memory barrier is required here because both</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * rcu_sched_qs() and rcu_bh_qs() reference only CPU-local</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * variables that other CPUs neither access nor modify,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * at least not while the corresponding CPU is online.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_sched_qs\">rcu_sched_qs</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_bh_qs\">rcu_bh_qs</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/>} else if (!<a class=\"id\" href=\"#in_softirq\">in_softirq</a>()) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Get here if this CPU did not take its interrupt from</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * softirq, in other words, if it is not interrupting</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * a rcu_bh read-side critical section.  This is an _bh</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * critical section, so note it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_bh_qs\">rcu_bh_qs</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_preempt_check_callbacks\">rcu_preempt_check_callbacks</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rcu_pending\">rcu_pending</a>(<a class=\"id\" href=\"#cpu\">cpu</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raise_softirq\">raise_softirq</a>(<a class=\"id\" href=\"#RCU_SOFTIRQ\">RCU_SOFTIRQ</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Scan the leaf rcu_node structures, processing dyntick state for any that</span>", 
"<span class=\"comment\"> * have not yet encountered a quiescent state, using the function specified.</span>", 
"<span class=\"comment\"> * The caller must have suppressed start of new grace periods.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#force_qs_rnp\">force_qs_rnp</a>(struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>, int (*<a class=\"id\" href=\"#f\">f</a>)(struct <a class=\"id\" href=\"#rcu_data\">rcu_data</a> *))", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#bit\">bit</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp\">rnp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_for_each_leaf_node\">rcu_for_each_leaf_node</a>(<a class=\"id\" href=\"#rsp\">rsp</a>, <a class=\"id\" href=\"#rnp\">rnp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#rcu_gp_in_progress\">rcu_gp_in_progress</a>(<a class=\"id\" href=\"#rsp\">rsp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#qsmask\">qsmask</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#grplo\">grplo</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bit\">bit</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (; <a class=\"id\" href=\"#cpu\">cpu</a> <= <a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#grphi\">grphi</a>; <a class=\"id\" href=\"#cpu\">cpu</a>++, <a class=\"id\" href=\"#bit\">bit</a> <<= 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#qsmask\">qsmask</a> &amp; <a class=\"id\" href=\"#bit\">bit</a>) != 0 && <a class=\"id\" href=\"#f\">f</a>(<a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#rda\">rda</a>[<a class=\"id\" href=\"#cpu\">cpu</a>]))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> |= <a class=\"id\" href=\"#bit\">bit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mask\">mask</a> != 0) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* rcu_report_qs_rnp() releases rnp-&gt;lock. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_report_qs_rnp\">rcu_report_qs_rnp</a>(<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#rsp\">rsp</a>, <a class=\"id\" href=\"#rnp\">rnp</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Force quiescent states on reluctant CPUs, and also detect which</span>", 
"<span class=\"comment\"> * CPUs are in dyntick-idle mode.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#force_quiescent_state\">force_quiescent_state</a>(struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>, int <a class=\"id\" href=\"#relaxed\">relaxed</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp\">rnp</a> = <a class=\"id\" href=\"#rcu_get_root\">rcu_get_root</a>(<a class=\"id\" href=\"#rsp\">rsp</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rcu_gp_in_progress\">rcu_gp_in_progress</a>(<a class=\"id\" href=\"#rsp\">rsp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;  <span class=\"comment\">/* No grace period in progress, nothing to force. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#raw_spin_trylock_irqsave\">raw_spin_trylock_irqsave</a>(&amp;<a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#fqslock\">fqslock</a>, <a class=\"id\" href=\"#flags\">flags</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#n_force_qs_lh\">n_force_qs_lh</a>++; <span class=\"comment\">/* Inexact, can lose counts.  Tough! */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return;<span class=\"ts\"/><span class=\"comment\">/* Someone else is already on the job. */</span>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#relaxed\">relaxed</a> && <a class=\"id\" href=\"#ULONG_CMP_GE\">ULONG_CMP_GE</a>(<a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#jiffies_force_qs\">jiffies_force_qs</a>, <a class=\"id\" href=\"#jiffies\">jiffies</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock_fqs_ret\">unlock_fqs_ret</a>; <span class=\"comment\">/* no emergency and done recently. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#n_force_qs\">n_force_qs</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>);  <span class=\"comment\">/* irqs already disabled */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#jiffies_force_qs\">jiffies_force_qs</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#RCU_JIFFIES_TILL_FORCE_QS\">RCU_JIFFIES_TILL_FORCE_QS</a>;", 
"<span class=\"ts\"/>if(!<a class=\"id\" href=\"#rcu_gp_in_progress\">rcu_gp_in_progress</a>(<a class=\"id\" href=\"#rsp\">rsp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#n_force_qs_ngp\">n_force_qs_ngp</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>);  <span class=\"comment\">/* irqs remain disabled */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock_fqs_ret\">unlock_fqs_ret</a>;  <span class=\"comment\">/* no GP in progress, time updated. */</span>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#fqs_active\">fqs_active</a> = 1;", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#signaled\">signaled</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RCU_GP_IDLE\">RCU_GP_IDLE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RCU_GP_INIT\">RCU_GP_INIT</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>break; <span class=\"comment\">/* grace period idle or initializing, ignore. */</span>", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RCU_SAVE_DYNTICK\">RCU_SAVE_DYNTICK</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#RCU_SIGNAL_INIT\">RCU_SIGNAL_INIT</a> != <a class=\"id\" href=\"#RCU_SAVE_DYNTICK\">RCU_SAVE_DYNTICK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break; <span class=\"comment\">/* So gcc recognizes the dead code. */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>);  <span class=\"comment\">/* irqs remain disabled */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Record dyntick-idle state. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#force_qs_rnp\">force_qs_rnp</a>(<a class=\"id\" href=\"#rsp\">rsp</a>, <a class=\"id\" href=\"#dyntick_save_progress_counter\">dyntick_save_progress_counter</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>);  <span class=\"comment\">/* irqs already disabled */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rcu_gp_in_progress\">rcu_gp_in_progress</a>(<a class=\"id\" href=\"#rsp\">rsp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#signaled\">signaled</a> = <a class=\"id\" href=\"#RCU_FORCE_QS\">RCU_FORCE_QS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RCU_FORCE_QS\">RCU_FORCE_QS</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Check dyntick-idle state, send IPI to laggarts. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>);  <span class=\"comment\">/* irqs remain disabled */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#force_qs_rnp\">force_qs_rnp</a>(<a class=\"id\" href=\"#rsp\">rsp</a>, <a class=\"id\" href=\"#rcu_implicit_dynticks_qs\">rcu_implicit_dynticks_qs</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Leave state in case more forcing is required. */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>);  <span class=\"comment\">/* irqs already disabled */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#fqs_active\">fqs_active</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#fqs_need_gp\">fqs_need_gp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#fqslock\">fqslock</a>); <span class=\"comment\">/* irqs remain disabled */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#fqs_need_gp\">fqs_need_gp</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_start_gp\">rcu_start_gp</a>(<a class=\"id\" href=\"#rsp\">rsp</a>, <a class=\"id\" href=\"#flags\">flags</a>); <span class=\"comment\">/* releases rnp-&gt;lock */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>);  <span class=\"comment\">/* irqs remain disabled */</span>", 
"<a class=\"id\" href=\"#unlock_fqs_ret\">unlock_fqs_ret</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#fqslock\">fqslock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"#else <span class=\"comment\">/* #ifdef CONFIG_SMP */</span>", 
"", 
"static void <a class=\"id\" href=\"#force_quiescent_state\">force_quiescent_state</a>(struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>, int <a class=\"id\" href=\"#relaxed\">relaxed</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_need_resched\">set_need_resched</a>();", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #else #ifdef CONFIG_SMP */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This does the RCU processing work from softirq context for the</span>", 
"<span class=\"comment\"> * specified rcu_state and rcu_data structures.  This may be called</span>", 
"<span class=\"comment\"> * only from the CPU to whom the rdp belongs.</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#__rcu_process_callbacks\">__rcu_process_callbacks</a>(struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>, struct <a class=\"id\" href=\"#rcu_data\">rcu_data</a> *<a class=\"id\" href=\"#rdp\">rdp</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#beenonline\">beenonline</a> == 0);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If an RCU GP has gone long enough, go check for dyntick</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * idle CPUs and, if needed, send resched IPIs.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ULONG_CMP_LT\">ULONG_CMP_LT</a>(<a class=\"id\" href=\"#ACCESS_ONCE\">ACCESS_ONCE</a>(<a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#jiffies_force_qs\">jiffies_force_qs</a>), <a class=\"id\" href=\"#jiffies\">jiffies</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#force_quiescent_state\">force_quiescent_state</a>(<a class=\"id\" href=\"#rsp\">rsp</a>, 1);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Advance callbacks in response to end of earlier grace</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * period that some other CPU ended.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_process_gp_end\">rcu_process_gp_end</a>(<a class=\"id\" href=\"#rsp\">rsp</a>, <a class=\"id\" href=\"#rdp\">rdp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Update RCU state based on any recent quiescent states. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_check_quiescent_state\">rcu_check_quiescent_state</a>(<a class=\"id\" href=\"#rsp\">rsp</a>, <a class=\"id\" href=\"#rdp\">rdp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Does this CPU require a not-yet-started grace period? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_needs_another_gp\">cpu_needs_another_gp</a>(<a class=\"id\" href=\"#rsp\">rsp</a>, <a class=\"id\" href=\"#rdp\">rdp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#rcu_get_root\">rcu_get_root</a>(<a class=\"id\" href=\"#rsp\">rsp</a>)-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_start_gp\">rcu_start_gp</a>(<a class=\"id\" href=\"#rsp\">rsp</a>, <a class=\"id\" href=\"#flags\">flags</a>);  <span class=\"comment\">/* releases above lock */</span>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If there are callbacks ready, invoke them. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_do_batch\">rcu_do_batch</a>(<a class=\"id\" href=\"#rsp\">rsp</a>, <a class=\"id\" href=\"#rdp\">rdp</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Do softirq processing for the current CPU.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#rcu_process_callbacks\">rcu_process_callbacks</a>(struct <a class=\"id\" href=\"#softirq_action\">softirq_action</a> *<a class=\"id\" href=\"#unused\">unused</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Memory references from any prior RCU read-side critical sections</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * executed by the interrupted code must be seen before any RCU</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * grace-period manipulations below.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>(); <span class=\"comment\">/* See above block comment. */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__rcu_process_callbacks\">__rcu_process_callbacks</a>(&amp;<a class=\"id\" href=\"#rcu_sched_state\">rcu_sched_state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#rcu_sched_data\">rcu_sched_data</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__rcu_process_callbacks\">__rcu_process_callbacks</a>(&amp;<a class=\"id\" href=\"#rcu_bh_state\">rcu_bh_state</a>, &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#rcu_bh_data\">rcu_bh_data</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_preempt_process_callbacks\">rcu_preempt_process_callbacks</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Memory references from any later RCU read-side critical sections</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * executed by the interrupted code must be seen after any RCU</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * grace-period manipulations above.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>(); <span class=\"comment\">/* See above block comment. */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If we are last CPU on way to dyntick-idle mode, accelerate it. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_needs_cpu_flush\">rcu_needs_cpu_flush</a>();", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#__call_rcu\">__call_rcu</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>, void (*<a class=\"id\" href=\"#func\">func</a>)(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#rcu\">rcu</a>),", 
"<span class=\"ts\"/>   struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_data\">rcu_data</a> *<a class=\"id\" href=\"#rdp\">rdp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_rcu_head_queue\">debug_rcu_head_queue</a>(<a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#func\">func</a> = <a class=\"id\" href=\"#func\">func</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>(); <span class=\"comment\">/* Ensure RCU update seen before callback registry. */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Opportunistically note grace-period endings and beginnings.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note that we might see a beginning right after we see an</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * end, but never vice versa, since this CPU has to pass through</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a quiescent state betweentimes.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a> = <a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#rda\">rda</a>[<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>()];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_process_gp_end\">rcu_process_gp_end</a>(<a class=\"id\" href=\"#rsp\">rsp</a>, <a class=\"id\" href=\"#rdp\">rdp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_for_new_grace_period\">check_for_new_grace_period</a>(<a class=\"id\" href=\"#rsp\">rsp</a>, <a class=\"id\" href=\"#rdp\">rdp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Add the callback to our list. */</span>", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#nxttail\">nxttail</a>[<a class=\"id\" href=\"#RCU_NEXT_TAIL\">RCU_NEXT_TAIL</a>] = <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#nxttail\">nxttail</a>[<a class=\"id\" href=\"#RCU_NEXT_TAIL\">RCU_NEXT_TAIL</a>] = &amp;<a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Start a new grace period if one not already started. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rcu_gp_in_progress\">rcu_gp_in_progress</a>(<a class=\"id\" href=\"#rsp\">rsp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nestflag\">nestflag</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp_root\">rnp_root</a> = <a class=\"id\" href=\"#rcu_get_root\">rcu_get_root</a>(<a class=\"id\" href=\"#rsp\">rsp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#rnp_root\">rnp_root</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#nestflag\">nestflag</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_start_gp\">rcu_start_gp</a>(<a class=\"id\" href=\"#rsp\">rsp</a>, <a class=\"id\" href=\"#nestflag\">nestflag</a>);  <span class=\"comment\">/* releases rnp_root-&gt;lock. */</span>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Force the grace period if too many callbacks or too long waiting.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Enforce hysteresis, and don't invoke force_quiescent_state()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if some other CPU has recently done so.  Also, don't bother</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * invoking force_quiescent_state() if the newly enqueued callback</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is the only one waiting for a grace period to complete.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(++<a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#qlen\">qlen</a> &gt; <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#qlen_last_fqs_check\">qlen_last_fqs_check</a> + <a class=\"id\" href=\"#qhimark\">qhimark</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#blimit\">blimit</a> = <a class=\"id\" href=\"#LONG_MAX\">LONG_MAX</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#n_force_qs\">n_force_qs</a> == <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#n_force_qs_snap\">n_force_qs_snap</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    *<a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#nxttail\">nxttail</a>[<a class=\"id\" href=\"#RCU_DONE_TAIL\">RCU_DONE_TAIL</a>] != <a class=\"id\" href=\"#head\">head</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#force_quiescent_state\">force_quiescent_state</a>(<a class=\"id\" href=\"#rsp\">rsp</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#n_force_qs_snap\">n_force_qs_snap</a> = <a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#n_force_qs\">n_force_qs</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#qlen_last_fqs_check\">qlen_last_fqs_check</a> = <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#qlen\">qlen</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#ULONG_CMP_LT\">ULONG_CMP_LT</a>(<a class=\"id\" href=\"#ACCESS_ONCE\">ACCESS_ONCE</a>(<a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#jiffies_force_qs\">jiffies_force_qs</a>), <a class=\"id\" href=\"#jiffies\">jiffies</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#force_quiescent_state\">force_quiescent_state</a>(<a class=\"id\" href=\"#rsp\">rsp</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Queue an RCU-sched callback for invocation after a grace period.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#call_rcu_sched\">call_rcu_sched</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>, void (*<a class=\"id\" href=\"#func\">func</a>)(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#rcu\">rcu</a>))", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__call_rcu\">__call_rcu</a>(<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#func\">func</a>, &amp;<a class=\"id\" href=\"#rcu_sched_state\">rcu_sched_state</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#call_rcu_sched\">call_rcu_sched</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Queue an RCU for invocation after a quicker grace period.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#call_rcu_bh\">call_rcu_bh</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>, void (*<a class=\"id\" href=\"#func\">func</a>)(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#rcu\">rcu</a>))", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__call_rcu\">__call_rcu</a>(<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#func\">func</a>, &amp;<a class=\"id\" href=\"#rcu_bh_state\">rcu_bh_state</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#call_rcu_bh\">call_rcu_bh</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * synchronize_sched - wait until an rcu-sched grace period has elapsed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Control will return to the caller some time after a full rcu-sched</span>", 
"<span class=\"comment\"> * grace period has elapsed, in other words after all currently executing</span>", 
"<span class=\"comment\"> * rcu-sched read-side critical sections have completed.   These read-side</span>", 
"<span class=\"comment\"> * critical sections are delimited by rcu_read_lock_sched() and</span>", 
"<span class=\"comment\"> * rcu_read_unlock_sched(), and may be nested.  Note that preempt_disable(),</span>", 
"<span class=\"comment\"> * local_irq_disable(), and so on may be used in place of</span>", 
"<span class=\"comment\"> * rcu_read_lock_sched().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This means that all preempt_disable code sequences, including NMI and</span>", 
"<span class=\"comment\"> * hardware-interrupt handlers, in progress on entry will have completed</span>", 
"<span class=\"comment\"> * before this primitive returns.  However, this does not guarantee that</span>", 
"<span class=\"comment\"> * softirq handlers will have completed, since in some kernels, these</span>", 
"<span class=\"comment\"> * handlers can run in process context, and can block.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This primitive provides the guarantees made by the (now removed)</span>", 
"<span class=\"comment\"> * synchronize_kernel() API.  In contrast, synchronize_rcu() only</span>", 
"<span class=\"comment\"> * guarantees that rcu_read_lock() sections will have completed.</span>", 
"<span class=\"comment\"> * In \"classic RCU\", these two guarantees happen to be one and</span>", 
"<span class=\"comment\"> * the same, but can differ in realtime RCU implementations.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#synchronize_sched\">synchronize_sched</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_synchronize\">rcu_synchronize</a> <a class=\"id\" href=\"#rcu\">rcu</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rcu_blocking_is_gp\">rcu_blocking_is_gp</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_rcu_head_on_stack\">init_rcu_head_on_stack</a>(&amp;<a class=\"id\" href=\"#rcu\">rcu</a>.<a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_completion\">init_completion</a>(&amp;<a class=\"id\" href=\"#rcu\">rcu</a>.<a class=\"id\" href=\"#completion\">completion</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Will wake me after RCU finished. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_rcu_sched\">call_rcu_sched</a>(&amp;<a class=\"id\" href=\"#rcu\">rcu</a>.<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#wakeme_after_rcu\">wakeme_after_rcu</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Wait for it. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_for_completion\">wait_for_completion</a>(&amp;<a class=\"id\" href=\"#rcu\">rcu</a>.<a class=\"id\" href=\"#completion\">completion</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#destroy_rcu_head_on_stack\">destroy_rcu_head_on_stack</a>(&amp;<a class=\"id\" href=\"#rcu\">rcu</a>.<a class=\"id\" href=\"#head\">head</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#synchronize_sched\">synchronize_sched</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * synchronize_rcu_bh - wait until an rcu_bh grace period has elapsed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Control will return to the caller some time after a full rcu_bh grace</span>", 
"<span class=\"comment\"> * period has elapsed, in other words after all currently executing rcu_bh</span>", 
"<span class=\"comment\"> * read-side critical sections have completed.  RCU read-side critical</span>", 
"<span class=\"comment\"> * sections are delimited by rcu_read_lock_bh() and rcu_read_unlock_bh(),</span>", 
"<span class=\"comment\"> * and may be nested.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#synchronize_rcu_bh\">synchronize_rcu_bh</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_synchronize\">rcu_synchronize</a> <a class=\"id\" href=\"#rcu\">rcu</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rcu_blocking_is_gp\">rcu_blocking_is_gp</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_rcu_head_on_stack\">init_rcu_head_on_stack</a>(&amp;<a class=\"id\" href=\"#rcu\">rcu</a>.<a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_completion\">init_completion</a>(&amp;<a class=\"id\" href=\"#rcu\">rcu</a>.<a class=\"id\" href=\"#completion\">completion</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Will wake me after RCU finished. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_rcu_bh\">call_rcu_bh</a>(&amp;<a class=\"id\" href=\"#rcu\">rcu</a>.<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#wakeme_after_rcu\">wakeme_after_rcu</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Wait for it. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_for_completion\">wait_for_completion</a>(&amp;<a class=\"id\" href=\"#rcu\">rcu</a>.<a class=\"id\" href=\"#completion\">completion</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#destroy_rcu_head_on_stack\">destroy_rcu_head_on_stack</a>(&amp;<a class=\"id\" href=\"#rcu\">rcu</a>.<a class=\"id\" href=\"#head\">head</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#synchronize_rcu_bh\">synchronize_rcu_bh</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check to see if there is any immediate RCU-related work to be done</span>", 
"<span class=\"comment\"> * by the current CPU, for the specified type of RCU, returning 1 if so.</span>", 
"<span class=\"comment\"> * The checks are in order of increasing expense: checks that can be</span>", 
"<span class=\"comment\"> * carried out against CPU-local state are performed first.  However,</span>", 
"<span class=\"comment\"> * we must check for CPU stalls first, else we might not get a chance.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__rcu_pending\">__rcu_pending</a>(struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>, struct <a class=\"id\" href=\"#rcu_data\">rcu_data</a> *<a class=\"id\" href=\"#rdp\">rdp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp\">rnp</a> = <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#mynode\">mynode</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#n_rcu_pending\">n_rcu_pending</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check for CPU stalls, if enabled. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_cpu_stall\">check_cpu_stall</a>(<a class=\"id\" href=\"#rsp\">rsp</a>, <a class=\"id\" href=\"#rdp\">rdp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Is the RCU core waiting for a quiescent state from this CPU? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#qs_pending\">qs_pending</a> && !<a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#passed_quiesc\">passed_quiesc</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If force_quiescent_state() coming soon and this CPU</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * needs a quiescent state, and this is either RCU-sched</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * or RCU-bh, force a local reschedule.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#n_rp_qs_pending\">n_rp_qs_pending</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#preemptable\">preemptable</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ULONG_CMP_LT\">ULONG_CMP_LT</a>(<a class=\"id\" href=\"#ACCESS_ONCE\">ACCESS_ONCE</a>(<a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#jiffies_force_qs\">jiffies_force_qs</a>) - 1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#jiffies\">jiffies</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_need_resched\">set_need_resched</a>();", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#qs_pending\">qs_pending</a> && <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#passed_quiesc\">passed_quiesc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#n_rp_report_qs\">n_rp_report_qs</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Does this CPU have callbacks ready to invoke? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has_callbacks_ready_to_invoke\">cpu_has_callbacks_ready_to_invoke</a>(<a class=\"id\" href=\"#rdp\">rdp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#n_rp_cb_ready\">n_rp_cb_ready</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Has RCU gone idle with this CPU needing another grace period? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_needs_another_gp\">cpu_needs_another_gp</a>(<a class=\"id\" href=\"#rsp\">rsp</a>, <a class=\"id\" href=\"#rdp\">rdp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#n_rp_cpu_needs_gp\">n_rp_cpu_needs_gp</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Has another RCU grace period completed?  */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACCESS_ONCE\">ACCESS_ONCE</a>(<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#completed\">completed</a>) != <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#completed\">completed</a>) { <span class=\"comment\">/* outside lock */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#n_rp_gp_completed\">n_rp_gp_completed</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Has a new RCU grace period started? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACCESS_ONCE\">ACCESS_ONCE</a>(<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#gpnum\">gpnum</a>) != <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#gpnum\">gpnum</a>) { <span class=\"comment\">/* outside lock */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#n_rp_gp_started\">n_rp_gp_started</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Has an RCU GP gone long enough to send resched IPIs &amp;c? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rcu_gp_in_progress\">rcu_gp_in_progress</a>(<a class=\"id\" href=\"#rsp\">rsp</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#ULONG_CMP_LT\">ULONG_CMP_LT</a>(<a class=\"id\" href=\"#ACCESS_ONCE\">ACCESS_ONCE</a>(<a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#jiffies_force_qs\">jiffies_force_qs</a>), <a class=\"id\" href=\"#jiffies\">jiffies</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#n_rp_need_fqs\">n_rp_need_fqs</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* nothing to do */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#n_rp_need_nothing\">n_rp_need_nothing</a>++;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check to see if there is any immediate RCU-related work to be done</span>", 
"<span class=\"comment\"> * by the current CPU, returning 1 if so.  This function is part of the</span>", 
"<span class=\"comment\"> * RCU implementation; it is -not- an exported member of the RCU API.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#rcu_pending\">rcu_pending</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__rcu_pending\">__rcu_pending</a>(&amp;<a class=\"id\" href=\"#rcu_sched_state\">rcu_sched_state</a>, &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#rcu_sched_data\">rcu_sched_data</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)) ||", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#__rcu_pending\">__rcu_pending</a>(&amp;<a class=\"id\" href=\"#rcu_bh_state\">rcu_bh_state</a>, &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#rcu_bh_data\">rcu_bh_data</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)) ||", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#rcu_preempt_pending\">rcu_preempt_pending</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Check to see if any future RCU-related work will need to be done</span>", 
"<span class=\"comment\"> * by the current CPU, even if none need be done immediately, returning</span>", 
"<span class=\"comment\"> * 1 if so.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#rcu_needs_cpu_quick_check\">rcu_needs_cpu_quick_check</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* RCU callbacks either ready or pending? */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#rcu_sched_data\">rcu_sched_data</a>, <a class=\"id\" href=\"#cpu\">cpu</a>).<a class=\"id\" href=\"#nxtlist\">nxtlist</a> ||", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#rcu_bh_data\">rcu_bh_data</a>, <a class=\"id\" href=\"#cpu\">cpu</a>).<a class=\"id\" href=\"#nxtlist\">nxtlist</a> ||", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#rcu_preempt_needs_cpu\">rcu_preempt_needs_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a>, <a class=\"id\" href=\"#rcu_barrier_head\">rcu_barrier_head</a>) = {<a class=\"id\" href=\"#NULL\">NULL</a>};", 
"static <a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#rcu_barrier_cpu_count\">rcu_barrier_cpu_count</a>;", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#rcu_barrier_mutex\">rcu_barrier_mutex</a>);", 
"static struct <a class=\"id\" href=\"#completion\">completion</a> <a class=\"id\" href=\"#rcu_barrier_completion\">rcu_barrier_completion</a>;", 
"", 
"static void <a class=\"id\" href=\"#rcu_barrier_callback\">rcu_barrier_callback</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#notused\">notused</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#rcu_barrier_cpu_count\">rcu_barrier_cpu_count</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#complete\">complete</a>(&amp;<a class=\"id\" href=\"#rcu_barrier_completion\">rcu_barrier_completion</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called with preemption disabled, and from cross-cpu IRQ context.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#rcu_barrier_func\">rcu_barrier_func</a>(void *<a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#rcu_barrier_head\">rcu_barrier_head</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#call_rcu_func\">call_rcu_func</a>)(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      void (*<a class=\"id\" href=\"#func\">func</a>)(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#rcu_barrier_cpu_count\">rcu_barrier_cpu_count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_rcu_func\">call_rcu_func</a> = <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_rcu_func\">call_rcu_func</a>(<a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#rcu_barrier_callback\">rcu_barrier_callback</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Orchestrate the specified type of RCU barrier, waiting for all</span>", 
"<span class=\"comment\"> * RCU callbacks of the specified type to complete.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#_rcu_barrier\">_rcu_barrier</a>(struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> void (*<a class=\"id\" href=\"#call_rcu_func\">call_rcu_func</a>)(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       void (*<a class=\"id\" href=\"#func\">func</a>)(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>)))", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#in_interrupt\">in_interrupt</a>());", 
"<span class=\"ts\"/><span class=\"comment\">/* Take mutex to serialize concurrent rcu_barrier() requests. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#rcu_barrier_mutex\">rcu_barrier_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_completion\">init_completion</a>(&amp;<a class=\"id\" href=\"#rcu_barrier_completion\">rcu_barrier_completion</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Initialize rcu_barrier_cpu_count to 1, then invoke</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * rcu_barrier_func() on each CPU, so that each CPU also has</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * incremented rcu_barrier_cpu_count.  Only then is it safe to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * decrement rcu_barrier_cpu_count -- otherwise the first CPU</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * might complete its grace period before all of the other CPUs</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * did their increment, causing this function to return too</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * early.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#rcu_barrier_cpu_count\">rcu_barrier_cpu_count</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>(); <span class=\"comment\">/* stop CPU_DYING from filling orphan_cbs_list */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_adopt_orphan_cbs\">rcu_adopt_orphan_cbs</a>(<a class=\"id\" href=\"#rsp\">rsp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#on_each_cpu\">on_each_cpu</a>(<a class=\"id\" href=\"#rcu_barrier_func\">rcu_barrier_func</a>, (void *)<a class=\"id\" href=\"#call_rcu_func\">call_rcu_func</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>(); <span class=\"comment\">/* CPU_DYING can again fill orphan_cbs_list */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#rcu_barrier_cpu_count\">rcu_barrier_cpu_count</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#complete\">complete</a>(&amp;<a class=\"id\" href=\"#rcu_barrier_completion\">rcu_barrier_completion</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_for_completion\">wait_for_completion</a>(&amp;<a class=\"id\" href=\"#rcu_barrier_completion\">rcu_barrier_completion</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#rcu_barrier_mutex\">rcu_barrier_mutex</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * rcu_barrier_bh - Wait until all in-flight call_rcu_bh() callbacks complete.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#rcu_barrier_bh\">rcu_barrier_bh</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#_rcu_barrier\">_rcu_barrier</a>(&amp;<a class=\"id\" href=\"#rcu_bh_state\">rcu_bh_state</a>, <a class=\"id\" href=\"#call_rcu_bh\">call_rcu_bh</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#rcu_barrier_bh\">rcu_barrier_bh</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * rcu_barrier_sched - Wait for in-flight call_rcu_sched() callbacks.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#rcu_barrier_sched\">rcu_barrier_sched</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#_rcu_barrier\">_rcu_barrier</a>(&amp;<a class=\"id\" href=\"#rcu_sched_state\">rcu_sched_state</a>, <a class=\"id\" href=\"#call_rcu_sched\">call_rcu_sched</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#rcu_barrier_sched\">rcu_barrier_sched</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Do boot-time initialization of a CPU's per-CPU RCU data.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__init\">__init</a>", 
"<a class=\"id\" href=\"#rcu_boot_init_percpu_data\">rcu_boot_init_percpu_data</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_data\">rcu_data</a> *<a class=\"id\" href=\"#rdp\">rdp</a> = <a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#rda\">rda</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp\">rnp</a> = <a class=\"id\" href=\"#rcu_get_root\">rcu_get_root</a>(<a class=\"id\" href=\"#rsp\">rsp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set up local state, ensuring consistent view of global state. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#grpmask\">grpmask</a> = 1UL << (<a class=\"id\" href=\"#cpu\">cpu</a> - <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#mynode\">mynode</a>-><a class=\"id\" href=\"#grplo\">grplo</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#nxtlist\">nxtlist</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#RCU_NEXT_SIZE\">RCU_NEXT_SIZE</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#nxttail\">nxttail</a>[<a class=\"id\" href=\"#i\">i</a>] = &amp;<a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#nxtlist\">nxtlist</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#qlen\">qlen</a> = 0;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NO_HZ\">CONFIG_NO_HZ</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#dynticks\">dynticks</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#rcu_dynticks\">rcu_dynticks</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #ifdef CONFIG_NO_HZ */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Initialize a CPU's per-CPU RCU data.  Note that only one online or</span>", 
"<span class=\"comment\"> * offline event can be happening at a given time.  Note also that we</span>", 
"<span class=\"comment\"> * can accept some slop in the rsp-&gt;completed access due to the fact</span>", 
"<span class=\"comment\"> * that this CPU cannot possibly have any RCU callbacks in flight yet.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a>", 
"<a class=\"id\" href=\"#rcu_init_percpu_data\">rcu_init_percpu_data</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, struct <a class=\"id\" href=\"#rcu_state\">rcu_state</a> *<a class=\"id\" href=\"#rsp\">rsp</a>, int <a class=\"id\" href=\"#preemptable\">preemptable</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_data\">rcu_data</a> *<a class=\"id\" href=\"#rdp\">rdp</a> = <a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#rda\">rda</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rcu_node\">rcu_node</a> *<a class=\"id\" href=\"#rnp\">rnp</a> = <a class=\"id\" href=\"#rcu_get_root\">rcu_get_root</a>(<a class=\"id\" href=\"#rsp\">rsp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set up local state, ensuring consistent view of global state. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#passed_quiesc\">passed_quiesc</a> = 0;  <span class=\"comment\">/* We could be racing with new GP, */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#qs_pending\">qs_pending</a> = 1;<span class=\"ts\"/> <span class=\"comment\">/*  so set up to respond to current GP. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#beenonline\">beenonline</a> = 1;<span class=\"ts\"/> <span class=\"comment\">/* We have now been online. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#preemptable\">preemptable</a> = <a class=\"id\" href=\"#preemptable\">preemptable</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#qlen_last_fqs_check\">qlen_last_fqs_check</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#n_force_qs_snap\">n_force_qs_snap</a> = <a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#n_force_qs\">n_force_qs</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#blimit\">blimit</a> = <a class=\"id\" href=\"#blimit\">blimit</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* irqs remain disabled. */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A new grace period might start here.  If so, we won't be part</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of it, but that is OK, as we are currently in a quiescent state.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Exclude any attempts to start a new GP on large systems. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#onofflock\">onofflock</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* irqs already disabled. */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Add CPU to rcu_node bitmasks. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rnp\">rnp</a> = <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#mynode\">mynode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#grpmask\">grpmask</a>;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Exclude any attempts to start a new GP on small systems. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>);<span class=\"ts\"/><span class=\"comment\">/* irqs already disabled. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#qsmaskinit\">qsmaskinit</a> |= <a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#grpmask\">grpmask</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rnp\">rnp</a> == <a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#mynode\">mynode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#gpnum\">gpnum</a> = <a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#completed\">completed</a>; <span class=\"comment\">/* if GP in progress... */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#completed\">completed</a> = <a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#completed\">completed</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdp\">rdp</a>-><a class=\"id\" href=\"#passed_quiesc_completed\">passed_quiesc_completed</a> = <a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#completed\">completed</a> - 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#lock\">lock</a>); <span class=\"comment\">/* irqs already disabled. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rnp\">rnp</a> = <a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#rnp\">rnp</a> != <a class=\"id\" href=\"#NULL\">NULL</a> && !(<a class=\"id\" href=\"#rnp\">rnp</a>-><a class=\"id\" href=\"#qsmaskinit\">qsmaskinit</a> &amp; <a class=\"id\" href=\"#mask\">mask</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#rsp\">rsp</a>-><a class=\"id\" href=\"#onofflock\">onofflock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#rcu_online_cpu\">rcu_online_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_init_percpu_data\">rcu_init_percpu_data</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, &amp;<a class=\"id\" href=\"#rcu_sched_state\">rcu_sched_state</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_init_percpu_data\">rcu_init_percpu_data</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, &amp;<a class=\"id\" href=\"#rcu_bh_state\">rcu_bh_state</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_preempt_init_percpu_data\">rcu_preempt_init_percpu_data</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Handle CPU online/offline notification events.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#rcu_cpu_notify\">rcu_cpu_notify</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#self\">self</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long <a class=\"id\" href=\"#action\">action</a>, void *<a class=\"id\" href=\"#hcpu\">hcpu</a>)", 
"{", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#cpu\">cpu</a> = (long)<a class=\"id\" href=\"#hcpu\">hcpu</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#action\">action</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_UP_PREPARE\">CPU_UP_PREPARE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_UP_PREPARE_FROZEN\">CPU_UP_PREPARE_FROZEN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_online_cpu\">rcu_online_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_DYING\">CPU_DYING</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_DYING_FROZEN\">CPU_DYING_FROZEN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * preempt_disable() in _rcu_barrier() prevents stop_machine(),</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * so when \"on_each_cpu(rcu_barrier_func, (void *)type, 1);\"</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * returns, all online cpus have queued rcu_barrier_func().</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The dying CPU clears its cpu_online_mask bit and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * moves all of its RCU callbacks to -&gt;orphan_cbs_list</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * in the context of stop_machine(), so subsequent calls</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to _rcu_barrier() will adopt these callbacks and only</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * then queue rcu_barrier_func() on all remaining CPUs.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_send_cbs_to_orphanage\">rcu_send_cbs_to_orphanage</a>(&amp;<a class=\"id\" href=\"#rcu_bh_state\">rcu_bh_state</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_send_cbs_to_orphanage\">rcu_send_cbs_to_orphanage</a>(&amp;<a class=\"id\" href=\"#rcu_sched_state\">rcu_sched_state</a>);", 
];
xr_frag_insert('l/12/70af80d7a3ec9e0c27b719f28571d9d5075087.xr', __xr_tmp);
