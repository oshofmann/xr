var __xr_tmp = [
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MIGRATION\">CONFIG_MIGRATION</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * page migration</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#migrate_page_add\">migrate_page_add</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#pagelist\">pagelist</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Avoid migrating a page that is shared with others.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MPOL_MF_MOVE_ALL\">MPOL_MF_MOVE_ALL</a>) || <a class=\"id\" href=\"#page_mapcount\">page_mapcount</a>(<a class=\"id\" href=\"#page\">page</a>) == 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#isolate_lru_page\">isolate_lru_page</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>, <a class=\"id\" href=\"#pagelist\">pagelist</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inc_zone_page_state\">inc_zone_page_state</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NR_ISOLATED_ANON\">NR_ISOLATED_ANON</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#page_is_file_cache\">page_is_file_cache</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#new_node_page\">new_node_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, unsigned long <a class=\"id\" href=\"#node\">node</a>, int **<a class=\"id\" href=\"#x\">x</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#alloc_pages_exact_node\">alloc_pages_exact_node</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#GFP_HIGHUSER_MOVABLE\">GFP_HIGHUSER_MOVABLE</a>, 0);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Migrate pages from one node to a target node.</span>", 
"<span class=\"comment\"> * Returns error or the number of pages not migrated.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#migrate_to_node\">migrate_to_node</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, int <a class=\"id\" href=\"#source\">source</a>, int <a class=\"id\" href=\"#dest\">dest</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> <a class=\"id\" href=\"#nmask\">nmask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#pagelist\">pagelist</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodes_clear\">nodes_clear</a>(<a class=\"id\" href=\"#nmask\">nmask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node_set\">node_set</a>(<a class=\"id\" href=\"#source\">source</a>, <a class=\"id\" href=\"#nmask\">nmask</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_range\">check_range</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap\">mmap</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>, <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#task_size\">task_size</a>, &amp;<a class=\"id\" href=\"#nmask\">nmask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> | <a class=\"id\" href=\"#MPOL_MF_DISCONTIG_OK\">MPOL_MF_DISCONTIG_OK</a>, &amp;<a class=\"id\" href=\"#pagelist\">pagelist</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#pagelist\">pagelist</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#migrate_pages\">migrate_pages</a>(&amp;<a class=\"id\" href=\"#pagelist\">pagelist</a>, <a class=\"id\" href=\"#new_node_page\">new_node_page</a>, <a class=\"id\" href=\"#dest\">dest</a>, 0);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Move pages between the two nodesets so as to preserve the physical</span>", 
"<span class=\"comment\"> * layout as much as possible.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the number of page that could not be moved.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#do_migrate_pages\">do_migrate_pages</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#from_nodes\">from_nodes</a>, const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#to_nodes\">to_nodes</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#busy\">busy</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#migrate_prep\">migrate_prep</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#migrate_vmas\">migrate_vmas</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#from_nodes\">from_nodes</a>, <a class=\"id\" href=\"#to_nodes\">to_nodes</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Find a 'source' bit set in 'tmp' whose corresponding 'dest'</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * bit in 'to' is not also set in 'tmp'.  Clear the found 'source'</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * bit in 'tmp', and return that &lt;source, dest&gt; pair for migration.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The pair of nodemasks 'to' and 'from' define the map.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If no pair of bits is found that way, fallback to picking some</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pair of 'source' and 'dest' bits that are not the same.  If the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 'source' and 'dest' bits are the same, this represents a node</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that will be migrating to itself, so no pages need move.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If no bits are left in 'tmp', or if all remaining bits left</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in 'tmp' correspond to the same bit in 'to', return false</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (nothing left to migrate).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This lets us pick a pair of nodes to migrate between, such that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if possible the dest node is not already occupied by some other</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * source node, minimizing the risk of overloading the memory on a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * node that would happen if we migrated incoming memory to a node</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * before migrating outgoing memory source that same node.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A single scan of tmp is sufficient.  As we go, we remember the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * most recent &lt;s, d&gt; pair that moved (s != d).  If we find a pair</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that not only moved, but what's better, moved to an empty slot</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (d is not set in tmp), then we break out then, with that pair.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Otherwise when we finish scannng from_tmp, we at least have the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * most recent &lt;s, d&gt; pair that moved.  If we get all the way through</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the scan of tmp without finding any node that moved, much less</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * moved to an empty node, then there is nothing left worth migrating.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = *<a class=\"id\" href=\"#from_nodes\">from_nodes</a>;", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#nodes_empty\">nodes_empty</a>(<a class=\"id\" href=\"#tmp\">tmp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#s\">s</a>,<a class=\"id\" href=\"#d\">d</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#source\">source</a> = -1;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#dest\">dest</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_node_mask\">for_each_node_mask</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#tmp\">tmp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#d\">d</a> = <a class=\"id\" href=\"#node_remap\">node_remap</a>(<a class=\"id\" href=\"#s\">s</a>, *<a class=\"id\" href=\"#from_nodes\">from_nodes</a>, *<a class=\"id\" href=\"#to_nodes\">to_nodes</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#s\">s</a> == <a class=\"id\" href=\"#d\">d</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#source\">source</a> = <a class=\"id\" href=\"#s\">s</a>;<span class=\"ts\"/><span class=\"comment\">/* Node moved. Memorize */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dest\">dest</a> = <a class=\"id\" href=\"#d\">d</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* dest not in remaining from nodes? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#node_isset\">node_isset</a>(<a class=\"id\" href=\"#dest\">dest</a>, <a class=\"id\" href=\"#tmp\">tmp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#source\">source</a> == -1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node_clear\">node_clear</a>(<a class=\"id\" href=\"#source\">source</a>, <a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#migrate_to_node\">migrate_to_node</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#source\">source</a>, <a class=\"id\" href=\"#dest\">dest</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#busy\">busy</a> += <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#busy\">busy</a>;", 
"", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Allocate a new page for page migration based on vma policy.</span>", 
"<span class=\"comment\"> * Start assuming that page is mapped by vma pointed to by @private.</span>", 
"<span class=\"comment\"> * Search forward from there, if not.  N.B., this assumes that the</span>", 
"<span class=\"comment\"> * list of pages handed to migrate_pages()--which is how we get here--</span>", 
"<span class=\"comment\"> * is in virtual address order.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#new_vma_page\">new_vma_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, unsigned long <a class=\"id\" href=\"#private\">private</a>, int **<a class=\"id\" href=\"#x\">x</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a> = (struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *)<a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#uninitialized_var\">uninitialized_var</a>(<a class=\"id\" href=\"#address\">address</a>);", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#vma\">vma</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#address\">address</a> = <a class=\"id\" href=\"#page_address_in_vma\">page_address_in_vma</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#address\">address</a> != -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if !vma, alloc_page_vma() will use task or system default policy</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#alloc_page_vma\">alloc_page_vma</a>(<a class=\"id\" href=\"#GFP_HIGHUSER_MOVABLE\">GFP_HIGHUSER_MOVABLE</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#address\">address</a>);", 
"}", 
"#else", 
"", 
"static void <a class=\"id\" href=\"#migrate_page_add\">migrate_page_add</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#pagelist\">pagelist</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"}", 
"", 
"int <a class=\"id\" href=\"#do_migrate_pages\">do_migrate_pages</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#from_nodes\">from_nodes</a>, const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#to_nodes\">to_nodes</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSYS\">ENOSYS</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#new_vma_page\">new_vma_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, unsigned long <a class=\"id\" href=\"#private\">private</a>, int **<a class=\"id\" href=\"#x\">x</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static long <a class=\"id\" href=\"#do_mbind\">do_mbind</a>(unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     unsigned short <a class=\"id\" href=\"#mode\">mode</a>, unsigned short <a class=\"id\" href=\"#mode_flags\">mode_flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nmask\">nmask</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#new\">new</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#pagelist\">pagelist</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; ~(unsigned long)(<a class=\"id\" href=\"#MPOL_MF_STRICT\">MPOL_MF_STRICT</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#MPOL_MF_MOVE\">MPOL_MF_MOVE</a> | <a class=\"id\" href=\"#MPOL_MF_MOVE_ALL\">MPOL_MF_MOVE_ALL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MPOL_MF_MOVE_ALL\">MPOL_MF_MOVE_ALL</a>) && !<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_NICE\">CAP_SYS_NICE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mode\">mode</a> == <a class=\"id\" href=\"#MPOL_DEFAULT\">MPOL_DEFAULT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#MPOL_MF_STRICT\">MPOL_MF_STRICT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = (<a class=\"id\" href=\"#len\">len</a> + <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - 1) &amp; <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> &lt; <a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#end\">end</a> == <a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#mpol_new\">mpol_new</a>(<a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#mode_flags\">mode_flags</a>, <a class=\"id\" href=\"#nmask\">nmask</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#new\">new</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we are using the default policy then operation</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * on discontinuous address spaces is okay after all</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#new\">new</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#MPOL_MF_DISCONTIG_OK\">MPOL_MF_DISCONTIG_OK</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"mbind %lx-%lx mode:%d flags:%d nodes:%lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#mode_flags\">mode_flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#nmask\">nmask</a> ? <a class=\"id\" href=\"#nodes_addr\">nodes_addr</a>(*<a class=\"id\" href=\"#nmask\">nmask</a>)[0] : -1);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; (<a class=\"id\" href=\"#MPOL_MF_MOVE\">MPOL_MF_MOVE</a> | <a class=\"id\" href=\"#MPOL_MF_MOVE_ALL\">MPOL_MF_MOVE_ALL</a>)) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#migrate_prep\">migrate_prep</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#mpol_out\">mpol_out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NODEMASK_SCRATCH\">NODEMASK_SCRATCH</a>(<a class=\"id\" href=\"#scratch\">scratch</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scratch\">scratch</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_lock\">task_lock</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#mpol_set_nodemask\">mpol_set_nodemask</a>(<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#nmask\">nmask</a>, <a class=\"id\" href=\"#scratch\">scratch</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_unlock\">task_unlock</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NODEMASK_SCRATCH_FREE\">NODEMASK_SCRATCH_FREE</a>(<a class=\"id\" href=\"#scratch\">scratch</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#mpol_out\">mpol_out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vma\">vma</a> = <a class=\"id\" href=\"#check_range\">check_range</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#nmask\">nmask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#flags\">flags</a> | <a class=\"id\" href=\"#MPOL_MF_INVERT\">MPOL_MF_INVERT</a>, &amp;<a class=\"id\" href=\"#pagelist\">pagelist</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#vma\">vma</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#vma\">vma</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#nr_failed\">nr_failed</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#mbind_range\">mbind_range</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#pagelist\">pagelist</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_failed\">nr_failed</a> = <a class=\"id\" href=\"#migrate_pages\">migrate_pages</a>(&amp;<a class=\"id\" href=\"#pagelist\">pagelist</a>, <a class=\"id\" href=\"#new_vma_page\">new_vma_page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long)<a class=\"id\" href=\"#vma\">vma</a>, 0);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a> && <a class=\"id\" href=\"#nr_failed\">nr_failed</a> && (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MPOL_MF_STRICT\">MPOL_MF_STRICT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#putback_lru_pages\">putback_lru_pages</a>(&amp;<a class=\"id\" href=\"#pagelist\">pagelist</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
" <a class=\"id\" href=\"#mpol_out\">mpol_out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mpol_put\">mpol_put</a>(<a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * User space interface with variable sized bitmaps for nodelists.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* Copy a node mask from user space. */</span>", 
"static int <a class=\"id\" href=\"#get_nodes\">get_nodes</a>(<a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodes\">nodes</a>, const unsigned long <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#nmask\">nmask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#maxnode\">maxnode</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#k\">k</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nlongs\">nlongs</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#endmask\">endmask</a>;", 
"", 
"<span class=\"ts\"/>--<a class=\"id\" href=\"#maxnode\">maxnode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodes_clear\">nodes_clear</a>(*<a class=\"id\" href=\"#nodes\">nodes</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#maxnode\">maxnode</a> == 0 || !<a class=\"id\" href=\"#nmask\">nmask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#maxnode\">maxnode</a> &gt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>*<a class=\"id\" href=\"#BITS_PER_BYTE\">BITS_PER_BYTE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nlongs\">nlongs</a> = <a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#maxnode\">maxnode</a>);", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#maxnode\">maxnode</a> % <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#endmask\">endmask</a> = ~0UL;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#endmask\">endmask</a> = (1UL << (<a class=\"id\" href=\"#maxnode\">maxnode</a> % <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>)) - 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* When the user specified more nodes than supported just check</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   if the non supported part is all zero. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nlongs\">nlongs</a> &gt; <a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nlongs\">nlongs</a> &gt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>/sizeof(long))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#k\">k</a> = <a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>); <a class=\"id\" href=\"#k\">k</a> &lt; <a class=\"id\" href=\"#nlongs\">nlongs</a>; <a class=\"id\" href=\"#k\">k</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#t\">t</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#nmask\">nmask</a> + <a class=\"id\" href=\"#k\">k</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#k\">k</a> == <a class=\"id\" href=\"#nlongs\">nlongs</a> - 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a> &amp; <a class=\"id\" href=\"#endmask\">endmask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#t\">t</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nlongs\">nlongs</a> = <a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#endmask\">endmask</a> = ~0UL;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(<a class=\"id\" href=\"#nodes_addr\">nodes_addr</a>(*<a class=\"id\" href=\"#nodes\">nodes</a>), <a class=\"id\" href=\"#nmask\">nmask</a>, <a class=\"id\" href=\"#nlongs\">nlongs</a>*sizeof(unsigned long)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodes_addr\">nodes_addr</a>(*<a class=\"id\" href=\"#nodes\">nodes</a>)[<a class=\"id\" href=\"#nlongs\">nlongs</a>-1] &= <a class=\"id\" href=\"#endmask\">endmask</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Copy a kernel node mask to user space */</span>", 
"static int <a class=\"id\" href=\"#copy_nodes_to_user\">copy_nodes_to_user</a>(unsigned long <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#mask\">mask</a>, unsigned long <a class=\"id\" href=\"#maxnode\">maxnode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#nodes\">nodes</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#maxnode\">maxnode</a>-1, 64) / 8;", 
"<span class=\"ts\"/>const int <a class=\"id\" href=\"#nbytes\">nbytes</a> = <a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>) * sizeof(long);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy\">copy</a> &gt; <a class=\"id\" href=\"#nbytes\">nbytes</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#copy\">copy</a> &gt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#clear_user\">clear_user</a>((char <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#mask\">mask</a> + <a class=\"id\" href=\"#nbytes\">nbytes</a>, <a class=\"id\" href=\"#copy\">copy</a> - <a class=\"id\" href=\"#nbytes\">nbytes</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copy\">copy</a> = <a class=\"id\" href=\"#nbytes\">nbytes</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#nodes_addr\">nodes_addr</a>(*<a class=\"id\" href=\"#nodes\">nodes</a>), <a class=\"id\" href=\"#copy\">copy</a>) ? -<a class=\"id\" href=\"#EFAULT\">EFAULT</a> : 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE6\">SYSCALL_DEFINE6</a>(<a class=\"id\" href=\"#mbind\">mbind</a>, unsigned long, <a class=\"id\" href=\"#start\">start</a>, unsigned long, <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long, <a class=\"id\" href=\"#mode\">mode</a>, unsigned long <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#nmask\">nmask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long, <a class=\"id\" href=\"#maxnode\">maxnode</a>, unsigned, <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> <a class=\"id\" href=\"#nodes\">nodes</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#mode_flags\">mode_flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mode_flags\">mode_flags</a> = <a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#MPOL_MODE_FLAGS\">MPOL_MODE_FLAGS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a> &= ~<a class=\"id\" href=\"#MPOL_MODE_FLAGS\">MPOL_MODE_FLAGS</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mode\">mode</a> >= <a class=\"id\" href=\"#MPOL_MAX\">MPOL_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#mode_flags\">mode_flags</a> &amp; <a class=\"id\" href=\"#MPOL_F_STATIC_NODES\">MPOL_F_STATIC_NODES</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#mode_flags\">mode_flags</a> &amp; <a class=\"id\" href=\"#MPOL_F_RELATIVE_NODES\">MPOL_F_RELATIVE_NODES</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#get_nodes\">get_nodes</a>(&amp;<a class=\"id\" href=\"#nodes\">nodes</a>, <a class=\"id\" href=\"#nmask\">nmask</a>, <a class=\"id\" href=\"#maxnode\">maxnode</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#do_mbind\">do_mbind</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#mode_flags\">mode_flags</a>, &amp;<a class=\"id\" href=\"#nodes\">nodes</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Set the process memory policy */</span>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE3\">SYSCALL_DEFINE3</a>(<a class=\"id\" href=\"#set_mempolicy\">set_mempolicy</a>, int, <a class=\"id\" href=\"#mode\">mode</a>, unsigned long <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#nmask\">nmask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long, <a class=\"id\" href=\"#maxnode\">maxnode</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> <a class=\"id\" href=\"#nodes\">nodes</a>;", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#MPOL_MODE_FLAGS\">MPOL_MODE_FLAGS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a> &= ~<a class=\"id\" href=\"#MPOL_MODE_FLAGS\">MPOL_MODE_FLAGS</a>;", 
"<span class=\"ts\"/>if ((unsigned int)<a class=\"id\" href=\"#mode\">mode</a> >= <a class=\"id\" href=\"#MPOL_MAX\">MPOL_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MPOL_F_STATIC_NODES\">MPOL_F_STATIC_NODES</a>) && (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MPOL_F_RELATIVE_NODES\">MPOL_F_RELATIVE_NODES</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#get_nodes\">get_nodes</a>(&amp;<a class=\"id\" href=\"#nodes\">nodes</a>, <a class=\"id\" href=\"#nmask\">nmask</a>, <a class=\"id\" href=\"#maxnode\">maxnode</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#do_set_mempolicy\">do_set_mempolicy</a>(<a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#flags\">flags</a>, &amp;<a class=\"id\" href=\"#nodes\">nodes</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE4\">SYSCALL_DEFINE4</a>(<a class=\"id\" href=\"#migrate_pages\">migrate_pages</a>, <a class=\"id\" href=\"#pid_t\">pid_t</a>, <a class=\"id\" href=\"#pid\">pid</a>, unsigned long, <a class=\"id\" href=\"#maxnode\">maxnode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const unsigned long <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#old_nodes\">old_nodes</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const unsigned long <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#new_nodes\">new_nodes</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a> = <a class=\"id\" href=\"#current_cred\">current_cred</a>(), *<a class=\"id\" href=\"#tcred\">tcred</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> <a class=\"id\" href=\"#task_nodes\">task_nodes</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#old\">old</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#new\">new</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NODEMASK_SCRATCH\">NODEMASK_SCRATCH</a>(<a class=\"id\" href=\"#scratch\">scratch</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#scratch\">scratch</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old\">old</a> = &amp;<a class=\"id\" href=\"#scratch\">scratch</a>-><a class=\"id\" href=\"#mask1\">mask1</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a> = &amp;<a class=\"id\" href=\"#scratch\">scratch</a>-><a class=\"id\" href=\"#mask2\">mask2</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#get_nodes\">get_nodes</a>(<a class=\"id\" href=\"#old\">old</a>, <a class=\"id\" href=\"#old_nodes\">old_nodes</a>, <a class=\"id\" href=\"#maxnode\">maxnode</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#get_nodes\">get_nodes</a>(<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#new_nodes\">new_nodes</a>, <a class=\"id\" href=\"#maxnode\">maxnode</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Find the mm_struct */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#pid\">pid</a> ? <a class=\"id\" href=\"#find_task_by_vpid\">find_task_by_vpid</a>(<a class=\"id\" href=\"#pid\">pid</a>) : <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#task\">task</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ESRCH\">ESRCH</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#get_task_mm\">get_task_mm</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mm\">mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check if this process has the right to modify the specified</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * process. The right exists if the process has administrative</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * capabilities, superuser privileges or the same</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * userid as the target process.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcred\">tcred</a> = <a class=\"id\" href=\"#__task_cred\">__task_cred</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#euid\">euid</a> != <a class=\"id\" href=\"#tcred\">tcred</a>-><a class=\"id\" href=\"#suid\">suid</a> && <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#euid\">euid</a> != <a class=\"id\" href=\"#tcred\">tcred</a>-><a class=\"id\" href=\"#uid\">uid</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#uid\">uid</a>  != <a class=\"id\" href=\"#tcred\">tcred</a>-><a class=\"id\" href=\"#suid\">suid</a> && <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#uid\">uid</a>  != <a class=\"id\" href=\"#tcred\">tcred</a>-><a class=\"id\" href=\"#uid\">uid</a> &&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_NICE\">CAP_SYS_NICE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_nodes\">task_nodes</a> = <a class=\"id\" href=\"#cpuset_mems_allowed\">cpuset_mems_allowed</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Is the user allowed to access the target nodes? */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#nodes_subset\">nodes_subset</a>(*<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#task_nodes\">task_nodes</a>) && !<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_NICE\">CAP_SYS_NICE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#nodes_subset\">nodes_subset</a>(*<a class=\"id\" href=\"#new\">new</a>, <a class=\"id\" href=\"#node_states\">node_states</a>[<a class=\"id\" href=\"#N_HIGH_MEMORY\">N_HIGH_MEMORY</a>])) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#security_task_movememory\">security_task_movememory</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#do_migrate_pages\">do_migrate_pages</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#old\">old</a>, <a class=\"id\" href=\"#new\">new</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_NICE\">CAP_SYS_NICE</a>) ? <a class=\"id\" href=\"#MPOL_MF_MOVE_ALL\">MPOL_MF_MOVE_ALL</a> : <a class=\"id\" href=\"#MPOL_MF_MOVE\">MPOL_MF_MOVE</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mm\">mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mmput\">mmput</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NODEMASK_SCRATCH_FREE\">NODEMASK_SCRATCH_FREE</a>(<a class=\"id\" href=\"#scratch\">scratch</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/* Retrieve NUMA policy */</span>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE5\">SYSCALL_DEFINE5</a>(<a class=\"id\" href=\"#get_mempolicy\">get_mempolicy</a>, int <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#policy\">policy</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#nmask\">nmask</a>, unsigned long, <a class=\"id\" href=\"#maxnode\">maxnode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long, <a class=\"id\" href=\"#addr\">addr</a>, unsigned long, <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#uninitialized_var\">uninitialized_var</a>(<a class=\"id\" href=\"#pval\">pval</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> <a class=\"id\" href=\"#nodes\">nodes</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nmask\">nmask</a> != <a class=\"id\" href=\"#NULL\">NULL</a> && <a class=\"id\" href=\"#maxnode\">maxnode</a> &lt; <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#do_get_mempolicy\">do_get_mempolicy</a>(&amp;<a class=\"id\" href=\"#pval\">pval</a>, &amp;<a class=\"id\" href=\"#nodes\">nodes</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#policy\">policy</a> && <a class=\"id\" href=\"#put_user\">put_user</a>(<a class=\"id\" href=\"#pval\">pval</a>, <a class=\"id\" href=\"#policy\">policy</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nmask\">nmask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#copy_nodes_to_user\">copy_nodes_to_user</a>(<a class=\"id\" href=\"#nmask\">nmask</a>, <a class=\"id\" href=\"#maxnode\">maxnode</a>, &amp;<a class=\"id\" href=\"#nodes\">nodes</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_COMPAT\">CONFIG_COMPAT</a>", 
"", 
"<a class=\"id\" href=\"#asmlinkage\">asmlinkage</a> long <a class=\"id\" href=\"#compat_sys_get_mempolicy\">compat_sys_get_mempolicy</a>(int <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#policy\">policy</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#compat_ulong_t\">compat_ulong_t</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#nmask\">nmask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#compat_ulong_t\">compat_ulong_t</a> <a class=\"id\" href=\"#maxnode\">maxnode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#compat_ulong_t\">compat_ulong_t</a> <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#compat_ulong_t\">compat_ulong_t</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#nm\">nm</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_bits\">nr_bits</a>, <a class=\"id\" href=\"#alloc_size\">alloc_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DECLARE_BITMAP\">DECLARE_BITMAP</a>(<a class=\"id\" href=\"#bm\">bm</a>, <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_bits\">nr_bits</a> = <a class=\"id\" href=\"#min_t\">min_t</a>(unsigned long, <a class=\"id\" href=\"#maxnode\">maxnode</a>-1, <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_size\">alloc_size</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#nr_bits\">nr_bits</a>, <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>) / 8;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nmask\">nmask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nm\">nm</a> = <a class=\"id\" href=\"#compat_alloc_user_space\">compat_alloc_user_space</a>(<a class=\"id\" href=\"#alloc_size\">alloc_size</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#sys_get_mempolicy\">sys_get_mempolicy</a>(<a class=\"id\" href=\"#policy\">policy</a>, <a class=\"id\" href=\"#nm\">nm</a>, <a class=\"id\" href=\"#nr_bits\">nr_bits</a>+1, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a> && <a class=\"id\" href=\"#nmask\">nmask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(<a class=\"id\" href=\"#bm\">bm</a>, <a class=\"id\" href=\"#nm\">nm</a>, <a class=\"id\" href=\"#alloc_size\">alloc_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* ensure entire bitmap is zeroed */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> |= <a class=\"id\" href=\"#clear_user\">clear_user</a>(<a class=\"id\" href=\"#nmask\">nmask</a>, <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#maxnode\">maxnode</a>-1, 8) / 8);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> |= <a class=\"id\" href=\"#compat_put_bitmap\">compat_put_bitmap</a>(<a class=\"id\" href=\"#nmask\">nmask</a>, <a class=\"id\" href=\"#bm\">bm</a>, <a class=\"id\" href=\"#nr_bits\">nr_bits</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#asmlinkage\">asmlinkage</a> long <a class=\"id\" href=\"#compat_sys_set_mempolicy\">compat_sys_set_mempolicy</a>(int <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#compat_ulong_t\">compat_ulong_t</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#nmask\">nmask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#compat_ulong_t\">compat_ulong_t</a> <a class=\"id\" href=\"#maxnode\">maxnode</a>)", 
"{", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#nm\">nm</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_bits\">nr_bits</a>, <a class=\"id\" href=\"#alloc_size\">alloc_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DECLARE_BITMAP\">DECLARE_BITMAP</a>(<a class=\"id\" href=\"#bm\">bm</a>, <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_bits\">nr_bits</a> = <a class=\"id\" href=\"#min_t\">min_t</a>(unsigned long, <a class=\"id\" href=\"#maxnode\">maxnode</a>-1, <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_size\">alloc_size</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#nr_bits\">nr_bits</a>, <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>) / 8;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nmask\">nmask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#compat_get_bitmap\">compat_get_bitmap</a>(<a class=\"id\" href=\"#bm\">bm</a>, <a class=\"id\" href=\"#nmask\">nmask</a>, <a class=\"id\" href=\"#nr_bits\">nr_bits</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nm\">nm</a> = <a class=\"id\" href=\"#compat_alloc_user_space\">compat_alloc_user_space</a>(<a class=\"id\" href=\"#alloc_size\">alloc_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> |= <a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#nm\">nm</a>, <a class=\"id\" href=\"#bm\">bm</a>, <a class=\"id\" href=\"#alloc_size\">alloc_size</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sys_set_mempolicy\">sys_set_mempolicy</a>(<a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#nm\">nm</a>, <a class=\"id\" href=\"#nr_bits\">nr_bits</a>+1);", 
"}", 
"", 
"<a class=\"id\" href=\"#asmlinkage\">asmlinkage</a> long <a class=\"id\" href=\"#compat_sys_mbind\">compat_sys_mbind</a>(<a class=\"id\" href=\"#compat_ulong_t\">compat_ulong_t</a> <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#compat_ulong_t\">compat_ulong_t</a> <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#compat_ulong_t\">compat_ulong_t</a> <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#compat_ulong_t\">compat_ulong_t</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#nmask\">nmask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#compat_ulong_t\">compat_ulong_t</a> <a class=\"id\" href=\"#maxnode\">maxnode</a>, <a class=\"id\" href=\"#compat_ulong_t\">compat_ulong_t</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#nm\">nm</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_bits\">nr_bits</a>, <a class=\"id\" href=\"#alloc_size\">alloc_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> <a class=\"id\" href=\"#bm\">bm</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_bits\">nr_bits</a> = <a class=\"id\" href=\"#min_t\">min_t</a>(unsigned long, <a class=\"id\" href=\"#maxnode\">maxnode</a>-1, <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_size\">alloc_size</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#nr_bits\">nr_bits</a>, <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>) / 8;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nmask\">nmask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#compat_get_bitmap\">compat_get_bitmap</a>(<a class=\"id\" href=\"#nodes_addr\">nodes_addr</a>(<a class=\"id\" href=\"#bm\">bm</a>), <a class=\"id\" href=\"#nmask\">nmask</a>, <a class=\"id\" href=\"#nr_bits\">nr_bits</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nm\">nm</a> = <a class=\"id\" href=\"#compat_alloc_user_space\">compat_alloc_user_space</a>(<a class=\"id\" href=\"#alloc_size\">alloc_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> |= <a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#nm\">nm</a>, <a class=\"id\" href=\"#nodes_addr\">nodes_addr</a>(<a class=\"id\" href=\"#bm\">bm</a>), <a class=\"id\" href=\"#alloc_size\">alloc_size</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sys_mbind\">sys_mbind</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#nm\">nm</a>, <a class=\"id\" href=\"#nr_bits\">nr_bits</a>+1, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * get_vma_policy(@task, @vma, @addr)</span>", 
"<span class=\"comment\"> * @task - task for fallback if vma policy == default</span>", 
"<span class=\"comment\"> * @vma   - virtual memory area whose policy is sought</span>", 
"<span class=\"comment\"> * @addr  - address in @vma for shared policy lookup</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns effective policy for a VMA at specified address.</span>", 
"<span class=\"comment\"> * Falls back to @task or system default policy, as necessary.</span>", 
"<span class=\"comment\"> * Current or other task's task mempolicy and non-shared vma policies</span>", 
"<span class=\"comment\"> * are protected by the task's mmap_sem, which must be held for read by</span>", 
"<span class=\"comment\"> * the caller.</span>", 
"<span class=\"comment\"> * Shared policies [those marked as MPOL_F_SHARED] require an extra reference</span>", 
"<span class=\"comment\"> * count--added by the get_policy() vm_op, as appropriate--to protect against</span>", 
"<span class=\"comment\"> * freeing by another task.  It is the caller's responsibility to free the</span>", 
"<span class=\"comment\"> * extra reference for shared policies.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#get_vma_policy\">get_vma_policy</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#pol\">pol</a> = <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#mempolicy\">mempolicy</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a> && <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a>-><a class=\"id\" href=\"#get_policy\">get_policy</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#vpol\">vpol</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a>-><a class=\"id\" href=\"#get_policy\">get_policy</a>(<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vpol\">vpol</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pol\">pol</a> = <a class=\"id\" href=\"#vpol\">vpol</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_policy\">vm_policy</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pol\">pol</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_policy\">vm_policy</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pol\">pol</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pol\">pol</a> = &amp;<a class=\"id\" href=\"#default_policy\">default_policy</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pol\">pol</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return a nodemask representing a mempolicy for filtering nodes for</span>", 
"<span class=\"comment\"> * page allocation</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#policy_nodemask\">policy_nodemask</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>, struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#policy\">policy</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Lower zones don't get a nodemask applied for MPOL_BIND */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#mode\">mode</a> == <a class=\"id\" href=\"#MPOL_BIND\">MPOL_BIND</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_zone\">gfp_zone</a>(<a class=\"id\" href=\"#gfp\">gfp</a>) >= <a class=\"id\" href=\"#policy_zone\">policy_zone</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpuset_nodemask_valid_mems_allowed\">cpuset_nodemask_valid_mems_allowed</a>(&amp;<a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#nodes\">nodes</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#nodes\">nodes</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Return a zonelist indicated by gfp for node representing a mempolicy */</span>", 
"static struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#policy_zonelist\">policy_zonelist</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>, struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#policy\">policy</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nd\">nd</a> = <a class=\"id\" href=\"#numa_node_id\">numa_node_id</a>();", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#mode\">mode</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MPOL_PREFERRED\">MPOL_PREFERRED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MPOL_F_LOCAL\">MPOL_F_LOCAL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nd\">nd</a> = <a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#preferred_node\">preferred_node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MPOL_BIND\">MPOL_BIND</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Normally, MPOL_BIND allocations are node-local within the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * allowed nodemask.  However, if __GFP_THISNODE is set and the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * current node isn't part of the mask, we use the zonelist for</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the first node in the mask instead.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#gfp\">gfp</a> &amp; <a class=\"id\" href=\"#__GFP_THISNODE\">__GFP_THISNODE</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#node_isset\">node_isset</a>(<a class=\"id\" href=\"#nd\">nd</a>, <a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#nodes\">nodes</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nd\">nd</a> = <a class=\"id\" href=\"#first_node\">first_node</a>(<a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#nodes\">nodes</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#node_zonelist\">node_zonelist</a>(<a class=\"id\" href=\"#nd\">nd</a>, <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Do dynamic interleaving for a process */</span>", 
"static unsigned <a class=\"id\" href=\"#interleave_nodes\">interleave_nodes</a>(struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#policy\">policy</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#me\">me</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nid\">nid</a> = <a class=\"id\" href=\"#me\">me</a>-><a class=\"id\" href=\"#il_next\">il_next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#next_node\">next_node</a>(<a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#nodes\">nodes</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#next\">next</a> >= <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#first_node\">first_node</a>(<a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#nodes\">nodes</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#next\">next</a> &lt; <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#me\">me</a>-><a class=\"id\" href=\"#il_next\">il_next</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nid\">nid</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Depending on the memory policy provide a node from which to allocate the</span>", 
"<span class=\"comment\"> * next slab entry.</span>", 
"<span class=\"comment\"> * @policy must be protected by freeing by the caller.  If @policy is</span>", 
"<span class=\"comment\"> * the current task's mempolicy, this protection is implicit, as only the</span>", 
"<span class=\"comment\"> * task can change it's policy.  The system default policy requires no</span>", 
"<span class=\"comment\"> * such protection.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned <a class=\"id\" href=\"#slab_node\">slab_node</a>(struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#policy\">policy</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#policy\">policy</a> || <a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MPOL_F_LOCAL\">MPOL_F_LOCAL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#numa_node_id\">numa_node_id</a>();", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#mode\">mode</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MPOL_PREFERRED\">MPOL_PREFERRED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * handled MPOL_F_LOCAL above</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#preferred_node\">preferred_node</a>;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MPOL_INTERLEAVE\">MPOL_INTERLEAVE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#interleave_nodes\">interleave_nodes</a>(<a class=\"id\" href=\"#policy\">policy</a>);", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MPOL_BIND\">MPOL_BIND</a>: {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Follow bind policy behavior and start allocation at the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * first node.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#zonelist\">zonelist</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#zone_type\">zone_type</a> <a class=\"id\" href=\"#highest_zoneidx\">highest_zoneidx</a> = <a class=\"id\" href=\"#gfp_zone\">gfp_zone</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zonelist\">zonelist</a> = &amp;<a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#numa_node_id\">numa_node_id</a>())-><a class=\"id\" href=\"#node_zonelists\">node_zonelists</a>[0];", 
"<span class=\"ts\"/><span class=\"ts\"/>(void)<a class=\"id\" href=\"#first_zones_zonelist\">first_zones_zonelist</a>(<a class=\"id\" href=\"#zonelist\">zonelist</a>, <a class=\"id\" href=\"#highest_zoneidx\">highest_zoneidx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#nodes\">nodes</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#zone\">zone</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* Do static interleaving for a VMA with known offset. */</span>", 
"static unsigned <a class=\"id\" href=\"#offset_il_node\">offset_il_node</a>(struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#pol\">pol</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#off\">off</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#nnodes\">nnodes</a> = <a class=\"id\" href=\"#nodes_weight\">nodes_weight</a>(<a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#nodes\">nodes</a>);", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#target\">target</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nid\">nid</a> = -1;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#nnodes\">nnodes</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#numa_node_id\">numa_node_id</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#target\">target</a> = (unsigned int)<a class=\"id\" href=\"#off\">off</a> % <a class=\"id\" href=\"#nnodes\">nnodes</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = 0;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nid\">nid</a> = <a class=\"id\" href=\"#next_node\">next_node</a>(<a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#nodes\">nodes</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>++;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#c\">c</a> <= <a class=\"id\" href=\"#target\">target</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nid\">nid</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Determine a node number for interleave */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned <a class=\"id\" href=\"#interleave_nid\">interleave_nid</a>(struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#pol\">pol</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#shift\">shift</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#off\">off</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * for small pages, there is no difference between</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * shift and PAGE_SHIFT, so the bit-shift is safe.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * for huge pages, since vm_pgoff is in units of small</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * pages, we need to shift off the always 0 bits to get</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * a useful offset.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#shift\">shift</a> &lt; <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#off\">off</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a> >> (<a class=\"id\" href=\"#shift\">shift</a> - <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#off\">off</a> += (<a class=\"id\" href=\"#addr\">addr</a> - <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>) >> <a class=\"id\" href=\"#shift\">shift</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#offset_il_node\">offset_il_node</a>(<a class=\"id\" href=\"#pol\">pol</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#off\">off</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#interleave_nodes\">interleave_nodes</a>(<a class=\"id\" href=\"#pol\">pol</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HUGETLBFS\">CONFIG_HUGETLBFS</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * huge_zonelist(@vma, @addr, @gfp_flags, @mpol)</span>", 
"<span class=\"comment\"> * @vma = virtual memory area whose policy is sought</span>", 
"<span class=\"comment\"> * @addr = address in @vma for shared policy lookup and interleave policy</span>", 
"<span class=\"comment\"> * @gfp_flags = for requested zone</span>", 
"<span class=\"comment\"> * @mpol = pointer to mempolicy pointer for reference counted mempolicy</span>", 
"<span class=\"comment\"> * @nodemask = pointer to nodemask pointer for MPOL_BIND nodemask</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns a zonelist suitable for a huge page allocation and a pointer</span>", 
"<span class=\"comment\"> * to the struct mempolicy for conditional unref after allocation.</span>", 
"<span class=\"comment\"> * If the effective policy is 'BIND, returns a pointer to the mempolicy's</span>", 
"<span class=\"comment\"> * @nodemask for filtering the zonelist.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Must be protected by get_mems_allowed()</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#huge_zonelist\">huge_zonelist</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_flags\">gfp_flags</a>, struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> **<a class=\"id\" href=\"#mpol\">mpol</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> **<a class=\"id\" href=\"#nodemask\">nodemask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#zl\">zl</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#mpol\">mpol</a> = <a class=\"id\" href=\"#get_vma_policy\">get_vma_policy</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#nodemask\">nodemask</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;<span class=\"ts\"/><span class=\"comment\">/* assume !MPOL_BIND */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>((*<a class=\"id\" href=\"#mpol\">mpol</a>)-><a class=\"id\" href=\"#mode\">mode</a> == <a class=\"id\" href=\"#MPOL_INTERLEAVE\">MPOL_INTERLEAVE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zl\">zl</a> = <a class=\"id\" href=\"#node_zonelist\">node_zonelist</a>(<a class=\"id\" href=\"#interleave_nid\">interleave_nid</a>(*<a class=\"id\" href=\"#mpol\">mpol</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#huge_page_shift\">huge_page_shift</a>(<a class=\"id\" href=\"#hstate_vma\">hstate_vma</a>(<a class=\"id\" href=\"#vma\">vma</a>))), <a class=\"id\" href=\"#gfp_flags\">gfp_flags</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zl\">zl</a> = <a class=\"id\" href=\"#policy_zonelist\">policy_zonelist</a>(<a class=\"id\" href=\"#gfp_flags\">gfp_flags</a>, *<a class=\"id\" href=\"#mpol\">mpol</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((*<a class=\"id\" href=\"#mpol\">mpol</a>)-><a class=\"id\" href=\"#mode\">mode</a> == <a class=\"id\" href=\"#MPOL_BIND\">MPOL_BIND</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#nodemask\">nodemask</a> = &amp;(*<a class=\"id\" href=\"#mpol\">mpol</a>)-><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#nodes\">nodes</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#zl\">zl</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * init_nodemask_of_mempolicy</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the current task's mempolicy is \"default\" [NULL], return 'false'</span>", 
"<span class=\"comment\"> * to indicate default policy.  Otherwise, extract the policy nodemask</span>", 
"<span class=\"comment\"> * for 'bind' or 'interleave' policy into the argument nodemask, or</span>", 
"<span class=\"comment\"> * initialize the argument nodemask to contain the single node for</span>", 
"<span class=\"comment\"> * 'preferred' or 'local' policy and return 'true' to indicate presence</span>", 
"<span class=\"comment\"> * of non-default mempolicy.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We don't bother with reference counting the mempolicy [mpol_get/put]</span>", 
"<span class=\"comment\"> * because the current task is examining it's own mempolicy and a task's</span>", 
"<span class=\"comment\"> * mempolicy is only ever changed by the task itself.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * N.B., it is the caller's responsibility to free a returned nodemask.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#init_nodemask_of_mempolicy\">init_nodemask_of_mempolicy</a>(<a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#mempolicy\">mempolicy</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nid\">nid</a>;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#mask\">mask</a> && <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mempolicy\">mempolicy</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_lock\">task_lock</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mempolicy\">mempolicy</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mempolicy\">mempolicy</a>;", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#mempolicy\">mempolicy</a>-><a class=\"id\" href=\"#mode\">mode</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MPOL_PREFERRED\">MPOL_PREFERRED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mempolicy\">mempolicy</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MPOL_F_LOCAL\">MPOL_F_LOCAL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nid\">nid</a> = <a class=\"id\" href=\"#numa_node_id\">numa_node_id</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nid\">nid</a> = <a class=\"id\" href=\"#mempolicy\">mempolicy</a>-><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#preferred_node\">preferred_node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_nodemask_of_node\">init_nodemask_of_node</a>(<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#nid\">nid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MPOL_BIND\">MPOL_BIND</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Fall through */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MPOL_INTERLEAVE\">MPOL_INTERLEAVE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#mask\">mask</a> =  <a class=\"id\" href=\"#mempolicy\">mempolicy</a>-><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#nodes\">nodes</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_unlock\">task_unlock</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * mempolicy_nodemask_intersects</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If tsk's mempolicy is \"default\" [NULL], return 'true' to indicate default</span>", 
"<span class=\"comment\"> * policy.  Otherwise, check for intersection between mask and the policy</span>", 
"<span class=\"comment\"> * nodemask for 'bind' or 'interleave' policy.  For 'perferred' or 'local'</span>", 
"<span class=\"comment\"> * policy, always return true since it may allocate elsewhere on fallback.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Takes task_lock(tsk) to prevent freeing of its mempolicy.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#mempolicy_nodemask_intersects\">mempolicy_nodemask_intersects</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> *<a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#mempolicy\">mempolicy</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mask\">mask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_lock\">task_lock</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mempolicy\">mempolicy</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#mempolicy\">mempolicy</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mempolicy\">mempolicy</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#mempolicy\">mempolicy</a>-><a class=\"id\" href=\"#mode\">mode</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MPOL_PREFERRED\">MPOL_PREFERRED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * MPOL_PREFERRED and MPOL_F_LOCAL are only preferred nodes to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * allocate from, they may fallback to other nodes when oom.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Thus, it's possible for tsk to have allocated memory from</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * nodes in mask.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MPOL_BIND\">MPOL_BIND</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MPOL_INTERLEAVE\">MPOL_INTERLEAVE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#nodes_intersects\">nodes_intersects</a>(<a class=\"id\" href=\"#mempolicy\">mempolicy</a>-><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#nodes\">nodes</a>, *<a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_unlock\">task_unlock</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Allocate a page in interleaved policy.</span>", 
"<span class=\"comment\">   Own path because it needs to do special accounting. */</span>", 
"static struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#alloc_page_interleave\">alloc_page_interleave</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>, unsigned <a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#nid\">nid</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#zl\">zl</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zl\">zl</a> = <a class=\"id\" href=\"#node_zonelist\">node_zonelist</a>(<a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#gfp\">gfp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#__alloc_pages\">__alloc_pages</a>(<a class=\"id\" href=\"#gfp\">gfp</a>, <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#zl\">zl</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a> && <a class=\"id\" href=\"#page_zone\">page_zone</a>(<a class=\"id\" href=\"#page\">page</a>) == <a class=\"id\" href=\"#zonelist_zone\">zonelist_zone</a>(&amp;<a class=\"id\" href=\"#zl\">zl</a>-><a class=\"id\" href=\"#_zonerefs\">_zonerefs</a>[0]))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inc_zone_page_state\">inc_zone_page_state</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NUMA_INTERLEAVE_HIT\">NUMA_INTERLEAVE_HIT</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>alloc_page_vma<span class=\"ts\"/>- Allocate a page for a VMA.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>@gfp:</span>", 
"<span class=\"comment\"> *      %GFP_USER    user allocation.</span>", 
"<span class=\"comment\"> *      %GFP_KERNEL  kernel allocations,</span>", 
"<span class=\"comment\"> *      %GFP_HIGHMEM highmem/user allocations,</span>", 
"<span class=\"comment\"> *      %GFP_FS      allocation should not call back into a file system.</span>", 
"<span class=\"comment\"> *      %GFP_ATOMIC  don't sleep.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>@vma:  Pointer to VMA or NULL if not available.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@addr: Virtual Address of the allocation. Must be inside the VMA.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>This function allocates a page from the kernel page pool and applies</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>a NUMA policy associated with the VMA or the current process.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>When VMA is not NULL caller must hold down_read on the mmap_sem of the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>mm_struct of the VMA to prevent it from going away. Should be used for</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>all allocations for pages that will be mapped into</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>user space. Returns NULL when no page can be allocated.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Should be called with the mm_sem of the vma hold.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#page\">page</a> *", 
"<a class=\"id\" href=\"#alloc_page_vma\">alloc_page_vma</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>, struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#pol\">pol</a> = <a class=\"id\" href=\"#get_vma_policy\">get_vma_policy</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zonelist\">zonelist</a> *<a class=\"id\" href=\"#zl\">zl</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_mems_allowed\">get_mems_allowed</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#mode\">mode</a> == <a class=\"id\" href=\"#MPOL_INTERLEAVE\">MPOL_INTERLEAVE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#nid\">nid</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nid\">nid</a> = <a class=\"id\" href=\"#interleave_nid\">interleave_nid</a>(<a class=\"id\" href=\"#pol\">pol</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mpol_cond_put\">mpol_cond_put</a>(<a class=\"id\" href=\"#pol\">pol</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#alloc_page_interleave\">alloc_page_interleave</a>(<a class=\"id\" href=\"#gfp\">gfp</a>, 0, <a class=\"id\" href=\"#nid\">nid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_mems_allowed\">put_mems_allowed</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zl\">zl</a> = <a class=\"id\" href=\"#policy_zonelist\">policy_zonelist</a>(<a class=\"id\" href=\"#gfp\">gfp</a>, <a class=\"id\" href=\"#pol\">pol</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#mpol_needs_cond_ref\">mpol_needs_cond_ref</a>(<a class=\"id\" href=\"#pol\">pol</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * slow path: ref counted shared policy</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> =  <a class=\"id\" href=\"#__alloc_pages_nodemask\">__alloc_pages_nodemask</a>(<a class=\"id\" href=\"#gfp\">gfp</a>, 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zl\">zl</a>, <a class=\"id\" href=\"#policy_nodemask\">policy_nodemask</a>(<a class=\"id\" href=\"#gfp\">gfp</a>, <a class=\"id\" href=\"#pol\">pol</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__mpol_put\">__mpol_put</a>(<a class=\"id\" href=\"#pol\">pol</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_mems_allowed\">put_mems_allowed</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * fast path:  default or task policy</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#__alloc_pages_nodemask\">__alloc_pages_nodemask</a>(<a class=\"id\" href=\"#gfp\">gfp</a>, 0, <a class=\"id\" href=\"#zl\">zl</a>, <a class=\"id\" href=\"#policy_nodemask\">policy_nodemask</a>(<a class=\"id\" href=\"#gfp\">gfp</a>, <a class=\"id\" href=\"#pol\">pol</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_mems_allowed\">put_mems_allowed</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>alloc_pages_current - Allocate pages.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@gfp:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>%GFP_USER   user allocation,</span>", 
"<span class=\"comment\"> *      <span class=\"ts\"/>%GFP_KERNEL kernel allocation,</span>", 
"<span class=\"comment\"> *      <span class=\"ts\"/>%GFP_HIGHMEM highmem allocation,</span>", 
"<span class=\"comment\"> *      <span class=\"ts\"/>%GFP_FS     don't call back into a file system.</span>", 
"<span class=\"comment\"> *      <span class=\"ts\"/>%GFP_ATOMIC don't sleep.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@order: Power of two of allocation size in pages. 0 is a single page.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Allocate a page from the kernel page pool.  When not in</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>interrupt context and apply the current process NUMA policy.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns NULL when no page can be allocated.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Don't call cpuset_update_task_memory_state() unless</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>1) it's ok to take cpuset_sem (can WAIT), and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>2) allocating for current task (not interrupt).</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#alloc_pages_current\">alloc_pages_current</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp\">gfp</a>, unsigned <a class=\"id\" href=\"#order\">order</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#pol\">pol</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mempolicy\">mempolicy</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pol\">pol</a> || <a class=\"id\" href=\"#in_interrupt\">in_interrupt</a>() || (<a class=\"id\" href=\"#gfp\">gfp</a> &amp; <a class=\"id\" href=\"#__GFP_THISNODE\">__GFP_THISNODE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pol\">pol</a> = &amp;<a class=\"id\" href=\"#default_policy\">default_policy</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_mems_allowed\">get_mems_allowed</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * No reference counting needed for current-&gt;mempolicy</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * nor system default_policy</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#mode\">mode</a> == <a class=\"id\" href=\"#MPOL_INTERLEAVE\">MPOL_INTERLEAVE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#alloc_page_interleave\">alloc_page_interleave</a>(<a class=\"id\" href=\"#gfp\">gfp</a>, <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#interleave_nodes\">interleave_nodes</a>(<a class=\"id\" href=\"#pol\">pol</a>));", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#__alloc_pages_nodemask\">__alloc_pages_nodemask</a>(<a class=\"id\" href=\"#gfp\">gfp</a>, <a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#policy_zonelist\">policy_zonelist</a>(<a class=\"id\" href=\"#gfp\">gfp</a>, <a class=\"id\" href=\"#pol\">pol</a>), <a class=\"id\" href=\"#policy_nodemask\">policy_nodemask</a>(<a class=\"id\" href=\"#gfp\">gfp</a>, <a class=\"id\" href=\"#pol\">pol</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_mems_allowed\">put_mems_allowed</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#alloc_pages_current\">alloc_pages_current</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If mpol_dup() sees current-&gt;cpuset == cpuset_being_rebound, then it</span>", 
"<span class=\"comment\"> * rebinds the mempolicy its copying by calling mpol_rebind_policy()</span>", 
"<span class=\"comment\"> * with the mems_allowed returned by cpuset_mems_allowed().  This</span>", 
"<span class=\"comment\"> * keeps mempolicies cpuset relative after its cpuset moves.  See</span>", 
"<span class=\"comment\"> * further kernel/cpuset.c update_nodemask().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * current's mempolicy may be rebinded by the other task(the task that changes</span>", 
"<span class=\"comment\"> * cpuset's mems), so we needn't do rebind work for current task.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* Slow path of a mempolicy duplicate */</span>", 
"struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#__mpol_dup\">__mpol_dup</a>(struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#old\">old</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#policy_cache\">policy_cache</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#new\">new</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* task's mempolicy is protected by alloc_lock */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#old\">old</a> == <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mempolicy\">mempolicy</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_lock\">task_lock</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#new\">new</a> = *<a class=\"id\" href=\"#old\">old</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_unlock\">task_unlock</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#new\">new</a> = *<a class=\"id\" href=\"#old\">old</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#current_cpuset_is_being_rebound\">current_cpuset_is_being_rebound</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> <a class=\"id\" href=\"#mems\">mems</a> = <a class=\"id\" href=\"#cpuset_mems_allowed\">cpuset_mems_allowed</a>(<a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MPOL_F_REBINDING\">MPOL_F_REBINDING</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mpol_rebind_policy\">mpol_rebind_policy</a>(<a class=\"id\" href=\"#new\">new</a>, &amp;<a class=\"id\" href=\"#mems\">mems</a>, <a class=\"id\" href=\"#MPOL_REBIND_STEP2\">MPOL_REBIND_STEP2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mpol_rebind_policy\">mpol_rebind_policy</a>(<a class=\"id\" href=\"#new\">new</a>, &amp;<a class=\"id\" href=\"#mems\">mems</a>, <a class=\"id\" href=\"#MPOL_REBIND_ONCE\">MPOL_REBIND_ONCE</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>, 1);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#new\">new</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If *frompol needs [has] an extra ref, copy *frompol to *tompol ,</span>", 
"<span class=\"comment\"> * eliminate the * MPOL_F_* flags that require conditional ref and</span>", 
"<span class=\"comment\"> * [NOTE!!!] drop the extra ref.  Not safe to reference *frompol directly</span>", 
"<span class=\"comment\"> * after return.  Use the returned value.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Allows use of a mempolicy for, e.g., multiple allocations with a single</span>", 
"<span class=\"comment\"> * policy lookup, even if the policy needs/has extra ref on lookup.</span>", 
"<span class=\"comment\"> * shmem_readahead needs this.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#__mpol_cond_copy\">__mpol_cond_copy</a>(struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#tompol\">tompol</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#frompol\">frompol</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mpol_needs_cond_ref\">mpol_needs_cond_ref</a>(<a class=\"id\" href=\"#frompol\">frompol</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#frompol\">frompol</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#tompol\">tompol</a> = *<a class=\"id\" href=\"#frompol\">frompol</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tompol\">tompol</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#MPOL_F_SHARED\">MPOL_F_SHARED</a>;<span class=\"ts\"/><span class=\"comment\">/* copy doesn't need unref */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mpol_put\">__mpol_put</a>(<a class=\"id\" href=\"#frompol\">frompol</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tompol\">tompol</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Slow path of a mempolicy comparison */</span>", 
"int <a class=\"id\" href=\"#__mpol_equal\">__mpol_equal</a>(struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#a\">a</a>, struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#b\">b</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#a\">a</a> || !<a class=\"id\" href=\"#b\">b</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#mode\">mode</a> != <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#mode\">mode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#flags\">flags</a> != <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#flags\">flags</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mpol_store_user_nodemask\">mpol_store_user_nodemask</a>(<a class=\"id\" href=\"#a\">a</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#nodes_equal\">nodes_equal</a>(<a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#w\">w</a>.<a class=\"id\" href=\"#user_nodemask\">user_nodemask</a>, <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#w\">w</a>.<a class=\"id\" href=\"#user_nodemask\">user_nodemask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#mode\">mode</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MPOL_BIND\">MPOL_BIND</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Fall through */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MPOL_INTERLEAVE\">MPOL_INTERLEAVE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#nodes_equal\">nodes_equal</a>(<a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#nodes\">nodes</a>, <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#nodes\">nodes</a>);", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MPOL_PREFERRED\">MPOL_PREFERRED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#preferred_node\">preferred_node</a> == <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#v\">v</a>.<a class=\"id\" href=\"#preferred_node\">preferred_node</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#flags\">flags</a> == <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Shared memory backing store policy support.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Remember policies even when nobody has shared memory mapped.</span>", 
"<span class=\"comment\"> * The policies are kept in Red-Black tree linked from the inode.</span>", 
"<span class=\"comment\"> * They are protected by the sp-&gt;lock spinlock, which should be held</span>", 
"<span class=\"comment\"> * for any accesses to the tree.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* lookup first element intersecting start-end */</span>", 
"<span class=\"comment\">/* Caller holds sp-&gt;lock */</span>", 
"static struct <a class=\"id\" href=\"#sp_node\">sp_node</a> *", 
"<a class=\"id\" href=\"#sp_lookup\">sp_lookup</a>(struct <a class=\"id\" href=\"#shared_policy\">shared_policy</a> *<a class=\"id\" href=\"#sp\">sp</a>, unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#sp\">sp</a>-><a class=\"id\" href=\"#root\">root</a>.<a class=\"id\" href=\"#rb_node\">rb_node</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#n\">n</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sp_node\">sp_node</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#n\">n</a>, struct <a class=\"id\" href=\"#sp_node\">sp_node</a>, <a class=\"id\" href=\"#nd\">nd</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a> >= <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#rb_right\">rb_right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#end\">end</a> <= <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#rb_left\">rb_left</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#n\">n</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#sp_node\">sp_node</a> *<a class=\"id\" href=\"#w\">w</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#rb_prev\">rb_prev</a>(<a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#prev\">prev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#w\">w</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#prev\">prev</a>, struct <a class=\"id\" href=\"#sp_node\">sp_node</a>, <a class=\"id\" href=\"#nd\">nd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#w\">w</a>-><a class=\"id\" href=\"#end\">end</a> <= <a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#n\">n</a>, struct <a class=\"id\" href=\"#sp_node\">sp_node</a>, <a class=\"id\" href=\"#nd\">nd</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Insert a new shared policy into the list. */</span>", 
"<span class=\"comment\">/* Caller holds sp-&gt;lock */</span>", 
"static void <a class=\"id\" href=\"#sp_insert\">sp_insert</a>(struct <a class=\"id\" href=\"#shared_policy\">shared_policy</a> *<a class=\"id\" href=\"#sp\">sp</a>, struct <a class=\"id\" href=\"#sp_node\">sp_node</a> *<a class=\"id\" href=\"#new\">new</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> **<a class=\"id\" href=\"#p\">p</a> = &amp;<a class=\"id\" href=\"#sp\">sp</a>-><a class=\"id\" href=\"#root\">root</a>.<a class=\"id\" href=\"#rb_node\">rb_node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sp_node\">sp_node</a> *<a class=\"id\" href=\"#nd\">nd</a>;", 
"", 
"<span class=\"ts\"/>while (*<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nd\">nd</a> = <a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#parent\">parent</a>, struct <a class=\"id\" href=\"#sp_node\">sp_node</a>, <a class=\"id\" href=\"#nd\">nd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#start\">start</a> &lt; <a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = &amp;(*<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#rb_left\">rb_left</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#end\">end</a> &gt; <a class=\"id\" href=\"#nd\">nd</a>-><a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = &amp;(*<a class=\"id\" href=\"#p\">p</a>)-><a class=\"id\" href=\"#rb_right\">rb_right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_link_node\">rb_link_node</a>(&amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#nd\">nd</a>, <a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_insert_color\">rb_insert_color</a>(&amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#nd\">nd</a>, &amp;<a class=\"id\" href=\"#sp\">sp</a>-><a class=\"id\" href=\"#root\">root</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"inserting %lx-%lx: %d\\n\", <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#policy\">policy</a> ? <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#mode\">mode</a> : 0);", 
"}", 
"", 
"<span class=\"comment\">/* Find shared policy intersecting idx */</span>", 
"struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *", 
"<a class=\"id\" href=\"#mpol_shared_policy_lookup\">mpol_shared_policy_lookup</a>(struct <a class=\"id\" href=\"#shared_policy\">shared_policy</a> *<a class=\"id\" href=\"#sp\">sp</a>, unsigned long <a class=\"id\" href=\"#idx\">idx</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#pol\">pol</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sp_node\">sp_node</a> *<a class=\"id\" href=\"#sn\">sn</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sp\">sp</a>-><a class=\"id\" href=\"#root\">root</a>.<a class=\"id\" href=\"#rb_node\">rb_node</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#sp\">sp</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sn\">sn</a> = <a class=\"id\" href=\"#sp_lookup\">sp_lookup</a>(<a class=\"id\" href=\"#sp\">sp</a>, <a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#idx\">idx</a>+1);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sn\">sn</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mpol_get\">mpol_get</a>(<a class=\"id\" href=\"#sn\">sn</a>-><a class=\"id\" href=\"#policy\">policy</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pol\">pol</a> = <a class=\"id\" href=\"#sn\">sn</a>-><a class=\"id\" href=\"#policy\">policy</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sp\">sp</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pol\">pol</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#sp_delete\">sp_delete</a>(struct <a class=\"id\" href=\"#shared_policy\">shared_policy</a> *<a class=\"id\" href=\"#sp\">sp</a>, struct <a class=\"id\" href=\"#sp_node\">sp_node</a> *<a class=\"id\" href=\"#n\">n</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"deleting %lx-l%lx\\n\", <a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_erase\">rb_erase</a>(&amp;<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#nd\">nd</a>, &amp;<a class=\"id\" href=\"#sp\">sp</a>-><a class=\"id\" href=\"#root\">root</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mpol_put\">mpol_put</a>(<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#policy\">policy</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#sn_cache\">sn_cache</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#sp_node\">sp_node</a> *<a class=\"id\" href=\"#sp_alloc\">sp_alloc</a>(unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#pol\">pol</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sp_node\">sp_node</a> *<a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#sn_cache\">sn_cache</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#n\">n</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mpol_get\">mpol_get</a>(<a class=\"id\" href=\"#pol\">pol</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#MPOL_F_SHARED\">MPOL_F_SHARED</a>;<span class=\"ts\"/><span class=\"comment\">/* for unref */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#policy\">policy</a> = <a class=\"id\" href=\"#pol\">pol</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#n\">n</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Replace a policy range. */</span>", 
"static int <a class=\"id\" href=\"#shared_policy_replace\">shared_policy_replace</a>(struct <a class=\"id\" href=\"#shared_policy\">shared_policy</a> *<a class=\"id\" href=\"#sp\">sp</a>, unsigned long <a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#end\">end</a>, struct <a class=\"id\" href=\"#sp_node\">sp_node</a> *<a class=\"id\" href=\"#new\">new</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sp_node\">sp_node</a> *<a class=\"id\" href=\"#n\">n</a>, *<a class=\"id\" href=\"#new2\">new2</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<a class=\"id\" href=\"#restart\">restart</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#sp\">sp</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#sp_lookup\">sp_lookup</a>(<a class=\"id\" href=\"#sp\">sp</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Take care of old policies in the same range. */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#n\">n</a> && <a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#start\">start</a> &lt; <a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#rb_next\">rb_next</a>(&amp;<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#nd\">nd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#start\">start</a> >= <a class=\"id\" href=\"#start\">start</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#end\">end</a> <= <a class=\"id\" href=\"#end\">end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sp_delete\">sp_delete</a>(<a class=\"id\" href=\"#sp\">sp</a>, <a class=\"id\" href=\"#n\">n</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#end\">end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
];
xr_frag_insert('l/12/769590b74f7c251f35ed0d7998242776c70b30.xr', __xr_tmp);
