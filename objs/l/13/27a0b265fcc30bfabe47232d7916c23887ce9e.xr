var __xr_tmp = [
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#timespec_add\">timespec_add</a>(struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#lhs\">lhs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#rhs\">rhs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#ts_delta\">ts_delta</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_normalized_timespec\">set_normalized_timespec</a>(&amp;<a class=\"id\" href=\"#ts_delta\">ts_delta</a>, <a class=\"id\" href=\"#lhs\">lhs</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a> + <a class=\"id\" href=\"#rhs\">rhs</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lhs\">lhs</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> + <a class=\"id\" href=\"#rhs\">rhs</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ts_delta\">ts_delta</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * sub = lhs - rhs, in normalized form</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#timespec_sub\">timespec_sub</a>(struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#lhs\">lhs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#rhs\">rhs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#ts_delta\">ts_delta</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_normalized_timespec\">set_normalized_timespec</a>(&amp;<a class=\"id\" href=\"#ts_delta\">ts_delta</a>, <a class=\"id\" href=\"#lhs\">lhs</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a> - <a class=\"id\" href=\"#rhs\">rhs</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lhs\">lhs</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> - <a class=\"id\" href=\"#rhs\">rhs</a>.<a class=\"id\" href=\"#tv_nsec\">tv_nsec</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ts_delta\">ts_delta</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Returns true if the timespec is norm, false if denorm:</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#timespec_valid\">timespec_valid</a>(<a class=\"id\" href=\"#ts\">ts</a>) \\", 
"<span class=\"ts\"/>(((<a class=\"id\" href=\"#ts\">ts</a>)-><a class=\"id\" href=\"#tv_sec\">tv_sec</a> >= 0) && (((unsigned long) (<a class=\"id\" href=\"#ts\">ts</a>)-><a class=\"id\" href=\"#tv_nsec\">tv_nsec</a>) &lt; <a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a>))", 
"", 
"extern <a class=\"id\" href=\"#seqlock_t\">seqlock_t</a> <a class=\"id\" href=\"#xtime_lock\">xtime_lock</a>;", 
"", 
"extern void <a class=\"id\" href=\"#read_persistent_clock\">read_persistent_clock</a>(struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#ts\">ts</a>);", 
"extern void <a class=\"id\" href=\"#read_boot_clock\">read_boot_clock</a>(struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#ts\">ts</a>);", 
"extern int <a class=\"id\" href=\"#update_persistent_clock\">update_persistent_clock</a>(struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#now\">now</a>);", 
"extern int <a class=\"id\" href=\"#no_sync_cmos_clock\">no_sync_cmos_clock</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"void <a class=\"id\" href=\"#timekeeping_init\">timekeeping_init</a>(void);", 
"extern int <a class=\"id\" href=\"#timekeeping_suspended\">timekeeping_suspended</a>;", 
"", 
"unsigned long <a class=\"id\" href=\"#get_seconds\">get_seconds</a>(void);", 
"struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#current_kernel_time\">current_kernel_time</a>(void);", 
"struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#__current_kernel_time\">__current_kernel_time</a>(void); <span class=\"comment\">/* does not take xtime_lock */</span>", 
"struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#__get_wall_to_monotonic\">__get_wall_to_monotonic</a>(void); <span class=\"comment\">/* does not take xtime_lock */</span>", 
"struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#get_monotonic_coarse\">get_monotonic_coarse</a>(void);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CURRENT_TIME\">CURRENT_TIME</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#current_kernel_time\">current_kernel_time</a>())", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CURRENT_TIME_SEC\">CURRENT_TIME_SEC</a><span class=\"ts\"/>((struct <a class=\"id\" href=\"#timespec\">timespec</a>) { <a class=\"id\" href=\"#get_seconds\">get_seconds</a>(), 0 })", 
"", 
"<span class=\"comment\">/* Some architectures do not supply their own clocksource.</span>", 
"<span class=\"comment\"> * This is mainly the case in architectures that get their</span>", 
"<span class=\"comment\"> * inter-tick times by reading the counter on their interval</span>", 
"<span class=\"comment\"> * timer. Since these timers wrap every tick, they're not really</span>", 
"<span class=\"comment\"> * useful as clocksources. Wrapping them to act like one is possible</span>", 
"<span class=\"comment\"> * but not very efficient. So we provide a callout these arches</span>", 
"<span class=\"comment\"> * can implement for use with the jiffies clocksource to provide</span>", 
"<span class=\"comment\"> * finer then tick granular time.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_ARCH_USES_GETTIMEOFFSET\">CONFIG_ARCH_USES_GETTIMEOFFSET</a>", 
"extern <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#arch_gettimeoffset\">arch_gettimeoffset</a>(void);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#arch_gettimeoffset\">arch_gettimeoffset</a>(void) { return 0; }", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"extern void <a class=\"id\" href=\"#do_gettimeofday\">do_gettimeofday</a>(struct <a class=\"id\" href=\"#timeval\">timeval</a> *<a class=\"id\" href=\"#tv\">tv</a>);", 
"extern int <a class=\"id\" href=\"#do_settimeofday\">do_settimeofday</a>(struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#tv\">tv</a>);", 
"extern int <a class=\"id\" href=\"#do_sys_settimeofday\">do_sys_settimeofday</a>(struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#tv\">tv</a>, struct <a class=\"id\" href=\"#timezone\">timezone</a> *<a class=\"id\" href=\"#tz\">tz</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#do_posix_clock_monotonic_gettime\">do_posix_clock_monotonic_gettime</a>(<a class=\"id\" href=\"#ts\">ts</a>) <a class=\"id\" href=\"#ktime_get_ts\">ktime_get_ts</a>(<a class=\"id\" href=\"#ts\">ts</a>)", 
"extern long <a class=\"id\" href=\"#do_utimes\">do_utimes</a>(int <a class=\"id\" href=\"#dfd\">dfd</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#filename\">filename</a>, struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#times\">times</a>, int <a class=\"id\" href=\"#flags\">flags</a>);", 
"struct <a class=\"id\" href=\"#itimerval\">itimerval</a>;", 
"extern int <a class=\"id\" href=\"#do_setitimer\">do_setitimer</a>(int <a class=\"id\" href=\"#which\">which</a>, struct <a class=\"id\" href=\"#itimerval\">itimerval</a> *<a class=\"id\" href=\"#value\">value</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#itimerval\">itimerval</a> *<a class=\"id\" href=\"#ovalue\">ovalue</a>);", 
"extern unsigned int <a class=\"id\" href=\"#alarm_setitimer\">alarm_setitimer</a>(unsigned int <a class=\"id\" href=\"#seconds\">seconds</a>);", 
"extern int <a class=\"id\" href=\"#do_getitimer\">do_getitimer</a>(int <a class=\"id\" href=\"#which\">which</a>, struct <a class=\"id\" href=\"#itimerval\">itimerval</a> *<a class=\"id\" href=\"#value\">value</a>);", 
"extern void <a class=\"id\" href=\"#getnstimeofday\">getnstimeofday</a>(struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#tv\">tv</a>);", 
"extern void <a class=\"id\" href=\"#getrawmonotonic\">getrawmonotonic</a>(struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#ts\">ts</a>);", 
"extern void <a class=\"id\" href=\"#getboottime\">getboottime</a>(struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#ts\">ts</a>);", 
"extern void <a class=\"id\" href=\"#monotonic_to_bootbased\">monotonic_to_bootbased</a>(struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#ts\">ts</a>);", 
"", 
"extern struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#timespec_trunc\">timespec_trunc</a>(struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#t\">t</a>, unsigned <a class=\"id\" href=\"#gran\">gran</a>);", 
"extern int <a class=\"id\" href=\"#timekeeping_valid_for_hres\">timekeeping_valid_for_hres</a>(void);", 
"extern <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#timekeeping_max_deferment\">timekeeping_max_deferment</a>(void);", 
"extern void <a class=\"id\" href=\"#update_wall_time\">update_wall_time</a>(void);", 
"extern void <a class=\"id\" href=\"#timekeeping_leap_insert\">timekeeping_leap_insert</a>(int <a class=\"id\" href=\"#leapsecond\">leapsecond</a>);", 
"", 
"struct <a class=\"id\" href=\"#tms\">tms</a>;", 
"extern void <a class=\"id\" href=\"#do_sys_times\">do_sys_times</a>(struct <a class=\"id\" href=\"#tms\">tms</a> *);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Similar to the struct tm in userspace &lt;time.h&gt;, but it needs to be here so</span>", 
"<span class=\"comment\"> * that the kernel source is self contained.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#tm\">tm</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the number of seconds after the minute, normally in the range</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 0 to 59, but can be up to 60 to allow for leap seconds</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#tm_sec\">tm_sec</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* the number of minutes after the hour, in the range 0 to 59*/</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#tm_min\">tm_min</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* the number of hours past midnight, in the range 0 to 23 */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#tm_hour\">tm_hour</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* the day of the month, in the range 1 to 31 */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#tm_mday\">tm_mday</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* the number of months since January, in the range 0 to 11 */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#tm_mon\">tm_mon</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* the number of years since 1900 */</span>", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#tm_year\">tm_year</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* the number of days since Sunday, in the range 0 to 6 */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#tm_wday\">tm_wday</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* the number of days since January 1, in the range 0 to 365 */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#tm_yday\">tm_yday</a>;", 
"};", 
"", 
"void <a class=\"id\" href=\"#time_to_tm\">time_to_tm</a>(<a class=\"id\" href=\"#time_t\">time_t</a> <a class=\"id\" href=\"#totalsecs\">totalsecs</a>, int <a class=\"id\" href=\"#offset\">offset</a>, struct <a class=\"id\" href=\"#tm\">tm</a> *<a class=\"id\" href=\"#result\">result</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * timespec_to_ns - Convert timespec to nanoseconds</span>", 
"<span class=\"comment\"> * @ts:<span class=\"ts\"/><span class=\"ts\"/>pointer to the timespec variable to be converted</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the scalar nanosecond representation of the timespec</span>", 
"<span class=\"comment\"> * parameter.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#timespec_to_ns\">timespec_to_ns</a>(const struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#ts\">ts</a>)", 
"{", 
"<span class=\"ts\"/>return ((<a class=\"id\" href=\"#s64\">s64</a>) <a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#tv_sec\">tv_sec</a> * <a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a>) + <a class=\"id\" href=\"#ts\">ts</a>-><a class=\"id\" href=\"#tv_nsec\">tv_nsec</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * timeval_to_ns - Convert timeval to nanoseconds</span>", 
"<span class=\"comment\"> * @ts:<span class=\"ts\"/><span class=\"ts\"/>pointer to the timeval variable to be converted</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the scalar nanosecond representation of the timeval</span>", 
"<span class=\"comment\"> * parameter.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#timeval_to_ns\">timeval_to_ns</a>(const struct <a class=\"id\" href=\"#timeval\">timeval</a> *<a class=\"id\" href=\"#tv\">tv</a>)", 
"{", 
"<span class=\"ts\"/>return ((<a class=\"id\" href=\"#s64\">s64</a>) <a class=\"id\" href=\"#tv\">tv</a>-><a class=\"id\" href=\"#tv_sec\">tv_sec</a> * <a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tv\">tv</a>-><a class=\"id\" href=\"#tv_usec\">tv_usec</a> * <a class=\"id\" href=\"#NSEC_PER_USEC\">NSEC_PER_USEC</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ns_to_timespec - Convert nanoseconds to timespec</span>", 
"<span class=\"comment\"> * @nsec:<span class=\"ts\"/>the nanoseconds value to be converted</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the timespec representation of the nsec parameter.</span>", 
"<span class=\"comment\"> */</span>", 
"extern struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#ns_to_timespec\">ns_to_timespec</a>(const <a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#nsec\">nsec</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ns_to_timeval - Convert nanoseconds to timeval</span>", 
"<span class=\"comment\"> * @nsec:<span class=\"ts\"/>the nanoseconds value to be converted</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the timeval representation of the nsec parameter.</span>", 
"<span class=\"comment\"> */</span>", 
"extern struct <a class=\"id\" href=\"#timeval\">timeval</a> <a class=\"id\" href=\"#ns_to_timeval\">ns_to_timeval</a>(const <a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#nsec\">nsec</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * timespec_add_ns - Adds nanoseconds to a timespec</span>", 
"<span class=\"comment\"> * @a:<span class=\"ts\"/><span class=\"ts\"/>pointer to timespec to be incremented</span>", 
"<span class=\"comment\"> * @ns:<span class=\"ts\"/><span class=\"ts\"/>unsigned nanoseconds value to be added</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This must always be inlined because its used from the x86-64 vdso,</span>", 
"<span class=\"comment\"> * which cannot call other kernel functions.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#__always_inline\">__always_inline</a> void <a class=\"id\" href=\"#timespec_add_ns\">timespec_add_ns</a>(struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#ns\">ns</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#tv_sec\">tv_sec</a> += <a class=\"id\" href=\"#__iter_div_u64_rem\">__iter_div_u64_rem</a>(<a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> + <a class=\"id\" href=\"#ns\">ns</a>, <a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a>, &amp;<a class=\"id\" href=\"#ns\">ns</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#a\">a</a>-><a class=\"id\" href=\"#tv_nsec\">tv_nsec</a> = <a class=\"id\" href=\"#ns\">ns</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __KERNEL__ */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NFDBITS\">NFDBITS</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__NFDBITS\">__NFDBITS</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FD_SETSIZE\">FD_SETSIZE</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__FD_SETSIZE\">__FD_SETSIZE</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FD_SET\">FD_SET</a>(<a class=\"id\" href=\"#fd\">fd</a>,<a class=\"id\" href=\"#fdsetp\">fdsetp</a>)<span class=\"ts\"/><a class=\"id\" href=\"#__FD_SET\">__FD_SET</a>(<a class=\"id\" href=\"#fd\">fd</a>,<a class=\"id\" href=\"#fdsetp\">fdsetp</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FD_CLR\">FD_CLR</a>(<a class=\"id\" href=\"#fd\">fd</a>,<a class=\"id\" href=\"#fdsetp\">fdsetp</a>)<span class=\"ts\"/><a class=\"id\" href=\"#__FD_CLR\">__FD_CLR</a>(<a class=\"id\" href=\"#fd\">fd</a>,<a class=\"id\" href=\"#fdsetp\">fdsetp</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FD_ISSET\">FD_ISSET</a>(<a class=\"id\" href=\"#fd\">fd</a>,<a class=\"id\" href=\"#fdsetp\">fdsetp</a>)<span class=\"ts\"/><a class=\"id\" href=\"#__FD_ISSET\">__FD_ISSET</a>(<a class=\"id\" href=\"#fd\">fd</a>,<a class=\"id\" href=\"#fdsetp\">fdsetp</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FD_ZERO\">FD_ZERO</a>(<a class=\"id\" href=\"#fdsetp\">fdsetp</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__FD_ZERO\">__FD_ZERO</a>(<a class=\"id\" href=\"#fdsetp\">fdsetp</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Names of the interval timers, and structure</span>", 
"<span class=\"comment\"> * defining a timer setting:</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#ITIMER_REAL\">ITIMER_REAL</a><span class=\"ts\"/><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#ITIMER_VIRTUAL\">ITIMER_VIRTUAL</a><span class=\"ts\"/><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#ITIMER_PROF\">ITIMER_PROF</a><span class=\"ts\"/><span class=\"ts\"/>2", 
"", 
"struct <a class=\"id\" href=\"#itimerspec\">itimerspec</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#it_interval\">it_interval</a>;<span class=\"ts\"/><span class=\"comment\">/* timer period */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#it_value\">it_value</a>;<span class=\"ts\"/><span class=\"comment\">/* timer expiration */</span>", 
"};", 
"", 
"struct <a class=\"id\" href=\"#itimerval\">itimerval</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timeval\">timeval</a> <a class=\"id\" href=\"#it_interval\">it_interval</a>;<span class=\"ts\"/><span class=\"comment\">/* timer interval */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timeval\">timeval</a> <a class=\"id\" href=\"#it_value\">it_value</a>;<span class=\"ts\"/><span class=\"comment\">/* current value */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The IDs of the various system clocks (for POSIX.1b interval timers):</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CLOCK_REALTIME\">CLOCK_REALTIME</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CLOCK_MONOTONIC\">CLOCK_MONOTONIC</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CLOCK_PROCESS_CPUTIME_ID\">CLOCK_PROCESS_CPUTIME_ID</a><span class=\"ts\"/>2", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CLOCK_THREAD_CPUTIME_ID\">CLOCK_THREAD_CPUTIME_ID</a><span class=\"ts\"/><span class=\"ts\"/>3", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CLOCK_MONOTONIC_RAW\">CLOCK_MONOTONIC_RAW</a><span class=\"ts\"/><span class=\"ts\"/>4", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CLOCK_REALTIME_COARSE\">CLOCK_REALTIME_COARSE</a><span class=\"ts\"/><span class=\"ts\"/>5", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CLOCK_MONOTONIC_COARSE\">CLOCK_MONOTONIC_COARSE</a><span class=\"ts\"/><span class=\"ts\"/>6", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The IDs of various hardware clocks:</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CLOCK_SGI_CYCLE\">CLOCK_SGI_CYCLE</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>10", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_CLOCKS\">MAX_CLOCKS</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>16", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CLOCKS_MASK\">CLOCKS_MASK</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#CLOCK_REALTIME\">CLOCK_REALTIME</a> | <a class=\"id\" href=\"#CLOCK_MONOTONIC\">CLOCK_MONOTONIC</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CLOCKS_MONO\">CLOCKS_MONO</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#CLOCK_MONOTONIC\">CLOCK_MONOTONIC</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The various flags for setting POSIX.1b interval timers:</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TIMER_ABSTIME\">TIMER_ABSTIME</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0x01", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/13/27a0b265fcc30bfabe47232d7916c23887ce9e.xr', __xr_tmp);
