var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Virtual Memory Map support</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (C) 2007 sgi. Christoph Lameter.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Virtual memory maps allow VM primitives pfn_to_page, page_to_pfn,</span>", 
"<span class=\"comment\"> * virt_to_page, page_address() to be implemented as a base offset</span>", 
"<span class=\"comment\"> * calculation without memory access.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * However, virtual mappings need a page table and TLBs. Many Linux</span>", 
"<span class=\"comment\"> * architectures already map their physical space using 1-1 mappings</span>", 
"<span class=\"comment\"> * via TLBs. For those arches the virtual memmory map is essentially</span>", 
"<span class=\"comment\"> * for free if we use the same page size as the 1-1 mappings. In that</span>", 
"<span class=\"comment\"> * case the overhead consists of a few additional pages that are</span>", 
"<span class=\"comment\"> * allocated to create a view of memory for vmemmap.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The architecture is expected to provide a vmemmap_populate() function</span>", 
"<span class=\"comment\"> * to instantiate the mapping.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mmzone\">mmzone</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bootmem\">bootmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#highmem\">highmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#vmalloc\">vmalloc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#dma\">dma</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pgalloc\">pgalloc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pgtable\">pgtable</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Allocate a block of memory to be used to back the virtual memory map</span>", 
"<span class=\"comment\"> * or to back the page tables that are used to create the mapping.</span>", 
"<span class=\"comment\"> * Uses the main allocators if they are available, else bootmem.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void * <a class=\"id\" href=\"#__init_refok\">__init_refok</a> <a class=\"id\" href=\"#__earlyonly_bootmem_alloc\">__earlyonly_bootmem_alloc</a>(int <a class=\"id\" href=\"#node\">node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#align\">align</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#goal\">goal</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__alloc_bootmem_node_high\">__alloc_bootmem_node_high</a>(<a class=\"id\" href=\"#NODE_DATA\">NODE_DATA</a>(<a class=\"id\" href=\"#node\">node</a>), <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>, <a class=\"id\" href=\"#goal\">goal</a>);", 
"}", 
"", 
"static void *<a class=\"id\" href=\"#vmemmap_buf\">vmemmap_buf</a>;", 
"static void *<a class=\"id\" href=\"#vmemmap_buf_end\">vmemmap_buf_end</a>;", 
"", 
"void * <a class=\"id\" href=\"#__meminit\">__meminit</a> <a class=\"id\" href=\"#vmemmap_alloc_block\">vmemmap_alloc_block</a>(unsigned long <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* If the main allocator is up use that, fallback to bootmem. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#slab_is_available\">slab_is_available</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#node_state\">node_state</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#N_HIGH_MEMORY\">N_HIGH_MEMORY</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#alloc_pages_node\">alloc_pages_node</a>(<a class=\"id\" href=\"#node\">node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a> | <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>, <a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#size\">size</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#alloc_pages\">alloc_pages</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a> | <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#size\">size</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#__earlyonly_bootmem_alloc\">__earlyonly_bootmem_alloc</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#MAX_DMA_ADDRESS\">MAX_DMA_ADDRESS</a>));", 
"}", 
"", 
"<span class=\"comment\">/* need to make sure size is all the same during early stage */</span>", 
"void * <a class=\"id\" href=\"#__meminit\">__meminit</a> <a class=\"id\" href=\"#vmemmap_alloc_block_buf\">vmemmap_alloc_block_buf</a>(unsigned long <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#ptr\">ptr</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#vmemmap_buf\">vmemmap_buf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#vmemmap_alloc_block\">vmemmap_alloc_block</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* take the from buf */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = (void *)<a class=\"id\" href=\"#ALIGN\">ALIGN</a>((unsigned long)<a class=\"id\" href=\"#vmemmap_buf\">vmemmap_buf</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ptr\">ptr</a> + <a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#vmemmap_buf_end\">vmemmap_buf_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#vmemmap_alloc_block\">vmemmap_alloc_block</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vmemmap_buf\">vmemmap_buf</a> = <a class=\"id\" href=\"#ptr\">ptr</a> + <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ptr\">ptr</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__meminit\">__meminit</a> <a class=\"id\" href=\"#vmemmap_verify\">vmemmap_verify</a>(<a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#pte\">pte</a>, int <a class=\"id\" href=\"#node\">node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#pte_pfn\">pte_pfn</a>(*<a class=\"id\" href=\"#pte\">pte</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#actual_node\">actual_node</a> = <a class=\"id\" href=\"#early_pfn_to_nid\">early_pfn_to_nid</a>(<a class=\"id\" href=\"#pfn\">pfn</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#node_distance\">node_distance</a>(<a class=\"id\" href=\"#actual_node\">actual_node</a>, <a class=\"id\" href=\"#node\">node</a>) &gt; <a class=\"id\" href=\"#LOCAL_DISTANCE\">LOCAL_DISTANCE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"[%lx-%lx] potential offnode \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"page_structs\\n\", <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a> - 1);", 
"}", 
"", 
"<a class=\"id\" href=\"#pte_t\">pte_t</a> * <a class=\"id\" href=\"#__meminit\">__meminit</a> <a class=\"id\" href=\"#vmemmap_pte_populate\">vmemmap_pte_populate</a>(<a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#pte_offset_kernel\">pte_offset_kernel</a>(<a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pte_none\">pte_none</a>(*<a class=\"id\" href=\"#pte\">pte</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#vmemmap_alloc_block_buf\">vmemmap_alloc_block_buf</a>(<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#pfn_pte\">pfn_pte</a>(<a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#p\">p</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>, <a class=\"id\" href=\"#PAGE_KERNEL\">PAGE_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_pte_at\">set_pte_at</a>(&amp;<a class=\"id\" href=\"#init_mm\">init_mm</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#pte\">pte</a>, <a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pte\">pte</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#pmd_t\">pmd_t</a> * <a class=\"id\" href=\"#__meminit\">__meminit</a> <a class=\"id\" href=\"#vmemmap_pmd_populate\">vmemmap_pmd_populate</a>(<a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#pud\">pud</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a> = <a class=\"id\" href=\"#pmd_offset\">pmd_offset</a>(<a class=\"id\" href=\"#pud\">pud</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pmd_none\">pmd_none</a>(*<a class=\"id\" href=\"#pmd\">pmd</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#vmemmap_alloc_block\">vmemmap_alloc_block</a>(<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pmd_populate_kernel\">pmd_populate_kernel</a>(&amp;<a class=\"id\" href=\"#init_mm\">init_mm</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pmd\">pmd</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#pud_t\">pud_t</a> * <a class=\"id\" href=\"#__meminit\">__meminit</a> <a class=\"id\" href=\"#vmemmap_pud_populate\">vmemmap_pud_populate</a>(<a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#pud\">pud</a> = <a class=\"id\" href=\"#pud_offset\">pud_offset</a>(<a class=\"id\" href=\"#pgd\">pgd</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pud_none\">pud_none</a>(*<a class=\"id\" href=\"#pud\">pud</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#vmemmap_alloc_block\">vmemmap_alloc_block</a>(<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pud_populate\">pud_populate</a>(&amp;<a class=\"id\" href=\"#init_mm\">init_mm</a>, <a class=\"id\" href=\"#pud\">pud</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pud\">pud</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#pgd_t\">pgd_t</a> * <a class=\"id\" href=\"#__meminit\">__meminit</a> <a class=\"id\" href=\"#vmemmap_pgd_populate\">vmemmap_pgd_populate</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a> = <a class=\"id\" href=\"#pgd_offset_k\">pgd_offset_k</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pgd_none\">pgd_none</a>(*<a class=\"id\" href=\"#pgd\">pgd</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#vmemmap_alloc_block\">vmemmap_alloc_block</a>(<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgd_populate\">pgd_populate</a>(&amp;<a class=\"id\" href=\"#init_mm\">init_mm</a>, <a class=\"id\" href=\"#pgd\">pgd</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pgd\">pgd</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#__meminit\">__meminit</a> <a class=\"id\" href=\"#vmemmap_populate_basepages\">vmemmap_populate_basepages</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#start_page\">start_page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a> = (unsigned long)<a class=\"id\" href=\"#start_page\">start_page</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end\">end</a> = (unsigned long)(<a class=\"id\" href=\"#start_page\">start_page</a> + <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#pud\">pud</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#pte\">pte</a>;", 
"", 
"<span class=\"ts\"/>for (; <a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#end\">end</a>; <a class=\"id\" href=\"#addr\">addr</a> += <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgd\">pgd</a> = <a class=\"id\" href=\"#vmemmap_pgd_populate\">vmemmap_pgd_populate</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pgd\">pgd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pud\">pud</a> = <a class=\"id\" href=\"#vmemmap_pud_populate\">vmemmap_pud_populate</a>(<a class=\"id\" href=\"#pgd\">pgd</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pud\">pud</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pmd\">pmd</a> = <a class=\"id\" href=\"#vmemmap_pmd_populate\">vmemmap_pmd_populate</a>(<a class=\"id\" href=\"#pud\">pud</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pmd\">pmd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#vmemmap_pte_populate\">vmemmap_pte_populate</a>(<a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pte\">pte</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vmemmap_verify\">vmemmap_verify</a>(<a class=\"id\" href=\"#pte\">pte</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#page\">page</a> * <a class=\"id\" href=\"#__meminit\">__meminit</a> <a class=\"id\" href=\"#sparse_mem_map_populate\">sparse_mem_map_populate</a>(unsigned long <a class=\"id\" href=\"#pnum\">pnum</a>, int <a class=\"id\" href=\"#nid\">nid</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#pnum\">pnum</a> * <a class=\"id\" href=\"#PAGES_PER_SECTION\">PAGES_PER_SECTION</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#vmemmap_populate\">vmemmap_populate</a>(<a class=\"id\" href=\"#map\">map</a>, <a class=\"id\" href=\"#PAGES_PER_SECTION\">PAGES_PER_SECTION</a>, <a class=\"id\" href=\"#nid\">nid</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#map\">map</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#sparse_mem_maps_populate_node\">sparse_mem_maps_populate_node</a>(struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#map_map\">map_map</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#pnum_begin\">pnum_begin</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#pnum_end\">pnum_end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#map_count\">map_count</a>, int <a class=\"id\" href=\"#nodeid\">nodeid</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pnum\">pnum</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a> = sizeof(struct <a class=\"id\" href=\"#page\">page</a>) * <a class=\"id\" href=\"#PAGES_PER_SECTION\">PAGES_PER_SECTION</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#vmemmap_buf_start\">vmemmap_buf_start</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#PMD_SIZE\">PMD_SIZE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vmemmap_buf_start\">vmemmap_buf_start</a> = <a class=\"id\" href=\"#__earlyonly_bootmem_alloc\">__earlyonly_bootmem_alloc</a>(<a class=\"id\" href=\"#nodeid\">nodeid</a>, <a class=\"id\" href=\"#size\">size</a> * <a class=\"id\" href=\"#map_count\">map_count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#PMD_SIZE\">PMD_SIZE</a>, <a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#MAX_DMA_ADDRESS\">MAX_DMA_ADDRESS</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vmemmap_buf_start\">vmemmap_buf_start</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vmemmap_buf\">vmemmap_buf</a> = <a class=\"id\" href=\"#vmemmap_buf_start\">vmemmap_buf_start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vmemmap_buf_end\">vmemmap_buf_end</a> = <a class=\"id\" href=\"#vmemmap_buf_start\">vmemmap_buf_start</a> + <a class=\"id\" href=\"#size\">size</a> * <a class=\"id\" href=\"#map_count\">map_count</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pnum\">pnum</a> = <a class=\"id\" href=\"#pnum_begin\">pnum_begin</a>; <a class=\"id\" href=\"#pnum\">pnum</a> &lt; <a class=\"id\" href=\"#pnum_end\">pnum_end</a>; <a class=\"id\" href=\"#pnum\">pnum</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mem_section\">mem_section</a> *<a class=\"id\" href=\"#ms\">ms</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#present_section_nr\">present_section_nr</a>(<a class=\"id\" href=\"#pnum\">pnum</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map_map\">map_map</a>[<a class=\"id\" href=\"#pnum\">pnum</a>] = <a class=\"id\" href=\"#sparse_mem_map_populate\">sparse_mem_map_populate</a>(<a class=\"id\" href=\"#pnum\">pnum</a>, <a class=\"id\" href=\"#nodeid\">nodeid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#map_map\">map_map</a>[<a class=\"id\" href=\"#pnum\">pnum</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ms\">ms</a> = <a class=\"id\" href=\"#__nr_to_section\">__nr_to_section</a>(<a class=\"id\" href=\"#pnum\">pnum</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: sparsemem memory map backing failed \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"some memory will not be available.\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ms\">ms</a>-><a class=\"id\" href=\"#section_mem_map\">section_mem_map</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vmemmap_buf_start\">vmemmap_buf_start</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* need to free left buf */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NO_BOOTMEM\">CONFIG_NO_BOOTMEM</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_early\">free_early</a>(<a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#vmemmap_buf_start\">vmemmap_buf_start</a>), <a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#vmemmap_buf_end\">vmemmap_buf_end</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vmemmap_buf_start\">vmemmap_buf_start</a> &lt; <a class=\"id\" href=\"#vmemmap_buf\">vmemmap_buf</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#name\">name</a>[15];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#name\">name</a>, sizeof(<a class=\"id\" href=\"#name\">name</a>), \"MEMMAP %d\", <a class=\"id\" href=\"#nodeid\">nodeid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reserve_early_without_check\">reserve_early_without_check</a>(<a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#vmemmap_buf_start\">vmemmap_buf_start</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#vmemmap_buf\">vmemmap_buf</a>), <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"#else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_bootmem\">free_bootmem</a>(<a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#vmemmap_buf\">vmemmap_buf</a>), <a class=\"id\" href=\"#vmemmap_buf_end\">vmemmap_buf_end</a> - <a class=\"id\" href=\"#vmemmap_buf\">vmemmap_buf</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vmemmap_buf\">vmemmap_buf</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vmemmap_buf_end\">vmemmap_buf_end</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"}", 
];
xr_frag_insert('l/13/69ceb159587e5aaefb07d54c91fc3e7cc46ca5.xr', __xr_tmp);
