var __xr_tmp = [
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"exit\");", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * int jbd2_journal_get_write_access() - notify intent to modify a buffer for metadata (not data) update.</span>", 
"<span class=\"comment\"> * @handle: transaction to add buffer modifications to</span>", 
"<span class=\"comment\"> * @bh:     bh to be used for metadata writes</span>", 
"<span class=\"comment\"> * @credits: variable that will receive credits for the buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns an error code or 0 on success.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In full data journalling mode the buffer may be of type BJ_AsyncData,</span>", 
"<span class=\"comment\"> * because we're write()ing a buffer which is also part of a shared mapping.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"int <a class=\"id\" href=\"#jbd2_journal_get_write_access\">jbd2_journal_get_write_access</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jh\">jh</a> = <a class=\"id\" href=\"#jbd2_journal_add_journal_head\">jbd2_journal_add_journal_head</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We do not want to get caught playing with fields which the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * log thread also manipulates.  Make sure that the buffer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * completes any outstanding IO before proceeding. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#do_get_write_access\">do_get_write_access</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#jh\">jh</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd2_journal_put_journal_head\">jbd2_journal_put_journal_head</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * When the user wants to journal a newly created buffer_head</span>", 
"<span class=\"comment\"> * (ie. getblk() returned a new buffer and we are going to populate it</span>", 
"<span class=\"comment\"> * manually rather than reading off disk), then we need to keep the</span>", 
"<span class=\"comment\"> * buffer_head locked until it has been completely filled with new</span>", 
"<span class=\"comment\"> * data.  In this case, we should be able to make the assertion that</span>", 
"<span class=\"comment\"> * the bh is not already part of an existing transaction.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The buffer should already be locked by the caller by this point.</span>", 
"<span class=\"comment\"> * There is no lock ranking violation: it was a newly created,</span>", 
"<span class=\"comment\"> * unlocked buffer beforehand. */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * int jbd2_journal_get_create_access () - notify intent to use newly created bh</span>", 
"<span class=\"comment\"> * @handle: transaction to new buffer to</span>", 
"<span class=\"comment\"> * @bh: new buffer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Call this if you create a new bh.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#jbd2_journal_get_create_access\">jbd2_journal_get_create_access</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#transaction_t\">transaction_t</a> *<a class=\"id\" href=\"#transaction\">transaction</a> = <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_transaction\">h_transaction</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a> = <a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_journal\">t_journal</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jh\">jh</a> = <a class=\"id\" href=\"#jbd2_journal_add_journal_head\">jbd2_journal_add_journal_head</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_debug\">jbd_debug</a>(5, \"journal_head %p\\n\", <a class=\"id\" href=\"#jh\">jh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EROFS\">EROFS</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_handle_aborted\">is_handle_aborted</a>(<a class=\"id\" href=\"#handle\">handle</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"entry\");", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The buffer may already belong to this transaction due to pre-zeroing</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in the filesystem's new_block code.  It may also be on the previous,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * committing transaction's lists, but it HAS to be in Forget state in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that case: the transaction must have deleted the buffer for it to be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reused here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_lock_bh_state\">jbd_lock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> == <a class=\"id\" href=\"#transaction\">transaction</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> == <a class=\"id\" href=\"#NULL\">NULL</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> == <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_committing_transaction\">j_committing_transaction</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_jlist\">b_jlist</a> == <a class=\"id\" href=\"#BJ_Forget\">BJ_Forget</a>)));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_next_transaction\">b_next_transaction</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#buffer_locked\">buffer_locked</a>(<a class=\"id\" href=\"#jh2bh\">jh2bh</a>(<a class=\"id\" href=\"#jh\">jh</a>)));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Previous jbd2_journal_forget() could have left the buffer</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * with jbddirty bit set because it was being committed. When</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the commit finished, we've filed the buffer for</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * checkpointing and marked it dirty. Now we are reallocating</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the buffer so the transaction freeing it must have</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * committed and so it's safe to clear the dirty bit.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_dirty\">clear_buffer_dirty</a>(<a class=\"id\" href=\"#jh2bh\">jh2bh</a>(<a class=\"id\" href=\"#jh\">jh</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> = <a class=\"id\" href=\"#transaction\">transaction</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* first access by this transaction */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_modified\">b_modified</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"file as BJ_Reserved\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__jbd2_journal_file_buffer\">__jbd2_journal_file_buffer</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#transaction\">transaction</a>, <a class=\"id\" href=\"#BJ_Reserved\">BJ_Reserved</a>);", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> == <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_committing_transaction\">j_committing_transaction</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* first access by this transaction */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_modified\">b_modified</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"set next transaction\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_next_transaction\">b_next_transaction</a> = <a class=\"id\" href=\"#transaction\">transaction</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_unlock_bh_state\">jbd_unlock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * akpm: I added this.  ext3_alloc_branch can pick up new indirect</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * blocks which contain freed but then revoked metadata.  We need</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to cancel the revoke in case we end up freeing it yet again</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and the reallocating as data - this would cause a second revoke,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * which hits an assertion error.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"cancelling revoke\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd2_journal_cancel_revoke\">jbd2_journal_cancel_revoke</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#jh\">jh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd2_journal_put_journal_head\">jbd2_journal_put_journal_head</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * int jbd2_journal_get_undo_access() -  Notify intent to modify metadata with</span>", 
"<span class=\"comment\"> *     non-rewindable consequences</span>", 
"<span class=\"comment\"> * @handle: transaction</span>", 
"<span class=\"comment\"> * @bh: buffer to undo</span>", 
"<span class=\"comment\"> * @credits: store the number of taken credits here (if not NULL)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Sometimes there is a need to distinguish between metadata which has</span>", 
"<span class=\"comment\"> * been committed to disk and that which has not.  The ext3fs code uses</span>", 
"<span class=\"comment\"> * this for freeing and allocating space, we have to make sure that we</span>", 
"<span class=\"comment\"> * do not reuse freed space until the deallocation has been committed,</span>", 
"<span class=\"comment\"> * since if we overwrote that space we would make the delete</span>", 
"<span class=\"comment\"> * un-rewindable in case of a crash.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * To deal with that, jbd2_journal_get_undo_access requests write access to a</span>", 
"<span class=\"comment\"> * buffer for parts of non-rewindable operations such as delete</span>", 
"<span class=\"comment\"> * operations on the bitmaps.  The journaling code must keep a copy of</span>", 
"<span class=\"comment\"> * the buffer's contents prior to the undo_access call until such time</span>", 
"<span class=\"comment\"> * as we know that the buffer has definitely been committed to disk.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We never need to know which transaction the committed data is part</span>", 
"<span class=\"comment\"> * of, buffers touched here are guaranteed to be dirtied later and so</span>", 
"<span class=\"comment\"> * will be committed to a new transaction in due course, at which point</span>", 
"<span class=\"comment\"> * we can discard the old committed data pointer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns error number or 0 on success.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#jbd2_journal_get_undo_access\">jbd2_journal_get_undo_access</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jh\">jh</a> = <a class=\"id\" href=\"#jbd2_journal_add_journal_head\">jbd2_journal_add_journal_head</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#committed_data\">committed_data</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"entry\");", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Do this first --- it can drop the journal lock, so we want to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * make sure that obtaining the committed_data is done</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * atomically wrt. completion of any outstanding commits.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#do_get_write_access\">do_get_write_access</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#jh\">jh</a>, 1);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<a class=\"id\" href=\"#repeat\">repeat</a>:", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_committed_data\">b_committed_data</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#committed_data\">committed_data</a> = <a class=\"id\" href=\"#jbd2_alloc\">jbd2_alloc</a>(<a class=\"id\" href=\"#jh2bh\">jh2bh</a>(<a class=\"id\" href=\"#jh\">jh</a>)-><a class=\"id\" href=\"#b_size\">b_size</a>, <a class=\"id\" href=\"#GFP_NOFS\">GFP_NOFS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#committed_data\">committed_data</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a> \"%s: No memory for committed data\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__func__\">__func__</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_lock_bh_state\">jbd_lock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_committed_data\">b_committed_data</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Copy out the current buffer contents into the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * preserved, committed copy. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"generate b_committed data\");", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#committed_data\">committed_data</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_unlock_bh_state\">jbd_unlock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#repeat\">repeat</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_committed_data\">b_committed_data</a> = <a class=\"id\" href=\"#committed_data\">committed_data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#committed_data\">committed_data</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_committed_data\">b_committed_data</a>, <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>, <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_size\">b_size</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_unlock_bh_state\">jbd_unlock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd2_journal_put_journal_head\">jbd2_journal_put_journal_head</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#committed_data\">committed_data</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd2_free\">jbd2_free</a>(<a class=\"id\" href=\"#committed_data\">committed_data</a>, <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_size\">b_size</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * void jbd2_journal_set_triggers() - Add triggers for commit writeout</span>", 
"<span class=\"comment\"> * @bh: buffer to trigger on</span>", 
"<span class=\"comment\"> * @type: struct jbd2_buffer_trigger_type containing the trigger(s).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Set any triggers on this journal_head.  This is always safe, because</span>", 
"<span class=\"comment\"> * triggers for a committing buffer will be saved off, and triggers for</span>", 
"<span class=\"comment\"> * a running transaction will match the buffer in that transaction.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Call with NULL to clear the triggers.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#jbd2_journal_set_triggers\">jbd2_journal_set_triggers</a>(struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#jbd2_buffer_trigger_type\">jbd2_buffer_trigger_type</a> *<a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jh\">jh</a> = <a class=\"id\" href=\"#bh2jh\">bh2jh</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_triggers\">b_triggers</a> = <a class=\"id\" href=\"#type\">type</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#jbd2_buffer_frozen_trigger\">jbd2_buffer_frozen_trigger</a>(struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jh\">jh</a>, void *<a class=\"id\" href=\"#mapped_data\">mapped_data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#jbd2_buffer_trigger_type\">jbd2_buffer_trigger_type</a> *<a class=\"id\" href=\"#triggers\">triggers</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#jh2bh\">jh2bh</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#triggers\">triggers</a> || !<a class=\"id\" href=\"#triggers\">triggers</a>-><a class=\"id\" href=\"#t_frozen\">t_frozen</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#triggers\">triggers</a>-><a class=\"id\" href=\"#t_frozen\">t_frozen</a>(<a class=\"id\" href=\"#triggers\">triggers</a>, <a class=\"id\" href=\"#bh\">bh</a>, <a class=\"id\" href=\"#mapped_data\">mapped_data</a>, <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_size\">b_size</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#jbd2_buffer_abort_trigger\">jbd2_buffer_abort_trigger</a>(struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jh\">jh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#jbd2_buffer_trigger_type\">jbd2_buffer_trigger_type</a> *<a class=\"id\" href=\"#triggers\">triggers</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#triggers\">triggers</a> || !<a class=\"id\" href=\"#triggers\">triggers</a>-><a class=\"id\" href=\"#t_abort\">t_abort</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#triggers\">triggers</a>-><a class=\"id\" href=\"#t_abort\">t_abort</a>(<a class=\"id\" href=\"#triggers\">triggers</a>, <a class=\"id\" href=\"#jh2bh\">jh2bh</a>(<a class=\"id\" href=\"#jh\">jh</a>));", 
"}", 
"", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * int jbd2_journal_dirty_metadata() -  mark a buffer as containing dirty metadata</span>", 
"<span class=\"comment\"> * @handle: transaction to add buffer to.</span>", 
"<span class=\"comment\"> * @bh: buffer to mark</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * mark dirty metadata which needs to be journaled as part of the current</span>", 
"<span class=\"comment\"> * transaction.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The buffer is placed on the transaction's metadata list and is marked</span>", 
"<span class=\"comment\"> * as belonging to the transaction.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns error number or 0 on success.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Special care needs to be taken if the buffer already belongs to the</span>", 
"<span class=\"comment\"> * current committing transaction (in which case we should have frozen</span>", 
"<span class=\"comment\"> * data present for that commit).  In that case, we don't relink the</span>", 
"<span class=\"comment\"> * buffer: that only gets done when the old transaction finally</span>", 
"<span class=\"comment\"> * completes its commit.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#jbd2_journal_dirty_metadata\">jbd2_journal_dirty_metadata</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#transaction_t\">transaction_t</a> *<a class=\"id\" href=\"#transaction\">transaction</a> = <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_transaction\">h_transaction</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a> = <a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_journal\">t_journal</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jh\">jh</a> = <a class=\"id\" href=\"#bh2jh\">bh2jh</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_debug\">jbd_debug</a>(5, \"journal_head %p\\n\", <a class=\"id\" href=\"#jh\">jh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"entry\");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_handle_aborted\">is_handle_aborted</a>(<a class=\"id\" href=\"#handle\">handle</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_lock_bh_state\">jbd_lock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_modified\">b_modified</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This buffer's got modified and becoming part</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * of the transaction. This needs to be done</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * once a transaction -bzzz</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_modified\">b_modified</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_buffer_credits\">h_buffer_credits</a> &gt; 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_buffer_credits\">h_buffer_credits</a>--;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * fastpath, to avoid expensive locking.  If this buffer is already</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * on the running transaction's metadata list there is nothing to do.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Nobody can take it off again because there is a handle open.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * I _think_ we're OK here with SMP barriers - a mistaken decision will</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * result in this test being false, so we go in and take the locks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> == <a class=\"id\" href=\"#transaction\">transaction</a> && <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_jlist\">b_jlist</a> == <a class=\"id\" href=\"#BJ_Metadata\">BJ_Metadata</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"fastpath\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> ==", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_running_transaction\">j_running_transaction</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock_bh\">out_unlock_bh</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_jbddirty\">set_buffer_jbddirty</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Metadata already on the current transaction list doesn't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * need to be filed.  Metadata on another transaction's list must</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be committing, and will be refiled once the commit completes:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * leave it alone for now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> != <a class=\"id\" href=\"#transaction\">transaction</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"already on other transaction\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> ==", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_committing_transaction\">j_committing_transaction</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_next_transaction\">b_next_transaction</a> == <a class=\"id\" href=\"#transaction\">transaction</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* And this case is illegal: we can't reuse another</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * transaction's data buffer, ever. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock_bh\">out_unlock_bh</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* That test should have eliminated the following case: */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_frozen_data\">b_frozen_data</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"file as BJ_Metadata\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__jbd2_journal_file_buffer\">__jbd2_journal_file_buffer</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_transaction\">h_transaction</a>, <a class=\"id\" href=\"#BJ_Metadata\">BJ_Metadata</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"<a class=\"id\" href=\"#out_unlock_bh\">out_unlock_bh</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_unlock_bh_state\">jbd_unlock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"exit\");", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * jbd2_journal_release_buffer: undo a get_write_access without any buffer</span>", 
"<span class=\"comment\"> * updates, if the update decided in the end that it didn't need access.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"void", 
"<a class=\"id\" href=\"#jbd2_journal_release_buffer\">jbd2_journal_release_buffer</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh\">bh</a>, \"entry\");", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * void jbd2_journal_forget() - bforget() for potentially-journaled buffers.</span>", 
"<span class=\"comment\"> * @handle: transaction handle</span>", 
"<span class=\"comment\"> * @bh:     bh to 'forget'</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We can only do the bforget if there are no commits pending against the</span>", 
"<span class=\"comment\"> * buffer.  If the buffer is dirty in the current running transaction we</span>", 
"<span class=\"comment\"> * can safely unlink it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * bh may not be a journalled buffer at all - it may be a non-JBD</span>", 
"<span class=\"comment\"> * buffer which came off the hashtable.  Check for this.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Decrements bh-&gt;b_count by one.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Allow this call even if the handle has aborted --- it may be part of</span>", 
"<span class=\"comment\"> * the caller's cleanup after an abort.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#jbd2_journal_forget\">jbd2_journal_forget</a> (<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#transaction_t\">transaction_t</a> *<a class=\"id\" href=\"#transaction\">transaction</a> = <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_transaction\">h_transaction</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a> = <a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_journal\">t_journal</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jh\">jh</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#drop_reserve\">drop_reserve</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#was_modified\">was_modified</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh\">bh</a>, \"entry\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_lock_bh_state\">jbd_lock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_jbd\">buffer_jbd</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#not_jbd\">not_jbd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a> = <a class=\"id\" href=\"#bh2jh\">bh2jh</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Critical error: attempting to delete a bitmap buffer, maybe?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Don't do any jbd operations, and return an error. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#J_EXPECT_JH\">J_EXPECT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, !<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_committed_data\">b_committed_data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"inconsistent data on disk\")) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#not_jbd\">not_jbd</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* keep track of wether or not this transaction modified us */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#was_modified\">was_modified</a> = <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_modified\">b_modified</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The buffer's going from the transaction, we must drop</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * all references -bzzz</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_modified\">b_modified</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> == <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_transaction\">h_transaction</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, !<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_frozen_data\">b_frozen_data</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If we are forgetting a buffer which is already part</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * of this transaction, then we can just drop it from</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the transaction immediately. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_dirty\">clear_buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_jbddirty\">clear_buffer_jbddirty</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"belongs to current transaction: unfile\");", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we only want to drop a reference if this transaction</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * modified the buffer</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#was_modified\">was_modified</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drop_reserve\">drop_reserve</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We are no longer going to journal this buffer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * However, the commit of this transaction is still</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * important to the buffer: the delete that we are now</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * processing might obsolete an old log entry, so by</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * committing, we can satisfy the buffer's checkpoint.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * So, if we have a checkpoint on the buffer, we should</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * now refile the buffer on our BJ_Forget list so that</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we know to remove the checkpoint after we commit.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_cp_transaction\">b_cp_transaction</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__jbd2_journal_temp_unlink_buffer\">__jbd2_journal_temp_unlink_buffer</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__jbd2_journal_file_buffer\">__jbd2_journal_file_buffer</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#transaction\">transaction</a>, <a class=\"id\" href=\"#BJ_Forget\">BJ_Forget</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__jbd2_journal_unfile_buffer\">__jbd2_journal_unfile_buffer</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd2_journal_remove_journal_head\">jbd2_journal_remove_journal_head</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__brelse\">__brelse</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_jbd\">buffer_jbd</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_unlock_bh_state\">jbd_unlock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__bforget\">__bforget</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#drop\">drop</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> ==", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_committing_transaction\">j_committing_transaction</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* However, if the buffer is still owned by a prior</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * (committing) transaction, we can't drop it yet... */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"belongs to older transaction\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* ... but we CAN drop it from the new transaction if we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * have also modified it since the original commit. */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_next_transaction\">b_next_transaction</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT\">J_ASSERT</a>(<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_next_transaction\">b_next_transaction</a> == <a class=\"id\" href=\"#transaction\">transaction</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_next_transaction\">b_next_transaction</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * only drop a reference if this transaction modified</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the buffer</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#was_modified\">was_modified</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drop_reserve\">drop_reserve</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#not_jbd\">not_jbd</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_unlock_bh_state\">jbd_unlock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__brelse\">__brelse</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<a class=\"id\" href=\"#drop\">drop</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#drop_reserve\">drop_reserve</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* no need to reserve log space for this block -bzzz */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_buffer_credits\">h_buffer_credits</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * int jbd2_journal_stop() - complete a transaction</span>", 
"<span class=\"comment\"> * @handle: tranaction to complete.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * All done for a particular handle.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * There is not much action needed here.  We just return any remaining</span>", 
"<span class=\"comment\"> * buffer credits to the transaction and remove the handle.  The only</span>", 
"<span class=\"comment\"> * complication is that we need to start a commit operation if the</span>", 
"<span class=\"comment\"> * filesystem is marked for synchronous update.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * jbd2_journal_stop itself will not usually return an error, but it may</span>", 
"<span class=\"comment\"> * do so in unusual circumstances.  In particular, expect it to</span>", 
"<span class=\"comment\"> * return -EIO if a jbd2_journal_abort has been executed since the</span>", 
"<span class=\"comment\"> * transaction began.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#jbd2_journal_stop\">jbd2_journal_stop</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#transaction_t\">transaction_t</a> *<a class=\"id\" href=\"#transaction\">transaction</a> = <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_transaction\">h_transaction</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a> = <a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_journal\">t_journal</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>, <a class=\"id\" href=\"#wait_for_commit\">wait_for_commit</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tid_t\">tid_t</a> <a class=\"id\" href=\"#tid\">tid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pid\">pid</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT\">J_ASSERT</a>(<a class=\"id\" href=\"#journal_current_handle\">journal_current_handle</a>() == <a class=\"id\" href=\"#handle\">handle</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_handle_aborted\">is_handle_aborted</a>(<a class=\"id\" href=\"#handle\">handle</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT\">J_ASSERT</a>(<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_updates\">t_updates</a>) &gt; 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (--<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_ref\">h_ref</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_debug\">jbd_debug</a>(4, \"h_ref %d -> %d\\n\", <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_ref\">h_ref</a> + 1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_ref\">h_ref</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_debug\">jbd_debug</a>(4, \"Handle %p going down\\n\", <a class=\"id\" href=\"#handle\">handle</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Implement synchronous transaction batching.  If the handle</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * was synchronous, don't force a commit immediately.  Let's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * yield and let another thread piggyback onto this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * transaction.  Keep doing that while new threads continue to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * arrive.  It doesn't cost much - we're about to run a commit</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and sleep on IO anyway.  Speeds up many-threaded, many-dir</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * operations by 30x or more...</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We try and optimize the sleep time against what the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * underlying disk can do, instead of having a static sleep</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * time.  This is useful for the case where our storage is so</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * fast that it is more optimal to go ahead and force a flush</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and wait for the transaction to be committed than it is to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * wait for an arbitrary amount of time for new writers to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * join the transaction.  We achieve this by measuring how</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * long it takes to commit a transaction, and compare it with</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * how long this transaction has been running, and if run time</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * &lt; commit time then we sleep for the delta and commit.  This</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * greatly helps super fast disks that would see slowdowns as</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * more threads started doing fsyncs.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * But don't do this if this process was the most recent one</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to perform a synchronous write.  We do this to detect the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * case where a single process is doing a stream of sync</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * writes.  No point in waiting for joiners in that case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_sync\">h_sync</a> && <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_last_sync_writer\">j_last_sync_writer</a> != <a class=\"id\" href=\"#pid\">pid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#commit_time\">commit_time</a>, <a class=\"id\" href=\"#trans_time\">trans_time</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_last_sync_writer\">j_last_sync_writer</a> = <a class=\"id\" href=\"#pid\">pid</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_state_lock\">j_state_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#commit_time\">commit_time</a> = <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_average_commit_time\">j_average_commit_time</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_state_lock\">j_state_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trans_time\">trans_time</a> = <a class=\"id\" href=\"#ktime_to_ns\">ktime_to_ns</a>(<a class=\"id\" href=\"#ktime_sub\">ktime_sub</a>(<a class=\"id\" href=\"#ktime_get\">ktime_get</a>(),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_start_time\">t_start_time</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#commit_time\">commit_time</a> = <a class=\"id\" href=\"#max_t\">max_t</a>(<a class=\"id\" href=\"#u64\">u64</a>, <a class=\"id\" href=\"#commit_time\">commit_time</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    1000*<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_min_batch_time\">j_min_batch_time</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#commit_time\">commit_time</a> = <a class=\"id\" href=\"#min_t\">min_t</a>(<a class=\"id\" href=\"#u64\">u64</a>, <a class=\"id\" href=\"#commit_time\">commit_time</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    1000*<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_max_batch_time\">j_max_batch_time</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#trans_time\">trans_time</a> &lt; <a class=\"id\" href=\"#commit_time\">commit_time</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ktime_t\">ktime_t</a> <a class=\"id\" href=\"#expires\">expires</a> = <a class=\"id\" href=\"#ktime_add_ns\">ktime_add_ns</a>(<a class=\"id\" href=\"#ktime_get\">ktime_get</a>(),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#commit_time\">commit_time</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_current_state\">set_current_state</a>(<a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule_hrtimeout\">schedule_hrtimeout</a>(&amp;<a class=\"id\" href=\"#expires\">expires</a>, <a class=\"id\" href=\"#HRTIMER_MODE_ABS\">HRTIMER_MODE_ABS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_sync\">h_sync</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_synchronous_commit\">t_synchronous_commit</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#journal_info\">journal_info</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_sub\">atomic_sub</a>(<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_buffer_credits\">h_buffer_credits</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   &amp;<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_outstanding_credits\">t_outstanding_credits</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the handle is marked SYNC, we need to set another commit</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * going!  We also want to force a commit if the current</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * transaction is occupying too much of the log, or if the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * transaction is too old now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_sync\">h_sync</a> ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_outstanding_credits\">t_outstanding_credits</a>) &gt;", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_max_transaction_buffers\">j_max_transaction_buffers</a>) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#time_after_eq\">time_after_eq</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_expires\">t_expires</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Do this even for aborted journals: an abort still</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * completes the commit thread, it just doesn't write</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * anything to disk. */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_debug\">jbd_debug</a>(2, \"transaction too old, requesting commit for \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"handle %p\\n\", <a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This is non-blocking */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd2_log_start_commit\">jbd2_log_start_commit</a>(<a class=\"id\" href=\"#journal\">journal</a>, <a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_tid\">t_tid</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Special case: JBD2_SYNC synchronous updates require us</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to wait for the commit to complete.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_sync\">h_sync</a> && !(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PF_MEMALLOC\">PF_MEMALLOC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_for_commit\">wait_for_commit</a> = 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Once we drop t_updates, if it goes to zero the transaction</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * could start commiting on us and eventually disappear.  So</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * once we do this, we must not dereference transaction</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pointer again.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tid\">tid</a> = <a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_tid\">t_tid</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_updates\">t_updates</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up\">wake_up</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_wait_updates\">j_wait_updates</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_barrier_count\">j_barrier_count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up\">wake_up</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_wait_transaction_locked\">j_wait_transaction_locked</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#wait_for_commit\">wait_for_commit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#jbd2_log_wait_commit\">jbd2_log_wait_commit</a>(<a class=\"id\" href=\"#journal\">journal</a>, <a class=\"id\" href=\"#tid\">tid</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_map_release\">lock_map_release</a>(&amp;<a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_lockdep_map\">h_lockdep_map</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd2_free_handle\">jbd2_free_handle</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * int jbd2_journal_force_commit() - force any uncommitted transactions</span>", 
"<span class=\"comment\"> * @journal: journal to force</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For synchronous operations: force any uncommitted transactions</span>", 
"<span class=\"comment\"> * to disk.  May seem kludgy, but it reuses all the handle batching</span>", 
"<span class=\"comment\"> * code in a very simple manner.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#jbd2_journal_force_commit\">jbd2_journal_force_commit</a>(<a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a> = <a class=\"id\" href=\"#jbd2_journal_start\">jbd2_journal_start</a>(<a class=\"id\" href=\"#journal\">journal</a>, 1);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#handle\">handle</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_sync\">h_sync</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#jbd2_journal_stop\">jbd2_journal_stop</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * List management code snippets: various functions for manipulating the</span>", 
"<span class=\"comment\"> * transaction buffer lists.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Append a buffer to a transaction list, given the transaction's list head</span>", 
"<span class=\"comment\"> * pointer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * j_list_lock is held.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * jbd_lock_bh_state(jh2bh(jh)) is held.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#__blist_add_buffer\">__blist_add_buffer</a>(struct <a class=\"id\" href=\"#journal_head\">journal_head</a> **<a class=\"id\" href=\"#list\">list</a>, struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jh\">jh</a>)", 
"{", 
"<span class=\"ts\"/>if (!*<a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_tnext\">b_tnext</a> = <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_tprev\">b_tprev</a> = <a class=\"id\" href=\"#jh\">jh</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#jh\">jh</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Insert at the tail of the list to preserve order */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#first\">first</a> = *<a class=\"id\" href=\"#list\">list</a>, *<a class=\"id\" href=\"#last\">last</a> = <a class=\"id\" href=\"#first\">first</a>-><a class=\"id\" href=\"#b_tprev\">b_tprev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_tprev\">b_tprev</a> = <a class=\"id\" href=\"#last\">last</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_tnext\">b_tnext</a> = <a class=\"id\" href=\"#first\">first</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last\">last</a>-><a class=\"id\" href=\"#b_tnext\">b_tnext</a> = <a class=\"id\" href=\"#first\">first</a>-><a class=\"id\" href=\"#b_tprev\">b_tprev</a> = <a class=\"id\" href=\"#jh\">jh</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Remove a buffer from a transaction list, given the transaction's list</span>", 
"<span class=\"comment\"> * head pointer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called with j_list_lock held, and the journal may not be locked.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * jbd_lock_bh_state(jh2bh(jh)) is held.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#__blist_del_buffer\">__blist_del_buffer</a>(struct <a class=\"id\" href=\"#journal_head\">journal_head</a> **<a class=\"id\" href=\"#list\">list</a>, struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jh\">jh</a>)", 
"{", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#list\">list</a> == <a class=\"id\" href=\"#jh\">jh</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_tnext\">b_tnext</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#list\">list</a> == <a class=\"id\" href=\"#jh\">jh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_tprev\">b_tprev</a>-><a class=\"id\" href=\"#b_tnext\">b_tnext</a> = <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_tnext\">b_tnext</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_tnext\">b_tnext</a>-><a class=\"id\" href=\"#b_tprev\">b_tprev</a> = <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_tprev\">b_tprev</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Remove a buffer from the appropriate transaction list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that this function can *change* the value of</span>", 
"<span class=\"comment\"> * bh-&gt;b_transaction-&gt;t_buffers, t_forget, t_iobuf_list, t_shadow_list,</span>", 
"<span class=\"comment\"> * t_log_list or t_reserved_list.  If the caller is holding onto a copy of one</span>", 
"<span class=\"comment\"> * of these pointers, it could go bad.  Generally the caller needs to re-read</span>", 
"<span class=\"comment\"> * the pointer from the transaction_t.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called under j_list_lock.  The journal may not be locked.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__jbd2_journal_temp_unlink_buffer\">__jbd2_journal_temp_unlink_buffer</a>(struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jh\">jh</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#journal_head\">journal_head</a> **<a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#transaction_t\">transaction_t</a> *<a class=\"id\" href=\"#transaction\">transaction</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#jh2bh\">jh2bh</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#jbd_is_locked_bh_state\">jbd_is_locked_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#transaction\">transaction</a> = <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#transaction\">transaction</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#assert_spin_locked\">assert_spin_locked</a>(&amp;<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_journal\">t_journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_jlist\">b_jlist</a> &lt; <a class=\"id\" href=\"#BJ_Types\">BJ_Types</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_jlist\">b_jlist</a> != <a class=\"id\" href=\"#BJ_None\">BJ_None</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#transaction\">transaction</a> != <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_jlist\">b_jlist</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#BJ_None\">BJ_None</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#BJ_Metadata\">BJ_Metadata</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_nr_buffers\">t_nr_buffers</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_nr_buffers\">t_nr_buffers</a> >= 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = &amp;<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_buffers\">t_buffers</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#BJ_Forget\">BJ_Forget</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = &amp;<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_forget\">t_forget</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#BJ_IO\">BJ_IO</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = &amp;<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_iobuf_list\">t_iobuf_list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#BJ_Shadow\">BJ_Shadow</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = &amp;<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_shadow_list\">t_shadow_list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#BJ_LogCtl\">BJ_LogCtl</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = &amp;<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_log_list\">t_log_list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#BJ_Reserved\">BJ_Reserved</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = &amp;<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_reserved_list\">t_reserved_list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__blist_del_buffer\">__blist_del_buffer</a>(<a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#jh\">jh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_jlist\">b_jlist</a> = <a class=\"id\" href=\"#BJ_None\">BJ_None</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_clear_buffer_jbddirty\">test_clear_buffer_jbddirty</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mark_buffer_dirty\">mark_buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>);<span class=\"ts\"/><span class=\"comment\">/* Expose it to the VM */</span>", 
"}", 
"", 
"void <a class=\"id\" href=\"#__jbd2_journal_unfile_buffer\">__jbd2_journal_unfile_buffer</a>(struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jh\">jh</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__jbd2_journal_temp_unlink_buffer\">__jbd2_journal_temp_unlink_buffer</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#jbd2_journal_unfile_buffer\">jbd2_journal_unfile_buffer</a>(<a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a>, struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jh\">jh</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_lock_bh_state\">jbd_lock_bh_state</a>(<a class=\"id\" href=\"#jh2bh\">jh2bh</a>(<a class=\"id\" href=\"#jh\">jh</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__jbd2_journal_unfile_buffer\">__jbd2_journal_unfile_buffer</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_unlock_bh_state\">jbd_unlock_bh_state</a>(<a class=\"id\" href=\"#jh2bh\">jh2bh</a>(<a class=\"id\" href=\"#jh\">jh</a>));", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called from jbd2_journal_try_to_free_buffers().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called under jbd_lock_bh_state(bh)</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#__journal_try_to_free_buffer\">__journal_try_to_free_buffer</a>(<a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jh\">jh</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a> = <a class=\"id\" href=\"#bh2jh\">bh2jh</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_locked\">buffer_locked</a>(<a class=\"id\" href=\"#bh\">bh</a>) || <a class=\"id\" href=\"#buffer_dirty\">buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_next_transaction\">b_next_transaction</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_cp_transaction\">b_cp_transaction</a> != <a class=\"id\" href=\"#NULL\">NULL</a> && <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* written-back checkpointed metadata buffer */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_jlist\">b_jlist</a> == <a class=\"id\" href=\"#BJ_None\">BJ_None</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"remove from checkpoint list\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__jbd2_journal_remove_checkpoint\">__jbd2_journal_remove_checkpoint</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd2_journal_remove_journal_head\">jbd2_journal_remove_journal_head</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__brelse\">__brelse</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * int jbd2_journal_try_to_free_buffers() - try to free page buffers.</span>", 
"<span class=\"comment\"> * @journal: journal for operation</span>", 
"<span class=\"comment\"> * @page: to try and free</span>", 
"<span class=\"comment\"> * @gfp_mask: we use the mask to detect how hard should we try to release</span>", 
"<span class=\"comment\"> * buffers. If __GFP_WAIT and __GFP_FS is set, we wait for commit code to</span>", 
"<span class=\"comment\"> * release the buffers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For all the buffers on this page,</span>", 
"<span class=\"comment\"> * if they are fully written out ordered data, move them onto BUF_CLEAN</span>", 
"<span class=\"comment\"> * so try_to_free_buffers() can reap them.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function returns non-zero if we wish try_to_free_buffers()</span>", 
"<span class=\"comment\"> * to be called. We do this if the page is releasable by try_to_free_buffers().</span>", 
"<span class=\"comment\"> * We also do it if the page has locked or dirty buffers and the caller wants</span>", 
"<span class=\"comment\"> * us to perform sync or async writeout.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This complicates JBD locking somewhat.  We aren't protected by the</span>", 
"<span class=\"comment\"> * BKL here.  We wish to remove the buffer from its committing or</span>", 
"<span class=\"comment\"> * running transaction's -&gt;t_datalist via __jbd2_journal_unfile_buffer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This may *change* the value of transaction_t-&gt;t_datalist, so anyone</span>", 
"<span class=\"comment\"> * who looks at t_datalist needs to lock against this function.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Even worse, someone may be doing a jbd2_journal_dirty_data on this</span>", 
"<span class=\"comment\"> * buffer.  So we need to lock against that.  jbd2_journal_dirty_data()</span>", 
"<span class=\"comment\"> * will come out of the lock with the buffer dirty, which makes it</span>", 
"<span class=\"comment\"> * ineligible for release here.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Who else is affected by this?  hmm...  Really the only contender</span>", 
"<span class=\"comment\"> * is do_get_write_access() - it could be looking at the buffer while</span>", 
"<span class=\"comment\"> * journal_try_to_free_buffer() is changing its state.  But that</span>", 
"<span class=\"comment\"> * cannot happen because we never reallocate freed data as metadata</span>", 
"<span class=\"comment\"> * while the data is part of a transaction.  Yes?</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return 0 on failure, 1 on success</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#jbd2_journal_try_to_free_buffers\">jbd2_journal_try_to_free_buffers</a>(<a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT\">J_ASSERT</a>(<a class=\"id\" href=\"#PageLocked\">PageLocked</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#page_buffers\">page_buffers</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jh\">jh</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We take our own ref against the journal_head here to avoid</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * having to add tons of locking around each instance of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * jbd2_journal_remove_journal_head() and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * jbd2_journal_put_journal_head().</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a> = <a class=\"id\" href=\"#jbd2_journal_grab_journal_head\">jbd2_journal_grab_journal_head</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#jh\">jh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_lock_bh_state\">jbd_lock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__journal_try_to_free_buffer\">__journal_try_to_free_buffer</a>(<a class=\"id\" href=\"#journal\">journal</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd2_journal_put_journal_head\">jbd2_journal_put_journal_head</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_unlock_bh_state\">jbd_unlock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_jbd\">buffer_jbd</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#busy\">busy</a>;", 
"<span class=\"ts\"/>} while ((<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a>) != <a class=\"id\" href=\"#head\">head</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#try_to_free_buffers\">try_to_free_buffers</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<a class=\"id\" href=\"#busy\">busy</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This buffer is no longer needed.  If it is on an older transaction's</span>", 
"<span class=\"comment\"> * checkpoint list we need to record it on this transaction's forget list</span>", 
"<span class=\"comment\"> * to pin this buffer (and hence its checkpointing transaction) down until</span>", 
"<span class=\"comment\"> * this transaction commits.  If the buffer isn't on a checkpoint list, we</span>", 
"<span class=\"comment\"> * release it.</span>", 
"<span class=\"comment\"> * Returns non-zero if JBD no longer has an interest in the buffer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called under j_list_lock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called under jbd_lock_bh_state(bh).</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__dispose_buffer\">__dispose_buffer</a>(struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#transaction_t\">transaction_t</a> *<a class=\"id\" href=\"#transaction\">transaction</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#may_free\">may_free</a> = 1;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#jh2bh\">jh2bh</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__jbd2_journal_unfile_buffer\">__jbd2_journal_unfile_buffer</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_cp_transaction\">b_cp_transaction</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"on running+cp transaction\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We don't want to write the buffer anymore, clear the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * bit so that we don't confuse checks in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * __journal_file_buffer</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_dirty\">clear_buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__jbd2_journal_file_buffer\">__jbd2_journal_file_buffer</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#transaction\">transaction</a>, <a class=\"id\" href=\"#BJ_Forget\">BJ_Forget</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#may_free\">may_free</a> = 0;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"on running transaction\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd2_journal_remove_journal_head\">jbd2_journal_remove_journal_head</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__brelse\">__brelse</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#may_free\">may_free</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * jbd2_journal_invalidatepage</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This code is tricky.  It has a number of cases to deal with.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * There are two invariants which this code relies on:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * i_size must be updated on disk before we start calling invalidatepage on the</span>", 
"<span class=\"comment\"> * data.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This is done in ext3 by defining an ext3_setattr method which</span>", 
"<span class=\"comment\"> *  updates i_size before truncate gets going.  By maintaining this</span>", 
"<span class=\"comment\"> *  invariant, we can be sure that it is safe to throw away any buffers</span>", 
"<span class=\"comment\"> *  attached to the current transaction: once the transaction commits,</span>", 
"<span class=\"comment\"> *  we know that the data will not be needed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Note however that we can *not* throw away data belonging to the</span>", 
"<span class=\"comment\"> *  previous, committing transaction!</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Any disk blocks which *are* part of the previous, committing</span>", 
"<span class=\"comment\"> * transaction (and which therefore cannot be discarded immediately) are</span>", 
"<span class=\"comment\"> * not going to be reused in the new running transaction</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  The bitmap committed_data images guarantee this: any block which is</span>", 
"<span class=\"comment\"> *  allocated in one transaction and removed in the next will be marked</span>", 
"<span class=\"comment\"> *  as in-use in the committed_data bitmap, so cannot be reused until</span>", 
"<span class=\"comment\"> *  the next transaction to delete the block commits.  This means that</span>", 
"<span class=\"comment\"> *  leaving committing buffers dirty is quite safe: the disk blocks</span>", 
"<span class=\"comment\"> *  cannot be reallocated to a different file and so buffer aliasing is</span>", 
"<span class=\"comment\"> *  not possible.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The above applies mainly to ordered data mode.  In writeback mode we</span>", 
"<span class=\"comment\"> * don't make guarantees about the order in which data hits disk --- in</span>", 
"<span class=\"comment\"> * particular we don't guarantee that new dirty data is flushed before</span>", 
"<span class=\"comment\"> * transaction commit --- so it is always safe just to discard data</span>", 
"<span class=\"comment\"> * immediately in that mode.  --sct</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The journal_unmap_buffer helper function returns zero if the buffer</span>", 
"<span class=\"comment\"> * concerned remains pinned as an anonymous buffer belonging to an older</span>", 
"<span class=\"comment\"> * transaction.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We're outside-transaction here.  Either or both of j_running_transaction</span>", 
"<span class=\"comment\"> * and j_committing_transaction may be NULL.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#journal_unmap_buffer\">journal_unmap_buffer</a>(<a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#transaction_t\">transaction_t</a> *<a class=\"id\" href=\"#transaction\">transaction</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jh\">jh</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#may_free\">may_free</a> = 1;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh\">bh</a>, \"entry\");", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It is safe to proceed here without the j_list_lock because the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * buffers cannot be stolen by try_to_free_buffers as long as we are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * holding the page lock. --sct</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_jbd\">buffer_jbd</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#zap_buffer_unlocked\">zap_buffer_unlocked</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* OK, we have data buffer in journaled mode */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock\">write_lock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_state_lock\">j_state_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_lock_bh_state\">jbd_lock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a> = <a class=\"id\" href=\"#jbd2_journal_grab_journal_head\">jbd2_journal_grab_journal_head</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#jh\">jh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#zap_buffer_no_jh\">zap_buffer_no_jh</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We cannot remove the buffer from checkpoint lists until the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * transaction adding inode to orphan list (let's call it T)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is committed.  Otherwise if the transaction changing the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * buffer would be cleaned from the journal before T is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * committed, a crash will cause that the correct contents of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the buffer will be lost.  On the other hand we have to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * clear the buffer dirty bit at latest at the moment when the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * transaction marking the buffer as freed in the filesystem</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * structures is committed because from that moment on the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * buffer can be reallocated and used by a different page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Since the block hasn't been freed yet but the inode has</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * already been added to orphan list, it is safe for us to add</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the buffer to BJ_Forget list of the newest transaction.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#transaction\">transaction</a> = <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#transaction\">transaction</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* First case: not on any transaction.  If it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * has no checkpoint link, then we can zap it:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it's a writeback-mode buffer so we don't care</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * if it hits disk safely. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_cp_transaction\">b_cp_transaction</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"not on any transaction: zap\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#zap_buffer\">zap_buffer</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_dirty\">buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* bdflush has written it.  We can drop it now */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#zap_buffer\">zap_buffer</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* OK, it must be in the journal but still not</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * written fully to disk: it's metadata or</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * journaled data... */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_running_transaction\">j_running_transaction</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* ... and once the current transaction has</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * committed, the buffer won't be needed any</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * longer. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"checkpointed: add to BJ_Forget\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__dispose_buffer\">__dispose_buffer</a>(<a class=\"id\" href=\"#jh\">jh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_running_transaction\">j_running_transaction</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd2_journal_put_journal_head\">jbd2_journal_put_journal_head</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_unlock_bh_state\">jbd_unlock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_state_lock\">j_state_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* There is no currently-running transaction. So the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * orphan record which we wrote for this file must have</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * passed into commit.  We must attach this buffer to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the committing transaction, if it exists. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_committing_transaction\">j_committing_transaction</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"give to committing trans\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__dispose_buffer\">__dispose_buffer</a>(<a class=\"id\" href=\"#jh\">jh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_committing_transaction\">j_committing_transaction</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd2_journal_put_journal_head\">jbd2_journal_put_journal_head</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_unlock_bh_state\">jbd_unlock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_state_lock\">j_state_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The orphan record's transaction has</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * committed.  We can cleanse this buffer */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_jbddirty\">clear_buffer_jbddirty</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#zap_buffer\">zap_buffer</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#transaction\">transaction</a> == <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_committing_transaction\">j_committing_transaction</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"on committing transaction\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The buffer is committing, we simply cannot touch</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it. So we just set j_next_transaction to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * running transaction (if there is one) and mark</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * buffer as freed so that commit code knows it should</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * clear dirty bits when it is done with the buffer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_freed\">set_buffer_freed</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_running_transaction\">j_running_transaction</a> && <a class=\"id\" href=\"#buffer_jbddirty\">buffer_jbddirty</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_next_transaction\">b_next_transaction</a> = <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_running_transaction\">j_running_transaction</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd2_journal_put_journal_head\">jbd2_journal_put_journal_head</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_unlock_bh_state\">jbd_unlock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_state_lock\">j_state_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Good, the buffer belongs to the running transaction.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We are writing our own transaction's data, not any</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * previous one's, so it is safe to throw it away</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * (remember that we expect the filesystem to have set</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * i_size already for this truncate so recovery will not</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * expose the disk blocks we are discarding here.) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#transaction\">transaction</a> == <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_running_transaction\">j_running_transaction</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#JBUFFER_TRACE\">JBUFFER_TRACE</a>(<a class=\"id\" href=\"#jh\">jh</a>, \"on running transaction\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#may_free\">may_free</a> = <a class=\"id\" href=\"#__dispose_buffer\">__dispose_buffer</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#transaction\">transaction</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#zap_buffer\">zap_buffer</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd2_journal_put_journal_head\">jbd2_journal_put_journal_head</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"<a class=\"id\" href=\"#zap_buffer_no_jh\">zap_buffer_no_jh</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_unlock_bh_state\">jbd_unlock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_state_lock\">j_state_lock</a>);", 
"<a class=\"id\" href=\"#zap_buffer_unlocked\">zap_buffer_unlocked</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_dirty\">clear_buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_BH\">J_ASSERT_BH</a>(<a class=\"id\" href=\"#bh\">bh</a>, !<a class=\"id\" href=\"#buffer_jbddirty\">buffer_jbddirty</a>(<a class=\"id\" href=\"#bh\">bh</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_mapped\">clear_buffer_mapped</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_req\">clear_buffer_req</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_new\">clear_buffer_new</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_bdev\">b_bdev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#may_free\">may_free</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * void jbd2_journal_invalidatepage()</span>", 
"<span class=\"comment\"> * @journal: journal to use for flush...</span>", 
"<span class=\"comment\"> * @page:    page to flush</span>", 
"<span class=\"comment\"> * @offset:  length of page to invalidate.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Reap page buffers containing data after offset in page.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#jbd2_journal_invalidatepage\">jbd2_journal_invalidatepage</a>(<a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#head\">head</a>, *<a class=\"id\" href=\"#bh\">bh</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#curr_off\">curr_off</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#may_free\">may_free</a> = 1;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#PageLocked\">PageLocked</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page_has_buffers\">page_has_buffers</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We will potentially be playing with lists other than just the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * data lists (especially for journaled data mode), so be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cautious in our locking. */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#page_buffers\">page_buffers</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#next_off\">next_off</a> = <a class=\"id\" href=\"#curr_off\">curr_off</a> + <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_size\">b_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> <= <a class=\"id\" href=\"#curr_off\">curr_off</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This block is wholly outside the truncation point */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_buffer\">lock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#may_free\">may_free</a> &= <a class=\"id\" href=\"#journal_unmap_buffer\">journal_unmap_buffer</a>(<a class=\"id\" href=\"#journal\">journal</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_buffer\">unlock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#curr_off\">curr_off</a> = <a class=\"id\" href=\"#next_off\">next_off</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#bh\">bh</a> != <a class=\"id\" href=\"#head\">head</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#offset\">offset</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#may_free\">may_free</a> && <a class=\"id\" href=\"#try_to_free_buffers\">try_to_free_buffers</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT\">J_ASSERT</a>(!<a class=\"id\" href=\"#page_has_buffers\">page_has_buffers</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * File a buffer on the given transaction list.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__jbd2_journal_file_buffer\">__jbd2_journal_file_buffer</a>(struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jh\">jh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#transaction_t\">transaction_t</a> *<a class=\"id\" href=\"#transaction\">transaction</a>, int <a class=\"id\" href=\"#jlist\">jlist</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#journal_head\">journal_head</a> **<a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#was_dirty\">was_dirty</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#jh2bh\">jh2bh</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#jbd_is_locked_bh_state\">jbd_is_locked_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#assert_spin_locked\">assert_spin_locked</a>(&amp;<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_journal\">t_journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_jlist\">b_jlist</a> &lt; <a class=\"id\" href=\"#BJ_Types\">BJ_Types</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> == <a class=\"id\" href=\"#transaction\">transaction</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> && <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_jlist\">b_jlist</a> == <a class=\"id\" href=\"#jlist\">jlist</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#jlist\">jlist</a> == <a class=\"id\" href=\"#BJ_Metadata\">BJ_Metadata</a> || <a class=\"id\" href=\"#jlist\">jlist</a> == <a class=\"id\" href=\"#BJ_Reserved\">BJ_Reserved</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#jlist\">jlist</a> == <a class=\"id\" href=\"#BJ_Shadow\">BJ_Shadow</a> || <a class=\"id\" href=\"#jlist\">jlist</a> == <a class=\"id\" href=\"#BJ_Forget\">BJ_Forget</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * For metadata buffers, we track dirty bit in buffer_jbddirty</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * instead of buffer_dirty. We should not see a dirty bit set</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * here because we clear it in do_get_write_access but e.g.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * tune2fs can modify the sb and set the dirty bit at any time</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * so we try to gracefully handle that.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_dirty\">buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#warn_dirty_buffer\">warn_dirty_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#test_clear_buffer_dirty\">test_clear_buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#test_clear_buffer_jbddirty\">test_clear_buffer_jbddirty</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#was_dirty\">was_dirty</a> = 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__jbd2_journal_temp_unlink_buffer\">__jbd2_journal_temp_unlink_buffer</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> = <a class=\"id\" href=\"#transaction\">transaction</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#jlist\">jlist</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#BJ_None\">BJ_None</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, !<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_committed_data\">b_committed_data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, !<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_frozen_data\">b_frozen_data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#BJ_Metadata\">BJ_Metadata</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_nr_buffers\">t_nr_buffers</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = &amp;<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_buffers\">t_buffers</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#BJ_Forget\">BJ_Forget</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = &amp;<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_forget\">t_forget</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#BJ_IO\">BJ_IO</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = &amp;<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_iobuf_list\">t_iobuf_list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#BJ_Shadow\">BJ_Shadow</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = &amp;<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_shadow_list\">t_shadow_list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#BJ_LogCtl\">BJ_LogCtl</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = &amp;<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_log_list\">t_log_list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#BJ_Reserved\">BJ_Reserved</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = &amp;<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_reserved_list\">t_reserved_list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__blist_add_buffer\">__blist_add_buffer</a>(<a class=\"id\" href=\"#list\">list</a>, <a class=\"id\" href=\"#jh\">jh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_jlist\">b_jlist</a> = <a class=\"id\" href=\"#jlist\">jlist</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#was_dirty\">was_dirty</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_jbddirty\">set_buffer_jbddirty</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#jbd2_journal_file_buffer\">jbd2_journal_file_buffer</a>(struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jh\">jh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#transaction_t\">transaction_t</a> *<a class=\"id\" href=\"#transaction\">transaction</a>, int <a class=\"id\" href=\"#jlist\">jlist</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_lock_bh_state\">jbd_lock_bh_state</a>(<a class=\"id\" href=\"#jh2bh\">jh2bh</a>(<a class=\"id\" href=\"#jh\">jh</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_journal\">t_journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__jbd2_journal_file_buffer\">__jbd2_journal_file_buffer</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#transaction\">transaction</a>, <a class=\"id\" href=\"#jlist\">jlist</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_journal\">t_journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_unlock_bh_state\">jbd_unlock_bh_state</a>(<a class=\"id\" href=\"#jh2bh\">jh2bh</a>(<a class=\"id\" href=\"#jh\">jh</a>));", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Remove a buffer from its current buffer list in preparation for</span>", 
"<span class=\"comment\"> * dropping it from its current transaction entirely.  If the buffer has</span>", 
"<span class=\"comment\"> * already started to be used by a subsequent transaction, refile the</span>", 
"<span class=\"comment\"> * buffer on that transaction's metadata list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called under journal-&gt;j_list_lock</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called under jbd_lock_bh_state(jh2bh(jh))</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__jbd2_journal_refile_buffer\">__jbd2_journal_refile_buffer</a>(struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jh\">jh</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#was_dirty\">was_dirty</a>, <a class=\"id\" href=\"#jlist\">jlist</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#jh2bh\">jh2bh</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#jbd_is_locked_bh_state\">jbd_is_locked_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#assert_spin_locked\">assert_spin_locked</a>(&amp;<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a>-><a class=\"id\" href=\"#t_journal\">t_journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If the buffer is now unused, just drop it. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_next_transaction\">b_next_transaction</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__jbd2_journal_unfile_buffer\">__jbd2_journal_unfile_buffer</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It has been modified by a later transaction: add it to the new</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * transaction's metadata list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#was_dirty\">was_dirty</a> = <a class=\"id\" href=\"#test_clear_buffer_jbddirty\">test_clear_buffer_jbddirty</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__jbd2_journal_temp_unlink_buffer\">__jbd2_journal_temp_unlink_buffer</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a> = <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_next_transaction\">b_next_transaction</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_next_transaction\">b_next_transaction</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_freed\">buffer_freed</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jlist\">jlist</a> = <a class=\"id\" href=\"#BJ_Forget\">BJ_Forget</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_modified\">b_modified</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jlist\">jlist</a> = <a class=\"id\" href=\"#BJ_Metadata\">BJ_Metadata</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jlist\">jlist</a> = <a class=\"id\" href=\"#BJ_Reserved\">BJ_Reserved</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__jbd2_journal_file_buffer\">__jbd2_journal_file_buffer</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a>, <a class=\"id\" href=\"#jlist\">jlist</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT_JH\">J_ASSERT_JH</a>(<a class=\"id\" href=\"#jh\">jh</a>, <a class=\"id\" href=\"#jh\">jh</a>-><a class=\"id\" href=\"#b_transaction\">b_transaction</a>-><a class=\"id\" href=\"#t_state\">t_state</a> == <a class=\"id\" href=\"#T_RUNNING\">T_RUNNING</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#was_dirty\">was_dirty</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_jbddirty\">set_buffer_jbddirty</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * For the unlocked version of this call, also make sure that any</span>", 
"<span class=\"comment\"> * hanging journal_head is cleaned up if necessary.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * __jbd2_journal_refile_buffer is usually called as part of a single locked</span>", 
"<span class=\"comment\"> * operation on a buffer_head, in which the caller is probably going to</span>", 
"<span class=\"comment\"> * be hooking the journal_head onto other lists.  In that case it is up</span>", 
"<span class=\"comment\"> * to the caller to remove the journal_head if necessary.  For the</span>", 
"<span class=\"comment\"> * unlocked jbd2_journal_refile_buffer call, the caller isn't going to be</span>", 
"<span class=\"comment\"> * doing anything else to the buffer so we need to do the cleanup</span>", 
"<span class=\"comment\"> * ourselves to avoid a jh leak.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * *** The journal_head may be freed by this call! ***</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#jbd2_journal_refile_buffer\">jbd2_journal_refile_buffer</a>(<a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a>, struct <a class=\"id\" href=\"#journal_head\">journal_head</a> *<a class=\"id\" href=\"#jh\">jh</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#jh2bh\">jh2bh</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_lock_bh_state\">jbd_lock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__jbd2_journal_refile_buffer\">__jbd2_journal_refile_buffer</a>(<a class=\"id\" href=\"#jh\">jh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_unlock_bh_state\">jbd_unlock_bh_state</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd2_journal_remove_journal_head\">jbd2_journal_remove_journal_head</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__brelse\">__brelse</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * File inode in the inode list of the handle's transaction</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#jbd2_journal_file_inode\">jbd2_journal_file_inode</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#jbd2_inode\">jbd2_inode</a> *<a class=\"id\" href=\"#jinode\">jinode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#transaction_t\">transaction_t</a> *<a class=\"id\" href=\"#transaction\">transaction</a> = <a class=\"id\" href=\"#handle\">handle</a>-><a class=\"id\" href=\"#h_transaction\">h_transaction</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a> = <a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_journal\">t_journal</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_handle_aborted\">is_handle_aborted</a>(<a class=\"id\" href=\"#handle\">handle</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_debug\">jbd_debug</a>(4, \"Adding inode %lu, tid:%d\\n\", <a class=\"id\" href=\"#jinode\">jinode</a>-><a class=\"id\" href=\"#i_vfs_inode\">i_vfs_inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_tid\">t_tid</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * First check whether inode isn't already on the transaction's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * lists without taking the lock. Note that this check is safe</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * without the lock as we cannot race with somebody removing inode</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * from the transaction. The reason is that we remove inode from the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * transaction only in journal_release_jbd_inode() and when we commit</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the transaction. We are guarded from the first case by holding</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a reference to the inode. We are safe against the second case</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * because if jinode-&gt;i_transaction == transaction, commit code</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cannot touch the transaction because we hold reference to it,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and if jinode-&gt;i_next_transaction == transaction, commit code</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will only file the inode where we want it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#jinode\">jinode</a>-><a class=\"id\" href=\"#i_transaction\">i_transaction</a> == <a class=\"id\" href=\"#transaction\">transaction</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#jinode\">jinode</a>-><a class=\"id\" href=\"#i_next_transaction\">i_next_transaction</a> == <a class=\"id\" href=\"#transaction\">transaction</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#jinode\">jinode</a>-><a class=\"id\" href=\"#i_transaction\">i_transaction</a> == <a class=\"id\" href=\"#transaction\">transaction</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#jinode\">jinode</a>-><a class=\"id\" href=\"#i_next_transaction\">i_next_transaction</a> == <a class=\"id\" href=\"#transaction\">transaction</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* On some different transaction's list - should be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the committing one */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#jinode\">jinode</a>-><a class=\"id\" href=\"#i_transaction\">i_transaction</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT\">J_ASSERT</a>(<a class=\"id\" href=\"#jinode\">jinode</a>-><a class=\"id\" href=\"#i_next_transaction\">i_next_transaction</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT\">J_ASSERT</a>(<a class=\"id\" href=\"#jinode\">jinode</a>-><a class=\"id\" href=\"#i_transaction\">i_transaction</a> ==", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_committing_transaction\">j_committing_transaction</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jinode\">jinode</a>-><a class=\"id\" href=\"#i_next_transaction\">i_next_transaction</a> = <a class=\"id\" href=\"#transaction\">transaction</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Not on any transaction list... */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT\">J_ASSERT</a>(!<a class=\"id\" href=\"#jinode\">jinode</a>-><a class=\"id\" href=\"#i_next_transaction\">i_next_transaction</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jinode\">jinode</a>-><a class=\"id\" href=\"#i_transaction\">i_transaction</a> = <a class=\"id\" href=\"#transaction\">transaction</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#jinode\">jinode</a>-><a class=\"id\" href=\"#i_list\">i_list</a>, &amp;<a class=\"id\" href=\"#transaction\">transaction</a>-><a class=\"id\" href=\"#t_inode_list\">t_inode_list</a>);", 
"<a class=\"id\" href=\"#done\">done</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * File truncate and transaction commit interact with each other in a</span>", 
"<span class=\"comment\"> * non-trivial way.  If a transaction writing data block A is</span>", 
"<span class=\"comment\"> * committing, we cannot discard the data by truncate until we have</span>", 
"<span class=\"comment\"> * written them.  Otherwise if we crashed after the transaction with</span>", 
"<span class=\"comment\"> * write has committed but before the transaction with truncate has</span>", 
"<span class=\"comment\"> * committed, we could see stale data in block A.  This function is a</span>", 
"<span class=\"comment\"> * helper to solve this problem.  It starts writeout of the truncated</span>", 
"<span class=\"comment\"> * part in case it is in the committing transaction.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Filesystem code must call this function when inode is journaled in</span>", 
"<span class=\"comment\"> * ordered mode before truncation happens and after the inode has been</span>", 
"<span class=\"comment\"> * placed on orphan list with the new inode size. The second condition</span>", 
"<span class=\"comment\"> * avoids the race that someone writes new data and we start</span>", 
"<span class=\"comment\"> * committing the transaction after this function has been called but</span>", 
"<span class=\"comment\"> * before a transaction for truncate is started (and furthermore it</span>", 
"<span class=\"comment\"> * allows us to optimize the case where the addition to orphan list</span>", 
"<span class=\"comment\"> * happens in the same transaction as write --- we don't have to write</span>", 
"<span class=\"comment\"> * any data in such case).</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#jbd2_journal_begin_ordered_truncate\">jbd2_journal_begin_ordered_truncate</a>(<a class=\"id\" href=\"#journal_t\">journal_t</a> *<a class=\"id\" href=\"#journal\">journal</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#jbd2_inode\">jbd2_inode</a> *<a class=\"id\" href=\"#jinode\">jinode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#new_size\">new_size</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#transaction_t\">transaction_t</a> *<a class=\"id\" href=\"#inode_trans\">inode_trans</a>, *<a class=\"id\" href=\"#commit_trans\">commit_trans</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* This is a quick check to avoid locking if not necessary */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#jinode\">jinode</a>-><a class=\"id\" href=\"#i_transaction\">i_transaction</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Locks are here just to force reading of recent values, it is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * enough that the transaction was not committing before we started</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a transaction adding the inode to orphan list */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_state_lock\">j_state_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#commit_trans\">commit_trans</a> = <a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_committing_transaction\">j_committing_transaction</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_state_lock\">j_state_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode_trans\">inode_trans</a> = <a class=\"id\" href=\"#jinode\">jinode</a>-><a class=\"id\" href=\"#i_transaction\">i_transaction</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#journal\">journal</a>-><a class=\"id\" href=\"#j_list_lock\">j_list_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode_trans\">inode_trans</a> == <a class=\"id\" href=\"#commit_trans\">commit_trans</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#filemap_fdatawrite_range\">filemap_fdatawrite_range</a>(<a class=\"id\" href=\"#jinode\">jinode</a>-><a class=\"id\" href=\"#i_vfs_inode\">i_vfs_inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_size\">new_size</a>, <a class=\"id\" href=\"#LLONG_MAX\">LLONG_MAX</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd2_journal_abort\">jbd2_journal_abort</a>(<a class=\"id\" href=\"#journal\">journal</a>, <a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
];
xr_frag_insert('l/13/6b6e9e20afcd9a19697d289f89653c65ad1e3f.xr', __xr_tmp);
