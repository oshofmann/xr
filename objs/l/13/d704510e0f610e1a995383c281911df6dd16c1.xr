var __xr_tmp = [
"<span class=\"comment\"> * the last step before putting a checksum into a packet.</span>", 
"<span class=\"comment\"> * Make sure not to mix with 64bit checksums.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#__sum16\">__sum16</a> <a class=\"id\" href=\"#csum_fold\">csum_fold</a>(<a class=\"id\" href=\"#__wsum\">__wsum</a> <a class=\"id\" href=\"#sum\">sum</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a>(\"  addl %1,%0\\n\"", 
"<span class=\"ts\"/>    \"  adcl $0xffff,%0\"", 
"<span class=\"ts\"/>    : \"=r\" (<a class=\"id\" href=\"#sum\">sum</a>)", 
"<span class=\"ts\"/>    : \"r\" ((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#sum\">sum</a> << 16),", 
"<span class=\"ts\"/>      \"0\" ((<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#sum\">sum</a> &amp; 0xffff0000));", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#__sum16\">__sum16</a>)(~(<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#sum\">sum</a> >> 16);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This is a version of ip_compute_csum() optimized for IP headers,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>which always checksum on 4 octet boundaries.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>By Jorge Cwik &lt;jorge@laser.satlink.net&gt;, adapted for linux by</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Arnt Gulbrandsen.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ip_fast_csum - Compute the IPv4 header checksum efficiently.</span>", 
];
xr_frag_insert('l/13/d704510e0f610e1a995383c281911df6dd16c1.xr', __xr_tmp);
