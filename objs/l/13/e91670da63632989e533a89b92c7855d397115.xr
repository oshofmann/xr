var __xr_tmp = [
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#control\">control</a> != <a class=\"id\" href=\"#ACPI_ADR_SPACE_FIXED_HARDWARE\">ACPI_ADR_SPACE_FIXED_HARDWARE</a>) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#status\">status</a> != <a class=\"id\" href=\"#ACPI_ADR_SPACE_FIXED_HARDWARE\">ACPI_ADR_SPACE_FIXED_HARDWARE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"Invalid control/status registers (%x - %x)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#control\">control</a>, <a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* fill in data-&gt;powernow_table */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#powernow_table\">powernow_table</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>((sizeof(struct <a class=\"id\" href=\"#cpufreq_frequency_table\">cpufreq_frequency_table</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>* (<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#acpi_data\">acpi_data</a>.<a class=\"id\" href=\"#state_count\">state_count</a> + 1)), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#powernow_table\">powernow_table</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"powernow_table memory alloc failure\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* fill in data */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#numps\">numps</a> = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#acpi_data\">acpi_data</a>.<a class=\"id\" href=\"#state_count\">state_count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#powernow_k8_acpi_pst_values\">powernow_k8_acpi_pst_values</a>(<a class=\"id\" href=\"#data\">data</a>, 0);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_family\">cpu_family</a> == <a class=\"id\" href=\"#CPU_HW_PSTATE\">CPU_HW_PSTATE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret_val\">ret_val</a> = <a class=\"id\" href=\"#fill_powernow_table_pstate\">fill_powernow_table_pstate</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#powernow_table\">powernow_table</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret_val\">ret_val</a> = <a class=\"id\" href=\"#fill_powernow_table_fidvid\">fill_powernow_table_fidvid</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#powernow_table\">powernow_table</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret_val\">ret_val</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out_mem\">err_out_mem</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#powernow_table\">powernow_table</a>[<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#acpi_data\">acpi_data</a>.<a class=\"id\" href=\"#state_count\">state_count</a>].<a class=\"id\" href=\"#frequency\">frequency</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#CPUFREQ_TABLE_END\">CPUFREQ_TABLE_END</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#powernow_table\">powernow_table</a>[<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#acpi_data\">acpi_data</a>.<a class=\"id\" href=\"#state_count\">state_count</a>].<a class=\"id\" href=\"#index\">index</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#powernow_table\">powernow_table</a> = <a class=\"id\" href=\"#powernow_table\">powernow_table</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_first\">cpumask_first</a>(<a class=\"id\" href=\"#cpu_core_mask\">cpu_core_mask</a>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#cpu\">cpu</a>)) == <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print_basics\">print_basics</a>(<a class=\"id\" href=\"#data\">data</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* notify BIOS that we exist */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_processor_notify_smm\">acpi_processor_notify_smm</a>(<a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#zalloc_cpumask_var\">zalloc_cpumask_var</a>(&amp;<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#acpi_data\">acpi_data</a>.<a class=\"id\" href=\"#shared_cpu_map\">shared_cpu_map</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> <a class=\"id\" href=\"#PFX\">PFX</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"unable to alloc powernow_k8_data cpumask\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret_val\">ret_val</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out_mem\">err_out_mem</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#err_out_mem\">err_out_mem</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#powernow_table\">powernow_table</a>);", 
"", 
"<a class=\"id\" href=\"#err_out\">err_out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_processor_unregister_performance\">acpi_processor_unregister_performance</a>(&amp;<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#acpi_data\">acpi_data</a>, <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* data-&gt;acpi_data.state_count informs us at -&gt;exit()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * whether ACPI was used */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#acpi_data\">acpi_data</a>.<a class=\"id\" href=\"#state_count\">state_count</a> = 0;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret_val\">ret_val</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#fill_powernow_table_pstate\">fill_powernow_table_pstate</a>(struct <a class=\"id\" href=\"#powernow_k8_data\">powernow_k8_data</a> *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cpufreq_frequency_table\">cpufreq_frequency_table</a> *<a class=\"id\" href=\"#powernow_table\">powernow_table</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#hi\">hi</a> = 0, <a class=\"id\" href=\"#lo\">lo</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdmsr\">rdmsr</a>(<a class=\"id\" href=\"#MSR_PSTATE_CUR_LIMIT\">MSR_PSTATE_CUR_LIMIT</a>, <a class=\"id\" href=\"#lo\">lo</a>, <a class=\"id\" href=\"#hi\">hi</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#max_hw_pstate\">max_hw_pstate</a> = (<a class=\"id\" href=\"#lo\">lo</a> &amp; <a class=\"id\" href=\"#HW_PSTATE_MAX_MASK\">HW_PSTATE_MAX_MASK</a>) >> <a class=\"id\" href=\"#HW_PSTATE_MAX_SHIFT\">HW_PSTATE_MAX_SHIFT</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#acpi_data\">acpi_data</a>.<a class=\"id\" href=\"#state_count\">state_count</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#index\">index</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#acpi_data\">acpi_data</a>.<a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#control\">control</a> &amp; <a class=\"id\" href=\"#HW_PSTATE_MASK\">HW_PSTATE_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#index\">index</a> &gt; <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#max_hw_pstate\">max_hw_pstate</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> <a class=\"id\" href=\"#PFX\">PFX</a> \"invalid pstate %d - \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"bad value %d.\\n\", <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#index\">index</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> <a class=\"id\" href=\"#PFX\">PFX</a> \"Please report to BIOS \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"manufacturer\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#invalidate_entry\">invalidate_entry</a>(<a class=\"id\" href=\"#powernow_table\">powernow_table</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdmsr\">rdmsr</a>(<a class=\"id\" href=\"#MSR_PSTATE_DEF_BASE\">MSR_PSTATE_DEF_BASE</a> + <a class=\"id\" href=\"#index\">index</a>, <a class=\"id\" href=\"#lo\">lo</a>, <a class=\"id\" href=\"#hi\">hi</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#hi\">hi</a> &amp; <a class=\"id\" href=\"#HW_PSTATE_VALID_MASK\">HW_PSTATE_VALID_MASK</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"invalid pstate %d, ignoring\\n\", <a class=\"id\" href=\"#index\">index</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#invalidate_entry\">invalidate_entry</a>(<a class=\"id\" href=\"#powernow_table\">powernow_table</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#powernow_table\">powernow_table</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#index\">index</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Frequency may be rounded for these */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86\">x86</a> == 0x10 && <a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86_model\">x86_model</a> &lt; 10)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> || <a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86\">x86</a> == 0x11) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#powernow_table\">powernow_table</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#frequency\">frequency</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#freq_from_fid_did\">freq_from_fid_did</a>(<a class=\"id\" href=\"#lo\">lo</a> &amp; 0x3f, (<a class=\"id\" href=\"#lo\">lo</a> >> 6) &amp; 7);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#powernow_table\">powernow_table</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#frequency\">frequency</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#acpi_data\">acpi_data</a>.<a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#core_frequency\">core_frequency</a> * 1000;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#fill_powernow_table_fidvid\">fill_powernow_table_fidvid</a>(struct <a class=\"id\" href=\"#powernow_k8_data\">powernow_k8_data</a> *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cpufreq_frequency_table\">cpufreq_frequency_table</a> *<a class=\"id\" href=\"#powernow_table\">powernow_table</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#acpi_data\">acpi_data</a>.<a class=\"id\" href=\"#state_count\">state_count</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#fid\">fid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#vid\">vid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#freq\">freq</a>, <a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#status\">status</a>, <a class=\"id\" href=\"#control\">control</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#exttype\">exttype</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =  <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#acpi_data\">acpi_data</a>.<a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fid\">fid</a> = <a class=\"id\" href=\"#status\">status</a> &amp; <a class=\"id\" href=\"#EXT_FID_MASK\">EXT_FID_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vid\">vid</a> = (<a class=\"id\" href=\"#status\">status</a> >> <a class=\"id\" href=\"#VID_SHIFT\">VID_SHIFT</a>) &amp; <a class=\"id\" href=\"#EXT_VID_MASK\">EXT_VID_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#control\">control</a> =  <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#acpi_data\">acpi_data</a>.<a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#control\">control</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fid\">fid</a> = <a class=\"id\" href=\"#control\">control</a> &amp; <a class=\"id\" href=\"#FID_MASK\">FID_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vid\">vid</a> = (<a class=\"id\" href=\"#control\">control</a> >> <a class=\"id\" href=\"#VID_SHIFT\">VID_SHIFT</a>) &amp; <a class=\"id\" href=\"#VID_MASK\">VID_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"   %d : fid 0x%x, vid 0x%x\\n\", <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#fid\">fid</a>, <a class=\"id\" href=\"#vid\">vid</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#fid\">fid</a> | (<a class=\"id\" href=\"#vid\">vid</a><<8);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#powernow_table\">powernow_table</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#index\">index</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#freq\">freq</a> = <a class=\"id\" href=\"#find_khz_freq_from_fid\">find_khz_freq_from_fid</a>(<a class=\"id\" href=\"#fid\">fid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#powernow_table\">powernow_table</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#frequency\">frequency</a> = <a class=\"id\" href=\"#freq\">freq</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* verify frequency is OK */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#freq\">freq</a> &gt; (<a class=\"id\" href=\"#MAX_FREQ\">MAX_FREQ</a> * 1000)) || (<a class=\"id\" href=\"#freq\">freq</a> &lt; (<a class=\"id\" href=\"#MIN_FREQ\">MIN_FREQ</a> * 1000))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"invalid freq %u kHz, ignoring\\n\", <a class=\"id\" href=\"#freq\">freq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#invalidate_entry\">invalidate_entry</a>(<a class=\"id\" href=\"#powernow_table\">powernow_table</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* verify voltage is OK -</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * BIOSs are using \"off\" to indicate invalid */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vid\">vid</a> == <a class=\"id\" href=\"#VID_OFF\">VID_OFF</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"invalid vid %u, ignoring\\n\", <a class=\"id\" href=\"#vid\">vid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#invalidate_entry\">invalidate_entry</a>(<a class=\"id\" href=\"#powernow_table\">powernow_table</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#freq\">freq</a> != (<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#acpi_data\">acpi_data</a>.<a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#core_frequency\">core_frequency</a> * 1000)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> <a class=\"id\" href=\"#PFX\">PFX</a> \"invalid freq entries \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"%u kHz vs. %u kHz\\n\", <a class=\"id\" href=\"#freq\">freq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned int)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#acpi_data\">acpi_data</a>.<a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#core_frequency\">core_frequency</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * 1000));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#invalidate_entry\">invalidate_entry</a>(<a class=\"id\" href=\"#powernow_table\">powernow_table</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#powernow_k8_cpu_exit_acpi\">powernow_k8_cpu_exit_acpi</a>(struct <a class=\"id\" href=\"#powernow_k8_data\">powernow_k8_data</a> *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#acpi_data\">acpi_data</a>.<a class=\"id\" href=\"#state_count\">state_count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_processor_unregister_performance\">acpi_processor_unregister_performance</a>(&amp;<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#acpi_data\">acpi_data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_cpumask_var\">free_cpumask_var</a>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#acpi_data\">acpi_data</a>.<a class=\"id\" href=\"#shared_cpu_map\">shared_cpu_map</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#get_transition_latency\">get_transition_latency</a>(struct <a class=\"id\" href=\"#powernow_k8_data\">powernow_k8_data</a> *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#max_latency\">max_latency</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#acpi_data\">acpi_data</a>.<a class=\"id\" href=\"#state_count\">state_count</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#cur_latency\">cur_latency</a> = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#acpi_data\">acpi_data</a>.<a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#transition_latency\">transition_latency</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>+ <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#acpi_data\">acpi_data</a>.<a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#bus_master_latency\">bus_master_latency</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cur_latency\">cur_latency</a> &gt; <a class=\"id\" href=\"#max_latency\">max_latency</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_latency\">max_latency</a> = <a class=\"id\" href=\"#cur_latency\">cur_latency</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#max_latency\">max_latency</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Fam 11h and later may return 0 as transition latency. This</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is intended and means \"very fast\". While cpufreq core and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * governors currently can handle that gracefully, better set it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to 1 to avoid problems in the future.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86\">x86</a> &lt; 0x11)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> <a class=\"id\" href=\"#FW_WARN\">FW_WARN</a> <a class=\"id\" href=\"#PFX\">PFX</a> \"Invalid zero transition \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"latency\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_latency\">max_latency</a> = 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* value in usecs, needs to be in nanoseconds */</span>", 
"<span class=\"ts\"/>return 1000 * <a class=\"id\" href=\"#max_latency\">max_latency</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Take a frequency, and issue the fid/vid transition command */</span>", 
"static int <a class=\"id\" href=\"#transition_frequency_fidvid\">transition_frequency_fidvid</a>(struct <a class=\"id\" href=\"#powernow_k8_data\">powernow_k8_data</a> *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#index\">index</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#fid\">fid</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#vid\">vid</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpufreq_freqs\">cpufreq_freqs</a> <a class=\"id\" href=\"#freqs\">freqs</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"cpu %d transition to index %u\\n\", <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>(), <a class=\"id\" href=\"#index\">index</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* fid/vid correctness check for k8 */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* fid are the lower 8 bits of the index we stored into</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the cpufreq frequency table in find_psb_table, vid</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * are the upper 8 bits.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fid\">fid</a> = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#powernow_table\">powernow_table</a>[<a class=\"id\" href=\"#index\">index</a>].<a class=\"id\" href=\"#index\">index</a> &amp; 0xFF;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vid\">vid</a> = (<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#powernow_table\">powernow_table</a>[<a class=\"id\" href=\"#index\">index</a>].<a class=\"id\" href=\"#index\">index</a> &amp; 0xFF00) >> 8;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"table matched fid 0x%x, giving vid 0x%x\\n\", <a class=\"id\" href=\"#fid\">fid</a>, <a class=\"id\" href=\"#vid\">vid</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#query_current_values_with_pending_wait\">query_current_values_with_pending_wait</a>(<a class=\"id\" href=\"#data\">data</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#currvid\">currvid</a> == <a class=\"id\" href=\"#vid\">vid</a>) && (<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#currfid\">currfid</a> == <a class=\"id\" href=\"#fid\">fid</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"target matches current values (fid 0x%x, vid 0x%x)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fid\">fid</a>, <a class=\"id\" href=\"#vid\">vid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"cpu %d, changing to fid 0x%x, vid 0x%x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>(), <a class=\"id\" href=\"#fid\">fid</a>, <a class=\"id\" href=\"#vid\">vid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#freqs\">freqs</a>.<a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#find_khz_freq_from_fid\">find_khz_freq_from_fid</a>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#currfid\">currfid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#freqs\">freqs</a>.<a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#find_khz_freq_from_fid\">find_khz_freq_from_fid</a>(<a class=\"id\" href=\"#fid\">fid</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#available_cores\">available_cores</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#freqs\">freqs</a>.<a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpufreq_notify_transition\">cpufreq_notify_transition</a>(&amp;<a class=\"id\" href=\"#freqs\">freqs</a>, <a class=\"id\" href=\"#CPUFREQ_PRECHANGE\">CPUFREQ_PRECHANGE</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#transition_fid_vid\">transition_fid_vid</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#fid\">fid</a>, <a class=\"id\" href=\"#vid\">vid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#freqs\">freqs</a>.<a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#find_khz_freq_from_fid\">find_khz_freq_from_fid</a>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#currfid\">currfid</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#available_cores\">available_cores</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#freqs\">freqs</a>.<a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpufreq_notify_transition\">cpufreq_notify_transition</a>(&amp;<a class=\"id\" href=\"#freqs\">freqs</a>, <a class=\"id\" href=\"#CPUFREQ_POSTCHANGE\">CPUFREQ_POSTCHANGE</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Take a frequency, and issue the hardware pstate transition command */</span>", 
"static int <a class=\"id\" href=\"#transition_frequency_pstate\">transition_frequency_pstate</a>(struct <a class=\"id\" href=\"#powernow_k8_data\">powernow_k8_data</a> *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#index\">index</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#pstate\">pstate</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpufreq_freqs\">cpufreq_freqs</a> <a class=\"id\" href=\"#freqs\">freqs</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"cpu %d transition to index %u\\n\", <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>(), <a class=\"id\" href=\"#index\">index</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* get MSR index for hardware pstate transition */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pstate\">pstate</a> = <a class=\"id\" href=\"#index\">index</a> &amp; <a class=\"id\" href=\"#HW_PSTATE_MASK\">HW_PSTATE_MASK</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pstate\">pstate</a> &gt; <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#max_hw_pstate\">max_hw_pstate</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#freqs\">freqs</a>.<a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#find_khz_freq_from_pstate\">find_khz_freq_from_pstate</a>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#powernow_table\">powernow_table</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#currpstate\">currpstate</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#freqs\">freqs</a>.<a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#find_khz_freq_from_pstate\">find_khz_freq_from_pstate</a>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#powernow_table\">powernow_table</a>, <a class=\"id\" href=\"#pstate\">pstate</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#available_cores\">available_cores</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#freqs\">freqs</a>.<a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpufreq_notify_transition\">cpufreq_notify_transition</a>(&amp;<a class=\"id\" href=\"#freqs\">freqs</a>, <a class=\"id\" href=\"#CPUFREQ_PRECHANGE\">CPUFREQ_PRECHANGE</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#transition_pstate\">transition_pstate</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#pstate\">pstate</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#freqs\">freqs</a>.<a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#find_khz_freq_from_pstate\">find_khz_freq_from_pstate</a>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#powernow_table\">powernow_table</a>, <a class=\"id\" href=\"#pstate\">pstate</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#available_cores\">available_cores</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#freqs\">freqs</a>.<a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpufreq_notify_transition\">cpufreq_notify_transition</a>(&amp;<a class=\"id\" href=\"#freqs\">freqs</a>, <a class=\"id\" href=\"#CPUFREQ_POSTCHANGE\">CPUFREQ_POSTCHANGE</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Driver entry point to switch to the target frequency */</span>", 
"static int <a class=\"id\" href=\"#powernowk8_target\">powernowk8_target</a>(struct <a class=\"id\" href=\"#cpufreq_policy\">cpufreq_policy</a> *<a class=\"id\" href=\"#pol\">pol</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#targfreq\">targfreq</a>, unsigned <a class=\"id\" href=\"#relation\">relation</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> <a class=\"id\" href=\"#oldmask\">oldmask</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#powernow_k8_data\">powernow_k8_data</a> *<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#powernow_data\">powernow_data</a>, <a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#checkfid\">checkfid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#checkvid\">checkvid</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#newstate\">newstate</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#data\">data</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#checkfid\">checkfid</a> = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#currfid\">currfid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#checkvid\">checkvid</a> = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#currvid\">currvid</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* only run on specific CPU from here on. */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* This is poor form: use a workqueue or smp_call_function_single */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#alloc_cpumask_var\">alloc_cpumask_var</a>(&amp;<a class=\"id\" href=\"#oldmask\">oldmask</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_copy\">cpumask_copy</a>(<a class=\"id\" href=\"#oldmask\">oldmask</a>, <a class=\"id\" href=\"#tsk_cpus_allowed\">tsk_cpus_allowed</a>(<a class=\"id\" href=\"#current\">current</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_cpus_allowed_ptr\">set_cpus_allowed_ptr</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#cpumask_of\">cpumask_of</a>(<a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#cpu\">cpu</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>() != <a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> <a class=\"id\" href=\"#PFX\">PFX</a> \"limiting to cpu %u failed\\n\", <a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pending_bit_stuck\">pending_bit_stuck</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> <a class=\"id\" href=\"#PFX\">PFX</a> \"failing targ, change pending bit set\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"targ: cpu %d, %d kHz, min %d, max %d, relation %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#targfreq\">targfreq</a>, <a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#min\">min</a>, <a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#max\">max</a>, <a class=\"id\" href=\"#relation\">relation</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#query_current_values_with_pending_wait\">query_current_values_with_pending_wait</a>(<a class=\"id\" href=\"#data\">data</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_family\">cpu_family</a> != <a class=\"id\" href=\"#CPU_HW_PSTATE\">CPU_HW_PSTATE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"targ: curr fid 0x%x, vid 0x%x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#currfid\">currfid</a>, <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#currvid\">currvid</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#checkvid\">checkvid</a> != <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#currvid\">currvid</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#checkfid\">checkfid</a> != <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#currfid\">currfid</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> <a class=\"id\" href=\"#PFX\">PFX</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"error - out of sync, fix 0x%x 0x%x, \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"vid 0x%x 0x%x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#checkfid\">checkfid</a>, <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#currfid\">currfid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#checkvid\">checkvid</a>, <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#currvid\">currvid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpufreq_frequency_table_target\">cpufreq_frequency_table_target</a>(<a class=\"id\" href=\"#pol\">pol</a>, <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#powernow_table\">powernow_table</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#targfreq\">targfreq</a>, <a class=\"id\" href=\"#relation\">relation</a>, &amp;<a class=\"id\" href=\"#newstate\">newstate</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#fidvid_mutex\">fidvid_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#powernow_k8_acpi_pst_values\">powernow_k8_acpi_pst_values</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#newstate\">newstate</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_family\">cpu_family</a> == <a class=\"id\" href=\"#CPU_HW_PSTATE\">CPU_HW_PSTATE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#transition_frequency_pstate\">transition_frequency_pstate</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#newstate\">newstate</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#transition_frequency_fidvid\">transition_frequency_fidvid</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#newstate\">newstate</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> <a class=\"id\" href=\"#PFX\">PFX</a> \"transition frequency failed\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#fidvid_mutex\">fidvid_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#fidvid_mutex\">fidvid_mutex</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_family\">cpu_family</a> == <a class=\"id\" href=\"#CPU_HW_PSTATE\">CPU_HW_PSTATE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#find_khz_freq_from_pstate\">find_khz_freq_from_pstate</a>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#powernow_table\">powernow_table</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#newstate\">newstate</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#find_khz_freq_from_fid\">find_khz_freq_from_fid</a>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#currfid\">currfid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<a class=\"id\" href=\"#err_out\">err_out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_cpus_allowed_ptr\">set_cpus_allowed_ptr</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#oldmask\">oldmask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_cpumask_var\">free_cpumask_var</a>(<a class=\"id\" href=\"#oldmask\">oldmask</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Driver entry point to verify the policy and range of frequencies */</span>", 
"static int <a class=\"id\" href=\"#powernowk8_verify\">powernowk8_verify</a>(struct <a class=\"id\" href=\"#cpufreq_policy\">cpufreq_policy</a> *<a class=\"id\" href=\"#pol\">pol</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#powernow_k8_data\">powernow_k8_data</a> *<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#powernow_data\">powernow_data</a>, <a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#data\">data</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cpufreq_frequency_table_verify\">cpufreq_frequency_table_verify</a>(<a class=\"id\" href=\"#pol\">pol</a>, <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#powernow_table\">powernow_table</a>);", 
"}", 
"", 
"struct <a class=\"id\" href=\"#init_on_cpu\">init_on_cpu</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#powernow_k8_data\">powernow_k8_data</a> *<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"};", 
"", 
"static void <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#powernowk8_cpu_init_on_cpu\">powernowk8_cpu_init_on_cpu</a>(void *<a class=\"id\" href=\"#_init_on_cpu\">_init_on_cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#init_on_cpu\">init_on_cpu</a> *<a class=\"id\" href=\"#init_on_cpu\">init_on_cpu</a> = <a class=\"id\" href=\"#_init_on_cpu\">_init_on_cpu</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pending_bit_stuck\">pending_bit_stuck</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> <a class=\"id\" href=\"#PFX\">PFX</a> \"failing init, change pending bit set\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_on_cpu\">init_on_cpu</a>-><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#query_current_values_with_pending_wait\">query_current_values_with_pending_wait</a>(<a class=\"id\" href=\"#init_on_cpu\">init_on_cpu</a>-><a class=\"id\" href=\"#data\">data</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_on_cpu\">init_on_cpu</a>-><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_family\">cpu_family</a> == <a class=\"id\" href=\"#CPU_OPTERON\">CPU_OPTERON</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fidvid_msr_init\">fidvid_msr_init</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_on_cpu\">init_on_cpu</a>-><a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"}", 
"", 
"<span class=\"comment\">/* per CPU init entry point to the driver */</span>", 
"static int <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#powernowk8_cpu_init\">powernowk8_cpu_init</a>(struct <a class=\"id\" href=\"#cpufreq_policy\">cpufreq_policy</a> *<a class=\"id\" href=\"#pol\">pol</a>)", 
"{", 
"<span class=\"ts\"/>static const char <a class=\"id\" href=\"#ACPI_PSS_BIOS_BUG_MSG\">ACPI_PSS_BIOS_BUG_MSG</a>[] =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> <a class=\"id\" href=\"#FW_BUG\">FW_BUG</a> <a class=\"id\" href=\"#PFX\">PFX</a> \"No compatible ACPI _PSS objects found.\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FW_BUG\">FW_BUG</a> <a class=\"id\" href=\"#PFX\">PFX</a> \"Try again with latest BIOS.\\n\";", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#powernow_k8_data\">powernow_k8_data</a> *<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#init_on_cpu\">init_on_cpu</a> <a class=\"id\" href=\"#init_on_cpu\">init_on_cpu</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a> = &amp;<a class=\"id\" href=\"#cpu_data\">cpu_data</a>(<a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpu_online\">cpu_online</a>(<a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#cpu\">cpu</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_call_function_single\">smp_call_function_single</a>(<a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#check_supported_cpu\">check_supported_cpu</a>, &amp;<a class=\"id\" href=\"#rc\">rc</a>, 1);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#powernow_k8_data\">powernow_k8_data</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#data\">data</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> <a class=\"id\" href=\"#PFX\">PFX</a> \"unable to alloc powernow_k8_data\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#currpstate\">currpstate</a> = <a class=\"id\" href=\"#HW_PSTATE_INVALID\">HW_PSTATE_INVALID</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#powernow_k8_cpu_init_acpi\">powernow_k8_cpu_init_acpi</a>(<a class=\"id\" href=\"#data\">data</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Use the PSB BIOS structure. This is only availabe on</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * an UP version, and is deprecated by AMD.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#num_online_cpus\">num_online_cpus</a>() != 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk_once\">printk_once</a>(<a class=\"id\" href=\"#ACPI_PSS_BIOS_BUG_MSG\">ACPI_PSS_BIOS_BUG_MSG</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#cpu\">cpu</a> != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> <a class=\"id\" href=\"#FW_BUG\">FW_BUG</a> <a class=\"id\" href=\"#PFX\">PFX</a> \"No ACPI _PSS objects for \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"CPU other than CPU0. Complain to your BIOS \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"vendor.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#find_psb_table\">find_psb_table</a>(<a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Take a crude guess here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * That guess was in microseconds, so multiply with 1000 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#cpuinfo\">cpuinfo</a>.<a class=\"id\" href=\"#transition_latency\">transition_latency</a> = (", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> ((<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#rvo\">rvo</a> + 8) * <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#vstable\">vstable</a> * <a class=\"id\" href=\"#VST_UNITS_20US\">VST_UNITS_20US</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> ((1 << <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#irt\">irt</a>) * 30)) * 1000;", 
"<span class=\"ts\"/>} else <span class=\"comment\">/* ACPI _PSS objects available */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#cpuinfo\">cpuinfo</a>.<a class=\"id\" href=\"#transition_latency\">transition_latency</a> = <a class=\"id\" href=\"#get_transition_latency\">get_transition_latency</a>(<a class=\"id\" href=\"#data\">data</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* only run on specific CPU from here on */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_on_cpu\">init_on_cpu</a>.<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_call_function_single\">smp_call_function_single</a>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#powernowk8_cpu_init_on_cpu\">powernowk8_cpu_init_on_cpu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#init_on_cpu\">init_on_cpu</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#init_on_cpu\">init_on_cpu</a>.<a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out_exit_acpi\">err_out_exit_acpi</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_family\">cpu_family</a> == <a class=\"id\" href=\"#CPU_HW_PSTATE\">CPU_HW_PSTATE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_copy\">cpumask_copy</a>(<a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#cpus\">cpus</a>, <a class=\"id\" href=\"#cpumask_of\">cpumask_of</a>(<a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#cpu\">cpu</a>));", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_copy\">cpumask_copy</a>(<a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#cpus\">cpus</a>, <a class=\"id\" href=\"#cpu_core_mask\">cpu_core_mask</a>(<a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#cpu\">cpu</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#available_cores\">available_cores</a> = <a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#cpus\">cpus</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_family\">cpu_family</a> == <a class=\"id\" href=\"#CPU_HW_PSTATE\">CPU_HW_PSTATE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#find_khz_freq_from_pstate\">find_khz_freq_from_pstate</a>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#powernow_table\">powernow_table</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#currpstate\">currpstate</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#find_khz_freq_from_fid\">find_khz_freq_from_fid</a>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#currfid\">currfid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"policy current frequency %d kHz\\n\", <a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#cur\">cur</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* min/max the cpu is capable of */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpufreq_frequency_table_cpuinfo\">cpufreq_frequency_table_cpuinfo</a>(<a class=\"id\" href=\"#pol\">pol</a>, <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#powernow_table\">powernow_table</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> <a class=\"id\" href=\"#FW_BUG\">FW_BUG</a> <a class=\"id\" href=\"#PFX\">PFX</a> \"invalid powernow_table\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#powernow_k8_cpu_exit_acpi\">powernow_k8_cpu_exit_acpi</a>(<a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#powernow_table\">powernow_table</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check for APERF/MPERF support in hardware */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has\">cpu_has</a>(<a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#X86_FEATURE_APERFMPERF\">X86_FEATURE_APERFMPERF</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpufreq_amd64_driver\">cpufreq_amd64_driver</a>.<a class=\"id\" href=\"#getavg\">getavg</a> = <a class=\"id\" href=\"#cpufreq_get_measured_perf\">cpufreq_get_measured_perf</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpufreq_frequency_table_get_attr\">cpufreq_frequency_table_get_attr</a>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#powernow_table\">powernow_table</a>, <a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_family\">cpu_family</a> == <a class=\"id\" href=\"#CPU_HW_PSTATE\">CPU_HW_PSTATE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"cpu_init done, current pstate 0x%x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#currpstate\">currpstate</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"cpu_init done, current fid 0x%x, vid 0x%x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#currfid\">currfid</a>, <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#currvid\">currvid</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#powernow_data\">powernow_data</a>, <a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#cpu\">cpu</a>) = <a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#err_out_exit_acpi\">err_out_exit_acpi</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#powernow_k8_cpu_exit_acpi\">powernow_k8_cpu_exit_acpi</a>(<a class=\"id\" href=\"#data\">data</a>);", 
"", 
"<a class=\"id\" href=\"#err_out\">err_out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__devexit\">__devexit</a> <a class=\"id\" href=\"#powernowk8_cpu_exit\">powernowk8_cpu_exit</a>(struct <a class=\"id\" href=\"#cpufreq_policy\">cpufreq_policy</a> *<a class=\"id\" href=\"#pol\">pol</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#powernow_k8_data\">powernow_k8_data</a> *<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#powernow_data\">powernow_data</a>, <a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#data\">data</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#powernow_k8_cpu_exit_acpi\">powernow_k8_cpu_exit_acpi</a>(<a class=\"id\" href=\"#data\">data</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpufreq_frequency_table_put_attr\">cpufreq_frequency_table_put_attr</a>(<a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#powernow_table\">powernow_table</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#powernow_data\">powernow_data</a>, <a class=\"id\" href=\"#pol\">pol</a>-><a class=\"id\" href=\"#cpu\">cpu</a>) = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#query_values_on_cpu\">query_values_on_cpu</a>(void *<a class=\"id\" href=\"#_err\">_err</a>)", 
"{", 
"<span class=\"ts\"/>int *<a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#_err\">_err</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#powernow_k8_data\">powernow_k8_data</a> *<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#powernow_data\">powernow_data</a>);", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#query_current_values_with_pending_wait\">query_current_values_with_pending_wait</a>(<a class=\"id\" href=\"#data\">data</a>);", 
"}", 
"", 
"static unsigned int <a class=\"id\" href=\"#powernowk8_get\">powernowk8_get</a>(unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#powernow_k8_data\">powernow_k8_data</a> *<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#powernow_data\">powernow_data</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#khz\">khz</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#data\">data</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_call_function_single\">smp_call_function_single</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#query_values_on_cpu\">query_values_on_cpu</a>, &amp;<a class=\"id\" href=\"#err\">err</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_family\">cpu_family</a> == <a class=\"id\" href=\"#CPU_HW_PSTATE\">CPU_HW_PSTATE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#khz\">khz</a> = <a class=\"id\" href=\"#find_khz_freq_from_pstate\">find_khz_freq_from_pstate</a>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#powernow_table\">powernow_table</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#currpstate\">currpstate</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#khz\">khz</a> = <a class=\"id\" href=\"#find_khz_freq_from_fid\">find_khz_freq_from_fid</a>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#currfid\">currfid</a>);", 
"", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#khz\">khz</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#_cpb_toggle_msrs\">_cpb_toggle_msrs</a>(<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_online_cpus\">get_online_cpus</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdmsr_on_cpus\">rdmsr_on_cpus</a>(<a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a>, <a class=\"id\" href=\"#MSR_K7_HWCR\">MSR_K7_HWCR</a>, <a class=\"id\" href=\"#msrs\">msrs</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#msr\">msr</a> *<a class=\"id\" href=\"#reg\">reg</a> = <a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#msrs\">msrs</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#l\">l</a> &= ~<a class=\"id\" href=\"#BIT\">BIT</a>(25);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#l\">l</a> |= <a class=\"id\" href=\"#BIT\">BIT</a>(25);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wrmsr_on_cpus\">wrmsr_on_cpus</a>(<a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a>, <a class=\"id\" href=\"#MSR_K7_HWCR\">MSR_K7_HWCR</a>, <a class=\"id\" href=\"#msrs\">msrs</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_online_cpus\">put_online_cpus</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Switch on/off core performance boosting.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 0=disable</span>", 
"<span class=\"comment\"> * 1=enable.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#cpb_toggle\">cpb_toggle</a>(<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpb_capable\">cpb_capable</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a> && !<a class=\"id\" href=\"#cpb_enabled\">cpb_enabled</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpb_enabled\">cpb_enabled</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#_cpb_toggle_msrs\">_cpb_toggle_msrs</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> <a class=\"id\" href=\"#PFX\">PFX</a> \"Core Boosting enabled.\\n\");", 
"<span class=\"ts\"/>} else if (!<a class=\"id\" href=\"#t\">t</a> && <a class=\"id\" href=\"#cpb_enabled\">cpb_enabled</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpb_enabled\">cpb_enabled</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#_cpb_toggle_msrs\">_cpb_toggle_msrs</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> <a class=\"id\" href=\"#PFX\">PFX</a> \"Core Boosting disabled.\\n\");", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#store_cpb\">store_cpb</a>(struct <a class=\"id\" href=\"#cpufreq_policy\">cpufreq_policy</a> *<a class=\"id\" href=\"#policy\">policy</a>, const char *<a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#val\">val</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#strict_strtoul\">strict_strtoul</a>(<a class=\"id\" href=\"#buf\">buf</a>, 10, &amp;<a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a> && (<a class=\"id\" href=\"#val\">val</a> == 0 || <a class=\"id\" href=\"#val\">val</a> == 1) && <a class=\"id\" href=\"#cpb_capable\">cpb_capable</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpb_toggle\">cpb_toggle</a>(<a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#show_cpb\">show_cpb</a>(struct <a class=\"id\" href=\"#cpufreq_policy\">cpufreq_policy</a> *<a class=\"id\" href=\"#policy\">policy</a>, char *<a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%u\\n\", <a class=\"id\" href=\"#cpb_enabled\">cpb_enabled</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#define_one_rw\">define_one_rw</a>(<a class=\"id\" href=\"#_name\">_name</a>) \\", 
"static struct <a class=\"id\" href=\"#freq_attr\">freq_attr</a> <a class=\"id\" href=\"#_name\">_name</a> = \\", 
"<a class=\"id\" href=\"#__ATTR\">__ATTR</a>(<a class=\"id\" href=\"#_name\">_name</a>, 0644, <a class=\"id\" href=\"#show_\">show_</a>##<a class=\"id\" href=\"#_name\">_name</a>, <a class=\"id\" href=\"#store_\">store_</a>##<a class=\"id\" href=\"#_name\">_name</a>)", 
"", 
"<a class=\"id\" href=\"#define_one_rw\">define_one_rw</a>(<a class=\"id\" href=\"#cpb\">cpb</a>);", 
"", 
"static struct <a class=\"id\" href=\"#freq_attr\">freq_attr</a> *<a class=\"id\" href=\"#powernow_k8_attr\">powernow_k8_attr</a>[] = {", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#cpufreq_freq_attr_scaling_available_freqs\">cpufreq_freq_attr_scaling_available_freqs</a>,", 
"<span class=\"ts\"/>&amp;<a class=\"id\" href=\"#cpb\">cpb</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>,", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#cpufreq_driver\">cpufreq_driver</a> <a class=\"id\" href=\"#cpufreq_amd64_driver\">cpufreq_amd64_driver</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#verify\">verify</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#powernowk8_verify\">powernowk8_verify</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#target\">target</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#powernowk8_target\">powernowk8_target</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#bios_limit\">bios_limit</a><span class=\"ts\"/>= <a class=\"id\" href=\"#acpi_processor_get_bios_limit\">acpi_processor_get_bios_limit</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#init\">init</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#powernowk8_cpu_init\">powernowk8_cpu_init</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#exit\">exit</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#__devexit_p\">__devexit_p</a>(<a class=\"id\" href=\"#powernowk8_cpu_exit\">powernowk8_cpu_exit</a>),", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#get\">get</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#powernowk8_get\">powernowk8_get</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>= \"powernow-k8\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#owner\">owner</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#THIS_MODULE\">THIS_MODULE</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#attr\">attr</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#powernow_k8_attr\">powernow_k8_attr</a>,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Clear the boost-disable flag on the CPU_DOWN path so that this cpu</span>", 
"<span class=\"comment\"> * cannot block the remaining ones from boosting. On the CPU_UP path we</span>", 
"<span class=\"comment\"> * simply keep the boost-disable flag in sync with the current global</span>", 
"<span class=\"comment\"> * state.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#cpb_notify\">cpb_notify</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nb\">nb</a>, unsigned long <a class=\"id\" href=\"#action\">action</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      void *<a class=\"id\" href=\"#hcpu\">hcpu</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#cpu\">cpu</a> = (long)<a class=\"id\" href=\"#hcpu\">hcpu</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#lo\">lo</a>, <a class=\"id\" href=\"#hi\">hi</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#action\">action</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_UP_PREPARE\">CPU_UP_PREPARE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_UP_PREPARE_FROZEN\">CPU_UP_PREPARE_FROZEN</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpb_enabled\">cpb_enabled</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdmsr_on_cpu\">rdmsr_on_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#MSR_K7_HWCR\">MSR_K7_HWCR</a>, &amp;<a class=\"id\" href=\"#lo\">lo</a>, &amp;<a class=\"id\" href=\"#hi\">hi</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lo\">lo</a> |= <a class=\"id\" href=\"#BIT\">BIT</a>(25);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wrmsr_on_cpu\">wrmsr_on_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#MSR_K7_HWCR\">MSR_K7_HWCR</a>, <a class=\"id\" href=\"#lo\">lo</a>, <a class=\"id\" href=\"#hi\">hi</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_DOWN_PREPARE\">CPU_DOWN_PREPARE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_DOWN_PREPARE_FROZEN\">CPU_DOWN_PREPARE_FROZEN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdmsr_on_cpu\">rdmsr_on_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#MSR_K7_HWCR\">MSR_K7_HWCR</a>, &amp;<a class=\"id\" href=\"#lo\">lo</a>, &amp;<a class=\"id\" href=\"#hi\">hi</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lo\">lo</a> &= ~<a class=\"id\" href=\"#BIT\">BIT</a>(25);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wrmsr_on_cpu\">wrmsr_on_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#MSR_K7_HWCR\">MSR_K7_HWCR</a>, <a class=\"id\" href=\"#lo\">lo</a>, <a class=\"id\" href=\"#hi\">hi</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_OK\">NOTIFY_OK</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> <a class=\"id\" href=\"#cpb_nb\">cpb_nb</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#notifier_call\">notifier_call</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#cpb_notify\">cpb_notify</a>,", 
"};", 
"", 
"<span class=\"comment\">/* driver entry point for init */</span>", 
"static int <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#powernowk8_init\">powernowk8_init</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#supported_cpus\">supported_cpus</a> = 0, <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_call_function_single\">smp_call_function_single</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#check_supported_cpu\">check_supported_cpu</a>, &amp;<a class=\"id\" href=\"#rc\">rc</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#supported_cpus\">supported_cpus</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#supported_cpus\">supported_cpus</a> != <a class=\"id\" href=\"#num_online_cpus\">num_online_cpus</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> <a class=\"id\" href=\"#PFX\">PFX</a> \"Found %d %s (%d cpu cores) (\" <a class=\"id\" href=\"#VERSION\">VERSION</a> \")\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num_online_nodes\">num_online_nodes</a>(), <a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86_model_id\">x86_model_id</a>, <a class=\"id\" href=\"#supported_cpus\">supported_cpus</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#boot_cpu_has\">boot_cpu_has</a>(<a class=\"id\" href=\"#X86_FEATURE_CPB\">X86_FEATURE_CPB</a>)) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpb_capable\">cpb_capable</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#register_cpu_notifier\">register_cpu_notifier</a>(&amp;<a class=\"id\" href=\"#cpb_nb\">cpb_nb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msrs\">msrs</a> = <a class=\"id\" href=\"#msrs_alloc\">msrs_alloc</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#msrs\">msrs</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: Error allocating msrs!\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdmsr_on_cpus\">rdmsr_on_cpus</a>(<a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a>, <a class=\"id\" href=\"#MSR_K7_HWCR\">MSR_K7_HWCR</a>, <a class=\"id\" href=\"#msrs\">msrs</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#msr\">msr</a> *<a class=\"id\" href=\"#reg\">reg</a> = <a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#msrs\">msrs</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpb_enabled\">cpb_enabled</a> |= !(!!(<a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#l\">l</a> &amp; <a class=\"id\" href=\"#BIT\">BIT</a>(25)));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> <a class=\"id\" href=\"#PFX\">PFX</a> \"Core Performance Boosting: %s.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#cpb_enabled\">cpb_enabled</a> ? \"on\" : \"off\"));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cpufreq_register_driver\">cpufreq_register_driver</a>(&amp;<a class=\"id\" href=\"#cpufreq_amd64_driver\">cpufreq_amd64_driver</a>);", 
"}", 
"", 
"<span class=\"comment\">/* driver entry point for term */</span>", 
"static void <a class=\"id\" href=\"#__exit\">__exit</a> <a class=\"id\" href=\"#powernowk8_exit\">powernowk8_exit</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"exit\\n\");", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#boot_cpu_has\">boot_cpu_has</a>(<a class=\"id\" href=\"#X86_FEATURE_CPB\">X86_FEATURE_CPB</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msrs_free\">msrs_free</a>(<a class=\"id\" href=\"#msrs\">msrs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msrs\">msrs</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unregister_cpu_notifier\">unregister_cpu_notifier</a>(&amp;<a class=\"id\" href=\"#cpb_nb\">cpb_nb</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpufreq_unregister_driver\">cpufreq_unregister_driver</a>(&amp;<a class=\"id\" href=\"#cpufreq_amd64_driver\">cpufreq_amd64_driver</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#MODULE_AUTHOR\">MODULE_AUTHOR</a>(\"Paul Devriendt <paul.devriendt@amd.com> and \"", 
"<span class=\"ts\"/><span class=\"ts\"/>\"Mark Langsdorf <mark.langsdorf@amd.com>\");", 
"<a class=\"id\" href=\"#MODULE_DESCRIPTION\">MODULE_DESCRIPTION</a>(\"AMD Athlon 64 and Opteron processor frequency driver.\");", 
"<a class=\"id\" href=\"#MODULE_LICENSE\">MODULE_LICENSE</a>(\"GPL\");", 
"", 
"<a class=\"id\" href=\"#late_initcall\">late_initcall</a>(<a class=\"id\" href=\"#powernowk8_init\">powernowk8_init</a>);", 
"<a class=\"id\" href=\"#module_exit\">module_exit</a>(<a class=\"id\" href=\"#powernowk8_exit\">powernowk8_exit</a>);", 
];
xr_frag_insert('l/13/e91670da63632989e533a89b92c7855d397115.xr', __xr_tmp);
