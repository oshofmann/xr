var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_ERR_H\">_LINUX_ERR_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_ERR_H\">_LINUX_ERR_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#compiler\">compiler</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Kernel pointers have redundant information, so we can use a</span>", 
"<span class=\"comment\"> * scheme where we can return either an error code or a dentry</span>", 
"<span class=\"comment\"> * pointer with the same return value.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This should be a per-architecture thing, to allow different</span>", 
"<span class=\"comment\"> * error and pointer decisions.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_ERRNO\">MAX_ERRNO</a><span class=\"ts\"/>4095", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__ASSEMBLY__\">__ASSEMBLY__</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IS_ERR_VALUE\">IS_ERR_VALUE</a>(<a class=\"id\" href=\"#x\">x</a>) <a class=\"id\" href=\"#unlikely\">unlikely</a>((<a class=\"id\" href=\"#x\">x</a>) >= (unsigned long)-<a class=\"id\" href=\"#MAX_ERRNO\">MAX_ERRNO</a>)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void * <a class=\"id\" href=\"#__must_check\">__must_check</a> <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(long <a class=\"id\" href=\"#error\">error</a>)", 
"{", 
"<span class=\"ts\"/>return (void *) <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> long <a class=\"id\" href=\"#__must_check\">__must_check</a> <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(const void *<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"{", 
"<span class=\"ts\"/>return (long) <a class=\"id\" href=\"#ptr\">ptr</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> long <a class=\"id\" href=\"#__must_check\">__must_check</a> <a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(const void *<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#IS_ERR_VALUE\">IS_ERR_VALUE</a>((unsigned long)<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> long <a class=\"id\" href=\"#__must_check\">__must_check</a> <a class=\"id\" href=\"#IS_ERR_OR_NULL\">IS_ERR_OR_NULL</a>(const void *<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"{", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#ptr\">ptr</a> || <a class=\"id\" href=\"#IS_ERR_VALUE\">IS_ERR_VALUE</a>((unsigned long)<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ERR_CAST - Explicitly cast an error-valued pointer to another pointer type</span>", 
"<span class=\"comment\"> * @ptr: The pointer to cast.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Explicitly cast an error-valued pointer to another pointer type in such a</span>", 
"<span class=\"comment\"> * way as to make it clear that's what's going on.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void * <a class=\"id\" href=\"#__must_check\">__must_check</a> <a class=\"id\" href=\"#ERR_CAST\">ERR_CAST</a>(const void *<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* cast away the const */</span>", 
"<span class=\"ts\"/>return (void *) <a class=\"id\" href=\"#ptr\">ptr</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _LINUX_ERR_H */</span>", 
];
xr_frag_insert('l/14/30dbd9b418730d7fc6726283d58a372e14aaee.xr', __xr_tmp);
