var __xr_tmp = [
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * has_capability - Determine if a task has a superior capability available</span>", 
"<span class=\"comment\"> * @t: The task in question</span>", 
"<span class=\"comment\"> * @cap: The capability to be tested for</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return true if the specified task has the given superior capability</span>", 
"<span class=\"comment\"> * currently in effect, false if not.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that this does not set PF_SUPERPRIV on the task.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#has_capability\">has_capability</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#cap\">cap</a>) (<a class=\"id\" href=\"#security_real_capable\">security_real_capable</a>((<a class=\"id\" href=\"#t\">t</a>), (<a class=\"id\" href=\"#cap\">cap</a>)) == 0)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * has_capability_noaudit - Determine if a task has a superior capability available (unaudited)</span>", 
"<span class=\"comment\"> * @t: The task in question</span>", 
"<span class=\"comment\"> * @cap: The capability to be tested for</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return true if the specified task has the given superior capability</span>", 
"<span class=\"comment\"> * currently in effect, false if not, but don't write an audit message for the</span>", 
"<span class=\"comment\"> * check.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that this does not set PF_SUPERPRIV on the task.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#has_capability_noaudit\">has_capability_noaudit</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#cap\">cap</a>) \\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#security_real_capable_noaudit\">security_real_capable_noaudit</a>((<a class=\"id\" href=\"#t\">t</a>), (<a class=\"id\" href=\"#cap\">cap</a>)) == 0)", 
"", 
"extern int <a class=\"id\" href=\"#capable\">capable</a>(int <a class=\"id\" href=\"#cap\">cap</a>);", 
"", 
"<span class=\"comment\">/* audit system wants to get cap info from files as well */</span>", 
"struct <a class=\"id\" href=\"#dentry\">dentry</a>;", 
"extern int <a class=\"id\" href=\"#get_vfs_caps_from_disk\">get_vfs_caps_from_disk</a>(const struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, struct <a class=\"id\" href=\"#cpu_vfs_cap_data\">cpu_vfs_cap_data</a> *<a class=\"id\" href=\"#cpu_caps\">cpu_caps</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __KERNEL__ */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !_LINUX_CAPABILITY_H */</span>", 
];
xr_frag_insert('l/15/24debcc7846631068f84b168953c5882327ee2.xr', __xr_tmp);
