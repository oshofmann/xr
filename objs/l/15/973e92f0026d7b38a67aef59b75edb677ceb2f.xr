var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * net/sched/ematch.c<span class=\"ts\"/><span class=\"ts\"/>Extended Match API</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>This program is free software; you can redistribute it and/or</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>modify it under the terms of the GNU General Public License</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>as published by the Free Software Foundation; either version</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>2 of the License, or (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Authors:<span class=\"ts\"/>Thomas Graf &lt;tgraf@suug.ch&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ==========================================================================</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * An extended match (ematch) is a small classification tool not worth</span>", 
"<span class=\"comment\"> * writing a full classifier for. Ematches can be interconnected to form</span>", 
"<span class=\"comment\"> * a logic expression and get attached to classifiers to extend their</span>", 
"<span class=\"comment\"> * functionatlity.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The userspace part transforms the logic expressions into an array</span>", 
"<span class=\"comment\"> * consisting of multiple sequences of interconnected ematches separated</span>", 
"<span class=\"comment\"> * by markers. Precedence is implemented by a special ematch kind</span>", 
"<span class=\"comment\"> * referencing a sequence beyond the marker of the current sequence</span>", 
"<span class=\"comment\"> * causing the current position in the sequence to be pushed onto a stack</span>", 
"<span class=\"comment\"> * to allow the current position to be overwritten by the position referenced</span>", 
"<span class=\"comment\"> * in the special ematch. Matching continues in the new sequence until a</span>", 
"<span class=\"comment\"> * marker is reached causing the position to be restored from the stack.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Example:</span>", 
"<span class=\"comment\"> *          A AND (B1 OR B2) AND C AND D</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *              -------&gt;-PUSH-------</span>", 
"<span class=\"comment\"> *    --&gt;--    /         --&gt;--      \\   --&gt;--</span>", 
"<span class=\"comment\"> *   /     \\  /         /     \\      \\ /     \\</span>", 
"<span class=\"comment\"> * +-------+-------+-------+-------+-------+--------+</span>", 
"<span class=\"comment\"> * | A AND | B AND | C AND | D END | B1 OR | B2 END |</span>", 
"<span class=\"comment\"> * +-------+-------+-------+-------+-------+--------+</span>", 
"<span class=\"comment\"> *                    \\                      /</span>", 
"<span class=\"comment\"> *                     --------&lt;-POP---------</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * where B is a virtual ematch referencing to sequence starting with B1.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ==========================================================================</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * How to write an ematch in 60 seconds</span>", 
"<span class=\"comment\"> * ------------------------------------</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   1) Provide a matcher function:</span>", 
"<span class=\"comment\"> *      static int my_match(struct sk_buff *skb, struct tcf_ematch *m,</span>", 
"<span class=\"comment\"> *                          struct tcf_pkt_info *info)</span>", 
"<span class=\"comment\"> *      {</span>", 
"<span class=\"comment\"> *      <span class=\"ts\"/>struct mydata *d = (struct mydata *) m-&gt;data;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *      <span class=\"ts\"/>if (...matching goes here...)</span>", 
"<span class=\"comment\"> *      <span class=\"ts\"/><span class=\"ts\"/>return 1;</span>", 
"<span class=\"comment\"> *      <span class=\"ts\"/>else</span>", 
"<span class=\"comment\"> *      <span class=\"ts\"/><span class=\"ts\"/>return 0;</span>", 
"<span class=\"comment\"> *      }</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   2) Fill out a struct tcf_ematch_ops:</span>", 
"<span class=\"comment\"> *      static struct tcf_ematch_ops my_ops = {</span>", 
"<span class=\"comment\"> *      <span class=\"ts\"/>.kind = unique id,</span>", 
"<span class=\"comment\"> *      <span class=\"ts\"/>.datalen = sizeof(struct mydata),</span>", 
"<span class=\"comment\"> *      <span class=\"ts\"/>.match = my_match,</span>", 
"<span class=\"comment\"> *      <span class=\"ts\"/>.owner = THIS_MODULE,</span>", 
"<span class=\"comment\"> *      };</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   3) Register/Unregister your ematch:</span>", 
"<span class=\"comment\"> *      static int __init init_my_ematch(void)</span>", 
"<span class=\"comment\"> *      {</span>", 
"<span class=\"comment\"> *      <span class=\"ts\"/>return tcf_em_register(&amp;my_ops);</span>", 
"<span class=\"comment\"> *      }</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *      static void __exit exit_my_ematch(void)</span>", 
"<span class=\"comment\"> *      {</span>", 
"<span class=\"comment\"> *      <span class=\"ts\"/>tcf_em_unregister(&amp;my_ops);</span>", 
"<span class=\"comment\"> *      }</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *      module_init(init_my_ematch);</span>", 
"<span class=\"comment\"> *      module_exit(exit_my_ematch);</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *   4) By now you should have two more seconds left, barely enough to</span>", 
"<span class=\"comment\"> *      open up a beer to watch the compilation going.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rtnetlink\">rtnetlink</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#skbuff\">skbuff</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#pkt_cls\">pkt_cls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#ematch_ops\">ematch_ops</a>);", 
"static <a class=\"id\" href=\"#DEFINE_RWLOCK\">DEFINE_RWLOCK</a>(<a class=\"id\" href=\"#ematch_mod_lock\">ematch_mod_lock</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#tcf_ematch_ops\">tcf_ematch_ops</a> * <a class=\"id\" href=\"#tcf_em_lookup\">tcf_em_lookup</a>(<a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#kind\">kind</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcf_ematch_ops\">tcf_ematch_ops</a> *<a class=\"id\" href=\"#e\">e</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#ematch_mod_lock\">ematch_mod_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#e\">e</a>, &amp;<a class=\"id\" href=\"#ematch_ops\">ematch_ops</a>, <a class=\"id\" href=\"#link\">link</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kind\">kind</a> == <a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#kind\">kind</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#try_module_get\">try_module_get</a>(<a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#owner\">owner</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#e\">e</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#ematch_mod_lock\">ematch_mod_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#e\">e</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#ematch_mod_lock\">ematch_mod_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tcf_em_register - register an extended match</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @ops: ematch operations lookup table</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function must be called by ematches to announce their presence.</span>", 
"<span class=\"comment\"> * The given @ops must have kind set to a unique identifier and the</span>", 
"<span class=\"comment\"> * callback match() must be implemented. All other callbacks are optional</span>", 
"<span class=\"comment\"> * and a fallback implementation is used instead.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns -EEXISTS if an ematch of the same kind has already registered.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#tcf_em_register\">tcf_em_register</a>(struct <a class=\"id\" href=\"#tcf_ematch_ops\">tcf_ematch_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EEXIST\">EEXIST</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcf_ematch_ops\">tcf_ematch_ops</a> *<a class=\"id\" href=\"#e\">e</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#match\">match</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock\">write_lock</a>(&amp;<a class=\"id\" href=\"#ematch_mod_lock\">ematch_mod_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#e\">e</a>, &amp;<a class=\"id\" href=\"#ematch_ops\">ematch_ops</a>, <a class=\"id\" href=\"#link\">link</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#kind\">kind</a> == <a class=\"id\" href=\"#e\">e</a>-><a class=\"id\" href=\"#kind\">kind</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#errout\">errout</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#link\">link</a>, &amp;<a class=\"id\" href=\"#ematch_ops\">ematch_ops</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<a class=\"id\" href=\"#errout\">errout</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#ematch_mod_lock\">ematch_mod_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#tcf_em_register\">tcf_em_register</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tcf_em_unregister - unregster and extended match</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @ops: ematch operations lookup table</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function must be called by ematches to announce their disappearance</span>", 
"<span class=\"comment\"> * for examples when the module gets unloaded. The @ops parameter must be</span>", 
"<span class=\"comment\"> * the same as the one used for registration.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns -ENOENT if no matching ematch was found.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#tcf_em_unregister\">tcf_em_unregister</a>(struct <a class=\"id\" href=\"#tcf_ematch_ops\">tcf_ematch_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock\">write_lock</a>(&amp;<a class=\"id\" href=\"#ematch_mod_lock\">ematch_mod_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#link\">link</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#ematch_mod_lock\">ematch_mod_lock</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#tcf_em_unregister\">tcf_em_unregister</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#tcf_ematch\">tcf_ematch</a> * <a class=\"id\" href=\"#tcf_em_get_match\">tcf_em_get_match</a>(struct <a class=\"id\" href=\"#tcf_ematch_tree\">tcf_ematch_tree</a> *<a class=\"id\" href=\"#tree\">tree</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#index\">index</a>)", 
"{", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#matches\">matches</a>[<a class=\"id\" href=\"#index\">index</a>];", 
"}", 
"", 
"", 
"static int <a class=\"id\" href=\"#tcf_em_validate\">tcf_em_validate</a>(struct <a class=\"id\" href=\"#tcf_proto\">tcf_proto</a> *<a class=\"id\" href=\"#tp\">tp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#tcf_ematch_tree_hdr\">tcf_ematch_tree_hdr</a> *<a class=\"id\" href=\"#tree_hdr\">tree_hdr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#tcf_ematch\">tcf_ematch</a> *<a class=\"id\" href=\"#em\">em</a>, struct <a class=\"id\" href=\"#nlattr\">nlattr</a> *<a class=\"id\" href=\"#nla\">nla</a>, int <a class=\"id\" href=\"#idx\">idx</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcf_ematch_hdr\">tcf_ematch_hdr</a> *<a class=\"id\" href=\"#em_hdr\">em_hdr</a> = <a class=\"id\" href=\"#nla_data\">nla_data</a>(<a class=\"id\" href=\"#nla\">nla</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#data_len\">data_len</a> = <a class=\"id\" href=\"#nla_len\">nla_len</a>(<a class=\"id\" href=\"#nla\">nla</a>) - sizeof(*<a class=\"id\" href=\"#em_hdr\">em_hdr</a>);", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a> = (void *) <a class=\"id\" href=\"#em_hdr\">em_hdr</a> + sizeof(*<a class=\"id\" href=\"#em_hdr\">em_hdr</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#TCF_EM_REL_VALID\">TCF_EM_REL_VALID</a>(<a class=\"id\" href=\"#em_hdr\">em_hdr</a>-><a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#errout\">errout</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#em_hdr\">em_hdr</a>-><a class=\"id\" href=\"#kind\">kind</a> == <a class=\"id\" href=\"#TCF_EM_CONTAINER\">TCF_EM_CONTAINER</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Special ematch called \"container\", carries an index</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * referencing an external ematch sequence. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#ref\">ref</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#data_len\">data_len</a> &lt; sizeof(<a class=\"id\" href=\"#ref\">ref</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#errout\">errout</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ref\">ref</a> = *(<a class=\"id\" href=\"#u32\">u32</a> *) <a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ref\">ref</a> >= <a class=\"id\" href=\"#tree_hdr\">tree_hdr</a>-><a class=\"id\" href=\"#nmatches\">nmatches</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#errout\">errout</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We do not allow backward jumps to avoid loops and jumps</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to our own position are of course illegal. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ref\">ref</a> <= <a class=\"id\" href=\"#idx\">idx</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#errout\">errout</a>;", 
"", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#em\">em</a>-><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#ref\">ref</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Note: This lookup will increase the module refcnt</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * of the ematch module referenced. In case of a failure,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * a destroy function is called by the underlying layer</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * which automatically releases the reference again, therefore</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the module MUST not be given back under any circumstances</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * here. Be aware, the destroy function assumes that the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * module is held if the ops field is non zero. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#em\">em</a>-><a class=\"id\" href=\"#ops\">ops</a> = <a class=\"id\" href=\"#tcf_em_lookup\">tcf_em_lookup</a>(<a class=\"id\" href=\"#em_hdr\">em_hdr</a>-><a class=\"id\" href=\"#kind\">kind</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#em\">em</a>-><a class=\"id\" href=\"#ops\">ops</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MODULES\">CONFIG_MODULES</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__rtnl_unlock\">__rtnl_unlock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#request_module\">request_module</a>(\"ematch-kind-%u\", <a class=\"id\" href=\"#em_hdr\">em_hdr</a>-><a class=\"id\" href=\"#kind\">kind</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rtnl_lock\">rtnl_lock</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#em\">em</a>-><a class=\"id\" href=\"#ops\">ops</a> = <a class=\"id\" href=\"#tcf_em_lookup\">tcf_em_lookup</a>(<a class=\"id\" href=\"#em_hdr\">em_hdr</a>-><a class=\"id\" href=\"#kind\">kind</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#em\">em</a>-><a class=\"id\" href=\"#ops\">ops</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We dropped the RTNL mutex in order to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * perform the module load. Tell the caller</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * to replay the request. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#em\">em</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#owner\">owner</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#errout\">errout</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* ematch module provides expected length of data, so we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * can do a basic sanity check. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#em\">em</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#datalen\">datalen</a> && <a class=\"id\" href=\"#data_len\">data_len</a> &lt; <a class=\"id\" href=\"#em\">em</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#datalen\">datalen</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#errout\">errout</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#em\">em</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#change\">change</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#em\">em</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#change\">change</a>(<a class=\"id\" href=\"#tp\">tp</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#data_len\">data_len</a>, <a class=\"id\" href=\"#em\">em</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#errout\">errout</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#data_len\">data_len</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* ematch module doesn't provide an own change</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * procedure and expects us to allocate and copy</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the ematch data.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * TCF_EM_SIMPLE may be specified stating that the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * data only consists of a u32 integer and the module</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * does not expected a memory reference but rather</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the value carried. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#em_hdr\">em_hdr</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#TCF_EM_SIMPLE\">TCF_EM_SIMPLE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#data_len\">data_len</a> &lt; sizeof(<a class=\"id\" href=\"#u32\">u32</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#errout\">errout</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#em\">em</a>-><a class=\"id\" href=\"#data\">data</a> = *(<a class=\"id\" href=\"#u32\">u32</a> *) <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#v\">v</a> = <a class=\"id\" href=\"#kmemdup\">kmemdup</a>(<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#data_len\">data_len</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#v\">v</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOBUFS\">ENOBUFS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#errout\">errout</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#em\">em</a>-><a class=\"id\" href=\"#data\">data</a> = (unsigned long) <a class=\"id\" href=\"#v\">v</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#em\">em</a>-><a class=\"id\" href=\"#matchid\">matchid</a> = <a class=\"id\" href=\"#em_hdr\">em_hdr</a>-><a class=\"id\" href=\"#matchid\">matchid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#em\">em</a>-><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#em_hdr\">em_hdr</a>-><a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#em\">em</a>-><a class=\"id\" href=\"#datalen\">datalen</a> = <a class=\"id\" href=\"#data_len\">data_len</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<a class=\"id\" href=\"#errout\">errout</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#nla_policy\">nla_policy</a> <a class=\"id\" href=\"#em_policy\">em_policy</a>[<a class=\"id\" href=\"#TCA_EMATCH_TREE_MAX\">TCA_EMATCH_TREE_MAX</a> + 1] = {", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#TCA_EMATCH_TREE_HDR\">TCA_EMATCH_TREE_HDR</a>]<span class=\"ts\"/>= { .<a class=\"id\" href=\"#len\">len</a> = sizeof(struct <a class=\"id\" href=\"#tcf_ematch_tree_hdr\">tcf_ematch_tree_hdr</a>) },", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#TCA_EMATCH_TREE_LIST\">TCA_EMATCH_TREE_LIST</a>]<span class=\"ts\"/>= { .<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#NLA_NESTED\">NLA_NESTED</a> },", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tcf_em_tree_validate - validate ematch config TLV and build ematch tree</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @tp: classifier kind handle</span>", 
"<span class=\"comment\"> * @nla: ematch tree configuration TLV</span>", 
"<span class=\"comment\"> * @tree: destination ematch tree variable to store the resulting</span>", 
"<span class=\"comment\"> *        ematch tree.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function validates the given configuration TLV @nla and builds an</span>", 
"<span class=\"comment\"> * ematch tree in @tree. The resulting tree must later be copied into</span>", 
"<span class=\"comment\"> * the private classifier data using tcf_em_tree_change(). You MUST NOT</span>", 
"<span class=\"comment\"> * provide the ematch tree variable of the private classifier data directly,</span>", 
"<span class=\"comment\"> * the changes would not be locked properly.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns a negative error code if the configuration TLV contains errors.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#tcf_em_tree_validate\">tcf_em_tree_validate</a>(struct <a class=\"id\" href=\"#tcf_proto\">tcf_proto</a> *<a class=\"id\" href=\"#tp\">tp</a>, struct <a class=\"id\" href=\"#nlattr\">nlattr</a> *<a class=\"id\" href=\"#nla\">nla</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#tcf_ematch_tree\">tcf_ematch_tree</a> *<a class=\"id\" href=\"#tree\">tree</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#list_len\">list_len</a>, <a class=\"id\" href=\"#matches_len\">matches_len</a>, <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#nlattr\">nlattr</a> *<a class=\"id\" href=\"#tb\">tb</a>[<a class=\"id\" href=\"#TCA_EMATCH_TREE_MAX\">TCA_EMATCH_TREE_MAX</a> + 1];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#nlattr\">nlattr</a> *<a class=\"id\" href=\"#rt_match\">rt_match</a>, *<a class=\"id\" href=\"#rt_hdr\">rt_hdr</a>, *<a class=\"id\" href=\"#rt_list\">rt_list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcf_ematch_tree_hdr\">tcf_ematch_tree_hdr</a> *<a class=\"id\" href=\"#tree_hdr\">tree_hdr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcf_ematch\">tcf_ematch</a> *<a class=\"id\" href=\"#em\">em</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#tree\">tree</a>, 0, sizeof(*<a class=\"id\" href=\"#tree\">tree</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#nla\">nla</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#nla_parse_nested\">nla_parse_nested</a>(<a class=\"id\" href=\"#tb\">tb</a>, <a class=\"id\" href=\"#TCA_EMATCH_TREE_MAX\">TCA_EMATCH_TREE_MAX</a>, <a class=\"id\" href=\"#nla\">nla</a>, <a class=\"id\" href=\"#em_policy\">em_policy</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#errout\">errout</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_hdr\">rt_hdr</a> = <a class=\"id\" href=\"#tb\">tb</a>[<a class=\"id\" href=\"#TCA_EMATCH_TREE_HDR\">TCA_EMATCH_TREE_HDR</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_list\">rt_list</a> = <a class=\"id\" href=\"#tb\">tb</a>[<a class=\"id\" href=\"#TCA_EMATCH_TREE_LIST\">TCA_EMATCH_TREE_LIST</a>];", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rt_hdr\">rt_hdr</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || <a class=\"id\" href=\"#rt_list\">rt_list</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#errout\">errout</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tree_hdr\">tree_hdr</a> = <a class=\"id\" href=\"#nla_data\">nla_data</a>(<a class=\"id\" href=\"#rt_hdr\">rt_hdr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#hdr\">hdr</a>, <a class=\"id\" href=\"#tree_hdr\">tree_hdr</a>, sizeof(*<a class=\"id\" href=\"#tree_hdr\">tree_hdr</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_match\">rt_match</a> = <a class=\"id\" href=\"#nla_data\">nla_data</a>(<a class=\"id\" href=\"#rt_list\">rt_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_len\">list_len</a> = <a class=\"id\" href=\"#nla_len\">nla_len</a>(<a class=\"id\" href=\"#rt_list\">rt_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#matches_len\">matches_len</a> = <a class=\"id\" href=\"#tree_hdr\">tree_hdr</a>-><a class=\"id\" href=\"#nmatches\">nmatches</a> * sizeof(*<a class=\"id\" href=\"#em\">em</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#matches\">matches</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#matches_len\">matches_len</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#matches\">matches</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#errout\">errout</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We do not use nla_parse_nested here because the maximum</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * number of attributes is unknown. This saves us the allocation</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for a tb buffer which would serve no purpose at all.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The array of rt attributes is parsed in the order as they are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * provided, their type must be incremental from 1 to n. Even</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if it does not serve any real purpose, a failure of sticking</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to this policy will result in parsing failure. */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#idx\">idx</a> = 0; <a class=\"id\" href=\"#nla_ok\">nla_ok</a>(<a class=\"id\" href=\"#rt_match\">rt_match</a>, <a class=\"id\" href=\"#list_len\">list_len</a>); <a class=\"id\" href=\"#idx\">idx</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rt_match\">rt_match</a>-><a class=\"id\" href=\"#nla_type\">nla_type</a> != (<a class=\"id\" href=\"#idx\">idx</a> + 1))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#errout_abort\">errout_abort</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#idx\">idx</a> >= <a class=\"id\" href=\"#tree_hdr\">tree_hdr</a>-><a class=\"id\" href=\"#nmatches\">nmatches</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#errout_abort\">errout_abort</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nla_len\">nla_len</a>(<a class=\"id\" href=\"#rt_match\">rt_match</a>) &lt; sizeof(struct <a class=\"id\" href=\"#tcf_ematch_hdr\">tcf_ematch_hdr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#errout_abort\">errout_abort</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#em\">em</a> = <a class=\"id\" href=\"#tcf_em_get_match\">tcf_em_get_match</a>(<a class=\"id\" href=\"#tree\">tree</a>, <a class=\"id\" href=\"#idx\">idx</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#tcf_em_validate\">tcf_em_validate</a>(<a class=\"id\" href=\"#tp\">tp</a>, <a class=\"id\" href=\"#tree_hdr\">tree_hdr</a>, <a class=\"id\" href=\"#em\">em</a>, <a class=\"id\" href=\"#rt_match\">rt_match</a>, <a class=\"id\" href=\"#idx\">idx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#errout_abort\">errout_abort</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rt_match\">rt_match</a> = <a class=\"id\" href=\"#nla_next\">nla_next</a>(<a class=\"id\" href=\"#rt_match\">rt_match</a>, &amp;<a class=\"id\" href=\"#list_len\">list_len</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check if the number of matches provided by userspace actually</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * complies with the array of matches. The number was used for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the validation of references and a mismatch could lead to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * undefined references during the matching process. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#idx\">idx</a> != <a class=\"id\" href=\"#tree_hdr\">tree_hdr</a>-><a class=\"id\" href=\"#nmatches\">nmatches</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#errout_abort\">errout_abort</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<a class=\"id\" href=\"#errout\">errout</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<a class=\"id\" href=\"#errout_abort\">errout_abort</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcf_em_tree_destroy\">tcf_em_tree_destroy</a>(<a class=\"id\" href=\"#tp\">tp</a>, <a class=\"id\" href=\"#tree\">tree</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#tcf_em_tree_validate\">tcf_em_tree_validate</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tcf_em_tree_destroy - destroy an ematch tree</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @tp: classifier kind handle</span>", 
"<span class=\"comment\"> * @tree: ematch tree to be deleted</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This functions destroys an ematch tree previously created by</span>", 
"<span class=\"comment\"> * tcf_em_tree_validate()/tcf_em_tree_change(). You must ensure that</span>", 
"<span class=\"comment\"> * the ematch tree is not in use before calling this function.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#tcf_em_tree_destroy\">tcf_em_tree_destroy</a>(struct <a class=\"id\" href=\"#tcf_proto\">tcf_proto</a> *<a class=\"id\" href=\"#tp\">tp</a>, struct <a class=\"id\" href=\"#tcf_ematch_tree\">tcf_ematch_tree</a> *<a class=\"id\" href=\"#tree\">tree</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#matches\">matches</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#hdr\">hdr</a>.<a class=\"id\" href=\"#nmatches\">nmatches</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#tcf_ematch\">tcf_ematch</a> *<a class=\"id\" href=\"#em\">em</a> = <a class=\"id\" href=\"#tcf_em_get_match\">tcf_em_get_match</a>(<a class=\"id\" href=\"#tree\">tree</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#em\">em</a>-><a class=\"id\" href=\"#ops\">ops</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#em\">em</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#destroy\">destroy</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#em\">em</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#destroy\">destroy</a>(<a class=\"id\" href=\"#tp\">tp</a>, <a class=\"id\" href=\"#em\">em</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else if (!<a class=\"id\" href=\"#tcf_em_is_simple\">tcf_em_is_simple</a>(<a class=\"id\" href=\"#em\">em</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>((void *) <a class=\"id\" href=\"#em\">em</a>-><a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#em\">em</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#owner\">owner</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#hdr\">hdr</a>.<a class=\"id\" href=\"#nmatches\">nmatches</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#matches\">matches</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#matches\">matches</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#tcf_em_tree_destroy\">tcf_em_tree_destroy</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tcf_em_tree_dump - dump ematch tree into a rtnl message</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @skb: skb holding the rtnl message</span>", 
"<span class=\"comment\"> * @t: ematch tree to be dumped</span>", 
"<span class=\"comment\"> * @tlv: TLV type to be used to encapsulate the tree</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function dumps a ematch tree into a rtnl message. It is valid to</span>", 
"<span class=\"comment\"> * call this function while the ematch tree is in use.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns -1 if the skb tailroom is insufficient.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#tcf_em_tree_dump\">tcf_em_tree_dump</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#tcf_ematch_tree\">tcf_ematch_tree</a> *<a class=\"id\" href=\"#tree\">tree</a>, int <a class=\"id\" href=\"#tlv\">tlv</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#tail\">tail</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#nlattr\">nlattr</a> *<a class=\"id\" href=\"#top_start\">top_start</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#nlattr\">nlattr</a> *<a class=\"id\" href=\"#list_start\">list_start</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#top_start\">top_start</a> = <a class=\"id\" href=\"#nla_nest_start\">nla_nest_start</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#tlv\">tlv</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#top_start\">top_start</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#nla_put_failure\">nla_put_failure</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NLA_PUT\">NLA_PUT</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#TCA_EMATCH_TREE_HDR\">TCA_EMATCH_TREE_HDR</a>, sizeof(<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#hdr\">hdr</a>), &amp;<a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#hdr\">hdr</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_start\">list_start</a> = <a class=\"id\" href=\"#nla_nest_start\">nla_nest_start</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#TCA_EMATCH_TREE_LIST\">TCA_EMATCH_TREE_LIST</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list_start\">list_start</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#nla_put_failure\">nla_put_failure</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tail\">tail</a> = <a class=\"id\" href=\"#skb_tail_pointer\">skb_tail_pointer</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#hdr\">hdr</a>.<a class=\"id\" href=\"#nmatches\">nmatches</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#nlattr\">nlattr</a> *<a class=\"id\" href=\"#match_start\">match_start</a> = (struct <a class=\"id\" href=\"#nlattr\">nlattr</a> *)<a class=\"id\" href=\"#tail\">tail</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#tcf_ematch\">tcf_ematch</a> *<a class=\"id\" href=\"#em\">em</a> = <a class=\"id\" href=\"#tcf_em_get_match\">tcf_em_get_match</a>(<a class=\"id\" href=\"#tree\">tree</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#tcf_ematch_hdr\">tcf_ematch_hdr</a> <a class=\"id\" href=\"#em_hdr\">em_hdr</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#kind\">kind</a> = <a class=\"id\" href=\"#em\">em</a>-><a class=\"id\" href=\"#ops\">ops</a> ? <a class=\"id\" href=\"#em\">em</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#kind\">kind</a> : <a class=\"id\" href=\"#TCF_EM_CONTAINER\">TCF_EM_CONTAINER</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#matchid\">matchid</a> = <a class=\"id\" href=\"#em\">em</a>-><a class=\"id\" href=\"#matchid\">matchid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#em\">em</a>-><a class=\"id\" href=\"#flags\">flags</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NLA_PUT\">NLA_PUT</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#i\">i</a>+1, sizeof(<a class=\"id\" href=\"#em_hdr\">em_hdr</a>), &amp;<a class=\"id\" href=\"#em_hdr\">em_hdr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#em\">em</a>-><a class=\"id\" href=\"#ops\">ops</a> && <a class=\"id\" href=\"#em\">em</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#dump\">dump</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#em\">em</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#dump\">dump</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#em\">em</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#nla_put_failure\">nla_put_failure</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#tcf_em_is_container\">tcf_em_is_container</a>(<a class=\"id\" href=\"#em\">em</a>) || <a class=\"id\" href=\"#tcf_em_is_simple\">tcf_em_is_simple</a>(<a class=\"id\" href=\"#em\">em</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#u\">u</a> = <a class=\"id\" href=\"#em\">em</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nla_put_nohdr\">nla_put_nohdr</a>(<a class=\"id\" href=\"#skb\">skb</a>, sizeof(<a class=\"id\" href=\"#u\">u</a>), &amp;<a class=\"id\" href=\"#u\">u</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#em\">em</a>-><a class=\"id\" href=\"#datalen\">datalen</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nla_put_nohdr\">nla_put_nohdr</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#em\">em</a>-><a class=\"id\" href=\"#datalen\">datalen</a>, (void *) <a class=\"id\" href=\"#em\">em</a>-><a class=\"id\" href=\"#data\">data</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tail\">tail</a> = <a class=\"id\" href=\"#skb_tail_pointer\">skb_tail_pointer</a>(<a class=\"id\" href=\"#skb\">skb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#match_start\">match_start</a>-><a class=\"id\" href=\"#nla_len\">nla_len</a> = <a class=\"id\" href=\"#tail\">tail</a> - (<a class=\"id\" href=\"#u8\">u8</a> *)<a class=\"id\" href=\"#match_start\">match_start</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nla_nest_end\">nla_nest_end</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#list_start\">list_start</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nla_nest_end\">nla_nest_end</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#top_start\">top_start</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#nla_put_failure\">nla_put_failure</a>:", 
"<span class=\"ts\"/>return -1;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#tcf_em_tree_dump\">tcf_em_tree_dump</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#tcf_em_match\">tcf_em_match</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#tcf_ematch\">tcf_ematch</a> *<a class=\"id\" href=\"#em\">em</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#tcf_pkt_info\">tcf_pkt_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#em\">em</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#match\">match</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#em\">em</a>, <a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tcf_em_is_inverted\">tcf_em_is_inverted</a>(<a class=\"id\" href=\"#em\">em</a>) ? !<a class=\"id\" href=\"#r\">r</a> : <a class=\"id\" href=\"#r\">r</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Do not use this function directly, use tcf_em_tree_match instead */</span>", 
"int <a class=\"id\" href=\"#__tcf_em_tree_match\">__tcf_em_tree_match</a>(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#tcf_ematch_tree\">tcf_ematch_tree</a> *<a class=\"id\" href=\"#tree\">tree</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#tcf_pkt_info\">tcf_pkt_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#stackp\">stackp</a> = 0, <a class=\"id\" href=\"#match_idx\">match_idx</a> = 0, <a class=\"id\" href=\"#res\">res</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcf_ematch\">tcf_ematch</a> *<a class=\"id\" href=\"#cur_match\">cur_match</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#stack\">stack</a>[<a class=\"id\" href=\"#CONFIG_NET_EMATCH_STACK\">CONFIG_NET_EMATCH_STACK</a>];", 
"", 
"<a class=\"id\" href=\"#proceed\">proceed</a>:", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#match_idx\">match_idx</a> &lt; <a class=\"id\" href=\"#tree\">tree</a>-><a class=\"id\" href=\"#hdr\">hdr</a>.<a class=\"id\" href=\"#nmatches\">nmatches</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur_match\">cur_match</a> = <a class=\"id\" href=\"#tcf_em_get_match\">tcf_em_get_match</a>(<a class=\"id\" href=\"#tree\">tree</a>, <a class=\"id\" href=\"#match_idx\">match_idx</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tcf_em_is_container\">tcf_em_is_container</a>(<a class=\"id\" href=\"#cur_match\">cur_match</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#stackp\">stackp</a> >= <a class=\"id\" href=\"#CONFIG_NET_EMATCH_STACK\">CONFIG_NET_EMATCH_STACK</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#stack_overflow\">stack_overflow</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stack\">stack</a>[<a class=\"id\" href=\"#stackp\">stackp</a>++] = <a class=\"id\" href=\"#match_idx\">match_idx</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#match_idx\">match_idx</a> = <a class=\"id\" href=\"#cur_match\">cur_match</a>-><a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#proceed\">proceed</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#tcf_em_match\">tcf_em_match</a>(<a class=\"id\" href=\"#skb\">skb</a>, <a class=\"id\" href=\"#cur_match\">cur_match</a>, <a class=\"id\" href=\"#info\">info</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tcf_em_early_end\">tcf_em_early_end</a>(<a class=\"id\" href=\"#cur_match\">cur_match</a>, <a class=\"id\" href=\"#res\">res</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#match_idx\">match_idx</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#pop_stack\">pop_stack</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#stackp\">stackp</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#match_idx\">match_idx</a> = <a class=\"id\" href=\"#stack\">stack</a>[--<a class=\"id\" href=\"#stackp\">stackp</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur_match\">cur_match</a> = <a class=\"id\" href=\"#tcf_em_get_match\">tcf_em_get_match</a>(<a class=\"id\" href=\"#tree\">tree</a>, <a class=\"id\" href=\"#match_idx\">match_idx</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tcf_em_early_end\">tcf_em_early_end</a>(<a class=\"id\" href=\"#cur_match\">cur_match</a>, <a class=\"id\" href=\"#res\">res</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#pop_stack\">pop_stack</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#match_idx\">match_idx</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#proceed\">proceed</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"", 
"<a class=\"id\" href=\"#stack_overflow\">stack_overflow</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#net_ratelimit\">net_ratelimit</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"tc ematch: local stack overflow,\"", 
];
xr_frag_insert('l/15/973e92f0026d7b38a67aef59b75edb677ceb2f.xr', __xr_tmp);
