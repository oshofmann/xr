var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  kernel/sched_cpupri.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  CPU priority management</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 2007-2008 Novell</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Author: Gregory Haskins &lt;ghaskins@novell.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This code tracks the priority of each CPU so that global migration</span>", 
"<span class=\"comment\"> *  decisions are easy to calculate.  Each CPU can be in a state as follows:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *                 (INVALID), IDLE, NORMAL, RT1, ... RT99</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  going from the lowest priority to the highest.  CPUs in the INVALID state</span>", 
"<span class=\"comment\"> *  are not eligible for routing.  The system maintains this state with</span>", 
"<span class=\"comment\"> *  a 2 dimensional bitmap (the first for priority class, the second for cpus</span>", 
"<span class=\"comment\"> *  in that class).  Therefore a typical application without affinity</span>", 
"<span class=\"comment\"> *  restrictions can find a suitable CPU with O(1) complexity (e.g. two bit</span>", 
"<span class=\"comment\"> *  searches).  For tasks with affinity restrictions, the algorithm has a</span>", 
"<span class=\"comment\"> *  worst case complexity of O(min(102, nr_domcpus)), though the scenario that</span>", 
"<span class=\"comment\"> *  yields the worst case search is fairly contrived.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This program is free software; you can redistribute it and/or</span>", 
"<span class=\"comment\"> *  modify it under the terms of the GNU General Public License</span>", 
"<span class=\"comment\"> *  as published by the Free Software Foundation; version 2</span>", 
"<span class=\"comment\"> *  of the License.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#gfp\">gfp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"sched_cpupri.h\"", 
"", 
"<span class=\"comment\">/* Convert between a 140 based task-&gt;prio, and our 102 based cpupri */</span>", 
"static int <a class=\"id\" href=\"#convert_prio\">convert_prio</a>(int <a class=\"id\" href=\"#prio\">prio</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpupri\">cpupri</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prio\">prio</a> == <a class=\"id\" href=\"#CPUPRI_INVALID\">CPUPRI_INVALID</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpupri\">cpupri</a> = <a class=\"id\" href=\"#CPUPRI_INVALID\">CPUPRI_INVALID</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#prio\">prio</a> == <a class=\"id\" href=\"#MAX_PRIO\">MAX_PRIO</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpupri\">cpupri</a> = <a class=\"id\" href=\"#CPUPRI_IDLE\">CPUPRI_IDLE</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#prio\">prio</a> >= <a class=\"id\" href=\"#MAX_RT_PRIO\">MAX_RT_PRIO</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpupri\">cpupri</a> = <a class=\"id\" href=\"#CPUPRI_NORMAL\">CPUPRI_NORMAL</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpupri\">cpupri</a> = <a class=\"id\" href=\"#MAX_RT_PRIO\">MAX_RT_PRIO</a> - <a class=\"id\" href=\"#prio\">prio</a> + 1;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cpupri\">cpupri</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_cpupri_active\">for_each_cpupri_active</a>(<a class=\"id\" href=\"#array\">array</a>, <a class=\"id\" href=\"#idx\">idx</a>)                    \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_set_bit\">for_each_set_bit</a>(<a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#array\">array</a>, <a class=\"id\" href=\"#CPUPRI_NR_PRIORITIES\">CPUPRI_NR_PRIORITIES</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpupri_find - find the best (lowest-pri) CPU in the system</span>", 
"<span class=\"comment\"> * @cp: The cpupri context</span>", 
"<span class=\"comment\"> * @p: The task</span>", 
"<span class=\"comment\"> * @lowest_mask: A mask to fill in with selected CPUs (or NULL)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note: This function returns the recommended CPUs as calculated during the</span>", 
"<span class=\"comment\"> * current invocation.  By the time the call returns, the CPUs may have in</span>", 
"<span class=\"comment\"> * fact changed priorities any number of times.  While not ideal, it is not</span>", 
"<span class=\"comment\"> * an issue of correctness since the normal rebalancer logic will correct</span>", 
"<span class=\"comment\"> * any discrepancies created by racing against the uncertainty of the current</span>", 
"<span class=\"comment\"> * priority configuration.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns: (int)bool - CPUs were found</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#cpupri_find\">cpupri_find</a>(struct <a class=\"id\" href=\"#cpupri\">cpupri</a> *<a class=\"id\" href=\"#cp\">cp</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#lowest_mask\">lowest_mask</a>)", 
"{", 
"<span class=\"ts\"/>int                  <a class=\"id\" href=\"#idx\">idx</a>      = 0;", 
"<span class=\"ts\"/>int                  <a class=\"id\" href=\"#task_pri\">task_pri</a> = <a class=\"id\" href=\"#convert_prio\">convert_prio</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#prio\">prio</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpupri_active\">for_each_cpupri_active</a>(<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#pri_active\">pri_active</a>, <a class=\"id\" href=\"#idx\">idx</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cpupri_vec\">cpupri_vec</a> *<a class=\"id\" href=\"#vec\">vec</a>  = &amp;<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#pri_to_cpu\">pri_to_cpu</a>[<a class=\"id\" href=\"#idx\">idx</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#idx\">idx</a> >= <a class=\"id\" href=\"#task_pri\">task_pri</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_any_and\">cpumask_any_and</a>(&amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#cpus_allowed\">cpus_allowed</a>, <a class=\"id\" href=\"#vec\">vec</a>-><a class=\"id\" href=\"#mask\">mask</a>) >= <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#lowest_mask\">lowest_mask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_and\">cpumask_and</a>(<a class=\"id\" href=\"#lowest_mask\">lowest_mask</a>, &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#cpus_allowed\">cpus_allowed</a>, <a class=\"id\" href=\"#vec\">vec</a>-><a class=\"id\" href=\"#mask\">mask</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We have to ensure that we have at least one bit</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * still set in the array, since the map could have</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * been concurrently emptied between the first and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * second reads of vec-&gt;mask.  If we hit this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * condition, simply act as though we never hit this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * priority level and continue on.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_any\">cpumask_any</a>(<a class=\"id\" href=\"#lowest_mask\">lowest_mask</a>) >= <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpupri_set - update the cpu priority setting</span>", 
"<span class=\"comment\"> * @cp: The cpupri context</span>", 
"<span class=\"comment\"> * @cpu: The target cpu</span>", 
"<span class=\"comment\"> * @pri: The priority (INVALID-RT99) to assign to this CPU</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note: Assumes cpu_rq(cpu)-&gt;lock is locked</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns: (void)</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#cpupri_set\">cpupri_set</a>(struct <a class=\"id\" href=\"#cpupri\">cpupri</a> *<a class=\"id\" href=\"#cp\">cp</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>, int <a class=\"id\" href=\"#newpri\">newpri</a>)", 
"{", 
"<span class=\"ts\"/>int                 *<a class=\"id\" href=\"#currpri\">currpri</a> = &amp;<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#cpu_to_pri\">cpu_to_pri</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"<span class=\"ts\"/>int                  <a class=\"id\" href=\"#oldpri\">oldpri</a>  = *<a class=\"id\" href=\"#currpri\">currpri</a>;", 
"<span class=\"ts\"/>unsigned long        <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#newpri\">newpri</a> = <a class=\"id\" href=\"#convert_prio\">convert_prio</a>(<a class=\"id\" href=\"#newpri\">newpri</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#newpri\">newpri</a> >= <a class=\"id\" href=\"#CPUPRI_NR_PRIORITIES\">CPUPRI_NR_PRIORITIES</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#newpri\">newpri</a> == <a class=\"id\" href=\"#oldpri\">oldpri</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the cpu was currently mapped to a different value, we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * need to map it to the new value then remove the old value.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note, we must add the new value first, otherwise we risk the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cpu being cleared from pri_active, and this cpu could be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * missed for a push or pull.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#newpri\">newpri</a> != <a class=\"id\" href=\"#CPUPRI_INVALID\">CPUPRI_INVALID</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cpupri_vec\">cpupri_vec</a> *<a class=\"id\" href=\"#vec\">vec</a> = &amp;<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#pri_to_cpu\">pri_to_cpu</a>[<a class=\"id\" href=\"#newpri\">newpri</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#vec\">vec</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_set_cpu\">cpumask_set_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#vec\">vec</a>-><a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vec\">vec</a>-><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vec\">vec</a>-><a class=\"id\" href=\"#count\">count</a> == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#newpri\">newpri</a>, <a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#pri_active\">pri_active</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#vec\">vec</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#oldpri\">oldpri</a> != <a class=\"id\" href=\"#CPUPRI_INVALID\">CPUPRI_INVALID</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cpupri_vec\">cpupri_vec</a> *<a class=\"id\" href=\"#vec\">vec</a>  = &amp;<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#pri_to_cpu\">pri_to_cpu</a>[<a class=\"id\" href=\"#oldpri\">oldpri</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#vec\">vec</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vec\">vec</a>-><a class=\"id\" href=\"#count\">count</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#vec\">vec</a>-><a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#oldpri\">oldpri</a>, <a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#pri_active\">pri_active</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear_cpu\">cpumask_clear_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#vec\">vec</a>-><a class=\"id\" href=\"#mask\">mask</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#vec\">vec</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#currpri\">currpri</a> = <a class=\"id\" href=\"#newpri\">newpri</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpupri_init - initialize the cpupri structure</span>", 
"<span class=\"comment\"> * @cp: The cpupri context</span>", 
"<span class=\"comment\"> * @bootmem: true if allocations need to use bootmem</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns: -ENOMEM if memory fails.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#cpupri_init\">cpupri_init</a>(struct <a class=\"id\" href=\"#cpupri\">cpupri</a> *<a class=\"id\" href=\"#cp\">cp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#cp\">cp</a>, 0, sizeof(*<a class=\"id\" href=\"#cp\">cp</a>));", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#CPUPRI_NR_PRIORITIES\">CPUPRI_NR_PRIORITIES</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cpupri_vec\">cpupri_vec</a> *<a class=\"id\" href=\"#vec\">vec</a> = &amp;<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#pri_to_cpu\">pri_to_cpu</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_init\">raw_spin_lock_init</a>(&amp;<a class=\"id\" href=\"#vec\">vec</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vec\">vec</a>-><a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#zalloc_cpumask_var\">zalloc_cpumask_var</a>(&amp;<a class=\"id\" href=\"#vec\">vec</a>-><a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup\">cleanup</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#cpu_to_pri\">cpu_to_pri</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#CPUPRI_INVALID\">CPUPRI_INVALID</a>;", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#cleanup\">cleanup</a>:", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a>--; <a class=\"id\" href=\"#i\">i</a> >= 0; <a class=\"id\" href=\"#i\">i</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_cpumask_var\">free_cpumask_var</a>(<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#pri_to_cpu\">pri_to_cpu</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cpupri_cleanup - clean up the cpupri structure</span>", 
"<span class=\"comment\"> * @cp: The cpupri context</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#cpupri_cleanup\">cpupri_cleanup</a>(struct <a class=\"id\" href=\"#cpupri\">cpupri</a> *<a class=\"id\" href=\"#cp\">cp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#CPUPRI_NR_PRIORITIES\">CPUPRI_NR_PRIORITIES</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_cpumask_var\">free_cpumask_var</a>(<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#pri_to_cpu\">pri_to_cpu</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#mask\">mask</a>);", 
"}", 
];
xr_frag_insert('l/16/1c6da24fb82fa350ed8757f5571027f9b6efb5.xr', __xr_tmp);
