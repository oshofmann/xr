var __xr_tmp = [
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#xen\">xen</a>/<a class=\"id\" href=\"#hvc\">hvc</a>-<a class=\"id\" href=\"#console\">console</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#paravirt\">paravirt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#apic\">apic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#page\">page</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#xen\">xen</a>/<a class=\"id\" href=\"#hypercall\">hypercall</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#xen\">xen</a>/<a class=\"id\" href=\"#hypervisor\">hypervisor</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#fixmap\">fixmap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#processor\">processor</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#proto\">proto</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#msr\">msr</a>-<a class=\"id\" href=\"#index\">index</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#traps\">traps</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#setup\">setup</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#desc\">desc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pgalloc\">pgalloc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pgtable\">pgtable</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#tlbflush\">tlbflush</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#reboot\">reboot</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#setup\">setup</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#stackprotector\">stackprotector</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#hypervisor\">hypervisor</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"xen-ops.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"mmu.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"multicalls.h\"", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#hypercall_page\">hypercall_page</a>);", 
"", 
"<a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#vcpu_info\">vcpu_info</a> *, <a class=\"id\" href=\"#xen_vcpu\">xen_vcpu</a>);", 
"<a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#vcpu_info\">vcpu_info</a>, <a class=\"id\" href=\"#xen_vcpu_info\">xen_vcpu_info</a>);", 
"", 
"enum <a class=\"id\" href=\"#xen_domain_type\">xen_domain_type</a> <a class=\"id\" href=\"#xen_domain_type\">xen_domain_type</a> = <a class=\"id\" href=\"#XEN_NATIVE\">XEN_NATIVE</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#xen_domain_type\">xen_domain_type</a>);", 
"", 
"struct <a class=\"id\" href=\"#start_info\">start_info</a> *<a class=\"id\" href=\"#xen_start_info\">xen_start_info</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#xen_start_info\">xen_start_info</a>);", 
"", 
"struct <a class=\"id\" href=\"#shared_info\">shared_info</a> <a class=\"id\" href=\"#xen_dummy_shared_info\">xen_dummy_shared_info</a>;", 
"", 
"void *<a class=\"id\" href=\"#xen_initial_gdt\">xen_initial_gdt</a>;", 
"", 
"<a class=\"id\" href=\"#RESERVE_BRK\">RESERVE_BRK</a>(<a class=\"id\" href=\"#shared_info_page_brk\">shared_info_page_brk</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> int <a class=\"id\" href=\"#xen_have_vector_callback\">xen_have_vector_callback</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#xen_have_vector_callback\">xen_have_vector_callback</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Point at some empty memory to start with. We map the real shared_info</span>", 
"<span class=\"comment\"> * page as soon as fixmap is up and running.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#shared_info\">shared_info</a> *<a class=\"id\" href=\"#HYPERVISOR_shared_info\">HYPERVISOR_shared_info</a> = (void *)&amp;<a class=\"id\" href=\"#xen_dummy_shared_info\">xen_dummy_shared_info</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Flag to determine whether vcpu info placement is available on all</span>", 
"<span class=\"comment\"> * VCPUs.  We assume it is to start with, and then set it to zero on</span>", 
"<span class=\"comment\"> * the first failure.  This is because it can succeed on some VCPUs</span>", 
"<span class=\"comment\"> * and not others, since it can involve hypervisor memory allocation,</span>", 
"<span class=\"comment\"> * or because the guest failed to guarantee all the appropriate</span>", 
"<span class=\"comment\"> * constraints on all VCPUs (ie buffer can't cross a page boundary).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that any particular CPU may be using a placed vcpu structure,</span>", 
"<span class=\"comment\"> * but we can only optimise if the all are.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 0: not available, 1: available</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#have_vcpu_info_placement\">have_vcpu_info_placement</a> = 1;", 
"", 
"static void <a class=\"id\" href=\"#clamp_max_cpus\">clamp_max_cpus</a>(void)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#setup_max_cpus\">setup_max_cpus</a> &gt; <a class=\"id\" href=\"#MAX_VIRT_CPUS\">MAX_VIRT_CPUS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#setup_max_cpus\">setup_max_cpus</a> = <a class=\"id\" href=\"#MAX_VIRT_CPUS\">MAX_VIRT_CPUS</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static void <a class=\"id\" href=\"#xen_vcpu_setup\">xen_vcpu_setup</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vcpu_register_vcpu_info\">vcpu_register_vcpu_info</a> <a class=\"id\" href=\"#info\">info</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vcpu_info\">vcpu_info</a> *<a class=\"id\" href=\"#vcpup\">vcpup</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#HYPERVISOR_shared_info\">HYPERVISOR_shared_info</a> == &amp;<a class=\"id\" href=\"#xen_dummy_shared_info\">xen_dummy_shared_info</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> &lt; <a class=\"id\" href=\"#MAX_VIRT_CPUS\">MAX_VIRT_CPUS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#xen_vcpu\">xen_vcpu</a>,<a class=\"id\" href=\"#cpu\">cpu</a>) = &amp;<a class=\"id\" href=\"#HYPERVISOR_shared_info\">HYPERVISOR_shared_info</a>-><a class=\"id\" href=\"#vcpu_info\">vcpu_info</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#have_vcpu_info_placement\">have_vcpu_info_placement</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> >= <a class=\"id\" href=\"#MAX_VIRT_CPUS\">MAX_VIRT_CPUS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clamp_max_cpus\">clamp_max_cpus</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vcpup\">vcpup</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#xen_vcpu_info\">xen_vcpu_info</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#mfn\">mfn</a> = <a class=\"id\" href=\"#arbitrary_virt_to_mfn\">arbitrary_virt_to_mfn</a>(<a class=\"id\" href=\"#vcpup\">vcpup</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#offset_in_page\">offset_in_page</a>(<a class=\"id\" href=\"#vcpup\">vcpup</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"trying to map vcpu_info %d at %p, mfn %llx, offset %d\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#vcpup\">vcpup</a>, <a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#mfn\">mfn</a>, <a class=\"id\" href=\"#info\">info</a>.<a class=\"id\" href=\"#offset\">offset</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check to see if the hypervisor will put the vcpu_info</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   structure where we want it, which allows direct access via</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   a percpu-variable. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#HYPERVISOR_vcpu_op\">HYPERVISOR_vcpu_op</a>(<a class=\"id\" href=\"#VCPUOP_register_vcpu_info\">VCPUOP_register_vcpu_info</a>, <a class=\"id\" href=\"#cpu\">cpu</a>, &amp;<a class=\"id\" href=\"#info\">info</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"register_vcpu_info failed: err=%d\\n\", <a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#have_vcpu_info_placement\">have_vcpu_info_placement</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clamp_max_cpus\">clamp_max_cpus</a>();", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This cpu is using the registered vcpu info, even if</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   later ones fail to. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#xen_vcpu\">xen_vcpu</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) = <a class=\"id\" href=\"#vcpup\">vcpup</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"cpu %d using vcpu_info at %p\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#vcpup\">vcpup</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * On restore, set the vcpu placement up again.</span>", 
"<span class=\"comment\"> * If it fails, then we're in a bad state, since</span>", 
"<span class=\"comment\"> * we can't back out from using it...</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#xen_vcpu_restore\">xen_vcpu_restore</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#other_cpu\">other_cpu</a> = (<a class=\"id\" href=\"#cpu\">cpu</a> != <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#other_cpu\">other_cpu</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#HYPERVISOR_vcpu_op\">HYPERVISOR_vcpu_op</a>(<a class=\"id\" href=\"#VCPUOP_down\">VCPUOP_down</a>, <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#NULL\">NULL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xen_setup_runstate_info\">xen_setup_runstate_info</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#have_vcpu_info_placement\">have_vcpu_info_placement</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xen_vcpu_setup\">xen_vcpu_setup</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#other_cpu\">other_cpu</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#HYPERVISOR_vcpu_op\">HYPERVISOR_vcpu_op</a>(<a class=\"id\" href=\"#VCPUOP_up\">VCPUOP_up</a>, <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#NULL\">NULL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#xen_banner\">xen_banner</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#version\">version</a> = <a class=\"id\" href=\"#HYPERVISOR_xen_version\">HYPERVISOR_xen_version</a>(<a class=\"id\" href=\"#XENVER_version\">XENVER_version</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#xen_extraversion\">xen_extraversion</a> <a class=\"id\" href=\"#extra\">extra</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#HYPERVISOR_xen_version\">HYPERVISOR_xen_version</a>(<a class=\"id\" href=\"#XENVER_extraversion\">XENVER_extraversion</a>, &amp;<a class=\"id\" href=\"#extra\">extra</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Booting paravirtualized kernel on %s\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#pv_info\">pv_info</a>.<a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Xen version: %d.%d%s%s\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#version\">version</a> >> 16, <a class=\"id\" href=\"#version\">version</a> &amp; 0xffff, <a class=\"id\" href=\"#extra\">extra</a>.<a class=\"id\" href=\"#extraversion\">extraversion</a>,", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#xen_feature\">xen_feature</a>(<a class=\"id\" href=\"#XENFEAT_mmu_pt_update_preserve_ad\">XENFEAT_mmu_pt_update_preserve_ad</a>) ? \" (preserve-AD)\" : \"\");", 
"}", 
"", 
"static <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> unsigned int <a class=\"id\" href=\"#cpuid_leaf1_edx_mask\">cpuid_leaf1_edx_mask</a> = ~0;", 
"static <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> unsigned int <a class=\"id\" href=\"#cpuid_leaf1_ecx_mask\">cpuid_leaf1_ecx_mask</a> = ~0;", 
"", 
"static void <a class=\"id\" href=\"#xen_cpuid\">xen_cpuid</a>(unsigned int *<a class=\"id\" href=\"#ax\">ax</a>, unsigned int *<a class=\"id\" href=\"#bx\">bx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      unsigned int *<a class=\"id\" href=\"#cx\">cx</a>, unsigned int *<a class=\"id\" href=\"#dx\">dx</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#maskebx\">maskebx</a> = ~0;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#maskecx\">maskecx</a> = ~0;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#maskedx\">maskedx</a> = ~0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Mask out inconvenient features, to try and disable as many</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * unsupported kernel subsystems as possible.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>switch (*<a class=\"id\" href=\"#ax\">ax</a>) {", 
"<span class=\"ts\"/>case 1:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#maskecx\">maskecx</a> = <a class=\"id\" href=\"#cpuid_leaf1_ecx_mask\">cpuid_leaf1_ecx_mask</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#maskedx\">maskedx</a> = <a class=\"id\" href=\"#cpuid_leaf1_edx_mask\">cpuid_leaf1_edx_mask</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case 0xb:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Suppress extended topology stuff */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#maskebx\">maskebx</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a>(<a class=\"id\" href=\"#XEN_EMULATE_PREFIX\">XEN_EMULATE_PREFIX</a> \"cpuid\"", 
"<span class=\"ts\"/><span class=\"ts\"/>: \"=a\" (*<a class=\"id\" href=\"#ax\">ax</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>  \"=b\" (*<a class=\"id\" href=\"#bx\">bx</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>  \"=c\" (*<a class=\"id\" href=\"#cx\">cx</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>  \"=d\" (*<a class=\"id\" href=\"#dx\">dx</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>: \"0\" (*<a class=\"id\" href=\"#ax\">ax</a>), \"2\" (*<a class=\"id\" href=\"#cx\">cx</a>));", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#bx\">bx</a> &= <a class=\"id\" href=\"#maskebx\">maskebx</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#cx\">cx</a> &= <a class=\"id\" href=\"#maskecx\">maskecx</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#dx\">dx</a> &= <a class=\"id\" href=\"#maskedx\">maskedx</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#__init\">__init</a> void <a class=\"id\" href=\"#xen_init_cpuid_mask\">xen_init_cpuid_mask</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#ax\">ax</a>, <a class=\"id\" href=\"#bx\">bx</a>, <a class=\"id\" href=\"#cx\">cx</a>, <a class=\"id\" href=\"#dx\">dx</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuid_leaf1_edx_mask\">cpuid_leaf1_edx_mask</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>~((1 << <a class=\"id\" href=\"#X86_FEATURE_MCE\">X86_FEATURE_MCE</a>)  |  <span class=\"comment\">/* disable MCE */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>  (1 << <a class=\"id\" href=\"#X86_FEATURE_MCA\">X86_FEATURE_MCA</a>)  |  <span class=\"comment\">/* disable MCA */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>  (1 << <a class=\"id\" href=\"#X86_FEATURE_ACC\">X86_FEATURE_ACC</a>));   <span class=\"comment\">/* thermal monitoring */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#xen_initial_domain\">xen_initial_domain</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpuid_leaf1_edx_mask\">cpuid_leaf1_edx_mask</a> &=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>~((1 << <a class=\"id\" href=\"#X86_FEATURE_APIC\">X86_FEATURE_APIC</a>) |  <span class=\"comment\">/* disable local APIC */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  (1 << <a class=\"id\" href=\"#X86_FEATURE_ACPI\">X86_FEATURE_ACPI</a>));  <span class=\"comment\">/* disable ACPI */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ax\">ax</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cx\">cx</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_cpuid\">xen_cpuid</a>(&amp;<a class=\"id\" href=\"#ax\">ax</a>, &amp;<a class=\"id\" href=\"#bx\">bx</a>, &amp;<a class=\"id\" href=\"#cx\">cx</a>, &amp;<a class=\"id\" href=\"#dx\">dx</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* cpuid claims we support xsave; try enabling it to see what happens */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cx\">cx</a> &amp; (1 << (<a class=\"id\" href=\"#X86_FEATURE_XSAVE\">X86_FEATURE_XSAVE</a> % 32))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#cr4\">cr4</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_in_cr4\">set_in_cr4</a>(<a class=\"id\" href=\"#X86_CR4_OSXSAVE\">X86_CR4_OSXSAVE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cr4\">cr4</a> = <a class=\"id\" href=\"#read_cr4\">read_cr4</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#cr4\">cr4</a> &amp; <a class=\"id\" href=\"#X86_CR4_OSXSAVE\">X86_CR4_OSXSAVE</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpuid_leaf1_ecx_mask\">cpuid_leaf1_ecx_mask</a> &= ~(1 << (<a class=\"id\" href=\"#X86_FEATURE_XSAVE\">X86_FEATURE_XSAVE</a> % 32));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_in_cr4\">clear_in_cr4</a>(<a class=\"id\" href=\"#X86_CR4_OSXSAVE\">X86_CR4_OSXSAVE</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#xen_set_debugreg\">xen_set_debugreg</a>(int <a class=\"id\" href=\"#reg\">reg</a>, unsigned long <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#HYPERVISOR_set_debugreg\">HYPERVISOR_set_debugreg</a>(<a class=\"id\" href=\"#reg\">reg</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"}", 
"", 
"static unsigned long <a class=\"id\" href=\"#xen_get_debugreg\">xen_get_debugreg</a>(int <a class=\"id\" href=\"#reg\">reg</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#HYPERVISOR_get_debugreg\">HYPERVISOR_get_debugreg</a>(<a class=\"id\" href=\"#reg\">reg</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#xen_end_context_switch\">xen_end_context_switch</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#next\">next</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_mc_flush\">xen_mc_flush</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#paravirt_end_context_switch\">paravirt_end_context_switch</a>(<a class=\"id\" href=\"#next\">next</a>);", 
"}", 
"", 
"static unsigned long <a class=\"id\" href=\"#xen_store_tr\">xen_store_tr</a>(void)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Set the page permissions for a particular virtual address.  If the</span>", 
"<span class=\"comment\"> * address is a vmalloc mapping (or other non-linear mapping), then</span>", 
"<span class=\"comment\"> * find the linear mapping of the page and also set its protections to</span>", 
"<span class=\"comment\"> * match.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#set_aliased_prot\">set_aliased_prot</a>(void *<a class=\"id\" href=\"#v\">v</a>, <a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#prot\">prot</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#level\">level</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#ptep\">ptep</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#pte\">pte</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptep\">ptep</a> = <a class=\"id\" href=\"#lookup_address\">lookup_address</a>((unsigned long)<a class=\"id\" href=\"#v\">v</a>, &amp;<a class=\"id\" href=\"#level\">level</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ptep\">ptep</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#pte_pfn\">pte_pfn</a>(*<a class=\"id\" href=\"#ptep\">ptep</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#pfn\">pfn</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#pfn_pte\">pfn_pte</a>(<a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#prot\">prot</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#HYPERVISOR_update_va_mapping\">HYPERVISOR_update_va_mapping</a>((unsigned long)<a class=\"id\" href=\"#v\">v</a>, <a class=\"id\" href=\"#pte\">pte</a>, 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#PageHighMem\">PageHighMem</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#av\">av</a> = <a class=\"id\" href=\"#__va\">__va</a>(<a class=\"id\" href=\"#PFN_PHYS\">PFN_PHYS</a>(<a class=\"id\" href=\"#pfn\">pfn</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#av\">av</a> != <a class=\"id\" href=\"#v\">v</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#HYPERVISOR_update_va_mapping\">HYPERVISOR_update_va_mapping</a>((unsigned long)<a class=\"id\" href=\"#av\">av</a>, <a class=\"id\" href=\"#pte\">pte</a>, 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmap_flush_unused\">kmap_flush_unused</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#xen_alloc_ldt\">xen_alloc_ldt</a>(struct <a class=\"id\" href=\"#desc_struct\">desc_struct</a> *<a class=\"id\" href=\"#ldt\">ldt</a>, unsigned <a class=\"id\" href=\"#entries\">entries</a>)", 
"{", 
"<span class=\"ts\"/>const unsigned <a class=\"id\" href=\"#entries_per_page\">entries_per_page</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> / <a class=\"id\" href=\"#LDT_ENTRY_SIZE\">LDT_ENTRY_SIZE</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for(<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#entries\">entries</a>; <a class=\"id\" href=\"#i\">i</a> += <a class=\"id\" href=\"#entries_per_page\">entries_per_page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_aliased_prot\">set_aliased_prot</a>(<a class=\"id\" href=\"#ldt\">ldt</a> + <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#PAGE_KERNEL_RO\">PAGE_KERNEL_RO</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#xen_free_ldt\">xen_free_ldt</a>(struct <a class=\"id\" href=\"#desc_struct\">desc_struct</a> *<a class=\"id\" href=\"#ldt\">ldt</a>, unsigned <a class=\"id\" href=\"#entries\">entries</a>)", 
"{", 
"<span class=\"ts\"/>const unsigned <a class=\"id\" href=\"#entries_per_page\">entries_per_page</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> / <a class=\"id\" href=\"#LDT_ENTRY_SIZE\">LDT_ENTRY_SIZE</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for(<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#entries\">entries</a>; <a class=\"id\" href=\"#i\">i</a> += <a class=\"id\" href=\"#entries_per_page\">entries_per_page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_aliased_prot\">set_aliased_prot</a>(<a class=\"id\" href=\"#ldt\">ldt</a> + <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#PAGE_KERNEL\">PAGE_KERNEL</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#xen_set_ldt\">xen_set_ldt</a>(const void *<a class=\"id\" href=\"#addr\">addr</a>, unsigned <a class=\"id\" href=\"#entries\">entries</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mmuext_op\">mmuext_op</a> *<a class=\"id\" href=\"#op\">op</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#multicall_space\">multicall_space</a> <a class=\"id\" href=\"#mcs\">mcs</a> = <a class=\"id\" href=\"#xen_mc_entry\">xen_mc_entry</a>(sizeof(*<a class=\"id\" href=\"#op\">op</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a> = <a class=\"id\" href=\"#mcs\">mcs</a>.<a class=\"id\" href=\"#args\">args</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#cmd\">cmd</a> = <a class=\"id\" href=\"#MMUEXT_SET_LDT\">MMUEXT_SET_LDT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#arg1\">arg1</a>.<a class=\"id\" href=\"#linear_addr\">linear_addr</a> = (unsigned long)<a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#arg2\">arg2</a>.<a class=\"id\" href=\"#nr_ents\">nr_ents</a> = <a class=\"id\" href=\"#entries\">entries</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MULTI_mmuext_op\">MULTI_mmuext_op</a>(<a class=\"id\" href=\"#mcs\">mcs</a>.<a class=\"id\" href=\"#mc\">mc</a>, <a class=\"id\" href=\"#op\">op</a>, 1, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#DOMID_SELF\">DOMID_SELF</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_mc_issue\">xen_mc_issue</a>(<a class=\"id\" href=\"#PARAVIRT_LAZY_CPU\">PARAVIRT_LAZY_CPU</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#xen_load_gdt\">xen_load_gdt</a>(const struct <a class=\"id\" href=\"#desc_ptr\">desc_ptr</a> *<a class=\"id\" href=\"#dtr\">dtr</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#va\">va</a> = <a class=\"id\" href=\"#dtr\">dtr</a>-><a class=\"id\" href=\"#address\">address</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#dtr\">dtr</a>-><a class=\"id\" href=\"#size\">size</a> + 1;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#pages\">pages</a> = (<a class=\"id\" href=\"#size\">size</a> + <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - 1) / <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#frames\">frames</a>[<a class=\"id\" href=\"#pages\">pages</a>];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#f\">f</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A GDT can be up to 64k in size, which corresponds to 8192</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 8-byte entries, or 16 4k pages..</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#size\">size</a> &gt; 65536);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#va\">va</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#f\">f</a> = 0; <a class=\"id\" href=\"#va\">va</a> &lt; <a class=\"id\" href=\"#dtr\">dtr</a>-><a class=\"id\" href=\"#address\">address</a> + <a class=\"id\" href=\"#size\">size</a>; <a class=\"id\" href=\"#va\">va</a> += <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, <a class=\"id\" href=\"#f\">f</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#level\">level</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#ptep\">ptep</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#mfn\">mfn</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#virt\">virt</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The GDT is per-cpu and is in the percpu data area.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * That can be virtually mapped, so we need to do a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * page-walk to get the underlying MFN for the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * hypercall.  The page can also be in the kernel's</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * linear range, so we need to RO that mapping too.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptep\">ptep</a> = <a class=\"id\" href=\"#lookup_address\">lookup_address</a>(<a class=\"id\" href=\"#va\">va</a>, &amp;<a class=\"id\" href=\"#level\">level</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ptep\">ptep</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#pte_pfn\">pte_pfn</a>(*<a class=\"id\" href=\"#ptep\">ptep</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mfn\">mfn</a> = <a class=\"id\" href=\"#pfn_to_mfn\">pfn_to_mfn</a>(<a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#virt\">virt</a> = <a class=\"id\" href=\"#__va\">__va</a>(<a class=\"id\" href=\"#PFN_PHYS\">PFN_PHYS</a>(<a class=\"id\" href=\"#pfn\">pfn</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#frames\">frames</a>[<a class=\"id\" href=\"#f\">f</a>] = <a class=\"id\" href=\"#mfn\">mfn</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#make_lowmem_page_readonly\">make_lowmem_page_readonly</a>((void *)<a class=\"id\" href=\"#va\">va</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#make_lowmem_page_readonly\">make_lowmem_page_readonly</a>(<a class=\"id\" href=\"#virt\">virt</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#HYPERVISOR_set_gdt\">HYPERVISOR_set_gdt</a>(<a class=\"id\" href=\"#frames\">frames</a>, <a class=\"id\" href=\"#size\">size</a> / sizeof(struct <a class=\"id\" href=\"#desc_struct\">desc_struct</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * load_gdt for early boot, when the gdt is only mapped once</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#__init\">__init</a> void <a class=\"id\" href=\"#xen_load_gdt_boot\">xen_load_gdt_boot</a>(const struct <a class=\"id\" href=\"#desc_ptr\">desc_ptr</a> *<a class=\"id\" href=\"#dtr\">dtr</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#va\">va</a> = <a class=\"id\" href=\"#dtr\">dtr</a>-><a class=\"id\" href=\"#address\">address</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#dtr\">dtr</a>-><a class=\"id\" href=\"#size\">size</a> + 1;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#pages\">pages</a> = (<a class=\"id\" href=\"#size\">size</a> + <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - 1) / <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#frames\">frames</a>[<a class=\"id\" href=\"#pages\">pages</a>];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#f\">f</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A GDT can be up to 64k in size, which corresponds to 8192</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 8-byte entries, or 16 4k pages..</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#size\">size</a> &gt; 65536);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#va\">va</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#f\">f</a> = 0; <a class=\"id\" href=\"#va\">va</a> &lt; <a class=\"id\" href=\"#dtr\">dtr</a>-><a class=\"id\" href=\"#address\">address</a> + <a class=\"id\" href=\"#size\">size</a>; <a class=\"id\" href=\"#va\">va</a> += <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, <a class=\"id\" href=\"#f\">f</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#pte\">pte</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#mfn\">mfn</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#virt_to_pfn\">virt_to_pfn</a>(<a class=\"id\" href=\"#va\">va</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mfn\">mfn</a> = <a class=\"id\" href=\"#pfn_to_mfn\">pfn_to_mfn</a>(<a class=\"id\" href=\"#pfn\">pfn</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#pfn_pte\">pfn_pte</a>(<a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#PAGE_KERNEL_RO\">PAGE_KERNEL_RO</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#HYPERVISOR_update_va_mapping\">HYPERVISOR_update_va_mapping</a>((unsigned long)<a class=\"id\" href=\"#va\">va</a>, <a class=\"id\" href=\"#pte\">pte</a>, 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#frames\">frames</a>[<a class=\"id\" href=\"#f\">f</a>] = <a class=\"id\" href=\"#mfn\">mfn</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#HYPERVISOR_set_gdt\">HYPERVISOR_set_gdt</a>(<a class=\"id\" href=\"#frames\">frames</a>, <a class=\"id\" href=\"#size\">size</a> / sizeof(struct <a class=\"id\" href=\"#desc_struct\">desc_struct</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#load_TLS_descriptor\">load_TLS_descriptor</a>(struct <a class=\"id\" href=\"#thread_struct\">thread_struct</a> *<a class=\"id\" href=\"#t\">t</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>, unsigned int <a class=\"id\" href=\"#i\">i</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#desc_struct\">desc_struct</a> *<a class=\"id\" href=\"#gdt\">gdt</a> = <a class=\"id\" href=\"#get_cpu_gdt_table\">get_cpu_gdt_table</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xmaddr_t\">xmaddr_t</a> <a class=\"id\" href=\"#maddr\">maddr</a> = <a class=\"id\" href=\"#arbitrary_virt_to_machine\">arbitrary_virt_to_machine</a>(&amp;<a class=\"id\" href=\"#gdt\">gdt</a>[<a class=\"id\" href=\"#GDT_ENTRY_TLS_MIN\">GDT_ENTRY_TLS_MIN</a>+<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#multicall_space\">multicall_space</a> <a class=\"id\" href=\"#mc\">mc</a> = <a class=\"id\" href=\"#__xen_mc_entry\">__xen_mc_entry</a>(0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MULTI_update_descriptor\">MULTI_update_descriptor</a>(<a class=\"id\" href=\"#mc\">mc</a>.<a class=\"id\" href=\"#mc\">mc</a>, <a class=\"id\" href=\"#maddr\">maddr</a>.<a class=\"id\" href=\"#maddr\">maddr</a>, <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#tls_array\">tls_array</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#xen_load_tls\">xen_load_tls</a>(struct <a class=\"id\" href=\"#thread_struct\">thread_struct</a> *<a class=\"id\" href=\"#t\">t</a>, unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
];
xr_frag_insert('l/16/bd44810537cfdd0dcc9fb4ff300783e277b764.xr', __xr_tmp);
