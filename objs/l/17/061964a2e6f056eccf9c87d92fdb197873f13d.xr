var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_ASM_X86_SYSTEM_H\">_ASM_X86_SYSTEM_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_ASM_X86_SYSTEM_H\">_ASM_X86_SYSTEM_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#asm\">asm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#segment\">segment</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#cpufeature\">cpufeature</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#cmpxchg\">cmpxchg</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#nops\">nops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#irqflags\">irqflags</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/* entries in ARCH_DLINFO: */</span>", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IA32_EMULATION\">CONFIG_IA32_EMULATION</a>) || !<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#AT_VECTOR_SIZE_ARCH\">AT_VECTOR_SIZE_ARCH</a> 2", 
"#else <span class=\"comment\">/* else it's non-compat x86-64 */</span>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#AT_VECTOR_SIZE_ARCH\">AT_VECTOR_SIZE_ARCH</a> 1", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"struct <a class=\"id\" href=\"#task_struct\">task_struct</a>; <span class=\"comment\">/* one of the stranger aspects of C forward declarations */</span>", 
"struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#__switch_to\">__switch_to</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#prev\">prev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#next\">next</a>);", 
"struct <a class=\"id\" href=\"#tss_struct\">tss_struct</a>;", 
"void <a class=\"id\" href=\"#__switch_to_xtra\">__switch_to_xtra</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#prev_p\">prev_p</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#next_p\">next_p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#tss_struct\">tss_struct</a> *<a class=\"id\" href=\"#tss\">tss</a>);", 
"extern void <a class=\"id\" href=\"#show_regs_common\">show_regs_common</a>(void);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CC_STACKPROTECTOR\">CONFIG_CC_STACKPROTECTOR</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__switch_canary\">__switch_canary</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\"movl %P[task_canary](%[next]), %%ebx\\n\\t\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>\"movl %%ebx, \"<a class=\"id\" href=\"#__percpu_arg\">__percpu_arg</a>([<a class=\"id\" href=\"#stack_canary\">stack_canary</a>])\"\\n\\t\"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__switch_canary_oparam\">__switch_canary_oparam</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>, [<a class=\"id\" href=\"#stack_canary\">stack_canary</a>] \"=m\" (<a class=\"id\" href=\"#stack_canary\">stack_canary</a>.<a class=\"id\" href=\"#canary\">canary</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__switch_canary_iparam\">__switch_canary_iparam</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>, [<a class=\"id\" href=\"#task_canary\">task_canary</a>] \"i\" (<a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a>, <a class=\"id\" href=\"#stack_canary\">stack_canary</a>))", 
"#else<span class=\"ts\"/><span class=\"comment\">/* CC_STACKPROTECTOR */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__switch_canary\">__switch_canary</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__switch_canary_oparam\">__switch_canary_oparam</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__switch_canary_iparam\">__switch_canary_iparam</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* CC_STACKPROTECTOR */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Saving eflags is important. It switches not only IOPL between tasks,</span>", 
"<span class=\"comment\"> * it also protects other tasks from NT leaking through sysenter etc.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#switch_to\">switch_to</a>(<a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#last\">last</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"comment\">/*<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Context-switching clobbers all registers, so we clobber<span class=\"ts\"/>\\</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * them explicitly, via unused output variables.<span class=\"ts\"/><span class=\"ts\"/>\\</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (EAX and EBP is not listed because EBP is saved/restored<span class=\"ts\"/>\\</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * explicitly for wchan access and EAX is the return value of<span class=\"ts\"/>\\</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * __switch_to())<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ebx\">ebx</a>, <a class=\"id\" href=\"#ecx\">ecx</a>, <a class=\"id\" href=\"#edx\">edx</a>, <a class=\"id\" href=\"#esi\">esi</a>, <a class=\"id\" href=\"#edi\">edi</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"pushfl\\n\\t\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* save    flags */</span><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"pushl %%ebp\\n\\t\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* save    EBP   */</span><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"movl %%esp,%[prev_sp]\\n\\t\"<span class=\"ts\"/><span class=\"comment\">/* save    ESP   */</span> \\", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"movl %[next_sp],%%esp\\n\\t\"<span class=\"ts\"/><span class=\"comment\">/* restore ESP   */</span> \\", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"movl $1f,%[prev_ip]\\n\\t\"<span class=\"ts\"/><span class=\"comment\">/* save    EIP   */</span><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"pushl %[next_ip]\\n\\t\"<span class=\"ts\"/><span class=\"comment\">/* restore EIP   */</span><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#__switch_canary\">__switch_canary</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"jmp __switch_to\\n\"<span class=\"ts\"/><span class=\"comment\">/* regparm call  */</span><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"1:\\t\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"popl %%ebp\\n\\t\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* restore EBP   */</span><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"popfl\\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* restore flags */</span><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     <span class=\"comment\">/* output parameters */</span><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     : [<a class=\"id\" href=\"#prev_sp\">prev_sp</a>] \"=m\" (<a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#sp\">sp</a>),<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>       [<a class=\"id\" href=\"#prev_ip\">prev_ip</a>] \"=m\" (<a class=\"id\" href=\"#prev\">prev</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#ip\">ip</a>),<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"=a\" (<a class=\"id\" href=\"#last\">last</a>),<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>       <span class=\"comment\">/* clobbered output registers: */</span><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"=b\" (<a class=\"id\" href=\"#ebx\">ebx</a>), \"=c\" (<a class=\"id\" href=\"#ecx\">ecx</a>), \"=d\" (<a class=\"id\" href=\"#edx\">edx</a>),<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"=S\" (<a class=\"id\" href=\"#esi\">esi</a>), \"=D\" (<a class=\"id\" href=\"#edi\">edi</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>       <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__switch_canary_oparam\">__switch_canary_oparam</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>       <span class=\"comment\">/* input parameters: */</span><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     : [<a class=\"id\" href=\"#next_sp\">next_sp</a>]  \"m\" (<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#sp\">sp</a>),<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>       [<a class=\"id\" href=\"#next_ip\">next_ip</a>]  \"m\" (<a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#ip\">ip</a>),<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>       <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>       <span class=\"comment\">/* regparm parameters for __switch_to(): */</span><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>       [<a class=\"id\" href=\"#prev\">prev</a>]     \"a\" (<a class=\"id\" href=\"#prev\">prev</a>),<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>       [<a class=\"id\" href=\"#next\">next</a>]     \"d\" (<a class=\"id\" href=\"#next\">next</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__switch_canary_iparam\">__switch_canary_iparam</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     : <span class=\"comment\">/* reloaded segment registers */</span><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"memory\");<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while (0)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * disable hlt during certain critical i/o operations</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HAVE_DISABLE_HLT\">HAVE_DISABLE_HLT</a>", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__SAVE\">__SAVE</a>(<a class=\"id\" href=\"#reg\">reg</a>, <a class=\"id\" href=\"#offset\">offset</a>) \"movq %%\" #<a class=\"id\" href=\"#reg\">reg</a> \",(14-\" #<a class=\"id\" href=\"#offset\">offset</a> \")*8(%%rsp)\\n\\t\"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__RESTORE\">__RESTORE</a>(<a class=\"id\" href=\"#reg\">reg</a>, <a class=\"id\" href=\"#offset\">offset</a>) \"movq (14-\" #<a class=\"id\" href=\"#offset\">offset</a> \")*8(%%rsp),%%\" #<a class=\"id\" href=\"#reg\">reg</a> \"\\n\\t\"", 
"", 
"<span class=\"comment\">/* frame pointer must be last for get_wchan */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SAVE_CONTEXT\">SAVE_CONTEXT</a>    \"pushf ; pushq %%rbp ; movq %%rsi,%%rbp\\n\\t\"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RESTORE_CONTEXT\">RESTORE_CONTEXT</a> \"movq %%rbp,%%rsi ; popq %%rbp ; popf\\t\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__EXTRA_CLOBBER\">__EXTRA_CLOBBER</a>  \\", 
"<span class=\"ts\"/>, \"rcx\", \"rbx\", \"rdx\", \"r8\", \"r9\", \"r10\", \"r11\", \\", 
"<span class=\"ts\"/>  \"r12\", \"r13\", \"r14\", \"r15\"", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CC_STACKPROTECTOR\">CONFIG_CC_STACKPROTECTOR</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__switch_canary\">__switch_canary</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \\", 
"<span class=\"ts\"/>\"movq %P[task_canary](%%rsi),%%r8\\n\\t\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \\", 
"<span class=\"ts\"/>\"movq %%r8,\"<a class=\"id\" href=\"#__percpu_arg\">__percpu_arg</a>([<a class=\"id\" href=\"#gs_canary\">gs_canary</a>])\"\\n\\t\"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__switch_canary_oparam\">__switch_canary_oparam</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \\", 
"<span class=\"ts\"/>, [<a class=\"id\" href=\"#gs_canary\">gs_canary</a>] \"=m\" (<a class=\"id\" href=\"#irq_stack_union\">irq_stack_union</a>.<a class=\"id\" href=\"#stack_canary\">stack_canary</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__switch_canary_iparam\">__switch_canary_iparam</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \\", 
"<span class=\"ts\"/>, [<a class=\"id\" href=\"#task_canary\">task_canary</a>] \"i\" (<a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a>, <a class=\"id\" href=\"#stack_canary\">stack_canary</a>))", 
"#else<span class=\"ts\"/><span class=\"comment\">/* CC_STACKPROTECTOR */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__switch_canary\">__switch_canary</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__switch_canary_oparam\">__switch_canary_oparam</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__switch_canary_iparam\">__switch_canary_iparam</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* CC_STACKPROTECTOR */</span>", 
"", 
"<span class=\"comment\">/* Save restore flags to clear handle leaking NT */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#switch_to\">switch_to</a>(<a class=\"id\" href=\"#prev\">prev</a>, <a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#last\">last</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(<a class=\"id\" href=\"#SAVE_CONTEXT\">SAVE_CONTEXT</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \\", 
"<span class=\"ts\"/>     \"movq %%rsp,%P[threadrsp](%[prev])\\n\\t\" <span class=\"comment\">/* save RSP */</span><span class=\"ts\"/>  \\", 
"<span class=\"ts\"/>     \"movq %P[threadrsp](%[next]),%%rsp\\n\\t\" <span class=\"comment\">/* restore RSP */</span><span class=\"ts\"/>  \\", 
"<span class=\"ts\"/>     \"call __switch_to\\n\\t\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \\", 
"<span class=\"ts\"/>     \"movq \"<a class=\"id\" href=\"#__percpu_arg\">__percpu_arg</a>([<a class=\"id\" href=\"#current_task\">current_task</a>])\",%%rsi\\n\\t\"<span class=\"ts\"/><span class=\"ts\"/>  \\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#__switch_canary\">__switch_canary</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \\", 
"<span class=\"ts\"/>     \"movq %P[thread_info](%%rsi),%%r8\\n\\t\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \\", 
"<span class=\"ts\"/>     \"movq %%rax,%%rdi\\n\\t\" <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \\", 
"<span class=\"ts\"/>     \"testl  %[_tif_fork],%P[ti_flags](%%r8)\\n\\t\"<span class=\"ts\"/><span class=\"ts\"/>  \\", 
"<span class=\"ts\"/>     \"jnz   ret_from_fork\\n\\t\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#RESTORE_CONTEXT\">RESTORE_CONTEXT</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \\", 
"<span class=\"ts\"/>     : \"=a\" (<a class=\"id\" href=\"#last\">last</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <span class=\"ts\"/>  \\", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#__switch_canary_oparam\">__switch_canary_oparam</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \\", 
"<span class=\"ts\"/>     : [<a class=\"id\" href=\"#next\">next</a>] \"S\" (<a class=\"id\" href=\"#next\">next</a>), [<a class=\"id\" href=\"#prev\">prev</a>] \"D\" (<a class=\"id\" href=\"#prev\">prev</a>),<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \\", 
"<span class=\"ts\"/>       [<a class=\"id\" href=\"#threadrsp\">threadrsp</a>] \"i\" (<a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a>, <a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#sp\">sp</a>)), \\", 
"<span class=\"ts\"/>       [<a class=\"id\" href=\"#ti_flags\">ti_flags</a>] \"i\" (<a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#thread_info\">thread_info</a>, <a class=\"id\" href=\"#flags\">flags</a>)),<span class=\"ts\"/>  \\", 
"<span class=\"ts\"/>       [<a class=\"id\" href=\"#_tif_fork\">_tif_fork</a>] \"i\" (<a class=\"id\" href=\"#_TIF_FORK\">_TIF_FORK</a>),<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <span class=\"ts\"/>  \\", 
"<span class=\"ts\"/>       [<a class=\"id\" href=\"#thread_info\">thread_info</a>] \"i\" (<a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a>, <a class=\"id\" href=\"#stack\">stack</a>)),   \\", 
"<span class=\"ts\"/>       [<a class=\"id\" href=\"#current_task\">current_task</a>] \"m\" (<a class=\"id\" href=\"#current_task\">current_task</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \\", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#__switch_canary_iparam\">__switch_canary_iparam</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \\", 
"<span class=\"ts\"/>     : \"memory\", \"cc\" <a class=\"id\" href=\"#__EXTRA_CLOBBER\">__EXTRA_CLOBBER</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"", 
"extern void <a class=\"id\" href=\"#native_load_gs_index\">native_load_gs_index</a>(unsigned);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Load a segment. Fall back on loading the zero</span>", 
"<span class=\"comment\"> * segment if something goes wrong..</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#loadsegment\">loadsegment</a>(<a class=\"id\" href=\"#seg\">seg</a>, <a class=\"id\" href=\"#value\">value</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#__val\">__val</a> = (<a class=\"id\" href=\"#value\">value</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"      \\n\"<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"1: movl %k0,%%\" #<a class=\"id\" href=\"#seg\">seg</a> \"  \\n\"<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     \".section .fixup,\\\"ax\\\"   \\n\"<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"2: xorl %k0,%k0   \\n\"<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"  jmp 1b    \\n\"<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     \".previous     \\n\"<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#_ASM_EXTABLE\">_ASM_EXTABLE</a>(1<a class=\"id\" href=\"#b\">b</a>, 2<a class=\"id\" href=\"#b\">b</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"+r\" (<a class=\"id\" href=\"#__val\">__val</a>) : : \"memory\");<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while (0)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Save a segment register away</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#savesegment\">savesegment</a>(<a class=\"id\" href=\"#seg\">seg</a>, <a class=\"id\" href=\"#value\">value</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a>(\"mov %%\" #<a class=\"id\" href=\"#seg\">seg</a> \",%0\":\"=r\" (<a class=\"id\" href=\"#value\">value</a>) : : \"memory\")", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * x86_32 user gs accessors.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32_LAZY_GS\">CONFIG_X86_32_LAZY_GS</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#get_user_gs\">get_user_gs</a>(<a class=\"id\" href=\"#regs\">regs</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#u16\">u16</a>)({unsigned long <a class=\"id\" href=\"#v\">v</a>; <a class=\"id\" href=\"#savesegment\">savesegment</a>(<a class=\"id\" href=\"#gs\">gs</a>, <a class=\"id\" href=\"#v\">v</a>); <a class=\"id\" href=\"#v\">v</a>;})", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#set_user_gs\">set_user_gs</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#v\">v</a>)<span class=\"ts\"/><a class=\"id\" href=\"#loadsegment\">loadsegment</a>(<a class=\"id\" href=\"#gs\">gs</a>, (unsigned long)(<a class=\"id\" href=\"#v\">v</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#task_user_gs\">task_user_gs</a>(<a class=\"id\" href=\"#tsk\">tsk</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#tsk\">tsk</a>)-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#gs\">gs</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lazy_save_gs\">lazy_save_gs</a>(<a class=\"id\" href=\"#v\">v</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#savesegment\">savesegment</a>(<a class=\"id\" href=\"#gs\">gs</a>, (<a class=\"id\" href=\"#v\">v</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lazy_load_gs\">lazy_load_gs</a>(<a class=\"id\" href=\"#v\">v</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loadsegment\">loadsegment</a>(<a class=\"id\" href=\"#gs\">gs</a>, (<a class=\"id\" href=\"#v\">v</a>))", 
"#else<span class=\"ts\"/><span class=\"comment\">/* X86_32_LAZY_GS */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#get_user_gs\">get_user_gs</a>(<a class=\"id\" href=\"#regs\">regs</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#u16\">u16</a>)((<a class=\"id\" href=\"#regs\">regs</a>)-><a class=\"id\" href=\"#gs\">gs</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#set_user_gs\">set_user_gs</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#v\">v</a>)<span class=\"ts\"/>do { (<a class=\"id\" href=\"#regs\">regs</a>)-><a class=\"id\" href=\"#gs\">gs</a> = (<a class=\"id\" href=\"#v\">v</a>); } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#task_user_gs\">task_user_gs</a>(<a class=\"id\" href=\"#tsk\">tsk</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#task_pt_regs\">task_pt_regs</a>(<a class=\"id\" href=\"#tsk\">tsk</a>)-><a class=\"id\" href=\"#gs\">gs</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lazy_save_gs\">lazy_save_gs</a>(<a class=\"id\" href=\"#v\">v</a>)<span class=\"ts\"/><span class=\"ts\"/>do { } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#lazy_load_gs\">lazy_load_gs</a>(<a class=\"id\" href=\"#v\">v</a>)<span class=\"ts\"/><span class=\"ts\"/>do { } while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* X86_32_LAZY_GS */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* X86_32 */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#get_limit\">get_limit</a>(unsigned long <a class=\"id\" href=\"#segment\">segment</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#__limit\">__limit</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a>(\"lsll %1,%0\" : \"=r\" (<a class=\"id\" href=\"#__limit\">__limit</a>) : \"r\" (<a class=\"id\" href=\"#segment\">segment</a>));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__limit\">__limit</a> + 1;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#native_clts\">native_clts</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"clts\");", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Volatile isn't enough to prevent the compiler from reordering the</span>", 
"<span class=\"comment\"> * read/write functions for the control registers and messing everything up.</span>", 
"<span class=\"comment\"> * A memory clobber would solve the problem, but would prevent reordering of</span>", 
"<span class=\"comment\"> * all loads stores around it, which can hurt performance. Solution is to</span>", 
"<span class=\"comment\"> * use a variable and mimic reads and writes to it to enforce serialization</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned long <a class=\"id\" href=\"#__force_order\">__force_order</a>;", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#native_read_cr0\">native_read_cr0</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"mov %%cr0,%0\\n\\t\" : \"=r\" (<a class=\"id\" href=\"#val\">val</a>), \"=m\" (<a class=\"id\" href=\"#__force_order\">__force_order</a>));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#val\">val</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#native_write_cr0\">native_write_cr0</a>(unsigned long <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"mov %0,%%cr0\": : \"r\" (<a class=\"id\" href=\"#val\">val</a>), \"m\" (<a class=\"id\" href=\"#__force_order\">__force_order</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#native_read_cr2\">native_read_cr2</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"mov %%cr2,%0\\n\\t\" : \"=r\" (<a class=\"id\" href=\"#val\">val</a>), \"=m\" (<a class=\"id\" href=\"#__force_order\">__force_order</a>));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#val\">val</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#native_write_cr2\">native_write_cr2</a>(unsigned long <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"mov %0,%%cr2\": : \"r\" (<a class=\"id\" href=\"#val\">val</a>), \"m\" (<a class=\"id\" href=\"#__force_order\">__force_order</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#native_read_cr3\">native_read_cr3</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"mov %%cr3,%0\\n\\t\" : \"=r\" (<a class=\"id\" href=\"#val\">val</a>), \"=m\" (<a class=\"id\" href=\"#__force_order\">__force_order</a>));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#val\">val</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#native_write_cr3\">native_write_cr3</a>(unsigned long <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"mov %0,%%cr3\": : \"r\" (<a class=\"id\" href=\"#val\">val</a>), \"m\" (<a class=\"id\" href=\"#__force_order\">__force_order</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#native_read_cr4\">native_read_cr4</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"mov %%cr4,%0\\n\\t\" : \"=r\" (<a class=\"id\" href=\"#val\">val</a>), \"=m\" (<a class=\"id\" href=\"#__force_order\">__force_order</a>));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#val\">val</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#native_read_cr4_safe\">native_read_cr4_safe</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* This could fault if %cr4 does not exist. In x86_64, a cr4 always</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * exists, so it will never fail. */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"1: mov %%cr4, %0\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"2:\\n\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#_ASM_EXTABLE\">_ASM_EXTABLE</a>(1<a class=\"id\" href=\"#b\">b</a>, 2<a class=\"id\" href=\"#b\">b</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"=r\" (<a class=\"id\" href=\"#val\">val</a>), \"=m\" (<a class=\"id\" href=\"#__force_order\">__force_order</a>) : \"0\" (0));", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#native_read_cr4\">native_read_cr4</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#val\">val</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#native_write_cr4\">native_write_cr4</a>(unsigned long <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"mov %0,%%cr4\": : \"r\" (<a class=\"id\" href=\"#val\">val</a>), \"m\" (<a class=\"id\" href=\"#__force_order\">__force_order</a>));", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#native_read_cr8\">native_read_cr8</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#cr8\">cr8</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"movq %%cr8,%0\" : \"=r\" (<a class=\"id\" href=\"#cr8\">cr8</a>));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cr8\">cr8</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#native_write_cr8\">native_write_cr8</a>(unsigned long <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"movq %0,%%cr8\" :: \"r\" (<a class=\"id\" href=\"#val\">val</a>) : \"memory\");", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#native_wbinvd\">native_wbinvd</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"wbinvd\": : :\"memory\");", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PARAVIRT\">CONFIG_PARAVIRT</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#paravirt\">paravirt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#read_cr0\">read_cr0</a>()<span class=\"ts\"/>(<a class=\"id\" href=\"#native_read_cr0\">native_read_cr0</a>())", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#write_cr0\">write_cr0</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#native_write_cr0\">native_write_cr0</a>(<a class=\"id\" href=\"#x\">x</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#read_cr2\">read_cr2</a>()<span class=\"ts\"/>(<a class=\"id\" href=\"#native_read_cr2\">native_read_cr2</a>())", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#write_cr2\">write_cr2</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#native_write_cr2\">native_write_cr2</a>(<a class=\"id\" href=\"#x\">x</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#read_cr3\">read_cr3</a>()<span class=\"ts\"/>(<a class=\"id\" href=\"#native_read_cr3\">native_read_cr3</a>())", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#write_cr3\">write_cr3</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#native_write_cr3\">native_write_cr3</a>(<a class=\"id\" href=\"#x\">x</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#read_cr4\">read_cr4</a>()<span class=\"ts\"/>(<a class=\"id\" href=\"#native_read_cr4\">native_read_cr4</a>())", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#read_cr4_safe\">read_cr4_safe</a>()<span class=\"ts\"/>(<a class=\"id\" href=\"#native_read_cr4_safe\">native_read_cr4_safe</a>())", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#write_cr4\">write_cr4</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#native_write_cr4\">native_write_cr4</a>(<a class=\"id\" href=\"#x\">x</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#wbinvd\">wbinvd</a>()<span class=\"ts\"/>(<a class=\"id\" href=\"#native_wbinvd\">native_wbinvd</a>())", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#read_cr8\">read_cr8</a>()<span class=\"ts\"/>(<a class=\"id\" href=\"#native_read_cr8\">native_read_cr8</a>())", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#write_cr8\">write_cr8</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#native_write_cr8\">native_write_cr8</a>(<a class=\"id\" href=\"#x\">x</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#load_gs_index\">load_gs_index</a>   <a class=\"id\" href=\"#native_load_gs_index\">native_load_gs_index</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* Clear the 'TS' bit */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#clts\">clts</a>()<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#native_clts\">native_clts</a>())", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"comment\">/* CONFIG_PARAVIRT */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#stts\">stts</a>() <a class=\"id\" href=\"#write_cr0\">write_cr0</a>(<a class=\"id\" href=\"#read_cr0\">read_cr0</a>() | <a class=\"id\" href=\"#X86_CR0_TS\">X86_CR0_TS</a>)", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __KERNEL__ */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#clflush\">clflush</a>(volatile void *<a class=\"id\" href=\"#__p\">__p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"clflush %0\" : \"+m\" (*(volatile char <a class=\"id\" href=\"#__force\">__force</a> *)<a class=\"id\" href=\"#__p\">__p</a>));", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#nop\">nop</a>() <a class=\"id\" href=\"#asm\">asm</a> volatile (\"nop\")", 
"", 
"void <a class=\"id\" href=\"#disable_hlt\">disable_hlt</a>(void);", 
"void <a class=\"id\" href=\"#enable_hlt\">enable_hlt</a>(void);", 
"", 
"void <a class=\"id\" href=\"#cpu_idle_wait\">cpu_idle_wait</a>(void);", 
"", 
"extern unsigned long <a class=\"id\" href=\"#arch_align_stack\">arch_align_stack</a>(unsigned long <a class=\"id\" href=\"#sp\">sp</a>);", 
"extern void <a class=\"id\" href=\"#free_init_pages\">free_init_pages</a>(char *<a class=\"id\" href=\"#what\">what</a>, unsigned long <a class=\"id\" href=\"#begin\">begin</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>);", 
"", 
"void <a class=\"id\" href=\"#default_idle\">default_idle</a>(void);", 
"", 
"void <a class=\"id\" href=\"#stop_this_cpu\">stop_this_cpu</a>(void *<a class=\"id\" href=\"#dummy\">dummy</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Force strict CPU ordering.</span>", 
"<span class=\"comment\"> * And yes, this is required on UP too when we're talking</span>", 
"<span class=\"comment\"> * to devices.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Some non-Intel clones support out of order store. wmb() ceases to be a</span>", 
"<span class=\"comment\"> * nop for these.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#mb\">mb</a>() <a class=\"id\" href=\"#alternative\">alternative</a>(\"lock; addl $0,0(%%esp)\", \"mfence\", <a class=\"id\" href=\"#X86_FEATURE_XMM2\">X86_FEATURE_XMM2</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rmb\">rmb</a>() <a class=\"id\" href=\"#alternative\">alternative</a>(\"lock; addl $0,0(%%esp)\", \"lfence\", <a class=\"id\" href=\"#X86_FEATURE_XMM2\">X86_FEATURE_XMM2</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#wmb\">wmb</a>() <a class=\"id\" href=\"#alternative\">alternative</a>(\"lock; addl $0,0(%%esp)\", \"sfence\", <a class=\"id\" href=\"#X86_FEATURE_XMM\">X86_FEATURE_XMM</a>)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#mb\">mb</a>() <span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"mfence\":::\"memory\")", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rmb\">rmb</a>()<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"lfence\":::\"memory\")", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#wmb\">wmb</a>()<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"sfence\" ::: \"memory\")", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * read_barrier_depends - Flush all pending reads that subsequents reads</span>", 
"<span class=\"comment\"> * depend on.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * No data-dependent reads from memory-like regions are ever reordered</span>", 
"<span class=\"comment\"> * over this barrier.  All reads preceding this primitive are guaranteed</span>", 
"<span class=\"comment\"> * to access memory (but not necessarily other CPUs' caches) before any</span>", 
"<span class=\"comment\"> * reads following this primitive that depend on the data return by</span>", 
"<span class=\"comment\"> * any of the preceding reads.  This primitive is much lighter weight than</span>", 
"<span class=\"comment\"> * rmb() on most CPUs, and is never heavier weight than is</span>", 
"<span class=\"comment\"> * rmb().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * These ordering constraints are respected by both the local CPU</span>", 
"<span class=\"comment\"> * and the compiler.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Ordering is not guaranteed by anything other than these primitives,</span>", 
"<span class=\"comment\"> * not even by data dependencies.  See the documentation for</span>", 
"<span class=\"comment\"> * memory_barrier() for examples and URLs to more information.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For example, the following code would force ordering (the initial</span>", 
"<span class=\"comment\"> * value of \"a\" is zero, \"b\" is one, and \"p\" is \"&amp;a\"):</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * &lt;programlisting&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>CPU 0<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>CPU 1</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>b = 2;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>memory_barrier();</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>p = &amp;b;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>q = p;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>read_barrier_depends();</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>d = *q;</span>", 
"<span class=\"comment\"> * &lt;/programlisting&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * because the read of \"*q\" depends on the read of \"p\" and these</span>", 
"<span class=\"comment\"> * two reads are separated by a read_barrier_depends().  However,</span>", 
"<span class=\"comment\"> * the following code, with the same initial values for \"a\" and \"b\":</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * &lt;programlisting&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>CPU 0<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>CPU 1</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>a = 2;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>memory_barrier();</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>b = 3;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>y = b;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>read_barrier_depends();</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>x = a;</span>", 
"<span class=\"comment\"> * &lt;/programlisting&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * does not enforce ordering, since there is no data dependency between</span>", 
"<span class=\"comment\"> * the read of \"a\" and the read of \"b\".  Therefore, on some CPUs, such</span>", 
"<span class=\"comment\"> * as Alpha, \"y\" could be set to 3 and \"x\" to 0.  Use rmb()</span>", 
"<span class=\"comment\"> * in cases like this where there are no data dependencies.</span>", 
"<span class=\"comment\"> **/</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#read_barrier_depends\">read_barrier_depends</a>()<span class=\"ts\"/>do { } while (0)", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#smp_mb\">smp_mb</a>()<span class=\"ts\"/><a class=\"id\" href=\"#mb\">mb</a>()", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_PPRO_FENCE\">CONFIG_X86_PPRO_FENCE</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#smp_rmb\">smp_rmb</a>()<span class=\"ts\"/><a class=\"id\" href=\"#rmb\">rmb</a>()", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#smp_rmb\">smp_rmb</a>()<span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>()", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_OOSTORE\">CONFIG_X86_OOSTORE</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>() <span class=\"ts\"/><a class=\"id\" href=\"#wmb\">wmb</a>()", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>()<span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>()", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#smp_read_barrier_depends\">smp_read_barrier_depends</a>()<span class=\"ts\"/><a class=\"id\" href=\"#read_barrier_depends\">read_barrier_depends</a>()", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#set_mb\">set_mb</a>(<a class=\"id\" href=\"#var\">var</a>, <a class=\"id\" href=\"#value\">value</a>) do { (void)<a class=\"id\" href=\"#xchg\">xchg</a>(&amp;<a class=\"id\" href=\"#var\">var</a>, <a class=\"id\" href=\"#value\">value</a>); } while (0)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#smp_mb\">smp_mb</a>()<span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>()", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#smp_rmb\">smp_rmb</a>()<span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>()", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>()<span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>()", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#smp_read_barrier_depends\">smp_read_barrier_depends</a>()<span class=\"ts\"/>do { } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#set_mb\">set_mb</a>(<a class=\"id\" href=\"#var\">var</a>, <a class=\"id\" href=\"#value\">value</a>) do { <a class=\"id\" href=\"#var\">var</a> = <a class=\"id\" href=\"#value\">value</a>; <a class=\"id\" href=\"#barrier\">barrier</a>(); } while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Stop RDTSC speculation. This is needed when you need to use RDTSC</span>", 
"<span class=\"comment\"> * (or get_cycles or vread that possibly accesses the TSC) in a defined</span>", 
"<span class=\"comment\"> * code region.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (Could use an alternative three way for this if there was one.)</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#__always_inline\">__always_inline</a> void <a class=\"id\" href=\"#rdtsc_barrier\">rdtsc_barrier</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alternative\">alternative</a>(<a class=\"id\" href=\"#ASM_NOP3\">ASM_NOP3</a>, \"mfence\", <a class=\"id\" href=\"#X86_FEATURE_MFENCE_RDTSC\">X86_FEATURE_MFENCE_RDTSC</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alternative\">alternative</a>(<a class=\"id\" href=\"#ASM_NOP3\">ASM_NOP3</a>, \"lfence\", <a class=\"id\" href=\"#X86_FEATURE_LFENCE_RDTSC\">X86_FEATURE_LFENCE_RDTSC</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We handle most unaligned accesses in hardware.  On the other hand</span>", 
"<span class=\"comment\"> * unaligned DMA can be quite expensive on some Nehalem processors.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Based on this we disable the IP header alignment in network drivers.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NET_IP_ALIGN\">NET_IP_ALIGN</a><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _ASM_X86_SYSTEM_H */</span>", 
];
xr_frag_insert('l/17/061964a2e6f056eccf9c87d92fdb197873f13d.xr', __xr_tmp);
