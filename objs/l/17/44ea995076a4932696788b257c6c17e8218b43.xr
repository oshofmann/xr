var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  Copyright (C) 2004 IBM Corporation</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Author: Serge Hallyn &lt;serue@us.ibm.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This program is free software; you can redistribute it and/or</span>", 
"<span class=\"comment\"> *  modify it under the terms of the GNU General Public License as</span>", 
"<span class=\"comment\"> *  published by the Free Software Foundation, version 2 of the</span>", 
"<span class=\"comment\"> *  License.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#uts\">uts</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#utsname\">utsname</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#err\">err</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static struct <a class=\"id\" href=\"#uts_namespace\">uts_namespace</a> *<a class=\"id\" href=\"#create_uts_ns\">create_uts_ns</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#uts_namespace\">uts_namespace</a> *<a class=\"id\" href=\"#uts_ns\">uts_ns</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uts_ns\">uts_ns</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(struct <a class=\"id\" href=\"#uts_namespace\">uts_namespace</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#uts_ns\">uts_ns</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kref_init\">kref_init</a>(&amp;<a class=\"id\" href=\"#uts_ns\">uts_ns</a>-><a class=\"id\" href=\"#kref\">kref</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#uts_ns\">uts_ns</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Clone a new ns copying an original utsname, setting refcount to 1</span>", 
"<span class=\"comment\"> * @old_ns: namespace to clone</span>", 
"<span class=\"comment\"> * Return NULL on error (failure to kmalloc), new ns otherwise</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#uts_namespace\">uts_namespace</a> *<a class=\"id\" href=\"#clone_uts_ns\">clone_uts_ns</a>(struct <a class=\"id\" href=\"#uts_namespace\">uts_namespace</a> *<a class=\"id\" href=\"#old_ns\">old_ns</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#uts_namespace\">uts_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ns\">ns</a> = <a class=\"id\" href=\"#create_uts_ns\">create_uts_ns</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ns\">ns</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#uts_sem\">uts_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#name\">name</a>, &amp;<a class=\"id\" href=\"#old_ns\">old_ns</a>-><a class=\"id\" href=\"#name\">name</a>, sizeof(<a class=\"id\" href=\"#ns\">ns</a>-><a class=\"id\" href=\"#name\">name</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#uts_sem\">uts_sem</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ns\">ns</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copy task tsk's utsname namespace, or clone it if flags</span>", 
"<span class=\"comment\"> * specifies CLONE_NEWUTS.  In latter case, changes to the</span>", 
"<span class=\"comment\"> * utsname of this process won't be seen by parent, and vice</span>", 
"<span class=\"comment\"> * versa.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#uts_namespace\">uts_namespace</a> *<a class=\"id\" href=\"#copy_utsname\">copy_utsname</a>(unsigned long <a class=\"id\" href=\"#flags\">flags</a>, struct <a class=\"id\" href=\"#uts_namespace\">uts_namespace</a> *<a class=\"id\" href=\"#old_ns\">old_ns</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#uts_namespace\">uts_namespace</a> *<a class=\"id\" href=\"#new_ns\">new_ns</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#old_ns\">old_ns</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_uts_ns\">get_uts_ns</a>(<a class=\"id\" href=\"#old_ns\">old_ns</a>);", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CLONE_NEWUTS\">CLONE_NEWUTS</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#old_ns\">old_ns</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#new_ns\">new_ns</a> = <a class=\"id\" href=\"#clone_uts_ns\">clone_uts_ns</a>(<a class=\"id\" href=\"#old_ns\">old_ns</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_uts_ns\">put_uts_ns</a>(<a class=\"id\" href=\"#old_ns\">old_ns</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#new_ns\">new_ns</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#free_uts_ns\">free_uts_ns</a>(struct <a class=\"id\" href=\"#kref\">kref</a> *<a class=\"id\" href=\"#kref\">kref</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#uts_namespace\">uts_namespace</a> *<a class=\"id\" href=\"#ns\">ns</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ns\">ns</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#kref\">kref</a>, struct <a class=\"id\" href=\"#uts_namespace\">uts_namespace</a>, <a class=\"id\" href=\"#kref\">kref</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ns\">ns</a>);", 
"}", 
];
xr_frag_insert('l/17/44ea995076a4932696788b257c6c17e8218b43.xr', __xr_tmp);
