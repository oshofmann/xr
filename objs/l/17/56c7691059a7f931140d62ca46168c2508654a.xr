var __xr_tmp = [
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * It's possible for the MSI to get corrupted if shpc and acpi</span>", 
"<span class=\"comment\"> * are used together on certain PXH-based systems.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_pcie_pxh\">quirk_pcie_pxh</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_msi_off\">pci_msi_off</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#no_msi\">no_msi</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_warn\">dev_warn</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"PXH quirk detected; SHPC device MSI disabled\\n\");", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_EARLY\">DECLARE_PCI_FIXUP_EARLY</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_PXHD_0\">PCI_DEVICE_ID_INTEL_PXHD_0</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_pcie_pxh\">quirk_pcie_pxh</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_EARLY\">DECLARE_PCI_FIXUP_EARLY</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_PXHD_1\">PCI_DEVICE_ID_INTEL_PXHD_1</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_pcie_pxh\">quirk_pcie_pxh</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_EARLY\">DECLARE_PCI_FIXUP_EARLY</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_PXH_0\">PCI_DEVICE_ID_INTEL_PXH_0</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_pcie_pxh\">quirk_pcie_pxh</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_EARLY\">DECLARE_PCI_FIXUP_EARLY</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_PXH_1\">PCI_DEVICE_ID_INTEL_PXH_1</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_pcie_pxh\">quirk_pcie_pxh</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_EARLY\">DECLARE_PCI_FIXUP_EARLY</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_PXHV\">PCI_DEVICE_ID_INTEL_PXHV</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_pcie_pxh\">quirk_pcie_pxh</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Some Intel PCI Express chipsets have trouble with downstream</span>", 
"<span class=\"comment\"> * device power management.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#quirk_intel_pcie_pm\">quirk_intel_pcie_pm</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> * <a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_pm_d3_delay\">pci_pm_d3_delay</a> = 120;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#no_d1d2\">no_d1d2</a> = 1;", 
"}", 
"", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/>0x25e2, <a class=\"id\" href=\"#quirk_intel_pcie_pm\">quirk_intel_pcie_pm</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/>0x25e3, <a class=\"id\" href=\"#quirk_intel_pcie_pm\">quirk_intel_pcie_pm</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/>0x25e4, <a class=\"id\" href=\"#quirk_intel_pcie_pm\">quirk_intel_pcie_pm</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/>0x25e5, <a class=\"id\" href=\"#quirk_intel_pcie_pm\">quirk_intel_pcie_pm</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/>0x25e6, <a class=\"id\" href=\"#quirk_intel_pcie_pm\">quirk_intel_pcie_pm</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/>0x25e7, <a class=\"id\" href=\"#quirk_intel_pcie_pm\">quirk_intel_pcie_pm</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/>0x25f7, <a class=\"id\" href=\"#quirk_intel_pcie_pm\">quirk_intel_pcie_pm</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/>0x25f8, <a class=\"id\" href=\"#quirk_intel_pcie_pm\">quirk_intel_pcie_pm</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/>0x25f9, <a class=\"id\" href=\"#quirk_intel_pcie_pm\">quirk_intel_pcie_pm</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/>0x25fa, <a class=\"id\" href=\"#quirk_intel_pcie_pm\">quirk_intel_pcie_pm</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/>0x2601, <a class=\"id\" href=\"#quirk_intel_pcie_pm\">quirk_intel_pcie_pm</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/>0x2602, <a class=\"id\" href=\"#quirk_intel_pcie_pm\">quirk_intel_pcie_pm</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/>0x2603, <a class=\"id\" href=\"#quirk_intel_pcie_pm\">quirk_intel_pcie_pm</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/>0x2604, <a class=\"id\" href=\"#quirk_intel_pcie_pm\">quirk_intel_pcie_pm</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/>0x2605, <a class=\"id\" href=\"#quirk_intel_pcie_pm\">quirk_intel_pcie_pm</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/>0x2606, <a class=\"id\" href=\"#quirk_intel_pcie_pm\">quirk_intel_pcie_pm</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/>0x2607, <a class=\"id\" href=\"#quirk_intel_pcie_pm\">quirk_intel_pcie_pm</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/>0x2608, <a class=\"id\" href=\"#quirk_intel_pcie_pm\">quirk_intel_pcie_pm</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/>0x2609, <a class=\"id\" href=\"#quirk_intel_pcie_pm\">quirk_intel_pcie_pm</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/>0x260a, <a class=\"id\" href=\"#quirk_intel_pcie_pm\">quirk_intel_pcie_pm</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/>0x260b, <a class=\"id\" href=\"#quirk_intel_pcie_pm\">quirk_intel_pcie_pm</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_IO_APIC\">CONFIG_X86_IO_APIC</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Boot interrupts on some chipsets cannot be turned off. For these chipsets,</span>", 
"<span class=\"comment\"> * remap the original interrupt in the linux kernel to the boot interrupt, so</span>", 
"<span class=\"comment\"> * that a PCI device's interrupt handler is installed on the boot interrupt</span>", 
"<span class=\"comment\"> * line instead.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#quirk_reroute_to_boot_interrupts_intel\">quirk_reroute_to_boot_interrupts_intel</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#noioapicquirk\">noioapicquirk</a> || <a class=\"id\" href=\"#noioapicreroute\">noioapicreroute</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#irq_reroute_variant\">irq_reroute_variant</a> = <a class=\"id\" href=\"#INTEL_IRQ_REROUTE_VARIANT\">INTEL_IRQ_REROUTE_VARIANT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"rerouting interrupts for [%04x:%04x]\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#vendor\">vendor</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#device\">device</a>);", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_80333_0\">PCI_DEVICE_ID_INTEL_80333_0</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_reroute_to_boot_interrupts_intel\">quirk_reroute_to_boot_interrupts_intel</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_80333_1\">PCI_DEVICE_ID_INTEL_80333_1</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_reroute_to_boot_interrupts_intel\">quirk_reroute_to_boot_interrupts_intel</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_ESB2_0\">PCI_DEVICE_ID_INTEL_ESB2_0</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_reroute_to_boot_interrupts_intel\">quirk_reroute_to_boot_interrupts_intel</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_PXH_0\">PCI_DEVICE_ID_INTEL_PXH_0</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_reroute_to_boot_interrupts_intel\">quirk_reroute_to_boot_interrupts_intel</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_PXH_1\">PCI_DEVICE_ID_INTEL_PXH_1</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_reroute_to_boot_interrupts_intel\">quirk_reroute_to_boot_interrupts_intel</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_PXHV\">PCI_DEVICE_ID_INTEL_PXHV</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_reroute_to_boot_interrupts_intel\">quirk_reroute_to_boot_interrupts_intel</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_80332_0\">PCI_DEVICE_ID_INTEL_80332_0</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_reroute_to_boot_interrupts_intel\">quirk_reroute_to_boot_interrupts_intel</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_80332_1\">PCI_DEVICE_ID_INTEL_80332_1</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_reroute_to_boot_interrupts_intel\">quirk_reroute_to_boot_interrupts_intel</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_RESUME\">DECLARE_PCI_FIXUP_RESUME</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_80333_0\">PCI_DEVICE_ID_INTEL_80333_0</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_reroute_to_boot_interrupts_intel\">quirk_reroute_to_boot_interrupts_intel</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_RESUME\">DECLARE_PCI_FIXUP_RESUME</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_80333_1\">PCI_DEVICE_ID_INTEL_80333_1</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_reroute_to_boot_interrupts_intel\">quirk_reroute_to_boot_interrupts_intel</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_RESUME\">DECLARE_PCI_FIXUP_RESUME</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_ESB2_0\">PCI_DEVICE_ID_INTEL_ESB2_0</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_reroute_to_boot_interrupts_intel\">quirk_reroute_to_boot_interrupts_intel</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_RESUME\">DECLARE_PCI_FIXUP_RESUME</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_PXH_0\">PCI_DEVICE_ID_INTEL_PXH_0</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_reroute_to_boot_interrupts_intel\">quirk_reroute_to_boot_interrupts_intel</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_RESUME\">DECLARE_PCI_FIXUP_RESUME</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_PXH_1\">PCI_DEVICE_ID_INTEL_PXH_1</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_reroute_to_boot_interrupts_intel\">quirk_reroute_to_boot_interrupts_intel</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_RESUME\">DECLARE_PCI_FIXUP_RESUME</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_PXHV\">PCI_DEVICE_ID_INTEL_PXHV</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_reroute_to_boot_interrupts_intel\">quirk_reroute_to_boot_interrupts_intel</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_RESUME\">DECLARE_PCI_FIXUP_RESUME</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_80332_0\">PCI_DEVICE_ID_INTEL_80332_0</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_reroute_to_boot_interrupts_intel\">quirk_reroute_to_boot_interrupts_intel</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_RESUME\">DECLARE_PCI_FIXUP_RESUME</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_80332_1\">PCI_DEVICE_ID_INTEL_80332_1</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_reroute_to_boot_interrupts_intel\">quirk_reroute_to_boot_interrupts_intel</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * On some chipsets we can disable the generation of legacy INTx boot</span>", 
"<span class=\"comment\"> * interrupts.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * IO-APIC1 on 6300ESB generates boot interrupts, see intel order no</span>", 
"<span class=\"comment\"> * 300641-004US, section 5.7.3.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INTEL_6300_IOAPIC_ABAR\">INTEL_6300_IOAPIC_ABAR</a><span class=\"ts\"/><span class=\"ts\"/>0x40", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INTEL_6300_DISABLE_BOOT_IRQ\">INTEL_6300_DISABLE_BOOT_IRQ</a><span class=\"ts\"/>(1<<14)", 
"", 
"static void <a class=\"id\" href=\"#quirk_disable_intel_boot_interrupt\">quirk_disable_intel_boot_interrupt</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#pci_config_word\">pci_config_word</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#noioapicquirk\">noioapicquirk</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#INTEL_6300_IOAPIC_ABAR\">INTEL_6300_IOAPIC_ABAR</a>, &amp;<a class=\"id\" href=\"#pci_config_word\">pci_config_word</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_config_word\">pci_config_word</a> |= <a class=\"id\" href=\"#INTEL_6300_DISABLE_BOOT_IRQ\">INTEL_6300_DISABLE_BOOT_IRQ</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_word\">pci_write_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#INTEL_6300_IOAPIC_ABAR\">INTEL_6300_IOAPIC_ABAR</a>, <a class=\"id\" href=\"#pci_config_word\">pci_config_word</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"disabled boot interrupts on device [%04x:%04x]\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#vendor\">vendor</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#device\">device</a>);", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,   <a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_ESB_10\">PCI_DEVICE_ID_INTEL_ESB_10</a>, <span class=\"ts\"/><a class=\"id\" href=\"#quirk_disable_intel_boot_interrupt\">quirk_disable_intel_boot_interrupt</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_RESUME\">DECLARE_PCI_FIXUP_RESUME</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,   <a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_ESB_10\">PCI_DEVICE_ID_INTEL_ESB_10</a>, <span class=\"ts\"/><a class=\"id\" href=\"#quirk_disable_intel_boot_interrupt\">quirk_disable_intel_boot_interrupt</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * disable boot interrupts on HT-1000</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BC_HT1000_FEATURE_REG\">BC_HT1000_FEATURE_REG</a><span class=\"ts\"/><span class=\"ts\"/>0x64", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BC_HT1000_PIC_REGS_ENABLE\">BC_HT1000_PIC_REGS_ENABLE</a><span class=\"ts\"/>(1<<0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BC_HT1000_MAP_IDX\">BC_HT1000_MAP_IDX</a><span class=\"ts\"/><span class=\"ts\"/>0xC00", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BC_HT1000_MAP_DATA\">BC_HT1000_MAP_DATA</a><span class=\"ts\"/><span class=\"ts\"/>0xC01", 
"", 
"static void <a class=\"id\" href=\"#quirk_disable_broadcom_boot_interrupt\">quirk_disable_broadcom_boot_interrupt</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#pci_config_dword\">pci_config_dword</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#irq\">irq</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#noioapicquirk\">noioapicquirk</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#BC_HT1000_FEATURE_REG\">BC_HT1000_FEATURE_REG</a>, &amp;<a class=\"id\" href=\"#pci_config_dword\">pci_config_dword</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#BC_HT1000_FEATURE_REG\">BC_HT1000_FEATURE_REG</a>, <a class=\"id\" href=\"#pci_config_dword\">pci_config_dword</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BC_HT1000_PIC_REGS_ENABLE\">BC_HT1000_PIC_REGS_ENABLE</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#irq\">irq</a> = 0x10; <a class=\"id\" href=\"#irq\">irq</a> &lt; 0x10 + 32; <a class=\"id\" href=\"#irq\">irq</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#outb\">outb</a>(<a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#BC_HT1000_MAP_IDX\">BC_HT1000_MAP_IDX</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#outb\">outb</a>(0x00, <a class=\"id\" href=\"#BC_HT1000_MAP_DATA\">BC_HT1000_MAP_DATA</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#BC_HT1000_FEATURE_REG\">BC_HT1000_FEATURE_REG</a>, <a class=\"id\" href=\"#pci_config_dword\">pci_config_dword</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"disabled boot interrupts on device [%04x:%04x]\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#vendor\">vendor</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#device\">device</a>);", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_SERVERWORKS\">PCI_VENDOR_ID_SERVERWORKS</a>,   <a class=\"id\" href=\"#PCI_DEVICE_ID_SERVERWORKS_HT1000SB\">PCI_DEVICE_ID_SERVERWORKS_HT1000SB</a>, <span class=\"ts\"/><a class=\"id\" href=\"#quirk_disable_broadcom_boot_interrupt\">quirk_disable_broadcom_boot_interrupt</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_RESUME\">DECLARE_PCI_FIXUP_RESUME</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_SERVERWORKS\">PCI_VENDOR_ID_SERVERWORKS</a>,   <a class=\"id\" href=\"#PCI_DEVICE_ID_SERVERWORKS_HT1000SB\">PCI_DEVICE_ID_SERVERWORKS_HT1000SB</a>, <span class=\"ts\"/><a class=\"id\" href=\"#quirk_disable_broadcom_boot_interrupt\">quirk_disable_broadcom_boot_interrupt</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * disable boot interrupts on AMD and ATI chipsets</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * NOIOAMODE needs to be disabled to disable \"boot interrupts\". For AMD 8131</span>", 
"<span class=\"comment\"> * rev. A0 and B0, NOIOAMODE needs to be disabled anyway to fix IO-APIC mode</span>", 
"<span class=\"comment\"> * (due to an erratum).</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#AMD_813X_MISC\">AMD_813X_MISC</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0x40", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#AMD_813X_NOIOAMODE\">AMD_813X_NOIOAMODE</a><span class=\"ts\"/><span class=\"ts\"/>(1<<0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#AMD_813X_REV_B1\">AMD_813X_REV_B1</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0x12", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#AMD_813X_REV_B2\">AMD_813X_REV_B2</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0x13", 
"", 
"static void <a class=\"id\" href=\"#quirk_disable_amd_813x_boot_interrupt\">quirk_disable_amd_813x_boot_interrupt</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#pci_config_dword\">pci_config_dword</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#noioapicquirk\">noioapicquirk</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#revision\">revision</a> == <a class=\"id\" href=\"#AMD_813X_REV_B1\">AMD_813X_REV_B1</a>) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#revision\">revision</a> == <a class=\"id\" href=\"#AMD_813X_REV_B2\">AMD_813X_REV_B2</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#AMD_813X_MISC\">AMD_813X_MISC</a>, &amp;<a class=\"id\" href=\"#pci_config_dword\">pci_config_dword</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_config_dword\">pci_config_dword</a> &= ~<a class=\"id\" href=\"#AMD_813X_NOIOAMODE\">AMD_813X_NOIOAMODE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#AMD_813X_MISC\">AMD_813X_MISC</a>, <a class=\"id\" href=\"#pci_config_dword\">pci_config_dword</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"disabled boot interrupts on device [%04x:%04x]\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#vendor\">vendor</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#device\">device</a>);", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_AMD\">PCI_VENDOR_ID_AMD</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_AMD_8131_BRIDGE\">PCI_DEVICE_ID_AMD_8131_BRIDGE</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_disable_amd_813x_boot_interrupt\">quirk_disable_amd_813x_boot_interrupt</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_RESUME\">DECLARE_PCI_FIXUP_RESUME</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_AMD\">PCI_VENDOR_ID_AMD</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_AMD_8131_BRIDGE\">PCI_DEVICE_ID_AMD_8131_BRIDGE</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_disable_amd_813x_boot_interrupt\">quirk_disable_amd_813x_boot_interrupt</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_AMD\">PCI_VENDOR_ID_AMD</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_AMD_8132_BRIDGE\">PCI_DEVICE_ID_AMD_8132_BRIDGE</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_disable_amd_813x_boot_interrupt\">quirk_disable_amd_813x_boot_interrupt</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_RESUME\">DECLARE_PCI_FIXUP_RESUME</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_AMD\">PCI_VENDOR_ID_AMD</a>,<span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_AMD_8132_BRIDGE\">PCI_DEVICE_ID_AMD_8132_BRIDGE</a>,<span class=\"ts\"/><a class=\"id\" href=\"#quirk_disable_amd_813x_boot_interrupt\">quirk_disable_amd_813x_boot_interrupt</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#AMD_8111_PCI_IRQ_ROUTING\">AMD_8111_PCI_IRQ_ROUTING</a><span class=\"ts\"/>0x56", 
"", 
"static void <a class=\"id\" href=\"#quirk_disable_amd_8111_boot_interrupt\">quirk_disable_amd_8111_boot_interrupt</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#pci_config_word\">pci_config_word</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#noioapicquirk\">noioapicquirk</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#AMD_8111_PCI_IRQ_ROUTING\">AMD_8111_PCI_IRQ_ROUTING</a>, &amp;<a class=\"id\" href=\"#pci_config_word\">pci_config_word</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pci_config_word\">pci_config_word</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"boot interrupts on device [%04x:%04x] \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"already disabled\\n\", <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#vendor\">vendor</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#device\">device</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_word\">pci_write_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#AMD_8111_PCI_IRQ_ROUTING\">AMD_8111_PCI_IRQ_ROUTING</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"disabled boot interrupts on device [%04x:%04x]\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#vendor\">vendor</a>, <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#device\">device</a>);", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_AMD\">PCI_VENDOR_ID_AMD</a>,   <a class=\"id\" href=\"#PCI_DEVICE_ID_AMD_8111_SMBUS\">PCI_DEVICE_ID_AMD_8111_SMBUS</a>, <span class=\"ts\"/><a class=\"id\" href=\"#quirk_disable_amd_8111_boot_interrupt\">quirk_disable_amd_8111_boot_interrupt</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_RESUME\">DECLARE_PCI_FIXUP_RESUME</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_AMD\">PCI_VENDOR_ID_AMD</a>,   <a class=\"id\" href=\"#PCI_DEVICE_ID_AMD_8111_SMBUS\">PCI_DEVICE_ID_AMD_8111_SMBUS</a>, <span class=\"ts\"/><a class=\"id\" href=\"#quirk_disable_amd_8111_boot_interrupt\">quirk_disable_amd_8111_boot_interrupt</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_X86_IO_APIC */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Toshiba TC86C001 IDE controller reports the standard 8-byte BAR0 size</span>", 
"<span class=\"comment\"> * but the PIO transfers won't work if BAR0 falls at the odd 8 bytes.</span>", 
"<span class=\"comment\"> * Re-allocate the region if needed...</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#quirk_tc86c001_ide\">quirk_tc86c001_ide</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#r\">r</a> = &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#resource\">resource</a>[0];", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#start\">start</a> &amp; 0x8) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#start\">start</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#end\">end</a> = 0xf;", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_TOSHIBA_2\">PCI_VENDOR_ID_TOSHIBA_2</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#PCI_DEVICE_ID_TOSHIBA_TC86C001_IDE\">PCI_DEVICE_ID_TOSHIBA_TC86C001_IDE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#quirk_tc86c001_ide\">quirk_tc86c001_ide</a>);", 
"", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_netmos\">quirk_netmos</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#num_parallel\">num_parallel</a> = (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#subsystem_device\">subsystem_device</a> &amp; 0xf0) >> 4;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#num_serial\">num_serial</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#subsystem_device\">subsystem_device</a> &amp; 0xf;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * These Netmos parts are multiport serial devices with optional</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * parallel ports.  Even when parallel ports are present, they</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * are identified as class SERIAL, which means the serial driver</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will claim them.  To prevent this, mark them as class OTHER.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * These combo devices should be claimed by parport_serial.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The subdevice ID is of the form 0x00PS, where &lt;P&gt; is the number</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of parallel ports and &lt;S&gt; is the number of serial ports.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#device\">device</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PCI_DEVICE_ID_NETMOS_9835\">PCI_DEVICE_ID_NETMOS_9835</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Well, this rule doesn't hold for the following 9835 device */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#subsystem_vendor\">subsystem_vendor</a> == <a class=\"id\" href=\"#PCI_VENDOR_ID_IBM\">PCI_VENDOR_ID_IBM</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#subsystem_device\">subsystem_device</a> == 0x0299)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PCI_DEVICE_ID_NETMOS_9735\">PCI_DEVICE_ID_NETMOS_9735</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PCI_DEVICE_ID_NETMOS_9745\">PCI_DEVICE_ID_NETMOS_9745</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PCI_DEVICE_ID_NETMOS_9845\">PCI_DEVICE_ID_NETMOS_9845</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PCI_DEVICE_ID_NETMOS_9855\">PCI_DEVICE_ID_NETMOS_9855</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#class\">class</a> >> 8) == <a class=\"id\" href=\"#PCI_CLASS_COMMUNICATION_SERIAL\">PCI_CLASS_COMMUNICATION_SERIAL</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#num_parallel\">num_parallel</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Netmos %04x (%u parallel, \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"%u serial); changing class SERIAL to OTHER \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"(use parport_serial)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#device\">device</a>, <a class=\"id\" href=\"#num_parallel\">num_parallel</a>, <a class=\"id\" href=\"#num_serial\">num_serial</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#class\">class</a> = (<a class=\"id\" href=\"#PCI_CLASS_COMMUNICATION_OTHER\">PCI_CLASS_COMMUNICATION_OTHER</a> << 8) |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#class\">class</a> &amp; 0xff);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_NETMOS\">PCI_VENDOR_ID_NETMOS</a>, <a class=\"id\" href=\"#PCI_ANY_ID\">PCI_ANY_ID</a>, <a class=\"id\" href=\"#quirk_netmos\">quirk_netmos</a>);", 
"", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_e100_interrupt\">quirk_e100_interrupt</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#command\">command</a>, <a class=\"id\" href=\"#pmcsr\">pmcsr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#csr\">csr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#cmd_hi\">cmd_hi</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pm\">pm</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#device\">device</a>) {", 
"<span class=\"ts\"/><span class=\"comment\">/* PCI IDs taken from drivers/net/e100.c */</span>", 
"<span class=\"ts\"/>case 0x1029:", 
"<span class=\"ts\"/>case 0x1030 ... 0x1034:", 
"<span class=\"ts\"/>case 0x1038 ... 0x103E:", 
"<span class=\"ts\"/>case 0x1050 ... 0x1057:", 
"<span class=\"ts\"/>case 0x1059:", 
"<span class=\"ts\"/>case 0x1064 ... 0x106B:", 
"<span class=\"ts\"/>case 0x1091 ... 0x1095:", 
"<span class=\"ts\"/>case 0x1209:", 
"<span class=\"ts\"/>case 0x1229:", 
"<span class=\"ts\"/>case 0x2449:", 
"<span class=\"ts\"/>case 0x2459:", 
"<span class=\"ts\"/>case 0x245D:", 
"<span class=\"ts\"/>case 0x27DC:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Some firmware hands off the e100 with interrupts enabled,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * which can cause a flood of interrupts if packets are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * received before the driver attaches to the device.  So</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * disable all e100 interrupts here.  The driver will</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * re-enable them when it's ready.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_COMMAND\">PCI_COMMAND</a>, &amp;<a class=\"id\" href=\"#command\">command</a>);", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#command\">command</a> &amp; <a class=\"id\" href=\"#PCI_COMMAND_MEMORY\">PCI_COMMAND_MEMORY</a>) || !<a class=\"id\" href=\"#pci_resource_start\">pci_resource_start</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check that the device is in the D0 power state. If it's not,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * there is no point to look any further.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pm\">pm</a> = <a class=\"id\" href=\"#pci_find_capability\">pci_find_capability</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_CAP_ID_PM\">PCI_CAP_ID_PM</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pm\">pm</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pm\">pm</a> + <a class=\"id\" href=\"#PCI_PM_CTRL\">PCI_PM_CTRL</a>, &amp;<a class=\"id\" href=\"#pmcsr\">pmcsr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#pmcsr\">pmcsr</a> &amp; <a class=\"id\" href=\"#PCI_PM_CTRL_STATE_MASK\">PCI_PM_CTRL_STATE_MASK</a>) != <a class=\"id\" href=\"#PCI_D0\">PCI_D0</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Convert from PCI bus to resource space.  */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#csr\">csr</a> = <a class=\"id\" href=\"#ioremap\">ioremap</a>(<a class=\"id\" href=\"#pci_resource_start\">pci_resource_start</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0), 8);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#csr\">csr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_warn\">dev_warn</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Can't map e100 registers\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmd_hi\">cmd_hi</a> = <a class=\"id\" href=\"#readb\">readb</a>(<a class=\"id\" href=\"#csr\">csr</a> + 3);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cmd_hi\">cmd_hi</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_warn\">dev_warn</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Firmware left e100 interrupts enabled; \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"disabling\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#writeb\">writeb</a>(1, <a class=\"id\" href=\"#csr\">csr</a> + 3);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iounmap\">iounmap</a>(<a class=\"id\" href=\"#csr\">csr</a>);", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>, <a class=\"id\" href=\"#PCI_ANY_ID\">PCI_ANY_ID</a>, <a class=\"id\" href=\"#quirk_e100_interrupt\">quirk_e100_interrupt</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The 82575 and 82598 may experience data corruption issues when transitioning</span>", 
"<span class=\"comment\"> * out of L0S.  To prevent this we need to disable L0S on the pci-e link</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_disable_aspm_l0s\">quirk_disable_aspm_l0s</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Disabling L0s\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_disable_link_state\">pci_disable_link_state</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCIE_LINK_STATE_L0S\">PCIE_LINK_STATE_L0S</a>);", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>, 0x10a7, <a class=\"id\" href=\"#quirk_disable_aspm_l0s\">quirk_disable_aspm_l0s</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>, 0x10a9, <a class=\"id\" href=\"#quirk_disable_aspm_l0s\">quirk_disable_aspm_l0s</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>, 0x10b6, <a class=\"id\" href=\"#quirk_disable_aspm_l0s\">quirk_disable_aspm_l0s</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>, 0x10c6, <a class=\"id\" href=\"#quirk_disable_aspm_l0s\">quirk_disable_aspm_l0s</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>, 0x10c7, <a class=\"id\" href=\"#quirk_disable_aspm_l0s\">quirk_disable_aspm_l0s</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>, 0x10c8, <a class=\"id\" href=\"#quirk_disable_aspm_l0s\">quirk_disable_aspm_l0s</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>, 0x10d6, <a class=\"id\" href=\"#quirk_disable_aspm_l0s\">quirk_disable_aspm_l0s</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>, 0x10db, <a class=\"id\" href=\"#quirk_disable_aspm_l0s\">quirk_disable_aspm_l0s</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>, 0x10dd, <a class=\"id\" href=\"#quirk_disable_aspm_l0s\">quirk_disable_aspm_l0s</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>, 0x10e1, <a class=\"id\" href=\"#quirk_disable_aspm_l0s\">quirk_disable_aspm_l0s</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>, 0x10ec, <a class=\"id\" href=\"#quirk_disable_aspm_l0s\">quirk_disable_aspm_l0s</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>, 0x10f1, <a class=\"id\" href=\"#quirk_disable_aspm_l0s\">quirk_disable_aspm_l0s</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>, 0x10f4, <a class=\"id\" href=\"#quirk_disable_aspm_l0s\">quirk_disable_aspm_l0s</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>, 0x1508, <a class=\"id\" href=\"#quirk_disable_aspm_l0s\">quirk_disable_aspm_l0s</a>);", 
"", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#fixup_rev1_53c810\">fixup_rev1_53c810</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a>* <a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* rev 1 ncr53c810 chips don't set the class at all which means</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * they don't get their resources remapped. Fix that here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#class\">class</a> == <a class=\"id\" href=\"#PCI_CLASS_NOT_DEFINED\">PCI_CLASS_NOT_DEFINED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"NCR 53c810 rev 1 detected; setting PCI class\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#class\">class</a> = <a class=\"id\" href=\"#PCI_CLASS_STORAGE_SCSI\">PCI_CLASS_STORAGE_SCSI</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_NCR\">PCI_VENDOR_ID_NCR</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_NCR_53C810\">PCI_DEVICE_ID_NCR_53C810</a>, <a class=\"id\" href=\"#fixup_rev1_53c810\">fixup_rev1_53c810</a>);", 
"", 
"<span class=\"comment\">/* Enable 1k I/O space granularity on the Intel P64H2 */</span>", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_p64h2_1k_io\">quirk_p64h2_1k_io</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#en1k\">en1k</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#io_base_lo\">io_base_lo</a>, <a class=\"id\" href=\"#io_limit_lo\">io_limit_lo</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#limit\">limit</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#resource\">resource</a> + <a class=\"id\" href=\"#PCI_BRIDGE_RESOURCES\">PCI_BRIDGE_RESOURCES</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x40, &amp;<a class=\"id\" href=\"#en1k\">en1k</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#en1k\">en1k</a> &amp; 0x200) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Enable I/O Space to 1KB granularity\\n\");", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_byte\">pci_read_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_IO_BASE\">PCI_IO_BASE</a>, &amp;<a class=\"id\" href=\"#io_base_lo\">io_base_lo</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_byte\">pci_read_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_IO_LIMIT\">PCI_IO_LIMIT</a>, &amp;<a class=\"id\" href=\"#io_limit_lo\">io_limit_lo</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = (<a class=\"id\" href=\"#io_base_lo\">io_base_lo</a> &amp; (<a class=\"id\" href=\"#PCI_IO_RANGE_MASK\">PCI_IO_RANGE_MASK</a> | 0x0c)) << 8;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a> = (<a class=\"id\" href=\"#io_limit_lo\">io_limit_lo</a> &amp; (<a class=\"id\" href=\"#PCI_IO_RANGE_MASK\">PCI_IO_RANGE_MASK</a> | 0x0c)) << 8;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#base\">base</a> <= <a class=\"id\" href=\"#limit\">limit</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#base\">base</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#limit\">limit</a> + 0x3ff;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/>0x1460,<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_p64h2_1k_io\">quirk_p64h2_1k_io</a>);", 
"", 
"<span class=\"comment\">/* Fix the IOBL_ADR for 1k I/O space granularity on the Intel P64H2</span>", 
"<span class=\"comment\"> * The IOBL_ADR gets re-written to 4k boundaries in pci_setup_bridge()</span>", 
"<span class=\"comment\"> * in drivers/pci/setup-bus.c</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_p64h2_1k_io_fix_iobl\">quirk_p64h2_1k_io_fix_iobl</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#en1k\">en1k</a>, <a class=\"id\" href=\"#iobl_adr\">iobl_adr</a>, <a class=\"id\" href=\"#iobl_adr_1k\">iobl_adr_1k</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#resource\">resource</a> *<a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#resource\">resource</a> + <a class=\"id\" href=\"#PCI_BRIDGE_RESOURCES\">PCI_BRIDGE_RESOURCES</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x40, &amp;<a class=\"id\" href=\"#en1k\">en1k</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#en1k\">en1k</a> &amp; 0x200) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_IO_BASE\">PCI_IO_BASE</a>, &amp;<a class=\"id\" href=\"#iobl_adr\">iobl_adr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iobl_adr_1k\">iobl_adr_1k</a> = <a class=\"id\" href=\"#iobl_adr\">iobl_adr</a> | (<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#start\">start</a> >> 8) | (<a class=\"id\" href=\"#res\">res</a>-><a class=\"id\" href=\"#end\">end</a> &amp; 0xfc00);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#iobl_adr\">iobl_adr</a> != <a class=\"id\" href=\"#iobl_adr_1k\">iobl_adr_1k</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Fixing P64H2 IOBL_ADR from 0x%x to 0x%x for 1KB granularity\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iobl_adr\">iobl_adr</a>,<a class=\"id\" href=\"#iobl_adr_1k\">iobl_adr_1k</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_word\">pci_write_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_IO_BASE\">PCI_IO_BASE</a>, <a class=\"id\" href=\"#iobl_adr_1k\">iobl_adr_1k</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>,<span class=\"ts\"/>0x1460,<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_p64h2_1k_io_fix_iobl\">quirk_p64h2_1k_io_fix_iobl</a>);", 
"", 
"<span class=\"comment\">/* Under some circumstances, AER is not linked with extended capabilities.</span>", 
"<span class=\"comment\"> * Force it to be linked by setting the corresponding control bit in the</span>", 
"<span class=\"comment\"> * config space.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#quirk_nvidia_ck804_pcie_aer_ext_cap\">quirk_nvidia_ck804_pcie_aer_ext_cap</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint8_t\">uint8_t</a> <a class=\"id\" href=\"#b\">b</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_read_config_byte\">pci_read_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0xf41, &amp;<a class=\"id\" href=\"#b\">b</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#b\">b</a> &amp; 0x20)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_byte\">pci_write_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0xf41, <a class=\"id\" href=\"#b\">b</a> | 0x20);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"Linking AER extended capability\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_NVIDIA\">PCI_VENDOR_ID_NVIDIA</a>,  <a class=\"id\" href=\"#PCI_DEVICE_ID_NVIDIA_CK804_PCIE\">PCI_DEVICE_ID_NVIDIA_CK804_PCIE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_nvidia_ck804_pcie_aer_ext_cap\">quirk_nvidia_ck804_pcie_aer_ext_cap</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_RESUME_EARLY\">DECLARE_PCI_FIXUP_RESUME_EARLY</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_NVIDIA\">PCI_VENDOR_ID_NVIDIA</a>,  <a class=\"id\" href=\"#PCI_DEVICE_ID_NVIDIA_CK804_PCIE\">PCI_DEVICE_ID_NVIDIA_CK804_PCIE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_nvidia_ck804_pcie_aer_ext_cap\">quirk_nvidia_ck804_pcie_aer_ext_cap</a>);", 
"", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_via_cx700_pci_parking_caching\">quirk_via_cx700_pci_parking_caching</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Disable PCI Bus Parking and PCI Master read caching on CX700</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * which causes unspecified timing errors with a VT6212L on the PCI</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * bus leading to USB2.0 packet loss.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This quirk is only enabled if a second (on the external PCI bus)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * VT6212L is found -- the CX700 core itself also contains a USB</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * host controller with the same PCI ID as the VT6212L.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Count VT6212L instances */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#pci_get_device\">pci_get_device</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_8235_USB_2\">PCI_DEVICE_ID_VIA_8235_USB_2</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint8_t\">uint8_t</a> <a class=\"id\" href=\"#b\">b</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* p should contain the first (internal) VT6212L -- see if we have</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   an external one by searching again */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#pci_get_device\">pci_get_device</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_8235_USB_2\">PCI_DEVICE_ID_VIA_8235_USB_2</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_dev_put\">pci_dev_put</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_read_config_byte\">pci_read_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x76, &amp;<a class=\"id\" href=\"#b\">b</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#b\">b</a> &amp; 0x40) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Turn off PCI Bus Parking */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_byte\">pci_write_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x76, <a class=\"id\" href=\"#b\">b</a> ^ 0x40);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Disabling VIA CX700 PCI parking\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_read_config_byte\">pci_read_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x72, &amp;<a class=\"id\" href=\"#b\">b</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#b\">b</a> != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Turn off PCI Master read caching */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_byte\">pci_write_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x72, 0x0);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Set PCI Master Bus time-out to \"1x16 PCLK\" */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_byte\">pci_write_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x75, 0x1);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Disable \"Read FIFO Timer\" */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_byte\">pci_write_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0x77, 0x0);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Disabling VIA CX700 PCI caching\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>, 0x324e, <a class=\"id\" href=\"#quirk_via_cx700_pci_parking_caching\">quirk_via_cx700_pci_parking_caching</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * For Broadcom 5706, 5708, 5709 rev. A nics, any read beyond the</span>", 
"<span class=\"comment\"> * VPD end tag will hang the device.  This problem was initially</span>", 
"<span class=\"comment\"> * observed when a vpd entry was created in sysfs</span>", 
"<span class=\"comment\"> * ('/sys/bus/pci/devices/&lt;id&gt;/vpd').   A read to this sysfs entry</span>", 
"<span class=\"comment\"> * will dump 32k of data.  Reading a full 32k will cause an access</span>", 
"<span class=\"comment\"> * beyond the VPD end tag causing the device to hang.  Once the device</span>", 
"<span class=\"comment\"> * is hung, the bnx2 driver will not be able to reset the device.</span>", 
"<span class=\"comment\"> * We believe that it is legal to read beyond the end tag and</span>", 
"<span class=\"comment\"> * therefore the solution is to limit the read/write length.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_brcm_570x_limit_vpd\">quirk_brcm_570x_limit_vpd</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Only disable the VPD capability for 5706, 5706S, 5708,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 5708S and 5709 rev. A</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#device\">device</a> == <a class=\"id\" href=\"#PCI_DEVICE_ID_NX2_5706\">PCI_DEVICE_ID_NX2_5706</a>) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#device\">device</a> == <a class=\"id\" href=\"#PCI_DEVICE_ID_NX2_5706S\">PCI_DEVICE_ID_NX2_5706S</a>) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#device\">device</a> == <a class=\"id\" href=\"#PCI_DEVICE_ID_NX2_5708\">PCI_DEVICE_ID_NX2_5708</a>) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#device\">device</a> == <a class=\"id\" href=\"#PCI_DEVICE_ID_NX2_5708S\">PCI_DEVICE_ID_NX2_5708S</a>) ||", 
"<span class=\"ts\"/>    ((<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#device\">device</a> == <a class=\"id\" href=\"#PCI_DEVICE_ID_NX2_5709\">PCI_DEVICE_ID_NX2_5709</a>) &&", 
"<span class=\"ts\"/>     (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#revision\">revision</a> &amp; 0xf0) == 0x0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#vpd\">vpd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#vpd\">vpd</a>-><a class=\"id\" href=\"#len\">len</a> = 0x80;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_BROADCOM\">PCI_VENDOR_ID_BROADCOM</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_NX2_5706\">PCI_DEVICE_ID_NX2_5706</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_brcm_570x_limit_vpd\">quirk_brcm_570x_limit_vpd</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_BROADCOM\">PCI_VENDOR_ID_BROADCOM</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_NX2_5706S\">PCI_DEVICE_ID_NX2_5706S</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_brcm_570x_limit_vpd\">quirk_brcm_570x_limit_vpd</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_BROADCOM\">PCI_VENDOR_ID_BROADCOM</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_NX2_5708\">PCI_DEVICE_ID_NX2_5708</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_brcm_570x_limit_vpd\">quirk_brcm_570x_limit_vpd</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_BROADCOM\">PCI_VENDOR_ID_BROADCOM</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_NX2_5708S\">PCI_DEVICE_ID_NX2_5708S</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_brcm_570x_limit_vpd\">quirk_brcm_570x_limit_vpd</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_BROADCOM\">PCI_VENDOR_ID_BROADCOM</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_NX2_5709\">PCI_DEVICE_ID_NX2_5709</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_brcm_570x_limit_vpd\">quirk_brcm_570x_limit_vpd</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_BROADCOM\">PCI_VENDOR_ID_BROADCOM</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_NX2_5709S\">PCI_DEVICE_ID_NX2_5709S</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_brcm_570x_limit_vpd\">quirk_brcm_570x_limit_vpd</a>);", 
"", 
"<span class=\"comment\">/* Originally in EDAC sources for i82875P:</span>", 
"<span class=\"comment\"> * Intel tells BIOS developers to hide device 6 which</span>", 
"<span class=\"comment\"> * configures the overflow device access containing</span>", 
"<span class=\"comment\"> * the DRBs - this is where we expose device 6.</span>", 
"<span class=\"comment\"> * http://www.x86-secret.com/articles/tweak/pat/patsecrets-2.htm</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_unhide_mch_dev6\">quirk_unhide_mch_dev6</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#reg\">reg</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_read_config_byte\">pci_read_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0xF4, &amp;<a class=\"id\" href=\"#reg\">reg</a>) == 0 && !(<a class=\"id\" href=\"#reg\">reg</a> &amp; 0x02)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Enabling MCH 'Overflow' Device\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_byte\">pci_write_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0xF4, <a class=\"id\" href=\"#reg\">reg</a> | 0x02);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_EARLY\">DECLARE_PCI_FIXUP_EARLY</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_82865_HB\">PCI_DEVICE_ID_INTEL_82865_HB</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_unhide_mch_dev6\">quirk_unhide_mch_dev6</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_EARLY\">DECLARE_PCI_FIXUP_EARLY</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_INTEL_82875_HB\">PCI_DEVICE_ID_INTEL_82875_HB</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_unhide_mch_dev6\">quirk_unhide_mch_dev6</a>);", 
"", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PCI_MSI\">CONFIG_PCI_MSI</a>", 
"<span class=\"comment\">/* Some chipsets do not support MSI. We cannot easily rely on setting</span>", 
"<span class=\"comment\"> * PCI_BUS_FLAGS_NO_MSI in its bus flags because there are actually</span>", 
"<span class=\"comment\"> * some other busses controlled by the chipset even if Linux is not</span>", 
"<span class=\"comment\"> * aware of it.  Instead of setting the flag on all busses in the</span>", 
"<span class=\"comment\"> * machine, simply disable MSI globally.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#quirk_disable_all_msi\">quirk_disable_all_msi</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_no_msi\">pci_no_msi</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_warn\">dev_warn</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"MSI quirk detected; MSI disabled\\n\");", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_SERVERWORKS\">PCI_VENDOR_ID_SERVERWORKS</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_SERVERWORKS_GCNB_LE\">PCI_DEVICE_ID_SERVERWORKS_GCNB_LE</a>, <a class=\"id\" href=\"#quirk_disable_all_msi\">quirk_disable_all_msi</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_ATI\">PCI_VENDOR_ID_ATI</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_ATI_RS400_200\">PCI_DEVICE_ID_ATI_RS400_200</a>, <a class=\"id\" href=\"#quirk_disable_all_msi\">quirk_disable_all_msi</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_ATI\">PCI_VENDOR_ID_ATI</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_ATI_RS480\">PCI_DEVICE_ID_ATI_RS480</a>, <a class=\"id\" href=\"#quirk_disable_all_msi\">quirk_disable_all_msi</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_VT3336\">PCI_DEVICE_ID_VIA_VT3336</a>, <a class=\"id\" href=\"#quirk_disable_all_msi\">quirk_disable_all_msi</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_VT3351\">PCI_DEVICE_ID_VIA_VT3351</a>, <a class=\"id\" href=\"#quirk_disable_all_msi\">quirk_disable_all_msi</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_VT3364\">PCI_DEVICE_ID_VIA_VT3364</a>, <a class=\"id\" href=\"#quirk_disable_all_msi\">quirk_disable_all_msi</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_VIA_8380_0\">PCI_DEVICE_ID_VIA_8380_0</a>, <a class=\"id\" href=\"#quirk_disable_all_msi\">quirk_disable_all_msi</a>);", 
"", 
"<span class=\"comment\">/* Disable MSI on chipsets that are known to not support it */</span>", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_disable_msi\">quirk_disable_msi</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#subordinate\">subordinate</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_warn\">dev_warn</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"MSI quirk detected; \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"subordinate MSI disabled\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#subordinate\">subordinate</a>-><a class=\"id\" href=\"#bus_flags\">bus_flags</a> |= <a class=\"id\" href=\"#PCI_BUS_FLAGS_NO_MSI\">PCI_BUS_FLAGS_NO_MSI</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_AMD\">PCI_VENDOR_ID_AMD</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_AMD_8131_BRIDGE\">PCI_DEVICE_ID_AMD_8131_BRIDGE</a>, <a class=\"id\" href=\"#quirk_disable_msi\">quirk_disable_msi</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_VIA\">PCI_VENDOR_ID_VIA</a>, 0xa238, <a class=\"id\" href=\"#quirk_disable_msi\">quirk_disable_msi</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_ATI\">PCI_VENDOR_ID_ATI</a>, 0x5a3f, <a class=\"id\" href=\"#quirk_disable_msi\">quirk_disable_msi</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The APC bridge device in AMD 780 family northbridges has some random</span>", 
"<span class=\"comment\"> * OEM subsystem ID in its vendor ID register (erratum 18), so instead</span>", 
"<span class=\"comment\"> * we use the possible vendor/device IDs of the host bridge for the</span>", 
"<span class=\"comment\"> * declared quirk, and search for the APC bridge by slot number.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_amd_780_apc_msi\">quirk_amd_780_apc_msi</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#host_bridge\">host_bridge</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#apc_bridge\">apc_bridge</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apc_bridge\">apc_bridge</a> = <a class=\"id\" href=\"#pci_get_slot\">pci_get_slot</a>(<a class=\"id\" href=\"#host_bridge\">host_bridge</a>-><a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#PCI_DEVFN\">PCI_DEVFN</a>(1, 0));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#apc_bridge\">apc_bridge</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#apc_bridge\">apc_bridge</a>-><a class=\"id\" href=\"#device\">device</a> == 0x9602)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_disable_msi\">quirk_disable_msi</a>(<a class=\"id\" href=\"#apc_bridge\">apc_bridge</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_dev_put\">pci_dev_put</a>(<a class=\"id\" href=\"#apc_bridge\">apc_bridge</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_AMD\">PCI_VENDOR_ID_AMD</a>, 0x9600, <a class=\"id\" href=\"#quirk_amd_780_apc_msi\">quirk_amd_780_apc_msi</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_AMD\">PCI_VENDOR_ID_AMD</a>, 0x9601, <a class=\"id\" href=\"#quirk_amd_780_apc_msi\">quirk_amd_780_apc_msi</a>);", 
"", 
"<span class=\"comment\">/* Go through the list of Hypertransport capabilities and</span>", 
"<span class=\"comment\"> * return 1 if a HT MSI capability is found and enabled */</span>", 
"static int <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#msi_ht_cap_enabled\">msi_ht_cap_enabled</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#ttl\">ttl</a> = 48;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pci_find_ht_capability\">pci_find_ht_capability</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#HT_CAPTYPE_MSI_MAPPING\">HT_CAPTYPE_MSI_MAPPING</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#pos\">pos</a> && <a class=\"id\" href=\"#ttl\">ttl</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_read_config_byte\">pci_read_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#HT_MSI_FLAGS\">HT_MSI_FLAGS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#flags\">flags</a>) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Found %s HT MSI Mapping\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#HT_MSI_FLAGS_ENABLE\">HT_MSI_FLAGS_ENABLE</a> ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"enabled\" : \"disabled\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#HT_MSI_FLAGS_ENABLE\">HT_MSI_FLAGS_ENABLE</a>) != 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pci_find_next_ht_capability\">pci_find_next_ht_capability</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#HT_CAPTYPE_MSI_MAPPING\">HT_CAPTYPE_MSI_MAPPING</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Check the hypertransport MSI mapping to know whether MSI is enabled or not */</span>", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_msi_ht_cap\">quirk_msi_ht_cap</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#subordinate\">subordinate</a> && !<a class=\"id\" href=\"#msi_ht_cap_enabled\">msi_ht_cap_enabled</a>(<a class=\"id\" href=\"#dev\">dev</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_warn\">dev_warn</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"MSI quirk detected; \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"subordinate MSI disabled\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#subordinate\">subordinate</a>-><a class=\"id\" href=\"#bus_flags\">bus_flags</a> |= <a class=\"id\" href=\"#PCI_BUS_FLAGS_NO_MSI\">PCI_BUS_FLAGS_NO_MSI</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_SERVERWORKS\">PCI_VENDOR_ID_SERVERWORKS</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_SERVERWORKS_HT2000_PCIE\">PCI_DEVICE_ID_SERVERWORKS_HT2000_PCIE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_msi_ht_cap\">quirk_msi_ht_cap</a>);", 
"", 
"<span class=\"comment\">/* The nVidia CK804 chipset may have 2 HT MSI mappings.</span>", 
"<span class=\"comment\"> * MSI are supported if the MSI capability set in any of these mappings.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_nvidia_ck804_msi_ht_cap\">quirk_nvidia_ck804_msi_ht_cap</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#subordinate\">subordinate</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* check HT MSI cap on this chipset and the root one.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a single one having MSI is enough to be sure that MSI are supported.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pdev\">pdev</a> = <a class=\"id\" href=\"#pci_get_slot\">pci_get_slot</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>, 0);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pdev\">pdev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#msi_ht_cap_enabled\">msi_ht_cap_enabled</a>(<a class=\"id\" href=\"#dev\">dev</a>) && !<a class=\"id\" href=\"#msi_ht_cap_enabled\">msi_ht_cap_enabled</a>(<a class=\"id\" href=\"#pdev\">pdev</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_warn\">dev_warn</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"MSI quirk detected; \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"subordinate MSI disabled\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#subordinate\">subordinate</a>-><a class=\"id\" href=\"#bus_flags\">bus_flags</a> |= <a class=\"id\" href=\"#PCI_BUS_FLAGS_NO_MSI\">PCI_BUS_FLAGS_NO_MSI</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_dev_put\">pci_dev_put</a>(<a class=\"id\" href=\"#pdev\">pdev</a>);", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_NVIDIA\">PCI_VENDOR_ID_NVIDIA</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_NVIDIA_CK804_PCIE\">PCI_DEVICE_ID_NVIDIA_CK804_PCIE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_nvidia_ck804_msi_ht_cap\">quirk_nvidia_ck804_msi_ht_cap</a>);", 
"", 
"<span class=\"comment\">/* Force enable MSI mapping capability on HT bridges */</span>", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#ht_enable_msi_mapping\">ht_enable_msi_mapping</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#ttl\">ttl</a> = 48;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pci_find_ht_capability\">pci_find_ht_capability</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#HT_CAPTYPE_MSI_MAPPING\">HT_CAPTYPE_MSI_MAPPING</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#pos\">pos</a> && <a class=\"id\" href=\"#ttl\">ttl</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_read_config_byte\">pci_read_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#HT_MSI_FLAGS\">HT_MSI_FLAGS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#flags\">flags</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Enabling HT MSI Mapping\\n\");", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_byte\">pci_write_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#HT_MSI_FLAGS\">HT_MSI_FLAGS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#flags\">flags</a> | <a class=\"id\" href=\"#HT_MSI_FLAGS_ENABLE\">HT_MSI_FLAGS_ENABLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pci_find_next_ht_capability\">pci_find_next_ht_capability</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#HT_CAPTYPE_MSI_MAPPING\">HT_CAPTYPE_MSI_MAPPING</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_SERVERWORKS\">PCI_VENDOR_ID_SERVERWORKS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#PCI_DEVICE_ID_SERVERWORKS_HT1000_PXB\">PCI_DEVICE_ID_SERVERWORKS_HT1000_PXB</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#ht_enable_msi_mapping\">ht_enable_msi_mapping</a>);", 
"", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_AMD\">PCI_VENDOR_ID_AMD</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_AMD_8132_BRIDGE\">PCI_DEVICE_ID_AMD_8132_BRIDGE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#ht_enable_msi_mapping\">ht_enable_msi_mapping</a>);", 
"", 
"<span class=\"comment\">/* The P5N32-SLI motherboards from Asus have a problem with msi</span>", 
"<span class=\"comment\"> * for the MCP55 NIC. It is not yet determined whether the msi problem</span>", 
"<span class=\"comment\"> * also affects other devices. As for now, turn off msi for this device.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#nvenet_msi_disable\">nvenet_msi_disable</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dmi_name_in_vendors\">dmi_name_in_vendors</a>(\"P5N32-SLI PREMIUM\") ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#dmi_name_in_vendors\">dmi_name_in_vendors</a>(\"P5N32-E SLI\")) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"Disabling msi for MCP55 NIC on P5N32-SLI\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#no_msi\">no_msi</a> = 1;", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_EARLY\">DECLARE_PCI_FIXUP_EARLY</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_NVIDIA\">PCI_VENDOR_ID_NVIDIA</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_NVIDIA_NVENET_15\">PCI_DEVICE_ID_NVIDIA_NVENET_15</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nvenet_msi_disable\">nvenet_msi_disable</a>);", 
"", 
"static int <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#ht_check_msi_mapping\">ht_check_msi_mapping</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#ttl\">ttl</a> = 48;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#found\">found</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* check if there is HT MSI cap or enabled on this device */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pci_find_ht_capability\">pci_find_ht_capability</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#HT_CAPTYPE_MSI_MAPPING\">HT_CAPTYPE_MSI_MAPPING</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#pos\">pos</a> && <a class=\"id\" href=\"#ttl\">ttl</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#found\">found</a> &lt; 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#found\">found</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_read_config_byte\">pci_read_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#HT_MSI_FLAGS\">HT_MSI_FLAGS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#flags\">flags</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#HT_MSI_FLAGS_ENABLE\">HT_MSI_FLAGS_ENABLE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#found\">found</a> &lt; 2) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#found\">found</a> = 2;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pci_find_next_ht_capability\">pci_find_next_ht_capability</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#HT_CAPTYPE_MSI_MAPPING\">HT_CAPTYPE_MSI_MAPPING</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#found\">found</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#host_bridge_with_leaf\">host_bridge_with_leaf</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#host_bridge\">host_bridge</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#dev_no\">dev_no</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#found\">found</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_no\">dev_no</a> = <a class=\"id\" href=\"#host_bridge\">host_bridge</a>-><a class=\"id\" href=\"#devfn\">devfn</a> >> 3;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#dev_no\">dev_no</a> + 1; <a class=\"id\" href=\"#i\">i</a> &lt; 0x20; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#pci_get_slot\">pci_get_slot</a>(<a class=\"id\" href=\"#host_bridge\">host_bridge</a>-><a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#PCI_DEVFN\">PCI_DEVFN</a>(<a class=\"id\" href=\"#i\">i</a>, 0));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* found next host bridge ?*/</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pci_find_ht_capability\">pci_find_ht_capability</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#HT_CAPTYPE_SLAVE\">HT_CAPTYPE_SLAVE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a> != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_dev_put\">pci_dev_put</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ht_check_msi_mapping\">ht_check_msi_mapping</a>(<a class=\"id\" href=\"#dev\">dev</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#found\">found</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_dev_put\">pci_dev_put</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_dev_put\">pci_dev_put</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#found\">found</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PCI_HT_CAP_SLAVE_CTRL0\">PCI_HT_CAP_SLAVE_CTRL0</a>     4    <span class=\"comment\">/* link control */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PCI_HT_CAP_SLAVE_CTRL1\">PCI_HT_CAP_SLAVE_CTRL1</a>     8    <span class=\"comment\">/* link control to */</span>", 
"", 
"static int <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#is_end_of_ht_chain\">is_end_of_ht_chain</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#ctrl_off\">ctrl_off</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#end\">end</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#ctrl\">ctrl</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pci_find_ht_capability\">pci_find_ht_capability</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#HT_CAPTYPE_SLAVE\">HT_CAPTYPE_SLAVE</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pos\">pos</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_CAP_FLAGS\">PCI_CAP_FLAGS</a>, &amp;<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctrl_off\">ctrl_off</a> = ((<a class=\"id\" href=\"#flags\">flags</a> >> 10) &amp; 1) ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PCI_HT_CAP_SLAVE_CTRL0\">PCI_HT_CAP_SLAVE_CTRL0</a> : <a class=\"id\" href=\"#PCI_HT_CAP_SLAVE_CTRL1\">PCI_HT_CAP_SLAVE_CTRL1</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_word\">pci_read_config_word</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#ctrl_off\">ctrl_off</a>, &amp;<a class=\"id\" href=\"#ctrl\">ctrl</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ctrl\">ctrl</a> &amp; (1 << 6))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end\">end</a> = 1;", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#end\">end</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#nv_ht_enable_msi_mapping\">nv_ht_enable_msi_mapping</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#host_bridge\">host_bridge</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#dev_no\">dev_no</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#found\">found</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_no\">dev_no</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devfn\">devfn</a> >> 3;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#dev_no\">dev_no</a>; <a class=\"id\" href=\"#i\">i</a> >= 0; <a class=\"id\" href=\"#i\">i</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#host_bridge\">host_bridge</a> = <a class=\"id\" href=\"#pci_get_slot\">pci_get_slot</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#bus\">bus</a>, <a class=\"id\" href=\"#PCI_DEVFN\">PCI_DEVFN</a>(<a class=\"id\" href=\"#i\">i</a>, 0));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#host_bridge\">host_bridge</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pci_find_ht_capability\">pci_find_ht_capability</a>(<a class=\"id\" href=\"#host_bridge\">host_bridge</a>, <a class=\"id\" href=\"#HT_CAPTYPE_SLAVE\">HT_CAPTYPE_SLAVE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a> != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#found\">found</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_dev_put\">pci_dev_put</a>(<a class=\"id\" href=\"#host_bridge\">host_bridge</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#found\">found</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* don't enable end_device/host_bridge with leaf directly here */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#host_bridge\">host_bridge</a> == <a class=\"id\" href=\"#dev\">dev</a> && <a class=\"id\" href=\"#is_end_of_ht_chain\">is_end_of_ht_chain</a>(<a class=\"id\" href=\"#host_bridge\">host_bridge</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#host_bridge_with_leaf\">host_bridge_with_leaf</a>(<a class=\"id\" href=\"#host_bridge\">host_bridge</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* root did that ! */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#msi_ht_cap_enabled\">msi_ht_cap_enabled</a>(<a class=\"id\" href=\"#host_bridge\">host_bridge</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ht_enable_msi_mapping\">ht_enable_msi_mapping</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_dev_put\">pci_dev_put</a>(<a class=\"id\" href=\"#host_bridge\">host_bridge</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#ht_disable_msi_mapping\">ht_disable_msi_mapping</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#ttl\">ttl</a> = 48;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pci_find_ht_capability\">pci_find_ht_capability</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#HT_CAPTYPE_MSI_MAPPING\">HT_CAPTYPE_MSI_MAPPING</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#pos\">pos</a> && <a class=\"id\" href=\"#ttl\">ttl</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_read_config_byte\">pci_read_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#HT_MSI_FLAGS\">HT_MSI_FLAGS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#flags\">flags</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"Disabling HT MSI Mapping\\n\");", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_byte\">pci_write_config_byte</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#HT_MSI_FLAGS\">HT_MSI_FLAGS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#flags\">flags</a> &amp; ~<a class=\"id\" href=\"#HT_MSI_FLAGS_ENABLE\">HT_MSI_FLAGS_ENABLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pci_find_next_ht_capability\">pci_find_next_ht_capability</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#HT_CAPTYPE_MSI_MAPPING\">HT_CAPTYPE_MSI_MAPPING</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#__nv_msi_ht_cap_quirk\">__nv_msi_ht_cap_quirk</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>, int <a class=\"id\" href=\"#all\">all</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#host_bridge\">host_bridge</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#found\">found</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pci_msi_enabled\">pci_msi_enabled</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* check if there is HT MSI cap or enabled on this device */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#found\">found</a> = <a class=\"id\" href=\"#ht_check_msi_mapping\">ht_check_msi_mapping</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* no HT MSI CAP */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#found\">found</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * HT MSI mapping should be disabled on devices that are below</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a non-Hypertransport host bridge. Locate the host bridge...</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#host_bridge\">host_bridge</a> = <a class=\"id\" href=\"#pci_get_bus_and_slot\">pci_get_bus_and_slot</a>(0, <a class=\"id\" href=\"#PCI_DEVFN\">PCI_DEVFN</a>(0, 0));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#host_bridge\">host_bridge</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev_warn\">dev_warn</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"nv_msi_ht_cap_quirk didn't locate host bridge\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pci_find_ht_capability\">pci_find_ht_capability</a>(<a class=\"id\" href=\"#host_bridge\">host_bridge</a>, <a class=\"id\" href=\"#HT_CAPTYPE_SLAVE\">HT_CAPTYPE_SLAVE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a> != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Host bridge is to HT */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#found\">found</a> == 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* it is not enabled, try to enable it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#all\">all</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ht_enable_msi_mapping\">ht_enable_msi_mapping</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nv_ht_enable_msi_mapping\">nv_ht_enable_msi_mapping</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* HT MSI is not enabled */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#found\">found</a> == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Host bridge is not to HT, disable HT MSI mapping on this device */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ht_disable_msi_mapping\">ht_disable_msi_mapping</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#nv_msi_ht_cap_quirk_all\">nv_msi_ht_cap_quirk_all</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__nv_msi_ht_cap_quirk\">__nv_msi_ht_cap_quirk</a>(<a class=\"id\" href=\"#dev\">dev</a>, 1);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#nv_msi_ht_cap_quirk_leaf\">nv_msi_ht_cap_quirk_leaf</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__nv_msi_ht_cap_quirk\">__nv_msi_ht_cap_quirk</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0);", 
"}", 
"", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_NVIDIA\">PCI_VENDOR_ID_NVIDIA</a>, <a class=\"id\" href=\"#PCI_ANY_ID\">PCI_ANY_ID</a>, <a class=\"id\" href=\"#nv_msi_ht_cap_quirk_leaf\">nv_msi_ht_cap_quirk_leaf</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_RESUME_EARLY\">DECLARE_PCI_FIXUP_RESUME_EARLY</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_NVIDIA\">PCI_VENDOR_ID_NVIDIA</a>, <a class=\"id\" href=\"#PCI_ANY_ID\">PCI_ANY_ID</a>, <a class=\"id\" href=\"#nv_msi_ht_cap_quirk_leaf\">nv_msi_ht_cap_quirk_leaf</a>);", 
"", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_AL\">PCI_VENDOR_ID_AL</a>, <a class=\"id\" href=\"#PCI_ANY_ID\">PCI_ANY_ID</a>, <a class=\"id\" href=\"#nv_msi_ht_cap_quirk_all\">nv_msi_ht_cap_quirk_all</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_RESUME_EARLY\">DECLARE_PCI_FIXUP_RESUME_EARLY</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_AL\">PCI_VENDOR_ID_AL</a>, <a class=\"id\" href=\"#PCI_ANY_ID\">PCI_ANY_ID</a>, <a class=\"id\" href=\"#nv_msi_ht_cap_quirk_all\">nv_msi_ht_cap_quirk_all</a>);", 
"", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_msi_intx_disable_bug\">quirk_msi_intx_disable_bug</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev_flags\">dev_flags</a> |= <a class=\"id\" href=\"#PCI_DEV_FLAGS_MSI_INTX_DISABLE_BUG\">PCI_DEV_FLAGS_MSI_INTX_DISABLE_BUG</a>;", 
"}", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_msi_intx_disable_ati_bug\">quirk_msi_intx_disable_ati_bug</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* SB700 MSI issue will be fixed at HW level from revision A21,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we need check PCI REVISION ID of SMBus controller to get SB700</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * revision.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#pci_get_device\">pci_get_device</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_ATI\">PCI_VENDOR_ID_ATI</a>, <a class=\"id\" href=\"#PCI_DEVICE_ID_ATI_SBX00_SMBUS\">PCI_DEVICE_ID_ATI_SBX00_SMBUS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#revision\">revision</a> &lt; 0x3B) && (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#revision\">revision</a> >= 0x30))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev_flags\">dev_flags</a> |= <a class=\"id\" href=\"#PCI_DEV_FLAGS_MSI_INTX_DISABLE_BUG\">PCI_DEV_FLAGS_MSI_INTX_DISABLE_BUG</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_dev_put\">pci_dev_put</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_BROADCOM\">PCI_VENDOR_ID_BROADCOM</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_TIGON3_5780\">PCI_DEVICE_ID_TIGON3_5780</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_msi_intx_disable_bug\">quirk_msi_intx_disable_bug</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_BROADCOM\">PCI_VENDOR_ID_BROADCOM</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_TIGON3_5780S\">PCI_DEVICE_ID_TIGON3_5780S</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_msi_intx_disable_bug\">quirk_msi_intx_disable_bug</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_BROADCOM\">PCI_VENDOR_ID_BROADCOM</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_TIGON3_5714\">PCI_DEVICE_ID_TIGON3_5714</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_msi_intx_disable_bug\">quirk_msi_intx_disable_bug</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_BROADCOM\">PCI_VENDOR_ID_BROADCOM</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_TIGON3_5714S\">PCI_DEVICE_ID_TIGON3_5714S</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_msi_intx_disable_bug\">quirk_msi_intx_disable_bug</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_BROADCOM\">PCI_VENDOR_ID_BROADCOM</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_TIGON3_5715\">PCI_DEVICE_ID_TIGON3_5715</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_msi_intx_disable_bug\">quirk_msi_intx_disable_bug</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_BROADCOM\">PCI_VENDOR_ID_BROADCOM</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PCI_DEVICE_ID_TIGON3_5715S\">PCI_DEVICE_ID_TIGON3_5715S</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_msi_intx_disable_bug\">quirk_msi_intx_disable_bug</a>);", 
"", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_ATI\">PCI_VENDOR_ID_ATI</a>, 0x4390,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_msi_intx_disable_ati_bug\">quirk_msi_intx_disable_ati_bug</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_ATI\">PCI_VENDOR_ID_ATI</a>, 0x4391,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_msi_intx_disable_ati_bug\">quirk_msi_intx_disable_ati_bug</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_ATI\">PCI_VENDOR_ID_ATI</a>, 0x4392,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_msi_intx_disable_ati_bug\">quirk_msi_intx_disable_ati_bug</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_ATI\">PCI_VENDOR_ID_ATI</a>, 0x4393,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_msi_intx_disable_ati_bug\">quirk_msi_intx_disable_ati_bug</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_ATI\">PCI_VENDOR_ID_ATI</a>, 0x4394,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_msi_intx_disable_ati_bug\">quirk_msi_intx_disable_ati_bug</a>);", 
"", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_ATI\">PCI_VENDOR_ID_ATI</a>, 0x4373,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_msi_intx_disable_bug\">quirk_msi_intx_disable_bug</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_ATI\">PCI_VENDOR_ID_ATI</a>, 0x4374,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_msi_intx_disable_bug\">quirk_msi_intx_disable_bug</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_FINAL\">DECLARE_PCI_FIXUP_FINAL</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_ATI\">PCI_VENDOR_ID_ATI</a>, 0x4375,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#quirk_msi_intx_disable_bug\">quirk_msi_intx_disable_bug</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PCI_MSI */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PCI_IOV\">CONFIG_PCI_IOV</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * For Intel 82576 SR-IOV NIC, if BIOS doesn't allocate resources for the</span>", 
"<span class=\"comment\"> * SR-IOV BARs, zero the Flash BAR and program the SR-IOV BARs to use the</span>", 
"<span class=\"comment\"> * old Flash Memory Space.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__devinit\">__devinit</a> <a class=\"id\" href=\"#quirk_i82576_sriov\">quirk_i82576_sriov</a>(struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#bar\">bar</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> &gt; 0x10000)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#pci_resource_flags\">pci_resource_flags</a>(<a class=\"id\" href=\"#dev\">dev</a>, 0);", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PCI_BASE_ADDRESS_SPACE\">PCI_BASE_ADDRESS_SPACE</a>) !=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PCI_BASE_ADDRESS_SPACE_MEMORY\">PCI_BASE_ADDRESS_SPACE_MEMORY</a> ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PCI_BASE_ADDRESS_MEM_TYPE_MASK\">PCI_BASE_ADDRESS_MEM_TYPE_MASK</a>) !=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PCI_BASE_ADDRESS_MEM_TYPE_32\">PCI_BASE_ADDRESS_MEM_TYPE_32</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#pci_find_ext_capability\">pci_find_ext_capability</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_EXT_CAP_ID_SRIOV\">PCI_EXT_CAP_ID_SRIOV</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pos\">pos</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_read_config_dword\">pci_read_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_SRIOV_BAR\">PCI_SRIOV_BAR</a>, &amp;<a class=\"id\" href=\"#bar\">bar</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bar\">bar</a> &amp; <a class=\"id\" href=\"#PCI_BASE_ADDRESS_MEM_MASK\">PCI_BASE_ADDRESS_MEM_MASK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#pci_resource_start\">pci_resource_start</a>(<a class=\"id\" href=\"#dev\">dev</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#pci_resource_len\">pci_resource_len</a>(<a class=\"id\" href=\"#dev\">dev</a>, 1);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#start\">start</a> || <a class=\"id\" href=\"#size\">size</a> != 0x400000 || <a class=\"id\" href=\"#start\">start</a> &amp; (<a class=\"id\" href=\"#size\">size</a> - 1))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_resource_flags\">pci_resource_flags</a>(<a class=\"id\" href=\"#dev\">dev</a>, 1) = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#PCI_BASE_ADDRESS_1\">PCI_BASE_ADDRESS_1</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_SRIOV_BAR\">PCI_SRIOV_BAR</a>, <a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pci_write_config_dword\">pci_write_config_dword</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pos\">pos</a> + <a class=\"id\" href=\"#PCI_SRIOV_BAR\">PCI_SRIOV_BAR</a> + 12, <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#size\">size</a> / 2);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_info\">dev_info</a>(&amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, \"use Flash Memory Space for SR-IOV BARs\\n\");", 
"}", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>, 0x10c9, <a class=\"id\" href=\"#quirk_i82576_sriov\">quirk_i82576_sriov</a>);", 
"<a class=\"id\" href=\"#DECLARE_PCI_FIXUP_HEADER\">DECLARE_PCI_FIXUP_HEADER</a>(<a class=\"id\" href=\"#PCI_VENDOR_ID_INTEL\">PCI_VENDOR_ID_INTEL</a>, 0x10e6, <a class=\"id\" href=\"#quirk_i82576_sriov\">quirk_i82576_sriov</a>);", 
];
xr_frag_insert('l/17/56c7691059a7f931140d62ca46168c2508654a.xr', __xr_tmp);
