var __xr_tmp = [
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_option\">get_option</a>(&amp;<a class=\"id\" href=\"#arg\">arg</a>, &amp;<a class=\"id\" href=\"#num\">num</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#num\">num</a> >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#show_lapic\">show_lapic</a> = <a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"show_lapic=\", <a class=\"id\" href=\"#setup_show_lapic\">setup_show_lapic</a>);", 
"", 
"<a class=\"id\" href=\"#__apicdebuginit\">__apicdebuginit</a>(int) <a class=\"id\" href=\"#print_ICs\">print_ICs</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#apic_verbosity\">apic_verbosity</a> == <a class=\"id\" href=\"#APIC_QUIET\">APIC_QUIET</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#print_PIC\">print_PIC</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* don't print out if apic is not there */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpu_has_apic\">cpu_has_apic</a> && !<a class=\"id\" href=\"#apic_from_smp_config\">apic_from_smp_config</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#print_local_APICs\">print_local_APICs</a>(<a class=\"id\" href=\"#show_lapic\">show_lapic</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#print_IO_APIC\">print_IO_APIC</a>();", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#fs_initcall\">fs_initcall</a>(<a class=\"id\" href=\"#print_ICs\">print_ICs</a>);", 
"", 
"", 
"<span class=\"comment\">/* Where if anywhere is the i8259 connect in external int mode */</span>", 
"static struct { int <a class=\"id\" href=\"#pin\">pin</a>, <a class=\"id\" href=\"#apic\">apic</a>; } <a class=\"id\" href=\"#ioapic_i8259\">ioapic_i8259</a> = { -1, -1 };", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#enable_IO_APIC\">enable_IO_APIC</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i8259_apic\">i8259_apic</a>, <a class=\"id\" href=\"#i8259_pin\">i8259_pin</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#apic\">apic</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#legacy_pic\">legacy_pic</a>-><a class=\"id\" href=\"#nr_legacy_irqs\">nr_legacy_irqs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>for(<a class=\"id\" href=\"#apic\">apic</a> = 0; <a class=\"id\" href=\"#apic\">apic</a> &lt; <a class=\"id\" href=\"#nr_ioapics\">nr_ioapics</a>; <a class=\"id\" href=\"#apic\">apic</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#pin\">pin</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* See if any of the pins is in ExtINT mode */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#pin\">pin</a> = 0; <a class=\"id\" href=\"#pin\">pin</a> &lt; <a class=\"id\" href=\"#nr_ioapic_registers\">nr_ioapic_registers</a>[<a class=\"id\" href=\"#apic\">apic</a>]; <a class=\"id\" href=\"#pin\">pin</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#IO_APIC_route_entry\">IO_APIC_route_entry</a> <a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#ioapic_read_entry\">ioapic_read_entry</a>(<a class=\"id\" href=\"#apic\">apic</a>, <a class=\"id\" href=\"#pin\">pin</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If the interrupt line is enabled and in ExtInt mode</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * I have found the pin where the i8259 is connected.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#entry\">entry</a>.<a class=\"id\" href=\"#mask\">mask</a> == 0) && (<a class=\"id\" href=\"#entry\">entry</a>.<a class=\"id\" href=\"#delivery_mode\">delivery_mode</a> == <a class=\"id\" href=\"#dest_ExtINT\">dest_ExtINT</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ioapic_i8259\">ioapic_i8259</a>.<a class=\"id\" href=\"#apic\">apic</a> = <a class=\"id\" href=\"#apic\">apic</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ioapic_i8259\">ioapic_i8259</a>.<a class=\"id\" href=\"#pin\">pin</a>  = <a class=\"id\" href=\"#pin\">pin</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found_i8259\">found_i8259</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
" <a class=\"id\" href=\"#found_i8259\">found_i8259</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* Look to see what if the MP table has reported the ExtINT */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* If we could not find the appropriate pin by looking at the ioapic</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the i8259 probably is not connected the ioapic but give the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mptable a chance anyway.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i8259_pin\">i8259_pin</a>  = <a class=\"id\" href=\"#find_isa_irq_pin\">find_isa_irq_pin</a>(0, <a class=\"id\" href=\"#mp_ExtINT\">mp_ExtINT</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i8259_apic\">i8259_apic</a> = <a class=\"id\" href=\"#find_isa_irq_apic\">find_isa_irq_apic</a>(0, <a class=\"id\" href=\"#mp_ExtINT\">mp_ExtINT</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Trust the MP table if nothing is setup in the hardware */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#ioapic_i8259\">ioapic_i8259</a>.<a class=\"id\" href=\"#pin\">pin</a> == -1) && (<a class=\"id\" href=\"#i8259_pin\">i8259_pin</a> >= 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"ExtINT not setup in hardware but reported by MP table\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ioapic_i8259\">ioapic_i8259</a>.<a class=\"id\" href=\"#pin\">pin</a>  = <a class=\"id\" href=\"#i8259_pin\">i8259_pin</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ioapic_i8259\">ioapic_i8259</a>.<a class=\"id\" href=\"#apic\">apic</a> = <a class=\"id\" href=\"#i8259_apic\">i8259_apic</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Complain if the MP table and the hardware disagree */</span>", 
"<span class=\"ts\"/>if (((<a class=\"id\" href=\"#ioapic_i8259\">ioapic_i8259</a>.<a class=\"id\" href=\"#apic\">apic</a> != <a class=\"id\" href=\"#i8259_apic\">i8259_apic</a>) || (<a class=\"id\" href=\"#ioapic_i8259\">ioapic_i8259</a>.<a class=\"id\" href=\"#pin\">pin</a> != <a class=\"id\" href=\"#i8259_pin\">i8259_pin</a>)) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#i8259_pin\">i8259_pin</a> >= 0) && (<a class=\"id\" href=\"#ioapic_i8259\">ioapic_i8259</a>.<a class=\"id\" href=\"#pin\">pin</a> >= 0))", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"ExtINT in hardware and MP table differ\\n\");", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Do not trust the IO-APIC being empty at bootup</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_IO_APIC\">clear_IO_APIC</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Not an __init, needed by the reboot code</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#disable_IO_APIC\">disable_IO_APIC</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Clear the IO-APIC before rebooting:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_IO_APIC\">clear_IO_APIC</a>();", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#legacy_pic\">legacy_pic</a>-><a class=\"id\" href=\"#nr_legacy_irqs\">nr_legacy_irqs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the i8259 is routed through an IOAPIC</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Put that IOAPIC in virtual wire mode</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so legacy interrupts can be delivered.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * With interrupt-remapping, for now we will use virtual wire A mode,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * as virtual wire B is little complex (need to configure both</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * IOAPIC RTE aswell as interrupt-remapping table entry).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * As this gets called during crash dump, keep this simple for now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ioapic_i8259\">ioapic_i8259</a>.<a class=\"id\" href=\"#pin\">pin</a> != -1 && !<a class=\"id\" href=\"#intr_remapping_enabled\">intr_remapping_enabled</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#IO_APIC_route_entry\">IO_APIC_route_entry</a> <a class=\"id\" href=\"#entry\">entry</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#entry\">entry</a>, 0, sizeof(<a class=\"id\" href=\"#entry\">entry</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>.<a class=\"id\" href=\"#mask\">mask</a>            = 0; <span class=\"comment\">/* Enabled */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>.<a class=\"id\" href=\"#trigger\">trigger</a>         = 0; <span class=\"comment\">/* Edge */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>.<a class=\"id\" href=\"#irr\">irr</a>             = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>.<a class=\"id\" href=\"#polarity\">polarity</a>        = 0; <span class=\"comment\">/* High */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>.<a class=\"id\" href=\"#delivery_status\">delivery_status</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>.<a class=\"id\" href=\"#dest_mode\">dest_mode</a>       = 0; <span class=\"comment\">/* Physical */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>.<a class=\"id\" href=\"#delivery_mode\">delivery_mode</a>   = <a class=\"id\" href=\"#dest_ExtINT\">dest_ExtINT</a>; <span class=\"comment\">/* ExtInt */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>.<a class=\"id\" href=\"#vector\">vector</a>          = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a>.<a class=\"id\" href=\"#dest\">dest</a>            = <a class=\"id\" href=\"#read_apic_id\">read_apic_id</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Add it to the IO-APIC irq-routing table:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ioapic_write_entry\">ioapic_write_entry</a>(<a class=\"id\" href=\"#ioapic_i8259\">ioapic_i8259</a>.<a class=\"id\" href=\"#apic\">apic</a>, <a class=\"id\" href=\"#ioapic_i8259\">ioapic_i8259</a>.<a class=\"id\" href=\"#pin\">pin</a>, <a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Use virtual wire A mode when interrupt remapping is enabled.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has_apic\">cpu_has_apic</a> || <a class=\"id\" href=\"#apic_from_smp_config\">apic_from_smp_config</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disconnect_bsp_APIC\">disconnect_bsp_APIC</a>(!<a class=\"id\" href=\"#intr_remapping_enabled\">intr_remapping_enabled</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ioapic_i8259\">ioapic_i8259</a>.<a class=\"id\" href=\"#pin\">pin</a> != -1);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * function to set the IO-APIC physical IDs based on the</span>", 
"<span class=\"comment\"> * values stored in the MPC table.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * by Matt Domsch &lt;Matt_Domsch@dell.com&gt;  Tue Dec 21 12:25:05 CST 1999</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#setup_ioapic_ids_from_mpc\">setup_ioapic_ids_from_mpc</a>(void)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#IO_APIC_reg_00\">IO_APIC_reg_00</a> <a class=\"id\" href=\"#reg_00\">reg_00</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#physid_mask_t\">physid_mask_t</a> <a class=\"id\" href=\"#phys_id_present_map\">phys_id_present_map</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#apic_id\">apic_id</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#old_id\">old_id</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_ioapic\">acpi_ioapic</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Don't check I/O APIC IDs for xAPIC systems.  They have</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * no meaning without the serial APIC bus.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86_vendor\">x86_vendor</a> == <a class=\"id\" href=\"#X86_VENDOR_INTEL\">X86_VENDOR_INTEL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>|| <a class=\"id\" href=\"#APIC_XAPIC\">APIC_XAPIC</a>(<a class=\"id\" href=\"#apic_version\">apic_version</a>[<a class=\"id\" href=\"#boot_cpu_physical_apicid\">boot_cpu_physical_apicid</a>]))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This is broken; anything with a real cpu count has to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * circumvent this idiocy regardless.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#ioapic_phys_id_map\">ioapic_phys_id_map</a>(&amp;<a class=\"id\" href=\"#phys_cpu_present_map\">phys_cpu_present_map</a>, &amp;<a class=\"id\" href=\"#phys_id_present_map\">phys_id_present_map</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Set the IOAPIC ID to the value stored in the MPC table.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#apic_id\">apic_id</a> = 0; <a class=\"id\" href=\"#apic_id\">apic_id</a> &lt; <a class=\"id\" href=\"#nr_ioapics\">nr_ioapics</a>; <a class=\"id\" href=\"#apic_id\">apic_id</a>++) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Read the register 0 value */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#ioapic_lock\">ioapic_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reg_00\">reg_00</a>.<a class=\"id\" href=\"#raw\">raw</a> = <a class=\"id\" href=\"#io_apic_read\">io_apic_read</a>(<a class=\"id\" href=\"#apic_id\">apic_id</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#ioapic_lock\">ioapic_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old_id\">old_id</a> = <a class=\"id\" href=\"#mp_ioapics\">mp_ioapics</a>[<a class=\"id\" href=\"#apic_id\">apic_id</a>].<a class=\"id\" href=\"#apicid\">apicid</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mp_ioapics\">mp_ioapics</a>[<a class=\"id\" href=\"#apic_id\">apic_id</a>].<a class=\"id\" href=\"#apicid\">apicid</a> >= <a class=\"id\" href=\"#get_physical_broadcast\">get_physical_broadcast</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"BIOS bug, IO-APIC#%d ID is %d in the MPC table!...\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_id\">apic_id</a>, <a class=\"id\" href=\"#mp_ioapics\">mp_ioapics</a>[<a class=\"id\" href=\"#apic_id\">apic_id</a>].<a class=\"id\" href=\"#apicid\">apicid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"... fixing up to %d. (tell your hw vendor)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reg_00\">reg_00</a>.<a class=\"id\" href=\"#bits\">bits</a>.<a class=\"id\" href=\"#ID\">ID</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mp_ioapics\">mp_ioapics</a>[<a class=\"id\" href=\"#apic_id\">apic_id</a>].<a class=\"id\" href=\"#apicid\">apicid</a> = <a class=\"id\" href=\"#reg_00\">reg_00</a>.<a class=\"id\" href=\"#bits\">bits</a>.<a class=\"id\" href=\"#ID\">ID</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Sanity check, is the ID really free? Every APIC in a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * system must have a unique ID or we get lots of nice</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * 'stuck on smp_invalidate_needed IPI wait' messages.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#check_apicid_used\">check_apicid_used</a>(&amp;<a class=\"id\" href=\"#phys_id_present_map\">phys_id_present_map</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mp_ioapics\">mp_ioapics</a>[<a class=\"id\" href=\"#apic_id\">apic_id</a>].<a class=\"id\" href=\"#apicid\">apicid</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"BIOS bug, IO-APIC#%d ID %d is already used!...\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_id\">apic_id</a>, <a class=\"id\" href=\"#mp_ioapics\">mp_ioapics</a>[<a class=\"id\" href=\"#apic_id\">apic_id</a>].<a class=\"id\" href=\"#apicid\">apicid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#get_physical_broadcast\">get_physical_broadcast</a>(); <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#physid_isset\">physid_isset</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#phys_id_present_map\">phys_id_present_map</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> >= <a class=\"id\" href=\"#get_physical_broadcast\">get_physical_broadcast</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"Max APIC ID exceeded!\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"... fixing up to %d. (tell your hw vendor)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#physid_set\">physid_set</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#phys_id_present_map\">phys_id_present_map</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mp_ioapics\">mp_ioapics</a>[<a class=\"id\" href=\"#apic_id\">apic_id</a>].<a class=\"id\" href=\"#apicid\">apicid</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#physid_mask_t\">physid_mask_t</a> <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#apicid_to_cpu_present\">apicid_to_cpu_present</a>(<a class=\"id\" href=\"#mp_ioapics\">mp_ioapics</a>[<a class=\"id\" href=\"#apic_id\">apic_id</a>].<a class=\"id\" href=\"#apicid\">apicid</a>, &amp;<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_printk\">apic_printk</a>(<a class=\"id\" href=\"#APIC_VERBOSE\">APIC_VERBOSE</a>, \"Setting %d in the \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"phys_id_present_map\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mp_ioapics\">mp_ioapics</a>[<a class=\"id\" href=\"#apic_id\">apic_id</a>].<a class=\"id\" href=\"#apicid\">apicid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#physids_or\">physids_or</a>(<a class=\"id\" href=\"#phys_id_present_map\">phys_id_present_map</a>, <a class=\"id\" href=\"#phys_id_present_map\">phys_id_present_map</a>, <a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We need to adjust the IRQ routing table</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * if the ID changed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#old_id\">old_id</a> != <a class=\"id\" href=\"#mp_ioapics\">mp_ioapics</a>[<a class=\"id\" href=\"#apic_id\">apic_id</a>].<a class=\"id\" href=\"#apicid\">apicid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#mp_irq_entries\">mp_irq_entries</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mp_irqs\">mp_irqs</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#dstapic\">dstapic</a> == <a class=\"id\" href=\"#old_id\">old_id</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mp_irqs\">mp_irqs</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#dstapic\">dstapic</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#mp_ioapics\">mp_ioapics</a>[<a class=\"id\" href=\"#apic_id\">apic_id</a>].<a class=\"id\" href=\"#apicid\">apicid</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Read the right value from the MPC table and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * write it into the ID register.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_printk\">apic_printk</a>(<a class=\"id\" href=\"#APIC_VERBOSE\">APIC_VERBOSE</a>, <a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"...changing IO-APIC physical APIC ID to %d ...\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mp_ioapics\">mp_ioapics</a>[<a class=\"id\" href=\"#apic_id\">apic_id</a>].<a class=\"id\" href=\"#apicid\">apicid</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reg_00\">reg_00</a>.<a class=\"id\" href=\"#bits\">bits</a>.<a class=\"id\" href=\"#ID\">ID</a> = <a class=\"id\" href=\"#mp_ioapics\">mp_ioapics</a>[<a class=\"id\" href=\"#apic_id\">apic_id</a>].<a class=\"id\" href=\"#apicid\">apicid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#ioapic_lock\">ioapic_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#io_apic_write\">io_apic_write</a>(<a class=\"id\" href=\"#apic_id\">apic_id</a>, 0, <a class=\"id\" href=\"#reg_00\">reg_00</a>.<a class=\"id\" href=\"#raw\">raw</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#ioapic_lock\">ioapic_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Sanity check</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#ioapic_lock\">ioapic_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reg_00\">reg_00</a>.<a class=\"id\" href=\"#raw\">raw</a> = <a class=\"id\" href=\"#io_apic_read\">io_apic_read</a>(<a class=\"id\" href=\"#apic_id\">apic_id</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#ioapic_lock\">ioapic_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#reg_00\">reg_00</a>.<a class=\"id\" href=\"#bits\">bits</a>.<a class=\"id\" href=\"#ID\">ID</a> != <a class=\"id\" href=\"#mp_ioapics\">mp_ioapics</a>[<a class=\"id\" href=\"#apic_id\">apic_id</a>].<a class=\"id\" href=\"#apicid\">apicid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"could not set ID!\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic_printk\">apic_printk</a>(<a class=\"id\" href=\"#APIC_VERBOSE\">APIC_VERBOSE</a>, \" ok.\\n\");", 
"<span class=\"ts\"/>}", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"int <a class=\"id\" href=\"#no_timer_check\">no_timer_check</a> <a class=\"id\" href=\"#__initdata\">__initdata</a>;", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#notimercheck\">notimercheck</a>(char *<a class=\"id\" href=\"#s\">s</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#no_timer_check\">no_timer_check</a> = 1;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"no_timer_check\", <a class=\"id\" href=\"#notimercheck\">notimercheck</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * There is a nasty bug in some older SMP boards, their mptable lies</span>", 
"<span class=\"comment\"> * about the timer IRQ. We do the following to work around the situation:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>- timer IRQ defaults to IO-APIC IRQ</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>- if this function detects that timer IRQs are defunct, then we fall</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>  back to ISA timer IRQs</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#timer_irq_works\">timer_irq_works</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#t1\">t1</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#no_timer_check\">no_timer_check</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_save_flags\">local_save_flags</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/* Let ten ticks pass... */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mdelay\">mdelay</a>((10 * 1000) / <a class=\"id\" href=\"#HZ\">HZ</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Expect a few ticks at least, to be sure some possible</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * glue logic does not lock up after one or two first</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ticks in a non-ExtINT mode.  Also the local APIC</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * might have cached one ExtINT interrupt.  Finally, at</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * least one tick may be lost due to delays.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* jiffies wrap? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#time_after\">time_after</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#t1\">t1</a> + 4))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * In the SMP+IOAPIC case it might happen that there are an unspecified</span>", 
"<span class=\"comment\"> * number of pending IRQ events unhandled. These cases are very rare,</span>", 
"<span class=\"comment\"> * so we 'resend' these IRQs via IPIs, to the same CPU. It's much</span>", 
"<span class=\"comment\"> * better to do it this way as thus we do not have to be aware of</span>", 
"<span class=\"comment\"> * 'pending' interrupts in the IRQ path, except at this point.</span>", 
"<span class=\"comment\"> */</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Edge triggered needs to resend any interrupt</span>", 
"<span class=\"comment\"> * that was delayed but this is now handled in the device</span>", 
"<span class=\"comment\"> * independent code.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Starting up a edge-triggered IO-APIC interrupt is</span>", 
"<span class=\"comment\"> * nasty - we need to make sure that we get the edge.</span>", 
"<span class=\"comment\"> * If it is already asserted for some reason, we need</span>", 
"<span class=\"comment\"> * return 1 to indicate that is was pending.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is not complete - we should be able to fake</span>", 
"<span class=\"comment\"> * an edge even if it isn't on the 8259A...</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static unsigned int <a class=\"id\" href=\"#startup_ioapic_irq\">startup_ioapic_irq</a>(unsigned int <a class=\"id\" href=\"#irq\">irq</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#was_pending\">was_pending</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#irq_cfg\">irq_cfg</a> *<a class=\"id\" href=\"#cfg\">cfg</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#ioapic_lock\">ioapic_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#irq\">irq</a> &lt; <a class=\"id\" href=\"#legacy_pic\">legacy_pic</a>-><a class=\"id\" href=\"#nr_legacy_irqs\">nr_legacy_irqs</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#legacy_pic\">legacy_pic</a>-><a class=\"id\" href=\"#chip\">chip</a>-><a class=\"id\" href=\"#mask\">mask</a>(<a class=\"id\" href=\"#irq\">irq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#legacy_pic\">legacy_pic</a>-><a class=\"id\" href=\"#irq_pending\">irq_pending</a>(<a class=\"id\" href=\"#irq\">irq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#was_pending\">was_pending</a> = 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfg\">cfg</a> = <a class=\"id\" href=\"#irq_cfg\">irq_cfg</a>(<a class=\"id\" href=\"#irq\">irq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__unmask_IO_APIC_irq\">__unmask_IO_APIC_irq</a>(<a class=\"id\" href=\"#cfg\">cfg</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#ioapic_lock\">ioapic_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#was_pending\">was_pending</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ioapic_retrigger_irq\">ioapic_retrigger_irq</a>(unsigned int <a class=\"id\" href=\"#irq\">irq</a>)", 
"{", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#irq_cfg\">irq_cfg</a> *<a class=\"id\" href=\"#cfg\">cfg</a> = <a class=\"id\" href=\"#irq_cfg\">irq_cfg</a>(<a class=\"id\" href=\"#irq\">irq</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#vector_lock\">vector_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#send_IPI_mask\">send_IPI_mask</a>(<a class=\"id\" href=\"#cpumask_of\">cpumask_of</a>(<a class=\"id\" href=\"#cpumask_first\">cpumask_first</a>(<a class=\"id\" href=\"#cfg\">cfg</a>-><a class=\"id\" href=\"#domain\">domain</a>)), <a class=\"id\" href=\"#cfg\">cfg</a>-><a class=\"id\" href=\"#vector\">vector</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#vector_lock\">vector_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Level and edge triggered IO-APIC interrupts need different handling,</span>", 
"<span class=\"comment\"> * so we use two separate IRQ descriptors. Edge triggered IRQs can be</span>", 
"<span class=\"comment\"> * handled with the level-triggered descriptor, but that one has slightly</span>", 
"<span class=\"comment\"> * more overhead. Level-triggered interrupts cannot be handled with the</span>", 
"<span class=\"comment\"> * edge-triggered handler, without risking IRQ storms and other ugly</span>", 
"<span class=\"comment\"> * races.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"void <a class=\"id\" href=\"#send_cleanup_vector\">send_cleanup_vector</a>(struct <a class=\"id\" href=\"#irq_cfg\">irq_cfg</a> *<a class=\"id\" href=\"#cfg\">cfg</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> <a class=\"id\" href=\"#cleanup_mask\">cleanup_mask</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#alloc_cpumask_var\">alloc_cpumask_var</a>(&amp;<a class=\"id\" href=\"#cleanup_mask\">cleanup_mask</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu_and\">for_each_cpu_and</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#cfg\">cfg</a>-><a class=\"id\" href=\"#old_domain\">old_domain</a>, <a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#send_IPI_mask\">send_IPI_mask</a>(<a class=\"id\" href=\"#cpumask_of\">cpumask_of</a>(<a class=\"id\" href=\"#i\">i</a>), <a class=\"id\" href=\"#IRQ_MOVE_CLEANUP_VECTOR\">IRQ_MOVE_CLEANUP_VECTOR</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_and\">cpumask_and</a>(<a class=\"id\" href=\"#cleanup_mask\">cleanup_mask</a>, <a class=\"id\" href=\"#cfg\">cfg</a>-><a class=\"id\" href=\"#old_domain\">old_domain</a>, <a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#send_IPI_mask\">send_IPI_mask</a>(<a class=\"id\" href=\"#cleanup_mask\">cleanup_mask</a>, <a class=\"id\" href=\"#IRQ_MOVE_CLEANUP_VECTOR\">IRQ_MOVE_CLEANUP_VECTOR</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_cpumask_var\">free_cpumask_var</a>(<a class=\"id\" href=\"#cleanup_mask\">cleanup_mask</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfg\">cfg</a>-><a class=\"id\" href=\"#move_in_progress\">move_in_progress</a> = 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__target_IO_APIC_irq\">__target_IO_APIC_irq</a>(unsigned int <a class=\"id\" href=\"#irq\">irq</a>, unsigned int <a class=\"id\" href=\"#dest\">dest</a>, struct <a class=\"id\" href=\"#irq_cfg\">irq_cfg</a> *<a class=\"id\" href=\"#cfg\">cfg</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#apic\">apic</a>, <a class=\"id\" href=\"#pin\">pin</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#irq_pin_list\">irq_pin_list</a> *<a class=\"id\" href=\"#entry\">entry</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#vector\">vector</a> = <a class=\"id\" href=\"#cfg\">cfg</a>-><a class=\"id\" href=\"#vector\">vector</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_irq_pin\">for_each_irq_pin</a>(<a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#cfg\">cfg</a>-><a class=\"id\" href=\"#irq_2_pin\">irq_2_pin</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#reg\">reg</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic\">apic</a> = <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#apic\">apic</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pin\">pin</a> = <a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#pin\">pin</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * With interrupt-remapping, destination information comes</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * from interrupt-remapping table entry.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#irq_remapped\">irq_remapped</a>(<a class=\"id\" href=\"#irq\">irq</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#io_apic_write\">io_apic_write</a>(<a class=\"id\" href=\"#apic\">apic</a>, 0x11 + <a class=\"id\" href=\"#pin\">pin</a>*2, <a class=\"id\" href=\"#dest\">dest</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reg\">reg</a> = <a class=\"id\" href=\"#io_apic_read\">io_apic_read</a>(<a class=\"id\" href=\"#apic\">apic</a>, 0x10 + <a class=\"id\" href=\"#pin\">pin</a>*2);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reg\">reg</a> &= ~<a class=\"id\" href=\"#IO_APIC_REDIR_VECTOR_MASK\">IO_APIC_REDIR_VECTOR_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reg\">reg</a> |= <a class=\"id\" href=\"#vector\">vector</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#io_apic_modify\">io_apic_modify</a>(<a class=\"id\" href=\"#apic\">apic</a>, 0x10 + <a class=\"id\" href=\"#pin\">pin</a>*2, <a class=\"id\" href=\"#reg\">reg</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Either sets desc-&gt;affinity to a valid value, and returns</span>", 
"<span class=\"comment\"> * -&gt;cpu_mask_to_apicid of that in dest_id, or returns -1 and</span>", 
"<span class=\"comment\"> * leaves desc-&gt;affinity untouched.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned int", 
"<a class=\"id\" href=\"#set_desc_affinity\">set_desc_affinity</a>(struct <a class=\"id\" href=\"#irq_desc\">irq_desc</a> *<a class=\"id\" href=\"#desc\">desc</a>, const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#mask\">mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  unsigned int *<a class=\"id\" href=\"#dest_id\">dest_id</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#irq_cfg\">irq_cfg</a> *<a class=\"id\" href=\"#cfg\">cfg</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#irq\">irq</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_intersects\">cpumask_intersects</a>(<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#irq\">irq</a> = <a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#irq\">irq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfg\">cfg</a> = <a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#chip_data\">chip_data</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#assign_irq_vector\">assign_irq_vector</a>(<a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#cfg\">cfg</a>, <a class=\"id\" href=\"#mask\">mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_copy\">cpumask_copy</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#affinity\">affinity</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#dest_id\">dest_id</a> = <a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#cpu_mask_to_apicid_and\">cpu_mask_to_apicid_and</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#affinity\">affinity</a>, <a class=\"id\" href=\"#cfg\">cfg</a>-><a class=\"id\" href=\"#domain\">domain</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#set_ioapic_affinity_irq_desc\">set_ioapic_affinity_irq_desc</a>(struct <a class=\"id\" href=\"#irq_desc\">irq_desc</a> *<a class=\"id\" href=\"#desc\">desc</a>, const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#irq_cfg\">irq_cfg</a> *<a class=\"id\" href=\"#cfg\">cfg</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#dest\">dest</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#irq\">irq</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#irq\">irq</a> = <a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#irq\">irq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfg\">cfg</a> = <a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#chip_data\">chip_data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#ioapic_lock\">ioapic_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#set_desc_affinity\">set_desc_affinity</a>(<a class=\"id\" href=\"#desc\">desc</a>, <a class=\"id\" href=\"#mask\">mask</a>, &amp;<a class=\"id\" href=\"#dest\">dest</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Only the high 8 bits are valid. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dest\">dest</a> = <a class=\"id\" href=\"#SET_APIC_LOGICAL_ID\">SET_APIC_LOGICAL_ID</a>(<a class=\"id\" href=\"#dest\">dest</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__target_IO_APIC_irq\">__target_IO_APIC_irq</a>(<a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#dest\">dest</a>, <a class=\"id\" href=\"#cfg\">cfg</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#ioapic_lock\">ioapic_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#set_ioapic_affinity_irq\">set_ioapic_affinity_irq</a>(unsigned int <a class=\"id\" href=\"#irq\">irq</a>, const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#irq_desc\">irq_desc</a> *<a class=\"id\" href=\"#desc\">desc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#irq_to_desc\">irq_to_desc</a>(<a class=\"id\" href=\"#irq\">irq</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#set_ioapic_affinity_irq_desc\">set_ioapic_affinity_irq_desc</a>(<a class=\"id\" href=\"#desc\">desc</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_INTR_REMAP\">CONFIG_INTR_REMAP</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Migrate the IO-APIC irq in the presence of intr-remapping.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For both level and edge triggered, irq migration is a simple atomic</span>", 
"<span class=\"comment\"> * update(of vector and cpu destination) of IRTE and flush the hardware cache.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For level triggered, we eliminate the io-apic RTE modification (with the</span>", 
"<span class=\"comment\"> * updated vector information), by using a virtual vector (io-apic pin number).</span>", 
"<span class=\"comment\"> * Real vector that is used for interrupting cpu will be coming from</span>", 
"<span class=\"comment\"> * the interrupt-remapping table entry.</span>", 
"<span class=\"comment\"> */</span>", 
"static int", 
"<a class=\"id\" href=\"#migrate_ioapic_irq_desc\">migrate_ioapic_irq_desc</a>(struct <a class=\"id\" href=\"#irq_desc\">irq_desc</a> *<a class=\"id\" href=\"#desc\">desc</a>, const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#irq_cfg\">irq_cfg</a> *<a class=\"id\" href=\"#cfg\">cfg</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#irte\">irte</a> <a class=\"id\" href=\"#irte\">irte</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#dest\">dest</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#irq\">irq</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -1;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_intersects\">cpumask_intersects</a>(<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#irq\">irq</a> = <a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#irq\">irq</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#get_irte\">get_irte</a>(<a class=\"id\" href=\"#irq\">irq</a>, &amp;<a class=\"id\" href=\"#irte\">irte</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cfg\">cfg</a> = <a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#chip_data\">chip_data</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#assign_irq_vector\">assign_irq_vector</a>(<a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#cfg\">cfg</a>, <a class=\"id\" href=\"#mask\">mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dest\">dest</a> = <a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#cpu_mask_to_apicid_and\">cpu_mask_to_apicid_and</a>(<a class=\"id\" href=\"#cfg\">cfg</a>-><a class=\"id\" href=\"#domain\">domain</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#irte\">irte</a>.<a class=\"id\" href=\"#vector\">vector</a> = <a class=\"id\" href=\"#cfg\">cfg</a>-><a class=\"id\" href=\"#vector\">vector</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#irte\">irte</a>.<a class=\"id\" href=\"#dest_id\">dest_id</a> = <a class=\"id\" href=\"#IRTE_DEST\">IRTE_DEST</a>(<a class=\"id\" href=\"#dest\">dest</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Modified the IRTE and flushes the Interrupt entry cache.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#modify_irte\">modify_irte</a>(<a class=\"id\" href=\"#irq\">irq</a>, &amp;<a class=\"id\" href=\"#irte\">irte</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cfg\">cfg</a>-><a class=\"id\" href=\"#move_in_progress\">move_in_progress</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#send_cleanup_vector\">send_cleanup_vector</a>(<a class=\"id\" href=\"#cfg\">cfg</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_copy\">cpumask_copy</a>(<a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#affinity\">affinity</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Migrates the IRQ destination in the process context.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#set_ir_ioapic_affinity_irq_desc\">set_ir_ioapic_affinity_irq_desc</a>(struct <a class=\"id\" href=\"#irq_desc\">irq_desc</a> *<a class=\"id\" href=\"#desc\">desc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#migrate_ioapic_irq_desc\">migrate_ioapic_irq_desc</a>(<a class=\"id\" href=\"#desc\">desc</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"}", 
"static int <a class=\"id\" href=\"#set_ir_ioapic_affinity_irq\">set_ir_ioapic_affinity_irq</a>(unsigned int <a class=\"id\" href=\"#irq\">irq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#irq_desc\">irq_desc</a> *<a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#irq_to_desc\">irq_to_desc</a>(<a class=\"id\" href=\"#irq\">irq</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#set_ir_ioapic_affinity_irq_desc\">set_ir_ioapic_affinity_irq_desc</a>(<a class=\"id\" href=\"#desc\">desc</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#set_ir_ioapic_affinity_irq_desc\">set_ir_ioapic_affinity_irq_desc</a>(struct <a class=\"id\" href=\"#irq_desc\">irq_desc</a> *<a class=\"id\" href=\"#desc\">desc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<a class=\"id\" href=\"#asmlinkage\">asmlinkage</a> void <a class=\"id\" href=\"#smp_irq_move_cleanup_interrupt\">smp_irq_move_cleanup_interrupt</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#vector\">vector</a>, <a class=\"id\" href=\"#me\">me</a>;", 
"", 
];
xr_frag_insert('l/17/a4a5f9385d823edbaf8dbcc3618f757a4cc1f2.xr', __xr_tmp);
