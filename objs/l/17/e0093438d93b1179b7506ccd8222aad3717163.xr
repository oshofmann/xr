var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/kernel/panic.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 1991, 1992  Linus Torvalds</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function is used through-out the kernel (including mm and fs)</span>", 
"<span class=\"comment\"> * to indicate a major problem.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#debug_locks\">debug_locks</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kmsg_dump\">kmsg_dump</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kallsyms\">kallsyms</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#notifier\">notifier</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#random\">random</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#reboot\">reboot</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#delay\">delay</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kexec\">kexec</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sysrq\">sysrq</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#nmi\">nmi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#dmi\">dmi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PANIC_TIMER_STEP\">PANIC_TIMER_STEP</a> 100", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PANIC_BLINK_SPD\">PANIC_BLINK_SPD</a> 18", 
"", 
"int <a class=\"id\" href=\"#panic_on_oops\">panic_on_oops</a>;", 
"static unsigned long <a class=\"id\" href=\"#tainted_mask\">tainted_mask</a>;", 
"static int <a class=\"id\" href=\"#pause_on_oops\">pause_on_oops</a>;", 
"static int <a class=\"id\" href=\"#pause_on_oops_flag\">pause_on_oops_flag</a>;", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#pause_on_oops_lock\">pause_on_oops_lock</a>);", 
"", 
"int <a class=\"id\" href=\"#panic_timeout\">panic_timeout</a>;", 
"", 
"<a class=\"id\" href=\"#ATOMIC_NOTIFIER_HEAD\">ATOMIC_NOTIFIER_HEAD</a>(<a class=\"id\" href=\"#panic_notifier_list\">panic_notifier_list</a>);", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#panic_notifier_list\">panic_notifier_list</a>);", 
"", 
"static long <a class=\"id\" href=\"#no_blink\">no_blink</a>(int <a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Returns how long it waited in ms */</span>", 
"long (*<a class=\"id\" href=\"#panic_blink\">panic_blink</a>)(int <a class=\"id\" href=\"#state\">state</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#panic_blink\">panic_blink</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>panic - halt the system</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@fmt: The text string to print</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Display a message, then perform cleanups.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function never returns.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#NORET_TYPE\">NORET_TYPE</a> void <a class=\"id\" href=\"#panic\">panic</a>(const char * <a class=\"id\" href=\"#fmt\">fmt</a>, ...)", 
"{", 
"<span class=\"ts\"/>static char <a class=\"id\" href=\"#buf\">buf</a>[1024];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#i_next\">i_next</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#state\">state</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It's possible to come here directly from a panic-assertion and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not have preempt disabled. Some functions called from here want</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * preempt to be disabled. No point enabling it later though...</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#console_verbose\">console_verbose</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bust_spinlocks\">bust_spinlocks</a>(1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_start\">va_start</a>(<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#fmt\">fmt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vsnprintf\">vsnprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, sizeof(<a class=\"id\" href=\"#buf\">buf</a>), <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a>(<a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a> \"Kernel panic - not syncing: %s\\n\",<a class=\"id\" href=\"#buf\">buf</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_BUGVERBOSE\">CONFIG_DEBUG_BUGVERBOSE</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dump_stack\">dump_stack</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we have crashed and we have a crash kernel loaded let it handle</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * everything else.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Do we want to call this before we try to display a message?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#crash_kexec\">crash_kexec</a>(<a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmsg_dump\">kmsg_dump</a>(<a class=\"id\" href=\"#KMSG_DUMP_PANIC\">KMSG_DUMP_PANIC</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note smp_send_stop is the usual smp shutdown function, which</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * unfortunately means it may not be hardened to work in a panic</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * situation.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_send_stop\">smp_send_stop</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_notifier_call_chain\">atomic_notifier_call_chain</a>(&amp;<a class=\"id\" href=\"#panic_notifier_list\">panic_notifier_list</a>, 0, <a class=\"id\" href=\"#buf\">buf</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bust_spinlocks\">bust_spinlocks</a>(0);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#panic_blink\">panic_blink</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic_blink\">panic_blink</a> = <a class=\"id\" href=\"#no_blink\">no_blink</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#panic_timeout\">panic_timeout</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Delay timeout seconds before rebooting the machine.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We can't use the \"normal\" timers since we just panicked.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a> \"Rebooting in %d seconds..\", <a class=\"id\" href=\"#panic_timeout\">panic_timeout</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#panic_timeout\">panic_timeout</a> * 1000; <a class=\"id\" href=\"#i\">i</a> += <a class=\"id\" href=\"#PANIC_TIMER_STEP\">PANIC_TIMER_STEP</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#touch_nmi_watchdog\">touch_nmi_watchdog</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> >= <a class=\"id\" href=\"#i_next\">i_next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> += <a class=\"id\" href=\"#panic_blink\">panic_blink</a>(<a class=\"id\" href=\"#state\">state</a> ^= 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_next\">i_next</a> = <a class=\"id\" href=\"#i\">i</a> + 3600 / <a class=\"id\" href=\"#PANIC_BLINK_SPD\">PANIC_BLINK_SPD</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mdelay\">mdelay</a>(<a class=\"id\" href=\"#PANIC_TIMER_STEP\">PANIC_TIMER_STEP</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This will not be a clean reboot, with everything</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * shutting down.  But if there is a chance of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * rebooting the system it will be rebooted.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#emergency_restart\">emergency_restart</a>();", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__sparc__\">__sparc__</a>", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>extern int <a class=\"id\" href=\"#stop_a_enabled\">stop_a_enabled</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Make sure the user can actually press Stop-A (L1-A) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stop_a_enabled\">stop_a_enabled</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a> \"Press Stop-A (L1-A) to return to the boot prom\\n\");", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_S390\">CONFIG_S390</a>)", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#caller\">caller</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#caller\">caller</a> = (unsigned long)<a class=\"id\" href=\"#__builtin_return_address\">__builtin_return_address</a>(0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disabled_wait\">disabled_wait</a>(<a class=\"id\" href=\"#caller\">caller</a>);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; ; <a class=\"id\" href=\"#i\">i</a> += <a class=\"id\" href=\"#PANIC_TIMER_STEP\">PANIC_TIMER_STEP</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#touch_softlockup_watchdog\">touch_softlockup_watchdog</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> >= <a class=\"id\" href=\"#i_next\">i_next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> += <a class=\"id\" href=\"#panic_blink\">panic_blink</a>(<a class=\"id\" href=\"#state\">state</a> ^= 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_next\">i_next</a> = <a class=\"id\" href=\"#i\">i</a> + 3600 / <a class=\"id\" href=\"#PANIC_BLINK_SPD\">PANIC_BLINK_SPD</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mdelay\">mdelay</a>(<a class=\"id\" href=\"#PANIC_TIMER_STEP\">PANIC_TIMER_STEP</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#panic\">panic</a>);", 
"", 
"", 
"struct <a class=\"id\" href=\"#tnt\">tnt</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><a class=\"id\" href=\"#bit\">bit</a>;", 
"<span class=\"ts\"/>char<span class=\"ts\"/><a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>char<span class=\"ts\"/><a class=\"id\" href=\"#false\">false</a>;", 
"};", 
"", 
"static const struct <a class=\"id\" href=\"#tnt\">tnt</a> <a class=\"id\" href=\"#tnts\">tnts</a>[] = {", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#TAINT_PROPRIETARY_MODULE\">TAINT_PROPRIETARY_MODULE</a>,<span class=\"ts\"/>'P', 'G' },", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#TAINT_FORCED_MODULE\">TAINT_FORCED_MODULE</a>,<span class=\"ts\"/><span class=\"ts\"/>'F', ' ' },", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#TAINT_UNSAFE_SMP\">TAINT_UNSAFE_SMP</a>,<span class=\"ts\"/><span class=\"ts\"/>'S', ' ' },", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#TAINT_FORCED_RMMOD\">TAINT_FORCED_RMMOD</a>,<span class=\"ts\"/><span class=\"ts\"/>'R', ' ' },", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#TAINT_MACHINE_CHECK\">TAINT_MACHINE_CHECK</a>,<span class=\"ts\"/><span class=\"ts\"/>'M', ' ' },", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#TAINT_BAD_PAGE\">TAINT_BAD_PAGE</a>,<span class=\"ts\"/><span class=\"ts\"/>'B', ' ' },", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#TAINT_USER\">TAINT_USER</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>'U', ' ' },", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#TAINT_DIE\">TAINT_DIE</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>'D', ' ' },", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#TAINT_OVERRIDDEN_ACPI_TABLE\">TAINT_OVERRIDDEN_ACPI_TABLE</a>,<span class=\"ts\"/>'A', ' ' },", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#TAINT_WARN\">TAINT_WARN</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>'W', ' ' },", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#TAINT_CRAP\">TAINT_CRAP</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>'C', ' ' },", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#TAINT_FIRMWARE_WORKAROUND\">TAINT_FIRMWARE_WORKAROUND</a>,<span class=\"ts\"/>'I', ' ' },", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>print_tainted - return a string to represent the kernel taint state.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  'P' - Proprietary module has been loaded.</span>", 
"<span class=\"comment\"> *  'F' - Module has been forcibly loaded.</span>", 
"<span class=\"comment\"> *  'S' - SMP with CPUs not designed for SMP.</span>", 
"<span class=\"comment\"> *  'R' - User forced a module unload.</span>", 
"<span class=\"comment\"> *  'M' - System experienced a machine check exception.</span>", 
"<span class=\"comment\"> *  'B' - System has hit bad_page.</span>", 
"<span class=\"comment\"> *  'U' - Userspace-defined naughtiness.</span>", 
"<span class=\"comment\"> *  'D' - Kernel has oopsed before</span>", 
"<span class=\"comment\"> *  'A' - ACPI table overridden.</span>", 
"<span class=\"comment\"> *  'W' - Taint on warning.</span>", 
"<span class=\"comment\"> *  'C' - modules from drivers/staging are loaded.</span>", 
"<span class=\"comment\"> *  'I' - Working around severe firmware bug.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The string is overwritten by the next call to print_tainted().</span>", 
"<span class=\"comment\"> */</span>", 
"const char *<a class=\"id\" href=\"#print_tainted\">print_tainted</a>(void)", 
"{", 
"<span class=\"ts\"/>static char <a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#tnts\">tnts</a>) + sizeof(\"Tainted: \") + 1];", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tainted_mask\">tainted_mask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#s\">s</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"Tainted: \");", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#tnts\">tnts</a>); <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#tnt\">tnt</a> *<a class=\"id\" href=\"#t\">t</a> = &amp;<a class=\"id\" href=\"#tnts\">tnts</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#s\">s</a>++ = <a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#bit\">bit</a>, &amp;<a class=\"id\" href=\"#tainted_mask\">tainted_mask</a>) ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#true\">true</a> : <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#s\">s</a> = 0;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, sizeof(<a class=\"id\" href=\"#buf\">buf</a>), \"Not tainted\");", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#buf\">buf</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#test_taint\">test_taint</a>(unsigned <a class=\"id\" href=\"#flag\">flag</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#flag\">flag</a>, &amp;<a class=\"id\" href=\"#tainted_mask\">tainted_mask</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#test_taint\">test_taint</a>);", 
"", 
"unsigned long <a class=\"id\" href=\"#get_taint\">get_taint</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tainted_mask\">tainted_mask</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#add_taint\">add_taint</a>(unsigned <a class=\"id\" href=\"#flag\">flag</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Can't trust the integrity of the kernel anymore.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We don't call directly debug_locks_off() because the issue</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is not necessarily serious enough to set oops_in_progress to 1</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Also we want to keep up lockdep for staging development and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * post-warning case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flag\">flag</a> != <a class=\"id\" href=\"#TAINT_CRAP\">TAINT_CRAP</a> && <a class=\"id\" href=\"#flag\">flag</a> != <a class=\"id\" href=\"#TAINT_WARN\">TAINT_WARN</a> && <a class=\"id\" href=\"#__debug_locks_off\">__debug_locks_off</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Disabling lock debugging due to kernel taint\\n\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#flag\">flag</a>, &amp;<a class=\"id\" href=\"#tainted_mask\">tainted_mask</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#add_taint\">add_taint</a>);", 
"", 
"static void <a class=\"id\" href=\"#spin_msec\">spin_msec</a>(int <a class=\"id\" href=\"#msecs\">msecs</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#msecs\">msecs</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#touch_nmi_watchdog\">touch_nmi_watchdog</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mdelay\">mdelay</a>(1);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * It just happens that oops_enter() and oops_exit() are identically</span>", 
"<span class=\"comment\"> * implemented...</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#do_oops_enter_exit\">do_oops_enter_exit</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>static int <a class=\"id\" href=\"#spin_counter\">spin_counter</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pause_on_oops\">pause_on_oops</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#pause_on_oops_lock\">pause_on_oops_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pause_on_oops_flag\">pause_on_oops_flag</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This CPU may now print the oops message */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pause_on_oops_flag\">pause_on_oops_flag</a> = 1;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We need to stall this CPU */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#spin_counter\">spin_counter</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This CPU gets to do the counting */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_counter\">spin_counter</a> = <a class=\"id\" href=\"#pause_on_oops\">pause_on_oops</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#pause_on_oops_lock\">pause_on_oops_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_msec\">spin_msec</a>(<a class=\"id\" href=\"#MSEC_PER_SEC\">MSEC_PER_SEC</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#pause_on_oops_lock\">pause_on_oops_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} while (--<a class=\"id\" href=\"#spin_counter\">spin_counter</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pause_on_oops_flag\">pause_on_oops_flag</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This CPU waits for a different one */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#spin_counter\">spin_counter</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#pause_on_oops_lock\">pause_on_oops_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_msec\">spin_msec</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#pause_on_oops_lock\">pause_on_oops_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pause_on_oops_lock\">pause_on_oops_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return true if the calling CPU is allowed to print oops-related info.</span>", 
"<span class=\"comment\"> * This is a bit racy..</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#oops_may_print\">oops_may_print</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pause_on_oops_flag\">pause_on_oops_flag</a> == 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called when the architecture enters its oops handler, before it prints</span>", 
"<span class=\"comment\"> * anything.  If this is the first CPU to oops, and it's oopsing the first</span>", 
"<span class=\"comment\"> * time then let it proceed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is all enabled by the pause_on_oops kernel boot option.  We do all</span>", 
"<span class=\"comment\"> * this to ensure that oopses don't scroll off the screen.  It has the</span>", 
"<span class=\"comment\"> * side-effect of preventing later-oopsing CPUs from mucking up the display,</span>", 
"<span class=\"comment\"> * too.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It turns out that the CPU which is allowed to print ends up pausing for</span>", 
"<span class=\"comment\"> * the right duration, whereas all the other CPUs pause for twice as long:</span>", 
"<span class=\"comment\"> * once in oops_enter(), once in oops_exit().</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#oops_enter\">oops_enter</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tracing_off\">tracing_off</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/* can't trust the integrity of the kernel anymore: */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_locks_off\">debug_locks_off</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_oops_enter_exit\">do_oops_enter_exit</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * 64-bit random ID for oopses:</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#oops_id\">oops_id</a>;", 
"", 
"static int <a class=\"id\" href=\"#init_oops_id\">init_oops_id</a>(void)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#oops_id\">oops_id</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_random_bytes\">get_random_bytes</a>(&amp;<a class=\"id\" href=\"#oops_id\">oops_id</a>, sizeof(<a class=\"id\" href=\"#oops_id\">oops_id</a>));", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#oops_id\">oops_id</a>++;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#late_initcall\">late_initcall</a>(<a class=\"id\" href=\"#init_oops_id\">init_oops_id</a>);", 
"", 
"void <a class=\"id\" href=\"#print_oops_end_marker\">print_oops_end_marker</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_oops_id\">init_oops_id</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"---[ end trace %016llx ]---\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>(unsigned long long)<a class=\"id\" href=\"#oops_id\">oops_id</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called when the architecture exits its oops handler, after printing</span>", 
"<span class=\"comment\"> * everything.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#oops_exit\">oops_exit</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_oops_enter_exit\">do_oops_enter_exit</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#print_oops_end_marker\">print_oops_end_marker</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmsg_dump\">kmsg_dump</a>(<a class=\"id\" href=\"#KMSG_DUMP_OOPS\">KMSG_DUMP_OOPS</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#WANT_WARN_ON_SLOWPATH\">WANT_WARN_ON_SLOWPATH</a>", 
"struct <a class=\"id\" href=\"#slowpath_args\">slowpath_args</a> {", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#fmt\">fmt</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>;", 
"};", 
"", 
];
xr_frag_insert('l/17/e0093438d93b1179b7506ccd8222aad3717163.xr', __xr_tmp);
