var __xr_tmp = [
"<span class=\"comment\"><span class=\"ts\"/> * in loading, we need to pay our respects to the hashtable gods.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock\">write_lock</a>(&amp;<a class=\"id\" href=\"#css_set_lock\">css_set_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#link\">link</a>, &amp;<a class=\"id\" href=\"#dummytop\">dummytop</a>-><a class=\"id\" href=\"#css_sets\">css_sets</a>, <a class=\"id\" href=\"#cgrp_link_list\">cgrp_link_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#css_set\">css_set</a> *<a class=\"id\" href=\"#cg\">cg</a> = <a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#cg\">cg</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_del\">hlist_del</a>(&amp;<a class=\"id\" href=\"#cg\">cg</a>-><a class=\"id\" href=\"#hlist\">hlist</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#cg\">cg</a>-><a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#subsys_id\">subsys_id</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cg\">cg</a>-><a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#subsys_id\">subsys_id</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hhead\">hhead</a> = <a class=\"id\" href=\"#css_set_hash\">css_set_hash</a>(<a class=\"id\" href=\"#cg\">cg</a>-><a class=\"id\" href=\"#subsys\">subsys</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_add_head\">hlist_add_head</a>(&amp;<a class=\"id\" href=\"#cg\">cg</a>-><a class=\"id\" href=\"#hlist\">hlist</a>, <a class=\"id\" href=\"#hhead\">hhead</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#css_set_lock\">css_set_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * remove subsystem's css from the dummytop and free it - need to free</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * before marking as null because ss-&gt;destroy needs the cgrp-&gt;subsys</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pointer to find their state. note that this also takes care of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * freeing the css_id.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#destroy\">destroy</a>(<a class=\"id\" href=\"#ss\">ss</a>, <a class=\"id\" href=\"#dummytop\">dummytop</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dummytop\">dummytop</a>-><a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#subsys_id\">subsys_id</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#cgroup_unload_subsys\">cgroup_unload_subsys</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cgroup_init_early - cgroup initialization at system boot</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Initialize cgroups at system boot, and initialize any</span>", 
"<span class=\"comment\"> * subsystems that request early init.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#cgroup_init_early\">cgroup_init_early</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#init_css_set\">init_css_set</a>.<a class=\"id\" href=\"#refcount\">refcount</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#init_css_set\">init_css_set</a>.<a class=\"id\" href=\"#cg_links\">cg_links</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#init_css_set\">init_css_set</a>.<a class=\"id\" href=\"#tasks\">tasks</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_HLIST_NODE\">INIT_HLIST_NODE</a>(&amp;<a class=\"id\" href=\"#init_css_set\">init_css_set</a>.<a class=\"id\" href=\"#hlist\">hlist</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#css_set_count\">css_set_count</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_cgroup_root\">init_cgroup_root</a>(&amp;<a class=\"id\" href=\"#rootnode\">rootnode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#root_count\">root_count</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_task\">init_task</a>.<a class=\"id\" href=\"#cgroups\">cgroups</a> = &amp;<a class=\"id\" href=\"#init_css_set\">init_css_set</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_css_set_link\">init_css_set_link</a>.<a class=\"id\" href=\"#cg\">cg</a> = &amp;<a class=\"id\" href=\"#init_css_set\">init_css_set</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_css_set_link\">init_css_set_link</a>.<a class=\"id\" href=\"#cgrp\">cgrp</a> = <a class=\"id\" href=\"#dummytop\">dummytop</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#init_css_set_link\">init_css_set_link</a>.<a class=\"id\" href=\"#cgrp_link_list\">cgrp_link_list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#rootnode\">rootnode</a>.<a class=\"id\" href=\"#top_cgroup\">top_cgroup</a>.<a class=\"id\" href=\"#css_sets\">css_sets</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#init_css_set_link\">init_css_set_link</a>.<a class=\"id\" href=\"#cg_link_list\">cg_link_list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#init_css_set\">init_css_set</a>.<a class=\"id\" href=\"#cg_links\">cg_links</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#CSS_SET_TABLE_SIZE\">CSS_SET_TABLE_SIZE</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_HLIST_HEAD\">INIT_HLIST_HEAD</a>(&amp;<a class=\"id\" href=\"#css_set_table\">css_set_table</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* at bootup time, we don't worry about modular subsystems */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#CGROUP_BUILTIN_SUBSYS_COUNT\">CGROUP_BUILTIN_SUBSYS_COUNT</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a> = <a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#name\">name</a>) &gt; <a class=\"id\" href=\"#MAX_CGROUP_TYPE_NAMELEN\">MAX_CGROUP_TYPE_NAMELEN</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#create\">create</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#destroy\">destroy</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#subsys_id\">subsys_id</a> != <a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"cgroup: Subsys %s id == %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#subsys_id\">subsys_id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#early_init\">early_init</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cgroup_init_subsys\">cgroup_init_subsys</a>(<a class=\"id\" href=\"#ss\">ss</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cgroup_init - cgroup initialization</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Register cgroup filesystem and /proc file, and initialize</span>", 
"<span class=\"comment\"> * any subsystems that didn't request early init.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#cgroup_init\">cgroup_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#hhead\">hhead</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#bdi_init\">bdi_init</a>(&amp;<a class=\"id\" href=\"#cgroup_backing_dev_info\">cgroup_backing_dev_info</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* at bootup time, we don't worry about modular subsystems */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#CGROUP_BUILTIN_SUBSYS_COUNT\">CGROUP_BUILTIN_SUBSYS_COUNT</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a> = <a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#early_init\">early_init</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cgroup_init_subsys\">cgroup_init_subsys</a>(<a class=\"id\" href=\"#ss\">ss</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#use_id\">use_id</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cgroup_init_idr\">cgroup_init_idr</a>(<a class=\"id\" href=\"#ss\">ss</a>, <a class=\"id\" href=\"#init_css_set\">init_css_set</a>.<a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#subsys_id\">subsys_id</a>]);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Add init_css_set to the hash table */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hhead\">hhead</a> = <a class=\"id\" href=\"#css_set_hash\">css_set_hash</a>(<a class=\"id\" href=\"#init_css_set\">init_css_set</a>.<a class=\"id\" href=\"#subsys\">subsys</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_add_head\">hlist_add_head</a>(&amp;<a class=\"id\" href=\"#init_css_set\">init_css_set</a>.<a class=\"id\" href=\"#hlist\">hlist</a>, <a class=\"id\" href=\"#hhead\">hhead</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#init_root_id\">init_root_id</a>(&amp;<a class=\"id\" href=\"#rootnode\">rootnode</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cgroup_kobj\">cgroup_kobj</a> = <a class=\"id\" href=\"#kobject_create_and_add\">kobject_create_and_add</a>(\"cgroup\", <a class=\"id\" href=\"#fs_kobj\">fs_kobj</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cgroup_kobj\">cgroup_kobj</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#register_filesystem\">register_filesystem</a>(&amp;<a class=\"id\" href=\"#cgroup_fs_type\">cgroup_fs_type</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(<a class=\"id\" href=\"#cgroup_kobj\">cgroup_kobj</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#proc_create\">proc_create</a>(\"cgroups\", 0, <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#proc_cgroupstats_operations\">proc_cgroupstats_operations</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdi_destroy\">bdi_destroy</a>(&amp;<a class=\"id\" href=\"#cgroup_backing_dev_info\">cgroup_backing_dev_info</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * proc_cgroup_show()</span>", 
"<span class=\"comment\"> *  - Print task's cgroup paths into seq_file, one line for each hierarchy</span>", 
"<span class=\"comment\"> *  - Used for /proc/&lt;pid&gt;/cgroup.</span>", 
"<span class=\"comment\"> *  - No need to task_lock(tsk) on this tsk-&gt;cgroup reference, as it</span>", 
"<span class=\"comment\"> *    doesn't really matter if tsk-&gt;cgroup changes after we read it,</span>", 
"<span class=\"comment\"> *    and we take cgroup_mutex, keeping cgroup_attach_task() from changing it</span>", 
"<span class=\"comment\"> *    anyway.  No need to check that tsk-&gt;cgroup != NULL, thanks to</span>", 
"<span class=\"comment\"> *    the_top_cgroup_hack in cgroup_exit(), which sets an exiting tasks</span>", 
"<span class=\"comment\"> *    cgroup to top_cgroup.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* TODO: Use a proper seq_file iterator */</span>", 
"static int <a class=\"id\" href=\"#proc_cgroup_show\">proc_cgroup_show</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#buf\">buf</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroupfs_root\">cgroupfs_root</a> *<a class=\"id\" href=\"#root\">root</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buf\">buf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#ESRCH\">ESRCH</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#m\">m</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#get_pid_task\">get_pid_task</a>(<a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#PIDTYPE_PID\">PIDTYPE_PID</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_active_root\">for_each_active_root</a>(<a class=\"id\" href=\"#root\">root</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup\">cgroup</a> *<a class=\"id\" href=\"#cgrp\">cgrp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"%d:\", <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#hierarchy_id\">hierarchy_id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_subsys\">for_each_subsys</a>(<a class=\"id\" href=\"#root\">root</a>, <a class=\"id\" href=\"#ss\">ss</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"%s%s\", <a class=\"id\" href=\"#count\">count</a>++ ? \",\" : \"\", <a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#name\">name</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"%sname=%s\", <a class=\"id\" href=\"#count\">count</a> ? \",\" : \"\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_putc\">seq_putc</a>(<a class=\"id\" href=\"#m\">m</a>, ':');", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cgrp\">cgrp</a> = <a class=\"id\" href=\"#task_cgroup_from_root\">task_cgroup_from_root</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#root\">root</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#cgroup_path\">cgroup_path</a>(<a class=\"id\" href=\"#cgrp\">cgrp</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_puts\">seq_puts</a>(<a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_putc\">seq_putc</a>(<a class=\"id\" href=\"#m\">m</a>, '\\n');", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_task_struct\">put_task_struct</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<a class=\"id\" href=\"#out_free\">out_free</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#buf\">buf</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#cgroup_open\">cgroup_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pid\">pid</a> *<a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#PROC_I\">PROC_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#single_open\">single_open</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#proc_cgroup_show\">proc_cgroup_show</a>, <a class=\"id\" href=\"#pid\">pid</a>);", 
"}", 
"", 
"const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#proc_cgroup_operations\">proc_cgroup_operations</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#cgroup_open\">cgroup_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_read\">seq_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#seq_lseek\">seq_lseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a><span class=\"ts\"/>= <a class=\"id\" href=\"#single_release\">single_release</a>,", 
"};", 
"", 
"<span class=\"comment\">/* Display information about each subsystem and each hierarchy */</span>", 
"static int <a class=\"id\" href=\"#proc_cgroupstats_show\">proc_cgroupstats_show</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_puts\">seq_puts</a>(<a class=\"id\" href=\"#m\">m</a>, \"#subsys_name\\thierarchy\\tnum_cgroups\\tenabled\\n\");", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ideally we don't want subsystems moving around while we do this.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cgroup_mutex is also necessary to guarantee an atomic snapshot of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * subsys/hierarchy state.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#CGROUP_SUBSYS_COUNT\">CGROUP_SUBSYS_COUNT</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cgroup_subsys\">cgroup_subsys</a> *<a class=\"id\" href=\"#ss\">ss</a> = <a class=\"id\" href=\"#subsys\">subsys</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ss\">ss</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#m\">m</a>, \"%s\\t%d\\t%d\\t%d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#hierarchy_id\">hierarchy_id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#root\">root</a>-><a class=\"id\" href=\"#number_of_cgroups\">number_of_cgroups</a>, !<a class=\"id\" href=\"#ss\">ss</a>-><a class=\"id\" href=\"#disabled\">disabled</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#cgroup_mutex\">cgroup_mutex</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#cgroupstats_open\">cgroupstats_open</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#single_open\">single_open</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#proc_cgroupstats_show\">proc_cgroupstats_show</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#proc_cgroupstats_operations\">proc_cgroupstats_operations</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a> = <a class=\"id\" href=\"#cgroupstats_open\">cgroupstats_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a> = <a class=\"id\" href=\"#seq_read\">seq_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#llseek\">llseek</a> = <a class=\"id\" href=\"#seq_lseek\">seq_lseek</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#release\">release</a> = <a class=\"id\" href=\"#single_release\">single_release</a>,", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * cgroup_fork - attach newly forked task to its parents cgroup.</span>", 
"<span class=\"comment\"> * @child: pointer to task_struct of forking parent process.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description: A task inherits its parent's cgroup at fork().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A pointer to the shared css_set was automatically copied in</span>", 
"<span class=\"comment\"> * fork.c by dup_task_struct().  However, we ignore that copy, since</span>", 
"<span class=\"comment\"> * it was not made under the protection of RCU or cgroup_mutex, so</span>", 
"<span class=\"comment\"> * might no longer be a valid cgroup pointer.  cgroup_attach_task() might</span>", 
"<span class=\"comment\"> * have already changed current-&gt;cgroups, allowing the previously</span>", 
"<span class=\"comment\"> * referenced cgroup group to be removed and freed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * At the point that cgroup_fork() is called, 'current' is the parent</span>", 
"<span class=\"comment\"> * task, and the passed argument 'child' points to the child task.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#cgroup_fork\">cgroup_fork</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#child\">child</a>)", 
"{", 
];
xr_frag_insert('l/17/f58d472aa46998b47be78042c7409c6c2fd5c3.xr', __xr_tmp);
