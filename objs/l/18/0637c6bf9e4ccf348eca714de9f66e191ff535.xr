var __xr_tmp = [
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>An IDE command has timed out before the expected drive return</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>occurred. At this point we attempt to clean up the current</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>mess. If the current handler includes an expiry handler then</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>we invoke the expiry handler, and providing it is happy the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>work is done. If that fails we apply generic recovery rules</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>invoking the handler and checking the drive DMA status. We</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>have an excessively incestuous relationship with the DMA</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>logic that wants cleaning up.</span>", 
"<span class=\"comment\"> */</span>", 
" ", 
"void <a class=\"id\" href=\"#ide_timer_expiry\">ide_timer_expiry</a> (unsigned long <a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a><span class=\"ts\"/>*<a class=\"id\" href=\"#hwif\">hwif</a> = (<a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *)<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_drive_t\">ide_drive_t</a><span class=\"ts\"/>*<a class=\"id\" href=\"#uninitialized_var\">uninitialized_var</a>(<a class=\"id\" href=\"#drive\">drive</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ide_handler_t\">ide_handler_t</a><span class=\"ts\"/>*<a class=\"id\" href=\"#handler\">handler</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait\">wait</a> = -1;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#plug_device\">plug_device</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a><span class=\"ts\"/>*<a class=\"id\" href=\"#uninitialized_var\">uninitialized_var</a>(<a class=\"id\" href=\"#rq_in_flight\">rq_in_flight</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handler\">handler</a> = <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#handler\">handler</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#handler\">handler</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#req_gen\">req_gen</a> != <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#req_gen_timer\">req_gen_timer</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Either a marginal timeout occurred</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * (got the interrupt just as timer expired),</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * or we were \"sleeping\" to give other devices a chance.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Either way, we don't really want to complain about anything.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ide_expiry_t\">ide_expiry_t</a> *<a class=\"id\" href=\"#expiry\">expiry</a> = <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#expiry\">expiry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ide_startstop_t\">ide_startstop_t</a> <a class=\"id\" href=\"#startstop\">startstop</a> = <a class=\"id\" href=\"#ide_stopped\">ide_stopped</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a> = <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#cur_dev\">cur_dev</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#expiry\">expiry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait\">wait</a> = <a class=\"id\" href=\"#expiry\">expiry</a>(<a class=\"id\" href=\"#drive\">drive</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#wait\">wait</a> &gt; 0) { <span class=\"comment\">/* continue */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* reset timer */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#expires\">expires</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#wait\">wait</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#req_gen_timer\">req_gen_timer</a> = <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#req_gen\">req_gen</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_timer\">add_timer</a>(&amp;<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#handler\">handler</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#expiry\">expiry</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We need to simulate a real interrupt when invoking</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the handler() function, which means we need to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * globally mask the specific IRQ:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* disable_irq_nosync ?? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disable_irq\">disable_irq</a>(<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#irq\">irq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* local CPU only, as if we were handling an interrupt */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#polling\">polling</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#startstop\">startstop</a> = <a class=\"id\" href=\"#handler\">handler</a>(<a class=\"id\" href=\"#drive\">drive</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#drive_is_ready\">drive_is_ready</a>(<a class=\"id\" href=\"#drive\">drive</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#waiting_for_dma\">waiting_for_dma</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#dma_ops\">dma_ops</a>-><a class=\"id\" href=\"#dma_lost_irq\">dma_lost_irq</a>(<a class=\"id\" href=\"#drive\">drive</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#port_ops\">port_ops</a> && <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#port_ops\">port_ops</a>-><a class=\"id\" href=\"#clear_irq\">clear_irq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#port_ops\">port_ops</a>-><a class=\"id\" href=\"#clear_irq\">clear_irq</a>(<a class=\"id\" href=\"#drive\">drive</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"%s: lost interrupt\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#startstop\">startstop</a> = <a class=\"id\" href=\"#handler\">handler</a>(<a class=\"id\" href=\"#drive\">drive</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#drive\">drive</a>-><a class=\"id\" href=\"#waiting_for_dma\">waiting_for_dma</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#startstop\">startstop</a> = <a class=\"id\" href=\"#ide_dma_timeout_retry\">ide_dma_timeout_retry</a>(<a class=\"id\" href=\"#drive\">drive</a>, <a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#startstop\">startstop</a> = <a class=\"id\" href=\"#ide_error\">ide_error</a>(<a class=\"id\" href=\"#drive\">drive</a>, \"irq timeout\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#tp_ops\">tp_ops</a>-><a class=\"id\" href=\"#read_status\">read_status</a>(<a class=\"id\" href=\"#hwif\">hwif</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enable_irq\">enable_irq</a>(<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#irq\">irq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#startstop\">startstop</a> == <a class=\"id\" href=\"#ide_stopped\">ide_stopped</a> && <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#polling\">polling</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq_in_flight\">rq_in_flight</a> = <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#rq\">rq</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ide_unlock_port\">ide_unlock_port</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#plug_device\">plug_device</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#plug_device\">plug_device</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ide_unlock_host\">ide_unlock_host</a>(<a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#host\">host</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ide_requeue_and_plug\">ide_requeue_and_plug</a>(<a class=\"id\" href=\"#drive\">drive</a>, <a class=\"id\" href=\"#rq_in_flight\">rq_in_flight</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>unexpected_intr<span class=\"ts\"/><span class=\"ts\"/>-<span class=\"ts\"/>handle an unexpected IDE interrupt</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@irq: interrupt line</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@hwif: port being processed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>There's nothing really useful we can do with an unexpected interrupt,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>other than reading the status register (to clear it), and logging it.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>There should be no way that an irq can happen before we're ready for it,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>so we needn't worry much about losing an \"important\" interrupt here.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>On laptops (and \"green\" PCs), an unexpected interrupt occurs whenever</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the drive enters \"idle\", \"standby\", or \"sleep\" mode, so if the status</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>looks \"good\", we just ignore the interrupt completely.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This routine assumes __cli() is in effect when called.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If an unexpected interrupt happens on irq15 while we are handling irq14</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and if the two interfaces are \"serialized\" (CMD640), then it looks like</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>we could screw up by interfering with a new request being set up for </span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>irq15.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>In reality, this is a non-issue.  The new command is not sent unless </span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the drive is ready to accept one, in which case we know the drive is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>not trying to interrupt us.  And ide_set_handler() is always invoked</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>before completing the issuance of any new drive command, so we will not</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>be accidentally invoked as a result of any valid command completion</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>interrupt.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#unexpected_intr\">unexpected_intr</a>(int <a class=\"id\" href=\"#irq\">irq</a>, <a class=\"id\" href=\"#ide_hwif_t\">ide_hwif_t</a> *<a class=\"id\" href=\"#hwif\">hwif</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#stat\">stat</a> = <a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#tp_ops\">tp_ops</a>-><a class=\"id\" href=\"#read_status\">read_status</a>(<a class=\"id\" href=\"#hwif\">hwif</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#OK_STAT\">OK_STAT</a>(<a class=\"id\" href=\"#stat\">stat</a>, <a class=\"id\" href=\"#ATA_DRDY\">ATA_DRDY</a>, <a class=\"id\" href=\"#BAD_STAT\">BAD_STAT</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Try to not flood the console with msgs */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>static unsigned long <a class=\"id\" href=\"#last_msgtime\">last_msgtime</a>, <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#count\">count</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#time_after\">time_after</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#last_msgtime\">last_msgtime</a> + <a class=\"id\" href=\"#HZ\">HZ</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_msgtime\">last_msgtime</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: unexpected interrupt, \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"status=0x%02x, count=%ld\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwif\">hwif</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#stat\">stat</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ide_intr<span class=\"ts\"/>-<span class=\"ts\"/>default IDE interrupt handler</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@irq: interrupt number</span>", 
];
xr_frag_insert('l/18/0637c6bf9e4ccf348eca714de9f66e191ff535.xr', __xr_tmp);
