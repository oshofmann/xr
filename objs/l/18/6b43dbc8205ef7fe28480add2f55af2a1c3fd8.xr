var __xr_tmp = [
"<span class=\"ts\"/>for(<a class=\"id\" href=\"#model\">model</a> = <a class=\"id\" href=\"#models\">models</a>; <a class=\"id\" href=\"#model\">model</a>-><a class=\"id\" href=\"#cpu_id\">cpu_id</a> != <a class=\"id\" href=\"#NULL\">NULL</a>; <a class=\"id\" href=\"#model\">model</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#centrino_verify_cpu_id\">centrino_verify_cpu_id</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#model\">model</a>-><a class=\"id\" href=\"#cpu_id\">cpu_id</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#model\">model</a>-><a class=\"id\" href=\"#model_name\">model_name</a> == <a class=\"id\" href=\"#NULL\">NULL</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#cpu\">cpu</a>-><a class=\"id\" href=\"#x86_model_id\">x86_model_id</a>, <a class=\"id\" href=\"#model\">model</a>-><a class=\"id\" href=\"#model_name\">model_name</a>) == 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#model\">model</a>-><a class=\"id\" href=\"#cpu_id\">cpu_id</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* No match at all */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"no support for CPU model \\\"%s\\\": \"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"send /proc/cpuinfo to \" <a class=\"id\" href=\"#MAINTAINER\">MAINTAINER</a> \"\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#cpu\">cpu</a>-><a class=\"id\" href=\"#x86_model_id\">x86_model_id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#model\">model</a>-><a class=\"id\" href=\"#op_points\">op_points</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Matched a non-match */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"no table support for CPU model \\\"%s\\\"\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#cpu\">cpu</a>-><a class=\"id\" href=\"#x86_model_id\">x86_model_id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"try using the acpi-cpufreq driver\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#centrino_model\">centrino_model</a>, <a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#cpu\">cpu</a>) = <a class=\"id\" href=\"#model\">model</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"found \\\"%s\\\": max frequency: %dkHz\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#model\">model</a>-><a class=\"id\" href=\"#model_name\">model_name</a>, <a class=\"id\" href=\"#model\">model</a>-><a class=\"id\" href=\"#max_freq\">max_freq</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#centrino_cpu_init_table\">centrino_cpu_init_table</a>(struct <a class=\"id\" href=\"#cpufreq_policy\">cpufreq_policy</a> *<a class=\"id\" href=\"#policy\">policy</a>)", 
"{", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_X86_SPEEDSTEP_CENTRINO_TABLE */</span>", 
"", 
"static int <a class=\"id\" href=\"#centrino_verify_cpu_id\">centrino_verify_cpu_id</a>(const struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const struct <a class=\"id\" href=\"#cpu_id\">cpu_id</a> *<a class=\"id\" href=\"#x\">x</a>)", 
"{", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> == <a class=\"id\" href=\"#x\">x</a>-><a class=\"id\" href=\"#x86\">x86</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> == <a class=\"id\" href=\"#x\">x</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a>) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_mask\">x86_mask</a> == <a class=\"id\" href=\"#x\">x</a>-><a class=\"id\" href=\"#x86_mask\">x86_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* To be called only after centrino_model is initialized */</span>", 
"static unsigned <a class=\"id\" href=\"#extract_clock\">extract_clock</a>(unsigned <a class=\"id\" href=\"#msr\">msr</a>, unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>, int <a class=\"id\" href=\"#failsafe\">failsafe</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Extract clock in kHz from PERF_CTL value</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for centrino, as some DSDTs are buggy.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Ideally, this can be done using the acpi_data structure.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#centrino_cpu\">centrino_cpu</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) == &amp;<a class=\"id\" href=\"#cpu_ids\">cpu_ids</a>[<a class=\"id\" href=\"#CPU_BANIAS\">CPU_BANIAS</a>]) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#centrino_cpu\">centrino_cpu</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) == &amp;<a class=\"id\" href=\"#cpu_ids\">cpu_ids</a>[<a class=\"id\" href=\"#CPU_DOTHAN_A1\">CPU_DOTHAN_A1</a>]) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#centrino_cpu\">centrino_cpu</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) == &amp;<a class=\"id\" href=\"#cpu_ids\">cpu_ids</a>[<a class=\"id\" href=\"#CPU_DOTHAN_B0\">CPU_DOTHAN_B0</a>])) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msr\">msr</a> = (<a class=\"id\" href=\"#msr\">msr</a> >> 8) &amp; 0xff;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#msr\">msr</a> * 100000;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if ((!<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#centrino_model\">centrino_model</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)) ||", 
"<span class=\"ts\"/>    (!<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#centrino_model\">centrino_model</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)-><a class=\"id\" href=\"#op_points\">op_points</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#msr\">msr</a> &= 0xffff;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#centrino_model\">centrino_model</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)-><a class=\"id\" href=\"#op_points\">op_points</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#frequency\">frequency</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>!= <a class=\"id\" href=\"#CPUFREQ_TABLE_END\">CPUFREQ_TABLE_END</a>;", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#msr\">msr</a> == <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#centrino_model\">centrino_model</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)-><a class=\"id\" href=\"#op_points\">op_points</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#index\">index</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#centrino_model\">centrino_model</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)->", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#op_points\">op_points</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#frequency\">frequency</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#failsafe\">failsafe</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#centrino_model\">centrino_model</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)-><a class=\"id\" href=\"#op_points\">op_points</a>[<a class=\"id\" href=\"#i\">i</a>-1].<a class=\"id\" href=\"#frequency\">frequency</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Return the current CPU frequency in kHz */</span>", 
"static unsigned int <a class=\"id\" href=\"#get_cur_freq\">get_cur_freq</a>(unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#h\">h</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#clock_freq\">clock_freq</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdmsr_on_cpu\">rdmsr_on_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#MSR_IA32_PERF_STATUS\">MSR_IA32_PERF_STATUS</a>, &amp;<a class=\"id\" href=\"#l\">l</a>, &amp;<a class=\"id\" href=\"#h\">h</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clock_freq\">clock_freq</a> = <a class=\"id\" href=\"#extract_clock\">extract_clock</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#cpu\">cpu</a>, 0);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#clock_freq\">clock_freq</a> == 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * On some CPUs, we can see transient MSR values (which are</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * not present in _PSS), while CPU is doing some automatic</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * P-state transition (like TM2). Get the last freq set </span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * in PERF_CTL.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rdmsr_on_cpu\">rdmsr_on_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#MSR_IA32_PERF_CTL\">MSR_IA32_PERF_CTL</a>, &amp;<a class=\"id\" href=\"#l\">l</a>, &amp;<a class=\"id\" href=\"#h\">h</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clock_freq\">clock_freq</a> = <a class=\"id\" href=\"#extract_clock\">extract_clock</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#cpu\">cpu</a>, 1);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#clock_freq\">clock_freq</a>;", 
"}", 
"", 
"", 
"static int <a class=\"id\" href=\"#centrino_cpu_init\">centrino_cpu_init</a>(struct <a class=\"id\" href=\"#cpufreq_policy\">cpufreq_policy</a> *<a class=\"id\" href=\"#policy\">policy</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#cpu\">cpu</a> = &amp;<a class=\"id\" href=\"#cpu_data\">cpu_data</a>(<a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#freq\">freq</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#h\">h</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Only Intel makes Enhanced Speedstep-capable CPUs */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a>-><a class=\"id\" href=\"#x86_vendor\">x86_vendor</a> != <a class=\"id\" href=\"#X86_VENDOR_INTEL\">X86_VENDOR_INTEL</a> ||", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#cpu_has\">cpu_has</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#X86_FEATURE_EST\">X86_FEATURE_EST</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has\">cpu_has</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#X86_FEATURE_CONSTANT_TSC\">X86_FEATURE_CONSTANT_TSC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#centrino_driver\">centrino_driver</a>.<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#CPUFREQ_CONST_LOOPS\">CPUFREQ_CONST_LOOPS</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#policy\">policy</a>-><a class=\"id\" href=\"#cpu\">cpu</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#N_IDS\">N_IDS</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#centrino_verify_cpu_id\">centrino_verify_cpu_id</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, &amp;<a class=\"id\" href=\"#cpu_ids\">cpu_ids</a>[<a class=\"id\" href=\"#i\">i</a>]))", 
];
xr_frag_insert('l/18/6b43dbc8205ef7fe28480add2f55af2a1c3fd8.xr', __xr_tmp);
