var __xr_tmp = [
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Module Name: evgpe - General Purpose Event handling and dispatch</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *****************************************************************************/</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (C) 2000 - 2010, Intel Corp.</span>", 
"<span class=\"comment\"> * All rights reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Redistribution and use in source and binary forms, with or without</span>", 
"<span class=\"comment\"> * modification, are permitted provided that the following conditions</span>", 
"<span class=\"comment\"> * are met:</span>", 
"<span class=\"comment\"> * 1. Redistributions of source code must retain the above copyright</span>", 
"<span class=\"comment\"> *    notice, this list of conditions, and the following disclaimer,</span>", 
"<span class=\"comment\"> *    without modification.</span>", 
"<span class=\"comment\"> * 2. Redistributions in binary form must reproduce at minimum a disclaimer</span>", 
"<span class=\"comment\"> *    substantially similar to the \"NO WARRANTY\" disclaimer below</span>", 
"<span class=\"comment\"> *    (\"Disclaimer\") and any redistribution must be conditioned upon</span>", 
"<span class=\"comment\"> *    including a substantially similar Disclaimer requirement for further</span>", 
"<span class=\"comment\"> *    binary redistribution.</span>", 
"<span class=\"comment\"> * 3. Neither the names of the above-listed copyright holders nor the names</span>", 
"<span class=\"comment\"> *    of any contributors may be used to endorse or promote products derived</span>", 
"<span class=\"comment\"> *    from this software without specific prior written permission.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Alternatively, this software may be distributed under the terms of the</span>", 
"<span class=\"comment\"> * GNU General Public License (\"GPL\") version 2 as published by the Free</span>", 
"<span class=\"comment\"> * Software Foundation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NO WARRANTY</span>", 
"<span class=\"comment\"> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span>", 
"<span class=\"comment\"> * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span>", 
"<span class=\"comment\"> * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR</span>", 
"<span class=\"comment\"> * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span>", 
"<span class=\"comment\"> * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span>", 
"<span class=\"comment\"> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS</span>", 
"<span class=\"comment\"> * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</span>", 
"<span class=\"comment\"> * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,</span>", 
"<span class=\"comment\"> * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING</span>", 
"<span class=\"comment\"> * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE</span>", 
"<span class=\"comment\"> * POSSIBILITY OF SUCH DAMAGES.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#acpi\">acpi</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"accommon.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acevents.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acnamesp.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_COMPONENT\">_COMPONENT</a>          <a class=\"id\" href=\"#ACPI_EVENTS\">ACPI_EVENTS</a>", 
"<a class=\"id\" href=\"#ACPI_MODULE_NAME\">ACPI_MODULE_NAME</a>(\"evgpe\")", 
"", 
"<span class=\"comment\">/* Local prototypes */</span>", 
"static void <a class=\"id\" href=\"#ACPI_SYSTEM_XFACE\">ACPI_SYSTEM_XFACE</a> <a class=\"id\" href=\"#acpi_ev_asynch_execute_gpe_method\">acpi_ev_asynch_execute_gpe_method</a>(void *<a class=\"id\" href=\"#context\">context</a>);", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ev_update_gpe_enable_mask</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  gpe_event_info          - GPE to update</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Updates GPE register enable mask based upon whether there are</span>", 
"<span class=\"comment\"> *              runtime references to this GPE</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ev_update_gpe_enable_mask\">acpi_ev_update_gpe_enable_mask</a>(struct <a class=\"id\" href=\"#acpi_gpe_event_info\">acpi_gpe_event_info</a> *<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_gpe_register_info\">acpi_gpe_register_info</a> *<a class=\"id\" href=\"#gpe_register_info\">gpe_register_info</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#register_bit\">register_bit</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ev_update_gpe_enable_mask\">ev_update_gpe_enable_mask</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gpe_register_info\">gpe_register_info</a> = <a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>-><a class=\"id\" href=\"#register_info\">register_info</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#gpe_register_info\">gpe_register_info</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_NOT_EXIST\">AE_NOT_EXIST</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_bit\">register_bit</a> = <a class=\"id\" href=\"#acpi_hw_get_gpe_register_bit\">acpi_hw_get_gpe_register_bit</a>(<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpe_register_info\">gpe_register_info</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Clear the run bit up front */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_CLEAR_BIT\">ACPI_CLEAR_BIT</a>(<a class=\"id\" href=\"#gpe_register_info\">gpe_register_info</a>-><a class=\"id\" href=\"#enable_for_run\">enable_for_run</a>, <a class=\"id\" href=\"#register_bit\">register_bit</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set the mask bit only if there are references to this GPE */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>-><a class=\"id\" href=\"#runtime_count\">runtime_count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_SET_BIT\">ACPI_SET_BIT</a>(<a class=\"id\" href=\"#gpe_register_info\">gpe_register_info</a>-><a class=\"id\" href=\"#enable_for_run\">enable_for_run</a>, (<a class=\"id\" href=\"#u8\">u8</a>)<a class=\"id\" href=\"#register_bit\">register_bit</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ev_enable_gpe</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  gpe_event_info  - GPE to enable</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Clear the given GPE from stale events and enable it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ev_enable_gpe\">acpi_ev_enable_gpe</a>(struct <a class=\"id\" href=\"#acpi_gpe_event_info\">acpi_gpe_event_info</a> *<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ev_enable_gpe\">ev_enable_gpe</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We will only allow a GPE to be enabled if it has either an</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * associated method (_Lxx/_Exx) or a handler. Otherwise, the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * GPE will be immediately disabled by acpi_ev_gpe_dispatch the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * first time it fires.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ACPI_GPE_DISPATCH_MASK\">ACPI_GPE_DISPATCH_MASK</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_NO_HANDLER\">AE_NO_HANDLER</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Clear the GPE (of stale events) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_clear_gpe\">acpi_hw_clear_gpe</a>(<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Enable the requested GPE */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_low_set_gpe\">acpi_hw_low_set_gpe</a>(<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>, <a class=\"id\" href=\"#ACPI_GPE_ENABLE\">ACPI_GPE_ENABLE</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_raw_enable_gpe</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  gpe_event_info  - GPE to enable</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Add a reference to a GPE. On the first reference, the GPE is</span>", 
"<span class=\"comment\"> *              hardware-enabled.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_raw_enable_gpe\">acpi_raw_enable_gpe</a>(struct <a class=\"id\" href=\"#acpi_gpe_event_info\">acpi_gpe_event_info</a> *<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_OK\">AE_OK</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>-><a class=\"id\" href=\"#runtime_count\">runtime_count</a> == <a class=\"id\" href=\"#ACPI_UINT8_MAX\">ACPI_UINT8_MAX</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_LIMIT\">AE_LIMIT</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>-><a class=\"id\" href=\"#runtime_count\">runtime_count</a>++;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>-><a class=\"id\" href=\"#runtime_count\">runtime_count</a> == 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ev_update_gpe_enable_mask\">acpi_ev_update_gpe_enable_mask</a>(<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ev_enable_gpe\">acpi_ev_enable_gpe</a>(<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>-><a class=\"id\" href=\"#runtime_count\">runtime_count</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_raw_disable_gpe</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  gpe_event_info  - GPE to disable</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Remove a reference to a GPE. When the last reference is</span>", 
"<span class=\"comment\"> *              removed, the GPE is hardware-disabled.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_raw_disable_gpe\">acpi_raw_disable_gpe</a>(struct <a class=\"id\" href=\"#acpi_gpe_event_info\">acpi_gpe_event_info</a> *<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_OK\">AE_OK</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>-><a class=\"id\" href=\"#runtime_count\">runtime_count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_LIMIT\">AE_LIMIT</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>-><a class=\"id\" href=\"#runtime_count\">runtime_count</a>--;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>-><a class=\"id\" href=\"#runtime_count\">runtime_count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ev_update_gpe_enable_mask\">acpi_ev_update_gpe_enable_mask</a>(<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_low_set_gpe\">acpi_hw_low_set_gpe</a>(<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#ACPI_GPE_DISABLE\">ACPI_GPE_DISABLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>-><a class=\"id\" href=\"#runtime_count\">runtime_count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ev_low_get_gpe_info</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  gpe_number          - Raw GPE number</span>", 
"<span class=\"comment\"> *              gpe_block           - A GPE info block</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      A GPE event_info struct. NULL if not a valid GPE (The gpe_number</span>", 
"<span class=\"comment\"> *              is not within the specified GPE block)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Returns the event_info struct associated with this GPE. This is</span>", 
"<span class=\"comment\"> *              the low-level implementation of ev_get_gpe_event_info.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"struct <a class=\"id\" href=\"#acpi_gpe_event_info\">acpi_gpe_event_info</a> *<a class=\"id\" href=\"#acpi_ev_low_get_gpe_info\">acpi_ev_low_get_gpe_info</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#gpe_number\">gpe_number</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#acpi_gpe_block_info\">acpi_gpe_block_info</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     *<a class=\"id\" href=\"#gpe_block\">gpe_block</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#gpe_index\">gpe_index</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Validate that the gpe_number is within the specified gpe_block.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (Two steps)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#gpe_block\">gpe_block</a> || (<a class=\"id\" href=\"#gpe_number\">gpe_number</a> &lt; <a class=\"id\" href=\"#gpe_block\">gpe_block</a>-><a class=\"id\" href=\"#block_base_number\">block_base_number</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gpe_index\">gpe_index</a> = <a class=\"id\" href=\"#gpe_number\">gpe_number</a> - <a class=\"id\" href=\"#gpe_block\">gpe_block</a>-><a class=\"id\" href=\"#block_base_number\">block_base_number</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#gpe_index\">gpe_index</a> >= <a class=\"id\" href=\"#gpe_block\">gpe_block</a>-><a class=\"id\" href=\"#gpe_count\">gpe_count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return (&amp;<a class=\"id\" href=\"#gpe_block\">gpe_block</a>-><a class=\"id\" href=\"#event_info\">event_info</a>[<a class=\"id\" href=\"#gpe_index\">gpe_index</a>]);", 
"}", 
"", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ev_get_gpe_event_info</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  gpe_device          - Device node. NULL for GPE0/GPE1</span>", 
"<span class=\"comment\"> *              gpe_number          - Raw GPE number</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      A GPE event_info struct. NULL if not a valid GPE</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Returns the event_info struct associated with this GPE.</span>", 
"<span class=\"comment\"> *              Validates the gpe_block and the gpe_number</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *              Should be called only when the GPE lists are semaphore locked</span>", 
"<span class=\"comment\"> *              and not subject to change.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"struct <a class=\"id\" href=\"#acpi_gpe_event_info\">acpi_gpe_event_info</a> *<a class=\"id\" href=\"#acpi_ev_get_gpe_event_info\">acpi_ev_get_gpe_event_info</a>(<a class=\"id\" href=\"#acpi_handle\">acpi_handle</a> <a class=\"id\" href=\"#gpe_device\">gpe_device</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#gpe_number\">gpe_number</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#obj_desc\">obj_desc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_gpe_event_info\">acpi_gpe_event_info</a> *<a class=\"id\" href=\"#gpe_info\">gpe_info</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_ENTRY\">ACPI_FUNCTION_ENTRY</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* A NULL gpe_device means use the FADT-defined GPE block(s) */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#gpe_device\">gpe_device</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Examine GPE Block 0 and 1 (These blocks are permanent) */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ACPI_MAX_GPE_BLOCKS\">ACPI_MAX_GPE_BLOCKS</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpe_info\">gpe_info</a> = <a class=\"id\" href=\"#acpi_ev_low_get_gpe_info\">acpi_ev_low_get_gpe_info</a>(<a class=\"id\" href=\"#gpe_number\">gpe_number</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_gbl_gpe_fadt_blocks\">acpi_gbl_gpe_fadt_blocks</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    [<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#gpe_info\">gpe_info</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#gpe_info\">gpe_info</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The gpe_number was not in the range of either FADT GPE block */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* A Non-NULL gpe_device means this is a GPE Block Device */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#obj_desc\">obj_desc</a> = <a class=\"id\" href=\"#acpi_ns_get_attached_object\">acpi_ns_get_attached_object</a>((struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> *)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#gpe_device\">gpe_device</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#obj_desc\">obj_desc</a> || !<a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#device\">device</a>.<a class=\"id\" href=\"#gpe_block\">gpe_block</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#acpi_ev_low_get_gpe_info\">acpi_ev_low_get_gpe_info</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#gpe_number\">gpe_number</a>, <a class=\"id\" href=\"#obj_desc\">obj_desc</a>-><a class=\"id\" href=\"#device\">device</a>.<a class=\"id\" href=\"#gpe_block\">gpe_block</a>));", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ev_gpe_detect</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  gpe_xrupt_list      - Interrupt block for this interrupt.</span>", 
"<span class=\"comment\"> *                                    Can have multiple GPE blocks attached.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      INTERRUPT_HANDLED or INTERRUPT_NOT_HANDLED</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Detect if any GP events have occurred. This function is</span>", 
"<span class=\"comment\"> *              executed at interrupt level.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#acpi_ev_gpe_detect\">acpi_ev_gpe_detect</a>(struct <a class=\"id\" href=\"#acpi_gpe_xrupt_info\">acpi_gpe_xrupt_info</a> * <a class=\"id\" href=\"#gpe_xrupt_list\">gpe_xrupt_list</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_gpe_block_info\">acpi_gpe_block_info</a> *<a class=\"id\" href=\"#gpe_block\">gpe_block</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_gpe_register_info\">acpi_gpe_register_info</a> *<a class=\"id\" href=\"#gpe_register_info\">gpe_register_info</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#int_status\">int_status</a> = <a class=\"id\" href=\"#ACPI_INTERRUPT_NOT_HANDLED\">ACPI_INTERRUPT_NOT_HANDLED</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#enabled_status_byte\">enabled_status_byte</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#status_reg\">status_reg</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#enable_reg\">enable_reg</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_cpu_flags\">acpi_cpu_flags</a> <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#j\">j</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_NAME\">ACPI_FUNCTION_NAME</a>(<a class=\"id\" href=\"#ev_gpe_detect\">ev_gpe_detect</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check for the case where there are no GPEs */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#gpe_xrupt_list\">gpe_xrupt_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#int_status\">int_status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We need to obtain the GPE lock for both the data structs and registers</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note: Not necessary to obtain the hardware lock, since the GPE</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * registers are owned by the gpe_lock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#acpi_os_acquire_lock\">acpi_os_acquire_lock</a>(<a class=\"id\" href=\"#acpi_gbl_gpe_lock\">acpi_gbl_gpe_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Examine all GPE blocks attached to this interrupt level */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gpe_block\">gpe_block</a> = <a class=\"id\" href=\"#gpe_xrupt_list\">gpe_xrupt_list</a>-><a class=\"id\" href=\"#gpe_block_list_head\">gpe_block_list_head</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#gpe_block\">gpe_block</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Read all of the 8-bit GPE status and enable registers in this GPE</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * block, saving all of them. Find all currently active GP events.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#gpe_block\">gpe_block</a>-><a class=\"id\" href=\"#register_count\">register_count</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Get the next status/enable pair */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpe_register_info\">gpe_register_info</a> = &amp;<a class=\"id\" href=\"#gpe_block\">gpe_block</a>-><a class=\"id\" href=\"#register_info\">register_info</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Read the Status Register */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_hw_read\">acpi_hw_read</a>(&amp;<a class=\"id\" href=\"#status_reg\">status_reg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#gpe_register_info\">gpe_register_info</a>-><a class=\"id\" href=\"#status_address\">status_address</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock_and_exit\">unlock_and_exit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Read the Enable Register */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_hw_read\">acpi_hw_read</a>(&amp;<a class=\"id\" href=\"#enable_reg\">enable_reg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#gpe_register_info\">gpe_register_info</a>-><a class=\"id\" href=\"#enable_address\">enable_address</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock_and_exit\">unlock_and_exit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_INTERRUPTS\">ACPI_DB_INTERRUPTS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"Read GPE Register at GPE%X: Status=%02X, Enable=%02X\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#gpe_register_info\">gpe_register_info</a>-><a class=\"id\" href=\"#base_gpe_number\">base_gpe_number</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#status_reg\">status_reg</a>, <a class=\"id\" href=\"#enable_reg\">enable_reg</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Check if there is anything active at all in this register */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enabled_status_byte\">enabled_status_byte</a> = (<a class=\"id\" href=\"#u8\">u8</a>) (<a class=\"id\" href=\"#status_reg\">status_reg</a> &amp; <a class=\"id\" href=\"#enable_reg\">enable_reg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#enabled_status_byte\">enabled_status_byte</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* No active GPEs in this register, move on */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Now look at the individual GPEs in this byte register */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; <a class=\"id\" href=\"#ACPI_GPE_REGISTER_WIDTH\">ACPI_GPE_REGISTER_WIDTH</a>; <a class=\"id\" href=\"#j\">j</a>++) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Examine one GPE bit */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#enabled_status_byte\">enabled_status_byte</a> &amp; (1 << <a class=\"id\" href=\"#j\">j</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Found an active GPE. Dispatch the event to a handler</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * or method.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#int_status\">int_status</a> |=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ev_gpe_dispatch\">acpi_ev_gpe_dispatch</a>(&amp;<a class=\"id\" href=\"#gpe_block\">gpe_block</a>->", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event_info\">event_info</a>[((<a class=\"id\" href=\"#acpi_size\">acpi_size</a>) <a class=\"id\" href=\"#i\">i</a> * <a class=\"id\" href=\"#ACPI_GPE_REGISTER_WIDTH\">ACPI_GPE_REGISTER_WIDTH</a>) + <a class=\"id\" href=\"#j\">j</a>], <a class=\"id\" href=\"#j\">j</a> + <a class=\"id\" href=\"#gpe_register_info\">gpe_register_info</a>-><a class=\"id\" href=\"#base_gpe_number\">base_gpe_number</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpe_block\">gpe_block</a> = <a class=\"id\" href=\"#gpe_block\">gpe_block</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>}", 
"", 
"      <a class=\"id\" href=\"#unlock_and_exit\">unlock_and_exit</a>:", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_release_lock\">acpi_os_release_lock</a>(<a class=\"id\" href=\"#acpi_gbl_gpe_lock\">acpi_gbl_gpe_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#int_status\">int_status</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ev_asynch_execute_gpe_method</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Context (gpe_event_info) - Info for this GPE</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Perform the actual execution of a GPE control method. This</span>", 
"<span class=\"comment\"> *              function is called from an invocation of acpi_os_execute and</span>", 
"<span class=\"comment\"> *              therefore does NOT execute at interrupt level - so that</span>", 
"<span class=\"comment\"> *              the control method itself is not executed in the context of</span>", 
"<span class=\"comment\"> *              an interrupt handler.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"static void <a class=\"id\" href=\"#acpi_ev_asynch_enable_gpe\">acpi_ev_asynch_enable_gpe</a>(void *<a class=\"id\" href=\"#context\">context</a>);", 
"", 
"static void <a class=\"id\" href=\"#ACPI_SYSTEM_XFACE\">ACPI_SYSTEM_XFACE</a> <a class=\"id\" href=\"#acpi_ev_asynch_execute_gpe_method\">acpi_ev_asynch_execute_gpe_method</a>(void *<a class=\"id\" href=\"#context\">context</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_gpe_event_info\">acpi_gpe_event_info</a> *<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a> = (void *)<a class=\"id\" href=\"#context\">context</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_gpe_event_info\">acpi_gpe_event_info</a> <a class=\"id\" href=\"#local_gpe_event_info\">local_gpe_event_info</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_evaluate_info\">acpi_evaluate_info</a> *<a class=\"id\" href=\"#info\">info</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ev_asynch_execute_gpe_method\">ev_asynch_execute_gpe_method</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ut_acquire_mutex\">acpi_ut_acquire_mutex</a>(<a class=\"id\" href=\"#ACPI_MTX_EVENTS\">ACPI_MTX_EVENTS</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_VOID\">return_VOID</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Must revalidate the gpe_number/gpe_block */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#acpi_ev_valid_gpe_event\">acpi_ev_valid_gpe_event</a>(<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ut_release_mutex\">acpi_ut_release_mutex</a>(<a class=\"id\" href=\"#ACPI_MTX_EVENTS\">ACPI_MTX_EVENTS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_VOID\">return_VOID</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Take a snapshot of the GPE info for this level - we copy the info to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * prevent a race condition with remove_handler/remove_block.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_MEMCPY\">ACPI_MEMCPY</a>(&amp;<a class=\"id\" href=\"#local_gpe_event_info\">local_gpe_event_info</a>, <a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    sizeof(struct <a class=\"id\" href=\"#acpi_gpe_event_info\">acpi_gpe_event_info</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ut_release_mutex\">acpi_ut_release_mutex</a>(<a class=\"id\" href=\"#ACPI_MTX_EVENTS\">ACPI_MTX_EVENTS</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_VOID\">return_VOID</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Must check for control method type dispatch one more time to avoid a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * race with ev_gpe_install_handler</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#local_gpe_event_info\">local_gpe_event_info</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ACPI_GPE_DISPATCH_MASK\">ACPI_GPE_DISPATCH_MASK</a>) ==", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_GPE_DISPATCH_METHOD\">ACPI_GPE_DISPATCH_METHOD</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Allocate the evaluation information block */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a> = <a class=\"id\" href=\"#ACPI_ALLOCATE_ZEROED\">ACPI_ALLOCATE_ZEROED</a>(sizeof(struct <a class=\"id\" href=\"#acpi_evaluate_info\">acpi_evaluate_info</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#info\">info</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_NO_MEMORY\">AE_NO_MEMORY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Invoke the GPE Method (_Lxx, _Exx) i.e., evaluate the _Lxx/_Exx</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * control method that corresponds to this GPE</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#prefix_node\">prefix_node</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#local_gpe_event_info\">local_gpe_event_info</a>.<a class=\"id\" href=\"#dispatch\">dispatch</a>.<a class=\"id\" href=\"#method_node\">method_node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#ACPI_IGNORE_RETURN_VALUE\">ACPI_IGNORE_RETURN_VALUE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ns_evaluate\">acpi_ns_evaluate</a>(<a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FREE\">ACPI_FREE</a>(<a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_EXCEPTION\">ACPI_EXCEPTION</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, <a class=\"id\" href=\"#status\">status</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"while evaluating GPE method [%4.4s]\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ut_get_node_name\">acpi_ut_get_node_name</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#local_gpe_event_info\">local_gpe_event_info</a>.<a class=\"id\" href=\"#dispatch\">dispatch</a>.", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#method_node\">method_node</a>)));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Defer enabling of GPE until all notify handlers are done */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_execute\">acpi_os_execute</a>(<a class=\"id\" href=\"#OSL_NOTIFY_HANDLER\">OSL_NOTIFY_HANDLER</a>, <a class=\"id\" href=\"#acpi_ev_asynch_enable_gpe\">acpi_ev_asynch_enable_gpe</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_VOID\">return_VOID</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#acpi_ev_asynch_enable_gpe\">acpi_ev_asynch_enable_gpe</a>(void *<a class=\"id\" href=\"#context\">context</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_gpe_event_info\">acpi_gpe_event_info</a> *<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a> = <a class=\"id\" href=\"#context\">context</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ACPI_GPE_XRUPT_TYPE_MASK\">ACPI_GPE_XRUPT_TYPE_MASK</a>) ==", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_GPE_LEVEL_TRIGGERED\">ACPI_GPE_LEVEL_TRIGGERED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * GPE is level-triggered, we clear the GPE status bit after handling</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the event.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_clear_gpe\">acpi_hw_clear_gpe</a>(<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_VOID\">return_VOID</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Enable this GPE, conditionally. This means that the GPE will only be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * physically enabled if the enable_for_run bit is set in the event_info</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>(void)<a class=\"id\" href=\"#acpi_hw_low_set_gpe\">acpi_hw_low_set_gpe</a>(<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>, <a class=\"id\" href=\"#ACPI_GPE_COND_ENABLE\">ACPI_GPE_COND_ENABLE</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_VOID\">return_VOID</a>;", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ev_gpe_dispatch</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  gpe_event_info  - Info for this GPE</span>", 
"<span class=\"comment\"> *              gpe_number      - Number relative to the parent GPE block</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      INTERRUPT_HANDLED or INTERRUPT_NOT_HANDLED</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Dispatch a General Purpose Event to either a function (e.g. EC)</span>", 
"<span class=\"comment\"> *              or method (e.g. _Lxx/_Exx) handler.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *              This function executes at interrupt level.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#u32\">u32</a>", 
"<a class=\"id\" href=\"#acpi_ev_gpe_dispatch\">acpi_ev_gpe_dispatch</a>(struct <a class=\"id\" href=\"#acpi_gpe_event_info\">acpi_gpe_event_info</a> *<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#gpe_number\">gpe_number</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#ev_gpe_dispatch\">ev_gpe_dispatch</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_os_gpe_count\">acpi_os_gpe_count</a>(<a class=\"id\" href=\"#gpe_number\">gpe_number</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If edge-triggered, clear the GPE status bit now. Note that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * level-triggered events are cleared after the GPE is serviced.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ACPI_GPE_XRUPT_TYPE_MASK\">ACPI_GPE_XRUPT_TYPE_MASK</a>) ==", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_GPE_EDGE_TRIGGERED\">ACPI_GPE_EDGE_TRIGGERED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_clear_gpe\">acpi_hw_clear_gpe</a>(<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_EXCEPTION\">ACPI_EXCEPTION</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, <a class=\"id\" href=\"#status\">status</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Unable to clear GPE[0x%2X]\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpe_number\">gpe_number</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_UINT32\">return_UINT32</a>(<a class=\"id\" href=\"#ACPI_INTERRUPT_NOT_HANDLED\">ACPI_INTERRUPT_NOT_HANDLED</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Dispatch the GPE to either an installed handler, or the control method</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * associated with this GPE (_Lxx or _Exx). If a handler exists, we invoke</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it and do not attempt to run the method. If there is neither a handler</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * nor a method, we disable this GPE to prevent further such pointless</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * events from firing.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ACPI_GPE_DISPATCH_MASK\">ACPI_GPE_DISPATCH_MASK</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_GPE_DISPATCH_HANDLER\">ACPI_GPE_DISPATCH_HANDLER</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Invoke the installed handler (at interrupt level)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Ignore return status for now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * TBD: leave GPE disabled on error?</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>(void)<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>-><a class=\"id\" href=\"#dispatch\">dispatch</a>.<a class=\"id\" href=\"#handler\">handler</a>-><a class=\"id\" href=\"#address\">address</a>(<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>->", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dispatch\">dispatch</a>.", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#handler\">handler</a>->", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#context\">context</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* It is now safe to clear level-triggered events. */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ACPI_GPE_XRUPT_TYPE_MASK\">ACPI_GPE_XRUPT_TYPE_MASK</a>) ==", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_GPE_LEVEL_TRIGGERED\">ACPI_GPE_LEVEL_TRIGGERED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_clear_gpe\">acpi_hw_clear_gpe</a>(<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_EXCEPTION\">ACPI_EXCEPTION</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, <a class=\"id\" href=\"#status\">status</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Unable to clear GPE[0x%2X]\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpe_number\">gpe_number</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_UINT32\">return_UINT32</a>(<a class=\"id\" href=\"#ACPI_INTERRUPT_NOT_HANDLED\">ACPI_INTERRUPT_NOT_HANDLED</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_GPE_DISPATCH_METHOD\">ACPI_GPE_DISPATCH_METHOD</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Disable the GPE, so it doesn't keep firing before the method has a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * chance to run (it runs asynchronously with interrupts enabled).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_low_set_gpe\">acpi_hw_low_set_gpe</a>(<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>, <a class=\"id\" href=\"#ACPI_GPE_DISABLE\">ACPI_GPE_DISABLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_EXCEPTION\">ACPI_EXCEPTION</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, <a class=\"id\" href=\"#status\">status</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Unable to disable GPE[0x%2X]\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpe_number\">gpe_number</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_UINT32\">return_UINT32</a>(<a class=\"id\" href=\"#ACPI_INTERRUPT_NOT_HANDLED\">ACPI_INTERRUPT_NOT_HANDLED</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Execute the method associated with the GPE</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * NOTE: Level-triggered GPEs are cleared after the method completes.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_os_execute\">acpi_os_execute</a>(<a class=\"id\" href=\"#OSL_GPE_HANDLER\">OSL_GPE_HANDLER</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#acpi_ev_asynch_execute_gpe_method\">acpi_ev_asynch_execute_gpe_method</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_EXCEPTION\">ACPI_EXCEPTION</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, <a class=\"id\" href=\"#status\">status</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Unable to queue handler for GPE[0x%2X] - event disabled\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpe_number\">gpe_number</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * No handler or method to run!</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * 03/2010: This case should no longer be possible. We will not allow</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * a GPE to be enabled if it has no handler or method.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    \"No handler or method for GPE[0x%2X], disabling event\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#gpe_number\">gpe_number</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Disable the GPE. The GPE will remain disabled a handler</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is installed or ACPICA is restarted.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_hw_low_set_gpe\">acpi_hw_low_set_gpe</a>(<a class=\"id\" href=\"#gpe_event_info\">gpe_event_info</a>, <a class=\"id\" href=\"#ACPI_GPE_DISABLE\">ACPI_GPE_DISABLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_EXCEPTION\">ACPI_EXCEPTION</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, <a class=\"id\" href=\"#status\">status</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Unable to disable GPE[0x%2X]\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gpe_number\">gpe_number</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_UINT32\">return_UINT32</a>(<a class=\"id\" href=\"#ACPI_INTERRUPT_NOT_HANDLED\">ACPI_INTERRUPT_NOT_HANDLED</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_UINT32\">return_UINT32</a>(<a class=\"id\" href=\"#ACPI_INTERRUPT_HANDLED\">ACPI_INTERRUPT_HANDLED</a>);", 
"}", 
];
xr_frag_insert('l/19/911dacbc4e7679aad48970f330133a7379297d.xr', __xr_tmp);
