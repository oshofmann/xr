var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/kernel/fork.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 1991, 1992  Linus Torvalds</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  'fork.c' contains the help-routines for the 'fork' system call</span>", 
"<span class=\"comment\"> * (see also entry.S and others).</span>", 
"<span class=\"comment\"> * Fork is rather simple, once you get the hang of it, but the memory</span>", 
"<span class=\"comment\"> * management can be a bitch. See 'mm/memory.c': 'copy_page_range()'</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#unistd\">unistd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#vmalloc\">vmalloc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#completion\">completion</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#personality\">personality</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mempolicy\">mempolicy</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sem\">sem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fdtable\">fdtable</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#iocontext\">iocontext</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#key\">key</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#binfmts\">binfmts</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mman\">mman</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mmu_notifier\">mmu_notifier</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#nsproxy\">nsproxy</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#capability\">capability</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cgroup\">cgroup</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#security\">security</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hugetlb\">hugetlb</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#swap\">swap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#syscalls\">syscalls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#jiffies\">jiffies</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#tracehook\">tracehook</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#futex\">futex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#compat\">compat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#task_io_accounting_ops\">task_io_accounting_ops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rcupdate\">rcupdate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ptrace\">ptrace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mount\">mount</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#audit\">audit</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#memcontrol\">memcontrol</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ftrace\">ftrace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#profile\">profile</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rmap\">rmap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ksm\">ksm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#acct\">acct</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#tsacct_kern\">tsacct_kern</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cn_proc\">cn_proc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#freezer\">freezer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#delayacct\">delayacct</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#taskstats_kern\">taskstats_kern</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#random\">random</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#tty\">tty</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#proc_fs\">proc_fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#blkdev\">blkdev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs_struct\">fs_struct</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#magic\">magic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#perf_event\">perf_event</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#posix\">posix</a>-<a class=\"id\" href=\"#timers\">timers</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#user\">user</a>-return-<a class=\"id\" href=\"#notifier\">notifier</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pgtable\">pgtable</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pgalloc\">pgalloc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#mmu_context\">mmu_context</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#cacheflush\">cacheflush</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#tlbflush\">tlbflush</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#trace\">trace</a>/<a class=\"id\" href=\"#events\">events</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Protected counters by write_lock_irq(&amp;tasklist_lock)</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#total_forks\">total_forks</a>;<span class=\"ts\"/><span class=\"comment\">/* Handle normal Linux uptimes. */</span>", 
"int <a class=\"id\" href=\"#nr_threads\">nr_threads</a>; <span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The idle threads do not count.. */</span>", 
"", 
"int <a class=\"id\" href=\"#max_threads\">max_threads</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* tunable limit on nr_threads */</span>", 
"", 
"<a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(unsigned long, <a class=\"id\" href=\"#process_counts\">process_counts</a>) = 0;", 
"", 
"<a class=\"id\" href=\"#__cacheline_aligned\">__cacheline_aligned</a> <a class=\"id\" href=\"#DEFINE_RWLOCK\">DEFINE_RWLOCK</a>(<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);  <span class=\"comment\">/* outer */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROVE_RCU\">CONFIG_PROVE_RCU</a>", 
"int <a class=\"id\" href=\"#lockdep_tasklist_lock_is_held\">lockdep_tasklist_lock_is_held</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#lockdep_is_held\">lockdep_is_held</a>(&amp;<a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#lockdep_tasklist_lock_is_held\">lockdep_tasklist_lock_is_held</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #ifdef CONFIG_PROVE_RCU */</span>", 
"", 
"int <a class=\"id\" href=\"#nr_processes\">nr_processes</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#total\">total</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#total\">total</a> += <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#process_counts\">process_counts</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#total\">total</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_TASK_STRUCT_ALLOCATOR\">__HAVE_ARCH_TASK_STRUCT_ALLOCATOR</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#alloc_task_struct\">alloc_task_struct</a>()<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#task_struct_cachep\">task_struct_cachep</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#free_task_struct\">free_task_struct</a>(<a class=\"id\" href=\"#tsk\">tsk</a>)<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#task_struct_cachep\">task_struct_cachep</a>, (<a class=\"id\" href=\"#tsk\">tsk</a>))", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#task_struct_cachep\">task_struct_cachep</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_THREAD_INFO_ALLOCATOR\">__HAVE_ARCH_THREAD_INFO_ALLOCATOR</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#thread_info\">thread_info</a> *<a class=\"id\" href=\"#alloc_thread_info\">alloc_thread_info</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_STACK_USAGE\">CONFIG_DEBUG_STACK_USAGE</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a> | <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>;", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return (struct <a class=\"id\" href=\"#thread_info\">thread_info</a> *)<a class=\"id\" href=\"#__get_free_pages\">__get_free_pages</a>(<a class=\"id\" href=\"#mask\">mask</a>, <a class=\"id\" href=\"#THREAD_SIZE_ORDER\">THREAD_SIZE_ORDER</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#free_thread_info\">free_thread_info</a>(struct <a class=\"id\" href=\"#thread_info\">thread_info</a> *<a class=\"id\" href=\"#ti\">ti</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_pages\">free_pages</a>((unsigned long)<a class=\"id\" href=\"#ti\">ti</a>, <a class=\"id\" href=\"#THREAD_SIZE_ORDER\">THREAD_SIZE_ORDER</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* SLAB cache for signal_struct structures (tsk-&gt;signal) */</span>", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#signal_cachep\">signal_cachep</a>;", 
"", 
"<span class=\"comment\">/* SLAB cache for sighand_struct structures (tsk-&gt;sighand) */</span>", 
"struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#sighand_cachep\">sighand_cachep</a>;", 
"", 
"<span class=\"comment\">/* SLAB cache for files_struct structures (tsk-&gt;files) */</span>", 
"struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#files_cachep\">files_cachep</a>;", 
"", 
"<span class=\"comment\">/* SLAB cache for fs_struct structures (tsk-&gt;fs) */</span>", 
"struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#fs_cachep\">fs_cachep</a>;", 
"", 
"<span class=\"comment\">/* SLAB cache for vm_area_struct structures */</span>", 
"struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#vm_area_cachep\">vm_area_cachep</a>;", 
"", 
"<span class=\"comment\">/* SLAB cache for mm_struct structures (tsk-&gt;mm) */</span>", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#mm_cachep\">mm_cachep</a>;", 
"", 
"static void <a class=\"id\" href=\"#account_kernel_stack\">account_kernel_stack</a>(struct <a class=\"id\" href=\"#thread_info\">thread_info</a> *<a class=\"id\" href=\"#ti\">ti</a>, int <a class=\"id\" href=\"#account\">account</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a> = <a class=\"id\" href=\"#page_zone\">page_zone</a>(<a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#ti\">ti</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mod_zone_page_state\">mod_zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_KERNEL_STACK\">NR_KERNEL_STACK</a>, <a class=\"id\" href=\"#account\">account</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#free_task\">free_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prop_local_destroy_single\">prop_local_destroy_single</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#dirties\">dirties</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#account_kernel_stack\">account_kernel_stack</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#stack\">stack</a>, -1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_thread_info\">free_thread_info</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#stack\">stack</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rt_mutex_debug_task_free\">rt_mutex_debug_task_free</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_graph_exit_task\">ftrace_graph_exit_task</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_task_struct\">free_task_struct</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#free_task\">free_task</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#free_signal_struct\">free_signal_struct</a>(struct <a class=\"id\" href=\"#signal_struct\">signal_struct</a> *<a class=\"id\" href=\"#sig\">sig</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#taskstats_tgid_free\">taskstats_tgid_free</a>(<a class=\"id\" href=\"#sig\">sig</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#signal_cachep\">signal_cachep</a>, <a class=\"id\" href=\"#sig\">sig</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#put_signal_struct\">put_signal_struct</a>(struct <a class=\"id\" href=\"#signal_struct\">signal_struct</a> *<a class=\"id\" href=\"#sig\">sig</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#sigcnt\">sigcnt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_signal_struct\">free_signal_struct</a>(<a class=\"id\" href=\"#sig\">sig</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#__put_task_struct\">__put_task_struct</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#exit_state\">exit_state</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#usage\">usage</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#tsk\">tsk</a> == <a class=\"id\" href=\"#current\">current</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#exit_creds\">exit_creds</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delayacct_tsk_free\">delayacct_tsk_free</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_signal_struct\">put_signal_struct</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#signal\">signal</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#profile_handoff_task\">profile_handoff_task</a>(<a class=\"id\" href=\"#tsk\">tsk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_task\">free_task</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * macro override instead of weak attribute alias, to workaround</span>", 
"<span class=\"comment\"> * gcc 4.1.0 and 4.1.1 bugs with weak attribute and empty functions.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#arch_task_cache_init\">arch_task_cache_init</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#arch_task_cache_init\">arch_task_cache_init</a>()", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#fork_init\">fork_init</a>(unsigned long <a class=\"id\" href=\"#mempages\">mempages</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__HAVE_ARCH_TASK_STRUCT_ALLOCATOR\">__HAVE_ARCH_TASK_STRUCT_ALLOCATOR</a>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#ARCH_MIN_TASKALIGN\">ARCH_MIN_TASKALIGN</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ARCH_MIN_TASKALIGN\">ARCH_MIN_TASKALIGN</a><span class=\"ts\"/><a class=\"id\" href=\"#L1_CACHE_BYTES\">L1_CACHE_BYTES</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* create a slab on which task_structs can be allocated */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_struct_cachep\">task_struct_cachep</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(\"task_struct\", sizeof(struct <a class=\"id\" href=\"#task_struct\">task_struct</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ARCH_MIN_TASKALIGN\">ARCH_MIN_TASKALIGN</a>, <a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a> | <a class=\"id\" href=\"#SLAB_NOTRACK\">SLAB_NOTRACK</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* do the arch specific task caches init */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_task_cache_init\">arch_task_cache_init</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The default maximum number of threads is set to a safe</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * value: the thread structures can take up at most half</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of memory.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_threads\">max_threads</a> = <a class=\"id\" href=\"#mempages\">mempages</a> / (8 * <a class=\"id\" href=\"#THREAD_SIZE\">THREAD_SIZE</a> / <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we need to allow at least 20 threads to boot a system</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if(<a class=\"id\" href=\"#max_threads\">max_threads</a> &lt; 20)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_threads\">max_threads</a> = 20;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_task\">init_task</a>.<a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#rlim\">rlim</a>[<a class=\"id\" href=\"#RLIMIT_NPROC\">RLIMIT_NPROC</a>].<a class=\"id\" href=\"#rlim_cur\">rlim_cur</a> = <a class=\"id\" href=\"#max_threads\">max_threads</a>/2;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_task\">init_task</a>.<a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#rlim\">rlim</a>[<a class=\"id\" href=\"#RLIMIT_NPROC\">RLIMIT_NPROC</a>].<a class=\"id\" href=\"#rlim_max\">rlim_max</a> = <a class=\"id\" href=\"#max_threads\">max_threads</a>/2;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_task\">init_task</a>.<a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#rlim\">rlim</a>[<a class=\"id\" href=\"#RLIMIT_SIGPENDING\">RLIMIT_SIGPENDING</a>] =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_task\">init_task</a>.<a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#rlim\">rlim</a>[<a class=\"id\" href=\"#RLIMIT_NPROC\">RLIMIT_NPROC</a>];", 
"}", 
"", 
"int <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#weak\">weak</a>)) <a class=\"id\" href=\"#arch_dup_task_struct\">arch_dup_task_struct</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#dst\">dst</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#src\">src</a>)", 
"{", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#dst\">dst</a> = *<a class=\"id\" href=\"#src\">src</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#dup_task_struct\">dup_task_struct</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#orig\">orig</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#thread_info\">thread_info</a> *<a class=\"id\" href=\"#ti\">ti</a>;", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#stackend\">stackend</a>;", 
"", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prepare_to_copy\">prepare_to_copy</a>(<a class=\"id\" href=\"#orig\">orig</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#alloc_task_struct\">alloc_task_struct</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ti\">ti</a> = <a class=\"id\" href=\"#alloc_thread_info\">alloc_thread_info</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ti\">ti</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_task_struct\">free_task_struct</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
" <span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#arch_dup_task_struct\">arch_dup_task_struct</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#orig\">orig</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#stack\">stack</a> = <a class=\"id\" href=\"#ti\">ti</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#prop_local_init_single\">prop_local_init_single</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#dirties\">dirties</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_thread_stack\">setup_thread_stack</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#orig\">orig</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_user_return_notifier\">clear_user_return_notifier</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#stackend\">stackend</a> = <a class=\"id\" href=\"#end_of_stack\">end_of_stack</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#stackend\">stackend</a> = <a class=\"id\" href=\"#STACK_END_MAGIC\">STACK_END_MAGIC</a>;<span class=\"ts\"/><span class=\"comment\">/* for overflow detection */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CC_STACKPROTECTOR\">CONFIG_CC_STACKPROTECTOR</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#stack_canary\">stack_canary</a> = <a class=\"id\" href=\"#get_random_int\">get_random_int</a>();", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* One for us, one for whoever does the \"release_task()\" (usually parent) */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#usage\">usage</a>,2);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#fs_excl\">fs_excl</a>, 0);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BLK_DEV_IO_TRACE\">CONFIG_BLK_DEV_IO_TRACE</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#btrace_seq\">btrace_seq</a> = 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#splice_pipe\">splice_pipe</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#account_kernel_stack\">account_kernel_stack</a>(<a class=\"id\" href=\"#ti\">ti</a>, 1);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tsk\">tsk</a>;", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_thread_info\">free_thread_info</a>(<a class=\"id\" href=\"#ti\">ti</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_task_struct\">free_task_struct</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MMU\">CONFIG_MMU</a>", 
"static int <a class=\"id\" href=\"#dup_mmap\">dup_mmap</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#oldmm\">oldmm</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#mpnt\">mpnt</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>, *<a class=\"id\" href=\"#prev\">prev</a>, **<a class=\"id\" href=\"#pprev\">pprev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> **<a class=\"id\" href=\"#rb_link\">rb_link</a>, *<a class=\"id\" href=\"#rb_parent\">rb_parent</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#charge\">charge</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mempolicy\">mempolicy</a> *<a class=\"id\" href=\"#pol\">pol</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#oldmm\">oldmm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_cache_dup_mm\">flush_cache_dup_mm</a>(<a class=\"id\" href=\"#oldmm\">oldmm</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Not linked in yet - no deadlock potential:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write_nested\">down_write_nested</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>, <a class=\"id\" href=\"#SINGLE_DEPTH_NESTING\">SINGLE_DEPTH_NESTING</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#locked_vm\">locked_vm</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap\">mmap</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_cache\">mmap_cache</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#free_area_cache\">free_area_cache</a> = <a class=\"id\" href=\"#oldmm\">oldmm</a>-><a class=\"id\" href=\"#mmap_base\">mmap_base</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#cached_hole_size\">cached_hole_size</a> = ~0UL;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#map_count\">map_count</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear\">cpumask_clear</a>(<a class=\"id\" href=\"#mm_cpumask\">mm_cpumask</a>(<a class=\"id\" href=\"#mm\">mm</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mm_rb\">mm_rb</a> = <a class=\"id\" href=\"#RB_ROOT\">RB_ROOT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_link\">rb_link</a> = &amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mm_rb\">mm_rb</a>.<a class=\"id\" href=\"#rb_node\">rb_node</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_parent\">rb_parent</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pprev\">pprev</a> = &amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap\">mmap</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#ksm_fork\">ksm_fork</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#oldmm\">oldmm</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#mpnt\">mpnt</a> = <a class=\"id\" href=\"#oldmm\">oldmm</a>-><a class=\"id\" href=\"#mmap\">mmap</a>; <a class=\"id\" href=\"#mpnt\">mpnt</a>; <a class=\"id\" href=\"#mpnt\">mpnt</a> = <a class=\"id\" href=\"#mpnt\">mpnt</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mpnt\">mpnt</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_DONTCOPY\">VM_DONTCOPY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>long <a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#vma_pages\">vma_pages</a>(<a class=\"id\" href=\"#mpnt\">mpnt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#total_vm\">total_vm</a> -= <a class=\"id\" href=\"#pages\">pages</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vm_stat_account\">vm_stat_account</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#mpnt\">mpnt</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a>, <a class=\"id\" href=\"#mpnt\">mpnt</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>-<a class=\"id\" href=\"#pages\">pages</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#charge\">charge</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mpnt\">mpnt</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_ACCOUNT\">VM_ACCOUNT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#len\">len</a> = (<a class=\"id\" href=\"#mpnt\">mpnt</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> - <a class=\"id\" href=\"#mpnt\">mpnt</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#security_vm_enough_memory\">security_vm_enough_memory</a>(<a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_nomem\">fail_nomem</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#charge\">charge</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#vm_area_cachep\">vm_area_cachep</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#tmp\">tmp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_nomem\">fail_nomem</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#tmp\">tmp</a> = *<a class=\"id\" href=\"#mpnt\">mpnt</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#anon_vma_chain\">anon_vma_chain</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pol\">pol</a> = <a class=\"id\" href=\"#mpol_dup\">mpol_dup</a>(<a class=\"id\" href=\"#vma_policy\">vma_policy</a>(<a class=\"id\" href=\"#mpnt\">mpnt</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#pol\">pol</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#pol\">pol</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_nomem_policy\">fail_nomem_policy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma_set_policy\">vma_set_policy</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#pol\">pol</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a> = <a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#anon_vma_fork\">anon_vma_fork</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#mpnt\">mpnt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_nomem_anon_vma_fork\">fail_nomem_anon_vma_fork</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &= ~<a class=\"id\" href=\"#VM_LOCKED\">VM_LOCKED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a> = <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#vm_prev\">vm_prev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_file\">get_file</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_DENYWRITE\">VM_DENYWRITE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_writecount\">i_writecount</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#i_mmap_lock\">i_mmap_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_SHARED\">VM_SHARED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#i_mmap_writable\">i_mmap_writable</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#vm_truncate_count\">vm_truncate_count</a> = <a class=\"id\" href=\"#mpnt\">mpnt</a>-><a class=\"id\" href=\"#vm_truncate_count\">vm_truncate_count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_dcache_mmap_lock\">flush_dcache_mmap_lock</a>(<a class=\"id\" href=\"#mapping\">mapping</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* insert tmp into the share list, just after mpnt */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vma_prio_tree_add\">vma_prio_tree_add</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#mpnt\">mpnt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_dcache_mmap_unlock\">flush_dcache_mmap_unlock</a>(<a class=\"id\" href=\"#mapping\">mapping</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#i_mmap_lock\">i_mmap_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Clear hugetlb-related page reserves for children. This only</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * affects MAP_PRIVATE mappings. Faults generated by the child</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * are not guaranteed to succeed, even if read-only</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_vm_hugetlb_page\">is_vm_hugetlb_page</a>(<a class=\"id\" href=\"#tmp\">tmp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reset_vma_resv_huge_pages\">reset_vma_resv_huge_pages</a>(<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Link in the new vma and copy the page table entries.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#pprev\">pprev</a> = <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pprev\">pprev</a> = &amp;<a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#vm_next\">vm_next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#vm_prev\">vm_prev</a> = <a class=\"id\" href=\"#prev\">prev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__vma_link_rb\">__vma_link_rb</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#rb_link\">rb_link</a>, <a class=\"id\" href=\"#rb_parent\">rb_parent</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rb_link\">rb_link</a> = &amp;<a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#vm_rb\">vm_rb</a>.<a class=\"id\" href=\"#rb_right\">rb_right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rb_parent\">rb_parent</a> = &amp;<a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#vm_rb\">vm_rb</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#map_count\">map_count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#copy_page_range\">copy_page_range</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#oldmm\">oldmm</a>, <a class=\"id\" href=\"#mpnt\">mpnt</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a> && <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a>-><a class=\"id\" href=\"#open\">open</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#vm_ops\">vm_ops</a>-><a class=\"id\" href=\"#open\">open</a>(<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* a new mm has just been created */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_dup_mmap\">arch_dup_mmap</a>(<a class=\"id\" href=\"#oldmm\">oldmm</a>, <a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = 0;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_tlb_mm\">flush_tlb_mm</a>(<a class=\"id\" href=\"#oldmm\">oldmm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#oldmm\">oldmm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"<a class=\"id\" href=\"#fail_nomem_anon_vma_fork\">fail_nomem_anon_vma_fork</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mpol_put\">mpol_put</a>(<a class=\"id\" href=\"#pol\">pol</a>);", 
"<a class=\"id\" href=\"#fail_nomem_policy\">fail_nomem_policy</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#vm_area_cachep\">vm_area_cachep</a>, <a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<a class=\"id\" href=\"#fail_nomem\">fail_nomem</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vm_unacct_memory\">vm_unacct_memory</a>(<a class=\"id\" href=\"#charge\">charge</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#mm_alloc_pgd\">mm_alloc_pgd</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> * <a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#pgd\">pgd</a> = <a class=\"id\" href=\"#pgd_alloc\">pgd_alloc</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#pgd\">pgd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mm_free_pgd\">mm_free_pgd</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> * <a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_free\">pgd_free</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#pgd\">pgd</a>);", 
"}", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#dup_mmap\">dup_mmap</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#oldmm\">oldmm</a>)<span class=\"ts\"/>(0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#mm_alloc_pgd\">mm_alloc_pgd</a>(<a class=\"id\" href=\"#mm\">mm</a>)<span class=\"ts\"/>(0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#mm_free_pgd\">mm_free_pgd</a>(<a class=\"id\" href=\"#mm\">mm</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_MMU */</span>", 
"", 
"<a class=\"id\" href=\"#__cacheline_aligned_in_smp\">__cacheline_aligned_in_smp</a> <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#mmlist_lock\">mmlist_lock</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#allocate_mm\">allocate_mm</a>()<span class=\"ts\"/>(<a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#mm_cachep\">mm_cachep</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#free_mm\">free_mm</a>(<a class=\"id\" href=\"#mm\">mm</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#mm_cachep\">mm_cachep</a>, (<a class=\"id\" href=\"#mm\">mm</a>)))", 
"", 
"static unsigned long <a class=\"id\" href=\"#default_dump_filter\">default_dump_filter</a> = <a class=\"id\" href=\"#MMF_DUMP_FILTER_DEFAULT\">MMF_DUMP_FILTER_DEFAULT</a>;", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#coredump_filter_setup\">coredump_filter_setup</a>(char *<a class=\"id\" href=\"#s\">s</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#default_dump_filter\">default_dump_filter</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0) << <a class=\"id\" href=\"#MMF_DUMP_FILTER_SHIFT\">MMF_DUMP_FILTER_SHIFT</a>) &amp;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MMF_DUMP_FILTER_MASK\">MMF_DUMP_FILTER_MASK</a>;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"coredump_filter=\", <a class=\"id\" href=\"#coredump_filter_setup\">coredump_filter_setup</a>);", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init_task\">init_task</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static void <a class=\"id\" href=\"#mm_init_aio\">mm_init_aio</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_AIO\">CONFIG_AIO</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#ioctx_lock\">ioctx_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_HLIST_HEAD\">INIT_HLIST_HEAD</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#ioctx_list\">ioctx_list</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> * <a class=\"id\" href=\"#mm_init\">mm_init</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> * <a class=\"id\" href=\"#mm\">mm</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mm_users\">mm_users</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mm_count\">mm_count</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_rwsem\">init_rwsem</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmlist\">mmlist</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#flags\">flags</a> = (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>) ?", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MMF_INIT_MASK\">MMF_INIT_MASK</a>) : <a class=\"id\" href=\"#default_dump_filter\">default_dump_filter</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#core_state\">core_state</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#nr_ptes\">nr_ptes</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#rss_stat\">rss_stat</a>, 0, sizeof(<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#rss_stat\">rss_stat</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#page_table_lock\">page_table_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#free_area_cache\">free_area_cache</a> = <a class=\"id\" href=\"#TASK_UNMAPPED_BASE\">TASK_UNMAPPED_BASE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#cached_hole_size\">cached_hole_size</a> = ~0UL;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm_init_aio\">mm_init_aio</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm_init_owner\">mm_init_owner</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#mm_alloc_pgd\">mm_alloc_pgd</a>(<a class=\"id\" href=\"#mm\">mm</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#def_flags\">def_flags</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mmu_notifier_mm_init\">mmu_notifier_mm_init</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_mm\">free_mm</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Allocate and initialize an mm_struct.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> * <a class=\"id\" href=\"#mm_alloc\">mm_alloc</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> * <a class=\"id\" href=\"#mm\">mm</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#allocate_mm\">allocate_mm</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mm\">mm</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#mm\">mm</a>, 0, sizeof(*<a class=\"id\" href=\"#mm\">mm</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#mm_init\">mm_init</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mm\">mm</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called when the last reference to the mm</span>", 
"<span class=\"comment\"> * is dropped: either by a lazy thread or by</span>", 
"<span class=\"comment\"> * mmput. Free the page directory and the mm.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__mmdrop\">__mmdrop</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#mm\">mm</a> == &amp;<a class=\"id\" href=\"#init_mm\">init_mm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm_free_pgd\">mm_free_pgd</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#destroy_context\">destroy_context</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mmu_notifier_mm_destroy\">mmu_notifier_mm_destroy</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_mm\">free_mm</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__mmdrop\">__mmdrop</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Decrement the use count and release all resources for an mm.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#mmput\">mmput</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mm_users\">mm_users</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#exit_aio\">exit_aio</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ksm_exit\">ksm_exit</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#exit_mmap\">exit_mmap</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_mm_exe_file\">set_mm_exe_file</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmlist\">mmlist</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mmlist_lock\">mmlist_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmlist\">mmlist</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mmlist_lock\">mmlist_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_swap_token\">put_swap_token</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#binfmt\">binfmt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#binfmt\">binfmt</a>-><a class=\"id\" href=\"#module\">module</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mmdrop\">mmdrop</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#mmput\">mmput</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * get_task_mm - acquire a reference to the task's mm</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns %NULL if the task has no mm.  Checks PF_KTHREAD (meaning</span>", 
"<span class=\"comment\"> * this kernel workthread has transiently adopted a user mm with use_mm,</span>", 
"<span class=\"comment\"> * to do its AIO) is not set and if so returns a reference to it, after</span>", 
"<span class=\"comment\"> * bumping up the use count.  User must release the mm via mmput()</span>", 
"<span class=\"comment\"> * after use.  Typically used by /proc and ptrace.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#get_task_mm\">get_task_mm</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_lock\">task_lock</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mm\">mm</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PF_KTHREAD\">PF_KTHREAD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mm_users\">mm_users</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_unlock\">task_unlock</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mm\">mm</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#get_task_mm\">get_task_mm</a>);", 
"", 
"<span class=\"comment\">/* Please note the differences between mmput and mm_release.</span>", 
"<span class=\"comment\"> * mmput is called whenever we stop holding onto a mm_struct,</span>", 
"<span class=\"comment\"> * error success whatever.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * mm_release is called after a mm_struct has been removed</span>", 
"<span class=\"comment\"> * from the current process.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This difference is important for error handling, when we</span>", 
"<span class=\"comment\"> * only half set up a mm_struct for a new process and need to restore</span>", 
"<span class=\"comment\"> * the old one.  Because we mmput the new mm_struct before</span>", 
"<span class=\"comment\"> * restoring the old one. . .</span>", 
"<span class=\"comment\"> * Eric Biederman 10 January 1998</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#mm_release\">mm_release</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#completion\">completion</a> *<a class=\"id\" href=\"#vfork_done\">vfork_done</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#vfork_done\">vfork_done</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Get rid of any futexes when releasing the mm */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FUTEX\">CONFIG_FUTEX</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#robust_list\">robust_list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#exit_robust_list\">exit_robust_list</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#robust_list\">robust_list</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_COMPAT\">CONFIG_COMPAT</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#compat_robust_list\">compat_robust_list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#compat_exit_robust_list\">compat_exit_robust_list</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#compat_robust_list\">compat_robust_list</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#pi_state_list\">pi_state_list</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#exit_pi_state_list\">exit_pi_state_list</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Get rid of any cached register state */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#deactivate_mm\">deactivate_mm</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#mm\">mm</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* notify parent sleeping on vfork() */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vfork_done\">vfork_done</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#vfork_done\">vfork_done</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#complete\">complete</a>(<a class=\"id\" href=\"#vfork_done\">vfork_done</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we're exiting normally, clear a user-space tid field if</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * requested.  We leave this alone when dying by signal, to leave</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the value intact in a core dump, and to save the unnecessary</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * trouble otherwise.  Userland only wants this done for a sys_exit.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#clear_child_tid\">clear_child_tid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PF_SIGNALED\">PF_SIGNALED</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mm_users\">mm_users</a>) &gt; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We don't check the error code - if userspace has</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * not set up a proper pointer then tough luck.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_user\">put_user</a>(0, <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#clear_child_tid\">clear_child_tid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sys_futex\">sys_futex</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#clear_child_tid\">clear_child_tid</a>, <a class=\"id\" href=\"#FUTEX_WAKE\">FUTEX_WAKE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>1, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#clear_child_tid\">clear_child_tid</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Allocate a new mm structure and copy contents from the</span>", 
"<span class=\"comment\"> * mm structure of the passed in task structure.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#dup_mm\">dup_mm</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, *<a class=\"id\" href=\"#oldmm\">oldmm</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#oldmm\">oldmm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#allocate_mm\">allocate_mm</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mm\">mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_nomem\">fail_nomem</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#oldmm\">oldmm</a>, sizeof(*<a class=\"id\" href=\"#mm\">mm</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Initializing for Swap token stuff */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#token_priority\">token_priority</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#last_interval\">last_interval</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mm_init\">mm_init</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#tsk\">tsk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_nomem\">fail_nomem</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#init_new_context\">init_new_context</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#mm\">mm</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_nocontext\">fail_nocontext</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dup_mm_exe_file\">dup_mm_exe_file</a>(<a class=\"id\" href=\"#oldmm\">oldmm</a>, <a class=\"id\" href=\"#mm\">mm</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#dup_mmap\">dup_mmap</a>(<a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#oldmm\">oldmm</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_pt\">free_pt</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#hiwater_rss\">hiwater_rss</a> = <a class=\"id\" href=\"#get_mm_rss\">get_mm_rss</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#hiwater_vm\">hiwater_vm</a> = <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#total_vm\">total_vm</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#binfmt\">binfmt</a> && !<a class=\"id\" href=\"#try_module_get\">try_module_get</a>(<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#binfmt\">binfmt</a>-><a class=\"id\" href=\"#module\">module</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_pt\">free_pt</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mm\">mm</a>;", 
"", 
"<a class=\"id\" href=\"#free_pt\">free_pt</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* don't put binfmt in mmput, we haven't got module yet */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#binfmt\">binfmt</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mmput\">mmput</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"", 
"<a class=\"id\" href=\"#fail_nomem\">fail_nomem</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<a class=\"id\" href=\"#fail_nocontext\">fail_nocontext</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If init_new_context() failed, we cannot use mmput() to free the mm</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * because it calls destroy_context()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm_free_pgd\">mm_free_pgd</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_mm\">free_mm</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#copy_mm\">copy_mm</a>(unsigned long <a class=\"id\" href=\"#clone_flags\">clone_flags</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> * <a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> * <a class=\"id\" href=\"#mm\">mm</a>, *<a class=\"id\" href=\"#oldmm\">oldmm</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#min_flt\">min_flt</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#maj_flt\">maj_flt</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#nvcsw\">nvcsw</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#nivcsw\">nivcsw</a> = 0;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DETECT_HUNG_TASK\">CONFIG_DETECT_HUNG_TASK</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#last_switch_count\">last_switch_count</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#nvcsw\">nvcsw</a> + <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#nivcsw\">nivcsw</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#active_mm\">active_mm</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Are we cloning a kernel thread?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We need to steal a active VM for that..</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#oldmm\">oldmm</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#oldmm\">oldmm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#clone_flags\">clone_flags</a> &amp; <a class=\"id\" href=\"#CLONE_VM\">CLONE_VM</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#oldmm\">oldmm</a>-><a class=\"id\" href=\"#mm_users\">mm_users</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#oldmm\">oldmm</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#good_mm\">good_mm</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#dup_mm\">dup_mm</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mm\">mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_nomem\">fail_nomem</a>;", 
"", 
"<a class=\"id\" href=\"#good_mm\">good_mm</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* Initializing for Swap token stuff */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#token_priority\">token_priority</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#last_interval\">last_interval</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#active_mm\">active_mm</a> = <a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#fail_nomem\">fail_nomem</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#copy_fs\">copy_fs</a>(unsigned long <a class=\"id\" href=\"#clone_flags\">clone_flags</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fs_struct\">fs_struct</a> *<a class=\"id\" href=\"#fs\">fs</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#fs\">fs</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#clone_flags\">clone_flags</a> &amp; <a class=\"id\" href=\"#CLONE_FS\">CLONE_FS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* tsk-&gt;fs is already what we want */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#fs\">fs</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#fs\">fs</a>-><a class=\"id\" href=\"#in_exec\">in_exec</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#fs\">fs</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fs\">fs</a>-><a class=\"id\" href=\"#users\">users</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#fs\">fs</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#fs\">fs</a> = <a class=\"id\" href=\"#copy_fs_struct\">copy_fs_struct</a>(<a class=\"id\" href=\"#fs\">fs</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#fs\">fs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#copy_files\">copy_files</a>(unsigned long <a class=\"id\" href=\"#clone_flags\">clone_flags</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> * <a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#files_struct\">files_struct</a> *<a class=\"id\" href=\"#oldf\">oldf</a>, *<a class=\"id\" href=\"#newf\">newf</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A background process may not have any files ...</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#oldf\">oldf</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#files\">files</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#oldf\">oldf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#clone_flags\">clone_flags</a> &amp; <a class=\"id\" href=\"#CLONE_FILES\">CLONE_FILES</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#oldf\">oldf</a>-><a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#newf\">newf</a> = <a class=\"id\" href=\"#dup_fd\">dup_fd</a>(<a class=\"id\" href=\"#oldf\">oldf</a>, &amp;<a class=\"id\" href=\"#error\">error</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#newf\">newf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#files\">files</a> = <a class=\"id\" href=\"#newf\">newf</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = 0;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#copy_io\">copy_io</a>(unsigned long <a class=\"id\" href=\"#clone_flags\">clone_flags</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BLOCK\">CONFIG_BLOCK</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#io_context\">io_context</a> *<a class=\"id\" href=\"#ioc\">ioc</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#io_context\">io_context</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ioc\">ioc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Share io context with parent, if CLONE_IO is set</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#clone_flags\">clone_flags</a> &amp; <a class=\"id\" href=\"#CLONE_IO\">CLONE_IO</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#io_context\">io_context</a> = <a class=\"id\" href=\"#ioc_task_link\">ioc_task_link</a>(<a class=\"id\" href=\"#ioc\">ioc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#io_context\">io_context</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#ioprio_valid\">ioprio_valid</a>(<a class=\"id\" href=\"#ioc\">ioc</a>-><a class=\"id\" href=\"#ioprio\">ioprio</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#io_context\">io_context</a> = <a class=\"id\" href=\"#alloc_io_context\">alloc_io_context</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, -1);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#io_context\">io_context</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#io_context\">io_context</a>-><a class=\"id\" href=\"#ioprio\">ioprio</a> = <a class=\"id\" href=\"#ioc\">ioc</a>-><a class=\"id\" href=\"#ioprio\">ioprio</a>;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#copy_sighand\">copy_sighand</a>(unsigned long <a class=\"id\" href=\"#clone_flags\">clone_flags</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sighand_struct\">sighand_struct</a> *<a class=\"id\" href=\"#sig\">sig</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#clone_flags\">clone_flags</a> &amp; <a class=\"id\" href=\"#CLONE_SIGHAND\">CLONE_SIGHAND</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a> = <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#sighand_cachep\">sighand_cachep</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#sighand\">sighand</a>, <a class=\"id\" href=\"#sig\">sig</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sig\">sig</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#count\">count</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#action\">action</a>, <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#action\">action</a>, sizeof(<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#action\">action</a>));", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__cleanup_sighand\">__cleanup_sighand</a>(struct <a class=\"id\" href=\"#sighand_struct\">sighand_struct</a> *<a class=\"id\" href=\"#sighand\">sighand</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#sighand\">sighand</a>-><a class=\"id\" href=\"#count\">count</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#sighand_cachep\">sighand_cachep</a>, <a class=\"id\" href=\"#sighand\">sighand</a>);", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Initialize POSIX timer handling for a thread group.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#posix_cpu_timers_init_group\">posix_cpu_timers_init_group</a>(struct <a class=\"id\" href=\"#signal_struct\">signal_struct</a> *<a class=\"id\" href=\"#sig\">sig</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#cpu_limit\">cpu_limit</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Thread group counters. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#thread_group_cputime_init\">thread_group_cputime_init</a>(<a class=\"id\" href=\"#sig\">sig</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_limit\">cpu_limit</a> = <a class=\"id\" href=\"#ACCESS_ONCE\">ACCESS_ONCE</a>(<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#rlim\">rlim</a>[<a class=\"id\" href=\"#RLIMIT_CPU\">RLIMIT_CPU</a>].<a class=\"id\" href=\"#rlim_cur\">rlim_cur</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_limit\">cpu_limit</a> != <a class=\"id\" href=\"#RLIM_INFINITY\">RLIM_INFINITY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#cputime_expires\">cputime_expires</a>.<a class=\"id\" href=\"#prof_exp\">prof_exp</a> = <a class=\"id\" href=\"#secs_to_cputime\">secs_to_cputime</a>(<a class=\"id\" href=\"#cpu_limit\">cpu_limit</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#cputimer\">cputimer</a>.<a class=\"id\" href=\"#running\">running</a> = 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The timer lists. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#cpu_timers\">cpu_timers</a>[0]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#cpu_timers\">cpu_timers</a>[1]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#cpu_timers\">cpu_timers</a>[2]);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#copy_signal\">copy_signal</a>(unsigned long <a class=\"id\" href=\"#clone_flags\">clone_flags</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#signal_struct\">signal_struct</a> *<a class=\"id\" href=\"#sig\">sig</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#clone_flags\">clone_flags</a> &amp; <a class=\"id\" href=\"#CLONE_THREAD\">CLONE_THREAD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a> = <a class=\"id\" href=\"#kmem_cache_zalloc\">kmem_cache_zalloc</a>(<a class=\"id\" href=\"#signal_cachep\">signal_cachep</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#signal\">signal</a> = <a class=\"id\" href=\"#sig\">sig</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sig\">sig</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#nr_threads\">nr_threads</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#live\">live</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#sigcnt\">sigcnt</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_waitqueue_head\">init_waitqueue_head</a>(&amp;<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#wait_chldexit\">wait_chldexit</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#clone_flags\">clone_flags</a> &amp; <a class=\"id\" href=\"#CLONE_NEWPID\">CLONE_NEWPID</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#SIGNAL_UNKILLABLE\">SIGNAL_UNKILLABLE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#curr_target\">curr_target</a> = <a class=\"id\" href=\"#tsk\">tsk</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_sigpending\">init_sigpending</a>(&amp;<a class=\"id\" href=\"#sig\">sig</a>-><a class=\"id\" href=\"#shared_pending\">shared_pending</a>);", 
];
xr_frag_insert('l/19/a778ec6c916c1dda74cc1e06d847c4eed9a44e.xr', __xr_tmp);
