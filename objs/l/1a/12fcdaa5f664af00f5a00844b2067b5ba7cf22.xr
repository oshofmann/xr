var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_SLAB_DEF_H\">_LINUX_SLAB_DEF_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#_LINUX_SLAB_DEF_H\">_LINUX_SLAB_DEF_H</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Definitions unique to the original Linux SLAB allocator.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * What we provide here is a way to optimize the frequent kmalloc</span>", 
"<span class=\"comment\"> * calls in the kernel by selecting the appropriate general cache</span>", 
"<span class=\"comment\"> * if kmalloc was called with a size that can be established at</span>", 
"<span class=\"comment\"> * compile time.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#page\">page</a>.<a class=\"id\" href=\"#h\">h</a>&gt;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* kmalloc_sizes.h needs PAGE_SIZE */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#cache\">cache</a>.<a class=\"id\" href=\"#h\">h</a>&gt;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* kmalloc_sizes.h needs L1_CACHE_BYTES */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#compiler\">compiler</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#trace\">trace</a>/<a class=\"id\" href=\"#events\">events</a>/<a class=\"id\" href=\"#kmem\">kmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Enforce a minimum alignment for the kmalloc caches.</span>", 
"<span class=\"comment\"> * Usually, the kmalloc caches are cache_line_size() aligned, except when</span>", 
"<span class=\"comment\"> * DEBUG and FORCED_DEBUG are enabled, then they are BYTES_PER_WORD aligned.</span>", 
"<span class=\"comment\"> * Some archs want to perform DMA into kmalloc caches and need a guaranteed</span>", 
"<span class=\"comment\"> * alignment larger than the alignment of a 64-bit integer.</span>", 
"<span class=\"comment\"> * ARCH_KMALLOC_MINALIGN allows that.</span>", 
"<span class=\"comment\"> * Note that increasing this value may disable some debug features.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#ARCH_DMA_MINALIGN\">ARCH_DMA_MINALIGN</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ARCH_KMALLOC_MINALIGN\">ARCH_KMALLOC_MINALIGN</a> <a class=\"id\" href=\"#ARCH_DMA_MINALIGN\">ARCH_DMA_MINALIGN</a>", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ARCH_KMALLOC_MINALIGN\">ARCH_KMALLOC_MINALIGN</a> <a class=\"id\" href=\"#__alignof__\">__alignof__</a>(unsigned long long)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#ARCH_SLAB_MINALIGN\">ARCH_SLAB_MINALIGN</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Enforce a minimum alignment for all caches.</span>", 
"<span class=\"comment\"> * Intended for archs that get misalignment faults even for BYTES_PER_WORD</span>", 
"<span class=\"comment\"> * aligned buffers. Includes ARCH_KMALLOC_MINALIGN.</span>", 
"<span class=\"comment\"> * If possible: Do not enable this flag for CONFIG_DEBUG_SLAB, it disables</span>", 
"<span class=\"comment\"> * some debug features.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ARCH_SLAB_MINALIGN\">ARCH_SLAB_MINALIGN</a> 0", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * struct kmem_cache</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * manages a cache.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> {", 
"<span class=\"comment\">/* 1) per-cpu data, touched during every alloc/free */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#array_cache\">array_cache</a> *<a class=\"id\" href=\"#array\">array</a>[<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>];", 
"<span class=\"comment\">/* 2) Cache tunables. Protected by cache_chain_mutex */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#batchcount\">batchcount</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#limit\">limit</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#shared\">shared</a>;", 
"", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#buffer_size\">buffer_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#reciprocal_buffer_size\">reciprocal_buffer_size</a>;", 
"<span class=\"comment\">/* 3) touched by every alloc &amp; free from the backend */</span>", 
"", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#flags\">flags</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* constant flags */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#num\">num</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* # of objs per slab */</span>", 
"", 
"<span class=\"comment\">/* 4) cache_grow/shrink */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* order of pgs per slab (2^n) */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#gfporder\">gfporder</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* force GFP flags, e.g. GFP_DMA */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfpflags\">gfpflags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#colour\">colour</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* cache colouring range */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#colour_off\">colour_off</a>;<span class=\"ts\"/><span class=\"comment\">/* colour offset */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#slabp_cache\">slabp_cache</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#slab_size\">slab_size</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#dflags\">dflags</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* dynamic flags */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* constructor func */</span>", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#ctor\">ctor</a>)(void *<a class=\"id\" href=\"#obj\">obj</a>);", 
"", 
"<span class=\"comment\">/* 5) cache creation/removal */</span>", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"comment\">/* 6) statistics */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_SLAB\">CONFIG_DEBUG_SLAB</a>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#num_active\">num_active</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#num_allocations\">num_allocations</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#high_mark\">high_mark</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#grown\">grown</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#reaped\">reaped</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#errors\">errors</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#max_freeable\">max_freeable</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#node_allocs\">node_allocs</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#node_frees\">node_frees</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#node_overflow\">node_overflow</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#allochit\">allochit</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#allocmiss\">allocmiss</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#freehit\">freehit</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#freemiss\">freemiss</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If debugging is enabled, then the allocator can add additional</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * fields and/or padding to every object. buffer_size contains the total</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * object size including these internal fields, the following two</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * variables contain the offset to the user object and its size.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#obj_offset\">obj_offset</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#obj_size\">obj_size</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_DEBUG_SLAB */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We put nodelists[] at the end of kmem_cache, because we want to size</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this array to nr_node_ids slots instead of MAX_NUMNODES</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (see kmem_cache_init())</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We still use [MAX_NUMNODES] and not [1] or [0] because cache_cache</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is statically defined, so we reserve the max number of nodes.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_list3\">kmem_list3</a> *<a class=\"id\" href=\"#nodelists\">nodelists</a>[<a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>];", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Do not add fields after nodelists[]</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"};", 
"", 
"<span class=\"comment\">/* Size description struct for general caches. */</span>", 
"struct <a class=\"id\" href=\"#cache_sizes\">cache_sizes</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a><span class=\"ts\"/><span class=\"ts\"/> <span class=\"ts\"/><a class=\"id\" href=\"#cs_size\">cs_size</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a><span class=\"ts\"/>*<a class=\"id\" href=\"#cs_cachep\">cs_cachep</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_ZONE_DMA\">CONFIG_ZONE_DMA</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a><span class=\"ts\"/>*<a class=\"id\" href=\"#cs_dmacachep\">cs_dmacachep</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"extern struct <a class=\"id\" href=\"#cache_sizes\">cache_sizes</a> <a class=\"id\" href=\"#malloc_sizes\">malloc_sizes</a>[];", 
"", 
"void *<a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *, <a class=\"id\" href=\"#gfp_t\">gfp_t</a>);", 
"void *<a class=\"id\" href=\"#__kmalloc\">__kmalloc</a>(<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TRACING\">CONFIG_TRACING</a>", 
"extern void *<a class=\"id\" href=\"#kmem_cache_alloc_notrace\">kmem_cache_alloc_notrace</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>);", 
"extern <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#slab_buffer_size\">slab_buffer_size</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>);", 
"#else", 
"static <a class=\"id\" href=\"#__always_inline\">__always_inline</a> void *", 
"<a class=\"id\" href=\"#kmem_cache_alloc_notrace\">kmem_cache_alloc_notrace</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#slab_buffer_size\">slab_buffer_size</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static <a class=\"id\" href=\"#__always_inline\">__always_inline</a> void *<a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__builtin_constant_p\">__builtin_constant_p</a>(<a class=\"id\" href=\"#size\">size</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ZERO_SIZE_PTR\">ZERO_SIZE_PTR</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CACHE\">CACHE</a>(<a class=\"id\" href=\"#x\">x</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> <= <a class=\"id\" href=\"#x\">x</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found\">found</a>; \\", 
"<span class=\"ts\"/><span class=\"ts\"/>else \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>++;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kmalloc_sizes\">kmalloc_sizes</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#CACHE\">CACHE</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<a class=\"id\" href=\"#found\">found</a>:", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_ZONE_DMA\">CONFIG_ZONE_DMA</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#GFP_DMA\">GFP_DMA</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a> = <a class=\"id\" href=\"#malloc_sizes\">malloc_sizes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#cs_dmacachep\">cs_dmacachep</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a> = <a class=\"id\" href=\"#malloc_sizes\">malloc_sizes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#cs_cachep\">cs_cachep</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#kmem_cache_alloc_notrace\">kmem_cache_alloc_notrace</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_kmalloc\">trace_kmalloc</a>(<a class=\"id\" href=\"#_THIS_IP_\">_THIS_IP_</a>, <a class=\"id\" href=\"#ret\">ret</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#slab_buffer_size\">slab_buffer_size</a>(<a class=\"id\" href=\"#cachep\">cachep</a>), <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__kmalloc\">__kmalloc</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"extern void *<a class=\"id\" href=\"#__kmalloc_node\">__kmalloc_node</a>(<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>, int <a class=\"id\" href=\"#node\">node</a>);", 
"extern void *<a class=\"id\" href=\"#kmem_cache_alloc_node\">kmem_cache_alloc_node</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>, int <a class=\"id\" href=\"#node\">node</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TRACING\">CONFIG_TRACING</a>", 
"extern void *<a class=\"id\" href=\"#kmem_cache_alloc_node_notrace\">kmem_cache_alloc_node_notrace</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#nodeid\">nodeid</a>);", 
"#else", 
"static <a class=\"id\" href=\"#__always_inline\">__always_inline</a> void *", 
"<a class=\"id\" href=\"#kmem_cache_alloc_node_notrace\">kmem_cache_alloc_node_notrace</a>(struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#nodeid\">nodeid</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kmem_cache_alloc_node\">kmem_cache_alloc_node</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#nodeid\">nodeid</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static <a class=\"id\" href=\"#__always_inline\">__always_inline</a> void *<a class=\"id\" href=\"#kmalloc_node\">kmalloc_node</a>(<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>, int <a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#cachep\">cachep</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__builtin_constant_p\">__builtin_constant_p</a>(<a class=\"id\" href=\"#size\">size</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ZERO_SIZE_PTR\">ZERO_SIZE_PTR</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CACHE\">CACHE</a>(<a class=\"id\" href=\"#x\">x</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> <= <a class=\"id\" href=\"#x\">x</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found\">found</a>; \\", 
"<span class=\"ts\"/><span class=\"ts\"/>else \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>++;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kmalloc_sizes\">kmalloc_sizes</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#CACHE\">CACHE</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<a class=\"id\" href=\"#found\">found</a>:", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_ZONE_DMA\">CONFIG_ZONE_DMA</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#GFP_DMA\">GFP_DMA</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a> = <a class=\"id\" href=\"#malloc_sizes\">malloc_sizes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#cs_dmacachep\">cs_dmacachep</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cachep\">cachep</a> = <a class=\"id\" href=\"#malloc_sizes\">malloc_sizes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#cs_cachep\">cs_cachep</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#kmem_cache_alloc_node_notrace\">kmem_cache_alloc_node_notrace</a>(<a class=\"id\" href=\"#cachep\">cachep</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_kmalloc_node\">trace_kmalloc_node</a>(<a class=\"id\" href=\"#_THIS_IP_\">_THIS_IP_</a>, <a class=\"id\" href=\"#ret\">ret</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#slab_buffer_size\">slab_buffer_size</a>(<a class=\"id\" href=\"#cachep\">cachep</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__kmalloc_node\">__kmalloc_node</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* CONFIG_NUMA */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* _LINUX_SLAB_DEF_H */</span>", 
];
xr_frag_insert('l/1a/12fcdaa5f664af00f5a00844b2067b5ba7cf22.xr', __xr_tmp);
