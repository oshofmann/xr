var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * fs/fs-writeback.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2002, Linus Torvalds.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Contains all the functions related to writing back and waiting</span>", 
"<span class=\"comment\"> * upon dirty inodes against superblocks, and writing back dirty</span>", 
"<span class=\"comment\"> * pages against inodes.  ie: data writeback.  Writeout of the</span>", 
"<span class=\"comment\"> * inode itself is not handled here.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 10Apr2002<span class=\"ts\"/>Andrew Morton</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Split out of fs/inode.c</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Additions for address_space-based writeback</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kthread\">kthread</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#freezer\">freezer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#writeback\">writeback</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#blkdev\">blkdev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#backing\">backing</a>-<a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#buffer_head\">buffer_head</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#tracepoint\">tracepoint</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"internal.h\"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Passed into wb_writeback(), essentially a subset of writeback_control</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#wb_writeback_work\">wb_writeback_work</a> {", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#writeback_sync_modes\">writeback_sync_modes</a> <a class=\"id\" href=\"#sync_mode\">sync_mode</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#for_kupdate\">for_kupdate</a>:1;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#range_cyclic\">range_cyclic</a>:1;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#for_background\">for_background</a>:1;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* pending work list */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#completion\">completion</a> *<a class=\"id\" href=\"#done\">done</a>;<span class=\"ts\"/><span class=\"comment\">/* set if the caller waits */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Include the creation of the trace points after defining the</span>", 
"<span class=\"comment\"> * wb_writeback_work structure so that the definition remains local to this</span>", 
"<span class=\"comment\"> * file.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CREATE_TRACE_POINTS\">CREATE_TRACE_POINTS</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#trace\">trace</a>/<a class=\"id\" href=\"#events\">events</a>/<a class=\"id\" href=\"#writeback\">writeback</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We don't actually have pdflush, but this one is exported though /proc...</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#nr_pdflush_threads\">nr_pdflush_threads</a>;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * writeback_in_progress - determine whether there is writeback in progress</span>", 
"<span class=\"comment\"> * @bdi: the device's backing_dev_info structure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Determine whether there is writeback waiting to be handled against a</span>", 
"<span class=\"comment\"> * backing device.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#writeback_in_progress\">writeback_in_progress</a>(struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#BDI_writeback_running\">BDI_writeback_running</a>, &amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#state\">state</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#inode_to_bdi\">inode_to_bdi</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_type\">s_type</a>-><a class=\"id\" href=\"#name\">name</a>, \"bdev\") == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>-><a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_bdi\">s_bdi</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#bdi_queue_work\">bdi_queue_work</a>(struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#wb_writeback_work\">wb_writeback_work</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_writeback_queue\">trace_writeback_queue</a>(<a class=\"id\" href=\"#bdi\">bdi</a>, <a class=\"id\" href=\"#work\">work</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(&amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#wb_lock\">wb_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#work_list\">work_list</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#wb\">wb</a>.<a class=\"id\" href=\"#task\">task</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_process\">wake_up_process</a>(<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#wb\">wb</a>.<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The bdi thread isn't there, wake up the forker thread which</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * will create and run it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_writeback_nothread\">trace_writeback_nothread</a>(<a class=\"id\" href=\"#bdi\">bdi</a>, <a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_process\">wake_up_process</a>(<a class=\"id\" href=\"#default_backing_dev_info\">default_backing_dev_info</a>.<a class=\"id\" href=\"#wb\">wb</a>.<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#wb_lock\">wb_lock</a>);", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#__bdi_start_writeback\">__bdi_start_writeback</a>(struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a>, long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#range_cyclic\">range_cyclic</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#for_background\">for_background</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#wb_writeback_work\">wb_writeback_work</a> *<a class=\"id\" href=\"#work\">work</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This is WB_SYNC_NONE writeback, so if allocation fails just</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * wakeup the thread for old dirty data writeback</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#work\">work</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#work\">work</a>), <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#work\">work</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#wb\">wb</a>.<a class=\"id\" href=\"#task\">task</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_writeback_nowork\">trace_writeback_nowork</a>(<a class=\"id\" href=\"#bdi\">bdi</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_process\">wake_up_process</a>(<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#wb\">wb</a>.<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#sync_mode\">sync_mode</a><span class=\"ts\"/>= <a class=\"id\" href=\"#WB_SYNC_NONE\">WB_SYNC_NONE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#nr_pages\">nr_pages</a><span class=\"ts\"/>= <a class=\"id\" href=\"#nr_pages\">nr_pages</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#range_cyclic\">range_cyclic</a> = <a class=\"id\" href=\"#range_cyclic\">range_cyclic</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#for_background\">for_background</a> = <a class=\"id\" href=\"#for_background\">for_background</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdi_queue_work\">bdi_queue_work</a>(<a class=\"id\" href=\"#bdi\">bdi</a>, <a class=\"id\" href=\"#work\">work</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bdi_start_writeback - start writeback</span>", 
"<span class=\"comment\"> * @bdi: the backing device to write from</span>", 
"<span class=\"comment\"> * @nr_pages: the number of pages to write</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *   This does WB_SYNC_NONE opportunistic writeback. The IO is only</span>", 
"<span class=\"comment\"> *   started when this function returns, we make no guarentees on</span>", 
"<span class=\"comment\"> *   completion. Caller need not hold sb s_umount semaphore.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#bdi_start_writeback\">bdi_start_writeback</a>(struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a>, long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__bdi_start_writeback\">__bdi_start_writeback</a>(<a class=\"id\" href=\"#bdi\">bdi</a>, <a class=\"id\" href=\"#nr_pages\">nr_pages</a>, <a class=\"id\" href=\"#true\">true</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bdi_start_background_writeback - start background writeback</span>", 
"<span class=\"comment\"> * @bdi: the backing device to write from</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *   This does WB_SYNC_NONE background writeback. The IO is only</span>", 
"<span class=\"comment\"> *   started when this function returns, we make no guarentees on</span>", 
"<span class=\"comment\"> *   completion. Caller need not hold sb s_umount semaphore.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#bdi_start_background_writeback\">bdi_start_background_writeback</a>(struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__bdi_start_writeback\">__bdi_start_writeback</a>(<a class=\"id\" href=\"#bdi\">bdi</a>, <a class=\"id\" href=\"#LONG_MAX\">LONG_MAX</a>, <a class=\"id\" href=\"#true\">true</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Redirty an inode: set its when-it-was dirtied timestamp and move it to the</span>", 
"<span class=\"comment\"> * furthest end of its superblock's dirty-inode list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Before stamping the inode's -&gt;dirtied_when, we check to see whether it is</span>", 
"<span class=\"comment\"> * already the most-recently-dirtied inode on the b_dirty list.  If that is</span>", 
"<span class=\"comment\"> * the case then the inode must have been redirtied while it was being written</span>", 
"<span class=\"comment\"> * out and we don't reset its dirtied_when.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#redirty_tail\">redirty_tail</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bdi_writeback\">bdi_writeback</a> *<a class=\"id\" href=\"#wb\">wb</a> = &amp;<a class=\"id\" href=\"#inode_to_bdi\">inode_to_bdi</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#wb\">wb</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#wb\">wb</a>-><a class=\"id\" href=\"#b_dirty\">b_dirty</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#tail\">tail</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tail\">tail</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#wb\">wb</a>-><a class=\"id\" href=\"#b_dirty\">b_dirty</a>.<a class=\"id\" href=\"#next\">next</a>, struct <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#i_list\">i_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#time_before\">time_before</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#dirtied_when\">dirtied_when</a>, <a class=\"id\" href=\"#tail\">tail</a>-><a class=\"id\" href=\"#dirtied_when\">dirtied_when</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#dirtied_when\">dirtied_when</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_move\">list_move</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_list\">i_list</a>, &amp;<a class=\"id\" href=\"#wb\">wb</a>-><a class=\"id\" href=\"#b_dirty\">b_dirty</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * requeue inode for re-scanning after bdi-&gt;b_io list is exhausted.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#requeue_io\">requeue_io</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bdi_writeback\">bdi_writeback</a> *<a class=\"id\" href=\"#wb\">wb</a> = &amp;<a class=\"id\" href=\"#inode_to_bdi\">inode_to_bdi</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#wb\">wb</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_move\">list_move</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_list\">i_list</a>, &amp;<a class=\"id\" href=\"#wb\">wb</a>-><a class=\"id\" href=\"#b_more_io\">b_more_io</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#inode_sync_complete\">inode_sync_complete</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Prevent speculative execution through spin_unlock(&amp;inode_lock);</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up_bit\">wake_up_bit</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a>, <a class=\"id\" href=\"#__I_SYNC\">__I_SYNC</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#inode_dirtied_after\">inode_dirtied_after</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, unsigned long <a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#time_after\">time_after</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#dirtied_when\">dirtied_when</a>, <a class=\"id\" href=\"#t\">t</a>);", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_64BIT\">CONFIG_64BIT</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For inodes being constantly redirtied, dirtied_when can get stuck.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It _appears_ to be in the future, but is actually in distant past.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This test is necessary to prevent such wrapped-around relative times</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * from permanently stopping the whole bdi writeback.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ret\">ret</a> && <a class=\"id\" href=\"#time_before_eq\">time_before_eq</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#dirtied_when\">dirtied_when</a>, <a class=\"id\" href=\"#jiffies\">jiffies</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Move expired dirty inodes from @delaying_queue to @dispatch_queue.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#move_expired_inodes\">move_expired_inodes</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#delaying_queue\">delaying_queue</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#dispatch_queue\">dispatch_queue</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#older_than_this\">older_than_this</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#pos\">pos</a>, *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#do_sb_sort\">do_sb_sort</a> = 0;", 
"", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#delaying_queue\">delaying_queue</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#delaying_queue\">delaying_queue</a>-><a class=\"id\" href=\"#prev\">prev</a>, struct <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#i_list\">i_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#older_than_this\">older_than_this</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#inode_dirtied_after\">inode_dirtied_after</a>(<a class=\"id\" href=\"#inode\">inode</a>, *<a class=\"id\" href=\"#older_than_this\">older_than_this</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sb\">sb</a> && <a class=\"id\" href=\"#sb\">sb</a> != <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_sb_sort\">do_sb_sort</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move\">list_move</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_list\">i_list</a>, &amp;<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* just one sb in list, splice to dispatch_queue and we're done */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#do_sb_sort\">do_sb_sort</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_splice\">list_splice</a>(&amp;<a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#dispatch_queue\">dispatch_queue</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Move inodes from one superblock together */</span>", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#tmp\">tmp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#tmp\">tmp</a>.<a class=\"id\" href=\"#prev\">prev</a>, struct <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#i_list\">i_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_prev_safe\">list_for_each_prev_safe</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#tmp\">tmp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#pos\">pos</a>, struct <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#i_list\">i_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a> == <a class=\"id\" href=\"#sb\">sb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move\">list_move</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_list\">i_list</a>, <a class=\"id\" href=\"#dispatch_queue\">dispatch_queue</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Queue all expired dirty inodes for io, eldest first.</span>", 
"<span class=\"comment\"> * Before</span>", 
"<span class=\"comment\"> *         newly dirtied     b_dirty    b_io    b_more_io</span>", 
"<span class=\"comment\"> *         =============&gt;    gf         edc     BA</span>", 
"<span class=\"comment\"> * After</span>", 
"<span class=\"comment\"> *         newly dirtied     b_dirty    b_io    b_more_io</span>", 
"<span class=\"comment\"> *         =============&gt;    g          fBAedc</span>", 
"<span class=\"comment\"> *                                           |</span>", 
"<span class=\"comment\"> *                                           +--&gt; dequeue for IO</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#queue_io\">queue_io</a>(struct <a class=\"id\" href=\"#bdi_writeback\">bdi_writeback</a> *<a class=\"id\" href=\"#wb\">wb</a>, unsigned long *<a class=\"id\" href=\"#older_than_this\">older_than_this</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_splice_init\">list_splice_init</a>(&amp;<a class=\"id\" href=\"#wb\">wb</a>-><a class=\"id\" href=\"#b_more_io\">b_more_io</a>, &amp;<a class=\"id\" href=\"#wb\">wb</a>-><a class=\"id\" href=\"#b_io\">b_io</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#move_expired_inodes\">move_expired_inodes</a>(&amp;<a class=\"id\" href=\"#wb\">wb</a>-><a class=\"id\" href=\"#b_dirty\">b_dirty</a>, &amp;<a class=\"id\" href=\"#wb\">wb</a>-><a class=\"id\" href=\"#b_io\">b_io</a>, <a class=\"id\" href=\"#older_than_this\">older_than_this</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#write_inode\">write_inode</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a> *<a class=\"id\" href=\"#wbc\">wbc</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_op\">s_op</a>-><a class=\"id\" href=\"#write_inode\">write_inode</a> && !<a class=\"id\" href=\"#is_bad_inode\">is_bad_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_op\">s_op</a>-><a class=\"id\" href=\"#write_inode\">write_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#wbc\">wbc</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Wait for writeback on an inode to complete.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#inode_wait_for_writeback\">inode_wait_for_writeback</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEFINE_WAIT_BIT\">DEFINE_WAIT_BIT</a>(<a class=\"id\" href=\"#wq\">wq</a>, &amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a>, <a class=\"id\" href=\"#__I_SYNC\">__I_SYNC</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#wqh\">wqh</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wqh\">wqh</a> = <a class=\"id\" href=\"#bit_waitqueue\">bit_waitqueue</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a>, <a class=\"id\" href=\"#__I_SYNC\">__I_SYNC</a>);", 
"<span class=\"ts\"/> while (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> &amp; <a class=\"id\" href=\"#I_SYNC\">I_SYNC</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__wait_on_bit\">__wait_on_bit</a>(<a class=\"id\" href=\"#wqh\">wqh</a>, &amp;<a class=\"id\" href=\"#wq\">wq</a>, <a class=\"id\" href=\"#inode_wait\">inode_wait</a>, <a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Write out an inode's dirty pages.  Called under inode_lock.  Either the</span>", 
"<span class=\"comment\"> * caller has ref on the inode (either via __iget or via syscall against an fd)</span>", 
"<span class=\"comment\"> * or the inode has I_WILL_FREE set (via generic_forget_inode)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If `wait' is set, wait on the writeout.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The whole writeout design is quite complex and fragile.  We want to avoid</span>", 
"<span class=\"comment\"> * starvation of particular inodes when others are being redirtied, prevent</span>", 
"<span class=\"comment\"> * livelocks, etc.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Called under inode_lock.</span>", 
"<span class=\"comment\"> */</span>", 
"static int", 
"<a class=\"id\" href=\"#writeback_single_inode\">writeback_single_inode</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a> *<a class=\"id\" href=\"#wbc\">wbc</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#dirty\">dirty</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_count\">i_count</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> &amp; (<a class=\"id\" href=\"#I_WILL_FREE\">I_WILL_FREE</a>|<a class=\"id\" href=\"#I_FREEING\">I_FREEING</a>)));", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> &amp; <a class=\"id\" href=\"#I_WILL_FREE\">I_WILL_FREE</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> &amp; <a class=\"id\" href=\"#I_SYNC\">I_SYNC</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If this inode is locked for writeback and we are not doing</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * writeback-for-data-integrity, move it to b_more_io so that</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * writeback can proceed with the other inodes on s_io.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We'll have another go at writing back this inode when we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * completed a full scan of b_io.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#wbc\">wbc</a>-><a class=\"id\" href=\"#sync_mode\">sync_mode</a> != <a class=\"id\" href=\"#WB_SYNC_ALL\">WB_SYNC_ALL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#requeue_io\">requeue_io</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * It's a data-integrity sync.  We must wait.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode_wait_for_writeback\">inode_wait_for_writeback</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> &amp; <a class=\"id\" href=\"#I_SYNC\">I_SYNC</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set I_SYNC, reset I_DIRTY_PAGES */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> |= <a class=\"id\" href=\"#I_SYNC\">I_SYNC</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> &= ~<a class=\"id\" href=\"#I_DIRTY_PAGES\">I_DIRTY_PAGES</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#do_writepages\">do_writepages</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#wbc\">wbc</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Make sure to wait on the data before writing out the metadata.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This is important for filesystems that modify metadata on data</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * I/O completion.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#wbc\">wbc</a>-><a class=\"id\" href=\"#sync_mode\">sync_mode</a> == <a class=\"id\" href=\"#WB_SYNC_ALL\">WB_SYNC_ALL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#filemap_fdatawait\">filemap_fdatawait</a>(<a class=\"id\" href=\"#mapping\">mapping</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Some filesystems may redirty the inode during the writeback</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * due to delalloc, clear dirty metadata flags right before</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * write_inode()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dirty\">dirty</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> &amp; <a class=\"id\" href=\"#I_DIRTY\">I_DIRTY</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> &= ~(<a class=\"id\" href=\"#I_DIRTY_SYNC\">I_DIRTY_SYNC</a> | <a class=\"id\" href=\"#I_DIRTY_DATASYNC\">I_DIRTY_DATASYNC</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't write the inode if only I_DIRTY_PAGES was set */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dirty\">dirty</a> &amp; (<a class=\"id\" href=\"#I_DIRTY_SYNC\">I_DIRTY_SYNC</a> | <a class=\"id\" href=\"#I_DIRTY_DATASYNC\">I_DIRTY_DATASYNC</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#write_inode\">write_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#wbc\">wbc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> &= ~<a class=\"id\" href=\"#I_SYNC\">I_SYNC</a>;", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> &amp; <a class=\"id\" href=\"#I_FREEING\">I_FREEING</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mapping_tagged\">mapping_tagged</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#PAGECACHE_TAG_DIRTY\">PAGECACHE_TAG_DIRTY</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We didn't write back all the pages.  nfs_writepages()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * sometimes bales out without doing anything.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> |= <a class=\"id\" href=\"#I_DIRTY_PAGES\">I_DIRTY_PAGES</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#wbc\">wbc</a>-><a class=\"id\" href=\"#nr_to_write\">nr_to_write</a> <= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * slice used up: queue for next turn</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#requeue_io\">requeue_io</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Writeback blocked by something other than</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * congestion. Delay the inode for some time to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * avoid spinning on the CPU (100% iowait)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * retrying writeback of the dirty page/inode</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * that cannot be performed immediately.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#redirty_tail\">redirty_tail</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> &amp; <a class=\"id\" href=\"#I_DIRTY\">I_DIRTY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Filesystems can dirty the inode during writeback</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * operations, such as delayed allocation during</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * submission or metadata updates after data IO</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * completion.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#redirty_tail\">redirty_tail</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_count\">i_count</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * The inode is clean, inuse</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move\">list_move</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_list\">i_list</a>, &amp;<a class=\"id\" href=\"#inode_in_use\">inode_in_use</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * The inode is clean, unused</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move\">list_move</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_list\">i_list</a>, &amp;<a class=\"id\" href=\"#inode_unused\">inode_unused</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode_sync_complete\">inode_sync_complete</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * For background writeback the caller does not have the sb pinned</span>", 
"<span class=\"comment\"> * before calling writeback. So make sure that we do pin it, so it doesn't</span>", 
"<span class=\"comment\"> * go away while we are writing inodes from it.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#pin_sb_for_writeback\">pin_sb_for_writeback</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#sb_lock\">sb_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_instances\">s_instances</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sb_lock\">sb_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_count\">s_count</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sb_lock\">sb_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#down_read_trylock\">down_read_trylock</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_umount\">s_umount</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_root\">s_root</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_umount\">s_umount</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_super\">put_super</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Write a portion of b_io inodes which belong to @sb.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If @only_this_sb is true, then find and write all such</span>", 
"<span class=\"comment\"> * inodes. Otherwise write only ones which go sequentially</span>", 
"<span class=\"comment\"> * in reverse order.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return 1, if the caller writeback routine should be</span>", 
"<span class=\"comment\"> * interrupted. Otherwise return 0.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#writeback_sb_inodes\">writeback_sb_inodes</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, struct <a class=\"id\" href=\"#bdi_writeback\">bdi_writeback</a> *<a class=\"id\" href=\"#wb\">wb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a> *<a class=\"id\" href=\"#wbc\">wbc</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#only_this_sb\">only_this_sb</a>)", 
"{", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#wb\">wb</a>-><a class=\"id\" href=\"#b_io\">b_io</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>long <a class=\"id\" href=\"#pages_skipped\">pages_skipped</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#wb\">wb</a>-><a class=\"id\" href=\"#b_io\">b_io</a>.<a class=\"id\" href=\"#prev\">prev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#i_list\">i_list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a> != <a class=\"id\" href=\"#sb\">sb</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#only_this_sb\">only_this_sb</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We only want to write back data for this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * superblock, move all inodes not belonging</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * to it back onto the dirty list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#redirty_tail\">redirty_tail</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * The inode belongs to a different superblock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Bounce back to the caller to unpin this and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * pin the next superblock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> &amp; (<a class=\"id\" href=\"#I_NEW\">I_NEW</a> | <a class=\"id\" href=\"#I_WILL_FREE\">I_WILL_FREE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#requeue_io\">requeue_io</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Was this inode dirtied after sync_sb_inodes was called?</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This keeps sync from extra jobs and livelock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inode_dirtied_after\">inode_dirtied_after</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#wbc\">wbc</a>-><a class=\"id\" href=\"#wb_start\">wb_start</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> &amp; <a class=\"id\" href=\"#I_FREEING\">I_FREEING</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__iget\">__iget</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages_skipped\">pages_skipped</a> = <a class=\"id\" href=\"#wbc\">wbc</a>-><a class=\"id\" href=\"#pages_skipped\">pages_skipped</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#writeback_single_inode\">writeback_single_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#wbc\">wbc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#wbc\">wbc</a>-><a class=\"id\" href=\"#pages_skipped\">pages_skipped</a> != <a class=\"id\" href=\"#pages_skipped\">pages_skipped</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * writeback is not making progress due to locked</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * buffers.  Skip this inode for now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#redirty_tail\">redirty_tail</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iput\">iput</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#wbc\">wbc</a>-><a class=\"id\" href=\"#nr_to_write\">nr_to_write</a> <= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wbc\">wbc</a>-><a class=\"id\" href=\"#more_io\">more_io</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#wb\">wb</a>-><a class=\"id\" href=\"#b_more_io\">b_more_io</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wbc\">wbc</a>-><a class=\"id\" href=\"#more_io\">more_io</a> = 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* b_io is empty */</span>", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"void <a class=\"id\" href=\"#writeback_inodes_wb\">writeback_inodes_wb</a>(struct <a class=\"id\" href=\"#bdi_writeback\">bdi_writeback</a> *<a class=\"id\" href=\"#wb\">wb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a> *<a class=\"id\" href=\"#wbc\">wbc</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#wbc\">wbc</a>-><a class=\"id\" href=\"#wb_start\">wb_start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wbc\">wbc</a>-><a class=\"id\" href=\"#wb_start\">wb_start</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>; <span class=\"comment\">/* livelock avoidance */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#wbc\">wbc</a>-><a class=\"id\" href=\"#for_kupdate\">for_kupdate</a> || <a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#wb\">wb</a>-><a class=\"id\" href=\"#b_io\">b_io</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#queue_io\">queue_io</a>(<a class=\"id\" href=\"#wb\">wb</a>, <a class=\"id\" href=\"#wbc\">wbc</a>-><a class=\"id\" href=\"#older_than_this\">older_than_this</a>);", 
"", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#wb\">wb</a>-><a class=\"id\" href=\"#b_io\">b_io</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#wb\">wb</a>-><a class=\"id\" href=\"#b_io\">b_io</a>.<a class=\"id\" href=\"#prev\">prev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#i_list\">i_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pin_sb_for_writeback\">pin_sb_for_writeback</a>(<a class=\"id\" href=\"#sb\">sb</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#requeue_io\">requeue_io</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#writeback_sb_inodes\">writeback_sb_inodes</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#wb\">wb</a>, <a class=\"id\" href=\"#wbc\">wbc</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drop_super\">drop_super</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Leave any unwritten inodes on b_io */</span>", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__writeback_inodes_sb\">__writeback_inodes_sb</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#bdi_writeback\">bdi_writeback</a> *<a class=\"id\" href=\"#wb\">wb</a>, struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a> *<a class=\"id\" href=\"#wbc\">wbc</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#rwsem_is_locked\">rwsem_is_locked</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_umount\">s_umount</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#wbc\">wbc</a>-><a class=\"id\" href=\"#for_kupdate\">for_kupdate</a> || <a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#wb\">wb</a>-><a class=\"id\" href=\"#b_io\">b_io</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#queue_io\">queue_io</a>(<a class=\"id\" href=\"#wb\">wb</a>, <a class=\"id\" href=\"#wbc\">wbc</a>-><a class=\"id\" href=\"#older_than_this\">older_than_this</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#writeback_sb_inodes\">writeback_sb_inodes</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#wb\">wb</a>, <a class=\"id\" href=\"#wbc\">wbc</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The maximum number of pages to writeout in a single bdi flush/kupdate</span>", 
"<span class=\"comment\"> * operation.  We do this so we don't hold I_SYNC against an inode for</span>", 
"<span class=\"comment\"> * enormous amounts of time, which would block a userspace task which has</span>", 
"<span class=\"comment\"> * been forced to throttle against that inode.  Also, the code reevaluates</span>", 
"<span class=\"comment\"> * the dirty each time it has written this many pages.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_WRITEBACK_PAGES\">MAX_WRITEBACK_PAGES</a>     1024", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#over_bground_thresh\">over_bground_thresh</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#background_thresh\">background_thresh</a>, <a class=\"id\" href=\"#dirty_thresh\">dirty_thresh</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#global_dirty_limits\">global_dirty_limits</a>(&amp;<a class=\"id\" href=\"#background_thresh\">background_thresh</a>, &amp;<a class=\"id\" href=\"#dirty_thresh\">dirty_thresh</a>);", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_FILE_DIRTY\">NR_FILE_DIRTY</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_UNSTABLE_NFS\">NR_UNSTABLE_NFS</a>) >= <a class=\"id\" href=\"#background_thresh\">background_thresh</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Explicit flushing or periodic writeback of \"old\" data.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Define \"old\": the first time one of an inode's pages is dirtied, we mark the</span>", 
"<span class=\"comment\"> * dirtying-time in the inode's address_space.  So this periodic writeback code</span>", 
"<span class=\"comment\"> * just walks the superblock inode list, writing back any inodes which are</span>", 
"<span class=\"comment\"> * older than a specific point in time.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Try to run once per dirty_writeback_interval.  But if a writeback event</span>", 
"<span class=\"comment\"> * takes longer than a dirty_writeback_interval interval, then leave a</span>", 
"<span class=\"comment\"> * one-second gap.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * older_than_this takes precedence over nr_to_write.  So we'll only write back</span>", 
"<span class=\"comment\"> * all dirty pages if they are all attached to \"old\" mappings.</span>", 
"<span class=\"comment\"> */</span>", 
"static long <a class=\"id\" href=\"#wb_writeback\">wb_writeback</a>(struct <a class=\"id\" href=\"#bdi_writeback\">bdi_writeback</a> *<a class=\"id\" href=\"#wb\">wb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#wb_writeback_work\">wb_writeback_work</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a> <a class=\"id\" href=\"#wbc\">wbc</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#sync_mode\">sync_mode</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#sync_mode\">sync_mode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#older_than_this\">older_than_this</a><span class=\"ts\"/>= <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#for_kupdate\">for_kupdate</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#for_kupdate\">for_kupdate</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#for_background\">for_background</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#for_background\">for_background</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#range_cyclic\">range_cyclic</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#range_cyclic\">range_cyclic</a>,", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#oldest_jif\">oldest_jif</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#wrote\">wrote</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#wbc\">wbc</a>.<a class=\"id\" href=\"#for_kupdate\">for_kupdate</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wbc\">wbc</a>.<a class=\"id\" href=\"#older_than_this\">older_than_this</a> = &amp;<a class=\"id\" href=\"#oldest_jif\">oldest_jif</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#oldest_jif\">oldest_jif</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> -", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msecs_to_jiffies\">msecs_to_jiffies</a>(<a class=\"id\" href=\"#dirty_expire_interval\">dirty_expire_interval</a> * 10);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#wbc\">wbc</a>.<a class=\"id\" href=\"#range_cyclic\">range_cyclic</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wbc\">wbc</a>.<a class=\"id\" href=\"#range_start\">range_start</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wbc\">wbc</a>.<a class=\"id\" href=\"#range_end\">range_end</a> = <a class=\"id\" href=\"#LLONG_MAX\">LLONG_MAX</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wbc\">wbc</a>.<a class=\"id\" href=\"#wb_start\">wb_start</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>; <span class=\"comment\">/* livelock avoidance */</span>", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Stop writeback when nr_pages has been consumed</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#nr_pages\">nr_pages</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * For background writeout, stop when we are below the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * background dirty threshold</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#for_background\">for_background</a> && !<a class=\"id\" href=\"#over_bground_thresh\">over_bground_thresh</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wbc\">wbc</a>.<a class=\"id\" href=\"#more_io\">more_io</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wbc\">wbc</a>.<a class=\"id\" href=\"#nr_to_write\">nr_to_write</a> = <a class=\"id\" href=\"#MAX_WRITEBACK_PAGES\">MAX_WRITEBACK_PAGES</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wbc\">wbc</a>.<a class=\"id\" href=\"#pages_skipped\">pages_skipped</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_wbc_writeback_start\">trace_wbc_writeback_start</a>(&amp;<a class=\"id\" href=\"#wbc\">wbc</a>, <a class=\"id\" href=\"#wb\">wb</a>-><a class=\"id\" href=\"#bdi\">bdi</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#sb\">sb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__writeback_inodes_sb\">__writeback_inodes_sb</a>(<a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#wb\">wb</a>, &amp;<a class=\"id\" href=\"#wbc\">wbc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#writeback_inodes_wb\">writeback_inodes_wb</a>(<a class=\"id\" href=\"#wb\">wb</a>, &amp;<a class=\"id\" href=\"#wbc\">wbc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_wbc_writeback_written\">trace_wbc_writeback_written</a>(&amp;<a class=\"id\" href=\"#wbc\">wbc</a>, <a class=\"id\" href=\"#wb\">wb</a>-><a class=\"id\" href=\"#bdi\">bdi</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#nr_pages\">nr_pages</a> -= <a class=\"id\" href=\"#MAX_WRITEBACK_PAGES\">MAX_WRITEBACK_PAGES</a> - <a class=\"id\" href=\"#wbc\">wbc</a>.<a class=\"id\" href=\"#nr_to_write\">nr_to_write</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wrote\">wrote</a> += <a class=\"id\" href=\"#MAX_WRITEBACK_PAGES\">MAX_WRITEBACK_PAGES</a> - <a class=\"id\" href=\"#wbc\">wbc</a>.<a class=\"id\" href=\"#nr_to_write\">nr_to_write</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If we consumed everything, see if we have more</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#wbc\">wbc</a>.<a class=\"id\" href=\"#nr_to_write\">nr_to_write</a> <= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Didn't write everything and we don't have more IO, bail</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#wbc\">wbc</a>.<a class=\"id\" href=\"#more_io\">more_io</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Did we write something? Try for more</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#wbc\">wbc</a>.<a class=\"id\" href=\"#nr_to_write\">nr_to_write</a> &lt; <a class=\"id\" href=\"#MAX_WRITEBACK_PAGES\">MAX_WRITEBACK_PAGES</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Nothing written. Wait for some inode to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * become available for writeback. Otherwise</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we'll just busyloop.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#wb\">wb</a>-><a class=\"id\" href=\"#b_more_io\">b_more_io</a>))  {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#wb\">wb</a>-><a class=\"id\" href=\"#b_more_io\">b_more_io</a>.<a class=\"id\" href=\"#prev\">prev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#i_list\">i_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_wbc_writeback_wait\">trace_wbc_writeback_wait</a>(&amp;<a class=\"id\" href=\"#wbc\">wbc</a>, <a class=\"id\" href=\"#wb\">wb</a>-><a class=\"id\" href=\"#bdi\">bdi</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode_wait_for_writeback\">inode_wait_for_writeback</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#wrote\">wrote</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return the next wb_writeback_work struct that hasn't been processed yet.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#wb_writeback_work\">wb_writeback_work</a> *", 
"<a class=\"id\" href=\"#get_next_work_item\">get_next_work_item</a>(struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#wb_writeback_work\">wb_writeback_work</a> *<a class=\"id\" href=\"#work\">work</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(&amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#wb_lock\">wb_lock</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#work_list\">work_list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#work\">work</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#work_list\">work_list</a>.<a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#wb_writeback_work\">wb_writeback_work</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#wb_lock\">wb_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#work\">work</a>;", 
"}", 
"", 
"static long <a class=\"id\" href=\"#wb_check_old_data_flush\">wb_check_old_data_flush</a>(struct <a class=\"id\" href=\"#bdi_writeback\">bdi_writeback</a> *<a class=\"id\" href=\"#wb\">wb</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#expired\">expired</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * When set to zero, disable periodic writeback</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dirty_writeback_interval\">dirty_writeback_interval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#expired\">expired</a> = <a class=\"id\" href=\"#wb\">wb</a>-><a class=\"id\" href=\"#last_old_flush\">last_old_flush</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msecs_to_jiffies\">msecs_to_jiffies</a>(<a class=\"id\" href=\"#dirty_writeback_interval\">dirty_writeback_interval</a> * 10);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#time_before\">time_before</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#expired\">expired</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wb\">wb</a>-><a class=\"id\" href=\"#last_old_flush\">last_old_flush</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a> = <a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_FILE_DIRTY\">NR_FILE_DIRTY</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_UNSTABLE_NFS\">NR_UNSTABLE_NFS</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#inodes_stat\">inodes_stat</a>.<a class=\"id\" href=\"#nr_inodes\">nr_inodes</a> - <a class=\"id\" href=\"#inodes_stat\">inodes_stat</a>.<a class=\"id\" href=\"#nr_unused\">nr_unused</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_pages\">nr_pages</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#wb_writeback_work\">wb_writeback_work</a> <a class=\"id\" href=\"#work\">work</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#nr_pages\">nr_pages</a><span class=\"ts\"/>= <a class=\"id\" href=\"#nr_pages\">nr_pages</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#sync_mode\">sync_mode</a><span class=\"ts\"/>= <a class=\"id\" href=\"#WB_SYNC_NONE\">WB_SYNC_NONE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#for_kupdate\">for_kupdate</a><span class=\"ts\"/>= 1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#range_cyclic\">range_cyclic</a><span class=\"ts\"/>= 1,", 
"<span class=\"ts\"/><span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#wb_writeback\">wb_writeback</a>(<a class=\"id\" href=\"#wb\">wb</a>, &amp;<a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Retrieve work items and do the writeback they describe</span>", 
"<span class=\"comment\"> */</span>", 
"long <a class=\"id\" href=\"#wb_do_writeback\">wb_do_writeback</a>(struct <a class=\"id\" href=\"#bdi_writeback\">bdi_writeback</a> *<a class=\"id\" href=\"#wb\">wb</a>, int <a class=\"id\" href=\"#force_wait\">force_wait</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a> = <a class=\"id\" href=\"#wb\">wb</a>-><a class=\"id\" href=\"#bdi\">bdi</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#wb_writeback_work\">wb_writeback_work</a> *<a class=\"id\" href=\"#work\">work</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#wrote\">wrote</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#BDI_writeback_running\">BDI_writeback_running</a>, &amp;<a class=\"id\" href=\"#wb\">wb</a>-><a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#state\">state</a>);", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#work\">work</a> = <a class=\"id\" href=\"#get_next_work_item\">get_next_work_item</a>(<a class=\"id\" href=\"#bdi\">bdi</a>)) != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Override sync mode, in case we must wait for completion</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * because this thread is exiting now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#force_wait\">force_wait</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#sync_mode\">sync_mode</a> = <a class=\"id\" href=\"#WB_SYNC_ALL\">WB_SYNC_ALL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_writeback_exec\">trace_writeback_exec</a>(<a class=\"id\" href=\"#bdi\">bdi</a>, <a class=\"id\" href=\"#work\">work</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wrote\">wrote</a> += <a class=\"id\" href=\"#wb_writeback\">wb_writeback</a>(<a class=\"id\" href=\"#wb\">wb</a>, <a class=\"id\" href=\"#work\">work</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Notify the caller of completion if this is a synchronous</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * work item, otherwise just free it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#done\">done</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#complete\">complete</a>(<a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#done\">done</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check for periodic writeback, kupdated() style</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wrote\">wrote</a> += <a class=\"id\" href=\"#wb_check_old_data_flush\">wb_check_old_data_flush</a>(<a class=\"id\" href=\"#wb\">wb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#BDI_writeback_running\">BDI_writeback_running</a>, &amp;<a class=\"id\" href=\"#wb\">wb</a>-><a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#state\">state</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#wrote\">wrote</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Handle writeback of dirty data for the device backed by this bdi. Also</span>", 
"<span class=\"comment\"> * wakes up periodically and does kupdated style flushing.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#bdi_writeback_thread\">bdi_writeback_thread</a>(void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bdi_writeback\">bdi_writeback</a> *<a class=\"id\" href=\"#wb\">wb</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a> = <a class=\"id\" href=\"#wb\">wb</a>-><a class=\"id\" href=\"#bdi\">bdi</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#pages_written\">pages_written</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#PF_FLUSHER\">PF_FLUSHER</a> | <a class=\"id\" href=\"#PF_SWAPWRITE\">PF_SWAPWRITE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_freezable\">set_freezable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wb\">wb</a>-><a class=\"id\" href=\"#last_active\">last_active</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Our parent may run at a different priority, just set us to normal</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_user_nice\">set_user_nice</a>(<a class=\"id\" href=\"#current\">current</a>, 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_writeback_thread_start\">trace_writeback_thread_start</a>(<a class=\"id\" href=\"#bdi\">bdi</a>);", 
"", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#kthread_should_stop\">kthread_should_stop</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Remove own delayed wake-up timer, since we are already awake</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and we'll take care of the preriodic write-back.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#del_timer\">del_timer</a>(&amp;<a class=\"id\" href=\"#wb\">wb</a>-><a class=\"id\" href=\"#wakeup_timer\">wakeup_timer</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages_written\">pages_written</a> = <a class=\"id\" href=\"#wb_do_writeback\">wb_do_writeback</a>(<a class=\"id\" href=\"#wb\">wb</a>, 0);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_writeback_pages_written\">trace_writeback_pages_written</a>(<a class=\"id\" href=\"#pages_written\">pages_written</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pages_written\">pages_written</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wb\">wb</a>-><a class=\"id\" href=\"#last_active\">last_active</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_current_state\">set_current_state</a>(<a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#work_list\">work_list</a>) || <a class=\"id\" href=\"#kthread_should_stop\">kthread_should_stop</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#wb_has_dirty_io\">wb_has_dirty_io</a>(<a class=\"id\" href=\"#wb\">wb</a>) && <a class=\"id\" href=\"#dirty_writeback_interval\">dirty_writeback_interval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule_timeout\">schedule_timeout</a>(<a class=\"id\" href=\"#msecs_to_jiffies\">msecs_to_jiffies</a>(<a class=\"id\" href=\"#dirty_writeback_interval\">dirty_writeback_interval</a> * 10));", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We have nothing to do, so can go sleep without any</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * timeout and save power. When a work is queued or</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * something is made dirty - we will be woken up.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#try_to_freeze\">try_to_freeze</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Flush any work that raced with us exiting */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#work_list\">work_list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wb_do_writeback\">wb_do_writeback</a>(<a class=\"id\" href=\"#wb\">wb</a>, 1);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_writeback_thread_stop\">trace_writeback_thread_stop</a>(<a class=\"id\" href=\"#bdi\">bdi</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Start writeback of `nr_pages' pages.  If `nr_pages' is zero, write back</span>", 
"<span class=\"comment\"> * the whole world.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#wakeup_flusher_threads\">wakeup_flusher_threads</a>(long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#nr_pages\">nr_pages</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a> = <a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_FILE_DIRTY\">NR_FILE_DIRTY</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_UNSTABLE_NFS\">NR_UNSTABLE_NFS</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#bdi\">bdi</a>, &amp;<a class=\"id\" href=\"#bdi_list\">bdi_list</a>, <a class=\"id\" href=\"#bdi_list\">bdi_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bdi_has_dirty_io\">bdi_has_dirty_io</a>(<a class=\"id\" href=\"#bdi\">bdi</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__bdi_start_writeback\">__bdi_start_writeback</a>(<a class=\"id\" href=\"#bdi\">bdi</a>, <a class=\"id\" href=\"#nr_pages\">nr_pages</a>, <a class=\"id\" href=\"#false\">false</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"}", 
"", 
"static <a class=\"id\" href=\"#noinline\">noinline</a> void <a class=\"id\" href=\"#block_dump___mark_inode_dirty\">block_dump___mark_inode_dirty</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a> || <a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_id\">s_id</a>, \"bdev\")) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a> = \"?\";", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dentry\">dentry</a> = <a class=\"id\" href=\"#d_find_alias\">d_find_alias</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dentry\">dentry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_lock\">d_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#name\">name</a> = (const char *) <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_name\">d_name</a>.<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"%s(%d): dirtied inode %lu (%s) on %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#task_pid_nr\">task_pid_nr</a>(<a class=\"id\" href=\"#current\">current</a>), <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_id\">s_id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dentry\">dentry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_lock\">d_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dput\">dput</a>(<a class=\"id\" href=\"#dentry\">dentry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>__mark_inode_dirty -<span class=\"ts\"/>internal function</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@inode: inode to mark</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@flags: what kind of dirty (i.e. I_DIRTY_SYNC)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Mark an inode as dirty. Callers should use mark_inode_dirty or</span>", 
"<span class=\"comment\"> *  <span class=\"ts\"/>mark_inode_dirty_sync.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Put the inode on the super block's dirty list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CAREFUL! We mark it dirty unconditionally, but move it onto the</span>", 
"<span class=\"comment\"> * dirty list only if it is hashed or if it refers to a blockdev.</span>", 
"<span class=\"comment\"> * If it was not hashed, it will never be added to the dirty list</span>", 
"<span class=\"comment\"> * even if it is later hashed, as it will have been marked dirty already.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In short, make sure you hash any inodes _before_ you start marking</span>", 
"<span class=\"comment\"> * them dirty.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function *must* be atomic for the I_DIRTY_PAGES case -</span>", 
"<span class=\"comment\"> * set_page_dirty() is called under spinlock in several places.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that for blockdevs, inode-&gt;dirtied_when represents the dirtying time of</span>", 
"<span class=\"comment\"> * the block-special inode (/dev/hda1) itself.  And the -&gt;dirtied_when field of</span>", 
"<span class=\"comment\"> * the kernel-internal blockdev inode represents the dirtying time of the</span>", 
"<span class=\"comment\"> * blockdev's pages.  This is why for I_DIRTY_PAGES we always use</span>", 
"<span class=\"comment\"> * page-&gt;mapping-&gt;host, so the page-dirtying time is recorded in the internal</span>", 
"<span class=\"comment\"> * blockdev inode.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__mark_inode_dirty\">__mark_inode_dirty</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#wakeup_bdi\">wakeup_bdi</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Don't do this for I_DIRTY_PAGES - that doesn't actually</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * dirty the inode itself</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; (<a class=\"id\" href=\"#I_DIRTY_SYNC\">I_DIRTY_SYNC</a> | <a class=\"id\" href=\"#I_DIRTY_DATASYNC\">I_DIRTY_DATASYNC</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_op\">s_op</a>-><a class=\"id\" href=\"#dirty_inode\">dirty_inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_op\">s_op</a>-><a class=\"id\" href=\"#dirty_inode\">dirty_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * make sure that changes are seen by all cpus before we test i_state</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * -- mikulas</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* avoid the locking if we can */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> &amp; <a class=\"id\" href=\"#flags\">flags</a>) == <a class=\"id\" href=\"#flags\">flags</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#block_dump\">block_dump</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_dump___mark_inode_dirty\">block_dump___mark_inode_dirty</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> &amp; <a class=\"id\" href=\"#flags\">flags</a>) != <a class=\"id\" href=\"#flags\">flags</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>const int <a class=\"id\" href=\"#was_dirty\">was_dirty</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> &amp; <a class=\"id\" href=\"#I_DIRTY\">I_DIRTY</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> |= <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If the inode is being synced, just update its dirty state.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The unlocker will place the inode on the appropriate</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * superblock list, based upon its state.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> &amp; <a class=\"id\" href=\"#I_SYNC\">I_SYNC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Only add valid (hashed) inodes to the superblock's</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * dirty list.  Add blockdev inodes as well.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#S_ISBLK\">S_ISBLK</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hlist_unhashed\">hlist_unhashed</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_hash\">i_hash</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> &amp; <a class=\"id\" href=\"#I_FREEING\">I_FREEING</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If the inode was already on b_dirty/b_io/b_more_io, don't</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * reposition it (that would break b_dirty time-ordering).</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#was_dirty\">was_dirty</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdi\">bdi</a> = <a class=\"id\" href=\"#inode_to_bdi\">inode_to_bdi</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bdi_cap_writeback_dirty\">bdi_cap_writeback_dirty</a>(<a class=\"id\" href=\"#bdi\">bdi</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN\">WARN</a>(!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#BDI_registered\">BDI_registered</a>, &amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#state\">state</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     \"bdi-%s not registered\\n\", <a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If this is the first dirty inode for this</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * bdi, we have to wake-up the corresponding</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * bdi thread to make sure background</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * write-back happens later.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#wb_has_dirty_io\">wb_has_dirty_io</a>(&amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#wb\">wb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wakeup_bdi\">wakeup_bdi</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#dirtied_when\">dirtied_when</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move\">list_move</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_list\">i_list</a>, &amp;<a class=\"id\" href=\"#bdi\">bdi</a>-><a class=\"id\" href=\"#wb\">wb</a>.<a class=\"id\" href=\"#b_dirty\">b_dirty</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#wakeup_bdi\">wakeup_bdi</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdi_wakeup_thread_delayed\">bdi_wakeup_thread_delayed</a>(<a class=\"id\" href=\"#bdi\">bdi</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__mark_inode_dirty\">__mark_inode_dirty</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Write out a superblock's list of dirty inodes.  A wait will be performed</span>", 
"<span class=\"comment\"> * upon no inodes, all inodes or the final one, depending upon sync_mode.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If older_than_this is non-NULL, then only write out inodes which</span>", 
"<span class=\"comment\"> * had their first dirtying at a time earlier than *older_than_this.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If `bdi' is non-zero then we're being asked to writeback a specific queue.</span>", 
"<span class=\"comment\"> * This function assumes that the blockdev superblock's inodes are backed by</span>", 
"<span class=\"comment\"> * a variety of queues, so all inodes are searched.  For other superblocks,</span>", 
"<span class=\"comment\"> * assume that all inodes are backed by the same queue.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The inodes to be written are parked on bdi-&gt;b_io.  They are moved back onto</span>", 
"<span class=\"comment\"> * bdi-&gt;b_dirty as they are selected for writing.  This way, none can be missed</span>", 
"<span class=\"comment\"> * on the writer throttling path, and we get decent balancing between many</span>", 
"<span class=\"comment\"> * throttled threads: we don't want them all piling up on inode_sync_wait.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#wait_sb_inodes\">wait_sb_inodes</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, *<a class=\"id\" href=\"#old_inode\">old_inode</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We need to be protected against the filesystem going from</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * r/o to r/w or vice versa.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#rwsem_is_locked\">rwsem_is_locked</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_umount\">s_umount</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Data integrity sync. Must wait for all pages under writeback,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * because there may have been pages dirtied before our sync</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * call, but which had writeout started before we write it out.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In which case, the inode may not be on the dirty list, but</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we still have to wait for that writeout.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#inode\">inode</a>, &amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_inodes\">s_inodes</a>, <a class=\"id\" href=\"#i_sb_list\">i_sb_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> &amp; (<a class=\"id\" href=\"#I_FREEING\">I_FREEING</a>|<a class=\"id\" href=\"#I_WILL_FREE\">I_WILL_FREE</a>|<a class=\"id\" href=\"#I_NEW\">I_NEW</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#nrpages\">nrpages</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__iget\">__iget</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We hold a reference to 'inode' so it couldn't have</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * been removed from s_inodes list while we dropped the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * inode_lock.  We cannot iput the inode now as we can</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * be holding the last reference and we cannot iput it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * under inode_lock. So we keep the reference and iput</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it later.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iput\">iput</a>(<a class=\"id\" href=\"#old_inode\">old_inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old_inode\">old_inode</a> = <a class=\"id\" href=\"#inode\">inode</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#filemap_fdatawait\">filemap_fdatawait</a>(<a class=\"id\" href=\"#mapping\">mapping</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iput\">iput</a>(<a class=\"id\" href=\"#old_inode\">old_inode</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * writeback_inodes_sb<span class=\"ts\"/>-<span class=\"ts\"/>writeback dirty inodes from given super_block</span>", 
"<span class=\"comment\"> * @sb: the superblock</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Start writeback on some inodes on this super_block. No guarantees are made</span>", 
"<span class=\"comment\"> * on how many (if any) will be written, and this function does not wait</span>", 
"<span class=\"comment\"> * for IO completion of submitted IO. The number of pages submitted is</span>", 
"<span class=\"comment\"> * returned.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#writeback_inodes_sb\">writeback_inodes_sb</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_dirty\">nr_dirty</a> = <a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_FILE_DIRTY\">NR_FILE_DIRTY</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_unstable\">nr_unstable</a> = <a class=\"id\" href=\"#global_page_state\">global_page_state</a>(<a class=\"id\" href=\"#NR_UNSTABLE_NFS\">NR_UNSTABLE_NFS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DECLARE_COMPLETION_ONSTACK\">DECLARE_COMPLETION_ONSTACK</a>(<a class=\"id\" href=\"#done\">done</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#wb_writeback_work\">wb_writeback_work</a> <a class=\"id\" href=\"#work\">work</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#sb\">sb</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#sync_mode\">sync_mode</a><span class=\"ts\"/>= <a class=\"id\" href=\"#WB_SYNC_NONE\">WB_SYNC_NONE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#done\">done</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#done\">done</a>,", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#rwsem_is_locked\">rwsem_is_locked</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_umount\">s_umount</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#work\">work</a>.<a class=\"id\" href=\"#nr_pages\">nr_pages</a> = <a class=\"id\" href=\"#nr_dirty\">nr_dirty</a> + <a class=\"id\" href=\"#nr_unstable\">nr_unstable</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#inodes_stat\">inodes_stat</a>.<a class=\"id\" href=\"#nr_inodes\">nr_inodes</a> - <a class=\"id\" href=\"#inodes_stat\">inodes_stat</a>.<a class=\"id\" href=\"#nr_unused\">nr_unused</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdi_queue_work\">bdi_queue_work</a>(<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_bdi\">s_bdi</a>, &amp;<a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_for_completion\">wait_for_completion</a>(&amp;<a class=\"id\" href=\"#done\">done</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#writeback_inodes_sb\">writeback_inodes_sb</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * writeback_inodes_sb_if_idle<span class=\"ts\"/>-<span class=\"ts\"/>start writeback if none underway</span>", 
"<span class=\"comment\"> * @sb: the superblock</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Invoke writeback_inodes_sb if no writeback is currently underway.</span>", 
"<span class=\"comment\"> * Returns 1 if writeback was started, 0 if not.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#writeback_inodes_sb_if_idle\">writeback_inodes_sb_if_idle</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#writeback_in_progress\">writeback_in_progress</a>(<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_bdi\">s_bdi</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_umount\">s_umount</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#writeback_inodes_sb\">writeback_inodes_sb</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_umount\">s_umount</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#writeback_inodes_sb_if_idle\">writeback_inodes_sb_if_idle</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sync_inodes_sb<span class=\"ts\"/>-<span class=\"ts\"/>sync sb inode pages</span>", 
"<span class=\"comment\"> * @sb: the superblock</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function writes and waits on any dirty inode belonging to this</span>", 
"<span class=\"comment\"> * super_block. The number of pages synced is returned.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#sync_inodes_sb\">sync_inodes_sb</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DECLARE_COMPLETION_ONSTACK\">DECLARE_COMPLETION_ONSTACK</a>(<a class=\"id\" href=\"#done\">done</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#wb_writeback_work\">wb_writeback_work</a> <a class=\"id\" href=\"#work\">work</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#sb\">sb</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#sync_mode\">sync_mode</a><span class=\"ts\"/>= <a class=\"id\" href=\"#WB_SYNC_ALL\">WB_SYNC_ALL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#nr_pages\">nr_pages</a><span class=\"ts\"/>= <a class=\"id\" href=\"#LONG_MAX\">LONG_MAX</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#range_cyclic\">range_cyclic</a><span class=\"ts\"/>= 0,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#done\">done</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#done\">done</a>,", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#rwsem_is_locked\">rwsem_is_locked</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_umount\">s_umount</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdi_queue_work\">bdi_queue_work</a>(<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_bdi\">s_bdi</a>, &amp;<a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_for_completion\">wait_for_completion</a>(&amp;<a class=\"id\" href=\"#done\">done</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_sb_inodes\">wait_sb_inodes</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sync_inodes_sb\">sync_inodes_sb</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * write_inode_now<span class=\"ts\"/>-<span class=\"ts\"/>write an inode to disk</span>", 
"<span class=\"comment\"> * @inode: inode to write to disk</span>", 
"<span class=\"comment\"> * @sync: whether the write should be synchronous or not</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function commits an inode to disk immediately if it is dirty. This is</span>", 
"<span class=\"comment\"> * primarily needed by knfsd.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The caller must either have a ref on the inode or must have set I_WILL_FREE.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#write_inode_now\">write_inode_now</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, int <a class=\"id\" href=\"#sync\">sync</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a> <a class=\"id\" href=\"#wbc\">wbc</a> = {", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#nr_to_write\">nr_to_write</a> = <a class=\"id\" href=\"#LONG_MAX\">LONG_MAX</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#sync_mode\">sync_mode</a> = <a class=\"id\" href=\"#sync\">sync</a> ? <a class=\"id\" href=\"#WB_SYNC_ALL\">WB_SYNC_ALL</a> : <a class=\"id\" href=\"#WB_SYNC_NONE\">WB_SYNC_NONE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#range_start\">range_start</a> = 0,", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#range_end\">range_end</a> = <a class=\"id\" href=\"#LLONG_MAX\">LLONG_MAX</a>,", 
"<span class=\"ts\"/>};", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mapping_cap_writeback_dirty\">mapping_cap_writeback_dirty</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wbc\">wbc</a>.<a class=\"id\" href=\"#nr_to_write\">nr_to_write</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#writeback_single_inode\">writeback_single_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>, &amp;<a class=\"id\" href=\"#wbc\">wbc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sync\">sync</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode_sync_wait\">inode_sync_wait</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#write_inode_now\">write_inode_now</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sync_inode - write an inode and its pages to disk.</span>", 
"<span class=\"comment\"> * @inode: the inode to sync</span>", 
"<span class=\"comment\"> * @wbc: controls the writeback mode</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * sync_inode() will write an inode and its pages to disk.  It will also</span>", 
"<span class=\"comment\"> * correctly update the inode on its superblock's dirty inode lists and will</span>", 
"<span class=\"comment\"> * update inode-&gt;i_state.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The caller must have a ref on the inode.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#sync_inode\">sync_inode</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a> *<a class=\"id\" href=\"#wbc\">wbc</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#writeback_single_inode\">writeback_single_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#wbc\">wbc</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sync_inode\">sync_inode</a>);", 
];
xr_frag_insert('l/1a/d4c7cdb2ed274349f844582e783c01f3056916.xr', __xr_tmp);
