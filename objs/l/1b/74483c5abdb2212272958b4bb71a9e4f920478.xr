var __xr_tmp = [
"<span class=\"comment\"><span class=\"ts\"/> * Check if the request spans more than any BAR in the iomem resource</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * tree.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ONCE\">WARN_ONCE</a>(<a class=\"id\" href=\"#iomem_map_sanity_check\">iomem_map_sanity_check</a>(<a class=\"id\" href=\"#phys_addr\">phys_addr</a>, <a class=\"id\" href=\"#size\">size</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Info: mapping multiple BARs. Your kernel is fine.\");", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Don't allow anybody to remap normal RAM that we're using..</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#last_pfn\">last_pfn</a> = <a class=\"id\" href=\"#last_addr\">last_addr</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#phys_addr\">phys_addr</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>; <a class=\"id\" href=\"#pfn\">pfn</a> <= <a class=\"id\" href=\"#last_pfn\">last_pfn</a>; <a class=\"id\" href=\"#pfn\">pfn</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#is_ram\">is_ram</a> = <a class=\"id\" href=\"#page_is_ram\">page_is_ram</a>(<a class=\"id\" href=\"#pfn\">pfn</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_ram\">is_ram</a> && <a class=\"id\" href=\"#pfn_valid\">pfn_valid</a>(<a class=\"id\" href=\"#pfn\">pfn</a>) && !<a class=\"id\" href=\"#PageReserved\">PageReserved</a>(<a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#pfn\">pfn</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#is_ram\">is_ram</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Mappings have to be page-aligned</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#phys_addr\">phys_addr</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phys_addr\">phys_addr</a> &= <a class=\"id\" href=\"#PHYSICAL_PAGE_MASK\">PHYSICAL_PAGE_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#PAGE_ALIGN\">PAGE_ALIGN</a>(<a class=\"id\" href=\"#last_addr\">last_addr</a>+1) - <a class=\"id\" href=\"#phys_addr\">phys_addr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#reserve_memtype\">reserve_memtype</a>(<a class=\"id\" href=\"#phys_addr\">phys_addr</a>, (<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#phys_addr\">phys_addr</a> + <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prot_val\">prot_val</a>, &amp;<a class=\"id\" href=\"#new_prot_val\">new_prot_val</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"ioremap reserve_memtype failed %d\\n\", <a class=\"id\" href=\"#retval\">retval</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prot_val\">prot_val</a> != <a class=\"id\" href=\"#new_prot_val\">new_prot_val</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_new_memtype_allowed\">is_new_memtype_allowed</a>(<a class=\"id\" href=\"#phys_addr\">phys_addr</a>, <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#prot_val\">prot_val</a>, <a class=\"id\" href=\"#new_prot_val\">new_prot_val</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>\"ioremap error for 0x%llx-0x%llx, requested 0x%lx, got 0x%lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long long)<a class=\"id\" href=\"#phys_addr\">phys_addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long long)(<a class=\"id\" href=\"#phys_addr\">phys_addr</a> + <a class=\"id\" href=\"#size\">size</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prot_val\">prot_val</a>, <a class=\"id\" href=\"#new_prot_val\">new_prot_val</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_free_memtype\">err_free_memtype</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prot_val\">prot_val</a> = <a class=\"id\" href=\"#new_prot_val\">new_prot_val</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#prot_val\">prot_val</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#_PAGE_CACHE_UC\">_PAGE_CACHE_UC</a>:", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prot\">prot</a> = <a class=\"id\" href=\"#PAGE_KERNEL_IO_NOCACHE\">PAGE_KERNEL_IO_NOCACHE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#_PAGE_CACHE_UC_MINUS\">_PAGE_CACHE_UC_MINUS</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prot\">prot</a> = <a class=\"id\" href=\"#PAGE_KERNEL_IO_UC_MINUS\">PAGE_KERNEL_IO_UC_MINUS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#_PAGE_CACHE_WC\">_PAGE_CACHE_WC</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prot\">prot</a> = <a class=\"id\" href=\"#PAGE_KERNEL_IO_WC\">PAGE_KERNEL_IO_WC</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#_PAGE_CACHE_WB\">_PAGE_CACHE_WB</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prot\">prot</a> = <a class=\"id\" href=\"#PAGE_KERNEL_IO\">PAGE_KERNEL_IO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Ok, go for it..</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#area\">area</a> = <a class=\"id\" href=\"#get_vm_area_caller\">get_vm_area_caller</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#VM_IOREMAP\">VM_IOREMAP</a>, <a class=\"id\" href=\"#caller\">caller</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#area\">area</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_free_memtype\">err_free_memtype</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#phys_addr\">phys_addr</a> = <a class=\"id\" href=\"#phys_addr\">phys_addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vaddr\">vaddr</a> = (unsigned long) <a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kernel_map_sync_memtype\">kernel_map_sync_memtype</a>(<a class=\"id\" href=\"#phys_addr\">phys_addr</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#prot_val\">prot_val</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_free_area\">err_free_area</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ioremap_page_range\">ioremap_page_range</a>(<a class=\"id\" href=\"#vaddr\">vaddr</a>, <a class=\"id\" href=\"#vaddr\">vaddr</a> + <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#phys_addr\">phys_addr</a>, <a class=\"id\" href=\"#prot\">prot</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_free_area\">err_free_area</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret_addr\">ret_addr</a> = (void <a class=\"id\" href=\"#__iomem\">__iomem</a> *) (<a class=\"id\" href=\"#vaddr\">vaddr</a> + <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mmiotrace_ioremap\">mmiotrace_ioremap</a>(<a class=\"id\" href=\"#unaligned_phys_addr\">unaligned_phys_addr</a>, <a class=\"id\" href=\"#unaligned_size\">unaligned_size</a>, <a class=\"id\" href=\"#ret_addr\">ret_addr</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret_addr\">ret_addr</a>;", 
"<a class=\"id\" href=\"#err_free_area\">err_free_area</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_vm_area\">free_vm_area</a>(<a class=\"id\" href=\"#area\">area</a>);", 
"<a class=\"id\" href=\"#err_free_memtype\">err_free_memtype</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_memtype\">free_memtype</a>(<a class=\"id\" href=\"#phys_addr\">phys_addr</a>, <a class=\"id\" href=\"#phys_addr\">phys_addr</a> + <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ioremap_nocache     -   map bus memory into CPU space</span>", 
"<span class=\"comment\"> * @offset:    bus address of the memory</span>", 
"<span class=\"comment\"> * @size:      size of the resource to map</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ioremap_nocache performs a platform specific sequence of operations to</span>", 
"<span class=\"comment\"> * make bus memory CPU accessible via the readb/readw/readl/writeb/</span>", 
"<span class=\"comment\"> * writew/writel functions and the other mmio helpers. The returned</span>", 
"<span class=\"comment\"> * address is not guaranteed to be usable directly as a virtual</span>", 
"<span class=\"comment\"> * address.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This version of ioremap ensures that the memory is marked uncachable</span>", 
"<span class=\"comment\"> * on the CPU as well as honouring existing caching rules from things like</span>", 
"<span class=\"comment\"> * the PCI bus. Note that there are other caches and buffers on many</span>", 
"<span class=\"comment\"> * busses. In particular driver authors should read up on PCI writes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It's useful if some control registers are in such an area and</span>", 
"<span class=\"comment\"> * write combining or read caching is not desirable:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Must be freed with iounmap.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#ioremap_nocache\">ioremap_nocache</a>(<a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#phys_addr\">phys_addr</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Ideally, this should be:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>pat_enabled ? _PAGE_CACHE_UC : _PAGE_CACHE_UC_MINUS;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Till we fix all X drivers to use ioremap_wc(), we will use</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * UC MINUS.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#_PAGE_CACHE_UC_MINUS\">_PAGE_CACHE_UC_MINUS</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__ioremap_caller\">__ioremap_caller</a>(<a class=\"id\" href=\"#phys_addr\">phys_addr</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#val\">val</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__builtin_return_address\">__builtin_return_address</a>(0));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#ioremap_nocache\">ioremap_nocache</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ioremap_wc<span class=\"ts\"/>-<span class=\"ts\"/>map memory into CPU space write combined</span>", 
"<span class=\"comment\"> * @offset:<span class=\"ts\"/>bus address of the memory</span>", 
"<span class=\"comment\"> * @size:<span class=\"ts\"/>size of the resource to map</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This version of ioremap ensures that the memory is marked write combining.</span>", 
"<span class=\"comment\"> * Write combining allows faster writes to some hardware devices.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Must be freed with iounmap.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#ioremap_wc\">ioremap_wc</a>(<a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#phys_addr\">phys_addr</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pat_enabled\">pat_enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#__ioremap_caller\">__ioremap_caller</a>(<a class=\"id\" href=\"#phys_addr\">phys_addr</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#_PAGE_CACHE_WC\">_PAGE_CACHE_WC</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__builtin_return_address\">__builtin_return_address</a>(0));", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ioremap_nocache\">ioremap_nocache</a>(<a class=\"id\" href=\"#phys_addr\">phys_addr</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#ioremap_wc\">ioremap_wc</a>);", 
"", 
"void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#ioremap_cache\">ioremap_cache</a>(<a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#phys_addr\">phys_addr</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__ioremap_caller\">__ioremap_caller</a>(<a class=\"id\" href=\"#phys_addr\">phys_addr</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#_PAGE_CACHE_WB\">_PAGE_CACHE_WB</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__builtin_return_address\">__builtin_return_address</a>(0));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#ioremap_cache\">ioremap_cache</a>);", 
"", 
"void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#ioremap_prot\">ioremap_prot</a>(<a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#phys_addr\">phys_addr</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#prot_val\">prot_val</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__ioremap_caller\">__ioremap_caller</a>(<a class=\"id\" href=\"#phys_addr\">phys_addr</a>, <a class=\"id\" href=\"#size\">size</a>, (<a class=\"id\" href=\"#prot_val\">prot_val</a> &amp; <a class=\"id\" href=\"#_PAGE_CACHE_MASK\">_PAGE_CACHE_MASK</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__builtin_return_address\">__builtin_return_address</a>(0));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#ioremap_prot\">ioremap_prot</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * iounmap - Free a IO remapping</span>", 
"<span class=\"comment\"> * @addr: virtual address from ioremap_*</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Caller must ensure there is only one unmapping for the same pointer.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#iounmap\">iounmap</a>(volatile void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_struct\">vm_struct</a> *<a class=\"id\" href=\"#p\">p</a>, *<a class=\"id\" href=\"#o\">o</a>;", 
"", 
"<span class=\"ts\"/>if ((void <a class=\"id\" href=\"#__force\">__force</a> *)<a class=\"id\" href=\"#addr\">addr</a> <= <a class=\"id\" href=\"#high_memory\">high_memory</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * __ioremap special-cases the PCI/ISA range by not instantiating a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * vm_area and by simply returning an address into the kernel mapping</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of ISA space.   So handle that here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((void <a class=\"id\" href=\"#__force\">__force</a> *)<a class=\"id\" href=\"#addr\">addr</a> >= <a class=\"id\" href=\"#phys_to_virt\">phys_to_virt</a>(<a class=\"id\" href=\"#ISA_START_ADDRESS\">ISA_START_ADDRESS</a>) &&", 
"<span class=\"ts\"/>    (void <a class=\"id\" href=\"#__force\">__force</a> *)<a class=\"id\" href=\"#addr\">addr</a> &lt; <a class=\"id\" href=\"#phys_to_virt\">phys_to_virt</a>(<a class=\"id\" href=\"#ISA_END_ADDRESS\">ISA_END_ADDRESS</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = (volatile void <a class=\"id\" href=\"#__iomem\">__iomem</a> *)", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a> &amp; (unsigned long <a class=\"id\" href=\"#__force\">__force</a>)<a class=\"id\" href=\"#addr\">addr</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mmiotrace_iounmap\">mmiotrace_iounmap</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Use the vm area unlocked, assuming the caller</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   ensures there isn't another iounmap for the same address</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   in parallel. Reuse of the virtual address is prevented by</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   leaving it in the global lists until we're done with it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   cpa takes care of the direct mappings. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_lock\">read_lock</a>(&amp;<a class=\"id\" href=\"#vmlist_lock\">vmlist_lock</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#vmlist\">vmlist</a>; <a class=\"id\" href=\"#p\">p</a>; <a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#addr\">addr</a> == (void <a class=\"id\" href=\"#__force\">__force</a> *)<a class=\"id\" href=\"#addr\">addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read_unlock\">read_unlock</a>(&amp;<a class=\"id\" href=\"#vmlist_lock\">vmlist_lock</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"iounmap: bad address %p\\n\", <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dump_stack\">dump_stack</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_memtype\">free_memtype</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#phys_addr\">phys_addr</a>, <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#phys_addr\">phys_addr</a> + <a class=\"id\" href=\"#get_vm_area_size\">get_vm_area_size</a>(<a class=\"id\" href=\"#p\">p</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Finally remove it */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#o\">o</a> = <a class=\"id\" href=\"#remove_vm_area\">remove_vm_area</a>((void <a class=\"id\" href=\"#__force\">__force</a> *)<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#p\">p</a> != <a class=\"id\" href=\"#o\">o</a> || <a class=\"id\" href=\"#o\">o</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#iounmap\">iounmap</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Convert a physical pointer to a virtual kernel pointer for /dev/mem</span>", 
"<span class=\"comment\"> * access</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#xlate_dev_mem_ptr\">xlate_dev_mem_ptr</a>(unsigned long <a class=\"id\" href=\"#phys\">phys</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#phys\">phys</a> &amp; <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If page is RAM, we can use __va. Otherwise ioremap and unmap. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page_is_ram\">page_is_ram</a>(<a class=\"id\" href=\"#start\">start</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#__va\">__va</a>(<a class=\"id\" href=\"#phys\">phys</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = (void <a class=\"id\" href=\"#__force\">__force</a> *)<a class=\"id\" href=\"#ioremap_cache\">ioremap_cache</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#addr\">addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = (void *)((unsigned long)<a class=\"id\" href=\"#addr\">addr</a> | (<a class=\"id\" href=\"#phys\">phys</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>));", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#addr\">addr</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#unxlate_dev_mem_ptr\">unxlate_dev_mem_ptr</a>(unsigned long <a class=\"id\" href=\"#phys\">phys</a>, void *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page_is_ram\">page_is_ram</a>(<a class=\"id\" href=\"#phys\">phys</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iounmap\">iounmap</a>((void <a class=\"id\" href=\"#__iomem\">__iomem</a> *)((unsigned long)<a class=\"id\" href=\"#addr\">addr</a> &amp; <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>));", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__initdata\">__initdata</a> <a class=\"id\" href=\"#early_ioremap_debug\">early_ioremap_debug</a>;", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#early_ioremap_debug_setup\">early_ioremap_debug_setup</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#early_ioremap_debug\">early_ioremap_debug</a> = 1;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#early_param\">early_param</a>(\"early_ioremap_debug\", <a class=\"id\" href=\"#early_ioremap_debug_setup\">early_ioremap_debug_setup</a>);", 
"", 
"static <a class=\"id\" href=\"#__initdata\">__initdata</a> int <a class=\"id\" href=\"#after_paging_init\">after_paging_init</a>;", 
"static <a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#bm_pte\">bm_pte</a>[<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>/sizeof(<a class=\"id\" href=\"#pte_t\">pte_t</a>)] <a class=\"id\" href=\"#__page_aligned_bss\">__page_aligned_bss</a>;", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#pmd_t\">pmd_t</a> * <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#early_ioremap_pmd\">early_ioremap_pmd</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't assume we're using swapper_pg_dir at this point */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#__va\">__va</a>(<a class=\"id\" href=\"#read_cr3\">read_cr3</a>());", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgd\">pgd</a> = &amp;<a class=\"id\" href=\"#base\">base</a>[<a class=\"id\" href=\"#pgd_index\">pgd_index</a>(<a class=\"id\" href=\"#addr\">addr</a>)];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud_t\">pud_t</a> *<a class=\"id\" href=\"#pud\">pud</a> = <a class=\"id\" href=\"#pud_offset\">pud_offset</a>(<a class=\"id\" href=\"#pgd\">pgd</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a> = <a class=\"id\" href=\"#pmd_offset\">pmd_offset</a>(<a class=\"id\" href=\"#pud\">pud</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pmd\">pmd</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#pte_t\">pte_t</a> * <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#early_ioremap_pte\">early_ioremap_pte</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#bm_pte\">bm_pte</a>[<a class=\"id\" href=\"#pte_index\">pte_index</a>(<a class=\"id\" href=\"#addr\">addr</a>)];", 
"}", 
"", 
"static unsigned long <a class=\"id\" href=\"#slot_virt\">slot_virt</a>[<a class=\"id\" href=\"#FIX_BTMAPS_SLOTS\">FIX_BTMAPS_SLOTS</a>] <a class=\"id\" href=\"#__initdata\">__initdata</a>;", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#early_ioremap_init\">early_ioremap_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd_t\">pmd_t</a> *<a class=\"id\" href=\"#pmd\">pmd</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#early_ioremap_debug\">early_ioremap_debug</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"early_ioremap_init()\\n\");", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#FIX_BTMAPS_SLOTS\">FIX_BTMAPS_SLOTS</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slot_virt\">slot_virt</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#__fix_to_virt\">__fix_to_virt</a>(<a class=\"id\" href=\"#FIX_BTMAP_BEGIN\">FIX_BTMAP_BEGIN</a> - <a class=\"id\" href=\"#NR_FIX_BTMAPS\">NR_FIX_BTMAPS</a>*<a class=\"id\" href=\"#i\">i</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd\">pmd</a> = <a class=\"id\" href=\"#early_ioremap_pmd\">early_ioremap_pmd</a>(<a class=\"id\" href=\"#fix_to_virt\">fix_to_virt</a>(<a class=\"id\" href=\"#FIX_BTMAP_BEGIN\">FIX_BTMAP_BEGIN</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#bm_pte\">bm_pte</a>, 0, sizeof(<a class=\"id\" href=\"#bm_pte\">bm_pte</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd_populate_kernel\">pmd_populate_kernel</a>(&amp;<a class=\"id\" href=\"#init_mm\">init_mm</a>, <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#bm_pte\">bm_pte</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The boot-ioremap range spans multiple pmds, for which</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we are not prepared:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__FIXADDR_TOP\">__FIXADDR_TOP</a> (-<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUILD_BUG_ON\">BUILD_BUG_ON</a>((<a class=\"id\" href=\"#__fix_to_virt\">__fix_to_virt</a>(<a class=\"id\" href=\"#FIX_BTMAP_BEGIN\">FIX_BTMAP_BEGIN</a>) >> <a class=\"id\" href=\"#PMD_SHIFT\">PMD_SHIFT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>     != (<a class=\"id\" href=\"#__fix_to_virt\">__fix_to_virt</a>(<a class=\"id\" href=\"#FIX_BTMAP_END\">FIX_BTMAP_END</a>) >> <a class=\"id\" href=\"#PMD_SHIFT\">PMD_SHIFT</a>));", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#__FIXADDR_TOP\">__FIXADDR_TOP</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pmd\">pmd</a> != <a class=\"id\" href=\"#early_ioremap_pmd\">early_ioremap_pmd</a>(<a class=\"id\" href=\"#fix_to_virt\">fix_to_virt</a>(<a class=\"id\" href=\"#FIX_BTMAP_END\">FIX_BTMAP_END</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"pmd %p != %p\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#pmd\">pmd</a>, <a class=\"id\" href=\"#early_ioremap_pmd\">early_ioremap_pmd</a>(<a class=\"id\" href=\"#fix_to_virt\">fix_to_virt</a>(<a class=\"id\" href=\"#FIX_BTMAP_END\">FIX_BTMAP_END</a>)));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"fix_to_virt(FIX_BTMAP_BEGIN): %08lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fix_to_virt\">fix_to_virt</a>(<a class=\"id\" href=\"#FIX_BTMAP_BEGIN\">FIX_BTMAP_BEGIN</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"fix_to_virt(FIX_BTMAP_END):   %08lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fix_to_virt\">fix_to_virt</a>(<a class=\"id\" href=\"#FIX_BTMAP_END\">FIX_BTMAP_END</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"FIX_BTMAP_END:       %d\\n\", <a class=\"id\" href=\"#FIX_BTMAP_END\">FIX_BTMAP_END</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"FIX_BTMAP_BEGIN:     %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#FIX_BTMAP_BEGIN\">FIX_BTMAP_BEGIN</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#early_ioremap_reset\">early_ioremap_reset</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#after_paging_init\">after_paging_init</a> = 1;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#__early_set_fixmap\">__early_set_fixmap</a>(enum <a class=\"id\" href=\"#fixed_addresses\">fixed_addresses</a> <a class=\"id\" href=\"#idx\">idx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#phys\">phys</a>, <a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#__fix_to_virt\">__fix_to_virt</a>(<a class=\"id\" href=\"#idx\">idx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> *<a class=\"id\" href=\"#pte\">pte</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#idx\">idx</a> >= <a class=\"id\" href=\"#__end_of_fixed_addresses\">__end_of_fixed_addresses</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = <a class=\"id\" href=\"#early_ioremap_pte\">early_ioremap_pte</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pgprot_val\">pgprot_val</a>(<a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_pte\">set_pte</a>(<a class=\"id\" href=\"#pte\">pte</a>, <a class=\"id\" href=\"#pfn_pte\">pfn_pte</a>(<a class=\"id\" href=\"#phys\">phys</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>, <a class=\"id\" href=\"#flags\">flags</a>));", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pte_clear\">pte_clear</a>(&amp;<a class=\"id\" href=\"#init_mm\">init_mm</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#pte\">pte</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__flush_tlb_one\">__flush_tlb_one</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#early_set_fixmap\">early_set_fixmap</a>(enum <a class=\"id\" href=\"#fixed_addresses\">fixed_addresses</a> <a class=\"id\" href=\"#idx\">idx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#phys\">phys</a>, <a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#prot\">prot</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#after_paging_init\">after_paging_init</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_fixmap\">__set_fixmap</a>(<a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#phys\">phys</a>, <a class=\"id\" href=\"#prot\">prot</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__early_set_fixmap\">__early_set_fixmap</a>(<a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#phys\">phys</a>, <a class=\"id\" href=\"#prot\">prot</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#early_clear_fixmap\">early_clear_fixmap</a>(enum <a class=\"id\" href=\"#fixed_addresses\">fixed_addresses</a> <a class=\"id\" href=\"#idx\">idx</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#after_paging_init\">after_paging_init</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_fixmap\">clear_fixmap</a>(<a class=\"id\" href=\"#idx\">idx</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__early_set_fixmap\">__early_set_fixmap</a>(<a class=\"id\" href=\"#idx\">idx</a>, 0, <a class=\"id\" href=\"#__pgprot\">__pgprot</a>(0));", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#prev_map\">prev_map</a>[<a class=\"id\" href=\"#FIX_BTMAPS_SLOTS\">FIX_BTMAPS_SLOTS</a>] <a class=\"id\" href=\"#__initdata\">__initdata</a>;", 
"static unsigned long <a class=\"id\" href=\"#prev_size\">prev_size</a>[<a class=\"id\" href=\"#FIX_BTMAPS_SLOTS\">FIX_BTMAPS_SLOTS</a>] <a class=\"id\" href=\"#__initdata\">__initdata</a>;", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#fixup_early_ioremap\">fixup_early_ioremap</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#FIX_BTMAPS_SLOTS\">FIX_BTMAPS_SLOTS</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#prev_map\">prev_map</a>[<a class=\"id\" href=\"#i\">i</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#early_ioremap_init\">early_ioremap_init</a>();", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#check_early_ioremap_leak\">check_early_ioremap_leak</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#FIX_BTMAPS_SLOTS\">FIX_BTMAPS_SLOTS</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#prev_map\">prev_map</a>[<a class=\"id\" href=\"#i\">i</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>++;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN\">WARN</a>(1, <a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/>       \"Debug warning: early ioremap leak of %d areas detected.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>\"please boot with early_ioremap_debug and report the dmesg.\\n\");", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#late_initcall\">late_initcall</a>(<a class=\"id\" href=\"#check_early_ioremap_leak\">check_early_ioremap_leak</a>);", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#__iomem\">__iomem</a> *", 
"<a class=\"id\" href=\"#__early_ioremap\">__early_ioremap</a>(<a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#phys_addr\">phys_addr</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#prot\">prot</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#last_addr\">last_addr</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#nrpages\">nrpages</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#fixed_addresses\">fixed_addresses</a> <a class=\"id\" href=\"#idx0\">idx0</a>, <a class=\"id\" href=\"#idx\">idx</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#slot\">slot</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#system_state\">system_state</a> != <a class=\"id\" href=\"#SYSTEM_BOOTING\">SYSTEM_BOOTING</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#slot\">slot</a> = -1;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#FIX_BTMAPS_SLOTS\">FIX_BTMAPS_SLOTS</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#prev_map\">prev_map</a>[<a class=\"id\" href=\"#i\">i</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slot\">slot</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#slot\">slot</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"early_iomap(%08llx, %08lx) not found slot\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> (<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#phys_addr\">phys_addr</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#early_ioremap_debug\">early_ioremap_debug</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"early_ioremap(%08llx, %08lx) [%d] => \",", 
"<span class=\"ts\"/><span class=\"ts\"/>       (<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#phys_addr\">phys_addr</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#slot\">slot</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dump_stack\">dump_stack</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't allow wraparound or zero size */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#last_addr\">last_addr</a> = <a class=\"id\" href=\"#phys_addr\">phys_addr</a> + <a class=\"id\" href=\"#size\">size</a> - 1;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#size\">size</a> || <a class=\"id\" href=\"#last_addr\">last_addr</a> &lt; <a class=\"id\" href=\"#phys_addr\">phys_addr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev_size\">prev_size</a>[<a class=\"id\" href=\"#slot\">slot</a>] = <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Mappings have to be page-aligned</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#phys_addr\">phys_addr</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phys_addr\">phys_addr</a> &= <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#PAGE_ALIGN\">PAGE_ALIGN</a>(<a class=\"id\" href=\"#last_addr\">last_addr</a> + 1) - <a class=\"id\" href=\"#phys_addr\">phys_addr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Mappings have to fit in the FIX_BTMAP area.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nrpages\">nrpages</a> = <a class=\"id\" href=\"#size\">size</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nrpages\">nrpages</a> &gt; <a class=\"id\" href=\"#NR_FIX_BTMAPS\">NR_FIX_BTMAPS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Ok, go for it..</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idx0\">idx0</a> = <a class=\"id\" href=\"#FIX_BTMAP_BEGIN\">FIX_BTMAP_BEGIN</a> - <a class=\"id\" href=\"#NR_FIX_BTMAPS\">NR_FIX_BTMAPS</a>*<a class=\"id\" href=\"#slot\">slot</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#idx0\">idx0</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#nrpages\">nrpages</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#early_set_fixmap\">early_set_fixmap</a>(<a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#phys_addr\">phys_addr</a>, <a class=\"id\" href=\"#prot\">prot</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phys_addr\">phys_addr</a> += <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>--<a class=\"id\" href=\"#idx\">idx</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>--<a class=\"id\" href=\"#nrpages\">nrpages</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#early_ioremap_debug\">early_ioremap_debug</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \"%08lx + %08lx\\n\", <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#slot_virt\">slot_virt</a>[<a class=\"id\" href=\"#slot\">slot</a>]);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev_map\">prev_map</a>[<a class=\"id\" href=\"#slot\">slot</a>] = (void <a class=\"id\" href=\"#__iomem\">__iomem</a> *)(<a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#slot_virt\">slot_virt</a>[<a class=\"id\" href=\"#slot\">slot</a>]);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#prev_map\">prev_map</a>[<a class=\"id\" href=\"#slot\">slot</a>];", 
"}", 
"", 
"<span class=\"comment\">/* Remap an IO device */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#__iomem\">__iomem</a> *", 
"<a class=\"id\" href=\"#early_ioremap\">early_ioremap</a>(<a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#phys_addr\">phys_addr</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__early_ioremap\">__early_ioremap</a>(<a class=\"id\" href=\"#phys_addr\">phys_addr</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#PAGE_KERNEL_IO\">PAGE_KERNEL_IO</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Remap memory */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#__iomem\">__iomem</a> *", 
"<a class=\"id\" href=\"#early_memremap\">early_memremap</a>(<a class=\"id\" href=\"#resource_size_t\">resource_size_t</a> <a class=\"id\" href=\"#phys_addr\">phys_addr</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__early_ioremap\">__early_ioremap</a>(<a class=\"id\" href=\"#phys_addr\">phys_addr</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#PAGE_KERNEL\">PAGE_KERNEL</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#early_iounmap\">early_iounmap</a>(void <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#virt_addr\">virt_addr</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#nrpages\">nrpages</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#fixed_addresses\">fixed_addresses</a> <a class=\"id\" href=\"#idx\">idx</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#slot\">slot</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#slot\">slot</a> = -1;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#FIX_BTMAPS_SLOTS\">FIX_BTMAPS_SLOTS</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#prev_map\">prev_map</a>[<a class=\"id\" href=\"#i\">i</a>] == <a class=\"id\" href=\"#addr\">addr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#slot\">slot</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#slot\">slot</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"early_iounmap(%p, %08lx) not found slot\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prev_size\">prev_size</a>[<a class=\"id\" href=\"#slot\">slot</a>] != <a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"early_iounmap(%p, %08lx) [%d] size not consistent %08lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#slot\">slot</a>, <a class=\"id\" href=\"#prev_size\">prev_size</a>[<a class=\"id\" href=\"#slot\">slot</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#early_ioremap_debug\">early_ioremap_debug</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"early_iounmap(%p, %08lx) [%d]\\n\", <a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#slot\">slot</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dump_stack\">dump_stack</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#virt_addr\">virt_addr</a> = (unsigned long)<a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#virt_addr\">virt_addr</a> &lt; <a class=\"id\" href=\"#fix_to_virt\">fix_to_virt</a>(<a class=\"id\" href=\"#FIX_BTMAP_BEGIN\">FIX_BTMAP_BEGIN</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#virt_addr\">virt_addr</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nrpages\">nrpages</a> = <a class=\"id\" href=\"#PAGE_ALIGN\">PAGE_ALIGN</a>(<a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#size\">size</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#FIX_BTMAP_BEGIN\">FIX_BTMAP_BEGIN</a> - <a class=\"id\" href=\"#NR_FIX_BTMAPS\">NR_FIX_BTMAPS</a>*<a class=\"id\" href=\"#slot\">slot</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#nrpages\">nrpages</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#early_clear_fixmap\">early_clear_fixmap</a>(<a class=\"id\" href=\"#idx\">idx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>--<a class=\"id\" href=\"#idx\">idx</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>--<a class=\"id\" href=\"#nrpages\">nrpages</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prev_map\">prev_map</a>[<a class=\"id\" href=\"#slot\">slot</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
];
xr_frag_insert('l/1b/74483c5abdb2212272958b4bb71a9e4f920478.xr', __xr_tmp);
