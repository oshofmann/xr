var __xr_tmp = [
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#reader\">reader</a> = <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_page\">reader_page</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#rb_set_head_page\">rb_set_head_page</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#commit\">commit</a> = <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#commit_page\">commit_page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* In case of error, head will be NULL */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#head\">head</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#reader\">reader</a>-><a class=\"id\" href=\"#read\">read</a> == <a class=\"id\" href=\"#rb_page_commit\">rb_page_commit</a>(<a class=\"id\" href=\"#reader\">reader</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#commit\">commit</a> == <a class=\"id\" href=\"#reader\">reader</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/> (<a class=\"id\" href=\"#commit\">commit</a> == <a class=\"id\" href=\"#head\">head</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#read\">read</a> == <a class=\"id\" href=\"#rb_page_commit\">rb_page_commit</a>(<a class=\"id\" href=\"#commit\">commit</a>)));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ring_buffer_record_disable - stop all writes into the buffer</span>", 
"<span class=\"comment\"> * @buffer: The ring buffer to stop writes to.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This prevents all writes to the buffer. Any attempt to write</span>", 
"<span class=\"comment\"> * to the buffer after this will fail and return NULL.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The caller should call synchronize_sched() after this.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ring_buffer_record_disable\">ring_buffer_record_disable</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#record_disabled\">record_disabled</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ring_buffer_record_disable\">ring_buffer_record_disable</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ring_buffer_record_enable - enable writes to the buffer</span>", 
"<span class=\"comment\"> * @buffer: The ring buffer to enable writes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note, multiple disables will need the same number of enables</span>", 
"<span class=\"comment\"> * to truly enable the writing (much like preempt_disable).</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ring_buffer_record_enable\">ring_buffer_record_enable</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#record_disabled\">record_disabled</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ring_buffer_record_enable\">ring_buffer_record_enable</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ring_buffer_record_disable_cpu - stop all writes into the cpu_buffer</span>", 
"<span class=\"comment\"> * @buffer: The ring buffer to stop writes to.</span>", 
"<span class=\"comment\"> * @cpu: The CPU buffer to stop</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This prevents all writes to the buffer. Any attempt to write</span>", 
"<span class=\"comment\"> * to the buffer after this will fail and return NULL.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The caller should call synchronize_sched() after this.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ring_buffer_record_disable_cpu\">ring_buffer_record_disable_cpu</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#cpumask\">cpumask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a> = <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#buffers\">buffers</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#record_disabled\">record_disabled</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ring_buffer_record_disable_cpu\">ring_buffer_record_disable_cpu</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ring_buffer_record_enable_cpu - enable writes to the buffer</span>", 
"<span class=\"comment\"> * @buffer: The ring buffer to enable writes</span>", 
"<span class=\"comment\"> * @cpu: The CPU to enable.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note, multiple disables will need the same number of enables</span>", 
"<span class=\"comment\"> * to truly enable the writing (much like preempt_disable).</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ring_buffer_record_enable_cpu\">ring_buffer_record_enable_cpu</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#cpumask\">cpumask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a> = <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#buffers\">buffers</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#record_disabled\">record_disabled</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ring_buffer_record_enable_cpu\">ring_buffer_record_enable_cpu</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ring_buffer_entries_cpu - get the number of entries in a cpu buffer</span>", 
"<span class=\"comment\"> * @buffer: The ring buffer</span>", 
"<span class=\"comment\"> * @cpu: The per CPU buffer to get the entries from.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#ring_buffer_entries_cpu\">ring_buffer_entries_cpu</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#cpumask\">cpumask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a> = <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#buffers\">buffers</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = (<a class=\"id\" href=\"#local_read\">local_read</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#entries\">entries</a>) - <a class=\"id\" href=\"#local_read\">local_read</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#overrun\">overrun</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>- <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#read\">read</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ring_buffer_entries_cpu\">ring_buffer_entries_cpu</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ring_buffer_overrun_cpu - get the number of overruns in a cpu_buffer</span>", 
"<span class=\"comment\"> * @buffer: The ring buffer</span>", 
"<span class=\"comment\"> * @cpu: The per CPU buffer to get the number of overruns from</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#ring_buffer_overrun_cpu\">ring_buffer_overrun_cpu</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#cpumask\">cpumask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a> = <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#buffers\">buffers</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#local_read\">local_read</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#overrun\">overrun</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ring_buffer_overrun_cpu\">ring_buffer_overrun_cpu</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ring_buffer_commit_overrun_cpu - get the number of overruns caused by commits</span>", 
"<span class=\"comment\"> * @buffer: The ring buffer</span>", 
"<span class=\"comment\"> * @cpu: The per CPU buffer to get the number of overruns from</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long", 
"<a class=\"id\" href=\"#ring_buffer_commit_overrun_cpu\">ring_buffer_commit_overrun_cpu</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#cpumask\">cpumask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a> = <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#buffers\">buffers</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#local_read\">local_read</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#commit_overrun\">commit_overrun</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ring_buffer_commit_overrun_cpu\">ring_buffer_commit_overrun_cpu</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ring_buffer_entries - get the number of entries in a buffer</span>", 
"<span class=\"comment\"> * @buffer: The ring buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the total number of entries in the ring buffer</span>", 
"<span class=\"comment\"> * (all CPU entries)</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#ring_buffer_entries\">ring_buffer_entries</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#entries\">entries</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* if you care about this being correct, lock the buffer */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_buffer_cpu\">for_each_buffer_cpu</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a> = <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#buffers\">buffers</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entries\">entries</a> += (<a class=\"id\" href=\"#local_read\">local_read</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#entries\">entries</a>) -", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#local_read\">local_read</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#overrun\">overrun</a>)) - <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#read\">read</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#entries\">entries</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ring_buffer_entries\">ring_buffer_entries</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ring_buffer_overruns - get the number of overruns in buffer</span>", 
"<span class=\"comment\"> * @buffer: The ring buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the total number of overruns in the ring buffer</span>", 
"<span class=\"comment\"> * (all CPU entries)</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#ring_buffer_overruns\">ring_buffer_overruns</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#overruns\">overruns</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* if you care about this being correct, lock the buffer */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_buffer_cpu\">for_each_buffer_cpu</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a> = <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#buffers\">buffers</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#overruns\">overruns</a> += <a class=\"id\" href=\"#local_read\">local_read</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#overrun\">overrun</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#overruns\">overruns</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ring_buffer_overruns\">ring_buffer_overruns</a>);", 
"", 
"static void <a class=\"id\" href=\"#rb_iter_reset\">rb_iter_reset</a>(struct <a class=\"id\" href=\"#ring_buffer_iter\">ring_buffer_iter</a> *<a class=\"id\" href=\"#iter\">iter</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Iterator usage is expected to have record disabled */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_page\">reader_page</a>-><a class=\"id\" href=\"#list\">list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#head_page\">head_page</a> = <a class=\"id\" href=\"#rb_set_head_page\">rb_set_head_page</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#head_page\">head_page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#head_page\">head_page</a>-><a class=\"id\" href=\"#read\">read</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#head_page\">head_page</a> = <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_page\">reader_page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_page\">reader_page</a>-><a class=\"id\" href=\"#read\">read</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#head\">head</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#read_stamp\">read_stamp</a> = <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#read_stamp\">read_stamp</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#read_stamp\">read_stamp</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#head_page\">head_page</a>-><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#time_stamp\">time_stamp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cache_reader_page\">cache_reader_page</a> = <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_page\">reader_page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cache_read\">cache_read</a> = <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#read\">read</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ring_buffer_iter_reset - reset an iterator</span>", 
"<span class=\"comment\"> * @iter: The iterator to reset</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Resets the iterator, so that it will start from the beginning</span>", 
"<span class=\"comment\"> * again.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ring_buffer_iter_reset\">ring_buffer_iter_reset</a>(struct <a class=\"id\" href=\"#ring_buffer_iter\">ring_buffer_iter</a> *<a class=\"id\" href=\"#iter\">iter</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#iter\">iter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_lock\">reader_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_iter_reset\">rb_iter_reset</a>(<a class=\"id\" href=\"#iter\">iter</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_lock\">reader_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ring_buffer_iter_reset\">ring_buffer_iter_reset</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ring_buffer_iter_empty - check if an iterator has no more to read</span>", 
"<span class=\"comment\"> * @iter: The iterator to check</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ring_buffer_iter_empty\">ring_buffer_iter_empty</a>(struct <a class=\"id\" href=\"#ring_buffer_iter\">ring_buffer_iter</a> *<a class=\"id\" href=\"#iter\">iter</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#head_page\">head_page</a> == <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#commit_page\">commit_page</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#head\">head</a> == <a class=\"id\" href=\"#rb_commit_index\">rb_commit_index</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ring_buffer_iter_empty\">ring_buffer_iter_empty</a>);", 
"", 
"static void", 
"<a class=\"id\" href=\"#rb_update_read_stamp\">rb_update_read_stamp</a>(struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#delta\">delta</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#type_len\">type_len</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RINGBUF_TYPE_PADDING\">RINGBUF_TYPE_PADDING</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RINGBUF_TYPE_TIME_EXTEND\">RINGBUF_TYPE_TIME_EXTEND</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#array\">array</a>[0];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> <<= <a class=\"id\" href=\"#TS_SHIFT\">TS_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> += <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#time_delta\">time_delta</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#read_stamp\">read_stamp</a> += <a class=\"id\" href=\"#delta\">delta</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RINGBUF_TYPE_TIME_STAMP\">RINGBUF_TYPE_TIME_STAMP</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* FIXME: not implemented */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RINGBUF_TYPE_DATA\">RINGBUF_TYPE_DATA</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#read_stamp\">read_stamp</a> += <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#time_delta\">time_delta</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#rb_update_iter_read_stamp\">rb_update_iter_read_stamp</a>(struct <a class=\"id\" href=\"#ring_buffer_iter\">ring_buffer_iter</a> *<a class=\"id\" href=\"#iter\">iter</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#delta\">delta</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#type_len\">type_len</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RINGBUF_TYPE_PADDING\">RINGBUF_TYPE_PADDING</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RINGBUF_TYPE_TIME_EXTEND\">RINGBUF_TYPE_TIME_EXTEND</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#array\">array</a>[0];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> <<= <a class=\"id\" href=\"#TS_SHIFT\">TS_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> += <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#time_delta\">time_delta</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#read_stamp\">read_stamp</a> += <a class=\"id\" href=\"#delta\">delta</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RINGBUF_TYPE_TIME_STAMP\">RINGBUF_TYPE_TIME_STAMP</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* FIXME: not implemented */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RINGBUF_TYPE_DATA\">RINGBUF_TYPE_DATA</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#read_stamp\">read_stamp</a> += <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#time_delta\">time_delta</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *", 
"<a class=\"id\" href=\"#rb_get_reader_page\">rb_get_reader_page</a>(struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#reader\">reader</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#overwrite\">overwrite</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_loops\">nr_loops</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_spin_lock\">arch_spin_lock</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
" <a class=\"id\" href=\"#again\">again</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This should normally only loop twice. But because the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * start of the reader inserts an empty page, it causes</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a case where we will loop three times. There should be no</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * reason to loop four times (that I know of).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#RB_WARN_ON\">RB_WARN_ON</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, ++<a class=\"id\" href=\"#nr_loops\">nr_loops</a> &gt; 3)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reader\">reader</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reader\">reader</a> = <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_page\">reader_page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If there's more to read, return this page */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_page\">reader_page</a>-><a class=\"id\" href=\"#read\">read</a> &lt; <a class=\"id\" href=\"#rb_page_size\">rb_page_size</a>(<a class=\"id\" href=\"#reader\">reader</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Never should we have an index greater than the size */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#RB_WARN_ON\">RB_WARN_ON</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_page\">reader_page</a>-><a class=\"id\" href=\"#read\">read</a> &gt; <a class=\"id\" href=\"#rb_page_size\">rb_page_size</a>(<a class=\"id\" href=\"#reader\">reader</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* check if we caught up to the tail */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reader\">reader</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#commit_page\">commit_page</a> == <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_page\">reader_page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Reset the reader page to size zero.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_set\">local_set</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_page\">reader_page</a>-><a class=\"id\" href=\"#write\">write</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_set\">local_set</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_page\">reader_page</a>-><a class=\"id\" href=\"#entries\">entries</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_set\">local_set</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_page\">reader_page</a>-><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#commit\">commit</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_page\">reader_page</a>-><a class=\"id\" href=\"#real_end\">real_end</a> = 0;", 
"", 
" <a class=\"id\" href=\"#spin\">spin</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Splice the empty reader page into the list around the head.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reader\">reader</a> = <a class=\"id\" href=\"#rb_set_head_page\">rb_set_head_page</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_page\">reader_page</a>-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#rb_list_head\">rb_list_head</a>(<a class=\"id\" href=\"#reader\">reader</a>-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_page\">reader_page</a>-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#reader\">reader</a>-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#prev\">prev</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cpu_buffer-&gt;pages just needs to point to the buffer, it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  has no specific buffer page to point to. Lets move it out</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  of our way so we don't accidently swap it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#reader\">reader</a>-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#prev\">prev</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The reader page will be pointing to the new head */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_set_list_to_head\">rb_set_list_to_head</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, &amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_page\">reader_page</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We want to make sure we read the overruns after we set up our</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pointers to the next object. The writer side does a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cmpxchg to cross pages which acts as the mb on the writer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * side. Note, the reader will constantly fail the swap</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * while the writer is updating the pointers, so this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * guarantees that the overwrite recorded here is the one we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * want to compare with the last_overrun.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#overwrite\">overwrite</a> = <a class=\"id\" href=\"#local_read\">local_read</a>(&amp;(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#overrun\">overrun</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Here's the tricky part.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We need to move the pointer past the header page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * But we can only do that if a writer is not currently</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * moving it. The page before the header page has the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * flag bit '1' set if it is pointing to the page we want.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * but if the writer is in the process of moving it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * than it will be '2' or already moved '0'.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#rb_head_page_replace\">rb_head_page_replace</a>(<a class=\"id\" href=\"#reader\">reader</a>, <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_page\">reader_page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we did not convert it, then we must try again.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#spin\">spin</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Yeah! We succeeded in replacing the page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now make the new head point back to the reader page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_list_head\">rb_list_head</a>(<a class=\"id\" href=\"#reader\">reader</a>-><a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#next\">next</a>)-><a class=\"id\" href=\"#prev\">prev</a> = &amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_page\">reader_page</a>-><a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_inc_page\">rb_inc_page</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, &amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#head_page\">head_page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Finally update the reader page to the new head */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_page\">reader_page</a> = <a class=\"id\" href=\"#reader\">reader</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_reset_reader_page\">rb_reset_reader_page</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#overwrite\">overwrite</a> != <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#last_overrun\">last_overrun</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#lost_events\">lost_events</a> = <a class=\"id\" href=\"#overwrite\">overwrite</a> - <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#last_overrun\">last_overrun</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#last_overrun\">last_overrun</a> = <a class=\"id\" href=\"#overwrite\">overwrite</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_spin_unlock\">arch_spin_unlock</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#reader\">reader</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#rb_advance_reader\">rb_advance_reader</a>(struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#reader\">reader</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#length\">length</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reader\">reader</a> = <a class=\"id\" href=\"#rb_get_reader_page\">rb_get_reader_page</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* This function should not be called when buffer is empty */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#RB_WARN_ON\">RB_WARN_ON</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, !<a class=\"id\" href=\"#reader\">reader</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#rb_reader_event\">rb_reader_event</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#type_len\">type_len</a> <= <a class=\"id\" href=\"#RINGBUF_TYPE_DATA_TYPE_LEN_MAX\">RINGBUF_TYPE_DATA_TYPE_LEN_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#read\">read</a>++;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_update_read_stamp\">rb_update_read_stamp</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#rb_event_length\">rb_event_length</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_page\">reader_page</a>-><a class=\"id\" href=\"#read\">read</a> += <a class=\"id\" href=\"#length\">length</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#rb_advance_iter\">rb_advance_iter</a>(struct <a class=\"id\" href=\"#ring_buffer_iter\">ring_buffer_iter</a> *<a class=\"id\" href=\"#iter\">iter</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#length\">length</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check if we are at the end of the buffer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#head\">head</a> >= <a class=\"id\" href=\"#rb_page_size\">rb_page_size</a>(<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#head_page\">head_page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* discarded commits can make the page empty */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#head_page\">head_page</a> == <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#commit_page\">commit_page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rb_inc_iter\">rb_inc_iter</a>(<a class=\"id\" href=\"#iter\">iter</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#rb_iter_head_event\">rb_iter_head_event</a>(<a class=\"id\" href=\"#iter\">iter</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#rb_event_length\">rb_event_length</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This should not be called to advance the header if we are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * at the tail of the buffer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#RB_WARN_ON\">RB_WARN_ON</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       (<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#head_page\">head_page</a> == <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#commit_page\">commit_page</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>       (<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#head\">head</a> + <a class=\"id\" href=\"#length\">length</a> &gt; <a class=\"id\" href=\"#rb_commit_index\">rb_commit_index</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>))))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_update_iter_read_stamp\">rb_update_iter_read_stamp</a>(<a class=\"id\" href=\"#iter\">iter</a>, <a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#head\">head</a> += <a class=\"id\" href=\"#length\">length</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* check for end of page padding */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#head\">head</a> >= <a class=\"id\" href=\"#rb_page_size\">rb_page_size</a>(<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#head_page\">head_page</a>)) &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#head_page\">head_page</a> != <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#commit_page\">commit_page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rb_advance_iter\">rb_advance_iter</a>(<a class=\"id\" href=\"#iter\">iter</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#rb_lost_events\">rb_lost_events</a>(struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#lost_events\">lost_events</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *", 
"<a class=\"id\" href=\"#rb_buffer_peek\">rb_buffer_peek</a>(struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#ts\">ts</a>,", 
"<span class=\"ts\"/>       unsigned long *<a class=\"id\" href=\"#lost_events\">lost_events</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#reader\">reader</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_loops\">nr_loops</a> = 0;", 
"", 
" <a class=\"id\" href=\"#again\">again</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We repeat when a timestamp is encountered. It is possible</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to get multiple timestamps from an interrupt entering just</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * as one timestamp is about to be written, or from discarded</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * commits. The most that we can have is the number on a single page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#RB_WARN_ON\">RB_WARN_ON</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, ++<a class=\"id\" href=\"#nr_loops\">nr_loops</a> &gt; <a class=\"id\" href=\"#RB_TIMESTAMPS_PER_PAGE\">RB_TIMESTAMPS_PER_PAGE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reader\">reader</a> = <a class=\"id\" href=\"#rb_get_reader_page\">rb_get_reader_page</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#reader\">reader</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#rb_reader_event\">rb_reader_event</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>);", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#type_len\">type_len</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RINGBUF_TYPE_PADDING\">RINGBUF_TYPE_PADDING</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rb_null_event\">rb_null_event</a>(<a class=\"id\" href=\"#event\">event</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#RB_WARN_ON\">RB_WARN_ON</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Because the writer could be discarding every</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * event it creates (which would probably be bad)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * if we were to go back to \"again\" then we may never</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * catch up, and will trigger the warn on, or lock</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the box. Return the padding, and we will release</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the current locks, and try again.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#event\">event</a>;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RINGBUF_TYPE_TIME_EXTEND\">RINGBUF_TYPE_TIME_EXTEND</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Internal data, OK to advance */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rb_advance_reader\">rb_advance_reader</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RINGBUF_TYPE_TIME_STAMP\">RINGBUF_TYPE_TIME_STAMP</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* FIXME: not implemented */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rb_advance_reader\">rb_advance_reader</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RINGBUF_TYPE_DATA\">RINGBUF_TYPE_DATA</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ts\">ts</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ts\">ts</a> = <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#read_stamp\">read_stamp</a> + <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#time_delta\">time_delta</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ring_buffer_normalize_time_stamp\">ring_buffer_normalize_time_stamp</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#ts\">ts</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#lost_events\">lost_events</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#lost_events\">lost_events</a> = <a class=\"id\" href=\"#rb_lost_events\">rb_lost_events</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#event\">event</a>;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ring_buffer_peek\">ring_buffer_peek</a>);", 
"", 
"static struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *", 
"<a class=\"id\" href=\"#rb_iter_peek\">rb_iter_peek</a>(struct <a class=\"id\" href=\"#ring_buffer_iter\">ring_buffer_iter</a> *<a class=\"id\" href=\"#iter\">iter</a>, <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#ts\">ts</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_loops\">nr_loops</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#buffer\">buffer</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check if someone performed a consuming read to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the buffer. A consuming read invalidates the iterator</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and we need to reset the iterator in this case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cache_read\">cache_read</a> != <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#read\">read</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cache_reader_page\">cache_reader_page</a> != <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_page\">reader_page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rb_iter_reset\">rb_iter_reset</a>(<a class=\"id\" href=\"#iter\">iter</a>);", 
"", 
" <a class=\"id\" href=\"#again\">again</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ring_buffer_iter_empty\">ring_buffer_iter_empty</a>(<a class=\"id\" href=\"#iter\">iter</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We repeat when a timestamp is encountered.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We can get multiple timestamps by nested interrupts or also</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if filtering is on (discarding commits). Since discarding</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * commits can be frequent we can get a lot of timestamps.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * But we limit them by not adding timestamps if they begin</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * at the start of a page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#RB_WARN_ON\">RB_WARN_ON</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, ++<a class=\"id\" href=\"#nr_loops\">nr_loops</a> &gt; <a class=\"id\" href=\"#RB_TIMESTAMPS_PER_PAGE\">RB_TIMESTAMPS_PER_PAGE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rb_per_cpu_empty\">rb_per_cpu_empty</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#head\">head</a> >= <a class=\"id\" href=\"#local_read\">local_read</a>(&amp;<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#head_page\">head_page</a>-><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#commit\">commit</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rb_inc_iter\">rb_inc_iter</a>(<a class=\"id\" href=\"#iter\">iter</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#rb_iter_head_event\">rb_iter_head_event</a>(<a class=\"id\" href=\"#iter\">iter</a>);", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#type_len\">type_len</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RINGBUF_TYPE_PADDING\">RINGBUF_TYPE_PADDING</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rb_null_event\">rb_null_event</a>(<a class=\"id\" href=\"#event\">event</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rb_inc_iter\">rb_inc_iter</a>(<a class=\"id\" href=\"#iter\">iter</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rb_advance_iter\">rb_advance_iter</a>(<a class=\"id\" href=\"#iter\">iter</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#event\">event</a>;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RINGBUF_TYPE_TIME_EXTEND\">RINGBUF_TYPE_TIME_EXTEND</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Internal data, OK to advance */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rb_advance_iter\">rb_advance_iter</a>(<a class=\"id\" href=\"#iter\">iter</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RINGBUF_TYPE_TIME_STAMP\">RINGBUF_TYPE_TIME_STAMP</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* FIXME: not implemented */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rb_advance_iter\">rb_advance_iter</a>(<a class=\"id\" href=\"#iter\">iter</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RINGBUF_TYPE_DATA\">RINGBUF_TYPE_DATA</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ts\">ts</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ts\">ts</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#read_stamp\">read_stamp</a> + <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#time_delta\">time_delta</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ring_buffer_normalize_time_stamp\">ring_buffer_normalize_time_stamp</a>(<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#ts\">ts</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#event\">event</a>;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ring_buffer_iter_peek\">ring_buffer_iter_peek</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#rb_ok_to_lock\">rb_ok_to_lock</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If an NMI die dumps out the content of the ring buffer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * do not grab locks. We also permanently disable the ring</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * buffer too. A one time deal is all you get from reading</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the ring buffer from an NMI.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#in_nmi\">in_nmi</a>()))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tracing_off_permanent\">tracing_off_permanent</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ring_buffer_peek - peek at the next event to be read</span>", 
"<span class=\"comment\"> * @buffer: The ring buffer to read</span>", 
"<span class=\"comment\"> * @cpu: The cpu to peak at</span>", 
"<span class=\"comment\"> * @ts: The timestamp counter of this event.</span>", 
"<span class=\"comment\"> * @lost_events: a variable to store if events were lost (may be NULL)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This will return the event that will be read next, but does</span>", 
"<span class=\"comment\"> * not consume the data.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *", 
"<a class=\"id\" href=\"#ring_buffer_peek\">ring_buffer_peek</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#ts\">ts</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> unsigned long *<a class=\"id\" href=\"#lost_events\">lost_events</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a> = <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#buffers\">buffers</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#dolock\">dolock</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#cpumask\">cpumask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dolock\">dolock</a> = <a class=\"id\" href=\"#rb_ok_to_lock\">rb_ok_to_lock</a>();", 
" <a class=\"id\" href=\"#again\">again</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dolock\">dolock</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_lock\">reader_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#rb_buffer_peek\">rb_buffer_peek</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#ts\">ts</a>, <a class=\"id\" href=\"#lost_events\">lost_events</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a> && <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#type_len\">type_len</a> == <a class=\"id\" href=\"#RINGBUF_TYPE_PADDING\">RINGBUF_TYPE_PADDING</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rb_advance_reader\">rb_advance_reader</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dolock\">dolock</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_lock\">reader_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a> && <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#type_len\">type_len</a> == <a class=\"id\" href=\"#RINGBUF_TYPE_PADDING\">RINGBUF_TYPE_PADDING</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#event\">event</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ring_buffer_iter_peek - peek at the next event to be read</span>", 
"<span class=\"comment\"> * @iter: The ring buffer iterator</span>", 
"<span class=\"comment\"> * @ts: The timestamp counter of this event.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This will return the event that will be read next, but does</span>", 
"<span class=\"comment\"> * not increment the iterator.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *", 
"<a class=\"id\" href=\"#ring_buffer_iter_peek\">ring_buffer_iter_peek</a>(struct <a class=\"id\" href=\"#ring_buffer_iter\">ring_buffer_iter</a> *<a class=\"id\" href=\"#iter\">iter</a>, <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#ts\">ts</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
" <a class=\"id\" href=\"#again\">again</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_lock\">reader_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#rb_iter_peek\">rb_iter_peek</a>(<a class=\"id\" href=\"#iter\">iter</a>, <a class=\"id\" href=\"#ts\">ts</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_lock\">reader_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a> && <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#type_len\">type_len</a> == <a class=\"id\" href=\"#RINGBUF_TYPE_PADDING\">RINGBUF_TYPE_PADDING</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#event\">event</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ring_buffer_consume - return an event and consume it</span>", 
"<span class=\"comment\"> * @buffer: The ring buffer to get the next event from</span>", 
"<span class=\"comment\"> * @cpu: the cpu to read the buffer from</span>", 
"<span class=\"comment\"> * @ts: a variable to store the timestamp (may be NULL)</span>", 
"<span class=\"comment\"> * @lost_events: a variable to store if events were lost (may be NULL)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns the next event in the ring buffer, and that event is consumed.</span>", 
"<span class=\"comment\"> * Meaning, that sequential reads will keep returning a different event,</span>", 
"<span class=\"comment\"> * and eventually empty the ring buffer if the producer is slower.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *", 
"<a class=\"id\" href=\"#ring_buffer_consume\">ring_buffer_consume</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#ts\">ts</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    unsigned long *<a class=\"id\" href=\"#lost_events\">lost_events</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#dolock\">dolock</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dolock\">dolock</a> = <a class=\"id\" href=\"#rb_ok_to_lock\">rb_ok_to_lock</a>();", 
"", 
" <a class=\"id\" href=\"#again\">again</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* might be called in atomic */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#cpumask\">cpumask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a> = <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#buffers\">buffers</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dolock\">dolock</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_lock\">reader_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#rb_buffer_peek\">rb_buffer_peek</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#ts\">ts</a>, <a class=\"id\" href=\"#lost_events\">lost_events</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#lost_events\">lost_events</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rb_advance_reader\">rb_advance_reader</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dolock\">dolock</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_lock\">reader_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a> && <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#type_len\">type_len</a> == <a class=\"id\" href=\"#RINGBUF_TYPE_PADDING\">RINGBUF_TYPE_PADDING</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#event\">event</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ring_buffer_consume\">ring_buffer_consume</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ring_buffer_read_prepare - Prepare for a non consuming read of the buffer</span>", 
"<span class=\"comment\"> * @buffer: The ring buffer to read from</span>", 
"<span class=\"comment\"> * @cpu: The cpu buffer to iterate over</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This performs the initial preparations necessary to iterate</span>", 
"<span class=\"comment\"> * through the buffer.  Memory is allocated, buffer recording</span>", 
"<span class=\"comment\"> * is disabled, and the iterator pointer is returned to the caller.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Disabling buffer recordng prevents the reading from being</span>", 
"<span class=\"comment\"> * corrupted. This is not a consuming read, so a producer is not</span>", 
"<span class=\"comment\"> * expected.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * After a sequence of ring_buffer_read_prepare calls, the user is</span>", 
"<span class=\"comment\"> * expected to make at least one call to ring_buffer_prepare_sync.</span>", 
"<span class=\"comment\"> * Afterwards, ring_buffer_read_start is invoked to get things going</span>", 
"<span class=\"comment\"> * for real.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This overall must be paired with ring_buffer_finish.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ring_buffer_iter\">ring_buffer_iter</a> *", 
"<a class=\"id\" href=\"#ring_buffer_read_prepare\">ring_buffer_read_prepare</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_iter\">ring_buffer_iter</a> *<a class=\"id\" href=\"#iter\">iter</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#cpumask\">cpumask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#iter\">iter</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#iter\">iter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a> = <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#buffers\">buffers</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a> = <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#record_disabled\">record_disabled</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#iter\">iter</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ring_buffer_read_prepare\">ring_buffer_read_prepare</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ring_buffer_read_prepare_sync - Synchronize a set of prepare calls</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * All previously invoked ring_buffer_read_prepare calls to prepare</span>", 
"<span class=\"comment\"> * iterators will be synchronized.  Afterwards, read_buffer_read_start</span>", 
"<span class=\"comment\"> * calls on those iterators are allowed.</span>", 
"<span class=\"comment\"> */</span>", 
"void", 
"<a class=\"id\" href=\"#ring_buffer_read_prepare_sync\">ring_buffer_read_prepare_sync</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synchronize_sched\">synchronize_sched</a>();", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ring_buffer_read_prepare_sync\">ring_buffer_read_prepare_sync</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ring_buffer_read_start - start a non consuming read of the buffer</span>", 
"<span class=\"comment\"> * @iter: The iterator returned by ring_buffer_read_prepare</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This finalizes the startup of an iteration through the buffer.</span>", 
"<span class=\"comment\"> * The iterator comes from a call to ring_buffer_read_prepare and</span>", 
"<span class=\"comment\"> * an intervening ring_buffer_read_prepare_sync must have been</span>", 
"<span class=\"comment\"> * performed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Must be paired with ring_buffer_finish.</span>", 
"<span class=\"comment\"> */</span>", 
"void", 
"<a class=\"id\" href=\"#ring_buffer_read_start\">ring_buffer_read_start</a>(struct <a class=\"id\" href=\"#ring_buffer_iter\">ring_buffer_iter</a> *<a class=\"id\" href=\"#iter\">iter</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#iter\">iter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_lock\">reader_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_spin_lock\">arch_spin_lock</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_iter_reset\">rb_iter_reset</a>(<a class=\"id\" href=\"#iter\">iter</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_spin_unlock\">arch_spin_unlock</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_lock\">reader_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ring_buffer_read_start\">ring_buffer_read_start</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ring_buffer_finish - finish reading the iterator of the buffer</span>", 
"<span class=\"comment\"> * @iter: The iterator retrieved by ring_buffer_start</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This re-enables the recording to the buffer, and frees the</span>", 
"<span class=\"comment\"> * iterator.</span>", 
"<span class=\"comment\"> */</span>", 
"void", 
"<a class=\"id\" href=\"#ring_buffer_read_finish\">ring_buffer_read_finish</a>(struct <a class=\"id\" href=\"#ring_buffer_iter\">ring_buffer_iter</a> *<a class=\"id\" href=\"#iter\">iter</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#record_disabled\">record_disabled</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#iter\">iter</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ring_buffer_read_finish\">ring_buffer_read_finish</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ring_buffer_read - read the next item in the ring buffer by the iterator</span>", 
"<span class=\"comment\"> * @iter: The ring buffer iterator</span>", 
"<span class=\"comment\"> * @ts: The time stamp of the event read.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This reads the next event in the ring buffer and increments the iterator.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *", 
"<a class=\"id\" href=\"#ring_buffer_read\">ring_buffer_read</a>(struct <a class=\"id\" href=\"#ring_buffer_iter\">ring_buffer_iter</a> *<a class=\"id\" href=\"#iter\">iter</a>, <a class=\"id\" href=\"#u64\">u64</a> *<a class=\"id\" href=\"#ts\">ts</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_lock\">reader_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
" <a class=\"id\" href=\"#again\">again</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#rb_iter_peek\">rb_iter_peek</a>(<a class=\"id\" href=\"#iter\">iter</a>, <a class=\"id\" href=\"#ts\">ts</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#event\">event</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#type_len\">type_len</a> == <a class=\"id\" href=\"#RINGBUF_TYPE_PADDING\">RINGBUF_TYPE_PADDING</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#again\">again</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_advance_iter\">rb_advance_iter</a>(<a class=\"id\" href=\"#iter\">iter</a>);", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_lock\">reader_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#event\">event</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ring_buffer_read\">ring_buffer_read</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ring_buffer_size - return the size of the ring buffer (in bytes)</span>", 
"<span class=\"comment\"> * @buffer: The ring buffer.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#ring_buffer_size\">ring_buffer_size</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#BUF_PAGE_SIZE\">BUF_PAGE_SIZE</a> * <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#pages\">pages</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ring_buffer_size\">ring_buffer_size</a>);", 
"", 
"static void", 
"<a class=\"id\" href=\"#rb_reset_cpu\">rb_reset_cpu</a>(struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_head_page_deactivate\">rb_head_page_deactivate</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#head_page\">head_page</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#pages\">pages</a>, struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_set\">local_set</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#head_page\">head_page</a>-><a class=\"id\" href=\"#write\">write</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_set\">local_set</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#head_page\">head_page</a>-><a class=\"id\" href=\"#entries\">entries</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_set\">local_set</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#head_page\">head_page</a>-><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#commit\">commit</a>, 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#head_page\">head_page</a>-><a class=\"id\" href=\"#read\">read</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#tail_page\">tail_page</a> = <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#head_page\">head_page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#commit_page\">commit_page</a> = <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#head_page\">head_page</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_page\">reader_page</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_set\">local_set</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_page\">reader_page</a>-><a class=\"id\" href=\"#write\">write</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_set\">local_set</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_page\">reader_page</a>-><a class=\"id\" href=\"#entries\">entries</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_set\">local_set</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_page\">reader_page</a>-><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#commit\">commit</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_page\">reader_page</a>-><a class=\"id\" href=\"#read\">read</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_set\">local_set</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#commit_overrun\">commit_overrun</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_set\">local_set</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#overrun\">overrun</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_set\">local_set</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#entries\">entries</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_set\">local_set</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#committing\">committing</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_set\">local_set</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#commits\">commits</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#read\">read</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#write_stamp\">write_stamp</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#read_stamp\">read_stamp</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#lost_events\">lost_events</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#last_overrun\">last_overrun</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_head_page_activate\">rb_head_page_activate</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ring_buffer_reset_cpu - reset a ring buffer per CPU buffer</span>", 
"<span class=\"comment\"> * @buffer: The ring buffer to reset a per cpu buffer of</span>", 
"<span class=\"comment\"> * @cpu: The CPU buffer to be reset</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ring_buffer_reset_cpu\">ring_buffer_reset_cpu</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a> = <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#buffers\">buffers</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#cpumask\">cpumask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#record_disabled\">record_disabled</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_lock\">reader_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#RB_WARN_ON\">RB_WARN_ON</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>, <a class=\"id\" href=\"#local_read\">local_read</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#committing\">committing</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_spin_lock\">arch_spin_lock</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_reset_cpu\">rb_reset_cpu</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_spin_unlock\">arch_spin_unlock</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_lock\">reader_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#record_disabled\">record_disabled</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ring_buffer_reset_cpu\">ring_buffer_reset_cpu</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ring_buffer_reset - reset a ring buffer</span>", 
"<span class=\"comment\"> * @buffer: The ring buffer to reset all cpu buffers</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ring_buffer_reset\">ring_buffer_reset</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_buffer_cpu\">for_each_buffer_cpu</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ring_buffer_reset_cpu\">ring_buffer_reset_cpu</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ring_buffer_reset\">ring_buffer_reset</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * rind_buffer_empty - is the ring buffer empty?</span>", 
"<span class=\"comment\"> * @buffer: The ring buffer to test</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ring_buffer_empty\">ring_buffer_empty</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#dolock\">dolock</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dolock\">dolock</a> = <a class=\"id\" href=\"#rb_ok_to_lock\">rb_ok_to_lock</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* yes this is racy, but if you don't like the race, lock the buffer */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_buffer_cpu\">for_each_buffer_cpu</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a> = <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#buffers\">buffers</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dolock\">dolock</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_lock\">reader_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#rb_per_cpu_empty\">rb_per_cpu_empty</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dolock\">dolock</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_lock\">reader_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ring_buffer_empty\">ring_buffer_empty</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ring_buffer_empty_cpu - is a cpu buffer of a ring buffer empty?</span>", 
"<span class=\"comment\"> * @buffer: The ring buffer</span>", 
"<span class=\"comment\"> * @cpu: The CPU buffer to test</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ring_buffer_empty_cpu\">ring_buffer_empty_cpu</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#dolock\">dolock</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#cpumask\">cpumask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dolock\">dolock</a> = <a class=\"id\" href=\"#rb_ok_to_lock\">rb_ok_to_lock</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a> = <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#buffers\">buffers</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dolock\">dolock</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_lock\">reader_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#rb_per_cpu_empty\">rb_per_cpu_empty</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dolock\">dolock</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_lock\">reader_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ring_buffer_empty_cpu\">ring_buffer_empty_cpu</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_RING_BUFFER_ALLOW_SWAP\">CONFIG_RING_BUFFER_ALLOW_SWAP</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ring_buffer_swap_cpu - swap a CPU buffer between two ring buffers</span>", 
"<span class=\"comment\"> * @buffer_a: One buffer to swap with</span>", 
"<span class=\"comment\"> * @buffer_b: The other buffer to swap with</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is useful for tracers that want to take a \"snapshot\"</span>", 
"<span class=\"comment\"> * of a CPU buffer and has another back up buffer lying around.</span>", 
"<span class=\"comment\"> * it is expected that the tracer handles the cpu buffer not being</span>", 
"<span class=\"comment\"> * used at the moment.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ring_buffer_swap_cpu\">ring_buffer_swap_cpu</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer_a\">buffer_a</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer_b\">buffer_b</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer_a\">cpu_buffer_a</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer_b\">cpu_buffer_b</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#buffer_a\">buffer_a</a>-><a class=\"id\" href=\"#cpumask\">cpumask</a>) ||", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#buffer_b\">buffer_b</a>-><a class=\"id\" href=\"#cpumask\">cpumask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* At least make sure the two buffers are somewhat the same */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_a\">buffer_a</a>-><a class=\"id\" href=\"#pages\">pages</a> != <a class=\"id\" href=\"#buffer_b\">buffer_b</a>-><a class=\"id\" href=\"#pages\">pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ring_buffer_flags\">ring_buffer_flags</a> != <a class=\"id\" href=\"#RB_BUFFERS_ON\">RB_BUFFERS_ON</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#buffer_a\">buffer_a</a>-><a class=\"id\" href=\"#record_disabled\">record_disabled</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#buffer_b\">buffer_b</a>-><a class=\"id\" href=\"#record_disabled\">record_disabled</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer_a\">cpu_buffer_a</a> = <a class=\"id\" href=\"#buffer_a\">buffer_a</a>-><a class=\"id\" href=\"#buffers\">buffers</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer_b\">cpu_buffer_b</a> = <a class=\"id\" href=\"#buffer_b\">buffer_b</a>-><a class=\"id\" href=\"#buffers\">buffers</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#cpu_buffer_a\">cpu_buffer_a</a>-><a class=\"id\" href=\"#record_disabled\">record_disabled</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#cpu_buffer_b\">cpu_buffer_b</a>-><a class=\"id\" href=\"#record_disabled\">record_disabled</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We can't do a synchronize_sched here because this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * function can be called in atomic context.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Normally this will be called from the same CPU as cpu.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If not it's up to the caller to protect this.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#cpu_buffer_a\">cpu_buffer_a</a>-><a class=\"id\" href=\"#record_disabled\">record_disabled</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#cpu_buffer_b\">cpu_buffer_b</a>-><a class=\"id\" href=\"#record_disabled\">record_disabled</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#local_read\">local_read</a>(&amp;<a class=\"id\" href=\"#cpu_buffer_a\">cpu_buffer_a</a>-><a class=\"id\" href=\"#committing\">committing</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_dec\">out_dec</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#local_read\">local_read</a>(&amp;<a class=\"id\" href=\"#cpu_buffer_b\">cpu_buffer_b</a>-><a class=\"id\" href=\"#committing\">committing</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_dec\">out_dec</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer_a\">buffer_a</a>-><a class=\"id\" href=\"#buffers\">buffers</a>[<a class=\"id\" href=\"#cpu\">cpu</a>] = <a class=\"id\" href=\"#cpu_buffer_b\">cpu_buffer_b</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer_b\">buffer_b</a>-><a class=\"id\" href=\"#buffers\">buffers</a>[<a class=\"id\" href=\"#cpu\">cpu</a>] = <a class=\"id\" href=\"#cpu_buffer_a\">cpu_buffer_a</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer_b\">cpu_buffer_b</a>-><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#buffer_a\">buffer_a</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer_a\">cpu_buffer_a</a>-><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#buffer_b\">buffer_b</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<a class=\"id\" href=\"#out_dec\">out_dec</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#cpu_buffer_a\">cpu_buffer_a</a>-><a class=\"id\" href=\"#record_disabled\">record_disabled</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#cpu_buffer_b\">cpu_buffer_b</a>-><a class=\"id\" href=\"#record_disabled\">record_disabled</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ring_buffer_swap_cpu\">ring_buffer_swap_cpu</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_RING_BUFFER_ALLOW_SWAP */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ring_buffer_alloc_read_page - allocate a page to read from buffer</span>", 
"<span class=\"comment\"> * @buffer: the buffer to allocate for.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is used in conjunction with ring_buffer_read_page.</span>", 
"<span class=\"comment\"> * When reading a full page from the ring buffer, these functions</span>", 
"<span class=\"comment\"> * can be used to speed up the process. The calling function should</span>", 
"<span class=\"comment\"> * allocate a few pages first with this function. Then when it</span>", 
"<span class=\"comment\"> * needs to get pages from the ring buffer, it passes the result</span>", 
"<span class=\"comment\"> * of this function into ring_buffer_read_page, which will swap</span>", 
"<span class=\"comment\"> * the page that was allocated, with the read page of the buffer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns:</span>", 
"<span class=\"comment\"> *  The page allocated, or NULL on error.</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#ring_buffer_alloc_read_page\">ring_buffer_alloc_read_page</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_data_page\">buffer_data_page</a> *<a class=\"id\" href=\"#bpage\">bpage</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#__get_free_page\">__get_free_page</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#addr\">addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bpage\">bpage</a> = (void *)<a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb_init_page\">rb_init_page</a>(<a class=\"id\" href=\"#bpage\">bpage</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bpage\">bpage</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ring_buffer_alloc_read_page\">ring_buffer_alloc_read_page</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ring_buffer_free_read_page - free an allocated read page</span>", 
"<span class=\"comment\"> * @buffer: the buffer the page was allocate for</span>", 
"<span class=\"comment\"> * @data: the page to free</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Free a page allocated from ring_buffer_alloc_read_page.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ring_buffer_free_read_page\">ring_buffer_free_read_page</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_page\">free_page</a>((unsigned long)<a class=\"id\" href=\"#data\">data</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ring_buffer_free_read_page\">ring_buffer_free_read_page</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ring_buffer_read_page - extract a page from the ring buffer</span>", 
"<span class=\"comment\"> * @buffer: buffer to extract from</span>", 
"<span class=\"comment\"> * @data_page: the page to use allocated from ring_buffer_alloc_read_page</span>", 
"<span class=\"comment\"> * @len: amount to extract</span>", 
"<span class=\"comment\"> * @cpu: the cpu of the buffer to extract</span>", 
"<span class=\"comment\"> * @full: should the extraction only happen when the page is full.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function will pull out a page from the ring buffer and consume it.</span>", 
"<span class=\"comment\"> * @data_page must be the address of the variable that was returned</span>", 
"<span class=\"comment\"> * from ring_buffer_alloc_read_page. This is because the page might be used</span>", 
"<span class=\"comment\"> * to swap with a page in the ring buffer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * for example:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>rpage = ring_buffer_alloc_read_page(buffer);</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>if (!rpage)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>return error;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ret = ring_buffer_read_page(buffer, &amp;rpage, len, cpu, 0);</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>if (ret &gt;= 0)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>process_page(rpage, ret);</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When @full is set, the function will not return true unless</span>", 
"<span class=\"comment\"> * the writer is off the reader page.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note: it is up to the calling functions to handle sleeps and wakeups.</span>", 
"<span class=\"comment\"> *  The ring buffer can be used anywhere in the kernel and can not</span>", 
"<span class=\"comment\"> *  blindly call wake_up. The layer that uses the ring buffer must be</span>", 
"<span class=\"comment\"> *  responsible for that.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns:</span>", 
"<span class=\"comment\"> *  &gt;=0 if data has been transferred, returns the offset of consumed data.</span>", 
"<span class=\"comment\"> *  &lt;0 if no data has been transferred.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ring_buffer_read_page\">ring_buffer_read_page</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  void **<a class=\"id\" href=\"#data_page\">data_page</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>, int <a class=\"id\" href=\"#full\">full</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_per_cpu\">ring_buffer_per_cpu</a> *<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a> = <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#buffers\">buffers</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_data_page\">buffer_data_page</a> *<a class=\"id\" href=\"#bpage\">bpage</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_page\">buffer_page</a> *<a class=\"id\" href=\"#reader\">reader</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#missed_events\">missed_events</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#commit\">commit</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#read\">read</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#save_timestamp\">save_timestamp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = -1;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#cpumask\">cpumask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If len is not big enough to hold the page header, then</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we can not copy anything.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> <= <a class=\"id\" href=\"#BUF_PAGE_HDR_SIZE\">BUF_PAGE_HDR_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#BUF_PAGE_HDR_SIZE\">BUF_PAGE_HDR_SIZE</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#data_page\">data_page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bpage\">bpage</a> = *<a class=\"id\" href=\"#data_page\">data_page</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bpage\">bpage</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_lock\">reader_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#reader\">reader</a> = <a class=\"id\" href=\"#rb_get_reader_page\">rb_get_reader_page</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#reader\">reader</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#rb_reader_event\">rb_reader_event</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read\">read</a> = <a class=\"id\" href=\"#reader\">reader</a>-><a class=\"id\" href=\"#read\">read</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#commit\">commit</a> = <a class=\"id\" href=\"#rb_page_commit\">rb_page_commit</a>(<a class=\"id\" href=\"#reader\">reader</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check if any events were dropped */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#missed_events\">missed_events</a> = <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#lost_events\">lost_events</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this page has been partially read or</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if len is not big enough to read the rest of the page or</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a writer is still on the page, then</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we must copy the data from the page to the buffer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Otherwise, we can simply swap the page with the one passed in.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#read\">read</a> || (<a class=\"id\" href=\"#len\">len</a> &lt; (<a class=\"id\" href=\"#commit\">commit</a> - <a class=\"id\" href=\"#read\">read</a>)) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_page\">reader_page</a> == <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#commit_page\">commit_page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_data_page\">buffer_data_page</a> *<a class=\"id\" href=\"#rpage\">rpage</a> = <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_page\">reader_page</a>-><a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#rpos\">rpos</a> = <a class=\"id\" href=\"#read\">read</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#pos\">pos</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#full\">full</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &gt; (<a class=\"id\" href=\"#commit\">commit</a> - <a class=\"id\" href=\"#read\">read</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = (<a class=\"id\" href=\"#commit\">commit</a> - <a class=\"id\" href=\"#read\">read</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#rb_event_length\">rb_event_length</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &lt; <a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* save the current timestamp, since the user will need it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#save_timestamp\">save_timestamp</a> = <a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#read_stamp\">read_stamp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Need to copy one event at a time */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#bpage\">bpage</a>-><a class=\"id\" href=\"#data\">data</a> + <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#rpage\">rpage</a>-><a class=\"id\" href=\"#data\">data</a> + <a class=\"id\" href=\"#rpos\">rpos</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> -= <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rb_advance_reader\">rb_advance_reader</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rpos\">rpos</a> = <a class=\"id\" href=\"#reader\">reader</a>-><a class=\"id\" href=\"#read\">read</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> += <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rpos\">rpos</a> >= <a class=\"id\" href=\"#commit\">commit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#rb_reader_event\">rb_reader_event</a>(<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#rb_event_length\">rb_event_length</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} while (<a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* update bpage */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_set\">local_set</a>(&amp;<a class=\"id\" href=\"#bpage\">bpage</a>-><a class=\"id\" href=\"#commit\">commit</a>, <a class=\"id\" href=\"#pos\">pos</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bpage\">bpage</a>-><a class=\"id\" href=\"#time_stamp\">time_stamp</a> = <a class=\"id\" href=\"#save_timestamp\">save_timestamp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we copied everything to the beginning */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read\">read</a> = 0;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* update the entry counter */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#read\">read</a> += <a class=\"id\" href=\"#rb_page_entries\">rb_page_entries</a>(<a class=\"id\" href=\"#reader\">reader</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* swap the pages */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rb_init_page\">rb_init_page</a>(<a class=\"id\" href=\"#bpage\">bpage</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bpage\">bpage</a> = <a class=\"id\" href=\"#reader\">reader</a>-><a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reader\">reader</a>-><a class=\"id\" href=\"#page\">page</a> = *<a class=\"id\" href=\"#data_page\">data_page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_set\">local_set</a>(&amp;<a class=\"id\" href=\"#reader\">reader</a>-><a class=\"id\" href=\"#write\">write</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_set\">local_set</a>(&amp;<a class=\"id\" href=\"#reader\">reader</a>-><a class=\"id\" href=\"#entries\">entries</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reader\">reader</a>-><a class=\"id\" href=\"#read\">read</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#data_page\">data_page</a> = <a class=\"id\" href=\"#bpage\">bpage</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Use the real_end for the data size,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This gives us a chance to store the lost events</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * on the page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#reader\">reader</a>-><a class=\"id\" href=\"#real_end\">real_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_set\">local_set</a>(&amp;<a class=\"id\" href=\"#bpage\">bpage</a>-><a class=\"id\" href=\"#commit\">commit</a>, <a class=\"id\" href=\"#reader\">reader</a>-><a class=\"id\" href=\"#real_end\">real_end</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#read\">read</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#lost_events\">lost_events</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#commit\">commit</a> = <a class=\"id\" href=\"#local_read\">local_read</a>(&amp;<a class=\"id\" href=\"#bpage\">bpage</a>-><a class=\"id\" href=\"#commit\">commit</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Set a flag in the commit field if we lost events</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#missed_events\">missed_events</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If there is room at the end of the page to save the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * missed events, then record it there.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#BUF_PAGE_SIZE\">BUF_PAGE_SIZE</a> - <a class=\"id\" href=\"#commit\">commit</a> >= sizeof(<a class=\"id\" href=\"#missed_events\">missed_events</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(&amp;<a class=\"id\" href=\"#bpage\">bpage</a>-><a class=\"id\" href=\"#data\">data</a>[<a class=\"id\" href=\"#commit\">commit</a>], &amp;<a class=\"id\" href=\"#missed_events\">missed_events</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       sizeof(<a class=\"id\" href=\"#missed_events\">missed_events</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_add\">local_add</a>(<a class=\"id\" href=\"#RB_MISSED_STORED\">RB_MISSED_STORED</a>, &amp;<a class=\"id\" href=\"#bpage\">bpage</a>-><a class=\"id\" href=\"#commit\">commit</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#commit\">commit</a> += sizeof(<a class=\"id\" href=\"#missed_events\">missed_events</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_add\">local_add</a>(<a class=\"id\" href=\"#RB_MISSED_EVENTS\">RB_MISSED_EVENTS</a>, &amp;<a class=\"id\" href=\"#bpage\">bpage</a>-><a class=\"id\" href=\"#commit\">commit</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This page may be off to user land. Zero it out here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#commit\">commit</a> &lt; <a class=\"id\" href=\"#BUF_PAGE_SIZE\">BUF_PAGE_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#bpage\">bpage</a>-><a class=\"id\" href=\"#data\">data</a>[<a class=\"id\" href=\"#commit\">commit</a>], 0, <a class=\"id\" href=\"#BUF_PAGE_SIZE\">BUF_PAGE_SIZE</a> - <a class=\"id\" href=\"#commit\">commit</a>);", 
"", 
" <a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#cpu_buffer\">cpu_buffer</a>-><a class=\"id\" href=\"#reader_lock\">reader_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#ring_buffer_read_page\">ring_buffer_read_page</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TRACING\">CONFIG_TRACING</a>", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#rb_simple_read\">rb_simple_read</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#ubuf\">ubuf</a>,", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#cnt\">cnt</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#buf\">buf</a>[64];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r\">r</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#RB_BUFFERS_DISABLED_BIT\">RB_BUFFERS_DISABLED_BIT</a>, <a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"permanently disabled\\n\");", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"%d\\n\", <a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#RB_BUFFERS_ON_BIT\">RB_BUFFERS_ON_BIT</a>, <a class=\"id\" href=\"#p\">p</a>));", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#simple_read_from_buffer\">simple_read_from_buffer</a>(<a class=\"id\" href=\"#ubuf\">ubuf</a>, <a class=\"id\" href=\"#cnt\">cnt</a>, <a class=\"id\" href=\"#ppos\">ppos</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#r\">r</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a>", 
"<a class=\"id\" href=\"#rb_simple_write\">rb_simple_write</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#filp\">filp</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#ubuf\">ubuf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#cnt\">cnt</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#filp\">filp</a>-><a class=\"id\" href=\"#private_data\">private_data</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#buf\">buf</a>[64];", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cnt\">cnt</a> >= sizeof(<a class=\"id\" href=\"#buf\">buf</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(&amp;<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#ubuf\">ubuf</a>, <a class=\"id\" href=\"#cnt\">cnt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#cnt\">cnt</a>] = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#strict_strtoul\">strict_strtoul</a>(<a class=\"id\" href=\"#buf\">buf</a>, 10, &amp;<a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#val\">val</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#RB_BUFFERS_ON_BIT\">RB_BUFFERS_ON_BIT</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_bit\">clear_bit</a>(<a class=\"id\" href=\"#RB_BUFFERS_ON_BIT\">RB_BUFFERS_ON_BIT</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/>(*<a class=\"id\" href=\"#ppos\">ppos</a>)++;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cnt\">cnt</a>;", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#rb_simple_fops\">rb_simple_fops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#tracing_open_generic\">tracing_open_generic</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#rb_simple_read\">rb_simple_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write\">write</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#rb_simple_write\">rb_simple_write</a>,", 
"};", 
"", 
"", 
"static <a class=\"id\" href=\"#__init\">__init</a> int <a class=\"id\" href=\"#rb_init_debugfs\">rb_init_debugfs</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#d_tracer\">d_tracer</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d_tracer\">d_tracer</a> = <a class=\"id\" href=\"#tracing_init_dentry\">tracing_init_dentry</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_create_file\">trace_create_file</a>(\"tracing_on\", 0644, <a class=\"id\" href=\"#d_tracer\">d_tracer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    &amp;<a class=\"id\" href=\"#ring_buffer_flags\">ring_buffer_flags</a>, &amp;<a class=\"id\" href=\"#rb_simple_fops\">rb_simple_fops</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#fs_initcall\">fs_initcall</a>(<a class=\"id\" href=\"#rb_init_debugfs\">rb_init_debugfs</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HOTPLUG_CPU\">CONFIG_HOTPLUG_CPU</a>", 
"static int <a class=\"id\" href=\"#rb_cpu_notify\">rb_cpu_notify</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#self\">self</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long <a class=\"id\" href=\"#action\">action</a>, void *<a class=\"id\" href=\"#hcpu\">hcpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#self\">self</a>, struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a>, <a class=\"id\" href=\"#cpu_notify\">cpu_notify</a>);", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#cpu\">cpu</a> = (long)<a class=\"id\" href=\"#hcpu\">hcpu</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#action\">action</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_UP_PREPARE\">CPU_UP_PREPARE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_UP_PREPARE_FROZEN\">CPU_UP_PREPARE_FROZEN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#cpumask\">cpumask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_OK\">NOTIFY_OK</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#buffers\">buffers</a>[<a class=\"id\" href=\"#cpu\">cpu</a>] =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rb_allocate_cpu_buffer\">rb_allocate_cpu_buffer</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#buffers\">buffers</a>[<a class=\"id\" href=\"#cpu\">cpu</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN\">WARN</a>(1, \"failed to allocate ring buffer on CPU %ld\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_OK\">NOTIFY_OK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask_set_cpu\">cpumask_set_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#cpumask\">cpumask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_DOWN_PREPARE\">CPU_DOWN_PREPARE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_DOWN_PREPARE_FROZEN\">CPU_DOWN_PREPARE_FROZEN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Do nothing.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *  If we were to free the buffer, then the user would</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *  lose any trace that was in the buffer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_OK\">NOTIFY_OK</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/1b/75810c84acb6bb614200b51a9b7be2577e0934.xr', __xr_tmp);
