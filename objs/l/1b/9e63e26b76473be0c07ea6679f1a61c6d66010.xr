var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/fs/ext4/hash.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2002 by Theodore Ts'o</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file is released under the GPL v2.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file may be redistributed under the terms of the GNU Public</span>", 
"<span class=\"comment\"> * License.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#jbd2\">jbd2</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cryptohash\">cryptohash</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"ext4.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DELTA\">DELTA</a> 0x9E3779B9", 
"", 
"static void <a class=\"id\" href=\"#TEA_transform\">TEA_transform</a>(<a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#buf\">buf</a>[4], <a class=\"id\" href=\"#__u32\">__u32</a> const <a class=\"id\" href=\"#in\">in</a>[])", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><a class=\"id\" href=\"#sum\">sum</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><a class=\"id\" href=\"#b0\">b0</a> = <a class=\"id\" href=\"#buf\">buf</a>[0], <a class=\"id\" href=\"#b1\">b1</a> = <a class=\"id\" href=\"#buf\">buf</a>[1];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><a class=\"id\" href=\"#a\">a</a> = <a class=\"id\" href=\"#in\">in</a>[0], <a class=\"id\" href=\"#b\">b</a> = <a class=\"id\" href=\"#in\">in</a>[1], <a class=\"id\" href=\"#c\">c</a> = <a class=\"id\" href=\"#in\">in</a>[2], <a class=\"id\" href=\"#d\">d</a> = <a class=\"id\" href=\"#in\">in</a>[3];", 
"<span class=\"ts\"/>int<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = 16;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sum\">sum</a> += <a class=\"id\" href=\"#DELTA\">DELTA</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b0\">b0</a> += ((<a class=\"id\" href=\"#b1\">b1</a> << 4)+<a class=\"id\" href=\"#a\">a</a>) ^ (<a class=\"id\" href=\"#b1\">b1</a>+<a class=\"id\" href=\"#sum\">sum</a>) ^ ((<a class=\"id\" href=\"#b1\">b1</a> >> 5)+<a class=\"id\" href=\"#b\">b</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b1\">b1</a> += ((<a class=\"id\" href=\"#b0\">b0</a> << 4)+<a class=\"id\" href=\"#c\">c</a>) ^ (<a class=\"id\" href=\"#b0\">b0</a>+<a class=\"id\" href=\"#sum\">sum</a>) ^ ((<a class=\"id\" href=\"#b0\">b0</a> >> 5)+<a class=\"id\" href=\"#d\">d</a>);", 
"<span class=\"ts\"/>} while (--<a class=\"id\" href=\"#n\">n</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[0] += <a class=\"id\" href=\"#b0\">b0</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[1] += <a class=\"id\" href=\"#b1\">b1</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/* The old legacy hash */</span>", 
"static <a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#dx_hack_hash_unsigned\">dx_hack_hash_unsigned</a>(const char *<a class=\"id\" href=\"#name\">name</a>, int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#hash\">hash</a>, <a class=\"id\" href=\"#hash0\">hash0</a> = 0x12a3fe2d, <a class=\"id\" href=\"#hash1\">hash1</a> = 0x37abe8f9;", 
"<span class=\"ts\"/>const unsigned char *<a class=\"id\" href=\"#ucp\">ucp</a> = (const unsigned char *) <a class=\"id\" href=\"#name\">name</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#len\">len</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#hash1\">hash1</a> + (<a class=\"id\" href=\"#hash0\">hash0</a> ^ (((int) *<a class=\"id\" href=\"#ucp\">ucp</a>++) * 7152373));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hash\">hash</a> &amp; 0x80000000)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a> -= 0x7fffffff;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hash1\">hash1</a> = <a class=\"id\" href=\"#hash0\">hash0</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hash0\">hash0</a> = <a class=\"id\" href=\"#hash\">hash</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#hash0\">hash0</a> << 1;", 
"}", 
"", 
"static <a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#dx_hack_hash_signed\">dx_hack_hash_signed</a>(const char *<a class=\"id\" href=\"#name\">name</a>, int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#hash\">hash</a>, <a class=\"id\" href=\"#hash0\">hash0</a> = 0x12a3fe2d, <a class=\"id\" href=\"#hash1\">hash1</a> = 0x37abe8f9;", 
"<span class=\"ts\"/>const signed char *<a class=\"id\" href=\"#scp\">scp</a> = (const signed char *) <a class=\"id\" href=\"#name\">name</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#len\">len</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#hash1\">hash1</a> + (<a class=\"id\" href=\"#hash0\">hash0</a> ^ (((int) *<a class=\"id\" href=\"#scp\">scp</a>++) * 7152373));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hash\">hash</a> &amp; 0x80000000)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a> -= 0x7fffffff;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hash1\">hash1</a> = <a class=\"id\" href=\"#hash0\">hash0</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hash0\">hash0</a> = <a class=\"id\" href=\"#hash\">hash</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#hash0\">hash0</a> << 1;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#str2hashbuf_signed\">str2hashbuf_signed</a>(const char *<a class=\"id\" href=\"#msg\">msg</a>, int <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#__u32\">__u32</a> *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#num\">num</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><a class=\"id\" href=\"#pad\">pad</a>, <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>const signed char *<a class=\"id\" href=\"#scp\">scp</a> = (const signed char *) <a class=\"id\" href=\"#msg\">msg</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pad\">pad</a> = (<a class=\"id\" href=\"#__u32\">__u32</a>)<a class=\"id\" href=\"#len\">len</a> | ((<a class=\"id\" href=\"#__u32\">__u32</a>)<a class=\"id\" href=\"#len\">len</a> << 8);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pad\">pad</a> |= <a class=\"id\" href=\"#pad\">pad</a> << 16;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#pad\">pad</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#num\">num</a>*4)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#num\">num</a> * 4;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#len\">len</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#i\">i</a> % 4) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#pad\">pad</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = ((int) <a class=\"id\" href=\"#scp\">scp</a>[<a class=\"id\" href=\"#i\">i</a>]) + (<a class=\"id\" href=\"#val\">val</a> << 8);", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#i\">i</a> % 4) == 3) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#buf\">buf</a>++ = <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#pad\">pad</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (--<a class=\"id\" href=\"#num\">num</a> >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#buf\">buf</a>++ = <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/>while (--<a class=\"id\" href=\"#num\">num</a> >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#buf\">buf</a>++ = <a class=\"id\" href=\"#pad\">pad</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#str2hashbuf_unsigned\">str2hashbuf_unsigned</a>(const char *<a class=\"id\" href=\"#msg\">msg</a>, int <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#__u32\">__u32</a> *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#num\">num</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><a class=\"id\" href=\"#pad\">pad</a>, <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>const unsigned char *<a class=\"id\" href=\"#ucp\">ucp</a> = (const unsigned char *) <a class=\"id\" href=\"#msg\">msg</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pad\">pad</a> = (<a class=\"id\" href=\"#__u32\">__u32</a>)<a class=\"id\" href=\"#len\">len</a> | ((<a class=\"id\" href=\"#__u32\">__u32</a>)<a class=\"id\" href=\"#len\">len</a> << 8);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pad\">pad</a> |= <a class=\"id\" href=\"#pad\">pad</a> << 16;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#pad\">pad</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#num\">num</a>*4)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#num\">num</a> * 4;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#len\">len</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#i\">i</a> % 4) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#pad\">pad</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = ((int) <a class=\"id\" href=\"#ucp\">ucp</a>[<a class=\"id\" href=\"#i\">i</a>]) + (<a class=\"id\" href=\"#val\">val</a> << 8);", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#i\">i</a> % 4) == 3) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#buf\">buf</a>++ = <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#pad\">pad</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (--<a class=\"id\" href=\"#num\">num</a> >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#buf\">buf</a>++ = <a class=\"id\" href=\"#val\">val</a>;", 
"<span class=\"ts\"/>while (--<a class=\"id\" href=\"#num\">num</a> >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#buf\">buf</a>++ = <a class=\"id\" href=\"#pad\">pad</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Returns the hash of a filename.  If len is 0 and name is NULL, then</span>", 
"<span class=\"comment\"> * this function can be used to test whether or not a hash version is</span>", 
"<span class=\"comment\"> * supported.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The seed is an 4 longword (32 bits) \"secret\" which can be used to</span>", 
"<span class=\"comment\"> * uniquify a hash.  If the seed is all zero's, then some default seed</span>", 
"<span class=\"comment\"> * may be used.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A particular hash version specifies whether or not the seed is</span>", 
"<span class=\"comment\"> * represented, and whether or not the returned hash is 32 bits or 64</span>", 
"<span class=\"comment\"> * bits.  32 bit hashes will return 0 for the minor hash.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ext4fs_dirhash\">ext4fs_dirhash</a>(const char *<a class=\"id\" href=\"#name\">name</a>, int <a class=\"id\" href=\"#len\">len</a>, struct <a class=\"id\" href=\"#dx_hash_info\">dx_hash_info</a> *<a class=\"id\" href=\"#hinfo\">hinfo</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><a class=\"id\" href=\"#minor_hash\">minor_hash</a> = 0;", 
"<span class=\"ts\"/>const char<span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#in\">in</a>[8], <a class=\"id\" href=\"#buf\">buf</a>[4];", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#str2hashbuf\">str2hashbuf</a>)(const char *, int, <a class=\"id\" href=\"#__u32\">__u32</a> *, int) =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#str2hashbuf_signed\">str2hashbuf_signed</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Initialize the default seed for the hash checksum functions */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[0] = 0x67452301;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[1] = 0xefcdab89;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[2] = 0x98badcfe;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[3] = 0x10325476;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check to see if the seed is all zero's */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hinfo\">hinfo</a>-><a class=\"id\" href=\"#seed\">seed</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; 4; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#hinfo\">hinfo</a>-><a class=\"id\" href=\"#seed\">seed</a>[<a class=\"id\" href=\"#i\">i</a>])", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> &lt; 4)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#hinfo\">hinfo</a>-><a class=\"id\" href=\"#seed\">seed</a>, sizeof(<a class=\"id\" href=\"#buf\">buf</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#hinfo\">hinfo</a>-><a class=\"id\" href=\"#hash_version\">hash_version</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#DX_HASH_LEGACY_UNSIGNED\">DX_HASH_LEGACY_UNSIGNED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#dx_hack_hash_unsigned\">dx_hack_hash_unsigned</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#DX_HASH_LEGACY\">DX_HASH_LEGACY</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#dx_hack_hash_signed\">dx_hack_hash_signed</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#DX_HASH_HALF_MD4_UNSIGNED\">DX_HASH_HALF_MD4_UNSIGNED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#str2hashbuf\">str2hashbuf</a> = <a class=\"id\" href=\"#str2hashbuf_unsigned\">str2hashbuf_unsigned</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#DX_HASH_HALF_MD4\">DX_HASH_HALF_MD4</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#len\">len</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#str2hashbuf\">str2hashbuf</a>)(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#in\">in</a>, 8);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#half_md4_transform\">half_md4_transform</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#in\">in</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> -= 32;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> += 32;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#minor_hash\">minor_hash</a> = <a class=\"id\" href=\"#buf\">buf</a>[2];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#buf\">buf</a>[1];", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#DX_HASH_TEA_UNSIGNED\">DX_HASH_TEA_UNSIGNED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#str2hashbuf\">str2hashbuf</a> = <a class=\"id\" href=\"#str2hashbuf_unsigned\">str2hashbuf_unsigned</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#DX_HASH_TEA\">DX_HASH_TEA</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#len\">len</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#str2hashbuf\">str2hashbuf</a>)(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#in\">in</a>, 4);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TEA_transform\">TEA_transform</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#in\">in</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> -= 16;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> += 16;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#buf\">buf</a>[0];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#minor_hash\">minor_hash</a> = <a class=\"id\" href=\"#buf\">buf</a>[1];", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hinfo\">hinfo</a>-><a class=\"id\" href=\"#hash\">hash</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#hash\">hash</a> &amp; ~1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hash\">hash</a> == (<a class=\"id\" href=\"#EXT4_HTREE_EOF\">EXT4_HTREE_EOF</a> << 1))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hash\">hash</a> = (<a class=\"id\" href=\"#EXT4_HTREE_EOF\">EXT4_HTREE_EOF</a>-1) << 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hinfo\">hinfo</a>-><a class=\"id\" href=\"#hash\">hash</a> = <a class=\"id\" href=\"#hash\">hash</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hinfo\">hinfo</a>-><a class=\"id\" href=\"#minor_hash\">minor_hash</a> = <a class=\"id\" href=\"#minor_hash\">minor_hash</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
];
xr_frag_insert('l/1b/9e63e26b76473be0c07ea6679f1a61c6d66010.xr', __xr_tmp);
