var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Xen hypercall batching.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Xen allows multiple hypercalls to be issued at once, using the</span>", 
"<span class=\"comment\"> * multicall interface.  This allows the cost of trapping into the</span>", 
"<span class=\"comment\"> * hypervisor to be amortized over several calls.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file implements a simple interface for multicalls.  There's a</span>", 
"<span class=\"comment\"> * per-cpu buffer of outstanding multicalls.  When you want to queue a</span>", 
"<span class=\"comment\"> * multicall for issuing, you can allocate a multicall slot for the</span>", 
"<span class=\"comment\"> * call and its arguments, along with storage for space which is</span>", 
"<span class=\"comment\"> * pointed to by the arguments (for passing pointers to structures,</span>", 
"<span class=\"comment\"> * etc).  When the multicall is actually issued, all the space for the</span>", 
"<span class=\"comment\"> * commands and allocated memory is freed for reuse.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Multicalls are flushed whenever any of the buffers get full, or</span>", 
"<span class=\"comment\"> * when explicitly requested.  There's no way to get per-multicall</span>", 
"<span class=\"comment\"> * return results back.  It will BUG if any of the multicalls fail.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Jeremy Fitzhardinge &lt;jeremy@xensource.com&gt;, XenSource Inc, 2007</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#percpu\">percpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hardirq\">hardirq</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#debugfs\">debugfs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#xen\">xen</a>/<a class=\"id\" href=\"#hypercall\">hypercall</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"multicalls.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"debugfs.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MC_BATCH\">MC_BATCH</a><span class=\"ts\"/>32", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MC_DEBUG\">MC_DEBUG</a><span class=\"ts\"/>1", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MC_ARGS\">MC_ARGS</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#MC_BATCH\">MC_BATCH</a> * 16)", 
"", 
"", 
"struct <a class=\"id\" href=\"#mc_buffer\">mc_buffer</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#multicall_entry\">multicall_entry</a> <a class=\"id\" href=\"#entries\">entries</a>[<a class=\"id\" href=\"#MC_BATCH\">MC_BATCH</a>];", 
"#if <a class=\"id\" href=\"#MC_DEBUG\">MC_DEBUG</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#multicall_entry\">multicall_entry</a> <a class=\"id\" href=\"#debug\">debug</a>[<a class=\"id\" href=\"#MC_BATCH\">MC_BATCH</a>];", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#caller\">caller</a>[<a class=\"id\" href=\"#MC_BATCH\">MC_BATCH</a>];", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#MC_ARGS\">MC_ARGS</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#callback\">callback</a> {", 
"<span class=\"ts\"/><span class=\"ts\"/>void (*<a class=\"id\" href=\"#fn\">fn</a>)(void *);", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#callbacks\">callbacks</a>[<a class=\"id\" href=\"#MC_BATCH\">MC_BATCH</a>];", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#mcidx\">mcidx</a>, <a class=\"id\" href=\"#argidx\">argidx</a>, <a class=\"id\" href=\"#cbidx\">cbidx</a>;", 
"};", 
"", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#mc_buffer\">mc_buffer</a>, <a class=\"id\" href=\"#mc_buffer\">mc_buffer</a>);", 
"<a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(unsigned long, <a class=\"id\" href=\"#xen_mc_irq_flags\">xen_mc_irq_flags</a>);", 
"", 
"<span class=\"comment\">/* flush reasons 0- slots, 1- args, 2- callbacks */</span>", 
"enum <a class=\"id\" href=\"#flush_reasons\">flush_reasons</a>", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FL_SLOTS\">FL_SLOTS</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FL_ARGS\">FL_ARGS</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FL_CALLBACKS\">FL_CALLBACKS</a>,", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FL_N_REASONS\">FL_N_REASONS</a>", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_XEN_DEBUG_FS\">CONFIG_XEN_DEBUG_FS</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NHYPERCALLS\">NHYPERCALLS</a><span class=\"ts\"/>40<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* not really */</span>", 
"", 
"static struct {", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#histo\">histo</a>[<a class=\"id\" href=\"#MC_BATCH\">MC_BATCH</a>+1];", 
"", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#issued\">issued</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#arg_total\">arg_total</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#hypercalls\">hypercalls</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#histo_hypercalls\">histo_hypercalls</a>[<a class=\"id\" href=\"#NHYPERCALLS\">NHYPERCALLS</a>];", 
"", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#flush\">flush</a>[<a class=\"id\" href=\"#FL_N_REASONS\">FL_N_REASONS</a>];", 
"} <a class=\"id\" href=\"#mc_stats\">mc_stats</a>;", 
"", 
"static <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#zero_stats\">zero_stats</a>;", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#check_zero\">check_zero</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#zero_stats\">zero_stats</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#mc_stats\">mc_stats</a>, 0, sizeof(<a class=\"id\" href=\"#mc_stats\">mc_stats</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zero_stats\">zero_stats</a> = 0;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#mc_add_stats\">mc_add_stats</a>(const struct <a class=\"id\" href=\"#mc_buffer\">mc_buffer</a> *<a class=\"id\" href=\"#mc\">mc</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_zero\">check_zero</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mc_stats\">mc_stats</a>.<a class=\"id\" href=\"#issued\">issued</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mc_stats\">mc_stats</a>.<a class=\"id\" href=\"#hypercalls\">hypercalls</a> += <a class=\"id\" href=\"#mc\">mc</a>-><a class=\"id\" href=\"#mcidx\">mcidx</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mc_stats\">mc_stats</a>.<a class=\"id\" href=\"#arg_total\">arg_total</a> += <a class=\"id\" href=\"#mc\">mc</a>-><a class=\"id\" href=\"#argidx\">argidx</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mc_stats\">mc_stats</a>.<a class=\"id\" href=\"#histo\">histo</a>[<a class=\"id\" href=\"#mc\">mc</a>-><a class=\"id\" href=\"#mcidx\">mcidx</a>]++;", 
"<span class=\"ts\"/>for(<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#mc\">mc</a>-><a class=\"id\" href=\"#mcidx\">mcidx</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#op\">op</a> = <a class=\"id\" href=\"#mc\">mc</a>-><a class=\"id\" href=\"#entries\">entries</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#op\">op</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#op\">op</a> &lt; <a class=\"id\" href=\"#NHYPERCALLS\">NHYPERCALLS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mc_stats\">mc_stats</a>.<a class=\"id\" href=\"#histo_hypercalls\">histo_hypercalls</a>[<a class=\"id\" href=\"#op\">op</a>]++;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#mc_stats_flush\">mc_stats_flush</a>(enum <a class=\"id\" href=\"#flush_reasons\">flush_reasons</a> <a class=\"id\" href=\"#idx\">idx</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_zero\">check_zero</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mc_stats\">mc_stats</a>.<a class=\"id\" href=\"#flush\">flush</a>[<a class=\"id\" href=\"#idx\">idx</a>]++;", 
"}", 
"", 
"#else  <span class=\"comment\">/* !CONFIG_XEN_DEBUG_FS */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mc_add_stats\">mc_add_stats</a>(const struct <a class=\"id\" href=\"#mc_buffer\">mc_buffer</a> *<a class=\"id\" href=\"#mc\">mc</a>)", 
"{", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#mc_stats_flush\">mc_stats_flush</a>(enum <a class=\"id\" href=\"#flush_reasons\">flush_reasons</a> <a class=\"id\" href=\"#idx\">idx</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* CONFIG_XEN_DEBUG_FS */</span>", 
"", 
"void <a class=\"id\" href=\"#xen_mc_flush\">xen_mc_flush</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mc_buffer\">mc_buffer</a> *<a class=\"id\" href=\"#b\">b</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#mc_buffer\">mc_buffer</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#preemptible\">preemptible</a>());", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Disable interrupts in case someone comes in and queues</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   something in the middle */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mc_add_stats\">mc_add_stats</a>(<a class=\"id\" href=\"#b\">b</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#mcidx\">mcidx</a>) {", 
"#if <a class=\"id\" href=\"#MC_DEBUG\">MC_DEBUG</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#debug\">debug</a>, <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#entries\">entries</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#mcidx\">mcidx</a> * sizeof(struct <a class=\"id\" href=\"#multicall_entry\">multicall_entry</a>));", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#HYPERVISOR_multicall\">HYPERVISOR_multicall</a>(<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#entries\">entries</a>, <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#mcidx\">mcidx</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#mcidx\">mcidx</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#entries\">entries</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#result\">result</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a>++;", 
"", 
"#if <a class=\"id\" href=\"#MC_DEBUG\">MC_DEBUG</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%d multicall(s) failed: cpu %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dump_stack\">dump_stack</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#mcidx\">mcidx</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"  call %2d/%d: op=%lu arg=[%lx] result=%ld\\t%pF\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#i\">i</a>+1, <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#mcidx\">mcidx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#debug\">debug</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#op\">op</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#debug\">debug</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#args\">args</a>[0],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#entries\">entries</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#result\">result</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#caller\">caller</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#mcidx\">mcidx</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#argidx\">argidx</a> = 0;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#argidx\">argidx</a> != 0);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#cbidx\">cbidx</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#callback\">callback</a> *<a class=\"id\" href=\"#cb\">cb</a> = &amp;<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#callbacks\">callbacks</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#cb\">cb</a>-><a class=\"id\" href=\"#fn\">fn</a>)(<a class=\"id\" href=\"#cb\">cb</a>-><a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#cbidx\">cbidx</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#ret\">ret</a>);", 
"}", 
"", 
"struct <a class=\"id\" href=\"#multicall_space\">multicall_space</a> <a class=\"id\" href=\"#__xen_mc_entry\">__xen_mc_entry</a>(<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#args\">args</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mc_buffer\">mc_buffer</a> *<a class=\"id\" href=\"#b\">b</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#mc_buffer\">mc_buffer</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#multicall_space\">multicall_space</a> <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#argidx\">argidx</a> = <a class=\"id\" href=\"#roundup\">roundup</a>(<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#argidx\">argidx</a>, sizeof(<a class=\"id\" href=\"#u64\">u64</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#preemptible\">preemptible</a>());", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#argidx\">argidx</a> &gt; <a class=\"id\" href=\"#MC_ARGS\">MC_ARGS</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#mcidx\">mcidx</a> == <a class=\"id\" href=\"#MC_BATCH\">MC_BATCH</a> ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#argidx\">argidx</a> + <a class=\"id\" href=\"#args\">args</a>) &gt; <a class=\"id\" href=\"#MC_ARGS\">MC_ARGS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mc_stats_flush\">mc_stats_flush</a>(<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#mcidx\">mcidx</a> == <a class=\"id\" href=\"#MC_BATCH\">MC_BATCH</a> ? <a class=\"id\" href=\"#FL_SLOTS\">FL_SLOTS</a> : <a class=\"id\" href=\"#FL_ARGS\">FL_ARGS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xen_mc_flush\">xen_mc_flush</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#argidx\">argidx</a> = <a class=\"id\" href=\"#roundup\">roundup</a>(<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#argidx\">argidx</a>, sizeof(<a class=\"id\" href=\"#u64\">u64</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a>.<a class=\"id\" href=\"#mc\">mc</a> = &amp;<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#entries\">entries</a>[<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#mcidx\">mcidx</a>];", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#MC_DEBUG\">MC_DEBUG</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#caller\">caller</a>[<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#mcidx\">mcidx</a>] = <a class=\"id\" href=\"#__builtin_return_address\">__builtin_return_address</a>(0);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#mcidx\">mcidx</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a>.<a class=\"id\" href=\"#args\">args</a> = &amp;<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#argidx\">argidx</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#argidx\">argidx</a> = <a class=\"id\" href=\"#argidx\">argidx</a> + <a class=\"id\" href=\"#args\">args</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#argidx\">argidx</a> &gt; <a class=\"id\" href=\"#MC_ARGS\">MC_ARGS</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#multicall_space\">multicall_space</a> <a class=\"id\" href=\"#xen_mc_extend_args\">xen_mc_extend_args</a>(unsigned long <a class=\"id\" href=\"#op\">op</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mc_buffer\">mc_buffer</a> *<a class=\"id\" href=\"#b\">b</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#mc_buffer\">mc_buffer</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#multicall_space\">multicall_space</a> <a class=\"id\" href=\"#ret\">ret</a> = { <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a> };", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#preemptible\">preemptible</a>());", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#argidx\">argidx</a> &gt; <a class=\"id\" href=\"#MC_ARGS\">MC_ARGS</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#mcidx\">mcidx</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#entries\">entries</a>[<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#mcidx\">mcidx</a> - 1].<a class=\"id\" href=\"#op\">op</a> != <a class=\"id\" href=\"#op\">op</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#argidx\">argidx</a> + <a class=\"id\" href=\"#size\">size</a>) &gt; <a class=\"id\" href=\"#MC_ARGS\">MC_ARGS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a>.<a class=\"id\" href=\"#mc\">mc</a> = &amp;<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#entries\">entries</a>[<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#mcidx\">mcidx</a> - 1];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a>.<a class=\"id\" href=\"#args\">args</a> = &amp;<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#args\">args</a>[<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#argidx\">argidx</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#argidx\">argidx</a> += <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#argidx\">argidx</a> &gt; <a class=\"id\" href=\"#MC_ARGS\">MC_ARGS</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#xen_mc_callback\">xen_mc_callback</a>(void (*<a class=\"id\" href=\"#fn\">fn</a>)(void *), void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mc_buffer\">mc_buffer</a> *<a class=\"id\" href=\"#b\">b</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#mc_buffer\">mc_buffer</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#callback\">callback</a> *<a class=\"id\" href=\"#cb\">cb</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#cbidx\">cbidx</a> == <a class=\"id\" href=\"#MC_BATCH\">MC_BATCH</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mc_stats_flush\">mc_stats_flush</a>(<a class=\"id\" href=\"#FL_CALLBACKS\">FL_CALLBACKS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xen_mc_flush\">xen_mc_flush</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cb\">cb</a> = &amp;<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#callbacks\">callbacks</a>[<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#cbidx\">cbidx</a>++];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cb\">cb</a>-><a class=\"id\" href=\"#fn\">fn</a> = <a class=\"id\" href=\"#fn\">fn</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cb\">cb</a>-><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_XEN_DEBUG_FS\">CONFIG_XEN_DEBUG_FS</a>", 
"", 
"static struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#d_mc_debug\">d_mc_debug</a>;", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#xen_mc_debugfs\">xen_mc_debugfs</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#d_xen\">d_xen</a> = <a class=\"id\" href=\"#xen_init_debugfs\">xen_init_debugfs</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#d_xen\">d_xen</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#d_mc_debug\">d_mc_debug</a> = <a class=\"id\" href=\"#debugfs_create_dir\">debugfs_create_dir</a>(\"multicalls\", <a class=\"id\" href=\"#d_xen\">d_xen</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debugfs_create_u8\">debugfs_create_u8</a>(\"zero_stats\", 0644, <a class=\"id\" href=\"#d_mc_debug\">d_mc_debug</a>, &amp;<a class=\"id\" href=\"#zero_stats\">zero_stats</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debugfs_create_u32\">debugfs_create_u32</a>(\"batches\", 0444, <a class=\"id\" href=\"#d_mc_debug\">d_mc_debug</a>, &amp;<a class=\"id\" href=\"#mc_stats\">mc_stats</a>.<a class=\"id\" href=\"#issued\">issued</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debugfs_create_u32\">debugfs_create_u32</a>(\"hypercalls\", 0444, <a class=\"id\" href=\"#d_mc_debug\">d_mc_debug</a>, &amp;<a class=\"id\" href=\"#mc_stats\">mc_stats</a>.<a class=\"id\" href=\"#hypercalls\">hypercalls</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debugfs_create_u32\">debugfs_create_u32</a>(\"arg_total\", 0444, <a class=\"id\" href=\"#d_mc_debug\">d_mc_debug</a>, &amp;<a class=\"id\" href=\"#mc_stats\">mc_stats</a>.<a class=\"id\" href=\"#arg_total\">arg_total</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_debugfs_create_u32_array\">xen_debugfs_create_u32_array</a>(\"batch_histo\", 0444, <a class=\"id\" href=\"#d_mc_debug\">d_mc_debug</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#mc_stats\">mc_stats</a>.<a class=\"id\" href=\"#histo\">histo</a>, <a class=\"id\" href=\"#MC_BATCH\">MC_BATCH</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_debugfs_create_u32_array\">xen_debugfs_create_u32_array</a>(\"hypercall_histo\", 0444, <a class=\"id\" href=\"#d_mc_debug\">d_mc_debug</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#mc_stats\">mc_stats</a>.<a class=\"id\" href=\"#histo_hypercalls\">histo_hypercalls</a>, <a class=\"id\" href=\"#NHYPERCALLS\">NHYPERCALLS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#xen_debugfs_create_u32_array\">xen_debugfs_create_u32_array</a>(\"flush_reasons\", 0444, <a class=\"id\" href=\"#d_mc_debug\">d_mc_debug</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#mc_stats\">mc_stats</a>.<a class=\"id\" href=\"#flush\">flush</a>, <a class=\"id\" href=\"#FL_N_REASONS\">FL_N_REASONS</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#fs_initcall\">fs_initcall</a>(<a class=\"id\" href=\"#xen_mc_debugfs\">xen_mc_debugfs</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* CONFIG_XEN_DEBUG_FS */</span>", 
];
xr_frag_insert('l/1b/ca2cc740e5ed2bf6a06fec0a8e5dac64ff1d4b.xr', __xr_tmp);
