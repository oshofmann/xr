var __xr_tmp = [
"<span class=\"ts\"/><a class=\"id\" href=\"#layers\">layers</a> = <a class=\"id\" href=\"#idp\">idp</a>-><a class=\"id\" href=\"#layers\">layers</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#get_from_free_list\">get_from_free_list</a>(<a class=\"id\" href=\"#idp\">idp</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#layer\">layer</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#layers\">layers</a> = 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Add a new layer to the top of the tree if the requested</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * id is larger than the currently allocated space.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#layers\">layers</a> &lt; (<a class=\"id\" href=\"#MAX_LEVEL\">MAX_LEVEL</a> - 1)) && (<a class=\"id\" href=\"#id\">id</a> >= (1 << (<a class=\"id\" href=\"#layers\">layers</a>*<a class=\"id\" href=\"#IDR_BITS\">IDR_BITS</a>)))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#layers\">layers</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#count\">count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* special case: if the tree is currently empty,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * then we grow the tree by moving the top node</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * upwards.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#layer\">layer</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#get_from_free_list\">get_from_free_list</a>(<a class=\"id\" href=\"#idp\">idp</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * The allocation failed.  If we built part of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the structure tear it down.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#idp\">idp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#p\">p</a>; <a class=\"id\" href=\"#p\">p</a> && <a class=\"id\" href=\"#p\">p</a> != <a class=\"id\" href=\"#idp\">idp</a>-><a class=\"id\" href=\"#top\">top</a>; <a class=\"id\" href=\"#new\">new</a> = <a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ary\">ary</a>[0];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#ary\">ary</a>[0] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#bitmap\">bitmap</a> = <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__move_to_free_list\">__move_to_free_list</a>(<a class=\"id\" href=\"#idp\">idp</a>, <a class=\"id\" href=\"#new\">new</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#idp\">idp</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#ary\">ary</a>[0] = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#count\">count</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#layer\">layer</a> = <a class=\"id\" href=\"#layers\">layers</a>-1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#bitmap\">bitmap</a> == <a class=\"id\" href=\"#IDR_FULL\">IDR_FULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_bit\">__set_bit</a>(0, &amp;<a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#bitmap\">bitmap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#new\">new</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#idp\">idp</a>-><a class=\"id\" href=\"#top\">top</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idp\">idp</a>-><a class=\"id\" href=\"#layers\">layers</a> = <a class=\"id\" href=\"#layers\">layers</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a> = <a class=\"id\" href=\"#sub_alloc\">sub_alloc</a>(<a class=\"id\" href=\"#idp\">idp</a>, &amp;<a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#pa\">pa</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#v\">v</a> == <a class=\"id\" href=\"#IDR_NEED_TO_GROW\">IDR_NEED_TO_GROW</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#build_up\">build_up</a>;", 
"<span class=\"ts\"/>return(<a class=\"id\" href=\"#v\">v</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#idr_get_new_above_int\">idr_get_new_above_int</a>(struct <a class=\"id\" href=\"#idr\">idr</a> *<a class=\"id\" href=\"#idp\">idp</a>, void *<a class=\"id\" href=\"#ptr\">ptr</a>, int <a class=\"id\" href=\"#starting_id\">starting_id</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#idr_layer\">idr_layer</a> *<a class=\"id\" href=\"#pa\">pa</a>[<a class=\"id\" href=\"#MAX_LEVEL\">MAX_LEVEL</a>];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#id\">id</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#idr_get_empty_slot\">idr_get_empty_slot</a>(<a class=\"id\" href=\"#idp\">idp</a>, <a class=\"id\" href=\"#starting_id\">starting_id</a>, <a class=\"id\" href=\"#pa\">pa</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#id\">id</a> >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Successfully found an empty slot.  Install the user</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * pointer and mark the slot full.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#pa\">pa</a>[0]-><a class=\"id\" href=\"#ary\">ary</a>[<a class=\"id\" href=\"#id\">id</a> &amp; <a class=\"id\" href=\"#IDR_MASK\">IDR_MASK</a>],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(struct <a class=\"id\" href=\"#idr_layer\">idr_layer</a> *)<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pa\">pa</a>[0]-><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idr_mark_full\">idr_mark_full</a>(<a class=\"id\" href=\"#pa\">pa</a>, <a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#id\">id</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * idr_get_new_above - allocate new idr entry above or equal to a start id</span>", 
"<span class=\"comment\"> * @idp: idr handle</span>", 
"<span class=\"comment\"> * @ptr: pointer you want associated with the id</span>", 
"<span class=\"comment\"> * @start_id: id to start search at</span>", 
"<span class=\"comment\"> * @id: pointer to the allocated handle</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is the allocate id function.  It should be called with any</span>", 
"<span class=\"comment\"> * required locks.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If memory is required, it will return -EAGAIN, you should unlock</span>", 
"<span class=\"comment\"> * and go back to the idr_pre_get() call.  If the idr is full, it will</span>", 
"<span class=\"comment\"> * return -ENOSPC.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @id returns a value in the range @starting_id ... 0x7fffffff</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#idr_get_new_above\">idr_get_new_above</a>(struct <a class=\"id\" href=\"#idr\">idr</a> *<a class=\"id\" href=\"#idp\">idp</a>, void *<a class=\"id\" href=\"#ptr\">ptr</a>, int <a class=\"id\" href=\"#starting_id\">starting_id</a>, int *<a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rv\">rv</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = <a class=\"id\" href=\"#idr_get_new_above_int\">idr_get_new_above_int</a>(<a class=\"id\" href=\"#idp\">idp</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#starting_id\">starting_id</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This is a cheap hack until the IDR code can be fixed to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * return proper error values.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rv\">rv</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#_idr_rc_to_errno\">_idr_rc_to_errno</a>(<a class=\"id\" href=\"#rv\">rv</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#rv\">rv</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#idr_get_new_above\">idr_get_new_above</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * idr_get_new - allocate new idr entry</span>", 
"<span class=\"comment\"> * @idp: idr handle</span>", 
"<span class=\"comment\"> * @ptr: pointer you want associated with the id</span>", 
"<span class=\"comment\"> * @id: pointer to the allocated handle</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is the allocate id function.  It should be called with any</span>", 
"<span class=\"comment\"> * required locks.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If memory is required, it will return -EAGAIN, you should unlock</span>", 
"<span class=\"comment\"> * and go back to the idr_pre_get() call.  If the idr is full, it will</span>", 
"<span class=\"comment\"> * return -ENOSPC.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @id returns a value in the range 0 ... 0x7fffffff</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#idr_get_new\">idr_get_new</a>(struct <a class=\"id\" href=\"#idr\">idr</a> *<a class=\"id\" href=\"#idp\">idp</a>, void *<a class=\"id\" href=\"#ptr\">ptr</a>, int *<a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rv\">rv</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rv\">rv</a> = <a class=\"id\" href=\"#idr_get_new_above_int\">idr_get_new_above_int</a>(<a class=\"id\" href=\"#idp\">idp</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, 0);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This is a cheap hack until the IDR code can be fixed to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * return proper error values.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rv\">rv</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#_idr_rc_to_errno\">_idr_rc_to_errno</a>(<a class=\"id\" href=\"#rv\">rv</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#rv\">rv</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#idr_get_new\">idr_get_new</a>);", 
"", 
"static void <a class=\"id\" href=\"#idr_remove_warning\">idr_remove_warning</a>(int <a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>\"idr_remove called for id=%d which is not allocated.\\n\", <a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dump_stack\">dump_stack</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#sub_remove\">sub_remove</a>(struct <a class=\"id\" href=\"#idr\">idr</a> *<a class=\"id\" href=\"#idp\">idp</a>, int <a class=\"id\" href=\"#shift\">shift</a>, int <a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#idr_layer\">idr_layer</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#idp\">idp</a>-><a class=\"id\" href=\"#top\">top</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#idr_layer\">idr_layer</a> **<a class=\"id\" href=\"#pa\">pa</a>[<a class=\"id\" href=\"#MAX_LEVEL\">MAX_LEVEL</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#idr_layer\">idr_layer</a> ***<a class=\"id\" href=\"#paa\">paa</a> = &amp;<a class=\"id\" href=\"#pa\">pa</a>[0];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#idr_layer\">idr_layer</a> *<a class=\"id\" href=\"#to_free\">to_free</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#paa\">paa</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>*++<a class=\"id\" href=\"#paa\">paa</a> = &amp;<a class=\"id\" href=\"#idp\">idp</a>-><a class=\"id\" href=\"#top\">top</a>;", 
"", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#shift\">shift</a> &gt; 0) && <a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = (<a class=\"id\" href=\"#id\">id</a> >> <a class=\"id\" href=\"#shift\">shift</a>) &amp; <a class=\"id\" href=\"#IDR_MASK\">IDR_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__clear_bit\">__clear_bit</a>(<a class=\"id\" href=\"#n\">n</a>, &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#bitmap\">bitmap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*++<a class=\"id\" href=\"#paa\">paa</a> = &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ary\">ary</a>[<a class=\"id\" href=\"#n\">n</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ary\">ary</a>[<a class=\"id\" href=\"#n\">n</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shift\">shift</a> -= <a class=\"id\" href=\"#IDR_BITS\">IDR_BITS</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#id\">id</a> &amp; <a class=\"id\" href=\"#IDR_MASK\">IDR_MASK</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#p\">p</a> != <a class=\"id\" href=\"#NULL\">NULL</a> && <a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#n\">n</a>, &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#bitmap\">bitmap</a>))){", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__clear_bit\">__clear_bit</a>(<a class=\"id\" href=\"#n\">n</a>, &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#bitmap\">bitmap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ary\">ary</a>[<a class=\"id\" href=\"#n\">n</a>], <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to_free\">to_free</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while(*<a class=\"id\" href=\"#paa\">paa</a> && ! --((**<a class=\"id\" href=\"#paa\">paa</a>)-><a class=\"id\" href=\"#count\">count</a>)){", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#to_free\">to_free</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_layer\">free_layer</a>(<a class=\"id\" href=\"#to_free\">to_free</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to_free\">to_free</a> = **<a class=\"id\" href=\"#paa\">paa</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>**<a class=\"id\" href=\"#paa\">paa</a>-- = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!*<a class=\"id\" href=\"#paa\">paa</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idp\">idp</a>-><a class=\"id\" href=\"#layers\">layers</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#to_free\">to_free</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_layer\">free_layer</a>(<a class=\"id\" href=\"#to_free\">to_free</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idr_remove_warning\">idr_remove_warning</a>(<a class=\"id\" href=\"#id\">id</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * idr_remove - remove the given id and free it's slot</span>", 
"<span class=\"comment\"> * @idp: idr handle</span>", 
"<span class=\"comment\"> * @id: unique key</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#idr_remove\">idr_remove</a>(struct <a class=\"id\" href=\"#idr\">idr</a> *<a class=\"id\" href=\"#idp\">idp</a>, int <a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#idr_layer\">idr_layer</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#idr_layer\">idr_layer</a> *<a class=\"id\" href=\"#to_free\">to_free</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Mask off upper bits we don't use for the search. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a> &= <a class=\"id\" href=\"#MAX_ID_MASK\">MAX_ID_MASK</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sub_remove\">sub_remove</a>(<a class=\"id\" href=\"#idp\">idp</a>, (<a class=\"id\" href=\"#idp\">idp</a>-><a class=\"id\" href=\"#layers\">layers</a> - 1) * <a class=\"id\" href=\"#IDR_BITS\">IDR_BITS</a>, <a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#idp\">idp</a>-><a class=\"id\" href=\"#top\">top</a> && <a class=\"id\" href=\"#idp\">idp</a>-><a class=\"id\" href=\"#top\">top</a>-><a class=\"id\" href=\"#count\">count</a> == 1 && (<a class=\"id\" href=\"#idp\">idp</a>-><a class=\"id\" href=\"#layers\">layers</a> &gt; 1) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#idp\">idp</a>-><a class=\"id\" href=\"#top\">top</a>-><a class=\"id\" href=\"#ary\">ary</a>[0]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Single child at leftmost slot: we can shrink the tree.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This level is not needed anymore since when layers are</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * inserted, they are inserted at the top of the existing</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * tree.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to_free\">to_free</a> = <a class=\"id\" href=\"#idp\">idp</a>-><a class=\"id\" href=\"#top\">top</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#idp\">idp</a>-><a class=\"id\" href=\"#top\">top</a>-><a class=\"id\" href=\"#ary\">ary</a>[0];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#idp\">idp</a>-><a class=\"id\" href=\"#top\">top</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>--<a class=\"id\" href=\"#idp\">idp</a>-><a class=\"id\" href=\"#layers\">layers</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to_free\">to_free</a>-><a class=\"id\" href=\"#bitmap\">bitmap</a> = <a class=\"id\" href=\"#to_free\">to_free</a>-><a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_layer\">free_layer</a>(<a class=\"id\" href=\"#to_free\">to_free</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#idp\">idp</a>-><a class=\"id\" href=\"#id_free_cnt\">id_free_cnt</a> >= <a class=\"id\" href=\"#IDR_FREE_MAX\">IDR_FREE_MAX</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#get_from_free_list\">get_from_free_list</a>(<a class=\"id\" href=\"#idp\">idp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Note: we don't call the rcu callback here, since the only</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * layers that fall into the freelist are those that have been</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * preallocated.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#idr_layer_cache\">idr_layer_cache</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#idr_remove\">idr_remove</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * idr_remove_all - remove all ids from the given idr tree</span>", 
"<span class=\"comment\"> * @idp: idr handle</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * idr_destroy() only frees up unused, cached idp_layers, but this</span>", 
"<span class=\"comment\"> * function will remove all id mappings and leave all idp_layers</span>", 
"<span class=\"comment\"> * unused.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A typical clean-up sequence for objects stored in an idr tree, will</span>", 
"<span class=\"comment\"> * use idr_for_each() to free all objects, if necessay, then</span>", 
"<span class=\"comment\"> * idr_remove_all() to remove all ids, and idr_destroy() to free</span>", 
"<span class=\"comment\"> * up the cached idr_layers.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#idr_remove_all\">idr_remove_all</a>(struct <a class=\"id\" href=\"#idr\">idr</a> *<a class=\"id\" href=\"#idp\">idp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#max\">max</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#bt_mask\">bt_mask</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#idr_layer\">idr_layer</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#idr_layer\">idr_layer</a> *<a class=\"id\" href=\"#pa\">pa</a>[<a class=\"id\" href=\"#MAX_LEVEL\">MAX_LEVEL</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#idr_layer\">idr_layer</a> **<a class=\"id\" href=\"#paa\">paa</a> = &amp;<a class=\"id\" href=\"#pa\">pa</a>[0];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#idp\">idp</a>-><a class=\"id\" href=\"#layers\">layers</a> * <a class=\"id\" href=\"#IDR_BITS\">IDR_BITS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#idp\">idp</a>-><a class=\"id\" href=\"#top\">top</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#idp\">idp</a>-><a class=\"id\" href=\"#top\">top</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a> = 1 << <a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a> = 0;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#id\">id</a> &lt; <a class=\"id\" href=\"#max\">max</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#n\">n</a> &gt; <a class=\"id\" href=\"#IDR_BITS\">IDR_BITS</a> && <a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> -= <a class=\"id\" href=\"#IDR_BITS\">IDR_BITS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#paa\">paa</a>++ = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ary\">ary</a>[(<a class=\"id\" href=\"#id\">id</a> >> <a class=\"id\" href=\"#n\">n</a>) &amp; <a class=\"id\" href=\"#IDR_MASK\">IDR_MASK</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bt_mask\">bt_mask</a> = <a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a> += 1 << <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Get the highest bit that the above add changed from 0-&gt;1. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#n\">n</a> &lt; <a class=\"id\" href=\"#fls\">fls</a>(<a class=\"id\" href=\"#id\">id</a> ^ <a class=\"id\" href=\"#bt_mask\">bt_mask</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_layer\">free_layer</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> += <a class=\"id\" href=\"#IDR_BITS\">IDR_BITS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = *--<a class=\"id\" href=\"#paa\">paa</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idp\">idp</a>-><a class=\"id\" href=\"#layers\">layers</a> = 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#idr_remove_all\">idr_remove_all</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * idr_destroy - release all cached layers within an idr tree</span>", 
"<span class=\"comment\"> * idp: idr handle</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#idr_destroy\">idr_destroy</a>(struct <a class=\"id\" href=\"#idr\">idr</a> *<a class=\"id\" href=\"#idp\">idp</a>)", 
"{", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#idp\">idp</a>-><a class=\"id\" href=\"#id_free_cnt\">id_free_cnt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#idr_layer\">idr_layer</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#get_from_free_list\">get_from_free_list</a>(<a class=\"id\" href=\"#idp\">idp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#idr_layer_cache\">idr_layer_cache</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#idr_destroy\">idr_destroy</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * idr_find - return pointer for given id</span>", 
"<span class=\"comment\"> * @idp: idr handle</span>", 
"<span class=\"comment\"> * @id: lookup key</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return the pointer given the id it has been registered with.  A %NULL</span>", 
"<span class=\"comment\"> * return indicates that @id is not valid or you passed %NULL in</span>", 
"<span class=\"comment\"> * idr_get_new().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function can be called under rcu_read_lock(), given that the leaf</span>", 
"<span class=\"comment\"> * pointers lifetimes are correctly managed.</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#idr_find\">idr_find</a>(struct <a class=\"id\" href=\"#idr\">idr</a> *<a class=\"id\" href=\"#idp\">idp</a>, int <a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#idr_layer\">idr_layer</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#rcu_dereference_raw\">rcu_dereference_raw</a>(<a class=\"id\" href=\"#idp\">idp</a>-><a class=\"id\" href=\"#top\">top</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#layer\">layer</a>+1) * <a class=\"id\" href=\"#IDR_BITS\">IDR_BITS</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Mask off upper bits we don't use for the search. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a> &= <a class=\"id\" href=\"#MAX_ID_MASK\">MAX_ID_MASK</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#id\">id</a> >= (1 << <a class=\"id\" href=\"#n\">n</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#n\">n</a> == 0);", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#n\">n</a> &gt; 0 && <a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> -= <a class=\"id\" href=\"#IDR_BITS\">IDR_BITS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#n\">n</a> != <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#layer\">layer</a>*<a class=\"id\" href=\"#IDR_BITS\">IDR_BITS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#rcu_dereference_raw\">rcu_dereference_raw</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ary\">ary</a>[(<a class=\"id\" href=\"#id\">id</a> >> <a class=\"id\" href=\"#n\">n</a>) &amp; <a class=\"id\" href=\"#IDR_MASK\">IDR_MASK</a>]);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return((void *)<a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#idr_find\">idr_find</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * idr_for_each - iterate through all stored pointers</span>", 
"<span class=\"comment\"> * @idp: idr handle</span>", 
"<span class=\"comment\"> * @fn: function to be called for each pointer</span>", 
"<span class=\"comment\"> * @data: data passed back to callback function</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Iterate over the pointers registered with the given idr.  The</span>", 
"<span class=\"comment\"> * callback function will be called for each pointer currently</span>", 
"<span class=\"comment\"> * registered, passing the id, the pointer and the data pointer passed</span>", 
"<span class=\"comment\"> * to this function.  It is not safe to modify the idr tree while in</span>", 
"<span class=\"comment\"> * the callback, so functions such as idr_get_new and idr_remove are</span>", 
"<span class=\"comment\"> * not allowed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We check the return of @fn each time. If it returns anything other</span>", 
"<span class=\"comment\"> * than 0, we break out and return that value.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The caller must serialize idr_for_each() vs idr_get_new() and idr_remove().</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#idr_for_each\">idr_for_each</a>(struct <a class=\"id\" href=\"#idr\">idr</a> *<a class=\"id\" href=\"#idp\">idp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> int (*<a class=\"id\" href=\"#fn\">fn</a>)(int <a class=\"id\" href=\"#id\">id</a>, void *<a class=\"id\" href=\"#p\">p</a>, void *<a class=\"id\" href=\"#data\">data</a>), void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#id\">id</a>, <a class=\"id\" href=\"#max\">max</a>, <a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#idr_layer\">idr_layer</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#idr_layer\">idr_layer</a> *<a class=\"id\" href=\"#pa\">pa</a>[<a class=\"id\" href=\"#MAX_LEVEL\">MAX_LEVEL</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#idr_layer\">idr_layer</a> **<a class=\"id\" href=\"#paa\">paa</a> = &amp;<a class=\"id\" href=\"#pa\">pa</a>[0];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#idp\">idp</a>-><a class=\"id\" href=\"#layers\">layers</a> * <a class=\"id\" href=\"#IDR_BITS\">IDR_BITS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#rcu_dereference_raw\">rcu_dereference_raw</a>(<a class=\"id\" href=\"#idp\">idp</a>-><a class=\"id\" href=\"#top\">top</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a> = 1 << <a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a> = 0;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#id\">id</a> &lt; <a class=\"id\" href=\"#max\">max</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#n\">n</a> &gt; 0 && <a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> -= <a class=\"id\" href=\"#IDR_BITS\">IDR_BITS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#paa\">paa</a>++ = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#rcu_dereference_raw\">rcu_dereference_raw</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ary\">ary</a>[(<a class=\"id\" href=\"#id\">id</a> >> <a class=\"id\" href=\"#n\">n</a>) &amp; <a class=\"id\" href=\"#IDR_MASK\">IDR_MASK</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#fn\">fn</a>(<a class=\"id\" href=\"#id\">id</a>, (void *)<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a> += 1 << <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#n\">n</a> &lt; <a class=\"id\" href=\"#fls\">fls</a>(<a class=\"id\" href=\"#id\">id</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> += <a class=\"id\" href=\"#IDR_BITS\">IDR_BITS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = *--<a class=\"id\" href=\"#paa\">paa</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#idr_for_each\">idr_for_each</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * idr_get_next - lookup next object of id to given id.</span>", 
"<span class=\"comment\"> * @idp: idr handle</span>", 
"<span class=\"comment\"> * @id:  pointer to lookup key</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns pointer to registered object with id, which is next number to</span>", 
"<span class=\"comment\"> * given id.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void *<a class=\"id\" href=\"#idr_get_next\">idr_get_next</a>(struct <a class=\"id\" href=\"#idr\">idr</a> *<a class=\"id\" href=\"#idp\">idp</a>, int *<a class=\"id\" href=\"#nextidp\">nextidp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#idr_layer\">idr_layer</a> *<a class=\"id\" href=\"#p\">p</a>, *<a class=\"id\" href=\"#pa\">pa</a>[<a class=\"id\" href=\"#MAX_LEVEL\">MAX_LEVEL</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#idr_layer\">idr_layer</a> **<a class=\"id\" href=\"#paa\">paa</a> = &amp;<a class=\"id\" href=\"#pa\">pa</a>[0];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#id\">id</a> = *<a class=\"id\" href=\"#nextidp\">nextidp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a>, <a class=\"id\" href=\"#max\">max</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* find first ent */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#idp\">idp</a>-><a class=\"id\" href=\"#layers\">layers</a> * <a class=\"id\" href=\"#IDR_BITS\">IDR_BITS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max\">max</a> = 1 << <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#rcu_dereference_raw\">rcu_dereference_raw</a>(<a class=\"id\" href=\"#idp\">idp</a>-><a class=\"id\" href=\"#top\">top</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#id\">id</a> &lt; <a class=\"id\" href=\"#max\">max</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#n\">n</a> &gt; 0 && <a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> -= <a class=\"id\" href=\"#IDR_BITS\">IDR_BITS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#paa\">paa</a>++ = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#rcu_dereference_raw\">rcu_dereference_raw</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ary\">ary</a>[(<a class=\"id\" href=\"#id\">id</a> >> <a class=\"id\" href=\"#n\">n</a>) &amp; <a class=\"id\" href=\"#IDR_MASK\">IDR_MASK</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#nextidp\">nextidp</a> = <a class=\"id\" href=\"#id\">id</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a> += 1 << <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#n\">n</a> &lt; <a class=\"id\" href=\"#fls\">fls</a>(<a class=\"id\" href=\"#id\">id</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> += <a class=\"id\" href=\"#IDR_BITS\">IDR_BITS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = *--<a class=\"id\" href=\"#paa\">paa</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#idr_get_next\">idr_get_next</a>);", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * idr_replace - replace pointer for given id</span>", 
"<span class=\"comment\"> * @idp: idr handle</span>", 
"<span class=\"comment\"> * @ptr: pointer you want associated with the id</span>", 
"<span class=\"comment\"> * @id: lookup key</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Replace the pointer registered with an id and return the old value.</span>", 
"<span class=\"comment\"> * A -ENOENT return indicates that @id was not found.</span>", 
"<span class=\"comment\"> * A -EINVAL return indicates that @id was not within valid constraints.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The caller must serialize with writers.</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#idr_replace\">idr_replace</a>(struct <a class=\"id\" href=\"#idr\">idr</a> *<a class=\"id\" href=\"#idp\">idp</a>, void *<a class=\"id\" href=\"#ptr\">ptr</a>, int <a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#idr_layer\">idr_layer</a> *<a class=\"id\" href=\"#p\">p</a>, *<a class=\"id\" href=\"#old_p\">old_p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#idp\">idp</a>-><a class=\"id\" href=\"#top\">top</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#layer\">layer</a>+1) * <a class=\"id\" href=\"#IDR_BITS\">IDR_BITS</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a> &= <a class=\"id\" href=\"#MAX_ID_MASK\">MAX_ID_MASK</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#id\">id</a> >= (1 << <a class=\"id\" href=\"#n\">n</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> -= <a class=\"id\" href=\"#IDR_BITS\">IDR_BITS</a>;", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#n\">n</a> &gt; 0) && <a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ary\">ary</a>[(<a class=\"id\" href=\"#id\">id</a> >> <a class=\"id\" href=\"#n\">n</a>) &amp; <a class=\"id\" href=\"#IDR_MASK\">IDR_MASK</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> -= <a class=\"id\" href=\"#IDR_BITS\">IDR_BITS</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#id\">id</a> &amp; <a class=\"id\" href=\"#IDR_MASK\">IDR_MASK</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#p\">p</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || !<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#n\">n</a>, &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#bitmap\">bitmap</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOENT\">ENOENT</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_p\">old_p</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ary\">ary</a>[<a class=\"id\" href=\"#n\">n</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ary\">ary</a>[<a class=\"id\" href=\"#n\">n</a>], <a class=\"id\" href=\"#ptr\">ptr</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#old_p\">old_p</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#idr_replace\">idr_replace</a>);", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#idr_init_cache\">idr_init_cache</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idr_layer_cache\">idr_layer_cache</a> = <a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(\"idr_layer_cache\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(struct <a class=\"id\" href=\"#idr_layer\">idr_layer</a>), 0, <a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * idr_init - initialize idr handle</span>", 
"<span class=\"comment\"> * @idp:<span class=\"ts\"/>idr handle</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is use to set up the handle (@idp) that you will pass</span>", 
"<span class=\"comment\"> * to the rest of the functions.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#idr_init\">idr_init</a>(struct <a class=\"id\" href=\"#idr\">idr</a> *<a class=\"id\" href=\"#idp\">idp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#idp\">idp</a>, 0, sizeof(struct <a class=\"id\" href=\"#idr\">idr</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#idp\">idp</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#idr_init\">idr_init</a>);", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * IDA - IDR based ID allocator</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * this is id allocator without id -&gt; pointer translation.  Memory</span>", 
"<span class=\"comment\"> * usage is much lower than full blown idr because each id only</span>", 
"<span class=\"comment\"> * occupies a bit.  ida uses a custom leaf node which contains</span>", 
"<span class=\"comment\"> * IDA_BITMAP_BITS slots.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 2007-04-25  written by Tejun Heo &lt;htejun@gmail.com&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#free_bitmap\">free_bitmap</a>(struct <a class=\"id\" href=\"#ida\">ida</a> *<a class=\"id\" href=\"#ida\">ida</a>, struct <a class=\"id\" href=\"#ida_bitmap\">ida_bitmap</a> *<a class=\"id\" href=\"#bitmap\">bitmap</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ida\">ida</a>-><a class=\"id\" href=\"#free_bitmap\">free_bitmap</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#ida\">ida</a>-><a class=\"id\" href=\"#idr\">idr</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ida\">ida</a>-><a class=\"id\" href=\"#free_bitmap\">free_bitmap</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ida\">ida</a>-><a class=\"id\" href=\"#free_bitmap\">free_bitmap</a> = <a class=\"id\" href=\"#bitmap\">bitmap</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bitmap\">bitmap</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#ida\">ida</a>-><a class=\"id\" href=\"#idr\">idr</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#bitmap\">bitmap</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ida_pre_get - reserve resources for ida allocation</span>", 
"<span class=\"comment\"> * @ida:<span class=\"ts\"/>ida handle</span>", 
"<span class=\"comment\"> * @gfp_mask:<span class=\"ts\"/>memory allocation flag</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function should be called prior to locking and calling the</span>", 
"<span class=\"comment\"> * following function.  It preallocates enough memory to satisfy the</span>", 
"<span class=\"comment\"> * worst possible allocation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the system is REALLY out of memory this function returns 0,</span>", 
"<span class=\"comment\"> * otherwise 1.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ida_pre_get\">ida_pre_get</a>(struct <a class=\"id\" href=\"#ida\">ida</a> *<a class=\"id\" href=\"#ida\">ida</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* allocate idr_layers */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#idr_pre_get\">idr_pre_get</a>(&amp;<a class=\"id\" href=\"#ida\">ida</a>-><a class=\"id\" href=\"#idr\">idr</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* allocate free_bitmap */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ida\">ida</a>-><a class=\"id\" href=\"#free_bitmap\">free_bitmap</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ida_bitmap\">ida_bitmap</a> *<a class=\"id\" href=\"#bitmap\">bitmap</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bitmap\">bitmap</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(struct <a class=\"id\" href=\"#ida_bitmap\">ida_bitmap</a>), <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bitmap\">bitmap</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_bitmap\">free_bitmap</a>(<a class=\"id\" href=\"#ida\">ida</a>, <a class=\"id\" href=\"#bitmap\">bitmap</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#ida_pre_get\">ida_pre_get</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ida_get_new_above - allocate new ID above or equal to a start id</span>", 
"<span class=\"comment\"> * @ida:<span class=\"ts\"/>ida handle</span>", 
"<span class=\"comment\"> * @staring_id:<span class=\"ts\"/>id to start search at</span>", 
"<span class=\"comment\"> * @p_id:<span class=\"ts\"/>pointer to the allocated handle</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Allocate new ID above or equal to @ida.  It should be called with</span>", 
"<span class=\"comment\"> * any required locks.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If memory is required, it will return -EAGAIN, you should unlock</span>", 
"<span class=\"comment\"> * and go back to the ida_pre_get() call.  If the ida is full, it will</span>", 
"<span class=\"comment\"> * return -ENOSPC.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @p_id returns a value in the range @starting_id ... 0x7fffffff.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ida_get_new_above\">ida_get_new_above</a>(struct <a class=\"id\" href=\"#ida\">ida</a> *<a class=\"id\" href=\"#ida\">ida</a>, int <a class=\"id\" href=\"#starting_id\">starting_id</a>, int *<a class=\"id\" href=\"#p_id\">p_id</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#idr_layer\">idr_layer</a> *<a class=\"id\" href=\"#pa\">pa</a>[<a class=\"id\" href=\"#MAX_LEVEL\">MAX_LEVEL</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ida_bitmap\">ida_bitmap</a> *<a class=\"id\" href=\"#bitmap\">bitmap</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#idr_id\">idr_id</a> = <a class=\"id\" href=\"#starting_id\">starting_id</a> / <a class=\"id\" href=\"#IDA_BITMAP_BITS\">IDA_BITMAP_BITS</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#starting_id\">starting_id</a> % <a class=\"id\" href=\"#IDA_BITMAP_BITS\">IDA_BITMAP_BITS</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#id\">id</a>;", 
"", 
" <a class=\"id\" href=\"#restart\">restart</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* get vacant slot */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#idr_get_empty_slot\">idr_get_empty_slot</a>(&amp;<a class=\"id\" href=\"#ida\">ida</a>-><a class=\"id\" href=\"#idr\">idr</a>, <a class=\"id\" href=\"#idr_id\">idr_id</a>, <a class=\"id\" href=\"#pa\">pa</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#_idr_rc_to_errno\">_idr_rc_to_errno</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a> * <a class=\"id\" href=\"#IDA_BITMAP_BITS\">IDA_BITMAP_BITS</a> >= <a class=\"id\" href=\"#MAX_ID_BIT\">MAX_ID_BIT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a> != <a class=\"id\" href=\"#idr_id\">idr_id</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idr_id\">idr_id</a> = <a class=\"id\" href=\"#t\">t</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* if bitmap isn't there, create a new one */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap\">bitmap</a> = (void *)<a class=\"id\" href=\"#pa\">pa</a>[0]-><a class=\"id\" href=\"#ary\">ary</a>[<a class=\"id\" href=\"#idr_id\">idr_id</a> &amp; <a class=\"id\" href=\"#IDR_MASK\">IDR_MASK</a>];", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bitmap\">bitmap</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#ida\">ida</a>-><a class=\"id\" href=\"#idr\">idr</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bitmap\">bitmap</a> = <a class=\"id\" href=\"#ida\">ida</a>-><a class=\"id\" href=\"#free_bitmap\">free_bitmap</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ida\">ida</a>-><a class=\"id\" href=\"#free_bitmap\">free_bitmap</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#ida\">ida</a>-><a class=\"id\" href=\"#idr\">idr</a>.<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bitmap\">bitmap</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#bitmap\">bitmap</a>, 0, sizeof(struct <a class=\"id\" href=\"#ida_bitmap\">ida_bitmap</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_assign_pointer\">rcu_assign_pointer</a>(<a class=\"id\" href=\"#pa\">pa</a>[0]-><a class=\"id\" href=\"#ary\">ary</a>[<a class=\"id\" href=\"#idr_id\">idr_id</a> &amp; <a class=\"id\" href=\"#IDR_MASK\">IDR_MASK</a>],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(void *)<a class=\"id\" href=\"#bitmap\">bitmap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pa\">pa</a>[0]-><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* lookup for empty slot */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#find_next_zero_bit\">find_next_zero_bit</a>(<a class=\"id\" href=\"#bitmap\">bitmap</a>-><a class=\"id\" href=\"#bitmap\">bitmap</a>, <a class=\"id\" href=\"#IDA_BITMAP_BITS\">IDA_BITMAP_BITS</a>, <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a> == <a class=\"id\" href=\"#IDA_BITMAP_BITS\">IDA_BITMAP_BITS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* no empty slot after offset, continue to the next chunk */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idr_id\">idr_id</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#restart\">restart</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#idr_id\">idr_id</a> * <a class=\"id\" href=\"#IDA_BITMAP_BITS\">IDA_BITMAP_BITS</a> + <a class=\"id\" href=\"#t\">t</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#id\">id</a> >= <a class=\"id\" href=\"#MAX_ID_BIT\">MAX_ID_BIT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOSPC\">ENOSPC</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_bit\">__set_bit</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#bitmap\">bitmap</a>-><a class=\"id\" href=\"#bitmap\">bitmap</a>);", 
"<span class=\"ts\"/>if (++<a class=\"id\" href=\"#bitmap\">bitmap</a>-><a class=\"id\" href=\"#nr_busy\">nr_busy</a> == <a class=\"id\" href=\"#IDA_BITMAP_BITS\">IDA_BITMAP_BITS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idr_mark_full\">idr_mark_full</a>(<a class=\"id\" href=\"#pa\">pa</a>, <a class=\"id\" href=\"#idr_id\">idr_id</a>);", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#p_id\">p_id</a> = <a class=\"id\" href=\"#id\">id</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Each leaf node can handle nearly a thousand slots and the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * whole idea of ida is to have small memory foot print.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Throw away extra resources one by one after each successful</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * allocation.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ida\">ida</a>-><a class=\"id\" href=\"#idr\">idr</a>.<a class=\"id\" href=\"#id_free_cnt\">id_free_cnt</a> || <a class=\"id\" href=\"#ida\">ida</a>-><a class=\"id\" href=\"#free_bitmap\">free_bitmap</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#idr_layer\">idr_layer</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#get_from_free_list\">get_from_free_list</a>(&amp;<a class=\"id\" href=\"#ida\">ida</a>-><a class=\"id\" href=\"#idr\">idr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#idr_layer_cache\">idr_layer_cache</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#ida_get_new_above\">ida_get_new_above</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ida_get_new - allocate new ID</span>", 
"<span class=\"comment\"> * @ida:<span class=\"ts\"/>idr handle</span>", 
"<span class=\"comment\"> * @p_id:<span class=\"ts\"/>pointer to the allocated handle</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Allocate new ID.  It should be called with any required locks.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If memory is required, it will return -EAGAIN, you should unlock</span>", 
"<span class=\"comment\"> * and go back to the idr_pre_get() call.  If the idr is full, it will</span>", 
"<span class=\"comment\"> * return -ENOSPC.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @id returns a value in the range 0 ... 0x7fffffff.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ida_get_new\">ida_get_new</a>(struct <a class=\"id\" href=\"#ida\">ida</a> *<a class=\"id\" href=\"#ida\">ida</a>, int *<a class=\"id\" href=\"#p_id\">p_id</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ida_get_new_above\">ida_get_new_above</a>(<a class=\"id\" href=\"#ida\">ida</a>, 0, <a class=\"id\" href=\"#p_id\">p_id</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#ida_get_new\">ida_get_new</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ida_remove - remove the given ID</span>", 
"<span class=\"comment\"> * @ida:<span class=\"ts\"/>ida handle</span>", 
"<span class=\"comment\"> * @id:<span class=\"ts\"/><span class=\"ts\"/>ID to free</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ida_remove\">ida_remove</a>(struct <a class=\"id\" href=\"#ida\">ida</a> *<a class=\"id\" href=\"#ida\">ida</a>, int <a class=\"id\" href=\"#id\">id</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#idr_layer\">idr_layer</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#ida\">ida</a>-><a class=\"id\" href=\"#idr\">idr</a>.<a class=\"id\" href=\"#top\">top</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#shift\">shift</a> = (<a class=\"id\" href=\"#ida\">ida</a>-><a class=\"id\" href=\"#idr\">idr</a>.<a class=\"id\" href=\"#layers\">layers</a> - 1) * <a class=\"id\" href=\"#IDR_BITS\">IDR_BITS</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#idr_id\">idr_id</a> = <a class=\"id\" href=\"#id\">id</a> / <a class=\"id\" href=\"#IDA_BITMAP_BITS\">IDA_BITMAP_BITS</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#id\">id</a> % <a class=\"id\" href=\"#IDA_BITMAP_BITS\">IDA_BITMAP_BITS</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ida_bitmap\">ida_bitmap</a> *<a class=\"id\" href=\"#bitmap\">bitmap</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* clear full bits while looking up the leaf idr_layer */</span>", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#shift\">shift</a> &gt; 0) && <a class=\"id\" href=\"#p\">p</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = (<a class=\"id\" href=\"#idr_id\">idr_id</a> >> <a class=\"id\" href=\"#shift\">shift</a>) &amp; <a class=\"id\" href=\"#IDR_MASK\">IDR_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__clear_bit\">__clear_bit</a>(<a class=\"id\" href=\"#n\">n</a>, &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#bitmap\">bitmap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ary\">ary</a>[<a class=\"id\" href=\"#n\">n</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shift\">shift</a> -= <a class=\"id\" href=\"#IDR_BITS\">IDR_BITS</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> = <a class=\"id\" href=\"#idr_id\">idr_id</a> &amp; <a class=\"id\" href=\"#IDR_MASK\">IDR_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__clear_bit\">__clear_bit</a>(<a class=\"id\" href=\"#n\">n</a>, &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#bitmap\">bitmap</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap\">bitmap</a> = (void *)<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#ary\">ary</a>[<a class=\"id\" href=\"#n\">n</a>];", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#bitmap\">bitmap</a>-><a class=\"id\" href=\"#bitmap\">bitmap</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* update bitmap and remove it if empty */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__clear_bit\">__clear_bit</a>(<a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#bitmap\">bitmap</a>-><a class=\"id\" href=\"#bitmap\">bitmap</a>);", 
"<span class=\"ts\"/>if (--<a class=\"id\" href=\"#bitmap\">bitmap</a>-><a class=\"id\" href=\"#nr_busy\">nr_busy</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_bit\">__set_bit</a>(<a class=\"id\" href=\"#n\">n</a>, &amp;<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#bitmap\">bitmap</a>);<span class=\"ts\"/><span class=\"comment\">/* to please idr_remove() */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idr_remove\">idr_remove</a>(&amp;<a class=\"id\" href=\"#ida\">ida</a>-><a class=\"id\" href=\"#idr\">idr</a>, <a class=\"id\" href=\"#idr_id\">idr_id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_bitmap\">free_bitmap</a>(<a class=\"id\" href=\"#ida\">ida</a>, <a class=\"id\" href=\"#bitmap\">bitmap</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return;", 
"", 
" <a class=\"id\" href=\"#err\">err</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>", 
"<span class=\"ts\"/>       \"ida_remove called for id=%d which is not allocated.\\n\", <a class=\"id\" href=\"#id\">id</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#ida_remove\">ida_remove</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ida_destroy - release all cached layers within an ida tree</span>", 
"<span class=\"comment\"> * ida:<span class=\"ts\"/><span class=\"ts\"/>ida handle</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ida_destroy\">ida_destroy</a>(struct <a class=\"id\" href=\"#ida\">ida</a> *<a class=\"id\" href=\"#ida\">ida</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idr_destroy\">idr_destroy</a>(&amp;<a class=\"id\" href=\"#ida\">ida</a>-><a class=\"id\" href=\"#idr\">idr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ida\">ida</a>-><a class=\"id\" href=\"#free_bitmap\">free_bitmap</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#ida_destroy\">ida_destroy</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ida_init - initialize ida handle</span>", 
"<span class=\"comment\"> * @ida:<span class=\"ts\"/>ida handle</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is use to set up the handle (@ida) that you will pass</span>", 
"<span class=\"comment\"> * to the rest of the functions.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ida_init\">ida_init</a>(struct <a class=\"id\" href=\"#ida\">ida</a> *<a class=\"id\" href=\"#ida\">ida</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#ida\">ida</a>, 0, sizeof(struct <a class=\"id\" href=\"#ida\">ida</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idr_init\">idr_init</a>(&amp;<a class=\"id\" href=\"#ida\">ida</a>-><a class=\"id\" href=\"#idr\">idr</a>);", 
"", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#ida_init\">ida_init</a>);", 
];
xr_frag_insert('l/1b/df49a5891eebe1685058ca40e42a9220d5e9fb.xr', __xr_tmp);
