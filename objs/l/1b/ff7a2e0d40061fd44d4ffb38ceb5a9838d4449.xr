var __xr_tmp = [
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#nl80211_auth_type\">nl80211_auth_type</a> <a class=\"id\" href=\"#auth_type\">auth_type</a>;", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#key\">key</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#key_len\">key_len</a>, <a class=\"id\" href=\"#key_idx\">key_idx</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#local_state_change\">local_state_change</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct cfg80211_assoc_request - (Re)Association request data</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This structure provides information needed to complete IEEE 802.11</span>", 
"<span class=\"comment\"> * (re)association.</span>", 
"<span class=\"comment\"> * @bss: The BSS to associate with.</span>", 
"<span class=\"comment\"> * @ie: Extra IEs to add to (Re)Association Request frame or %NULL</span>", 
"<span class=\"comment\"> * @ie_len: Length of ie buffer in octets</span>", 
"<span class=\"comment\"> * @use_mfp: Use management frame protection (IEEE 802.11w) in this association</span>", 
"<span class=\"comment\"> * @crypto: crypto settings</span>", 
"<span class=\"comment\"> * @prev_bssid: previous BSSID, if not %NULL use reassociate frame</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#cfg80211_assoc_request\">cfg80211_assoc_request</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfg80211_bss\">cfg80211_bss</a> *<a class=\"id\" href=\"#bss\">bss</a>;", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#ie\">ie</a>, *<a class=\"id\" href=\"#prev_bssid\">prev_bssid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#ie_len\">ie_len</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfg80211_crypto_settings\">cfg80211_crypto_settings</a> <a class=\"id\" href=\"#crypto\">crypto</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#use_mfp\">use_mfp</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct cfg80211_deauth_request - Deauthentication request data</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This structure provides information needed to complete IEEE 802.11</span>", 
"<span class=\"comment\"> * deauthentication.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @bss: the BSS to deauthenticate from</span>", 
"<span class=\"comment\"> * @ie: Extra IEs to add to Deauthentication frame or %NULL</span>", 
"<span class=\"comment\"> * @ie_len: Length of ie buffer in octets</span>", 
"<span class=\"comment\"> * @reason_code: The reason code for the deauthentication</span>", 
"<span class=\"comment\"> * @local_state_change: This is a request for a local state only, i.e., no</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Deauthentication frame is to be transmitted.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#cfg80211_deauth_request\">cfg80211_deauth_request</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfg80211_bss\">cfg80211_bss</a> *<a class=\"id\" href=\"#bss\">bss</a>;", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#ie\">ie</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#ie_len\">ie_len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#reason_code\">reason_code</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#local_state_change\">local_state_change</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct cfg80211_disassoc_request - Disassociation request data</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This structure provides information needed to complete IEEE 802.11</span>", 
"<span class=\"comment\"> * disassocation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @bss: the BSS to disassociate from</span>", 
"<span class=\"comment\"> * @ie: Extra IEs to add to Disassociation frame or %NULL</span>", 
"<span class=\"comment\"> * @ie_len: Length of ie buffer in octets</span>", 
"<span class=\"comment\"> * @reason_code: The reason code for the disassociation</span>", 
"<span class=\"comment\"> * @local_state_change: This is a request for a local state only, i.e., no</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Disassociation frame is to be transmitted.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#cfg80211_disassoc_request\">cfg80211_disassoc_request</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfg80211_bss\">cfg80211_bss</a> *<a class=\"id\" href=\"#bss\">bss</a>;", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#ie\">ie</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#ie_len\">ie_len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#reason_code\">reason_code</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#local_state_change\">local_state_change</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct cfg80211_ibss_params - IBSS parameters</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This structure defines the IBSS parameters for the join_ibss()</span>", 
"<span class=\"comment\"> * method.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @ssid: The SSID, will always be non-null.</span>", 
"<span class=\"comment\"> * @ssid_len: The length of the SSID, will always be non-zero.</span>", 
"<span class=\"comment\"> * @bssid: Fixed BSSID requested, maybe be %NULL, if set do not</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>search for IBSSs with a different BSSID.</span>", 
"<span class=\"comment\"> * @channel: The channel to use if no IBSS can be found to join.</span>", 
"<span class=\"comment\"> * @channel_fixed: The channel should be fixed -- do not search for</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>IBSSs to join on other channels.</span>", 
"<span class=\"comment\"> * @ie: information element(s) to include in the beacon</span>", 
"<span class=\"comment\"> * @ie_len: length of that</span>", 
"<span class=\"comment\"> * @beacon_interval: beacon interval to use</span>", 
"<span class=\"comment\"> * @privacy: this is a protected network, keys will be configured</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>after joining</span>", 
"<span class=\"comment\"> * @basic_rates: bitmap of basic rates to use when creating the IBSS</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#cfg80211_ibss_params\">cfg80211_ibss_params</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#ssid\">ssid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#bssid\">bssid</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ieee80211_channel\">ieee80211_channel</a> *<a class=\"id\" href=\"#channel\">channel</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#ie\">ie</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#ssid_len\">ssid_len</a>, <a class=\"id\" href=\"#ie_len\">ie_len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#beacon_interval\">beacon_interval</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#basic_rates\">basic_rates</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#channel_fixed\">channel_fixed</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#privacy\">privacy</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct cfg80211_connect_params - Connection parameters</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This structure provides information needed to complete IEEE 802.11</span>", 
"<span class=\"comment\"> * authentication and association.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @channel: The channel to use or %NULL if not specified (auto-select based</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>on scan results)</span>", 
"<span class=\"comment\"> * @bssid: The AP BSSID or %NULL if not specified (auto-select based on scan</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>results)</span>", 
"<span class=\"comment\"> * @ssid: SSID</span>", 
"<span class=\"comment\"> * @ssid_len: Length of ssid in octets</span>", 
"<span class=\"comment\"> * @auth_type: Authentication type (algorithm)</span>", 
"<span class=\"comment\"> * @ie: IEs for association request</span>", 
"<span class=\"comment\"> * @ie_len: Length of assoc_ie in octets</span>", 
"<span class=\"comment\"> * @privacy: indicates whether privacy-enabled APs should be used</span>", 
"<span class=\"comment\"> * @crypto: crypto settings</span>", 
"<span class=\"comment\"> * @key_len: length of WEP key for shared key authentication</span>", 
"<span class=\"comment\"> * @key_idx: index of WEP key for shared key authentication</span>", 
"<span class=\"comment\"> * @key: WEP key for shared key authentication</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#cfg80211_connect_params\">cfg80211_connect_params</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ieee80211_channel\">ieee80211_channel</a> *<a class=\"id\" href=\"#channel\">channel</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#bssid\">bssid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#ssid\">ssid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#ssid_len\">ssid_len</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#nl80211_auth_type\">nl80211_auth_type</a> <a class=\"id\" href=\"#auth_type\">auth_type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#ie\">ie</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#ie_len\">ie_len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#privacy\">privacy</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cfg80211_crypto_settings\">cfg80211_crypto_settings</a> <a class=\"id\" href=\"#crypto\">crypto</a>;", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#key\">key</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#key_len\">key_len</a>, <a class=\"id\" href=\"#key_idx\">key_idx</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * enum wiphy_params_flags - set_wiphy_params bitfield values</span>", 
"<span class=\"comment\"> * @WIPHY_PARAM_RETRY_SHORT: wiphy-&gt;retry_short has changed</span>", 
"<span class=\"comment\"> * @WIPHY_PARAM_RETRY_LONG: wiphy-&gt;retry_long has changed</span>", 
"<span class=\"comment\"> * @WIPHY_PARAM_FRAG_THRESHOLD: wiphy-&gt;frag_threshold has changed</span>", 
"<span class=\"comment\"> * @WIPHY_PARAM_RTS_THRESHOLD: wiphy-&gt;rts_threshold has changed</span>", 
"<span class=\"comment\"> * @WIPHY_PARAM_COVERAGE_CLASS: coverage class changed</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#wiphy_params_flags\">wiphy_params_flags</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WIPHY_PARAM_RETRY_SHORT\">WIPHY_PARAM_RETRY_SHORT</a><span class=\"ts\"/><span class=\"ts\"/>= 1 << 0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WIPHY_PARAM_RETRY_LONG\">WIPHY_PARAM_RETRY_LONG</a><span class=\"ts\"/><span class=\"ts\"/>= 1 << 1,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WIPHY_PARAM_FRAG_THRESHOLD\">WIPHY_PARAM_FRAG_THRESHOLD</a><span class=\"ts\"/>= 1 << 2,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WIPHY_PARAM_RTS_THRESHOLD\">WIPHY_PARAM_RTS_THRESHOLD</a><span class=\"ts\"/>= 1 << 3,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WIPHY_PARAM_COVERAGE_CLASS\">WIPHY_PARAM_COVERAGE_CLASS</a><span class=\"ts\"/>= 1 << 4,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * cfg80211_bitrate_mask - masks for bitrate control</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#cfg80211_bitrate_mask\">cfg80211_bitrate_mask</a> {", 
"<span class=\"ts\"/>struct {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#legacy\">legacy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* TODO: add support for masking MCS rates; e.g.: */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* u8 mcs[IEEE80211_HT_MCS_MASK_LEN]; */</span>", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#control\">control</a>[<a class=\"id\" href=\"#IEEE80211_NUM_BANDS\">IEEE80211_NUM_BANDS</a>];", 
"};", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct cfg80211_pmksa - PMK Security Association</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This structure is passed to the set/del_pmksa() method for PMKSA</span>", 
"<span class=\"comment\"> * caching.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @bssid: The AP's BSSID.</span>", 
"<span class=\"comment\"> * @pmkid: The PMK material itself.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#cfg80211_pmksa\">cfg80211_pmksa</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#bssid\">bssid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#pmkid\">pmkid</a>;", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct cfg80211_ops - backend description for wireless configuration</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This struct is registered by fullmac card drivers and/or wireless stacks</span>", 
"<span class=\"comment\"> * in order to handle configuration requests on their interfaces.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * All callbacks except where otherwise noted should return 0</span>", 
"<span class=\"comment\"> * on success or a negative error code.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * All operations are currently invoked under rtnl for consistency with the</span>", 
"<span class=\"comment\"> * wireless extensions but this is subject to reevaluation as soon as this</span>", 
"<span class=\"comment\"> * code is used more widely and we have a first user without wext.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @suspend: wiphy device needs to be suspended</span>", 
"<span class=\"comment\"> * @resume: wiphy device needs to be resumed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @add_virtual_intf: create a new virtual interface with the given name,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>must set the struct wireless_dev's iftype. Beware: You must create</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the new netdev in the wiphy's network namespace!</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @del_virtual_intf: remove the virtual interface determined by ifindex.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @change_virtual_intf: change type/configuration of virtual interface,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>keep the struct wireless_dev's iftype updated.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @add_key: add a key with the given parameters. @mac_addr will be %NULL</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>when adding a group key.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @get_key: get information about the key with the given parameters.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@mac_addr will be %NULL when requesting information for a group</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>key. All pointers given to the @callback function need not be valid</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>after it returns. This function should return an error if it is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>not possible to retrieve the key, -ENOENT if it doesn't exist.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @del_key: remove a key given the @mac_addr (%NULL for a group key)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and @key_index, return -ENOENT if the key doesn't exist.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @set_default_key: set the default key on an interface</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @set_default_mgmt_key: set the default management frame key on an interface</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @add_beacon: Add a beacon with given parameters, @head, @interval</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and @dtim_period will be valid, @tail is optional.</span>", 
"<span class=\"comment\"> * @set_beacon: Change the beacon parameters for an access point mode</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>interface. This should reject the call when no beacon has been</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>configured.</span>", 
"<span class=\"comment\"> * @del_beacon: Remove beacon configuration and stop sending the beacon.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @add_station: Add a new station.</span>", 
"<span class=\"comment\"> * @del_station: Remove a station; @mac may be NULL to remove all stations.</span>", 
"<span class=\"comment\"> * @change_station: Modify a given station.</span>", 
"<span class=\"comment\"> * @get_station: get station information for the station identified by @mac</span>", 
"<span class=\"comment\"> * @dump_station: dump station callback -- resume dump at index @idx</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @add_mpath: add a fixed mesh path</span>", 
"<span class=\"comment\"> * @del_mpath: delete a given mesh path</span>", 
"<span class=\"comment\"> * @change_mpath: change a given mesh path</span>", 
"<span class=\"comment\"> * @get_mpath: get a mesh path for the given parameters</span>", 
"<span class=\"comment\"> * @dump_mpath: dump mesh path callback -- resume dump at index @idx</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @get_mesh_params: Put the current mesh parameters into *params</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @set_mesh_params: Set mesh parameters.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The mask is a bitfield which tells us which parameters to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>set, and which to leave alone.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @change_bss: Modify parameters for a given BSS.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @set_txq_params: Set TX queue parameters</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @set_channel: Set channel for a given wireless interface. Some devices</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>may support multi-channel operation (by channel hopping) so cfg80211</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>doesn't verify much. Note, however, that the passed netdev may be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>%NULL as well if the user requested changing the channel for the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>device itself, or for a monitor interface.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @scan: Request to do a scan. If returning zero, the scan request is given</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the driver, and will be valid until passed to cfg80211_scan_done().</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>For scan results, call cfg80211_inform_bss(); you can call this outside</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the scan/scan_done bracket too.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @auth: Request to authenticate with the specified peer</span>", 
"<span class=\"comment\"> * @assoc: Request to (re)associate with the specified peer</span>", 
"<span class=\"comment\"> * @deauth: Request to deauthenticate from the specified peer</span>", 
"<span class=\"comment\"> * @disassoc: Request to disassociate from the specified peer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @connect: Connect to the ESS with the specified parameters. When connected,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>call cfg80211_connect_result() with status code %WLAN_STATUS_SUCCESS.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If the connection fails for some reason, call cfg80211_connect_result()</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>with the status from the AP.</span>", 
"<span class=\"comment\"> * @disconnect: Disconnect from the BSS/ESS.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @join_ibss: Join the specified IBSS (or create if necessary). Once done, call</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>cfg80211_ibss_joined(), also call that function when changing BSSID due</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to a merge.</span>", 
"<span class=\"comment\"> * @leave_ibss: Leave the IBSS.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @set_wiphy_params: Notify that wiphy parameters have changed;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@changed bitfield (see &amp;enum wiphy_params_flags) describes which values</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>have changed. The actual parameter values are available in</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>struct wiphy. If returning an error, no value should be changed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @set_tx_power: set the transmit power according to the parameters</span>", 
"<span class=\"comment\"> * @get_tx_power: store the current TX power into the dbm variable;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>return 0 if successful</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @set_wds_peer: set the WDS peer for a WDS interface</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @rfkill_poll: polls the hw rfkill line, use cfg80211 reporting</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>functions to adjust rfkill hw state</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @dump_survey: get site survey information.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @remain_on_channel: Request the driver to remain awake on the specified</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>channel for the specified duration to complete an off-channel</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>operation (e.g., public action frame exchange). When the driver is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ready on the requested channel, it must indicate this with an event</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>notification by calling cfg80211_ready_on_channel().</span>", 
"<span class=\"comment\"> * @cancel_remain_on_channel: Cancel an on-going remain-on-channel operation.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This allows the operation to be terminated prior to timeout based on</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the duration value.</span>", 
"<span class=\"comment\"> * @action: Transmit an action frame</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @testmode_cmd: run a test mode command</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @set_bitrate_mask: set the bitrate mask configuration</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @set_pmksa: Cache a PMKID for a BSSID. This is mostly useful for fullmac</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>devices running firmwares capable of generating the (re) association</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RSN IE. It allows for faster roaming between WPA2 BSSIDs.</span>", 
"<span class=\"comment\"> * @del_pmksa: Delete a cached PMKID.</span>", 
"<span class=\"comment\"> * @flush_pmksa: Flush all cached PMKIDs.</span>", 
"<span class=\"comment\"> * @set_power_mgmt: Configure WLAN power management. A timeout value of -1</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>allows the driver to adjust the dynamic ps timeout value.</span>", 
"<span class=\"comment\"> * @set_cqm_rssi_config: Configure connection quality monitor RSSI threshold.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#cfg80211_ops\">cfg80211_ops</a> {", 
"<span class=\"ts\"/>int<span class=\"ts\"/>(*<a class=\"id\" href=\"#suspend\">suspend</a>)(struct <a class=\"id\" href=\"#wiphy\">wiphy</a> *<a class=\"id\" href=\"#wiphy\">wiphy</a>);", 
"<span class=\"ts\"/>int<span class=\"ts\"/>(*<a class=\"id\" href=\"#resume\">resume</a>)(struct <a class=\"id\" href=\"#wiphy\">wiphy</a> *<a class=\"id\" href=\"#wiphy\">wiphy</a>);", 
"", 
"<span class=\"ts\"/>int<span class=\"ts\"/>(*<a class=\"id\" href=\"#add_virtual_intf\">add_virtual_intf</a>)(struct <a class=\"id\" href=\"#wiphy\">wiphy</a> *<a class=\"id\" href=\"#wiphy\">wiphy</a>, char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    enum <a class=\"id\" href=\"#nl80211_iftype\">nl80211_iftype</a> <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#vif_params\">vif_params</a> *<a class=\"id\" href=\"#params\">params</a>);", 
"<span class=\"ts\"/>int<span class=\"ts\"/>(*<a class=\"id\" href=\"#del_virtual_intf\">del_virtual_intf</a>)(struct <a class=\"id\" href=\"#wiphy\">wiphy</a> *<a class=\"id\" href=\"#wiphy\">wiphy</a>, struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int<span class=\"ts\"/>(*<a class=\"id\" href=\"#change_virtual_intf\">change_virtual_intf</a>)(struct <a class=\"id\" href=\"#wiphy\">wiphy</a> *<a class=\"id\" href=\"#wiphy\">wiphy</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#net_device\">net_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       enum <a class=\"id\" href=\"#nl80211_iftype\">nl80211_iftype</a> <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#u32\">u32</a> *<a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#vif_params\">vif_params</a> *<a class=\"id\" href=\"#params\">params</a>);", 
"", 
];
xr_frag_insert('l/1b/ff7a2e0d40061fd44d4ffb38ceb5a9838d4449.xr', __xr_tmp);
