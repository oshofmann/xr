var __xr_tmp = [
"static int <a class=\"id\" href=\"#aio_setup_ring\">aio_setup_ring</a>(struct <a class=\"id\" href=\"#kioctx\">kioctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#aio_ring\">aio_ring</a> *<a class=\"id\" href=\"#ring\">ring</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#aio_ring_info\">aio_ring_info</a> *<a class=\"id\" href=\"#info\">info</a> = &amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#ring_info\">ring_info</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#nr_events\">nr_events</a> = <a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#max_reqs\">max_reqs</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_pages\">nr_pages</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Compensate for the ring buffer's head/tail overlap entry */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_events\">nr_events</a> += 2;<span class=\"ts\"/><span class=\"comment\">/* 1 is required, 2 for good luck */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = sizeof(struct <a class=\"id\" href=\"#aio_ring\">aio_ring</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> += sizeof(struct <a class=\"id\" href=\"#io_event\">io_event</a>) * <a class=\"id\" href=\"#nr_events\">nr_events</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a> = (<a class=\"id\" href=\"#size\">size</a> + <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>-1) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_pages\">nr_pages</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_events\">nr_events</a> = (<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> * <a class=\"id\" href=\"#nr_pages\">nr_pages</a> - sizeof(struct <a class=\"id\" href=\"#aio_ring\">aio_ring</a>)) / sizeof(struct <a class=\"id\" href=\"#io_event\">io_event</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#nr\">nr</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#ring_pages\">ring_pages</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#internal_pages\">internal_pages</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_pages\">nr_pages</a> &gt; <a class=\"id\" href=\"#AIO_RING_PAGES\">AIO_RING_PAGES</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#ring_pages\">ring_pages</a> = <a class=\"id\" href=\"#kcalloc\">kcalloc</a>(<a class=\"id\" href=\"#nr_pages\">nr_pages</a>, sizeof(struct <a class=\"id\" href=\"#page\">page</a> *), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#ring_pages\">ring_pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#mmap_size\">mmap_size</a> = <a class=\"id\" href=\"#nr_pages\">nr_pages</a> * <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"attempting mmap of %lu bytes\\n\", <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#mmap_size\">mmap_size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#mmap_base\">mmap_base</a> = <a class=\"id\" href=\"#do_mmap\">do_mmap</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, 0, <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#mmap_size\">mmap_size</a>, ", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#PROT_READ\">PROT_READ</a>|<a class=\"id\" href=\"#PROT_WRITE\">PROT_WRITE</a>, <a class=\"id\" href=\"#MAP_ANONYMOUS\">MAP_ANONYMOUS</a>|<a class=\"id\" href=\"#MAP_PRIVATE\">MAP_PRIVATE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>((void *)<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#mmap_base\">mmap_base</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#mmap_size\">mmap_size</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#aio_free_ring\">aio_free_ring</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"mmap address: 0x%08lx\\n\", <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#mmap_base\">mmap_base</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#nr_pages\">nr_pages</a> = <a class=\"id\" href=\"#get_user_pages\">get_user_pages</a>(<a class=\"id\" href=\"#current\">current</a>, <a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#mm\">mm</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#mmap_base\">mmap_base</a>, <a class=\"id\" href=\"#nr_pages\">nr_pages</a>, ", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>1, 0, <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#ring_pages\">ring_pages</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#nr_pages\">nr_pages</a> != <a class=\"id\" href=\"#nr_pages\">nr_pages</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#aio_free_ring\">aio_free_ring</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#user_id\">user_id</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#mmap_base\">mmap_base</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#nr_events\">nr_events</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* trusted copy */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ring\">ring</a> = <a class=\"id\" href=\"#kmap_atomic\">kmap_atomic</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#ring_pages\">ring_pages</a>[0], <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ring\">ring</a>-><a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#nr_events\">nr_events</a>;<span class=\"ts\"/><span class=\"comment\">/* user copy */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ring\">ring</a>-><a class=\"id\" href=\"#id\">id</a> = <a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#user_id\">user_id</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ring\">ring</a>-><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#ring\">ring</a>-><a class=\"id\" href=\"#tail\">tail</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ring\">ring</a>-><a class=\"id\" href=\"#magic\">magic</a> = <a class=\"id\" href=\"#AIO_RING_MAGIC\">AIO_RING_MAGIC</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ring\">ring</a>-><a class=\"id\" href=\"#compat_features\">compat_features</a> = <a class=\"id\" href=\"#AIO_RING_COMPAT_FEATURES\">AIO_RING_COMPAT_FEATURES</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ring\">ring</a>-><a class=\"id\" href=\"#incompat_features\">incompat_features</a> = <a class=\"id\" href=\"#AIO_RING_INCOMPAT_FEATURES\">AIO_RING_INCOMPAT_FEATURES</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ring\">ring</a>-><a class=\"id\" href=\"#header_length\">header_length</a> = sizeof(struct <a class=\"id\" href=\"#aio_ring\">aio_ring</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kunmap_atomic\">kunmap_atomic</a>(<a class=\"id\" href=\"#ring\">ring</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"", 
"<span class=\"comment\">/* aio_ring_event: returns a pointer to the event at the given index from</span>", 
"<span class=\"comment\"> * kmap_atomic(, km).  Release the pointer with put_aio_ring_event();</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#AIO_EVENTS_PER_PAGE\">AIO_EVENTS_PER_PAGE</a><span class=\"ts\"/>(<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> / sizeof(struct <a class=\"id\" href=\"#io_event\">io_event</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#AIO_EVENTS_FIRST_PAGE\">AIO_EVENTS_FIRST_PAGE</a><span class=\"ts\"/>((<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - sizeof(struct <a class=\"id\" href=\"#aio_ring\">aio_ring</a>)) / sizeof(struct <a class=\"id\" href=\"#io_event\">io_event</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#AIO_EVENTS_OFFSET\">AIO_EVENTS_OFFSET</a><span class=\"ts\"/>(<a class=\"id\" href=\"#AIO_EVENTS_PER_PAGE\">AIO_EVENTS_PER_PAGE</a> - <a class=\"id\" href=\"#AIO_EVENTS_FIRST_PAGE\">AIO_EVENTS_FIRST_PAGE</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#aio_ring_event\">aio_ring_event</a>(<a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#nr\">nr</a>, <a class=\"id\" href=\"#km\">km</a>) ({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#pos\">pos</a> = (<a class=\"id\" href=\"#nr\">nr</a>) + <a class=\"id\" href=\"#AIO_EVENTS_OFFSET\">AIO_EVENTS_OFFSET</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#io_event\">io_event</a> *<a class=\"id\" href=\"#__event\">__event</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__event\">__event</a> = <a class=\"id\" href=\"#kmap_atomic\">kmap_atomic</a>(<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#info\">info</a>)-><a class=\"id\" href=\"#ring_pages\">ring_pages</a>[<a class=\"id\" href=\"#pos\">pos</a> / <a class=\"id\" href=\"#AIO_EVENTS_PER_PAGE\">AIO_EVENTS_PER_PAGE</a>], <a class=\"id\" href=\"#km\">km</a>); \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__event\">__event</a> += <a class=\"id\" href=\"#pos\">pos</a> % <a class=\"id\" href=\"#AIO_EVENTS_PER_PAGE\">AIO_EVENTS_PER_PAGE</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__event\">__event</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#put_aio_ring_event\">put_aio_ring_event</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#km\">km</a>) do {<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#io_event\">io_event</a> *<a class=\"id\" href=\"#__event\">__event</a> = (<a class=\"id\" href=\"#event\">event</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(void)<a class=\"id\" href=\"#__event\">__event</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kunmap_atomic\">kunmap_atomic</a>((void *)((unsigned long)<a class=\"id\" href=\"#__event\">__event</a> &amp; <a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>), <a class=\"id\" href=\"#km\">km</a>); \\", 
"} while(0)", 
"", 
"static void <a class=\"id\" href=\"#ctx_rcu_free\">ctx_rcu_free</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kioctx\">kioctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#head\">head</a>, struct <a class=\"id\" href=\"#kioctx\">kioctx</a>, <a class=\"id\" href=\"#rcu_head\">rcu_head</a>);", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#nr_events\">nr_events</a> = <a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#max_reqs\">max_reqs</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#kioctx_cachep\">kioctx_cachep</a>, <a class=\"id\" href=\"#ctx\">ctx</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_events\">nr_events</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#aio_nr_lock\">aio_nr_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#aio_nr\">aio_nr</a> - <a class=\"id\" href=\"#nr_events\">nr_events</a> &gt; <a class=\"id\" href=\"#aio_nr\">aio_nr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#aio_nr\">aio_nr</a> -= <a class=\"id\" href=\"#nr_events\">nr_events</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#aio_nr_lock\">aio_nr_lock</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* __put_ioctx</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Called when the last user of an aio context has gone away,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and the struct needs to be freed.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__put_ioctx\">__put_ioctx</a>(struct <a class=\"id\" href=\"#kioctx\">kioctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#reqs_active\">reqs_active</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cancel_delayed_work\">cancel_delayed_work</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#wq\">wq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cancel_work_sync\">cancel_work_sync</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#wq\">wq</a>.<a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#aio_free_ring\">aio_free_ring</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mmdrop\">mmdrop</a>(<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"__put_ioctx: freeing %p\\n\", <a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call_rcu\">call_rcu</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#rcu_head\">rcu_head</a>, <a class=\"id\" href=\"#ctx_rcu_free\">ctx_rcu_free</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#get_ioctx\">get_ioctx</a>(<a class=\"id\" href=\"#kioctx\">kioctx</a>) do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;(<a class=\"id\" href=\"#kioctx\">kioctx</a>)-><a class=\"id\" href=\"#users\">users</a>) <= 0);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;(<a class=\"id\" href=\"#kioctx\">kioctx</a>)-><a class=\"id\" href=\"#users\">users</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#put_ioctx\">put_ioctx</a>(<a class=\"id\" href=\"#kioctx\">kioctx</a>) do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;(<a class=\"id\" href=\"#kioctx\">kioctx</a>)-><a class=\"id\" href=\"#users\">users</a>) <= 0);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;(<a class=\"id\" href=\"#kioctx\">kioctx</a>)-><a class=\"id\" href=\"#users\">users</a>))) <span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__put_ioctx\">__put_ioctx</a>(<a class=\"id\" href=\"#kioctx\">kioctx</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while (0)", 
"", 
"<span class=\"comment\">/* ioctx_alloc</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Allocates and initializes an ioctx.  Returns an ERR_PTR if it failed.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#kioctx\">kioctx</a> *<a class=\"id\" href=\"#ioctx_alloc\">ioctx_alloc</a>(unsigned <a class=\"id\" href=\"#nr_events\">nr_events</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kioctx\">kioctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#did_sync\">did_sync</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Prevent overflows */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#nr_events\">nr_events</a> &gt; (0x10000000U / sizeof(struct <a class=\"id\" href=\"#io_event\">io_event</a>))) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#nr_events\">nr_events</a> &gt; (0x10000000U / sizeof(struct <a class=\"id\" href=\"#kiocb\">kiocb</a>)))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"ENOMEM: nr_events too high\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EINVAL\">EINVAL</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if ((unsigned long)<a class=\"id\" href=\"#nr_events\">nr_events</a> &gt; <a class=\"id\" href=\"#aio_max_nr\">aio_max_nr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#kmem_cache_zalloc\">kmem_cache_zalloc</a>(<a class=\"id\" href=\"#kioctx_cachep\">kioctx_cachep</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ctx\">ctx</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#max_reqs\">max_reqs</a> = <a class=\"id\" href=\"#nr_events\">nr_events</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mm_count\">mm_count</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#users\">users</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#ctx_lock\">ctx_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#ring_info\">ring_info</a>.<a class=\"id\" href=\"#ring_lock\">ring_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_waitqueue_head\">init_waitqueue_head</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#wait\">wait</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#active_reqs\">active_reqs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#run_list\">run_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_DELAYED_WORK\">INIT_DELAYED_WORK</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#wq\">wq</a>, <a class=\"id\" href=\"#aio_kick_handler\">aio_kick_handler</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#aio_setup_ring\">aio_setup_ring</a>(<a class=\"id\" href=\"#ctx\">ctx</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_freectx\">out_freectx</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* limit the number of system wide aios */</span>", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(&amp;<a class=\"id\" href=\"#aio_nr_lock\">aio_nr_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#aio_nr\">aio_nr</a> + <a class=\"id\" href=\"#nr_events\">nr_events</a> &gt; <a class=\"id\" href=\"#aio_max_nr\">aio_max_nr</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#aio_nr\">aio_nr</a> + <a class=\"id\" href=\"#nr_events\">nr_events</a> &lt; <a class=\"id\" href=\"#aio_nr\">aio_nr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#max_reqs\">max_reqs</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#aio_nr\">aio_nr</a> += <a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#max_reqs\">max_reqs</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#aio_nr_lock\">aio_nr_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#max_reqs\">max_reqs</a> || <a class=\"id\" href=\"#did_sync\">did_sync</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* wait for rcu callbacks to have completed before giving up */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#synchronize_rcu\">synchronize_rcu</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#did_sync\">did_sync</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#max_reqs\">max_reqs</a> = <a class=\"id\" href=\"#nr_events\">nr_events</a>;", 
"<span class=\"ts\"/>} while (1);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#max_reqs\">max_reqs</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_cleanup\">out_cleanup</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* now link into global list. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#ioctx_lock\">ioctx_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_add_head_rcu\">hlist_add_head_rcu</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#ioctx_list\">ioctx_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#ioctx_lock\">ioctx_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"aio: allocated ioctx %p[%ld]: mm=%p mask=0x%x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#user_id\">user_id</a>, <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#ring_info\">ring_info</a>.<a class=\"id\" href=\"#nr\">nr</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ctx\">ctx</a>;", 
"", 
"<a class=\"id\" href=\"#out_cleanup\">out_cleanup</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__put_ioctx\">__put_ioctx</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>);", 
"", 
"<a class=\"id\" href=\"#out_freectx\">out_freectx</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mmdrop\">mmdrop</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#kioctx_cachep\">kioctx_cachep</a>, <a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"aio: error allocating ioctx %p\\n\", <a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ctx\">ctx</a>;", 
"}", 
"", 
"<span class=\"comment\">/* aio_cancel_all</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Cancels all outstanding aio requests on an aio context.  Used </span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>when the processes owning a context have all exited to encourage </span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the rapid destruction of the kioctx.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#aio_cancel_all\">aio_cancel_all</a>(struct <a class=\"id\" href=\"#kioctx\">kioctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a>)", 
"{", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#cancel\">cancel</a>)(struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *, struct <a class=\"id\" href=\"#io_event\">io_event</a> *);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#io_event\">io_event</a> <a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#ctx_lock\">ctx_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#dead\">dead</a> = 1;", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#active_reqs\">active_reqs</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#pos\">pos</a> = <a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#active_reqs\">active_reqs</a>.<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#iocb\">iocb</a> = <a class=\"id\" href=\"#list_kiocb\">list_kiocb</a>(<a class=\"id\" href=\"#pos\">pos</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_list\">ki_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cancel\">cancel</a> = <a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_cancel\">ki_cancel</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kiocbSetCancelled\">kiocbSetCancelled</a>(<a class=\"id\" href=\"#iocb\">iocb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cancel\">cancel</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_users\">ki_users</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#ctx_lock\">ctx_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cancel\">cancel</a>(<a class=\"id\" href=\"#iocb\">iocb</a>, &amp;<a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#ctx_lock\">ctx_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#ctx_lock\">ctx_lock</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#wait_for_all_aios\">wait_for_all_aios</a>(struct <a class=\"id\" href=\"#kioctx\">kioctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DECLARE_WAITQUEUE\">DECLARE_WAITQUEUE</a>(<a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#tsk\">tsk</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#ctx_lock\">ctx_lock</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#reqs_active\">reqs_active</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#add_wait_queue\">add_wait_queue</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#wait\">wait</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_task_state\">set_task_state</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#reqs_active\">reqs_active</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#ctx_lock\">ctx_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#io_schedule\">io_schedule</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_task_state\">set_task_state</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#ctx_lock\">ctx_lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_task_state\">__set_task_state</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#remove_wait_queue\">remove_wait_queue</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#wait\">wait</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#ctx_lock\">ctx_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/* wait_on_sync_kiocb:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Waits on the given sync kiocb to complete.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#wait_on_sync_kiocb\">wait_on_sync_kiocb</a>(struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#iocb\">iocb</a>)", 
"{", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_users\">ki_users</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_current_state\">set_current_state</a>(<a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_users\">ki_users</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#io_schedule\">io_schedule</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_user_data\">ki_user_data</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#wait_on_sync_kiocb\">wait_on_sync_kiocb</a>);", 
"", 
"<span class=\"comment\">/* exit_aio: called when the last user of mm goes away.  At this point, </span>", 
"<span class=\"comment\"> * there is no way for any new requests to be submited or any of the </span>", 
"<span class=\"comment\"> * io_* syscalls to be called on the context.  However, there may be </span>", 
"<span class=\"comment\"> * outstanding requests which hold references to the context; as they </span>", 
"<span class=\"comment\"> * go away, they will call put_ioctx and release any pinned memory</span>", 
"<span class=\"comment\"> * associated with the request (held via struct page * references).</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#exit_aio\">exit_aio</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kioctx\">kioctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a>;", 
"", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#hlist_empty\">hlist_empty</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#ioctx_list\">ioctx_list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#hlist_entry\">hlist_entry</a>(<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#ioctx_list\">ioctx_list</a>.<a class=\"id\" href=\"#first\">first</a>, struct <a class=\"id\" href=\"#kioctx\">kioctx</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_del_rcu\">hlist_del_rcu</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#aio_cancel_all\">aio_cancel_all</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_for_all_aios\">wait_for_all_aios</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Ensure we don't leave the ctx on the aio_wq</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cancel_work_sync\">cancel_work_sync</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#wq\">wq</a>.<a class=\"id\" href=\"#work\">work</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (1 != <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#users\">users</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"exit_aio:ioctx still alive: %d %d %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#users\">users</a>), <a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#dead\">dead</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#reqs_active\">reqs_active</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_ioctx\">put_ioctx</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* aio_get_req</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Allocate a slot for an aio request.  Increments the users count</span>", 
"<span class=\"comment\"> * of the kioctx so that the kioctx stays around until all requests are</span>", 
"<span class=\"comment\"> * complete.  Returns NULL if no requests are free.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns with kiocb-&gt;users set to 2.  The io submit code path holds</span>", 
"<span class=\"comment\"> * an extra reference while submitting the i/o.</span>", 
"<span class=\"comment\"> * This prevents races between the aio code path referencing the</span>", 
"<span class=\"comment\"> * req (after submitting it) and aio_complete() freeing the req.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#__aio_get_req\">__aio_get_req</a>(struct <a class=\"id\" href=\"#kioctx\">kioctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#req\">req</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#aio_ring\">aio_ring</a> *<a class=\"id\" href=\"#ring\">ring</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#okay\">okay</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a> = <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#kiocb_cachep\">kiocb_cachep</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#req\">req</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_flags\">ki_flags</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_users\">ki_users</a> = 2;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_key\">ki_key</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_ctx\">ki_ctx</a> = <a class=\"id\" href=\"#ctx\">ctx</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_cancel\">ki_cancel</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_retry\">ki_retry</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_dtor\">ki_dtor</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_iovec\">ki_iovec</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_run_list\">ki_run_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_eventfd\">ki_eventfd</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check if the completion queue has enough free space to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * accept an event from this io.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#ctx_lock\">ctx_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ring\">ring</a> = <a class=\"id\" href=\"#kmap_atomic\">kmap_atomic</a>(<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#ring_info\">ring_info</a>.<a class=\"id\" href=\"#ring_pages\">ring_pages</a>[0], <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#reqs_active\">reqs_active</a> &lt; <a class=\"id\" href=\"#aio_ring_avail\">aio_ring_avail</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#ring_info\">ring_info</a>, <a class=\"id\" href=\"#ring\">ring</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_list\">ki_list</a>, &amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#active_reqs\">active_reqs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#reqs_active\">reqs_active</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#okay\">okay</a> = 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kunmap_atomic\">kunmap_atomic</a>(<a class=\"id\" href=\"#ring\">ring</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#ctx_lock\">ctx_lock</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#okay\">okay</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#kiocb_cachep\">kiocb_cachep</a>, <a class=\"id\" href=\"#req\">req</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#req\">req</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#aio_get_req\">aio_get_req</a>(struct <a class=\"id\" href=\"#kioctx\">kioctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#req\">req</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Handle a potential starvation case -- should be exceedingly rare as </span>", 
"<span class=\"comment\"><span class=\"ts\"/> * requests will be stuck on fput_head only if the aio_fput_routine is </span>", 
"<span class=\"comment\"><span class=\"ts\"/> * delayed and the requests were the last user of the struct file.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a> = <a class=\"id\" href=\"#__aio_get_req\">__aio_get_req</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#NULL\">NULL</a> == <a class=\"id\" href=\"#req\">req</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#aio_fput_routine\">aio_fput_routine</a>(<a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a> = <a class=\"id\" href=\"#__aio_get_req\">__aio_get_req</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#req\">req</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#really_put_req\">really_put_req</a>(struct <a class=\"id\" href=\"#kioctx\">kioctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a>, struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#req\">req</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#assert_spin_locked\">assert_spin_locked</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#ctx_lock\">ctx_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_eventfd\">ki_eventfd</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#eventfd_ctx_put\">eventfd_ctx_put</a>(<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_eventfd\">ki_eventfd</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_dtor\">ki_dtor</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_dtor\">ki_dtor</a>(<a class=\"id\" href=\"#req\">req</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_iovec\">ki_iovec</a> != &amp;<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_inline_vec\">ki_inline_vec</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_iovec\">ki_iovec</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#kiocb_cachep\">kiocb_cachep</a>, <a class=\"id\" href=\"#req\">req</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#reqs_active\">reqs_active</a>--;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#reqs_active\">reqs_active</a> && <a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#dead\">dead</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up\">wake_up</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#wait\">wait</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#aio_fput_routine\">aio_fput_routine</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#fput_lock\">fput_lock</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#fput_head\">fput_head</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#req\">req</a> = <a class=\"id\" href=\"#list_kiocb\">list_kiocb</a>(<a class=\"id\" href=\"#fput_head\">fput_head</a>.<a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#kioctx\">kioctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_ctx\">ki_ctx</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_list\">ki_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#fput_lock\">fput_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Complete the fput(s) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_filp\">ki_filp</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fput\">fput</a>(<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_filp\">ki_filp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Link the iocb into the context's free list */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#ctx_lock\">ctx_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#really_put_req\">really_put_req</a>(<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#req\">req</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#ctx_lock\">ctx_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_ioctx\">put_ioctx</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#fput_lock\">fput_lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#fput_lock\">fput_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/* __aio_put_req</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns true if this put was the last user of the request.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__aio_put_req\">__aio_put_req</a>(struct <a class=\"id\" href=\"#kioctx\">kioctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a>, struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#req\">req</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"aio_put(%p): f_count=%ld\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>, <a class=\"id\" href=\"#atomic_long_read\">atomic_long_read</a>(&amp;<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_filp\">ki_filp</a>-><a class=\"id\" href=\"#f_count\">f_count</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#assert_spin_locked\">assert_spin_locked</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#ctx_lock\">ctx_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_users\">ki_users</a>--;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_users\">ki_users</a> &lt; 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_users\">ki_users</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_list\">ki_list</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* remove from active_reqs */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_cancel\">ki_cancel</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_retry\">ki_retry</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Try to optimize the aio and eventfd file* puts, by avoiding to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * schedule work in case it is not final fput() time. In normal cases,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we would not be holding the last reference to the file*, so</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this function will be executed w/out any aio kthread wakeup.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#fput_atomic\">fput_atomic</a>(<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_filp\">ki_filp</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_ioctx\">get_ioctx</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#fput_lock\">fput_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_list\">ki_list</a>, &amp;<a class=\"id\" href=\"#fput_head\">fput_head</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#fput_lock\">fput_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#queue_work\">queue_work</a>(<a class=\"id\" href=\"#aio_wq\">aio_wq</a>, &amp;<a class=\"id\" href=\"#fput_work\">fput_work</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_filp\">ki_filp</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#really_put_req\">really_put_req</a>(<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#req\">req</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/* aio_put_req</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns true if this put was the last user of the kiocb,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>false if the request is still in use.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#aio_put_req\">aio_put_req</a>(struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#req\">req</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kioctx\">kioctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_ctx\">ki_ctx</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#ctx_lock\">ctx_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__aio_put_req\">__aio_put_req</a>(<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#req\">req</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#ctx_lock\">ctx_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#aio_put_req\">aio_put_req</a>);", 
"", 
"static struct <a class=\"id\" href=\"#kioctx\">kioctx</a> *<a class=\"id\" href=\"#lookup_ioctx\">lookup_ioctx</a>(unsigned long <a class=\"id\" href=\"#ctx_id\">ctx_id</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kioctx\">kioctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a>, *<a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#n\">n</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry_rcu\">hlist_for_each_entry_rcu</a>(<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#n\">n</a>, &amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#ioctx_list\">ioctx_list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#user_id\">user_id</a> == <a class=\"id\" href=\"#ctx_id\">ctx_id</a> && !<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#dead\">dead</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_ioctx\">get_ioctx</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ctx\">ctx</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Queue up a kiocb to be retried. Assumes that the kiocb</span>", 
"<span class=\"comment\"> * has already been marked as kicked, and places it on</span>", 
"<span class=\"comment\"> * the retry run list for the corresponding ioctx, if it</span>", 
"<span class=\"comment\"> * isn't already queued. Returns 1 if it actually queued</span>", 
"<span class=\"comment\"> * the kiocb (to tell the caller to activate the work</span>", 
"<span class=\"comment\"> * queue to process it), or 0, if it found that it was</span>", 
"<span class=\"comment\"> * already queued.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#__queue_kicked_iocb\">__queue_kicked_iocb</a>(struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#iocb\">iocb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kioctx\">kioctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_ctx\">ki_ctx</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#assert_spin_locked\">assert_spin_locked</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#ctx_lock\">ctx_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_run_list\">ki_run_list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_run_list\">ki_run_list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#run_list\">run_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* aio_run_iocb</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This is the core aio execution routine. It is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>invoked both for initial i/o submission and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>subsequent retries via the aio_kick_handler.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Expects to be invoked with iocb-&gt;ki_ctx-&gt;lock</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>already held. The lock is released and reacquired</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>as needed during processing.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Calls the iocb retry method (already setup for the</span>", 
"<span class=\"comment\"> * iocb on initial submission) for operation specific</span>", 
"<span class=\"comment\"> * handling, but takes care of most of common retry</span>", 
"<span class=\"comment\"> * execution details for a given iocb. The retry method</span>", 
"<span class=\"comment\"> * needs to be non-blocking as far as possible, to avoid</span>", 
"<span class=\"comment\"> * holding up other iocbs waiting to be serviced by the</span>", 
"<span class=\"comment\"> * retry kernel thread.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The trickier parts in this code have to do with</span>", 
"<span class=\"comment\"> * ensuring that only one retry instance is in progress</span>", 
"<span class=\"comment\"> * for a given iocb at any time. Providing that guarantee</span>", 
"<span class=\"comment\"> * simplifies the coding of individual aio operations as</span>", 
"<span class=\"comment\"> * it avoids various potential races.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#aio_run_iocb\">aio_run_iocb</a>(struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#iocb\">iocb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kioctx\">kioctx</a><span class=\"ts\"/>*<a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_ctx\">ki_ctx</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> (*<a class=\"id\" href=\"#retry\">retry</a>)(struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#retry\">retry</a> = <a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_retry\">ki_retry</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"aio_run_iocb: iocb->ki_retry = NULL\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We don't want the next retry iteration for this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * operation to start until this one has returned and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * updated the iocb state. However, wait_queue functions</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * can trigger a kick_iocb from interrupt context in the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * meantime, indicating that data is available for the next</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * iteration. We want to remember that and enable the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * next retry iteration _after_ we are through with</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this one.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * So, in order to be able to register a \"kick\", but</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * prevent it from being queued now, we clear the kick</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * flag, but make the kick code *think* that the iocb is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * still on the run list until we are actually done.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * When we are done with this iteration, we check if</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the iocb was kicked in the meantime and if so, queue</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it up afresh.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kiocbClearKicked\">kiocbClearKicked</a>(<a class=\"id\" href=\"#iocb\">iocb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This is so that aio_complete knows it doesn't need to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pull the iocb off the run list (We can't just call</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * INIT_LIST_HEAD because we don't want a kick_iocb to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * queue this on the run list yet)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_run_list\">ki_run_list</a>.<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_run_list\">ki_run_list</a>.<a class=\"id\" href=\"#prev\">prev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#ctx_lock\">ctx_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Quit retrying if the i/o has been cancelled */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kiocbIsCancelled\">kiocbIsCancelled</a>(<a class=\"id\" href=\"#iocb\">iocb</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINTR\">EINTR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#aio_complete\">aio_complete</a>(<a class=\"id\" href=\"#iocb\">iocb</a>, <a class=\"id\" href=\"#ret\">ret</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* must not access the iocb after this */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now we are all set to call the retry method in async</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * context.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#retry\">retry</a>(<a class=\"id\" href=\"#iocb\">iocb</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> != -<a class=\"id\" href=\"#EIOCBRETRY\">EIOCBRETRY</a> && <a class=\"id\" href=\"#ret\">ret</a> != -<a class=\"id\" href=\"#EIOCBQUEUED\">EIOCBQUEUED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * There's no easy way to restart the syscall since other AIO's</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * may be already running. Just fail this IO with EINTR.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a> == -<a class=\"id\" href=\"#ERESTARTSYS\">ERESTARTSYS</a> || <a class=\"id\" href=\"#ret\">ret</a> == -<a class=\"id\" href=\"#ERESTARTNOINTR\">ERESTARTNOINTR</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#ret\">ret</a> == -<a class=\"id\" href=\"#ERESTARTNOHAND\">ERESTARTNOHAND</a> || <a class=\"id\" href=\"#ret\">ret</a> == -<a class=\"id\" href=\"#ERESTART_RESTARTBLOCK\">ERESTART_RESTARTBLOCK</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINTR\">EINTR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#aio_complete\">aio_complete</a>(<a class=\"id\" href=\"#iocb\">iocb</a>, <a class=\"id\" href=\"#ret\">ret</a>, 0);", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#ctx_lock\">ctx_lock</a>);", 
"", 
"<span class=\"ts\"/>if (-<a class=\"id\" href=\"#EIOCBRETRY\">EIOCBRETRY</a> == <a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * OK, now that we are done with this iteration</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and know that there is more left to go,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * this is where we let go so that a subsequent</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * \"kick\" can start the next iteration</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* will make __queue_kicked_iocb succeed from here on */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_run_list\">ki_run_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we must queue the next iteration ourselves, if it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * has already been kicked */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kiocbIsKicked\">kiocbIsKicked</a>(<a class=\"id\" href=\"#iocb\">iocb</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__queue_kicked_iocb\">__queue_kicked_iocb</a>(<a class=\"id\" href=\"#iocb\">iocb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * __queue_kicked_iocb will always return 1 here, because</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * iocb-&gt;ki_run_list is empty at this point so it should</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * be safe to unconditionally queue the context into the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * work queue.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#aio_queue_work\">aio_queue_work</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * __aio_run_iocbs:</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>Process all pending retries queued on the ioctx</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>run list.</span>", 
"<span class=\"comment\"> * Assumes it is operating within the aio issuer's mm</span>", 
"<span class=\"comment\"> * context.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__aio_run_iocbs\">__aio_run_iocbs</a>(struct <a class=\"id\" href=\"#kioctx\">kioctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#iocb\">iocb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#run_list\">run_list</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#assert_spin_locked\">assert_spin_locked</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#ctx_lock\">ctx_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_replace_init\">list_replace_init</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#run_list\">run_list</a>, &amp;<a class=\"id\" href=\"#run_list\">run_list</a>);", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#run_list\">run_list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iocb\">iocb</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#run_list\">run_list</a>.<a class=\"id\" href=\"#next\">next</a>, struct <a class=\"id\" href=\"#kiocb\">kiocb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ki_run_list\">ki_run_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_run_list\">ki_run_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Hold an extra reference while retrying i/o.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_users\">ki_users</a>++;       <span class=\"comment\">/* grab extra reference */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#aio_run_iocb\">aio_run_iocb</a>(<a class=\"id\" href=\"#iocb\">iocb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__aio_put_req\">__aio_put_req</a>(<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#iocb\">iocb</a>);", 
" <span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#run_list\">run_list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#aio_queue_work\">aio_queue_work</a>(struct <a class=\"id\" href=\"#kioctx\">kioctx</a> * <a class=\"id\" href=\"#ctx\">ctx</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#timeout\">timeout</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if someone is waiting, get the work started right</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * away, otherwise, use a longer delay</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#waitqueue_active\">waitqueue_active</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#wait\">wait</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timeout\">timeout</a> = 1;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timeout\">timeout</a> = <a class=\"id\" href=\"#HZ\">HZ</a>/10;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#queue_delayed_work\">queue_delayed_work</a>(<a class=\"id\" href=\"#aio_wq\">aio_wq</a>, &amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#wq\">wq</a>, <a class=\"id\" href=\"#timeout\">timeout</a>);", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * aio_run_iocbs:</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>Process all pending retries queued on the ioctx</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>run list.</span>", 
"<span class=\"comment\"> * Assumes it is operating within the aio issuer's mm</span>", 
"<span class=\"comment\"> * context.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#aio_run_iocbs\">aio_run_iocbs</a>(struct <a class=\"id\" href=\"#kioctx\">kioctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#requeue\">requeue</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#ctx_lock\">ctx_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#requeue\">requeue</a> = <a class=\"id\" href=\"#__aio_run_iocbs\">__aio_run_iocbs</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#ctx_lock\">ctx_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#requeue\">requeue</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#aio_queue_work\">aio_queue_work</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * just like aio_run_iocbs, but keeps running them until</span>", 
"<span class=\"comment\"> * the list stays empty</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#aio_run_all_iocbs\">aio_run_all_iocbs</a>(struct <a class=\"id\" href=\"#kioctx\">kioctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#ctx_lock\">ctx_lock</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#__aio_run_iocbs\">__aio_run_iocbs</a>(<a class=\"id\" href=\"#ctx\">ctx</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#ctx_lock\">ctx_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * aio_kick_handler:</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>Work queue handler triggered to process pending</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>retries on an ioctx. Takes on the aio issuer's</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>mm context before running the iocbs, so that</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>copy_xxx_user operates on the issuer's address</span>", 
"<span class=\"comment\"> *      space.</span>", 
"<span class=\"comment\"> * Run on aiod's context.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#aio_kick_handler\">aio_kick_handler</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kioctx\">kioctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#work\">work</a>, struct <a class=\"id\" href=\"#kioctx\">kioctx</a>, <a class=\"id\" href=\"#wq\">wq</a>.<a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm_segment_t\">mm_segment_t</a> <a class=\"id\" href=\"#oldfs\">oldfs</a> = <a class=\"id\" href=\"#get_fs\">get_fs</a>();", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#requeue\">requeue</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_fs\">set_fs</a>(<a class=\"id\" href=\"#USER_DS\">USER_DS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#use_mm\">use_mm</a>(<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#ctx_lock\">ctx_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#requeue\">requeue</a> =<a class=\"id\" href=\"#__aio_run_iocbs\">__aio_run_iocbs</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#ctx_lock\">ctx_lock</a>);", 
" <span class=\"ts\"/><a class=\"id\" href=\"#unuse_mm\">unuse_mm</a>(<a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_fs\">set_fs</a>(<a class=\"id\" href=\"#oldfs\">oldfs</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we're in a worker thread already, don't use queue_delayed_work,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#requeue\">requeue</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#queue_delayed_work\">queue_delayed_work</a>(<a class=\"id\" href=\"#aio_wq\">aio_wq</a>, &amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#wq\">wq</a>, 0);", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called by kick_iocb to queue the kiocb for retry</span>", 
"<span class=\"comment\"> * and if required activate the aio work queue to process</span>", 
"<span class=\"comment\"> * it</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#try_queue_kicked_iocb\">try_queue_kicked_iocb</a>(struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#iocb\">iocb</a>)", 
"{", 
" <span class=\"ts\"/>struct <a class=\"id\" href=\"#kioctx\">kioctx</a><span class=\"ts\"/>*<a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_ctx\">ki_ctx</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#run\">run</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#ctx_lock\">ctx_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* set this inside the lock so that we can't race with aio_run_iocb()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * testing it and putting the iocb on the run list under the lock */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kiocbTryKick\">kiocbTryKick</a>(<a class=\"id\" href=\"#iocb\">iocb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#run\">run</a> = <a class=\"id\" href=\"#__queue_kicked_iocb\">__queue_kicked_iocb</a>(<a class=\"id\" href=\"#iocb\">iocb</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#ctx_lock\">ctx_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#run\">run</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#aio_queue_work\">aio_queue_work</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * kick_iocb:</span>", 
"<span class=\"comment\"> *      Called typically from a wait queue callback context</span>", 
"<span class=\"comment\"> *      to trigger a retry of the iocb.</span>", 
"<span class=\"comment\"> *      The retry is usually executed by aio workqueue</span>", 
"<span class=\"comment\"> *      threads (See aio_kick_handler).</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#kick_iocb\">kick_iocb</a>(struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#iocb\">iocb</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* sync iocbs are easy: they can only ever be executing from a </span>", 
"<span class=\"comment\"><span class=\"ts\"/> * single context. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_sync_kiocb\">is_sync_kiocb</a>(<a class=\"id\" href=\"#iocb\">iocb</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kiocbSetKicked\">kiocbSetKicked</a>(<a class=\"id\" href=\"#iocb\">iocb</a>);", 
"<span class=\"ts\"/>        <a class=\"id\" href=\"#wake_up_process\">wake_up_process</a>(<a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_obj\">ki_obj</a>.<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#try_queue_kicked_iocb\">try_queue_kicked_iocb</a>(<a class=\"id\" href=\"#iocb\">iocb</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#kick_iocb\">kick_iocb</a>);", 
"", 
"<span class=\"comment\">/* aio_complete</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Called when the io request on the given iocb is complete.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns true if this is the last user of the request.  The </span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>only other user of the request can be the cancellation code.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#aio_complete\">aio_complete</a>(struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#iocb\">iocb</a>, long <a class=\"id\" href=\"#res\">res</a>, long <a class=\"id\" href=\"#res2\">res2</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kioctx\">kioctx</a><span class=\"ts\"/>*<a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_ctx\">ki_ctx</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#aio_ring_info\">aio_ring_info</a><span class=\"ts\"/>*<a class=\"id\" href=\"#info\">info</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#aio_ring\">aio_ring</a><span class=\"ts\"/>*<a class=\"id\" href=\"#ring\">ring</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#io_event\">io_event</a><span class=\"ts\"/>*<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#tail\">tail</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Special case handling for sync iocbs:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  - events go directly into the iocb for fast handling</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  - the sync task with the iocb in its stack holds the single iocb</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    ref, no other paths have a way to get another ref</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  - the sync task helpfully left a reference to itself in the iocb</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_sync_kiocb\">is_sync_kiocb</a>(<a class=\"id\" href=\"#iocb\">iocb</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_users\">ki_users</a> != 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_user_data\">ki_user_data</a> = <a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_users\">ki_users</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_process\">wake_up_process</a>(<a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_obj\">ki_obj</a>.<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a> = &amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#ring_info\">ring_info</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* add a completion event to the ring buffer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * must be done holding ctx-&gt;ctx_lock to prevent</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * other code from messing with the tail</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pointer since we might be called from irq</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * context.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#ctx_lock\">ctx_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_run_list\">ki_run_list</a>.<a class=\"id\" href=\"#prev\">prev</a> && !<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_run_list\">ki_run_list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_run_list\">ki_run_list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cancelled requests don't get events, userland was given one</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * when the event got cancelled.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kiocbIsCancelled\">kiocbIsCancelled</a>(<a class=\"id\" href=\"#iocb\">iocb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#put_rq\">put_rq</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ring\">ring</a> = <a class=\"id\" href=\"#kmap_atomic\">kmap_atomic</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#ring_pages\">ring_pages</a>[0], <a class=\"id\" href=\"#KM_IRQ1\">KM_IRQ1</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tail\">tail</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#tail\">tail</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#aio_ring_event\">aio_ring_event</a>(<a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#tail\">tail</a>, <a class=\"id\" href=\"#KM_IRQ0\">KM_IRQ0</a>);", 
"<span class=\"ts\"/>if (++<a class=\"id\" href=\"#tail\">tail</a> >= <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#nr\">nr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tail\">tail</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#obj\">obj</a> = (<a class=\"id\" href=\"#u64\">u64</a>)(unsigned long)<a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_obj\">ki_obj</a>.<a class=\"id\" href=\"#user\">user</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_user_data\">ki_user_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#res2\">res2</a> = <a class=\"id\" href=\"#res2\">res2</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"aio_complete: %p[%lu]: %p: %p %Lx %lx %lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#tail\">tail</a>, <a class=\"id\" href=\"#iocb\">iocb</a>, <a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_obj\">ki_obj</a>.<a class=\"id\" href=\"#user\">user</a>, <a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_user_data\">ki_user_data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#res2\">res2</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* after flagging the request as done, we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * must never even look at it again</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();<span class=\"ts\"/><span class=\"comment\">/* make event visible before updating tail */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#tail\">tail</a> = <a class=\"id\" href=\"#tail\">tail</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ring\">ring</a>-><a class=\"id\" href=\"#tail\">tail</a> = <a class=\"id\" href=\"#tail\">tail</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_aio_ring_event\">put_aio_ring_event</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#KM_IRQ0\">KM_IRQ0</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kunmap_atomic\">kunmap_atomic</a>(<a class=\"id\" href=\"#ring\">ring</a>, <a class=\"id\" href=\"#KM_IRQ1\">KM_IRQ1</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"added to ring %p at [%lu]\\n\", <a class=\"id\" href=\"#iocb\">iocb</a>, <a class=\"id\" href=\"#tail\">tail</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check if the user asked us to deliver the result through an</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * eventfd. The eventfd_signal() function is safe to be called</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * from IRQ context.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_eventfd\">ki_eventfd</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#eventfd_signal\">eventfd_signal</a>(<a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_eventfd\">ki_eventfd</a>, 1);", 
"", 
"<a class=\"id\" href=\"#put_rq\">put_rq</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* everything turned out well, dispose of the aiocb. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__aio_put_req\">__aio_put_req</a>(<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#iocb\">iocb</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We have to order our ring_info tail store above and test</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of the wait list below outside the wait lock.  This is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * like in wake_up_bit() where clearing a bit has to be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ordered with the unlocked test.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#waitqueue_active\">waitqueue_active</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#wait\">wait</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up\">wake_up</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#wait\">wait</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#ctx_lock\">ctx_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#aio_complete\">aio_complete</a>);", 
"", 
"<span class=\"comment\">/* aio_read_evt</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Pull an event off of the ioctx's event ring.  Returns the number of </span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>events fetched (0 or 1 ;-)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>FIXME: make this use cmpxchg.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>TODO: make the ringbuffer user mmap()able (requires FIXME).</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#aio_read_evt\">aio_read_evt</a>(struct <a class=\"id\" href=\"#kioctx\">kioctx</a> *<a class=\"id\" href=\"#ioctx\">ioctx</a>, struct <a class=\"id\" href=\"#io_event\">io_event</a> *<a class=\"id\" href=\"#ent\">ent</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#aio_ring_info\">aio_ring_info</a> *<a class=\"id\" href=\"#info\">info</a> = &amp;<a class=\"id\" href=\"#ioctx\">ioctx</a>-><a class=\"id\" href=\"#ring_info\">ring_info</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#aio_ring\">aio_ring</a> *<a class=\"id\" href=\"#ring\">ring</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ring\">ring</a> = <a class=\"id\" href=\"#kmap_atomic\">kmap_atomic</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#ring_pages\">ring_pages</a>[0], <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"in aio_read_evt h%lu t%lu m%lu\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/> (unsigned long)<a class=\"id\" href=\"#ring\">ring</a>-><a class=\"id\" href=\"#head\">head</a>, (unsigned long)<a class=\"id\" href=\"#ring\">ring</a>-><a class=\"id\" href=\"#tail\">tail</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> (unsigned long)<a class=\"id\" href=\"#ring\">ring</a>-><a class=\"id\" href=\"#nr\">nr</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ring\">ring</a>-><a class=\"id\" href=\"#head\">head</a> == <a class=\"id\" href=\"#ring\">ring</a>-><a class=\"id\" href=\"#tail\">tail</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#ring_lock\">ring_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#ring\">ring</a>-><a class=\"id\" href=\"#head\">head</a> % <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#nr\">nr</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#head\">head</a> != <a class=\"id\" href=\"#ring\">ring</a>-><a class=\"id\" href=\"#tail\">tail</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#io_event\">io_event</a> *<a class=\"id\" href=\"#evp\">evp</a> = <a class=\"id\" href=\"#aio_ring_event\">aio_ring_event</a>(<a class=\"id\" href=\"#info\">info</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#KM_USER1\">KM_USER1</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ent\">ent</a> = *<a class=\"id\" href=\"#evp\">evp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = (<a class=\"id\" href=\"#head\">head</a> + 1) % <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#nr\">nr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>(); <span class=\"comment\">/* finish reading the event before updatng the head */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ring\">ring</a>-><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_aio_ring_event\">put_aio_ring_event</a>(<a class=\"id\" href=\"#evp\">evp</a>, <a class=\"id\" href=\"#KM_USER1\">KM_USER1</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#ring_lock\">ring_lock</a>);", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kunmap_atomic\">kunmap_atomic</a>(<a class=\"id\" href=\"#ring\">ring</a>, <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"leaving aio_read_evt: %d  h%lu t%lu\\n\", <a class=\"id\" href=\"#ret\">ret</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> (unsigned long)<a class=\"id\" href=\"#ring\">ring</a>-><a class=\"id\" href=\"#head\">head</a>, (unsigned long)<a class=\"id\" href=\"#ring\">ring</a>-><a class=\"id\" href=\"#tail\">tail</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#aio_timeout\">aio_timeout</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timer_list\">timer_list</a><span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timed_out\">timed_out</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a>;", 
"};", 
"", 
"static void <a class=\"id\" href=\"#timeout_func\">timeout_func</a>(unsigned long <a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#aio_timeout\">aio_timeout</a> *<a class=\"id\" href=\"#to\">to</a> = (struct <a class=\"id\" href=\"#aio_timeout\">aio_timeout</a> *)<a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#timed_out\">timed_out</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up_process\">wake_up_process</a>(<a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#p\">p</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#init_timeout\">init_timeout</a>(struct <a class=\"id\" href=\"#aio_timeout\">aio_timeout</a> *<a class=\"id\" href=\"#to\">to</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_timer_on_stack\">setup_timer_on_stack</a>(&amp;<a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#timer\">timer</a>, <a class=\"id\" href=\"#timeout_func\">timeout_func</a>, (unsigned long) <a class=\"id\" href=\"#to\">to</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#timed_out\">timed_out</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_timeout\">set_timeout</a>(long <a class=\"id\" href=\"#start_jiffies\">start_jiffies</a>, struct <a class=\"id\" href=\"#aio_timeout\">aio_timeout</a> *<a class=\"id\" href=\"#to\">to</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const struct <a class=\"id\" href=\"#timespec\">timespec</a> *<a class=\"id\" href=\"#ts\">ts</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#expires\">expires</a> = <a class=\"id\" href=\"#start_jiffies\">start_jiffies</a> + <a class=\"id\" href=\"#timespec_to_jiffies\">timespec_to_jiffies</a>(<a class=\"id\" href=\"#ts\">ts</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#time_after\">time_after</a>(<a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#timer\">timer</a>.<a class=\"id\" href=\"#expires\">expires</a>, <a class=\"id\" href=\"#jiffies\">jiffies</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_timer\">add_timer</a>(&amp;<a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#timed_out\">timed_out</a> = 1;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#clear_timeout\">clear_timeout</a>(struct <a class=\"id\" href=\"#aio_timeout\">aio_timeout</a> *<a class=\"id\" href=\"#to\">to</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#del_singleshot_timer_sync\">del_singleshot_timer_sync</a>(&amp;<a class=\"id\" href=\"#to\">to</a>-><a class=\"id\" href=\"#timer\">timer</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#read_events\">read_events</a>(struct <a class=\"id\" href=\"#kioctx\">kioctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>long <a class=\"id\" href=\"#min_nr\">min_nr</a>, long <a class=\"id\" href=\"#nr\">nr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#io_event\">io_event</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#event\">event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#timeout\">timeout</a>)", 
"{", 
"<span class=\"ts\"/>long<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_jiffies\">start_jiffies</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a><span class=\"ts\"/>*<a class=\"id\" href=\"#tsk\">tsk</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DECLARE_WAITQUEUE\">DECLARE_WAITQUEUE</a>(<a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#io_event\">io_event</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ent\">ent</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#aio_timeout\">aio_timeout</a><span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retry\">retry</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* needed to zero any padding within an entry (there shouldn't be </span>", 
"<span class=\"comment\"><span class=\"ts\"/> * any, but C is fun!</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#ent\">ent</a>, 0, sizeof(<a class=\"id\" href=\"#ent\">ent</a>));", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr\">nr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#aio_read_evt\">aio_read_evt</a>(<a class=\"id\" href=\"#ctx\">ctx</a>, &amp;<a class=\"id\" href=\"#ent\">ent</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a> <= 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"read event: %Lx %Lx %Lx %Lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ent\">ent</a>.<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#ent\">ent</a>.<a class=\"id\" href=\"#obj\">obj</a>, <a class=\"id\" href=\"#ent\">ent</a>.<a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#ent\">ent</a>.<a class=\"id\" href=\"#res2\">res2</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Could we split the check in two? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#event\">event</a>, &amp;<a class=\"id\" href=\"#ent\">ent</a>, sizeof(<a class=\"id\" href=\"#ent\">ent</a>)))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"aio: lost an event due to EFAULT.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Good, event copied to userland, update counts. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> ++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> ++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#min_nr\">min_nr</a> <= <a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* End fast path */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* racey check, but it gets redone */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#retry\">retry</a> && <a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#run_list\">run_list</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retry\">retry</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#aio_run_all_iocbs\">aio_run_all_iocbs</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_timeout\">init_timeout</a>(&amp;<a class=\"id\" href=\"#to\">to</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#timeout\">timeout</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a><span class=\"ts\"/><a class=\"id\" href=\"#ts\">ts</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(&amp;<a class=\"id\" href=\"#ts\">ts</a>, <a class=\"id\" href=\"#timeout\">timeout</a>, sizeof(<a class=\"id\" href=\"#ts\">ts</a>))))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_timeout\">set_timeout</a>(<a class=\"id\" href=\"#start_jiffies\">start_jiffies</a>, &amp;<a class=\"id\" href=\"#to\">to</a>, &amp;<a class=\"id\" href=\"#ts\">ts</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr\">nr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_wait_queue_exclusive\">add_wait_queue_exclusive</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#wait\">wait</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_task_state\">set_task_state</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#aio_read_evt\">aio_read_evt</a>(<a class=\"id\" href=\"#ctx\">ctx</a>, &amp;<a class=\"id\" href=\"#ent\">ent</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#min_nr\">min_nr</a> <= <a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#dead\">dead</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#to\">to</a>.<a class=\"id\" href=\"#timed_out\">timed_out</a>)<span class=\"ts\"/><span class=\"comment\">/* Only check after read evt */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Try to only show up in io wait if there are ops</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> *  in flight */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#reqs_active\">reqs_active</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#io_schedule\">io_schedule</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#signal_pending\">signal_pending</a>(<a class=\"id\" href=\"#tsk\">tsk</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINTR\">EINTR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*ret = aio_read_evt(ctx, &amp;ent);*/</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>} while (1) ;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_task_state\">set_task_state</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remove_wait_queue\">remove_wait_queue</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#wait\">wait</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a> <= 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#event\">event</a>, &amp;<a class=\"id\" href=\"#ent\">ent</a>, sizeof(<a class=\"id\" href=\"#ent\">ent</a>)))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"aio: lost an event due to EFAULT.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Good, event copied to userland, update counts. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> ++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> ++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#timeout\">timeout</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_timeout\">clear_timeout</a>(&amp;<a class=\"id\" href=\"#to\">to</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#destroy_timer_on_stack\">destroy_timer_on_stack</a>(&amp;<a class=\"id\" href=\"#to\">to</a>.<a class=\"id\" href=\"#timer\">timer</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a> ? <a class=\"id\" href=\"#i\">i</a> : <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Take an ioctx and remove it from the list of ioctx's.  Protects </span>", 
"<span class=\"comment\"> * against races with itself via -&gt;dead.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#io_destroy\">io_destroy</a>(struct <a class=\"id\" href=\"#kioctx\">kioctx</a> *<a class=\"id\" href=\"#ioctx\">ioctx</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#was_dead\">was_dead</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* delete the entry from the list is someone else hasn't already */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#ioctx_lock\">ioctx_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#was_dead\">was_dead</a> = <a class=\"id\" href=\"#ioctx\">ioctx</a>-><a class=\"id\" href=\"#dead\">dead</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ioctx\">ioctx</a>-><a class=\"id\" href=\"#dead\">dead</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_del_rcu\">hlist_del_rcu</a>(&amp;<a class=\"id\" href=\"#ioctx\">ioctx</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#ioctx_lock\">ioctx_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"aio_release(%p)\\n\", <a class=\"id\" href=\"#ioctx\">ioctx</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#was_dead\">was_dead</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_ioctx\">put_ioctx</a>(<a class=\"id\" href=\"#ioctx\">ioctx</a>);<span class=\"ts\"/><span class=\"comment\">/* twice for the list */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#aio_cancel_all\">aio_cancel_all</a>(<a class=\"id\" href=\"#ioctx\">ioctx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_for_all_aios\">wait_for_all_aios</a>(<a class=\"id\" href=\"#ioctx\">ioctx</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Wake up any waiters.  The setting of ctx-&gt;dead must be seen</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * by other CPUs at this point.  Right now, we rely on the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * locking done by the above calls to ensure this consistency.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up\">wake_up</a>(&amp;<a class=\"id\" href=\"#ioctx\">ioctx</a>-><a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_ioctx\">put_ioctx</a>(<a class=\"id\" href=\"#ioctx\">ioctx</a>);<span class=\"ts\"/><span class=\"comment\">/* once for the lookup */</span>", 
"}", 
"", 
"<span class=\"comment\">/* sys_io_setup:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Create an aio_context capable of receiving at least nr_events.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ctxp must not point to an aio_context that already exists, and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>must be initialized to 0 prior to the call.  On successful</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>creation of the aio_context, *ctxp is filled in with the resulting </span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>handle.  May fail with -EINVAL if *ctxp is not initialized,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>if the specified nr_events exceeds internal limits.  May fail </span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>with -EAGAIN if the specified nr_events exceeds the user's limit </span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>of available events.  May fail with -ENOMEM if insufficient kernel</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>resources are available.  May fail with -EFAULT if an invalid</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>pointer is passed for ctxp.  Will fail with -ENOSYS if not</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>implemented.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE2\">SYSCALL_DEFINE2</a>(<a class=\"id\" href=\"#io_setup\">io_setup</a>, unsigned, <a class=\"id\" href=\"#nr_events\">nr_events</a>, <a class=\"id\" href=\"#aio_context_t\">aio_context_t</a> <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#ctxp\">ctxp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kioctx\">kioctx</a> *<a class=\"id\" href=\"#ioctx\">ioctx</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ctx\">ctx</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#ctxp\">ctxp</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ctx\">ctx</a> || <a class=\"id\" href=\"#nr_events\">nr_events</a> == 0)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"EINVAL: io_setup: ctx %lu nr_events %u\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>         <a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#nr_events\">nr_events</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ioctx\">ioctx</a> = <a class=\"id\" href=\"#ioctx_alloc\">ioctx_alloc</a>(<a class=\"id\" href=\"#nr_events\">nr_events</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#ioctx\">ioctx</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#ioctx\">ioctx</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#put_user\">put_user</a>(<a class=\"id\" href=\"#ioctx\">ioctx</a>-><a class=\"id\" href=\"#user_id\">user_id</a>, <a class=\"id\" href=\"#ctxp\">ctxp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_ioctx\">get_ioctx</a>(<a class=\"id\" href=\"#ioctx\">ioctx</a>); <span class=\"comment\">/* io_destroy() expects us to hold a ref */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#io_destroy\">io_destroy</a>(<a class=\"id\" href=\"#ioctx\">ioctx</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/* sys_io_destroy:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Destroy the aio_context specified.  May cancel any outstanding </span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>AIOs and block on completion.  Will fail with -ENOSYS if not</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>implemented.  May fail with -EINVAL if the context pointed to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is invalid.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE1\">SYSCALL_DEFINE1</a>(<a class=\"id\" href=\"#io_destroy\">io_destroy</a>, <a class=\"id\" href=\"#aio_context_t\">aio_context_t</a>, <a class=\"id\" href=\"#ctx\">ctx</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kioctx\">kioctx</a> *<a class=\"id\" href=\"#ioctx\">ioctx</a> = <a class=\"id\" href=\"#lookup_ioctx\">lookup_ioctx</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#NULL\">NULL</a> != <a class=\"id\" href=\"#ioctx\">ioctx</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#io_destroy\">io_destroy</a>(<a class=\"id\" href=\"#ioctx\">ioctx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"EINVAL: io_destroy: invalid context id\\n\");", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#aio_advance_iovec\">aio_advance_iovec</a>(struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#iocb\">iocb</a>, <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#ret\">ret</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#iovec\">iovec</a> *<a class=\"id\" href=\"#iov\">iov</a> = &amp;<a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_iovec\">ki_iovec</a>[<a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_cur_seg\">ki_cur_seg</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ret\">ret</a> <= 0);", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_cur_seg\">ki_cur_seg</a> &lt; <a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_nr_segs\">ki_nr_segs</a> && <a class=\"id\" href=\"#ret\">ret</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#this\">this</a> = <a class=\"id\" href=\"#min\">min</a>((<a class=\"id\" href=\"#ssize_t\">ssize_t</a>)<a class=\"id\" href=\"#iov\">iov</a>-><a class=\"id\" href=\"#iov_len\">iov_len</a>, <a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iov\">iov</a>-><a class=\"id\" href=\"#iov_base\">iov_base</a> += <a class=\"id\" href=\"#this\">this</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iov\">iov</a>-><a class=\"id\" href=\"#iov_len\">iov_len</a> -= <a class=\"id\" href=\"#this\">this</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_left\">ki_left</a> -= <a class=\"id\" href=\"#this\">this</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> -= <a class=\"id\" href=\"#this\">this</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#iov\">iov</a>-><a class=\"id\" href=\"#iov_len\">iov_len</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_cur_seg\">ki_cur_seg</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iov\">iov</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* the caller should not have done more io than what fit in</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the remaining iovecs */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ret\">ret</a> &gt; 0 && <a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_left\">ki_left</a> == 0);", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#aio_rw_vect_retry\">aio_rw_vect_retry</a>(struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#iocb\">iocb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_filp\">ki_filp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> (*<a class=\"id\" href=\"#rw_op\">rw_op</a>)(struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *, const struct <a class=\"id\" href=\"#iovec\">iovec</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long, <a class=\"id\" href=\"#loff_t\">loff_t</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>unsigned short <a class=\"id\" href=\"#opcode\">opcode</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_opcode\">ki_opcode</a> == <a class=\"id\" href=\"#IOCB_CMD_PREADV\">IOCB_CMD_PREADV</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_opcode\">ki_opcode</a> == <a class=\"id\" href=\"#IOCB_CMD_PREAD\">IOCB_CMD_PREAD</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rw_op\">rw_op</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#aio_read\">aio_read</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#opcode\">opcode</a> = <a class=\"id\" href=\"#IOCB_CMD_PREADV\">IOCB_CMD_PREADV</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rw_op\">rw_op</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#aio_write\">aio_write</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#opcode\">opcode</a> = <a class=\"id\" href=\"#IOCB_CMD_PWRITEV\">IOCB_CMD_PWRITEV</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* This matches the pread()/pwrite() logic */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_pos\">ki_pos</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#rw_op\">rw_op</a>(<a class=\"id\" href=\"#iocb\">iocb</a>, &amp;<a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_iovec\">ki_iovec</a>[<a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_cur_seg\">ki_cur_seg</a>],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_nr_segs\">ki_nr_segs</a> - <a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_cur_seg\">ki_cur_seg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_pos\">ki_pos</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#aio_advance_iovec\">aio_advance_iovec</a>(<a class=\"id\" href=\"#iocb\">iocb</a>, <a class=\"id\" href=\"#ret\">ret</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* retry all partial writes.  retry partial reads as long as its a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * regular file. */</span>", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#ret\">ret</a> &gt; 0 && <a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_left\">ki_left</a> &gt; 0 &&", 
"<span class=\"ts\"/><span class=\"ts\"/> (<a class=\"id\" href=\"#opcode\">opcode</a> == <a class=\"id\" href=\"#IOCB_CMD_PWRITEV\">IOCB_CMD_PWRITEV</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>  (!<a class=\"id\" href=\"#S_ISFIFO\">S_ISFIFO</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>) && !<a class=\"id\" href=\"#S_ISSOCK\">S_ISSOCK</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>))));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* This means we must have transferred all that we could */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* No need to retry anymore */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#ret\">ret</a> == 0) || (<a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_left\">ki_left</a> == 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_nbytes\">ki_nbytes</a> - <a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_left\">ki_left</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If we managed to write some out we return that, rather than</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the eventual error. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#opcode\">opcode</a> == <a class=\"id\" href=\"#IOCB_CMD_PWRITEV\">IOCB_CMD_PWRITEV</a>", 
"<span class=\"ts\"/>    && <a class=\"id\" href=\"#ret\">ret</a> &lt; 0 && <a class=\"id\" href=\"#ret\">ret</a> != -<a class=\"id\" href=\"#EIOCBQUEUED\">EIOCBQUEUED</a> && <a class=\"id\" href=\"#ret\">ret</a> != -<a class=\"id\" href=\"#EIOCBRETRY\">EIOCBRETRY</a>", 
"<span class=\"ts\"/>    && <a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_nbytes\">ki_nbytes</a> - <a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_left\">ki_left</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_nbytes\">ki_nbytes</a> - <a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_left\">ki_left</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#aio_fdsync\">aio_fdsync</a>(struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#iocb\">iocb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_filp\">ki_filp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#aio_fsync\">aio_fsync</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#aio_fsync\">aio_fsync</a>(<a class=\"id\" href=\"#iocb\">iocb</a>, 1);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#aio_fsync\">aio_fsync</a>(struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#iocb\">iocb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#ki_filp\">ki_filp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#aio_fsync\">aio_fsync</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#aio_fsync\">aio_fsync</a>(<a class=\"id\" href=\"#iocb\">iocb</a>, 0);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#aio_setup_vectored_rw\">aio_setup_vectored_rw</a>(int <a class=\"id\" href=\"#type\">type</a>, struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#kiocb\">kiocb</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#compat\">compat</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_COMPAT\">CONFIG_COMPAT</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#compat\">compat</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#compat_rw_copy_check_uvector\">compat_rw_copy_check_uvector</a>(<a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(struct <a class=\"id\" href=\"#compat_iovec\">compat_iovec</a> <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#kiocb\">kiocb</a>-><a class=\"id\" href=\"#ki_buf\">ki_buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kiocb\">kiocb</a>-><a class=\"id\" href=\"#ki_nbytes\">ki_nbytes</a>, 1, &amp;<a class=\"id\" href=\"#kiocb\">kiocb</a>-><a class=\"id\" href=\"#ki_inline_vec\">ki_inline_vec</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#kiocb\">kiocb</a>-><a class=\"id\" href=\"#ki_iovec\">ki_iovec</a>);", 
"<span class=\"ts\"/>else", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#rw_copy_check_uvector\">rw_copy_check_uvector</a>(<a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(struct <a class=\"id\" href=\"#iovec\">iovec</a> <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#kiocb\">kiocb</a>-><a class=\"id\" href=\"#ki_buf\">ki_buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kiocb\">kiocb</a>-><a class=\"id\" href=\"#ki_nbytes\">ki_nbytes</a>, 1, &amp;<a class=\"id\" href=\"#kiocb\">kiocb</a>-><a class=\"id\" href=\"#ki_inline_vec\">ki_inline_vec</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#kiocb\">kiocb</a>-><a class=\"id\" href=\"#ki_iovec\">ki_iovec</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kiocb\">kiocb</a>-><a class=\"id\" href=\"#ki_nr_segs\">ki_nr_segs</a> = <a class=\"id\" href=\"#kiocb\">kiocb</a>-><a class=\"id\" href=\"#ki_nbytes\">ki_nbytes</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kiocb\">kiocb</a>-><a class=\"id\" href=\"#ki_cur_seg\">ki_cur_seg</a> = 0;", 
"<span class=\"ts\"/><span class=\"comment\">/* ki_nbytes/left now reflect bytes instead of segs */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kiocb\">kiocb</a>-><a class=\"id\" href=\"#ki_nbytes\">ki_nbytes</a> = <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kiocb\">kiocb</a>-><a class=\"id\" href=\"#ki_left\">ki_left</a> = <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#aio_setup_single_vector\">aio_setup_single_vector</a>(struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#kiocb\">kiocb</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kiocb\">kiocb</a>-><a class=\"id\" href=\"#ki_iovec\">ki_iovec</a> = &amp;<a class=\"id\" href=\"#kiocb\">kiocb</a>-><a class=\"id\" href=\"#ki_inline_vec\">ki_inline_vec</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kiocb\">kiocb</a>-><a class=\"id\" href=\"#ki_iovec\">ki_iovec</a>-><a class=\"id\" href=\"#iov_base\">iov_base</a> = <a class=\"id\" href=\"#kiocb\">kiocb</a>-><a class=\"id\" href=\"#ki_buf\">ki_buf</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kiocb\">kiocb</a>-><a class=\"id\" href=\"#ki_iovec\">ki_iovec</a>-><a class=\"id\" href=\"#iov_len\">iov_len</a> = <a class=\"id\" href=\"#kiocb\">kiocb</a>-><a class=\"id\" href=\"#ki_left\">ki_left</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kiocb\">kiocb</a>-><a class=\"id\" href=\"#ki_nr_segs\">ki_nr_segs</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kiocb\">kiocb</a>-><a class=\"id\" href=\"#ki_cur_seg\">ki_cur_seg</a> = 0;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * aio_setup_iocb:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Performs the initial checks and aio retry method</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>setup for the kiocb at the time of io submission.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#aio_setup_iocb\">aio_setup_iocb</a>(struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#kiocb\">kiocb</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#compat\">compat</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#kiocb\">kiocb</a>-><a class=\"id\" href=\"#ki_filp\">ki_filp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#kiocb\">kiocb</a>-><a class=\"id\" href=\"#ki_opcode\">ki_opcode</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IOCB_CMD_PREAD\">IOCB_CMD_PREAD</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EBADF\">EBADF</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_READ\">FMODE_READ</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#access_ok\">access_ok</a>(<a class=\"id\" href=\"#VERIFY_WRITE\">VERIFY_WRITE</a>, <a class=\"id\" href=\"#kiocb\">kiocb</a>-><a class=\"id\" href=\"#ki_buf\">ki_buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kiocb\">kiocb</a>-><a class=\"id\" href=\"#ki_left\">ki_left</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#security_file_permission\">security_file_permission</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#MAY_READ\">MAY_READ</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#aio_setup_single_vector\">aio_setup_single_vector</a>(<a class=\"id\" href=\"#kiocb\">kiocb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#aio_read\">aio_read</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kiocb\">kiocb</a>-><a class=\"id\" href=\"#ki_retry\">ki_retry</a> = <a class=\"id\" href=\"#aio_rw_vect_retry\">aio_rw_vect_retry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IOCB_CMD_PWRITE\">IOCB_CMD_PWRITE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EBADF\">EBADF</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_WRITE\">FMODE_WRITE</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#access_ok\">access_ok</a>(<a class=\"id\" href=\"#VERIFY_READ\">VERIFY_READ</a>, <a class=\"id\" href=\"#kiocb\">kiocb</a>-><a class=\"id\" href=\"#ki_buf\">ki_buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kiocb\">kiocb</a>-><a class=\"id\" href=\"#ki_left\">ki_left</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#security_file_permission\">security_file_permission</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#aio_setup_single_vector\">aio_setup_single_vector</a>(<a class=\"id\" href=\"#kiocb\">kiocb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#aio_write\">aio_write</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kiocb\">kiocb</a>-><a class=\"id\" href=\"#ki_retry\">ki_retry</a> = <a class=\"id\" href=\"#aio_rw_vect_retry\">aio_rw_vect_retry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IOCB_CMD_PREADV\">IOCB_CMD_PREADV</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EBADF\">EBADF</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_READ\">FMODE_READ</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#security_file_permission\">security_file_permission</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#MAY_READ\">MAY_READ</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#aio_setup_vectored_rw\">aio_setup_vectored_rw</a>(<a class=\"id\" href=\"#READ\">READ</a>, <a class=\"id\" href=\"#kiocb\">kiocb</a>, <a class=\"id\" href=\"#compat\">compat</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#aio_read\">aio_read</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kiocb\">kiocb</a>-><a class=\"id\" href=\"#ki_retry\">ki_retry</a> = <a class=\"id\" href=\"#aio_rw_vect_retry\">aio_rw_vect_retry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IOCB_CMD_PWRITEV\">IOCB_CMD_PWRITEV</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EBADF\">EBADF</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mode\">f_mode</a> &amp; <a class=\"id\" href=\"#FMODE_WRITE\">FMODE_WRITE</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#security_file_permission\">security_file_permission</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#aio_setup_vectored_rw\">aio_setup_vectored_rw</a>(<a class=\"id\" href=\"#WRITE\">WRITE</a>, <a class=\"id\" href=\"#kiocb\">kiocb</a>, <a class=\"id\" href=\"#compat\">compat</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#aio_write\">aio_write</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kiocb\">kiocb</a>-><a class=\"id\" href=\"#ki_retry\">ki_retry</a> = <a class=\"id\" href=\"#aio_rw_vect_retry\">aio_rw_vect_retry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IOCB_CMD_FDSYNC\">IOCB_CMD_FDSYNC</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#aio_fsync\">aio_fsync</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kiocb\">kiocb</a>-><a class=\"id\" href=\"#ki_retry\">ki_retry</a> = <a class=\"id\" href=\"#aio_fdsync\">aio_fdsync</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#IOCB_CMD_FSYNC\">IOCB_CMD_FSYNC</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#aio_fsync\">aio_fsync</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kiocb\">kiocb</a>-><a class=\"id\" href=\"#ki_retry\">ki_retry</a> = <a class=\"id\" href=\"#aio_fsync\">aio_fsync</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"EINVAL: io_submit: no operation provided\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kiocb\">kiocb</a>-><a class=\"id\" href=\"#ki_retry\">ki_retry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#aio_batch_add\">aio_batch_add</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#batch_hash\">batch_hash</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#aio_batch_entry\">aio_batch_entry</a> *<a class=\"id\" href=\"#abe\">abe</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#pos\">pos</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#bucket\">bucket</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bucket\">bucket</a> = <a class=\"id\" href=\"#hash_ptr\">hash_ptr</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#AIO_BATCH_HASH_BITS\">AIO_BATCH_HASH_BITS</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry\">hlist_for_each_entry</a>(<a class=\"id\" href=\"#abe\">abe</a>, <a class=\"id\" href=\"#pos\">pos</a>, &amp;<a class=\"id\" href=\"#batch_hash\">batch_hash</a>[<a class=\"id\" href=\"#bucket\">bucket</a>], <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#abe\">abe</a>-><a class=\"id\" href=\"#mapping\">mapping</a> == <a class=\"id\" href=\"#mapping\">mapping</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#abe\">abe</a> = <a class=\"id\" href=\"#mempool_alloc\">mempool_alloc</a>(<a class=\"id\" href=\"#abe_pool\">abe_pool</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#igrab\">igrab</a>(<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#abe\">abe</a>-><a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#mapping\">mapping</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_add_head\">hlist_add_head</a>(&amp;<a class=\"id\" href=\"#abe\">abe</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#batch_hash\">batch_hash</a>[<a class=\"id\" href=\"#bucket\">bucket</a>]);", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#aio_batch_free\">aio_batch_free</a>(struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#batch_hash\">batch_hash</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#aio_batch_entry\">aio_batch_entry</a> *<a class=\"id\" href=\"#abe\">abe</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#pos\">pos</a>, *<a class=\"id\" href=\"#n\">n</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#AIO_BATCH_HASH_SIZE\">AIO_BATCH_HASH_SIZE</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry_safe\">hlist_for_each_entry_safe</a>(<a class=\"id\" href=\"#abe\">abe</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#n\">n</a>, &amp;<a class=\"id\" href=\"#batch_hash\">batch_hash</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_run_address_space\">blk_run_address_space</a>(<a class=\"id\" href=\"#abe\">abe</a>-><a class=\"id\" href=\"#mapping\">mapping</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iput\">iput</a>(<a class=\"id\" href=\"#abe\">abe</a>-><a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_del\">hlist_del</a>(&amp;<a class=\"id\" href=\"#abe\">abe</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mempool_free\">mempool_free</a>(<a class=\"id\" href=\"#abe\">abe</a>, <a class=\"id\" href=\"#abe_pool\">abe_pool</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#io_submit_one\">io_submit_one</a>(struct <a class=\"id\" href=\"#kioctx\">kioctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a>, struct <a class=\"id\" href=\"#iocb\">iocb</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#user_iocb\">user_iocb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#iocb\">iocb</a> *<a class=\"id\" href=\"#iocb\">iocb</a>, struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#batch_hash\">batch_hash</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#compat\">compat</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kiocb\">kiocb</a> *<a class=\"id\" href=\"#req\">req</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* enforce forwards compatibility on users */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#aio_reserved1\">aio_reserved1</a> || <a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#aio_reserved2\">aio_reserved2</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"EINVAL: io_submit: reserve field set\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* prevent overflows */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#aio_buf\">aio_buf</a> != (unsigned long)<a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#aio_buf\">aio_buf</a>) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#aio_nbytes\">aio_nbytes</a> != (<a class=\"id\" href=\"#size_t\">size_t</a>)<a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#aio_nbytes\">aio_nbytes</a>) ||", 
"<span class=\"ts\"/>    ((<a class=\"id\" href=\"#ssize_t\">ssize_t</a>)<a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#aio_nbytes\">aio_nbytes</a> &lt; 0)", 
"<span class=\"ts\"/>   )) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"EINVAL: io_submit: overflow check\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#file\">file</a> = <a class=\"id\" href=\"#fget\">fget</a>(<a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#aio_fildes\">aio_fildes</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#file\">file</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBADF\">EBADF</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a> = <a class=\"id\" href=\"#aio_get_req\">aio_get_req</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* returns with 2 references to req */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#req\">req</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fput\">fput</a>(<a class=\"id\" href=\"#file\">file</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_filp\">ki_filp</a> = <a class=\"id\" href=\"#file\">file</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#aio_flags\">aio_flags</a> &amp; <a class=\"id\" href=\"#IOCB_FLAG_RESFD\">IOCB_FLAG_RESFD</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If the IOCB_FLAG_RESFD flag of aio_flags is set, get an</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * instance of the file* now. The file descriptor must be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * an eventfd() fd, and will be signaled for each completed</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * event using the eventfd_signal() function.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_eventfd\">ki_eventfd</a> = <a class=\"id\" href=\"#eventfd_ctx_fdget\">eventfd_ctx_fdget</a>((int) <a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#aio_resfd\">aio_resfd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_eventfd\">ki_eventfd</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_eventfd\">ki_eventfd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_eventfd\">ki_eventfd</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_put_req\">out_put_req</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#put_user\">put_user</a>(<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_key\">ki_key</a>, &amp;<a class=\"id\" href=\"#user_iocb\">user_iocb</a>-><a class=\"id\" href=\"#aio_key\">aio_key</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dprintk\">dprintk</a>(\"EFAULT: aio_key\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_put_req\">out_put_req</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_obj\">ki_obj</a>.<a class=\"id\" href=\"#user\">user</a> = <a class=\"id\" href=\"#user_iocb\">user_iocb</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_user_data\">ki_user_data</a> = <a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#aio_data\">aio_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_pos\">ki_pos</a> = <a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#aio_offset\">aio_offset</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_buf\">ki_buf</a> = (char <a class=\"id\" href=\"#__user\">__user</a> *)(unsigned long)<a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#aio_buf\">aio_buf</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_left\">ki_left</a> = <a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_nbytes\">ki_nbytes</a> = <a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#aio_nbytes\">aio_nbytes</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_opcode\">ki_opcode</a> = <a class=\"id\" href=\"#iocb\">iocb</a>-><a class=\"id\" href=\"#aio_lio_opcode\">aio_lio_opcode</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#aio_setup_iocb\">aio_setup_iocb</a>(<a class=\"id\" href=\"#req\">req</a>, <a class=\"id\" href=\"#compat\">compat</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_put_req\">out_put_req</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#ctx_lock\">ctx_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#aio_run_iocb\">aio_run_iocb</a>(<a class=\"id\" href=\"#req\">req</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#run_list\">run_list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* drain the run list */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#__aio_run_iocbs\">__aio_run_iocbs</a>(<a class=\"id\" href=\"#ctx\">ctx</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#ctx_lock\">ctx_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_opcode\">ki_opcode</a> == <a class=\"id\" href=\"#IOCB_CMD_PREAD\">IOCB_CMD_PREAD</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_opcode\">ki_opcode</a> == <a class=\"id\" href=\"#IOCB_CMD_PREADV\">IOCB_CMD_PREADV</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_opcode\">ki_opcode</a> == <a class=\"id\" href=\"#IOCB_CMD_PWRITE\">IOCB_CMD_PWRITE</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#ki_opcode\">ki_opcode</a> == <a class=\"id\" href=\"#IOCB_CMD_PWRITEV\">IOCB_CMD_PWRITEV</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#aio_batch_add\">aio_batch_add</a>(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_mapping\">f_mapping</a>, <a class=\"id\" href=\"#batch_hash\">batch_hash</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#aio_put_req\">aio_put_req</a>(<a class=\"id\" href=\"#req\">req</a>);<span class=\"ts\"/><span class=\"comment\">/* drop extra ref to req */</span>", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#out_put_req\">out_put_req</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#aio_put_req\">aio_put_req</a>(<a class=\"id\" href=\"#req\">req</a>);<span class=\"ts\"/><span class=\"comment\">/* drop extra ref to req */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#aio_put_req\">aio_put_req</a>(<a class=\"id\" href=\"#req\">req</a>);<span class=\"ts\"/><span class=\"comment\">/* drop i/o ref to req */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"long <a class=\"id\" href=\"#do_io_submit\">do_io_submit</a>(<a class=\"id\" href=\"#aio_context_t\">aio_context_t</a> <a class=\"id\" href=\"#ctx_id\">ctx_id</a>, long <a class=\"id\" href=\"#nr\">nr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#iocb\">iocb</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#iocbpp\">iocbpp</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#compat\">compat</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kioctx\">kioctx</a> *<a class=\"id\" href=\"#ctx\">ctx</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> <a class=\"id\" href=\"#batch_hash\">batch_hash</a>[<a class=\"id\" href=\"#AIO_BATCH_HASH_SIZE\">AIO_BATCH_HASH_SIZE</a>] = { { 0, }, };", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#nr\">nr</a> &lt; 0))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#nr\">nr</a> &gt; <a class=\"id\" href=\"#LONG_MAX\">LONG_MAX</a>/sizeof(*<a class=\"id\" href=\"#iocbpp\">iocbpp</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#LONG_MAX\">LONG_MAX</a>/sizeof(*<a class=\"id\" href=\"#iocbpp\">iocbpp</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#access_ok\">access_ok</a>(<a class=\"id\" href=\"#VERIFY_READ\">VERIFY_READ</a>, <a class=\"id\" href=\"#iocbpp\">iocbpp</a>, (<a class=\"id\" href=\"#nr\">nr</a>*sizeof(*<a class=\"id\" href=\"#iocbpp\">iocbpp</a>)))))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
];
xr_frag_insert('l/1c/06fa914e548df38d97d271b1a06d429f7aec90.xr', __xr_tmp);
