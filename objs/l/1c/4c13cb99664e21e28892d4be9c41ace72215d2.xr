var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_BYTEORDER_GENERIC_H\">_LINUX_BYTEORDER_GENERIC_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_BYTEORDER_GENERIC_H\">_LINUX_BYTEORDER_GENERIC_H</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * linux/byteorder_generic.h</span>", 
"<span class=\"comment\"> * Generic Byte-reordering support</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The \"... p\" macros, like le64_to_cpup, can be used with pointers</span>", 
"<span class=\"comment\"> * to unaligned data, but there will be a performance penalty on </span>", 
"<span class=\"comment\"> * some architectures.  Use get_unaligned for unaligned data.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Francois-Rene Rideau &lt;fare@tunes.org&gt; 19970707</span>", 
"<span class=\"comment\"> *    gathered all the good ideas from all asm-foo/byteorder.h into one file,</span>", 
"<span class=\"comment\"> *    cleaned them up.</span>", 
"<span class=\"comment\"> *    I hope it is compliant with non-GCC compilers.</span>", 
"<span class=\"comment\"> *    I decided to put __BYTEORDER_HAS_U64__ in byteorder.h,</span>", 
"<span class=\"comment\"> *    because I wasn't sure it would be ok to put it in types.h</span>", 
"<span class=\"comment\"> *    Upgraded it to 2.1.43</span>", 
"<span class=\"comment\"> * Francois-Rene Rideau &lt;fare@tunes.org&gt; 19971012</span>", 
"<span class=\"comment\"> *    Upgraded it to 2.1.57</span>", 
"<span class=\"comment\"> *    to please Linus T., replaced huge #ifdef's between little/big endian</span>", 
"<span class=\"comment\"> *    by nestedly #include'd files.</span>", 
"<span class=\"comment\"> * Francois-Rene Rideau &lt;fare@tunes.org&gt; 19971205</span>", 
"<span class=\"comment\"> *    Made it to 2.1.71; now a facelift:</span>", 
"<span class=\"comment\"> *    Put files under include/linux/byteorder/</span>", 
"<span class=\"comment\"> *    Split swab from generic support.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * TODO:</span>", 
"<span class=\"comment\"> *   = Regular kernel maintainers could also replace all these manual</span>", 
"<span class=\"comment\"> *    byteswap macros that remain, disseminated among drivers,</span>", 
"<span class=\"comment\"> *    after some grep or the sources...</span>", 
"<span class=\"comment\"> *   = Linus might want to rename all these macros and files to fit his taste,</span>", 
"<span class=\"comment\"> *    to fit his personal naming scheme.</span>", 
"<span class=\"comment\"> *   = it seems that a few drivers would also appreciate</span>", 
"<span class=\"comment\"> *    nybble swapping support...</span>", 
"<span class=\"comment\"> *   = every architecture could add their byteswap macro in asm/byteorder.h</span>", 
"<span class=\"comment\"> *    see how some architectures already do (i386, alpha, ppc, etc)</span>", 
"<span class=\"comment\"> *   = cpu_to_beXX and beXX_to_cpu might some day need to be well</span>", 
"<span class=\"comment\"> *    distinguished throughout the kernel. This is not the case currently,</span>", 
"<span class=\"comment\"> *    since little endian, big endian, and pdp endian machines needn't it.</span>", 
"<span class=\"comment\"> *    But this might be the case for, say, a port of Linux to 20/21 bit</span>", 
"<span class=\"comment\"> *    architectures (and F21 Linux addict around?).</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The following macros are to be defined by &lt;asm/byteorder.h&gt;:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Conversion of long and short int between network and host format</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ntohl(__u32 x)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ntohs(__u16 x)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>htonl(__u32 x)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>htons(__u16 x)</span>", 
"<span class=\"comment\"> * It seems that some programs (which? where? or perhaps a standard? POSIX?)</span>", 
"<span class=\"comment\"> * might like the above to be functions, not macros (why?).</span>", 
"<span class=\"comment\"> * if that's true, then detect them, and take measures.</span>", 
"<span class=\"comment\"> * Anyway, the measure is: define only ___ntohl as a macro instead,</span>", 
"<span class=\"comment\"> * and in a separate file, have</span>", 
"<span class=\"comment\"> * unsigned long inline ntohl(x){return ___ntohl(x);}</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The same for constant arguments</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>__constant_ntohl(__u32 x)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>__constant_ntohs(__u16 x)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>__constant_htonl(__u32 x)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>__constant_htons(__u16 x)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Conversion of XX-bit integers (16- 32- or 64-)</span>", 
"<span class=\"comment\"> * between native CPU format and little/big endian format</span>", 
"<span class=\"comment\"> * 64-bit stuff only defined for proper architectures</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>cpu_to_[bl]eXX(__uXX x)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>[bl]eXX_to_cpu(__uXX x)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The same, but takes a pointer to the value to convert</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>cpu_to_[bl]eXXp(__uXX x)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>[bl]eXX_to_cpup(__uXX x)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The same, but change in situ</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>cpu_to_[bl]eXXs(__uXX x)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>[bl]eXX_to_cpus(__uXX x)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * See asm-foo/byteorder.h for examples of how to provide</span>", 
"<span class=\"comment\"> * architecture-optimized versions</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpu_to_le64\">cpu_to_le64</a> <a class=\"id\" href=\"#__cpu_to_le64\">__cpu_to_le64</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#le64_to_cpu\">le64_to_cpu</a> <a class=\"id\" href=\"#__le64_to_cpu\">__le64_to_cpu</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpu_to_le32\">cpu_to_le32</a> <a class=\"id\" href=\"#__cpu_to_le32\">__cpu_to_le32</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a> <a class=\"id\" href=\"#__le32_to_cpu\">__le32_to_cpu</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpu_to_le16\">cpu_to_le16</a> <a class=\"id\" href=\"#__cpu_to_le16\">__cpu_to_le16</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a> <a class=\"id\" href=\"#__le16_to_cpu\">__le16_to_cpu</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpu_to_be64\">cpu_to_be64</a> <a class=\"id\" href=\"#__cpu_to_be64\">__cpu_to_be64</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#be64_to_cpu\">be64_to_cpu</a> <a class=\"id\" href=\"#__be64_to_cpu\">__be64_to_cpu</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpu_to_be32\">cpu_to_be32</a> <a class=\"id\" href=\"#__cpu_to_be32\">__cpu_to_be32</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#be32_to_cpu\">be32_to_cpu</a> <a class=\"id\" href=\"#__be32_to_cpu\">__be32_to_cpu</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpu_to_be16\">cpu_to_be16</a> <a class=\"id\" href=\"#__cpu_to_be16\">__cpu_to_be16</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#be16_to_cpu\">be16_to_cpu</a> <a class=\"id\" href=\"#__be16_to_cpu\">__be16_to_cpu</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpu_to_le64p\">cpu_to_le64p</a> <a class=\"id\" href=\"#__cpu_to_le64p\">__cpu_to_le64p</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#le64_to_cpup\">le64_to_cpup</a> <a class=\"id\" href=\"#__le64_to_cpup\">__le64_to_cpup</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpu_to_le32p\">cpu_to_le32p</a> <a class=\"id\" href=\"#__cpu_to_le32p\">__cpu_to_le32p</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#le32_to_cpup\">le32_to_cpup</a> <a class=\"id\" href=\"#__le32_to_cpup\">__le32_to_cpup</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpu_to_le16p\">cpu_to_le16p</a> <a class=\"id\" href=\"#__cpu_to_le16p\">__cpu_to_le16p</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#le16_to_cpup\">le16_to_cpup</a> <a class=\"id\" href=\"#__le16_to_cpup\">__le16_to_cpup</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpu_to_be64p\">cpu_to_be64p</a> <a class=\"id\" href=\"#__cpu_to_be64p\">__cpu_to_be64p</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#be64_to_cpup\">be64_to_cpup</a> <a class=\"id\" href=\"#__be64_to_cpup\">__be64_to_cpup</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpu_to_be32p\">cpu_to_be32p</a> <a class=\"id\" href=\"#__cpu_to_be32p\">__cpu_to_be32p</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#be32_to_cpup\">be32_to_cpup</a> <a class=\"id\" href=\"#__be32_to_cpup\">__be32_to_cpup</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpu_to_be16p\">cpu_to_be16p</a> <a class=\"id\" href=\"#__cpu_to_be16p\">__cpu_to_be16p</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#be16_to_cpup\">be16_to_cpup</a> <a class=\"id\" href=\"#__be16_to_cpup\">__be16_to_cpup</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpu_to_le64s\">cpu_to_le64s</a> <a class=\"id\" href=\"#__cpu_to_le64s\">__cpu_to_le64s</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#le64_to_cpus\">le64_to_cpus</a> <a class=\"id\" href=\"#__le64_to_cpus\">__le64_to_cpus</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpu_to_le32s\">cpu_to_le32s</a> <a class=\"id\" href=\"#__cpu_to_le32s\">__cpu_to_le32s</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#le32_to_cpus\">le32_to_cpus</a> <a class=\"id\" href=\"#__le32_to_cpus\">__le32_to_cpus</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpu_to_le16s\">cpu_to_le16s</a> <a class=\"id\" href=\"#__cpu_to_le16s\">__cpu_to_le16s</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#le16_to_cpus\">le16_to_cpus</a> <a class=\"id\" href=\"#__le16_to_cpus\">__le16_to_cpus</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpu_to_be64s\">cpu_to_be64s</a> <a class=\"id\" href=\"#__cpu_to_be64s\">__cpu_to_be64s</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#be64_to_cpus\">be64_to_cpus</a> <a class=\"id\" href=\"#__be64_to_cpus\">__be64_to_cpus</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpu_to_be32s\">cpu_to_be32s</a> <a class=\"id\" href=\"#__cpu_to_be32s\">__cpu_to_be32s</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#be32_to_cpus\">be32_to_cpus</a> <a class=\"id\" href=\"#__be32_to_cpus\">__be32_to_cpus</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpu_to_be16s\">cpu_to_be16s</a> <a class=\"id\" href=\"#__cpu_to_be16s\">__cpu_to_be16s</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#be16_to_cpus\">be16_to_cpus</a> <a class=\"id\" href=\"#__be16_to_cpus\">__be16_to_cpus</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * They have to be macros in order to do the constant folding</span>", 
"<span class=\"comment\"> * correctly - if the argument passed into a inline function</span>", 
"<span class=\"comment\"> * it is no longer constant according to gcc..</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#ntohl\">ntohl</a>", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#ntohs\">ntohs</a>", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#htonl\">htonl</a>", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#htons\">htons</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#___htonl\">___htonl</a>(<a class=\"id\" href=\"#x\">x</a>) <a class=\"id\" href=\"#__cpu_to_be32\">__cpu_to_be32</a>(<a class=\"id\" href=\"#x\">x</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#___htons\">___htons</a>(<a class=\"id\" href=\"#x\">x</a>) <a class=\"id\" href=\"#__cpu_to_be16\">__cpu_to_be16</a>(<a class=\"id\" href=\"#x\">x</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#___ntohl\">___ntohl</a>(<a class=\"id\" href=\"#x\">x</a>) <a class=\"id\" href=\"#__be32_to_cpu\">__be32_to_cpu</a>(<a class=\"id\" href=\"#x\">x</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#___ntohs\">___ntohs</a>(<a class=\"id\" href=\"#x\">x</a>) <a class=\"id\" href=\"#__be16_to_cpu\">__be16_to_cpu</a>(<a class=\"id\" href=\"#x\">x</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#htonl\">htonl</a>(<a class=\"id\" href=\"#x\">x</a>) <a class=\"id\" href=\"#___htonl\">___htonl</a>(<a class=\"id\" href=\"#x\">x</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ntohl\">ntohl</a>(<a class=\"id\" href=\"#x\">x</a>) <a class=\"id\" href=\"#___ntohl\">___ntohl</a>(<a class=\"id\" href=\"#x\">x</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#htons\">htons</a>(<a class=\"id\" href=\"#x\">x</a>) <a class=\"id\" href=\"#___htons\">___htons</a>(<a class=\"id\" href=\"#x\">x</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#x\">x</a>) <a class=\"id\" href=\"#___ntohs\">___ntohs</a>(<a class=\"id\" href=\"#x\">x</a>)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#le16_add_cpu\">le16_add_cpu</a>(<a class=\"id\" href=\"#__le16\">__le16</a> *<a class=\"id\" href=\"#var\">var</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#var\">var</a> = <a class=\"id\" href=\"#cpu_to_le16\">cpu_to_le16</a>(<a class=\"id\" href=\"#le16_to_cpu\">le16_to_cpu</a>(*<a class=\"id\" href=\"#var\">var</a>) + <a class=\"id\" href=\"#val\">val</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#le32_add_cpu\">le32_add_cpu</a>(<a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#var\">var</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#var\">var</a> = <a class=\"id\" href=\"#cpu_to_le32\">cpu_to_le32</a>(<a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(*<a class=\"id\" href=\"#var\">var</a>) + <a class=\"id\" href=\"#val\">val</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#le64_add_cpu\">le64_add_cpu</a>(<a class=\"id\" href=\"#__le64\">__le64</a> *<a class=\"id\" href=\"#var\">var</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#var\">var</a> = <a class=\"id\" href=\"#cpu_to_le64\">cpu_to_le64</a>(<a class=\"id\" href=\"#le64_to_cpu\">le64_to_cpu</a>(*<a class=\"id\" href=\"#var\">var</a>) + <a class=\"id\" href=\"#val\">val</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#be16_add_cpu\">be16_add_cpu</a>(<a class=\"id\" href=\"#__be16\">__be16</a> *<a class=\"id\" href=\"#var\">var</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#var\">var</a> = <a class=\"id\" href=\"#cpu_to_be16\">cpu_to_be16</a>(<a class=\"id\" href=\"#be16_to_cpu\">be16_to_cpu</a>(*<a class=\"id\" href=\"#var\">var</a>) + <a class=\"id\" href=\"#val\">val</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#be32_add_cpu\">be32_add_cpu</a>(<a class=\"id\" href=\"#__be32\">__be32</a> *<a class=\"id\" href=\"#var\">var</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#var\">var</a> = <a class=\"id\" href=\"#cpu_to_be32\">cpu_to_be32</a>(<a class=\"id\" href=\"#be32_to_cpu\">be32_to_cpu</a>(*<a class=\"id\" href=\"#var\">var</a>) + <a class=\"id\" href=\"#val\">val</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#be64_add_cpu\">be64_add_cpu</a>(<a class=\"id\" href=\"#__be64\">__be64</a> *<a class=\"id\" href=\"#var\">var</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#var\">var</a> = <a class=\"id\" href=\"#cpu_to_be64\">cpu_to_be64</a>(<a class=\"id\" href=\"#be64_to_cpu\">be64_to_cpu</a>(*<a class=\"id\" href=\"#var\">var</a>) + <a class=\"id\" href=\"#val\">val</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _LINUX_BYTEORDER_GENERIC_H */</span>", 
];
xr_frag_insert('l/1c/4c13cb99664e21e28892d4be9c41ace72215d2.xr', __xr_tmp);
