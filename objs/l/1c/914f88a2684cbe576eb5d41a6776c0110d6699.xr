var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\">  Red Black Trees</span>", 
"<span class=\"comment\">  (C) 1999  Andrea Arcangeli &lt;andrea@suse.de&gt;</span>", 
"<span class=\"comment\">  </span>", 
"<span class=\"comment\">  This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\">  it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\">  the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\">  (at your option) any later version.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">  This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\">  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\">  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\">  GNU General Public License for more details.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">  You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\">  along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\">  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">  linux/include/linux/rbtree.h</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">  To use rbtrees you'll have to implement your own insert and search cores.</span>", 
"<span class=\"comment\">  This will avoid us to use callbacks and to drop drammatically performances.</span>", 
"<span class=\"comment\">  I know it's not the cleaner way,  but in C (not in C++) to get</span>", 
"<span class=\"comment\">  performances and genericity...</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">  Some example of insert and search follows here. The search is a plain</span>", 
"<span class=\"comment\">  normal search over an ordered tree. The insert instead must be implemented</span>", 
"<span class=\"comment\">  in two steps: First, the code must insert the element in order as a red leaf</span>", 
"<span class=\"comment\">  in the tree, and then the support library function rb_insert_color() must</span>", 
"<span class=\"comment\">  be called. Such function will do the not trivial work to rebalance the</span>", 
"<span class=\"comment\">  rbtree, if necessary.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">-----------------------------------------------------------------------</span>", 
"<span class=\"comment\">static inline struct page * rb_search_page_cache(struct inode * inode,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long offset)</span>", 
"<span class=\"comment\">{</span>", 
"<span class=\"comment\"><span class=\"ts\"/>struct rb_node * n = inode-&gt;i_rb_page_cache.rb_node;</span>", 
"<span class=\"comment\"><span class=\"ts\"/>struct page * page;</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"><span class=\"ts\"/>while (n)</span>", 
"<span class=\"comment\"><span class=\"ts\"/>{</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>page = rb_entry(n, struct page, rb_page_cache);</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>if (offset &lt; page-&gt;offset)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>n = n-&gt;rb_left;</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>else if (offset &gt; page-&gt;offset)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>n = n-&gt;rb_right;</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>else</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return page;</span>", 
"<span class=\"comment\"><span class=\"ts\"/>}</span>", 
"<span class=\"comment\"><span class=\"ts\"/>return NULL;</span>", 
"<span class=\"comment\">}</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">static inline struct page * __rb_insert_page_cache(struct inode * inode,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long offset,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct rb_node * node)</span>", 
"<span class=\"comment\">{</span>", 
"<span class=\"comment\"><span class=\"ts\"/>struct rb_node ** p = &amp;inode-&gt;i_rb_page_cache.rb_node;</span>", 
"<span class=\"comment\"><span class=\"ts\"/>struct rb_node * parent = NULL;</span>", 
"<span class=\"comment\"><span class=\"ts\"/>struct page * page;</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"><span class=\"ts\"/>while (*p)</span>", 
"<span class=\"comment\"><span class=\"ts\"/>{</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>parent = *p;</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>page = rb_entry(parent, struct page, rb_page_cache);</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>if (offset &lt; page-&gt;offset)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>p = &amp;(*p)-&gt;rb_left;</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>else if (offset &gt; page-&gt;offset)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>p = &amp;(*p)-&gt;rb_right;</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>else</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return page;</span>", 
"<span class=\"comment\"><span class=\"ts\"/>}</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"><span class=\"ts\"/>rb_link_node(node, parent, p);</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"><span class=\"ts\"/>return NULL;</span>", 
"<span class=\"comment\">}</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">static inline struct page * rb_insert_page_cache(struct inode * inode,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned long offset,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct rb_node * node)</span>", 
"<span class=\"comment\">{</span>", 
"<span class=\"comment\"><span class=\"ts\"/>struct page * ret;</span>", 
"<span class=\"comment\"><span class=\"ts\"/>if ((ret = __rb_insert_page_cache(inode, offset, node)))</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>goto out;</span>", 
"<span class=\"comment\"><span class=\"ts\"/>rb_insert_color(node, &amp;inode-&gt;i_rb_page_cache);</span>", 
"<span class=\"comment\"> out:</span>", 
"<span class=\"comment\"><span class=\"ts\"/>return ret;</span>", 
"<span class=\"comment\">}</span>", 
"<span class=\"comment\">-----------------------------------------------------------------------</span>", 
"<span class=\"comment\">*/</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a><span class=\"ts\"/><a class=\"id\" href=\"#_LINUX_RBTREE_H\">_LINUX_RBTREE_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#_LINUX_RBTREE_H\">_LINUX_RBTREE_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stddef\">stddef</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#rb_node\">rb_node</a>", 
"{", 
"<span class=\"ts\"/>unsigned long  <a class=\"id\" href=\"#rb_parent_color\">rb_parent_color</a>;", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#RB_RED\">RB_RED</a><span class=\"ts\"/><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#RB_BLACK\">RB_BLACK</a><span class=\"ts\"/>1", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#rb_right\">rb_right</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#rb_left\">rb_left</a>;", 
"} <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#aligned\">aligned</a>(sizeof(long))));", 
"    <span class=\"comment\">/* The alignment might seem pointless, but allegedly CRIS needs it */</span>", 
"", 
"struct <a class=\"id\" href=\"#rb_root\">rb_root</a>", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#rb_node\">rb_node</a>;", 
"};", 
"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rb_parent\">rb_parent</a>(<a class=\"id\" href=\"#r\">r</a>)   ((struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *)((<a class=\"id\" href=\"#r\">r</a>)-><a class=\"id\" href=\"#rb_parent_color\">rb_parent_color</a> &amp; ~3))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rb_color\">rb_color</a>(<a class=\"id\" href=\"#r\">r</a>)   ((<a class=\"id\" href=\"#r\">r</a>)-><a class=\"id\" href=\"#rb_parent_color\">rb_parent_color</a> &amp; 1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rb_is_red\">rb_is_red</a>(<a class=\"id\" href=\"#r\">r</a>)   (!<a class=\"id\" href=\"#rb_color\">rb_color</a>(<a class=\"id\" href=\"#r\">r</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rb_is_black\">rb_is_black</a>(<a class=\"id\" href=\"#r\">r</a>) <a class=\"id\" href=\"#rb_color\">rb_color</a>(<a class=\"id\" href=\"#r\">r</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rb_set_red\">rb_set_red</a>(<a class=\"id\" href=\"#r\">r</a>)  do { (<a class=\"id\" href=\"#r\">r</a>)-><a class=\"id\" href=\"#rb_parent_color\">rb_parent_color</a> &= ~1; } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#rb_set_black\">rb_set_black</a>(<a class=\"id\" href=\"#r\">r</a>)  do { (<a class=\"id\" href=\"#r\">r</a>)-><a class=\"id\" href=\"#rb_parent_color\">rb_parent_color</a> |= 1; } while (0)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#rb_set_parent\">rb_set_parent</a>(struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#rb\">rb</a>, struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb\">rb</a>-><a class=\"id\" href=\"#rb_parent_color\">rb_parent_color</a> = (<a class=\"id\" href=\"#rb\">rb</a>-><a class=\"id\" href=\"#rb_parent_color\">rb_parent_color</a> &amp; 3) | (unsigned long)<a class=\"id\" href=\"#p\">p</a>;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#rb_set_color\">rb_set_color</a>(struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#rb\">rb</a>, int <a class=\"id\" href=\"#color\">color</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rb\">rb</a>-><a class=\"id\" href=\"#rb_parent_color\">rb_parent_color</a> = (<a class=\"id\" href=\"#rb\">rb</a>-><a class=\"id\" href=\"#rb_parent_color\">rb_parent_color</a> &amp; ~1) | <a class=\"id\" href=\"#color\">color</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RB_ROOT\">RB_ROOT</a><span class=\"ts\"/>(struct <a class=\"id\" href=\"#rb_root\">rb_root</a>) { <a class=\"id\" href=\"#NULL\">NULL</a>, }", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#rb_entry\">rb_entry</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#member\">member</a>) <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#member\">member</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RB_EMPTY_ROOT\">RB_EMPTY_ROOT</a>(<a class=\"id\" href=\"#root\">root</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#root\">root</a>)-><a class=\"id\" href=\"#rb_node\">rb_node</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RB_EMPTY_NODE\">RB_EMPTY_NODE</a>(<a class=\"id\" href=\"#node\">node</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#rb_parent\">rb_parent</a>(<a class=\"id\" href=\"#node\">node</a>) == <a class=\"id\" href=\"#node\">node</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RB_CLEAR_NODE\">RB_CLEAR_NODE</a>(<a class=\"id\" href=\"#node\">node</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#rb_set_parent\">rb_set_parent</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#node\">node</a>))", 
"", 
"extern void <a class=\"id\" href=\"#rb_insert_color\">rb_insert_color</a>(struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *, struct <a class=\"id\" href=\"#rb_root\">rb_root</a> *);", 
"extern void <a class=\"id\" href=\"#rb_erase\">rb_erase</a>(struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *, struct <a class=\"id\" href=\"#rb_root\">rb_root</a> *);", 
"", 
"typedef void (*<a class=\"id\" href=\"#rb_augment_f\">rb_augment_f</a>)(struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#node\">node</a>, void *<a class=\"id\" href=\"#data\">data</a>);", 
"", 
"extern void <a class=\"id\" href=\"#rb_augment_insert\">rb_augment_insert</a>(struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#node\">node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#rb_augment_f\">rb_augment_f</a> <a class=\"id\" href=\"#func\">func</a>, void *<a class=\"id\" href=\"#data\">data</a>);", 
"extern struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#rb_augment_erase_begin\">rb_augment_erase_begin</a>(struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#node\">node</a>);", 
"extern void <a class=\"id\" href=\"#rb_augment_erase_end\">rb_augment_erase_end</a>(struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#node\">node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#rb_augment_f\">rb_augment_f</a> <a class=\"id\" href=\"#func\">func</a>, void *<a class=\"id\" href=\"#data\">data</a>);", 
"", 
"<span class=\"comment\">/* Find logical next and previous nodes in a tree */</span>", 
"extern struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#rb_next\">rb_next</a>(const struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *);", 
"extern struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#rb_prev\">rb_prev</a>(const struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *);", 
"extern struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#rb_first\">rb_first</a>(const struct <a class=\"id\" href=\"#rb_root\">rb_root</a> *);", 
"extern struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#rb_last\">rb_last</a>(const struct <a class=\"id\" href=\"#rb_root\">rb_root</a> *);", 
"", 
"<span class=\"comment\">/* Fast replacement of a single node without remove/rebalance/add/rebalance */</span>", 
"extern void <a class=\"id\" href=\"#rb_replace_node\">rb_replace_node</a>(struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#victim\">victim</a>, struct <a class=\"id\" href=\"#rb_node\">rb_node</a> *<a class=\"id\" href=\"#new\">new</a>, ", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#rb_root\">rb_root</a> *<a class=\"id\" href=\"#root\">root</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#rb_link_node\">rb_link_node</a>(struct <a class=\"id\" href=\"#rb_node\">rb_node</a> * <a class=\"id\" href=\"#node\">node</a>, struct <a class=\"id\" href=\"#rb_node\">rb_node</a> * <a class=\"id\" href=\"#parent\">parent</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#rb_node\">rb_node</a> ** <a class=\"id\" href=\"#rb_link\">rb_link</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#rb_parent_color\">rb_parent_color</a> = (unsigned long )<a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#rb_left\">rb_left</a> = <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#rb_right\">rb_right</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#rb_link\">rb_link</a> = <a class=\"id\" href=\"#node\">node</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* _LINUX_RBTREE_H */</span>", 
];
xr_frag_insert('l/1c/914f88a2684cbe576eb5d41a6776c0110d6699.xr', __xr_tmp);
