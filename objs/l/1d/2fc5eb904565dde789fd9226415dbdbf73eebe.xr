var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  Generic fillrect for frame buffers with packed pixels of any depth.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *      Copyright (C)  2000 James Simmons (jsimmons@linux-fbdev.org)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This file is subject to the terms and conditions of the GNU General Public</span>", 
"<span class=\"comment\"> *  License.  See the file COPYING in the main directory of this archive for</span>", 
"<span class=\"comment\"> *  more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTES:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Also need to add code to deal with cards endians that are different than</span>", 
"<span class=\"comment\"> *  the native cpu endians. I also need to deal with MSB position in the word.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fb\">fb</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"fb_draw.h\"", 
"", 
"#if <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> == 32", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FB_WRITEL\">FB_WRITEL</a> <a class=\"id\" href=\"#fb_writel\">fb_writel</a>", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FB_READL\">FB_READL</a>  <a class=\"id\" href=\"#fb_readl\">fb_readl</a>", 
"#else", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FB_WRITEL\">FB_WRITEL</a> <a class=\"id\" href=\"#fb_writeq\">fb_writeq</a>", 
"#  <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FB_READL\">FB_READL</a>  <a class=\"id\" href=\"#fb_readq\">fb_readq</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"    <span class=\"comment\">/*</span>", 
"<span class=\"comment\">     *  Aligned pattern fill using 32/64-bit memory accesses</span>", 
"<span class=\"comment\">     */</span>", 
"", 
"static void", 
"<a class=\"id\" href=\"#bitfill_aligned\">bitfill_aligned</a>(struct <a class=\"id\" href=\"#fb_info\">fb_info</a> *<a class=\"id\" href=\"#p\">p</a>, unsigned long <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#dst\">dst</a>, int <a class=\"id\" href=\"#dst_idx\">dst_idx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pat\">pat</a>, unsigned <a class=\"id\" href=\"#n\">n</a>, int <a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#bswapmask\">bswapmask</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#first\">first</a>, <a class=\"id\" href=\"#last\">last</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#n\">n</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#fb_shifted_pixels_mask_long\">fb_shifted_pixels_mask_long</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#dst_idx\">dst_idx</a>, <a class=\"id\" href=\"#bswapmask\">bswapmask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#last\">last</a> = ~<a class=\"id\" href=\"#fb_shifted_pixels_mask_long\">fb_shifted_pixels_mask_long</a>(<a class=\"id\" href=\"#p\">p</a>, (<a class=\"id\" href=\"#dst_idx\">dst_idx</a>+<a class=\"id\" href=\"#n\">n</a>) % <a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#bswapmask\">bswapmask</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dst_idx\">dst_idx</a>+<a class=\"id\" href=\"#n\">n</a> <= <a class=\"id\" href=\"#bits\">bits</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">// Single word</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#last\">last</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first\">first</a> &= <a class=\"id\" href=\"#last\">last</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FB_WRITEL\">FB_WRITEL</a>(<a class=\"id\" href=\"#comp\">comp</a>(<a class=\"id\" href=\"#pat\">pat</a>, <a class=\"id\" href=\"#FB_READL\">FB_READL</a>(<a class=\"id\" href=\"#dst\">dst</a>), <a class=\"id\" href=\"#first\">first</a>), <a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">// Multiple destination words</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">// Leading bits</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#first\">first</a>!= ~0UL) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FB_WRITEL\">FB_WRITEL</a>(<a class=\"id\" href=\"#comp\">comp</a>(<a class=\"id\" href=\"#pat\">pat</a>, <a class=\"id\" href=\"#FB_READL\">FB_READL</a>(<a class=\"id\" href=\"#dst\">dst</a>), <a class=\"id\" href=\"#first\">first</a>), <a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> -= <a class=\"id\" href=\"#bits\">bits</a> - <a class=\"id\" href=\"#dst_idx\">dst_idx</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">// Main chunk</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> /= <a class=\"id\" href=\"#bits\">bits</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#n\">n</a> >= 8) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FB_WRITEL\">FB_WRITEL</a>(<a class=\"id\" href=\"#pat\">pat</a>, <a class=\"id\" href=\"#dst\">dst</a>++);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FB_WRITEL\">FB_WRITEL</a>(<a class=\"id\" href=\"#pat\">pat</a>, <a class=\"id\" href=\"#dst\">dst</a>++);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FB_WRITEL\">FB_WRITEL</a>(<a class=\"id\" href=\"#pat\">pat</a>, <a class=\"id\" href=\"#dst\">dst</a>++);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FB_WRITEL\">FB_WRITEL</a>(<a class=\"id\" href=\"#pat\">pat</a>, <a class=\"id\" href=\"#dst\">dst</a>++);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FB_WRITEL\">FB_WRITEL</a>(<a class=\"id\" href=\"#pat\">pat</a>, <a class=\"id\" href=\"#dst\">dst</a>++);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FB_WRITEL\">FB_WRITEL</a>(<a class=\"id\" href=\"#pat\">pat</a>, <a class=\"id\" href=\"#dst\">dst</a>++);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FB_WRITEL\">FB_WRITEL</a>(<a class=\"id\" href=\"#pat\">pat</a>, <a class=\"id\" href=\"#dst\">dst</a>++);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FB_WRITEL\">FB_WRITEL</a>(<a class=\"id\" href=\"#pat\">pat</a>, <a class=\"id\" href=\"#dst\">dst</a>++);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> -= 8;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#n\">n</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FB_WRITEL\">FB_WRITEL</a>(<a class=\"id\" href=\"#pat\">pat</a>, <a class=\"id\" href=\"#dst\">dst</a>++);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">// Trailing bits</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#last\">last</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FB_WRITEL\">FB_WRITEL</a>(<a class=\"id\" href=\"#comp\">comp</a>(<a class=\"id\" href=\"#pat\">pat</a>, <a class=\"id\" href=\"#FB_READL\">FB_READL</a>(<a class=\"id\" href=\"#dst\">dst</a>), <a class=\"id\" href=\"#last\">last</a>), <a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"", 
"    <span class=\"comment\">/*</span>", 
"<span class=\"comment\">     *  Unaligned generic pattern fill using 32/64-bit memory accesses</span>", 
"<span class=\"comment\">     *  The pattern must have been expanded to a full 32/64-bit value</span>", 
"<span class=\"comment\">     *  Left/right are the appropriate shifts to convert to the pattern to be</span>", 
"<span class=\"comment\">     *  used for the next 32/64-bit word</span>", 
"<span class=\"comment\">     */</span>", 
"", 
"static void", 
"<a class=\"id\" href=\"#bitfill_unaligned\">bitfill_unaligned</a>(struct <a class=\"id\" href=\"#fb_info\">fb_info</a> *<a class=\"id\" href=\"#p\">p</a>, unsigned long <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#dst\">dst</a>, int <a class=\"id\" href=\"#dst_idx\">dst_idx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#pat\">pat</a>, int <a class=\"id\" href=\"#left\">left</a>, int <a class=\"id\" href=\"#right\">right</a>, unsigned <a class=\"id\" href=\"#n\">n</a>, int <a class=\"id\" href=\"#bits\">bits</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#first\">first</a>, <a class=\"id\" href=\"#last\">last</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#n\">n</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#FB_SHIFT_HIGH\">FB_SHIFT_HIGH</a>(<a class=\"id\" href=\"#p\">p</a>, ~0UL, <a class=\"id\" href=\"#dst_idx\">dst_idx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#last\">last</a> = ~(<a class=\"id\" href=\"#FB_SHIFT_HIGH\">FB_SHIFT_HIGH</a>(<a class=\"id\" href=\"#p\">p</a>, ~0UL, (<a class=\"id\" href=\"#dst_idx\">dst_idx</a>+<a class=\"id\" href=\"#n\">n</a>) % <a class=\"id\" href=\"#bits\">bits</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dst_idx\">dst_idx</a>+<a class=\"id\" href=\"#n\">n</a> <= <a class=\"id\" href=\"#bits\">bits</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">// Single word</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#last\">last</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first\">first</a> &= <a class=\"id\" href=\"#last\">last</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FB_WRITEL\">FB_WRITEL</a>(<a class=\"id\" href=\"#comp\">comp</a>(<a class=\"id\" href=\"#pat\">pat</a>, <a class=\"id\" href=\"#FB_READL\">FB_READL</a>(<a class=\"id\" href=\"#dst\">dst</a>), <a class=\"id\" href=\"#first\">first</a>), <a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">// Multiple destination words</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">// Leading bits</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#first\">first</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FB_WRITEL\">FB_WRITEL</a>(<a class=\"id\" href=\"#comp\">comp</a>(<a class=\"id\" href=\"#pat\">pat</a>, <a class=\"id\" href=\"#FB_READL\">FB_READL</a>(<a class=\"id\" href=\"#dst\">dst</a>), <a class=\"id\" href=\"#first\">first</a>), <a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pat\">pat</a> = <a class=\"id\" href=\"#pat\">pat</a> << <a class=\"id\" href=\"#left\">left</a> | <a class=\"id\" href=\"#pat\">pat</a> >> <a class=\"id\" href=\"#right\">right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> -= <a class=\"id\" href=\"#bits\">bits</a> - <a class=\"id\" href=\"#dst_idx\">dst_idx</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">// Main chunk</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> /= <a class=\"id\" href=\"#bits\">bits</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#n\">n</a> >= 4) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FB_WRITEL\">FB_WRITEL</a>(<a class=\"id\" href=\"#pat\">pat</a>, <a class=\"id\" href=\"#dst\">dst</a>++);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pat\">pat</a> = <a class=\"id\" href=\"#pat\">pat</a> << <a class=\"id\" href=\"#left\">left</a> | <a class=\"id\" href=\"#pat\">pat</a> >> <a class=\"id\" href=\"#right\">right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FB_WRITEL\">FB_WRITEL</a>(<a class=\"id\" href=\"#pat\">pat</a>, <a class=\"id\" href=\"#dst\">dst</a>++);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pat\">pat</a> = <a class=\"id\" href=\"#pat\">pat</a> << <a class=\"id\" href=\"#left\">left</a> | <a class=\"id\" href=\"#pat\">pat</a> >> <a class=\"id\" href=\"#right\">right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FB_WRITEL\">FB_WRITEL</a>(<a class=\"id\" href=\"#pat\">pat</a>, <a class=\"id\" href=\"#dst\">dst</a>++);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pat\">pat</a> = <a class=\"id\" href=\"#pat\">pat</a> << <a class=\"id\" href=\"#left\">left</a> | <a class=\"id\" href=\"#pat\">pat</a> >> <a class=\"id\" href=\"#right\">right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FB_WRITEL\">FB_WRITEL</a>(<a class=\"id\" href=\"#pat\">pat</a>, <a class=\"id\" href=\"#dst\">dst</a>++);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pat\">pat</a> = <a class=\"id\" href=\"#pat\">pat</a> << <a class=\"id\" href=\"#left\">left</a> | <a class=\"id\" href=\"#pat\">pat</a> >> <a class=\"id\" href=\"#right\">right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> -= 4;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#n\">n</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FB_WRITEL\">FB_WRITEL</a>(<a class=\"id\" href=\"#pat\">pat</a>, <a class=\"id\" href=\"#dst\">dst</a>++);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pat\">pat</a> = <a class=\"id\" href=\"#pat\">pat</a> << <a class=\"id\" href=\"#left\">left</a> | <a class=\"id\" href=\"#pat\">pat</a> >> <a class=\"id\" href=\"#right\">right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">// Trailing bits</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#last\">last</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FB_WRITEL\">FB_WRITEL</a>(<a class=\"id\" href=\"#comp\">comp</a>(<a class=\"id\" href=\"#pat\">pat</a>, <a class=\"id\" href=\"#FB_READL\">FB_READL</a>(<a class=\"id\" href=\"#dst\">dst</a>), <a class=\"id\" href=\"#last\">last</a>), <a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"    <span class=\"comment\">/*</span>", 
"<span class=\"comment\">     *  Aligned pattern invert using 32/64-bit memory accesses</span>", 
"<span class=\"comment\">     */</span>", 
"static void", 
"<a class=\"id\" href=\"#bitfill_aligned_rev\">bitfill_aligned_rev</a>(struct <a class=\"id\" href=\"#fb_info\">fb_info</a> *<a class=\"id\" href=\"#p\">p</a>, unsigned long <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#dst\">dst</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#dst_idx\">dst_idx</a>, unsigned long <a class=\"id\" href=\"#pat\">pat</a>, unsigned <a class=\"id\" href=\"#n\">n</a>, int <a class=\"id\" href=\"#bits\">bits</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#bswapmask\">bswapmask</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#val\">val</a> = <a class=\"id\" href=\"#pat\">pat</a>, <a class=\"id\" href=\"#dat\">dat</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#first\">first</a>, <a class=\"id\" href=\"#last\">last</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#n\">n</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#fb_shifted_pixels_mask_long\">fb_shifted_pixels_mask_long</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#dst_idx\">dst_idx</a>, <a class=\"id\" href=\"#bswapmask\">bswapmask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#last\">last</a> = ~<a class=\"id\" href=\"#fb_shifted_pixels_mask_long\">fb_shifted_pixels_mask_long</a>(<a class=\"id\" href=\"#p\">p</a>, (<a class=\"id\" href=\"#dst_idx\">dst_idx</a>+<a class=\"id\" href=\"#n\">n</a>) % <a class=\"id\" href=\"#bits\">bits</a>, <a class=\"id\" href=\"#bswapmask\">bswapmask</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dst_idx\">dst_idx</a>+<a class=\"id\" href=\"#n\">n</a> <= <a class=\"id\" href=\"#bits\">bits</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">// Single word</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#last\">last</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first\">first</a> &= <a class=\"id\" href=\"#last\">last</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dat\">dat</a> = <a class=\"id\" href=\"#FB_READL\">FB_READL</a>(<a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FB_WRITEL\">FB_WRITEL</a>(<a class=\"id\" href=\"#comp\">comp</a>(<a class=\"id\" href=\"#dat\">dat</a> ^ <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#dat\">dat</a>, <a class=\"id\" href=\"#first\">first</a>), <a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">// Multiple destination words</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">// Leading bits</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#first\">first</a>!=0UL) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dat\">dat</a> = <a class=\"id\" href=\"#FB_READL\">FB_READL</a>(<a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FB_WRITEL\">FB_WRITEL</a>(<a class=\"id\" href=\"#comp\">comp</a>(<a class=\"id\" href=\"#dat\">dat</a> ^ <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#dat\">dat</a>, <a class=\"id\" href=\"#first\">first</a>), <a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> -= <a class=\"id\" href=\"#bits\">bits</a> - <a class=\"id\" href=\"#dst_idx\">dst_idx</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">// Main chunk</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> /= <a class=\"id\" href=\"#bits\">bits</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#n\">n</a> >= 8) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FB_WRITEL\">FB_WRITEL</a>(<a class=\"id\" href=\"#FB_READL\">FB_READL</a>(<a class=\"id\" href=\"#dst\">dst</a>) ^ <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FB_WRITEL\">FB_WRITEL</a>(<a class=\"id\" href=\"#FB_READL\">FB_READL</a>(<a class=\"id\" href=\"#dst\">dst</a>) ^ <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FB_WRITEL\">FB_WRITEL</a>(<a class=\"id\" href=\"#FB_READL\">FB_READL</a>(<a class=\"id\" href=\"#dst\">dst</a>) ^ <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FB_WRITEL\">FB_WRITEL</a>(<a class=\"id\" href=\"#FB_READL\">FB_READL</a>(<a class=\"id\" href=\"#dst\">dst</a>) ^ <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FB_WRITEL\">FB_WRITEL</a>(<a class=\"id\" href=\"#FB_READL\">FB_READL</a>(<a class=\"id\" href=\"#dst\">dst</a>) ^ <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FB_WRITEL\">FB_WRITEL</a>(<a class=\"id\" href=\"#FB_READL\">FB_READL</a>(<a class=\"id\" href=\"#dst\">dst</a>) ^ <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FB_WRITEL\">FB_WRITEL</a>(<a class=\"id\" href=\"#FB_READL\">FB_READL</a>(<a class=\"id\" href=\"#dst\">dst</a>) ^ <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FB_WRITEL\">FB_WRITEL</a>(<a class=\"id\" href=\"#FB_READL\">FB_READL</a>(<a class=\"id\" href=\"#dst\">dst</a>) ^ <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> -= 8;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#n\">n</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FB_WRITEL\">FB_WRITEL</a>(<a class=\"id\" href=\"#FB_READL\">FB_READL</a>(<a class=\"id\" href=\"#dst\">dst</a>) ^ <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">// Trailing bits</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#last\">last</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dat\">dat</a> = <a class=\"id\" href=\"#FB_READL\">FB_READL</a>(<a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FB_WRITEL\">FB_WRITEL</a>(<a class=\"id\" href=\"#comp\">comp</a>(<a class=\"id\" href=\"#dat\">dat</a> ^ <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#dat\">dat</a>, <a class=\"id\" href=\"#last\">last</a>), <a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"", 
"    <span class=\"comment\">/*</span>", 
"<span class=\"comment\">     *  Unaligned generic pattern invert using 32/64-bit memory accesses</span>", 
"<span class=\"comment\">     *  The pattern must have been expanded to a full 32/64-bit value</span>", 
"<span class=\"comment\">     *  Left/right are the appropriate shifts to convert to the pattern to be</span>", 
"<span class=\"comment\">     *  used for the next 32/64-bit word</span>", 
"<span class=\"comment\">     */</span>", 
"", 
"static void", 
"<a class=\"id\" href=\"#bitfill_unaligned_rev\">bitfill_unaligned_rev</a>(struct <a class=\"id\" href=\"#fb_info\">fb_info</a> *<a class=\"id\" href=\"#p\">p</a>, unsigned long <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#dst\">dst</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#dst_idx\">dst_idx</a>, unsigned long <a class=\"id\" href=\"#pat\">pat</a>, int <a class=\"id\" href=\"#left\">left</a>, int <a class=\"id\" href=\"#right\">right</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      unsigned <a class=\"id\" href=\"#n\">n</a>, int <a class=\"id\" href=\"#bits\">bits</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#first\">first</a>, <a class=\"id\" href=\"#last\">last</a>, <a class=\"id\" href=\"#dat\">dat</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#n\">n</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#FB_SHIFT_HIGH\">FB_SHIFT_HIGH</a>(<a class=\"id\" href=\"#p\">p</a>, ~0UL, <a class=\"id\" href=\"#dst_idx\">dst_idx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#last\">last</a> = ~(<a class=\"id\" href=\"#FB_SHIFT_HIGH\">FB_SHIFT_HIGH</a>(<a class=\"id\" href=\"#p\">p</a>, ~0UL, (<a class=\"id\" href=\"#dst_idx\">dst_idx</a>+<a class=\"id\" href=\"#n\">n</a>) % <a class=\"id\" href=\"#bits\">bits</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dst_idx\">dst_idx</a>+<a class=\"id\" href=\"#n\">n</a> <= <a class=\"id\" href=\"#bits\">bits</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">// Single word</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#last\">last</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first\">first</a> &= <a class=\"id\" href=\"#last\">last</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dat\">dat</a> = <a class=\"id\" href=\"#FB_READL\">FB_READL</a>(<a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FB_WRITEL\">FB_WRITEL</a>(<a class=\"id\" href=\"#comp\">comp</a>(<a class=\"id\" href=\"#dat\">dat</a> ^ <a class=\"id\" href=\"#pat\">pat</a>, <a class=\"id\" href=\"#dat\">dat</a>, <a class=\"id\" href=\"#first\">first</a>), <a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">// Multiple destination words</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">// Leading bits</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#first\">first</a> != 0UL) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dat\">dat</a> = <a class=\"id\" href=\"#FB_READL\">FB_READL</a>(<a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FB_WRITEL\">FB_WRITEL</a>(<a class=\"id\" href=\"#comp\">comp</a>(<a class=\"id\" href=\"#dat\">dat</a> ^ <a class=\"id\" href=\"#pat\">pat</a>, <a class=\"id\" href=\"#dat\">dat</a>, <a class=\"id\" href=\"#first\">first</a>), <a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pat\">pat</a> = <a class=\"id\" href=\"#pat\">pat</a> << <a class=\"id\" href=\"#left\">left</a> | <a class=\"id\" href=\"#pat\">pat</a> >> <a class=\"id\" href=\"#right\">right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> -= <a class=\"id\" href=\"#bits\">bits</a> - <a class=\"id\" href=\"#dst_idx\">dst_idx</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">// Main chunk</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> /= <a class=\"id\" href=\"#bits\">bits</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#n\">n</a> >= 4) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FB_WRITEL\">FB_WRITEL</a>(<a class=\"id\" href=\"#FB_READL\">FB_READL</a>(<a class=\"id\" href=\"#dst\">dst</a>) ^ <a class=\"id\" href=\"#pat\">pat</a>, <a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pat\">pat</a> = <a class=\"id\" href=\"#pat\">pat</a> << <a class=\"id\" href=\"#left\">left</a> | <a class=\"id\" href=\"#pat\">pat</a> >> <a class=\"id\" href=\"#right\">right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FB_WRITEL\">FB_WRITEL</a>(<a class=\"id\" href=\"#FB_READL\">FB_READL</a>(<a class=\"id\" href=\"#dst\">dst</a>) ^ <a class=\"id\" href=\"#pat\">pat</a>, <a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pat\">pat</a> = <a class=\"id\" href=\"#pat\">pat</a> << <a class=\"id\" href=\"#left\">left</a> | <a class=\"id\" href=\"#pat\">pat</a> >> <a class=\"id\" href=\"#right\">right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FB_WRITEL\">FB_WRITEL</a>(<a class=\"id\" href=\"#FB_READL\">FB_READL</a>(<a class=\"id\" href=\"#dst\">dst</a>) ^ <a class=\"id\" href=\"#pat\">pat</a>, <a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pat\">pat</a> = <a class=\"id\" href=\"#pat\">pat</a> << <a class=\"id\" href=\"#left\">left</a> | <a class=\"id\" href=\"#pat\">pat</a> >> <a class=\"id\" href=\"#right\">right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FB_WRITEL\">FB_WRITEL</a>(<a class=\"id\" href=\"#FB_READL\">FB_READL</a>(<a class=\"id\" href=\"#dst\">dst</a>) ^ <a class=\"id\" href=\"#pat\">pat</a>, <a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pat\">pat</a> = <a class=\"id\" href=\"#pat\">pat</a> << <a class=\"id\" href=\"#left\">left</a> | <a class=\"id\" href=\"#pat\">pat</a> >> <a class=\"id\" href=\"#right\">right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#n\">n</a> -= 4;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#n\">n</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FB_WRITEL\">FB_WRITEL</a>(<a class=\"id\" href=\"#FB_READL\">FB_READL</a>(<a class=\"id\" href=\"#dst\">dst</a>) ^ <a class=\"id\" href=\"#pat\">pat</a>, <a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pat\">pat</a> = <a class=\"id\" href=\"#pat\">pat</a> << <a class=\"id\" href=\"#left\">left</a> | <a class=\"id\" href=\"#pat\">pat</a> >> <a class=\"id\" href=\"#right\">right</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">// Trailing bits</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#last\">last</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dat\">dat</a> = <a class=\"id\" href=\"#FB_READL\">FB_READL</a>(<a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FB_WRITEL\">FB_WRITEL</a>(<a class=\"id\" href=\"#comp\">comp</a>(<a class=\"id\" href=\"#dat\">dat</a> ^ <a class=\"id\" href=\"#pat\">pat</a>, <a class=\"id\" href=\"#dat\">dat</a>, <a class=\"id\" href=\"#last\">last</a>), <a class=\"id\" href=\"#dst\">dst</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#cfb_fillrect\">cfb_fillrect</a>(struct <a class=\"id\" href=\"#fb_info\">fb_info</a> *<a class=\"id\" href=\"#p\">p</a>, const struct <a class=\"id\" href=\"#fb_fillrect\">fb_fillrect</a> *<a class=\"id\" href=\"#rect\">rect</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pat\">pat</a>, <a class=\"id\" href=\"#pat2\">pat2</a>, <a class=\"id\" href=\"#fg\">fg</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#width\">width</a> = <a class=\"id\" href=\"#rect\">rect</a>-><a class=\"id\" href=\"#width\">width</a>, <a class=\"id\" href=\"#height\">height</a> = <a class=\"id\" href=\"#rect\">rect</a>-><a class=\"id\" href=\"#height\">height</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#bits\">bits</a> = <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>, <a class=\"id\" href=\"#bytes\">bytes</a> = <a class=\"id\" href=\"#bits\">bits</a> >> 3;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#bpp\">bpp</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#var\">var</a>.<a class=\"id\" href=\"#bits_per_pixel\">bits_per_pixel</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#dst\">dst</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#dst_idx\">dst_idx</a>, <a class=\"id\" href=\"#left\">left</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#state\">state</a> != <a class=\"id\" href=\"#FBINFO_STATE_RUNNING\">FBINFO_STATE_RUNNING</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#fix\">fix</a>.<a class=\"id\" href=\"#visual\">visual</a> == <a class=\"id\" href=\"#FB_VISUAL_TRUECOLOR\">FB_VISUAL_TRUECOLOR</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#fix\">fix</a>.<a class=\"id\" href=\"#visual\">visual</a> == <a class=\"id\" href=\"#FB_VISUAL_DIRECTCOLOR\">FB_VISUAL_DIRECTCOLOR</a> )", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fg\">fg</a> = ((<a class=\"id\" href=\"#u32\">u32</a> *) (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#pseudo_palette\">pseudo_palette</a>))[<a class=\"id\" href=\"#rect\">rect</a>-><a class=\"id\" href=\"#color\">color</a>];", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fg\">fg</a> = <a class=\"id\" href=\"#rect\">rect</a>-><a class=\"id\" href=\"#color\">color</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pat\">pat</a> = <a class=\"id\" href=\"#pixel_to_pat\">pixel_to_pat</a>(<a class=\"id\" href=\"#bpp\">bpp</a>, <a class=\"id\" href=\"#fg\">fg</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a> = (unsigned long <a class=\"id\" href=\"#__iomem\">__iomem</a> *)((unsigned long)<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#screen_base\">screen_base</a> &amp; ~(<a class=\"id\" href=\"#bytes\">bytes</a>-1));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dst_idx\">dst_idx</a> = ((unsigned long)<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#screen_base\">screen_base</a> &amp; (<a class=\"id\" href=\"#bytes\">bytes</a> - 1))*8;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dst_idx\">dst_idx</a> += <a class=\"id\" href=\"#rect\">rect</a>-><a class=\"id\" href=\"#dy\">dy</a>*<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#fix\">fix</a>.<a class=\"id\" href=\"#line_length\">line_length</a>*8+<a class=\"id\" href=\"#rect\">rect</a>-><a class=\"id\" href=\"#dx\">dx</a>*<a class=\"id\" href=\"#bpp\">bpp</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* FIXME For now we support 1-32 bpp only */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#left\">left</a> = <a class=\"id\" href=\"#bits\">bits</a> % <a class=\"id\" href=\"#bpp\">bpp</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#fbops\">fbops</a>-><a class=\"id\" href=\"#fb_sync\">fb_sync</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#fbops\">fbops</a>-><a class=\"id\" href=\"#fb_sync\">fb_sync</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#left\">left</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#bswapmask\">bswapmask</a> = <a class=\"id\" href=\"#fb_compute_bswapmask\">fb_compute_bswapmask</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>void (*<a class=\"id\" href=\"#fill_op32\">fill_op32</a>)(struct <a class=\"id\" href=\"#fb_info\">fb_info</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#dst\">dst</a>, int <a class=\"id\" href=\"#dst_idx\">dst_idx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>                  unsigned long <a class=\"id\" href=\"#pat\">pat</a>, unsigned <a class=\"id\" href=\"#n\">n</a>, int <a class=\"id\" href=\"#bits\">bits</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#bswapmask\">bswapmask</a>) = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#rect\">rect</a>-><a class=\"id\" href=\"#rop\">rop</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#ROP_XOR\">ROP_XOR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fill_op32\">fill_op32</a> = <a class=\"id\" href=\"#bitfill_aligned_rev\">bitfill_aligned_rev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#ROP_COPY\">ROP_COPY</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fill_op32\">fill_op32</a> = <a class=\"id\" href=\"#bitfill_aligned\">bitfill_aligned</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>( <a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"cfb_fillrect(): unknown rop, defaulting to ROP_COPY\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fill_op32\">fill_op32</a> = <a class=\"id\" href=\"#bitfill_aligned\">bitfill_aligned</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#height\">height</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a> += <a class=\"id\" href=\"#dst_idx\">dst_idx</a> >> (<a class=\"id\" href=\"#ffs\">ffs</a>(<a class=\"id\" href=\"#bits\">bits</a>) - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst_idx\">dst_idx</a> &= (<a class=\"id\" href=\"#bits\">bits</a> - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fill_op32\">fill_op32</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#dst_idx\">dst_idx</a>, <a class=\"id\" href=\"#pat\">pat</a>, <a class=\"id\" href=\"#width\">width</a>*<a class=\"id\" href=\"#bpp\">bpp</a>, <a class=\"id\" href=\"#bits\">bits</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#bswapmask\">bswapmask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst_idx\">dst_idx</a> += <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#fix\">fix</a>.<a class=\"id\" href=\"#line_length\">line_length</a>*8;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#right\">right</a>, <a class=\"id\" href=\"#r\">r</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>void (*<a class=\"id\" href=\"#fill_op\">fill_op</a>)(struct <a class=\"id\" href=\"#fb_info\">fb_info</a> *<a class=\"id\" href=\"#p\">p</a>, unsigned long <a class=\"id\" href=\"#__iomem\">__iomem</a> *<a class=\"id\" href=\"#dst\">dst</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#dst_idx\">dst_idx</a>, unsigned long <a class=\"id\" href=\"#pat\">pat</a>, int <a class=\"id\" href=\"#left\">left</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#right\">right</a>, unsigned <a class=\"id\" href=\"#n\">n</a>, int <a class=\"id\" href=\"#bits\">bits</a>) = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__LITTLE_ENDIAN\">__LITTLE_ENDIAN</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#right\">right</a> = <a class=\"id\" href=\"#left\">left</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#left\">left</a> = <a class=\"id\" href=\"#bpp\">bpp</a> - <a class=\"id\" href=\"#right\">right</a>;", 
"#else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#right\">right</a> = <a class=\"id\" href=\"#bpp\">bpp</a> - <a class=\"id\" href=\"#left\">left</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#rect\">rect</a>-><a class=\"id\" href=\"#rop\">rop</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#ROP_XOR\">ROP_XOR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fill_op\">fill_op</a> = <a class=\"id\" href=\"#bitfill_unaligned_rev\">bitfill_unaligned_rev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#ROP_COPY\">ROP_COPY</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fill_op\">fill_op</a> = <a class=\"id\" href=\"#bitfill_unaligned\">bitfill_unaligned</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"cfb_fillrect(): unknown rop, defaulting to ROP_COPY\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fill_op\">fill_op</a> = <a class=\"id\" href=\"#bitfill_unaligned\">bitfill_unaligned</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#height\">height</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a> += <a class=\"id\" href=\"#dst_idx\">dst_idx</a> / <a class=\"id\" href=\"#bits\">bits</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst_idx\">dst_idx</a> &= (<a class=\"id\" href=\"#bits\">bits</a> - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#dst_idx\">dst_idx</a> % <a class=\"id\" href=\"#bpp\">bpp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* rotate pattern to the correct start position */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pat2\">pat2</a> = <a class=\"id\" href=\"#le_long_to_cpu\">le_long_to_cpu</a>(<a class=\"id\" href=\"#rolx\">rolx</a>(<a class=\"id\" href=\"#cpu_to_le_long\">cpu_to_le_long</a>(<a class=\"id\" href=\"#pat\">pat</a>), <a class=\"id\" href=\"#r\">r</a>, <a class=\"id\" href=\"#bpp\">bpp</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fill_op\">fill_op</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#dst\">dst</a>, <a class=\"id\" href=\"#dst_idx\">dst_idx</a>, <a class=\"id\" href=\"#pat2\">pat2</a>, <a class=\"id\" href=\"#left\">left</a>, <a class=\"id\" href=\"#right\">right</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#width\">width</a>*<a class=\"id\" href=\"#bpp\">bpp</a>, <a class=\"id\" href=\"#bits\">bits</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst_idx\">dst_idx</a> += <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#fix\">fix</a>.<a class=\"id\" href=\"#line_length\">line_length</a>*8;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#cfb_fillrect\">cfb_fillrect</a>);", 
"", 
"<a class=\"id\" href=\"#MODULE_AUTHOR\">MODULE_AUTHOR</a>(\"James Simmons <jsimmons@users.sf.net>\");", 
"<a class=\"id\" href=\"#MODULE_DESCRIPTION\">MODULE_DESCRIPTION</a>(\"Generic software accelerated fill rectangle\");", 
"<a class=\"id\" href=\"#MODULE_LICENSE\">MODULE_LICENSE</a>(\"GPL\");", 
];
xr_frag_insert('l/1d/2fc5eb904565dde789fd9226415dbdbf73eebe.xr', __xr_tmp);
