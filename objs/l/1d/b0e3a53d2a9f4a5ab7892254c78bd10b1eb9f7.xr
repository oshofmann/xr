var __xr_tmp = [
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#smp\">smp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#tlbflush\">tlbflush</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#mmu_context\">mmu_context</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#cache\">cache</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#apic\">apic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uv\">uv</a>/<a class=\"id\" href=\"#uv\">uv</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<a class=\"id\" href=\"#DEFINE_PER_CPU_SHARED_ALIGNED\">DEFINE_PER_CPU_SHARED_ALIGNED</a>(struct <a class=\"id\" href=\"#tlb_state\">tlb_state</a>, <a class=\"id\" href=\"#cpu_tlbstate\">cpu_tlbstate</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= { &amp;<a class=\"id\" href=\"#init_mm\">init_mm</a>, 0, };", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Smarter SMP flushing macros.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>c/o Linus Torvalds.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>These mean you can really definitely utterly forget about</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>writing to user space from interrupts. (Its not allowed anyway).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Optimizations Manfred Spraul &lt;manfred@colorfullife.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>More scalable flush, from Andi Kleen</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>To avoid global state use 8 different call vectors.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Each CPU uses a specific vector to trigger flushes on other</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>CPUs. Depending on the received vector the target CPUs look into</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the right array slot for the flush data.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>With more than 8 CPUs they are hashed to the 8 available</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>vectors. The limited global vector space forces us to this right now.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>In future when interrupts are split into per CPU domains this could be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>fixed, at the cost of triggering multiple IPIs in some cases.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"union <a class=\"id\" href=\"#smp_flush_state\">smp_flush_state</a> {", 
"<span class=\"ts\"/>struct {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#flush_mm\">flush_mm</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flush_va\">flush_va</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spinlock_t\">raw_spinlock_t</a> <a class=\"id\" href=\"#tlbstate_lock\">tlbstate_lock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DECLARE_BITMAP\">DECLARE_BITMAP</a>(<a class=\"id\" href=\"#flush_cpumask\">flush_cpumask</a>, <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>);", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#pad\">pad</a>[<a class=\"id\" href=\"#INTERNODE_CACHE_BYTES\">INTERNODE_CACHE_BYTES</a>];", 
"} <a class=\"id\" href=\"#____cacheline_internodealigned_in_smp\">____cacheline_internodealigned_in_smp</a>;", 
"", 
"<span class=\"comment\">/* State is put into the per CPU data section, but padded</span>", 
"<span class=\"comment\">   to a full cache line because other CPUs can access it and we don't</span>", 
"<span class=\"comment\">   want false sharing in the per cpu data segment. */</span>", 
"static union <a class=\"id\" href=\"#smp_flush_state\">smp_flush_state</a> <a class=\"id\" href=\"#flush_state\">flush_state</a>[<a class=\"id\" href=\"#NUM_INVALIDATE_TLB_VECTORS\">NUM_INVALIDATE_TLB_VECTORS</a>];", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We cannot call mmdrop() because we are in interrupt context,</span>", 
"<span class=\"comment\"> * instead update mm-&gt;cpu_vm_mask.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#leave_mm\">leave_mm</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#percpu_read\">percpu_read</a>(<a class=\"id\" href=\"#cpu_tlbstate\">cpu_tlbstate</a>.<a class=\"id\" href=\"#state\">state</a>) == <a class=\"id\" href=\"#TLBSTATE_OK\">TLBSTATE_OK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear_cpu\">cpumask_clear_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#mm_cpumask\">mm_cpumask</a>(<a class=\"id\" href=\"#percpu_read\">percpu_read</a>(<a class=\"id\" href=\"#cpu_tlbstate\">cpu_tlbstate</a>.<a class=\"id\" href=\"#active_mm\">active_mm</a>)));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#load_cr3\">load_cr3</a>(<a class=\"id\" href=\"#swapper_pg_dir\">swapper_pg_dir</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#leave_mm\">leave_mm</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The flush IPI assumes that a thread switch happens in this order:</span>", 
"<span class=\"comment\"> * [cpu0: the cpu that switches]</span>", 
"<span class=\"comment\"> * 1) switch_mm() either 1a) or 1b)</span>", 
"<span class=\"comment\"> * 1a) thread switch to a different mm</span>", 
"<span class=\"comment\"> * 1a1) cpu_clear(cpu, old_mm-&gt;cpu_vm_mask);</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Stop ipi delivery for the old mm. This is not synchronized with</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the other cpus, but smp_invalidate_interrupt ignore flush ipis</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>for the wrong mm, and in the worst case we perform a superfluous</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>tlb flush.</span>", 
"<span class=\"comment\"> * 1a2) set cpu mmu_state to TLBSTATE_OK</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Now the smp_invalidate_interrupt won't call leave_mm if cpu0</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>was in lazy tlb mode.</span>", 
"<span class=\"comment\"> * 1a3) update cpu active_mm</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Now cpu0 accepts tlb flushes for the new mm.</span>", 
"<span class=\"comment\"> * 1a4) cpu_set(cpu, new_mm-&gt;cpu_vm_mask);</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Now the other cpus will send tlb flush ipis.</span>", 
"<span class=\"comment\"> * 1a4) change cr3.</span>", 
"<span class=\"comment\"> * 1b) thread switch without mm change</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>cpu active_mm is correct, cpu0 already handles</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>flush ipis.</span>", 
"<span class=\"comment\"> * 1b1) set cpu mmu_state to TLBSTATE_OK</span>", 
"<span class=\"comment\"> * 1b2) test_and_set the cpu bit in cpu_vm_mask.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Atomically set the bit [other cpus will start sending flush ipis],</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and test the bit.</span>", 
"<span class=\"comment\"> * 1b3) if the bit was 0: leave_mm was called, flush the tlb.</span>", 
"<span class=\"comment\"> * 2) switch %%esp, ie current</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The interrupt must handle 2 special cases:</span>", 
"<span class=\"comment\"> * - cr3 is changed before %%esp, ie. it cannot use current-&gt;{active_,}mm.</span>", 
"<span class=\"comment\"> * - the cpu performs speculative tlb reads, i.e. even if the cpu only</span>", 
"<span class=\"comment\"> *   runs in kernel space, the cpu could load tlb entries for user space</span>", 
"<span class=\"comment\"> *   pages.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The good news is that cpu mmu_state is local to each cpu, no</span>", 
"<span class=\"comment\"> * write/read ordering problems.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * TLB flush IPI:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 1) Flush the tlb entries if the cpu uses the mm that's being flushed.</span>", 
"<span class=\"comment\"> * 2) Leave the mm if we are in the lazy tlb mode.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Interrupts are disabled.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * FIXME: use of asmlinkage is not consistent.  On x86_64 it's noop</span>", 
"<span class=\"comment\"> * but still used for documentation purpose but the usage is slightly</span>", 
"<span class=\"comment\"> * inconsistent.  On x86_32, asmlinkage is regparm(0) but interrupt</span>", 
"<span class=\"comment\"> * entry calls in with the first parameter in %eax.  Maybe define</span>", 
"<span class=\"comment\"> * intrlinkage?</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<a class=\"id\" href=\"#asmlinkage\">asmlinkage</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"void <a class=\"id\" href=\"#smp_invalidate_interrupt\">smp_invalidate_interrupt</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#sender\">sender</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#smp_flush_state\">smp_flush_state</a> *<a class=\"id\" href=\"#f\">f</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * orig_rax contains the negated interrupt vector.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Use that to determine where the sender put the data.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sender\">sender</a> = ~<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#orig_ax\">orig_ax</a> - <a class=\"id\" href=\"#INVALIDATE_TLB_VECTOR_START\">INVALIDATE_TLB_VECTOR_START</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a> = &amp;<a class=\"id\" href=\"#flush_state\">flush_state</a>[<a class=\"id\" href=\"#sender\">sender</a>];", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#flush_cpumask\">flush_cpumask</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This was a BUG() but until someone can quote me the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * line from the intel manual that guarantees an IPI to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * multiple CPUs is retried _only_ on the erroring CPUs</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * its staying as a return</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * BUG();</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#flush_mm\">flush_mm</a> == <a class=\"id\" href=\"#percpu_read\">percpu_read</a>(<a class=\"id\" href=\"#cpu_tlbstate\">cpu_tlbstate</a>.<a class=\"id\" href=\"#active_mm\">active_mm</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#percpu_read\">percpu_read</a>(<a class=\"id\" href=\"#cpu_tlbstate\">cpu_tlbstate</a>.<a class=\"id\" href=\"#state\">state</a>) == <a class=\"id\" href=\"#TLBSTATE_OK\">TLBSTATE_OK</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#flush_va\">flush_va</a> == <a class=\"id\" href=\"#TLB_FLUSH_ALL\">TLB_FLUSH_ALL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_flush_tlb\">local_flush_tlb</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__flush_tlb_one\">__flush_tlb_one</a>(<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#flush_va\">flush_va</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#leave_mm\">leave_mm</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ack_APIC_irq\">ack_APIC_irq</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb__before_clear_bit\">smp_mb__before_clear_bit</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_clear_cpu\">cpumask_clear_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#flush_cpumask\">flush_cpumask</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb__after_clear_bit\">smp_mb__after_clear_bit</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inc_irq_stat\">inc_irq_stat</a>(<a class=\"id\" href=\"#irq_tlb_count\">irq_tlb_count</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#flush_tlb_others_ipi\">flush_tlb_others_ipi</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpumask\">cpumask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, unsigned long <a class=\"id\" href=\"#va\">va</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#sender\">sender</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#smp_flush_state\">smp_flush_state</a> *<a class=\"id\" href=\"#f\">f</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Caller has disabled preemption */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sender\">sender</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>() % <a class=\"id\" href=\"#NUM_INVALIDATE_TLB_VECTORS\">NUM_INVALIDATE_TLB_VECTORS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a> = &amp;<a class=\"id\" href=\"#flush_state\">flush_state</a>[<a class=\"id\" href=\"#sender\">sender</a>];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Could avoid this lock when</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * num_online_cpus() &lt;= NUM_INVALIDATE_TLB_VECTORS, but it is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * probably not worth checking this for a cache-hot lock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#tlbstate_lock\">tlbstate_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#flush_mm\">flush_mm</a> = <a class=\"id\" href=\"#mm\">mm</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#flush_va\">flush_va</a> = <a class=\"id\" href=\"#va\">va</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_andnot\">cpumask_andnot</a>(<a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#flush_cpumask\">flush_cpumask</a>), <a class=\"id\" href=\"#cpumask\">cpumask</a>, <a class=\"id\" href=\"#cpumask_of\">cpumask_of</a>(<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>()))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We have to send the IPI only to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * CPUs affected.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#apic\">apic</a>-><a class=\"id\" href=\"#send_IPI_mask\">send_IPI_mask</a>(<a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#flush_cpumask\">flush_cpumask</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#INVALIDATE_TLB_VECTOR_START\">INVALIDATE_TLB_VECTOR_START</a> + <a class=\"id\" href=\"#sender\">sender</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>while (!<a class=\"id\" href=\"#cpumask_empty\">cpumask_empty</a>(<a class=\"id\" href=\"#to_cpumask\">to_cpumask</a>(<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#flush_cpumask\">flush_cpumask</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#flush_mm\">flush_mm</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#flush_va\">flush_va</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#tlbstate_lock\">tlbstate_lock</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#native_flush_tlb_others\">native_flush_tlb_others</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpumask\">cpumask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>, unsigned long <a class=\"id\" href=\"#va\">va</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_uv_system\">is_uv_system</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#get_cpu\">get_cpu</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpumask\">cpumask</a> = <a class=\"id\" href=\"#uv_flush_tlb_others\">uv_flush_tlb_others</a>(<a class=\"id\" href=\"#cpumask\">cpumask</a>, <a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#va\">va</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask\">cpumask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_tlb_others_ipi\">flush_tlb_others_ipi</a>(<a class=\"id\" href=\"#cpumask\">cpumask</a>, <a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#va\">va</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_cpu\">put_cpu</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_tlb_others_ipi\">flush_tlb_others_ipi</a>(<a class=\"id\" href=\"#cpumask\">cpumask</a>, <a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#va\">va</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#init_smp_flush\">init_smp_flush</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#flush_state\">flush_state</a>); <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_init\">raw_spin_lock_init</a>(&amp;<a class=\"id\" href=\"#flush_state\">flush_state</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#tlbstate_lock\">tlbstate_lock</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#core_initcall\">core_initcall</a>(<a class=\"id\" href=\"#init_smp_flush\">init_smp_flush</a>);", 
"", 
"void <a class=\"id\" href=\"#flush_tlb_current_task\">flush_tlb_current_task</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_flush_tlb\">local_flush_tlb</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_any_but\">cpumask_any_but</a>(<a class=\"id\" href=\"#mm_cpumask\">mm_cpumask</a>(<a class=\"id\" href=\"#mm\">mm</a>), <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>()) &lt; <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_tlb_others\">flush_tlb_others</a>(<a class=\"id\" href=\"#mm_cpumask\">mm_cpumask</a>(<a class=\"id\" href=\"#mm\">mm</a>), <a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#TLB_FLUSH_ALL\">TLB_FLUSH_ALL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"}", 
"", 
"void <a class=\"id\" href=\"#flush_tlb_mm\">flush_tlb_mm</a>(struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#active_mm\">active_mm</a> == <a class=\"id\" href=\"#mm\">mm</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_flush_tlb\">local_flush_tlb</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#leave_mm\">leave_mm</a>(<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_any_but\">cpumask_any_but</a>(<a class=\"id\" href=\"#mm_cpumask\">mm_cpumask</a>(<a class=\"id\" href=\"#mm\">mm</a>), <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>()) &lt; <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_tlb_others\">flush_tlb_others</a>(<a class=\"id\" href=\"#mm_cpumask\">mm_cpumask</a>(<a class=\"id\" href=\"#mm\">mm</a>), <a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#TLB_FLUSH_ALL\">TLB_FLUSH_ALL</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"}", 
"", 
"void <a class=\"id\" href=\"#flush_tlb_page\">flush_tlb_page</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>, unsigned long <a class=\"id\" href=\"#va\">va</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a> = <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_mm\">vm_mm</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#active_mm\">active_mm</a> == <a class=\"id\" href=\"#mm\">mm</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__flush_tlb_one\">__flush_tlb_one</a>(<a class=\"id\" href=\"#va\">va</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#leave_mm\">leave_mm</a>(<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpumask_any_but\">cpumask_any_but</a>(<a class=\"id\" href=\"#mm_cpumask\">mm_cpumask</a>(<a class=\"id\" href=\"#mm\">mm</a>), <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>()) &lt; <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_tlb_others\">flush_tlb_others</a>(<a class=\"id\" href=\"#mm_cpumask\">mm_cpumask</a>(<a class=\"id\" href=\"#mm\">mm</a>), <a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#va\">va</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#do_flush_tlb_all\">do_flush_tlb_all</a>(void *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__flush_tlb_all\">__flush_tlb_all</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#percpu_read\">percpu_read</a>(<a class=\"id\" href=\"#cpu_tlbstate\">cpu_tlbstate</a>.<a class=\"id\" href=\"#state\">state</a>) == <a class=\"id\" href=\"#TLBSTATE_LAZY\">TLBSTATE_LAZY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#leave_mm\">leave_mm</a>(<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>());", 
"}", 
"", 
"void <a class=\"id\" href=\"#flush_tlb_all\">flush_tlb_all</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#on_each_cpu\">on_each_cpu</a>(<a class=\"id\" href=\"#do_flush_tlb_all\">do_flush_tlb_all</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 1);", 
"}", 
];
xr_frag_insert('l/1d/b0e3a53d2a9f4a5ab7892254c78bd10b1eb9f7.xr', __xr_tmp);
