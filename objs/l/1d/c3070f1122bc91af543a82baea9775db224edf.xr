var __xr_tmp = [
"<span class=\"comment\"> *              returned is always exactly of length ACPI_EISAID_STRING_SIZE</span>", 
"<span class=\"comment\"> *              (includes null terminator). The EISAID is always 32 bits.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"void <a class=\"id\" href=\"#acpi_ex_eisa_id_to_string\">acpi_ex_eisa_id_to_string</a>(char *<a class=\"id\" href=\"#out_string\">out_string</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#compressed_id\">compressed_id</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#swapped_id\">swapped_id</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_ENTRY\">ACPI_FUNCTION_ENTRY</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The EISAID should be a 32-bit integer */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#compressed_id\">compressed_id</a> &gt; <a class=\"id\" href=\"#ACPI_UINT32_MAX\">ACPI_UINT32_MAX</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_WARNING\">ACPI_WARNING</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"Expected EISAID is larger than 32 bits: 0x%8.8X%8.8X, truncating\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#ACPI_FORMAT_UINT64\">ACPI_FORMAT_UINT64</a>(<a class=\"id\" href=\"#compressed_id\">compressed_id</a>)));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Swap ID to big-endian to get contiguous bits */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swapped_id\">swapped_id</a> = <a class=\"id\" href=\"#acpi_ut_dword_byte_swap\">acpi_ut_dword_byte_swap</a>((<a class=\"id\" href=\"#u32\">u32</a>)<a class=\"id\" href=\"#compressed_id\">compressed_id</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* First 3 bytes are uppercase letters. Next 4 bytes are hexadecimal */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#out_string\">out_string</a>[0] =", 
"<span class=\"ts\"/>    (char)(0x40 + (((unsigned long)<a class=\"id\" href=\"#swapped_id\">swapped_id</a> >> 26) &amp; 0x1F));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#out_string\">out_string</a>[1] = (char)(0x40 + ((<a class=\"id\" href=\"#swapped_id\">swapped_id</a> >> 21) &amp; 0x1F));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#out_string\">out_string</a>[2] = (char)(0x40 + ((<a class=\"id\" href=\"#swapped_id\">swapped_id</a> >> 16) &amp; 0x1F));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#out_string\">out_string</a>[3] = <a class=\"id\" href=\"#acpi_ut_hex_to_ascii_char\">acpi_ut_hex_to_ascii_char</a>((<a class=\"id\" href=\"#u64\">u64</a>) <a class=\"id\" href=\"#swapped_id\">swapped_id</a>, 12);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#out_string\">out_string</a>[4] = <a class=\"id\" href=\"#acpi_ut_hex_to_ascii_char\">acpi_ut_hex_to_ascii_char</a>((<a class=\"id\" href=\"#u64\">u64</a>) <a class=\"id\" href=\"#swapped_id\">swapped_id</a>, 8);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#out_string\">out_string</a>[5] = <a class=\"id\" href=\"#acpi_ut_hex_to_ascii_char\">acpi_ut_hex_to_ascii_char</a>((<a class=\"id\" href=\"#u64\">u64</a>) <a class=\"id\" href=\"#swapped_id\">swapped_id</a>, 4);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#out_string\">out_string</a>[6] = <a class=\"id\" href=\"#acpi_ut_hex_to_ascii_char\">acpi_ut_hex_to_ascii_char</a>((<a class=\"id\" href=\"#u64\">u64</a>) <a class=\"id\" href=\"#swapped_id\">swapped_id</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#out_string\">out_string</a>[7] = 0;", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ex_integer_to_string</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  out_string      - Where to put the converted string. At least</span>", 
"<span class=\"comment\"> *                                21 bytes are needed to hold the largest</span>", 
"<span class=\"comment\"> *                                possible 64-bit integer.</span>", 
"<span class=\"comment\"> *              Value           - Value to be converted</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      None, string</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Convert a 64-bit integer to decimal string representation.</span>", 
"<span class=\"comment\"> *              Assumes string buffer is large enough to hold the string. The</span>", 
"<span class=\"comment\"> *              largest string is (ACPI_MAX64_DECIMAL_DIGITS + 1).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"void <a class=\"id\" href=\"#acpi_ex_integer_to_string\">acpi_ex_integer_to_string</a>(char *<a class=\"id\" href=\"#out_string\">out_string</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#digits_needed\">digits_needed</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#remainder\">remainder</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_ENTRY\">ACPI_FUNCTION_ENTRY</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#digits_needed\">digits_needed</a> = <a class=\"id\" href=\"#acpi_ex_digits_needed\">acpi_ex_digits_needed</a>(<a class=\"id\" href=\"#value\">value</a>, 10);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#out_string\">out_string</a>[<a class=\"id\" href=\"#digits_needed\">digits_needed</a>] = 0;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#digits_needed\">digits_needed</a>; <a class=\"id\" href=\"#count\">count</a> &gt; 0; <a class=\"id\" href=\"#count\">count</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/>(void)<a class=\"id\" href=\"#acpi_ut_short_divide\">acpi_ut_short_divide</a>(<a class=\"id\" href=\"#value\">value</a>, 10, &amp;<a class=\"id\" href=\"#value\">value</a>, &amp;<a class=\"id\" href=\"#remainder\">remainder</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#out_string\">out_string</a>[<a class=\"id\" href=\"#count\">count</a> - 1] = (char)('0' + <a class=\"id\" href=\"#remainder\">remainder</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/1d/c3070f1122bc91af543a82baea9775db224edf.xr', __xr_tmp);
