var __xr_tmp = [
"<span class=\"comment\"> * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR</span>", 
"<span class=\"comment\"> * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF</span>", 
"<span class=\"comment\"> * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span>", 
"<span class=\"comment\"> * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE</span>", 
"<span class=\"comment\"> * USE OF THIS SOFTWARE, EVEN IF NOT ADVISED OF THE POSSIBILITY OF SUCH</span>", 
"<span class=\"comment\"> * DAMAGE.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * (now, with legal B.S. out of the way.....)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This routine gathers environmental noise from device drivers, etc.,</span>", 
"<span class=\"comment\"> * and returns good random numbers, suitable for cryptographic use.</span>", 
"<span class=\"comment\"> * Besides the obvious cryptographic uses, these numbers are also good</span>", 
"<span class=\"comment\"> * for seeding TCP sequence numbers, and other places where it is</span>", 
"<span class=\"comment\"> * desirable to have numbers which are not only random, but hard to</span>", 
"<span class=\"comment\"> * predict by an attacker.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Theory of operation</span>", 
"<span class=\"comment\"> * ===================</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Computers are very predictable devices.  Hence it is extremely hard</span>", 
"<span class=\"comment\"> * to produce truly random numbers on a computer --- as opposed to</span>", 
"<span class=\"comment\"> * pseudo-random numbers, which can easily generated by using a</span>", 
"<span class=\"comment\"> * algorithm.  Unfortunately, it is very easy for attackers to guess</span>", 
"<span class=\"comment\"> * the sequence of pseudo-random number generators, and for some</span>", 
"<span class=\"comment\"> * applications this is not acceptable.  So instead, we must try to</span>", 
"<span class=\"comment\"> * gather \"environmental noise\" from the computer's environment, which</span>", 
"<span class=\"comment\"> * must be hard for outside attackers to observe, and use that to</span>", 
"<span class=\"comment\"> * generate random numbers.  In a Unix environment, this is best done</span>", 
"<span class=\"comment\"> * from inside the kernel.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Sources of randomness from the environment include inter-keyboard</span>", 
"<span class=\"comment\"> * timings, inter-interrupt timings from some interrupts, and other</span>", 
"<span class=\"comment\"> * events which are both (a) non-deterministic and (b) hard for an</span>", 
"<span class=\"comment\"> * outside observer to measure.  Randomness from these sources are</span>", 
"<span class=\"comment\"> * added to an \"entropy pool\", which is mixed using a CRC-like function.</span>", 
"<span class=\"comment\"> * This is not cryptographically strong, but it is adequate assuming</span>", 
"<span class=\"comment\"> * the randomness is not chosen maliciously, and it is fast enough that</span>", 
"<span class=\"comment\"> * the overhead of doing it on every interrupt is very reasonable.</span>", 
"<span class=\"comment\"> * As random bytes are mixed into the entropy pool, the routines keep</span>", 
"<span class=\"comment\"> * an *estimate* of how many bits of randomness have been stored into</span>", 
"<span class=\"comment\"> * the random number generator's internal state.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When random bytes are desired, they are obtained by taking the SHA</span>", 
"<span class=\"comment\"> * hash of the contents of the \"entropy pool\".  The SHA hash avoids</span>", 
"<span class=\"comment\"> * exposing the internal state of the entropy pool.  It is believed to</span>", 
"<span class=\"comment\"> * be computationally infeasible to derive any useful information</span>", 
"<span class=\"comment\"> * about the input of SHA from its output.  Even if it is possible to</span>", 
"<span class=\"comment\"> * analyze SHA in some clever way, as long as the amount of data</span>", 
"<span class=\"comment\"> * returned from the generator is less than the inherent entropy in</span>", 
"<span class=\"comment\"> * the pool, the output data is totally unpredictable.  For this</span>", 
"<span class=\"comment\"> * reason, the routine decreases its internal estimate of how many</span>", 
"<span class=\"comment\"> * bits of \"true randomness\" are contained in the entropy pool as it</span>", 
"<span class=\"comment\"> * outputs random numbers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If this estimate goes to zero, the routine can still generate</span>", 
"<span class=\"comment\"> * random numbers; however, an attacker may (at least in theory) be</span>", 
"<span class=\"comment\"> * able to infer the future output of the generator from prior</span>", 
"<span class=\"comment\"> * outputs.  This requires successful cryptanalysis of SHA, which is</span>", 
"<span class=\"comment\"> * not believed to be feasible, but there is a remote possibility.</span>", 
"<span class=\"comment\"> * Nonetheless, these numbers should be useful for the vast majority</span>", 
"<span class=\"comment\"> * of purposes.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Exported interfaces ---- output</span>", 
"<span class=\"comment\"> * ===============================</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * There are three exported interfaces; the first is one designed to</span>", 
"<span class=\"comment\"> * be used from within the kernel:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>void get_random_bytes(void *buf, int nbytes);</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This interface will return the requested number of random bytes,</span>", 
"<span class=\"comment\"> * and place it in the requested buffer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The two other interfaces are two character devices /dev/random and</span>", 
"<span class=\"comment\"> * /dev/urandom.  /dev/random is suitable for use when very high</span>", 
"<span class=\"comment\"> * quality randomness is desired (for example, for key generation or</span>", 
"<span class=\"comment\"> * one-time pads), as it will only return a maximum of the number of</span>", 
"<span class=\"comment\"> * bits of randomness (as estimated by the random number generator)</span>", 
"<span class=\"comment\"> * contained in the entropy pool.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The /dev/urandom device does not have this limit, and will return</span>", 
"<span class=\"comment\"> * as many bytes as are requested.  As more and more random bytes are</span>", 
"<span class=\"comment\"> * requested without giving time for the entropy pool to recharge,</span>", 
"<span class=\"comment\"> * this will result in random numbers that are merely cryptographically</span>", 
"<span class=\"comment\"> * strong.  For many applications, however, this is acceptable.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Exported interfaces ---- input</span>", 
"<span class=\"comment\"> * ==============================</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The current exported interfaces for gathering environmental noise</span>", 
"<span class=\"comment\"> * from the devices are:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>void add_input_randomness(unsigned int type, unsigned int code,</span>", 
"<span class=\"comment\"> *                                unsigned int value);</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>void add_interrupt_randomness(int irq);</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * add_input_randomness() uses the input layer interrupt timing, as well as</span>", 
"<span class=\"comment\"> * the event type information from the hardware.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * add_interrupt_randomness() uses the inter-interrupt timing as random</span>", 
"<span class=\"comment\"> * inputs to the entropy pool.  Note that not all interrupts are good</span>", 
"<span class=\"comment\"> * sources of randomness!  For example, the timer interrupts is not a</span>", 
"<span class=\"comment\"> * good choice, because the periodicity of the interrupts is too</span>", 
"<span class=\"comment\"> * regular, and hence predictable to an attacker.  Disk interrupts are</span>", 
"<span class=\"comment\"> * a better measure, since the timing of the disk interrupts are more</span>", 
"<span class=\"comment\"> * unpredictable.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * All of these routines try to estimate how many bits of randomness a</span>", 
"<span class=\"comment\"> * particular randomness source.  They do this by keeping track of the</span>", 
"<span class=\"comment\"> * first and second order deltas of the event timings.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Ensuring unpredictability at system startup</span>", 
"<span class=\"comment\"> * ============================================</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When any operating system starts up, it will go through a sequence</span>", 
"<span class=\"comment\"> * of actions that are fairly predictable by an adversary, especially</span>", 
"<span class=\"comment\"> * if the start-up does not involve interaction with a human operator.</span>", 
"<span class=\"comment\"> * This reduces the actual number of bits of unpredictability in the</span>", 
"<span class=\"comment\"> * entropy pool below the value in entropy_count.  In order to</span>", 
"<span class=\"comment\"> * counteract this effect, it helps to carry information in the</span>", 
"<span class=\"comment\"> * entropy pool across shut-downs and start-ups.  To do this, put the</span>", 
"<span class=\"comment\"> * following lines an appropriate script which is run during the boot</span>", 
"<span class=\"comment\"> * sequence:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>echo \"Initializing random number generator...\"</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>random_seed=/var/run/random-seed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/># Carry a random seed from start-up to start-up</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/># Load and then save the whole entropy pool</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>if [ -f $random_seed ]; then</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>cat $random_seed &gt;/dev/urandom</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>else</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>touch $random_seed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>fi</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>chmod 600 $random_seed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dd if=/dev/urandom of=$random_seed count=1 bs=512</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * and the following lines in an appropriate script which is run as</span>", 
"<span class=\"comment\"> * the system is shutdown:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/># Carry a random seed from shut-down to start-up</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/># Save the whole entropy pool</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>echo \"Saving random seed...\"</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>random_seed=/var/run/random-seed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>touch $random_seed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>chmod 600 $random_seed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>dd if=/dev/urandom of=$random_seed count=1 bs=512</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For example, on most modern systems using the System V init</span>", 
"<span class=\"comment\"> * scripts, such code fragments would be found in</span>", 
"<span class=\"comment\"> * /etc/rc.d/init.d/random.  On older Linux systems, the correct script</span>", 
"<span class=\"comment\"> * location might be in /etc/rcb.d/rc.local or /etc/rc.d/rc.0.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Effectively, these commands cause the contents of the entropy pool</span>", 
"<span class=\"comment\"> * to be saved at shut-down time and reloaded into the entropy pool at</span>", 
"<span class=\"comment\"> * start-up.  (The 'dd' in the addition to the bootup script is to</span>", 
"<span class=\"comment\"> * make sure that /etc/random-seed is different for every start-up,</span>", 
"<span class=\"comment\"> * even if the system crashes without executing rc.0.)  Even with</span>", 
"<span class=\"comment\"> * complete knowledge of the start-up activities, predicting the state</span>", 
"<span class=\"comment\"> * of the entropy pool requires knowledge of the previous history of</span>", 
"<span class=\"comment\"> * the system.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Configuring the /dev/random driver under Linux</span>", 
"<span class=\"comment\"> * ==============================================</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The /dev/random driver under Linux uses minor numbers 8 and 9 of</span>", 
"<span class=\"comment\"> * the /dev/mem major number (#1).  So if your system does not have</span>", 
"<span class=\"comment\"> * /dev/random and /dev/urandom created already, they can be created</span>", 
"<span class=\"comment\"> * by using the commands:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>mknod /dev/random c 1 8</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>mknod /dev/urandom c 1 9</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Acknowledgements:</span>", 
"<span class=\"comment\"> * =================</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Ideas for constructing this random number generator were derived</span>", 
"<span class=\"comment\"> * from Pretty Good Privacy's random number generator, and from private</span>", 
"<span class=\"comment\"> * discussions with Phil Karn.  Colin Plumb provided a faster random</span>", 
"<span class=\"comment\"> * number generator, which speed up the mixing function of the entropy</span>", 
"<span class=\"comment\"> * pool, taken from PGPfone.  Dale Worley has also contributed many</span>", 
"<span class=\"comment\"> * useful ideas and suggestions to improve this driver.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Any flaws in the design are solely my responsibility, and should</span>", 
"<span class=\"comment\"> * not be attributed to the Phil, Colin, or any of authors of PGP.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Further background information on this topic may be obtained from</span>", 
"<span class=\"comment\"> * RFC 1750, \"Randomness Recommendations for Security\", by Donald</span>", 
"<span class=\"comment\"> * Eastlake, Steve Crocker, and Jeff Schiller.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#utsname\">utsname</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#major\">major</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fcntl\">fcntl</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#random\">random</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#poll\">poll</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#genhd\">genhd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#percpu\">percpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cryptohash\">cryptohash</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fips\">fips</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_GENERIC_HARDIRQS\">CONFIG_GENERIC_HARDIRQS</a>", 
"# <a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#irq\">irq</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#processor\">processor</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#irq\">irq</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Configuration information</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INPUT_POOL_WORDS\">INPUT_POOL_WORDS</a> 128", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#OUTPUT_POOL_WORDS\">OUTPUT_POOL_WORDS</a> 32", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SEC_XFER_SIZE\">SEC_XFER_SIZE</a> 512", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EXTRACT_SIZE\">EXTRACT_SIZE</a> 10", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The minimum number of bits of entropy before we wake up a read on</span>", 
"<span class=\"comment\"> * /dev/random.  Should be enough to do a significant reseed.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#random_read_wakeup_thresh\">random_read_wakeup_thresh</a> = 64;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If the entropy count falls under this number of bits, then we</span>", 
"<span class=\"comment\"> * should wake up processes which are selecting or polling on write</span>", 
"<span class=\"comment\"> * access to /dev/random.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#random_write_wakeup_thresh\">random_write_wakeup_thresh</a> = 128;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * When the input pool goes over trickle_thresh, start dropping most</span>", 
"<span class=\"comment\"> * samples to avoid wasting CPU time and reduce lock contention.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#trickle_thresh\">trickle_thresh</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = <a class=\"id\" href=\"#INPUT_POOL_WORDS\">INPUT_POOL_WORDS</a> * 28;", 
"", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(int, <a class=\"id\" href=\"#trickle_count\">trickle_count</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A pool of size .poolwords is stirred with a primitive polynomial</span>", 
"<span class=\"comment\"> * of degree .poolwords over GF(2).  The taps for various sizes are</span>", 
"<span class=\"comment\"> * defined below.  They are chosen to be evenly spaced (minimum RMS</span>", 
"<span class=\"comment\"> * distance from evenly spaced; the numbers in the comments are a</span>", 
"<span class=\"comment\"> * scaled squared error sum) except for the last tap, which is 1 to</span>", 
"<span class=\"comment\"> * get the twisting happening as fast as possible.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#poolinfo\">poolinfo</a> {", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#poolwords\">poolwords</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#tap1\">tap1</a>, <a class=\"id\" href=\"#tap2\">tap2</a>, <a class=\"id\" href=\"#tap3\">tap3</a>, <a class=\"id\" href=\"#tap4\">tap4</a>, <a class=\"id\" href=\"#tap5\">tap5</a>;", 
"} <a class=\"id\" href=\"#poolinfo_table\">poolinfo_table</a>[] = {", 
"<span class=\"ts\"/><span class=\"comment\">/* x^128 + x^103 + x^76 + x^51 +x^25 + x + 1 -- 105 */</span>", 
"<span class=\"ts\"/>{ 128,<span class=\"ts\"/>103,<span class=\"ts\"/>76,<span class=\"ts\"/>51,<span class=\"ts\"/>25,<span class=\"ts\"/>1 },", 
"<span class=\"ts\"/><span class=\"comment\">/* x^32 + x^26 + x^20 + x^14 + x^7 + x + 1 -- 15 */</span>", 
"<span class=\"ts\"/>{ 32,<span class=\"ts\"/>26,<span class=\"ts\"/>20,<span class=\"ts\"/>14,<span class=\"ts\"/>7,<span class=\"ts\"/>1 },", 
"#if 0", 
"<span class=\"ts\"/><span class=\"comment\">/* x^2048 + x^1638 + x^1231 + x^819 + x^411 + x + 1  -- 115 */</span>", 
"<span class=\"ts\"/>{ 2048,<span class=\"ts\"/>1638,<span class=\"ts\"/>1231,<span class=\"ts\"/>819,<span class=\"ts\"/>411,<span class=\"ts\"/>1 },", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* x^1024 + x^817 + x^615 + x^412 + x^204 + x + 1 -- 290 */</span>", 
"<span class=\"ts\"/>{ 1024,<span class=\"ts\"/>817,<span class=\"ts\"/>615,<span class=\"ts\"/>412,<span class=\"ts\"/>204,<span class=\"ts\"/>1 },", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* x^1024 + x^819 + x^616 + x^410 + x^207 + x^2 + 1 -- 115 */</span>", 
"<span class=\"ts\"/>{ 1024,<span class=\"ts\"/>819,<span class=\"ts\"/>616,<span class=\"ts\"/>410,<span class=\"ts\"/>207,<span class=\"ts\"/>2 },", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* x^512 + x^411 + x^308 + x^208 + x^104 + x + 1 -- 225 */</span>", 
"<span class=\"ts\"/>{ 512,<span class=\"ts\"/>411,<span class=\"ts\"/>308,<span class=\"ts\"/>208,<span class=\"ts\"/>104,<span class=\"ts\"/>1 },", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* x^512 + x^409 + x^307 + x^206 + x^102 + x^2 + 1 -- 95 */</span>", 
"<span class=\"ts\"/>{ 512,<span class=\"ts\"/>409,<span class=\"ts\"/>307,<span class=\"ts\"/>206,<span class=\"ts\"/>102,<span class=\"ts\"/>2 },", 
"<span class=\"ts\"/><span class=\"comment\">/* x^512 + x^409 + x^309 + x^205 + x^103 + x^2 + 1 -- 95 */</span>", 
"<span class=\"ts\"/>{ 512,<span class=\"ts\"/>409,<span class=\"ts\"/>309,<span class=\"ts\"/>205,<span class=\"ts\"/>103,<span class=\"ts\"/>2 },", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* x^256 + x^205 + x^155 + x^101 + x^52 + x + 1 -- 125 */</span>", 
"<span class=\"ts\"/>{ 256,<span class=\"ts\"/>205,<span class=\"ts\"/>155,<span class=\"ts\"/>101,<span class=\"ts\"/>52,<span class=\"ts\"/>1 },", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* x^128 + x^103 + x^78 + x^51 + x^27 + x^2 + 1 -- 70 */</span>", 
"<span class=\"ts\"/>{ 128,<span class=\"ts\"/>103,<span class=\"ts\"/>78,<span class=\"ts\"/>51,<span class=\"ts\"/>27,<span class=\"ts\"/>2 },", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* x^64 + x^52 + x^39 + x^26 + x^14 + x + 1 -- 15 */</span>", 
"<span class=\"ts\"/>{ 64,<span class=\"ts\"/>52,<span class=\"ts\"/>39,<span class=\"ts\"/>26,<span class=\"ts\"/>14,<span class=\"ts\"/>1 },", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#POOLBITS\">POOLBITS</a><span class=\"ts\"/><a class=\"id\" href=\"#poolwords\">poolwords</a>*32", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#POOLBYTES\">POOLBYTES</a><span class=\"ts\"/><a class=\"id\" href=\"#poolwords\">poolwords</a>*4", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * For the purposes of better mixing, we use the CRC-32 polynomial as</span>", 
"<span class=\"comment\"> * well to make a twisted Generalized Feedback Shift Reigster</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (See M. Matsumoto &amp; Y. Kurita, 1992.  Twisted GFSR generators.  ACM</span>", 
"<span class=\"comment\"> * Transactions on Modeling and Computer Simulation 2(3):179-194.</span>", 
"<span class=\"comment\"> * Also see M. Matsumoto &amp; Y. Kurita, 1994.  Twisted GFSR generators</span>", 
"<span class=\"comment\"> * II.  ACM Transactions on Mdeling and Computer Simulation 4:254-266)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Thanks to Colin Plumb for suggesting this.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We have not analyzed the resultant polynomial to prove it primitive;</span>", 
"<span class=\"comment\"> * in fact it almost certainly isn't.  Nonetheless, the irreducible factors</span>", 
"<span class=\"comment\"> * of a random large-degree polynomial over GF(2) are more than large enough</span>", 
"<span class=\"comment\"> * that periodicity is not a concern.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The input hash is much less sensitive than the output hash.  All</span>", 
"<span class=\"comment\"> * that we want of it is that it be a good non-cryptographic hash;</span>", 
"<span class=\"comment\"> * i.e. it not produce collisions when fed \"random\" data of the sort</span>", 
"<span class=\"comment\"> * we expect to see.  As long as the pool state differs for different</span>", 
"<span class=\"comment\"> * inputs, we have preserved the input entropy and done a good job.</span>", 
"<span class=\"comment\"> * The fact that an intelligent attacker can construct inputs that</span>", 
"<span class=\"comment\"> * will produce controlled alterations to the pool's state is not</span>", 
"<span class=\"comment\"> * important because we don't consider such inputs to contribute any</span>", 
"<span class=\"comment\"> * randomness.  The only property we need with respect to them is that</span>", 
"<span class=\"comment\"> * the attacker can't increase his/her knowledge of the pool's state.</span>", 
"<span class=\"comment\"> * Since all additions are reversible (knowing the final state and the</span>", 
"<span class=\"comment\"> * input, you can reconstruct the initial state), if an attacker has</span>", 
"<span class=\"comment\"> * any uncertainty about the initial state, he/she can only shuffle</span>", 
"<span class=\"comment\"> * that uncertainty about, but never cause any collisions (which would</span>", 
"<span class=\"comment\"> * decrease the uncertainty).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The chosen system lets the state of the pool be (essentially) the input</span>", 
"<span class=\"comment\"> * modulo the generator polymnomial.  Now, for random primitive polynomials,</span>", 
"<span class=\"comment\"> * this is a universal class of hash functions, meaning that the chance</span>", 
"<span class=\"comment\"> * of a collision is limited by the attacker's knowledge of the generator</span>", 
"<span class=\"comment\"> * polynomail, so if it is chosen at random, an attacker can never force</span>", 
"<span class=\"comment\"> * a collision.  Here, we use a fixed polynomial, but we *can* assume that</span>", 
"<span class=\"comment\"> * ###--&gt; it is unknown to the processes generating the input entropy. &lt;-###</span>", 
"<span class=\"comment\"> * Because of this important property, this is a good, collision-resistant</span>", 
"<span class=\"comment\"> * hash; hash collisions will occur no more often than chance.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Static global variables</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#DECLARE_WAIT_QUEUE_HEAD\">DECLARE_WAIT_QUEUE_HEAD</a>(<a class=\"id\" href=\"#random_read_wait\">random_read_wait</a>);", 
"static <a class=\"id\" href=\"#DECLARE_WAIT_QUEUE_HEAD\">DECLARE_WAIT_QUEUE_HEAD</a>(<a class=\"id\" href=\"#random_write_wait\">random_write_wait</a>);", 
"static struct <a class=\"id\" href=\"#fasync_struct\">fasync_struct</a> *<a class=\"id\" href=\"#fasync\">fasync</a>;", 
"", 
"#if 0", 
"static int <a class=\"id\" href=\"#debug\">debug</a>;", 
"<a class=\"id\" href=\"#module_param\">module_param</a>(<a class=\"id\" href=\"#debug\">debug</a>, <a class=\"id\" href=\"#bool\">bool</a>, 0644);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEBUG_ENT\">DEBUG_ENT</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#arg\">arg</a>...) do { \\", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#debug\">debug</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"random %04d %04d %04d: \" \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fmt\">fmt</a>,\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_pool\">input_pool</a>.<a class=\"id\" href=\"#entropy_count\">entropy_count</a>,\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blocking_pool\">blocking_pool</a>.<a class=\"id\" href=\"#entropy_count\">entropy_count</a>,\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nonblocking_pool\">nonblocking_pool</a>.<a class=\"id\" href=\"#entropy_count\">entropy_count</a>,\\", 
"<span class=\"ts\"/><span class=\"ts\"/>## <a class=\"id\" href=\"#arg\">arg</a>); } while (0)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEBUG_ENT\">DEBUG_ENT</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#arg\">arg</a>...) do {} while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**********************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * OS independent entropy store.   Here are the functions which handle</span>", 
"<span class=\"comment\"> * storing entropy in an entropy pool.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> **********************************************************************/</span>", 
"", 
"struct <a class=\"id\" href=\"#entropy_store\">entropy_store</a>;", 
"struct <a class=\"id\" href=\"#entropy_store\">entropy_store</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* read-only data: */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#poolinfo\">poolinfo</a> *<a class=\"id\" href=\"#poolinfo\">poolinfo</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> *<a class=\"id\" href=\"#pool\">pool</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#entropy_store\">entropy_store</a> *<a class=\"id\" href=\"#pull\">pull</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#limit\">limit</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* read-write data: */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#lock\">lock</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#add_ptr\">add_ptr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#entropy_count\">entropy_count</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#input_rotate\">input_rotate</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u8\">__u8</a> <a class=\"id\" href=\"#last_data\">last_data</a>[<a class=\"id\" href=\"#EXTRACT_SIZE\">EXTRACT_SIZE</a>];", 
"};", 
"", 
"static <a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#input_pool_data\">input_pool_data</a>[<a class=\"id\" href=\"#INPUT_POOL_WORDS\">INPUT_POOL_WORDS</a>];", 
"static <a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#blocking_pool_data\">blocking_pool_data</a>[<a class=\"id\" href=\"#OUTPUT_POOL_WORDS\">OUTPUT_POOL_WORDS</a>];", 
"static <a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#nonblocking_pool_data\">nonblocking_pool_data</a>[<a class=\"id\" href=\"#OUTPUT_POOL_WORDS\">OUTPUT_POOL_WORDS</a>];", 
"", 
"static struct <a class=\"id\" href=\"#entropy_store\">entropy_store</a> <a class=\"id\" href=\"#input_pool\">input_pool</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#poolinfo\">poolinfo</a> = &amp;<a class=\"id\" href=\"#poolinfo_table\">poolinfo_table</a>[0],", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"input\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#limit\">limit</a> = 1,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#lock\">lock</a> = <a class=\"id\" href=\"#__SPIN_LOCK_UNLOCKED\">__SPIN_LOCK_UNLOCKED</a>(&amp;<a class=\"id\" href=\"#input_pool\">input_pool</a>.<a class=\"id\" href=\"#lock\">lock</a>),", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#pool\">pool</a> = <a class=\"id\" href=\"#input_pool_data\">input_pool_data</a>", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#entropy_store\">entropy_store</a> <a class=\"id\" href=\"#blocking_pool\">blocking_pool</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#poolinfo\">poolinfo</a> = &amp;<a class=\"id\" href=\"#poolinfo_table\">poolinfo_table</a>[1],", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"blocking\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#limit\">limit</a> = 1,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#pull\">pull</a> = &amp;<a class=\"id\" href=\"#input_pool\">input_pool</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#lock\">lock</a> = <a class=\"id\" href=\"#__SPIN_LOCK_UNLOCKED\">__SPIN_LOCK_UNLOCKED</a>(&amp;<a class=\"id\" href=\"#blocking_pool\">blocking_pool</a>.<a class=\"id\" href=\"#lock\">lock</a>),", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#pool\">pool</a> = <a class=\"id\" href=\"#blocking_pool_data\">blocking_pool_data</a>", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#entropy_store\">entropy_store</a> <a class=\"id\" href=\"#nonblocking_pool\">nonblocking_pool</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#poolinfo\">poolinfo</a> = &amp;<a class=\"id\" href=\"#poolinfo_table\">poolinfo_table</a>[1],", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a> = \"nonblocking\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#pull\">pull</a> = &amp;<a class=\"id\" href=\"#input_pool\">input_pool</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#lock\">lock</a> = <a class=\"id\" href=\"#__SPIN_LOCK_UNLOCKED\">__SPIN_LOCK_UNLOCKED</a>(&amp;<a class=\"id\" href=\"#nonblocking_pool\">nonblocking_pool</a>.<a class=\"id\" href=\"#lock\">lock</a>),", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#pool\">pool</a> = <a class=\"id\" href=\"#nonblocking_pool_data\">nonblocking_pool_data</a>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function adds bytes into the entropy \"pool\".  It does not</span>", 
"<span class=\"comment\"> * update the entropy estimate.  The caller should call</span>", 
"<span class=\"comment\"> * credit_entropy_bits if this is appropriate.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The pool is stirred with a primitive polynomial of the appropriate</span>", 
"<span class=\"comment\"> * degree, and then twisted.  We twist by three bits at a time because</span>", 
"<span class=\"comment\"> * it's cheap to do so and helps slightly in the expected case where</span>", 
"<span class=\"comment\"> * the entropy is concentrated in the low-order bits.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#mix_pool_bytes_extract\">mix_pool_bytes_extract</a>(struct <a class=\"id\" href=\"#entropy_store\">entropy_store</a> *<a class=\"id\" href=\"#r\">r</a>, const void *<a class=\"id\" href=\"#in\">in</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#nbytes\">nbytes</a>, <a class=\"id\" href=\"#__u8\">__u8</a> <a class=\"id\" href=\"#out\">out</a>[64])", 
"{", 
"<span class=\"ts\"/>static <a class=\"id\" href=\"#__u32\">__u32</a> const <a class=\"id\" href=\"#twist_table\">twist_table</a>[8] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>0x00000000, 0x3b6e20c8, 0x76dc4190, 0x4db26158,", 
"<span class=\"ts\"/><span class=\"ts\"/>0xedb88320, 0xd6d6a3e8, 0x9b64c2b0, 0xa00ae278 };", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#tap1\">tap1</a>, <a class=\"id\" href=\"#tap2\">tap2</a>, <a class=\"id\" href=\"#tap3\">tap3</a>, <a class=\"id\" href=\"#tap4\">tap4</a>, <a class=\"id\" href=\"#tap5\">tap5</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#input_rotate\">input_rotate</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#wordmask\">wordmask</a> = <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#poolinfo\">poolinfo</a>-><a class=\"id\" href=\"#poolwords\">poolwords</a> - 1;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#bytes\">bytes</a> = <a class=\"id\" href=\"#in\">in</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#w\">w</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Taps are constant, so we can load them without holding r-&gt;lock.  */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tap1\">tap1</a> = <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#poolinfo\">poolinfo</a>-><a class=\"id\" href=\"#tap1\">tap1</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tap2\">tap2</a> = <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#poolinfo\">poolinfo</a>-><a class=\"id\" href=\"#tap2\">tap2</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tap3\">tap3</a> = <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#poolinfo\">poolinfo</a>-><a class=\"id\" href=\"#tap3\">tap3</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tap4\">tap4</a> = <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#poolinfo\">poolinfo</a>-><a class=\"id\" href=\"#tap4\">tap4</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tap5\">tap5</a> = <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#poolinfo\">poolinfo</a>-><a class=\"id\" href=\"#tap5\">tap5</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#input_rotate\">input_rotate</a> = <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#input_rotate\">input_rotate</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#add_ptr\">add_ptr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* mix one byte at a time to simplify size handling and churn faster */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#nbytes\">nbytes</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#w\">w</a> = <a class=\"id\" href=\"#rol32\">rol32</a>(*<a class=\"id\" href=\"#bytes\">bytes</a>++, <a class=\"id\" href=\"#input_rotate\">input_rotate</a> &amp; 31);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = (<a class=\"id\" href=\"#i\">i</a> - 1) &amp; <a class=\"id\" href=\"#wordmask\">wordmask</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* XOR in the various taps */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#w\">w</a> ^= <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#pool\">pool</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#w\">w</a> ^= <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#pool\">pool</a>[(<a class=\"id\" href=\"#i\">i</a> + <a class=\"id\" href=\"#tap1\">tap1</a>) &amp; <a class=\"id\" href=\"#wordmask\">wordmask</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#w\">w</a> ^= <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#pool\">pool</a>[(<a class=\"id\" href=\"#i\">i</a> + <a class=\"id\" href=\"#tap2\">tap2</a>) &amp; <a class=\"id\" href=\"#wordmask\">wordmask</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#w\">w</a> ^= <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#pool\">pool</a>[(<a class=\"id\" href=\"#i\">i</a> + <a class=\"id\" href=\"#tap3\">tap3</a>) &amp; <a class=\"id\" href=\"#wordmask\">wordmask</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#w\">w</a> ^= <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#pool\">pool</a>[(<a class=\"id\" href=\"#i\">i</a> + <a class=\"id\" href=\"#tap4\">tap4</a>) &amp; <a class=\"id\" href=\"#wordmask\">wordmask</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#w\">w</a> ^= <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#pool\">pool</a>[(<a class=\"id\" href=\"#i\">i</a> + <a class=\"id\" href=\"#tap5\">tap5</a>) &amp; <a class=\"id\" href=\"#wordmask\">wordmask</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Mix the result back in with a twist */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#pool\">pool</a>[<a class=\"id\" href=\"#i\">i</a>] = (<a class=\"id\" href=\"#w\">w</a> >> 3) ^ <a class=\"id\" href=\"#twist_table\">twist_table</a>[<a class=\"id\" href=\"#w\">w</a> &amp; 7];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Normally, we add 7 bits of rotation to the pool.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * At the beginning of the pool, add an extra 7 bits</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * rotation, so that successive passes spread the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * input bits across the pool evenly.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#input_rotate\">input_rotate</a> += <a class=\"id\" href=\"#i\">i</a> ? 7 : 14;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#input_rotate\">input_rotate</a> = <a class=\"id\" href=\"#input_rotate\">input_rotate</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#add_ptr\">add_ptr</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#out\">out</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#j\">j</a> &lt; 16; <a class=\"id\" href=\"#j\">j</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#__u32\">__u32</a> *)<a class=\"id\" href=\"#out\">out</a>)[<a class=\"id\" href=\"#j\">j</a>] = <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#pool\">pool</a>[(<a class=\"id\" href=\"#i\">i</a> - <a class=\"id\" href=\"#j\">j</a>) &amp; <a class=\"id\" href=\"#wordmask\">wordmask</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#mix_pool_bytes\">mix_pool_bytes</a>(struct <a class=\"id\" href=\"#entropy_store\">entropy_store</a> *<a class=\"id\" href=\"#r\">r</a>, const void *<a class=\"id\" href=\"#in\">in</a>, int <a class=\"id\" href=\"#bytes\">bytes</a>)", 
"{", 
"       <a class=\"id\" href=\"#mix_pool_bytes_extract\">mix_pool_bytes_extract</a>(<a class=\"id\" href=\"#r\">r</a>, <a class=\"id\" href=\"#in\">in</a>, <a class=\"id\" href=\"#bytes\">bytes</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Credit (or debit) the entropy store with n bits of entropy</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#credit_entropy_bits\">credit_entropy_bits</a>(struct <a class=\"id\" href=\"#entropy_store\">entropy_store</a> *<a class=\"id\" href=\"#r\">r</a>, int <a class=\"id\" href=\"#nbits\">nbits</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#entropy_count\">entropy_count</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#nbits\">nbits</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEBUG_ENT\">DEBUG_ENT</a>(\"added %d entropy credits to %s\\n\", <a class=\"id\" href=\"#nbits\">nbits</a>, <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entropy_count\">entropy_count</a> = <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#entropy_count\">entropy_count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entropy_count\">entropy_count</a> += <a class=\"id\" href=\"#nbits\">nbits</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#entropy_count\">entropy_count</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DEBUG_ENT\">DEBUG_ENT</a>(\"negative entropy/overflow\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entropy_count\">entropy_count</a> = 0;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#entropy_count\">entropy_count</a> &gt; <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#poolinfo\">poolinfo</a>-><a class=\"id\" href=\"#POOLBITS\">POOLBITS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#entropy_count\">entropy_count</a> = <a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#poolinfo\">poolinfo</a>-><a class=\"id\" href=\"#POOLBITS\">POOLBITS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#entropy_count\">entropy_count</a> = <a class=\"id\" href=\"#entropy_count\">entropy_count</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* should we wake readers? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#r\">r</a> == &amp;<a class=\"id\" href=\"#input_pool\">input_pool</a> && <a class=\"id\" href=\"#entropy_count\">entropy_count</a> >= <a class=\"id\" href=\"#random_read_wakeup_thresh\">random_read_wakeup_thresh</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_interruptible\">wake_up_interruptible</a>(&amp;<a class=\"id\" href=\"#random_read_wait\">random_read_wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kill_fasync\">kill_fasync</a>(&amp;<a class=\"id\" href=\"#fasync\">fasync</a>, <a class=\"id\" href=\"#SIGIO\">SIGIO</a>, <a class=\"id\" href=\"#POLL_IN\">POLL_IN</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#r\">r</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*********************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Entropy input management</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *********************************************************************/</span>", 
"", 
"<span class=\"comment\">/* There is one of these per entropy source */</span>", 
"struct <a class=\"id\" href=\"#timer_rand_state\">timer_rand_state</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cycles_t\">cycles_t</a> <a class=\"id\" href=\"#last_time\">last_time</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#last_delta\">last_delta</a>, <a class=\"id\" href=\"#last_delta2\">last_delta2</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#dont_count_entropy\">dont_count_entropy</a>:1;", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_GENERIC_HARDIRQS\">CONFIG_GENERIC_HARDIRQS</a>", 
"", 
"static struct <a class=\"id\" href=\"#timer_rand_state\">timer_rand_state</a> *<a class=\"id\" href=\"#irq_timer_state\">irq_timer_state</a>[<a class=\"id\" href=\"#NR_IRQS\">NR_IRQS</a>];", 
"", 
"static struct <a class=\"id\" href=\"#timer_rand_state\">timer_rand_state</a> *<a class=\"id\" href=\"#get_timer_rand_state\">get_timer_rand_state</a>(unsigned int <a class=\"id\" href=\"#irq\">irq</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#irq_timer_state\">irq_timer_state</a>[<a class=\"id\" href=\"#irq\">irq</a>];", 
"}", 
"", 
"static void <a class=\"id\" href=\"#set_timer_rand_state\">set_timer_rand_state</a>(unsigned int <a class=\"id\" href=\"#irq\">irq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#timer_rand_state\">timer_rand_state</a> *<a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#irq_timer_state\">irq_timer_state</a>[<a class=\"id\" href=\"#irq\">irq</a>] = <a class=\"id\" href=\"#state\">state</a>;", 
"}", 
"", 
"#else", 
"", 
"static struct <a class=\"id\" href=\"#timer_rand_state\">timer_rand_state</a> *<a class=\"id\" href=\"#get_timer_rand_state\">get_timer_rand_state</a>(unsigned int <a class=\"id\" href=\"#irq\">irq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#irq_desc\">irq_desc</a> *<a class=\"id\" href=\"#desc\">desc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#irq_to_desc\">irq_to_desc</a>(<a class=\"id\" href=\"#irq\">irq</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#timer_rand_state\">timer_rand_state</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#set_timer_rand_state\">set_timer_rand_state</a>(unsigned int <a class=\"id\" href=\"#irq\">irq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#timer_rand_state\">timer_rand_state</a> *<a class=\"id\" href=\"#state\">state</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#irq_desc\">irq_desc</a> *<a class=\"id\" href=\"#desc\">desc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a> = <a class=\"id\" href=\"#irq_to_desc\">irq_to_desc</a>(<a class=\"id\" href=\"#irq\">irq</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#timer_rand_state\">timer_rand_state</a> = <a class=\"id\" href=\"#state\">state</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static struct <a class=\"id\" href=\"#timer_rand_state\">timer_rand_state</a> <a class=\"id\" href=\"#input_timer_state\">input_timer_state</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function adds entropy to the entropy \"pool\" by using timing</span>", 
"<span class=\"comment\"> * delays.  It uses the timer_rand_state structure to make an estimate</span>", 
"<span class=\"comment\"> * of how many bits of entropy this call has added to the pool.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The number \"num\" is also added to the pool - it should somehow describe</span>", 
"<span class=\"comment\"> * the type of event which just happened.  This is currently 0-255 for</span>", 
"<span class=\"comment\"> * keyboard scan codes, and 256 upwards for interrupts.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#add_timer_randomness\">add_timer_randomness</a>(struct <a class=\"id\" href=\"#timer_rand_state\">timer_rand_state</a> *<a class=\"id\" href=\"#state\">state</a>, unsigned <a class=\"id\" href=\"#num\">num</a>)", 
"{", 
"<span class=\"ts\"/>struct {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cycles_t\">cycles_t</a> <a class=\"id\" href=\"#cycles\">cycles</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>long <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#sample\">sample</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#delta\">delta</a>, <a class=\"id\" href=\"#delta2\">delta2</a>, <a class=\"id\" href=\"#delta3\">delta3</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/* if over the trickle threshold, use only 1 in 4096 samples */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#input_pool\">input_pool</a>.<a class=\"id\" href=\"#entropy_count\">entropy_count</a> &gt; <a class=\"id\" href=\"#trickle_thresh\">trickle_thresh</a> &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#trickle_count\">trickle_count</a>)++ &amp; 0xfff))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sample\">sample</a>.<a class=\"id\" href=\"#jiffies\">jiffies</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sample\">sample</a>.<a class=\"id\" href=\"#cycles\">cycles</a> = <a class=\"id\" href=\"#get_cycles\">get_cycles</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sample\">sample</a>.<a class=\"id\" href=\"#num\">num</a> = <a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mix_pool_bytes\">mix_pool_bytes</a>(&amp;<a class=\"id\" href=\"#input_pool\">input_pool</a>, &amp;<a class=\"id\" href=\"#sample\">sample</a>, sizeof(<a class=\"id\" href=\"#sample\">sample</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Calculate number of bits of randomness we probably added.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We take into account the first, second and third-order deltas</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in order to make our estimate.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#dont_count_entropy\">dont_count_entropy</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#sample\">sample</a>.<a class=\"id\" href=\"#jiffies\">jiffies</a> - <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#last_time\">last_time</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#last_time\">last_time</a> = <a class=\"id\" href=\"#sample\">sample</a>.<a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta2\">delta2</a> = <a class=\"id\" href=\"#delta\">delta</a> - <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#last_delta\">last_delta</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#last_delta\">last_delta</a> = <a class=\"id\" href=\"#delta\">delta</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta3\">delta3</a> = <a class=\"id\" href=\"#delta2\">delta2</a> - <a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#last_delta2\">last_delta2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>-><a class=\"id\" href=\"#last_delta2\">last_delta2</a> = <a class=\"id\" href=\"#delta2\">delta2</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#delta\">delta</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = -<a class=\"id\" href=\"#delta\">delta</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#delta2\">delta2</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta2\">delta2</a> = -<a class=\"id\" href=\"#delta2\">delta2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#delta3\">delta3</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta3\">delta3</a> = -<a class=\"id\" href=\"#delta3\">delta3</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#delta\">delta</a> &gt; <a class=\"id\" href=\"#delta2\">delta2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#delta2\">delta2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#delta\">delta</a> &gt; <a class=\"id\" href=\"#delta3\">delta3</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#delta3\">delta3</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * delta is now minimum absolute delta.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Round down by 1 bit on general principles,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and limit entropy entimate to 12 bits.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#credit_entropy_bits\">credit_entropy_bits</a>(&amp;<a class=\"id\" href=\"#input_pool\">input_pool</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#min_t\">min_t</a>(int, <a class=\"id\" href=\"#fls\">fls</a>(<a class=\"id\" href=\"#delta\">delta</a>>>1), 11));", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"}", 
"", 
"void <a class=\"id\" href=\"#add_input_randomness\">add_input_randomness</a>(unsigned int <a class=\"id\" href=\"#type\">type</a>, unsigned int <a class=\"id\" href=\"#code\">code</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned int <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/>static unsigned char <a class=\"id\" href=\"#last_value\">last_value</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* ignore autorepeat and the like */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#value\">value</a> == <a class=\"id\" href=\"#last_value\">last_value</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEBUG_ENT\">DEBUG_ENT</a>(\"input event\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#last_value\">last_value</a> = <a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#add_timer_randomness\">add_timer_randomness</a>(&amp;<a class=\"id\" href=\"#input_timer_state\">input_timer_state</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     (<a class=\"id\" href=\"#type\">type</a> << 4) ^ <a class=\"id\" href=\"#code\">code</a> ^ (<a class=\"id\" href=\"#code\">code</a> >> 4) ^ <a class=\"id\" href=\"#value\">value</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#add_input_randomness\">add_input_randomness</a>);", 
"", 
"void <a class=\"id\" href=\"#add_interrupt_randomness\">add_interrupt_randomness</a>(int <a class=\"id\" href=\"#irq\">irq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timer_rand_state\">timer_rand_state</a> *<a class=\"id\" href=\"#state\">state</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#get_timer_rand_state\">get_timer_rand_state</a>(<a class=\"id\" href=\"#irq\">irq</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEBUG_ENT\">DEBUG_ENT</a>(\"irq event %d\\n\", <a class=\"id\" href=\"#irq\">irq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#add_timer_randomness\">add_timer_randomness</a>(<a class=\"id\" href=\"#state\">state</a>, 0x100 + <a class=\"id\" href=\"#irq\">irq</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BLOCK\">CONFIG_BLOCK</a>", 
"void <a class=\"id\" href=\"#add_disk_randomness\">add_disk_randomness</a>(struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#disk\">disk</a> || !<a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#random\">random</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"comment\">/* first major is 1, so we get &gt;= 0x200 here */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEBUG_ENT\">DEBUG_ENT</a>(\"disk event %d:%d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#MAJOR\">MAJOR</a>(<a class=\"id\" href=\"#disk_devt\">disk_devt</a>(<a class=\"id\" href=\"#disk\">disk</a>)), <a class=\"id\" href=\"#MINOR\">MINOR</a>(<a class=\"id\" href=\"#disk_devt\">disk_devt</a>(<a class=\"id\" href=\"#disk\">disk</a>)));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#add_timer_randomness\">add_timer_randomness</a>(<a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#random\">random</a>, 0x100 + <a class=\"id\" href=\"#disk_devt\">disk_devt</a>(<a class=\"id\" href=\"#disk\">disk</a>));", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
];
xr_frag_insert('l/1e/1c48bdff80883adf812bf6cca3cebe39695fc0.xr', __xr_tmp);
