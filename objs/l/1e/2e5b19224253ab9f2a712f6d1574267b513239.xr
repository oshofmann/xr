var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/fs/buffer.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 1991, 1992, 2002  Linus Torvalds</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Start bdflush() with kernel_thread not syscall - Paul Gortmaker, 12/95</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Removed a lot of unnecessary code and simplified things now that</span>", 
"<span class=\"comment\"> * the buffer cache isn't our primary cache - Andrew Tridgell 12/96</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Speed up hash, lru, and free list operations.  Use gfp() for allocating</span>", 
"<span class=\"comment\"> * hash table, use SLAB cache for buffer heads. SMP threading.  -DaveM</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Added 32k buffer block sizes - these are required older ARM systems. - RMK</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * async buffer flushing, 1999 Andrea Arcangeli &lt;andrea@suse.de&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#syscalls\">syscalls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#percpu\">percpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#capability\">capability</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#blkdev\">blkdev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#quotaops\">quotaops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#highmem\">highmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#writeback\">writeback</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hash\">hash</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#suspend\">suspend</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#buffer_head\">buffer_head</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#task_io_accounting_ops\">task_io_accounting_ops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bio\">bio</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#notifier\">notifier</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bitops\">bitops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mpage\">mpage</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bit_spinlock\">bit_spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static int <a class=\"id\" href=\"#fsync_buffers_list\">fsync_buffers_list</a>(<a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BH_ENTRY\">BH_ENTRY</a>(<a class=\"id\" href=\"#list\">list</a>) <a class=\"id\" href=\"#list_entry\">list_entry</a>((<a class=\"id\" href=\"#list\">list</a>), struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a>, <a class=\"id\" href=\"#b_assoc_buffers\">b_assoc_buffers</a>)", 
"", 
"<a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#init_buffer\">init_buffer</a>(struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>, <a class=\"id\" href=\"#bh_end_io_t\">bh_end_io_t</a> *<a class=\"id\" href=\"#handler\">handler</a>, void *<a class=\"id\" href=\"#private\">private</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_end_io\">b_end_io</a> = <a class=\"id\" href=\"#handler\">handler</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_private\">b_private</a> = <a class=\"id\" href=\"#private\">private</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#init_buffer\">init_buffer</a>);", 
"", 
"static int <a class=\"id\" href=\"#sync_buffer\">sync_buffer</a>(void *<a class=\"id\" href=\"#word\">word</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bd\">bd</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#word\">word</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a>, <a class=\"id\" href=\"#b_state\">b_state</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bd\">bd</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_bdev\">b_bdev</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bd\">bd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_run_address_space\">blk_run_address_space</a>(<a class=\"id\" href=\"#bd\">bd</a>-><a class=\"id\" href=\"#bd_inode\">bd_inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#io_schedule\">io_schedule</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__lock_buffer\">__lock_buffer</a>(struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_on_bit_lock\">wait_on_bit_lock</a>(&amp;<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_state\">b_state</a>, <a class=\"id\" href=\"#BH_Lock\">BH_Lock</a>, <a class=\"id\" href=\"#sync_buffer\">sync_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__lock_buffer\">__lock_buffer</a>);", 
"", 
"void <a class=\"id\" href=\"#unlock_buffer\">unlock_buffer</a>(struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_bit_unlock\">clear_bit_unlock</a>(<a class=\"id\" href=\"#BH_Lock\">BH_Lock</a>, &amp;<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_state\">b_state</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb__after_clear_bit\">smp_mb__after_clear_bit</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up_bit\">wake_up_bit</a>(&amp;<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_state\">b_state</a>, <a class=\"id\" href=\"#BH_Lock\">BH_Lock</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#unlock_buffer\">unlock_buffer</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Block until a buffer comes unlocked.  This doesn't stop it</span>", 
"<span class=\"comment\"> * from becoming locked again - you have to lock it yourself</span>", 
"<span class=\"comment\"> * if you want to preserve its state.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__wait_on_buffer\">__wait_on_buffer</a>(struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> * <a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_on_bit\">wait_on_bit</a>(&amp;<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_state\">b_state</a>, <a class=\"id\" href=\"#BH_Lock\">BH_Lock</a>, <a class=\"id\" href=\"#sync_buffer\">sync_buffer</a>, <a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__wait_on_buffer\">__wait_on_buffer</a>);", 
"", 
"static void", 
"<a class=\"id\" href=\"#__clear_page_buffers\">__clear_page_buffers</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ClearPagePrivate\">ClearPagePrivate</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_page_private\">set_page_private</a>(<a class=\"id\" href=\"#page\">page</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"", 
"", 
"static int <a class=\"id\" href=\"#quiet_error\">quiet_error</a>(struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#BH_Quiet\">BH_Quiet</a>, &amp;<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_state\">b_state</a>) && <a class=\"id\" href=\"#printk_ratelimit\">printk_ratelimit</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"", 
"static void <a class=\"id\" href=\"#buffer_io_error\">buffer_io_error</a>(struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#b\">b</a>[<a class=\"id\" href=\"#BDEVNAME_SIZE\">BDEVNAME_SIZE</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"Buffer I/O error on device %s, logical block %Lu\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdevname\">bdevname</a>(<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_bdev\">b_bdev</a>, <a class=\"id\" href=\"#b\">b</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long long)<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_blocknr\">b_blocknr</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * End-of-IO handler helper function which does not touch the bh after</span>", 
"<span class=\"comment\"> * unlocking it.</span>", 
"<span class=\"comment\"> * Note: unlock_buffer() sort-of does touch the bh after unlocking it, but</span>", 
"<span class=\"comment\"> * a race there is benign: unlock_buffer() only use the bh's address for</span>", 
"<span class=\"comment\"> * hashing after unlocking the buffer, so it doesn't actually touch the bh</span>", 
"<span class=\"comment\"> * itself.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__end_buffer_read_notouch\">__end_buffer_read_notouch</a>(struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>, int <a class=\"id\" href=\"#uptodate\">uptodate</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#uptodate\">uptodate</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_uptodate\">set_buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This happens, due to failed READA attempts. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_uptodate\">clear_buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_buffer\">unlock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Default synchronous end-of-IO handler..  Just mark it up-to-date and</span>", 
"<span class=\"comment\"> * unlock the buffer. This is what ll_rw_block uses too.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#end_buffer_read_sync\">end_buffer_read_sync</a>(struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>, int <a class=\"id\" href=\"#uptodate\">uptodate</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__end_buffer_read_notouch\">__end_buffer_read_notouch</a>(<a class=\"id\" href=\"#bh\">bh</a>, <a class=\"id\" href=\"#uptodate\">uptodate</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_bh\">put_bh</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#end_buffer_read_sync\">end_buffer_read_sync</a>);", 
"", 
"void <a class=\"id\" href=\"#end_buffer_write_sync\">end_buffer_write_sync</a>(struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>, int <a class=\"id\" href=\"#uptodate\">uptodate</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#b\">b</a>[<a class=\"id\" href=\"#BDEVNAME_SIZE\">BDEVNAME_SIZE</a>];", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#uptodate\">uptodate</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_uptodate\">set_buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_eopnotsupp\">buffer_eopnotsupp</a>(<a class=\"id\" href=\"#bh\">bh</a>) && !<a class=\"id\" href=\"#quiet_error\">quiet_error</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer_io_error\">buffer_io_error</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"lost page write due to \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"I/O error on %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#bdevname\">bdevname</a>(<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_bdev\">b_bdev</a>, <a class=\"id\" href=\"#b\">b</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_write_io_error\">set_buffer_write_io_error</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_uptodate\">clear_buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_buffer\">unlock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_bh\">put_bh</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#end_buffer_write_sync\">end_buffer_write_sync</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Various filesystems appear to want __find_get_block to be non-blocking.</span>", 
"<span class=\"comment\"> * But it's the page lock which protects the buffers.  To get around this,</span>", 
"<span class=\"comment\"> * we get exclusion from try_to_free_buffers with the blockdev mapping's</span>", 
"<span class=\"comment\"> * private_lock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Hack idea: for the blockdev mapping, i_bufferlist_lock contention</span>", 
"<span class=\"comment\"> * may be quite high.  This code could TryLock the page, and if that</span>", 
"<span class=\"comment\"> * succeeds, there is no need to take private_lock. (But if</span>", 
"<span class=\"comment\"> * private_lock is contended then so is mapping-&gt;tree_lock).</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *", 
"<a class=\"id\" href=\"#__find_get_block_slow\">__find_get_block_slow</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#block\">block</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#bd_inode\">bd_inode</a> = <a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_inode\">bd_inode</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#bd_mapping\">bd_mapping</a> = <a class=\"id\" href=\"#bd_inode\">bd_inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#all_mapped\">all_mapped</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#block\">block</a> >> (<a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a> - <a class=\"id\" href=\"#bd_inode\">bd_inode</a>-><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#find_get_page\">find_get_page</a>(<a class=\"id\" href=\"#bd_mapping\">bd_mapping</a>, <a class=\"id\" href=\"#index\">index</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#bd_mapping\">bd_mapping</a>-><a class=\"id\" href=\"#private_lock\">private_lock</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page_has_buffers\">page_has_buffers</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#page_buffers\">page_buffers</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_mapped\">buffer_mapped</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#all_mapped\">all_mapped</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_blocknr\">b_blocknr</a> == <a class=\"id\" href=\"#block\">block</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_bh\">get_bh</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#bh\">bh</a> != <a class=\"id\" href=\"#head\">head</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we might be here because some of the buffers on this page are</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not mapped.  This is due to various races between</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * file io on the block device and getblk.  It gets dealt with</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * elsewhere, don't buffer_error if we had some unmapped buffers</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#all_mapped\">all_mapped</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"__find_get_block_slow() failed. \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"block=%llu, b_blocknr=%llu\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long long)<a class=\"id\" href=\"#block\">block</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long long)<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_blocknr\">b_blocknr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"b_state=0x%08lx, b_size=%zu\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_state\">b_state</a>, <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_size\">b_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"device blocksize: %d\\n\", 1 << <a class=\"id\" href=\"#bd_inode\">bd_inode</a>-><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a>);", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#bd_mapping\">bd_mapping</a>-><a class=\"id\" href=\"#private_lock\">private_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/* If invalidate_buffers() will trash dirty buffers, it means some kind</span>", 
"<span class=\"comment\">   of fs corruption is going on. Trashing dirty data always imply losing</span>", 
"<span class=\"comment\">   information that was supposed to be just stored on the physical layer</span>", 
"<span class=\"comment\">   by the user.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">   Thus invalidate_buffers in general usage is not allwowed to trash</span>", 
"<span class=\"comment\">   dirty buffers. For example ioctl(FLSBLKBUF) expects dirty data to</span>", 
"<span class=\"comment\">   be preserved.  These buffers are simply skipped.</span>", 
"<span class=\"comment\">  </span>", 
"<span class=\"comment\">   We also skip buffers which are still in use.  For example this can</span>", 
"<span class=\"comment\">   happen if a userspace program is reading the block device.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">   NOTE: In the case where the user removed a removable-media-disk even if</span>", 
"<span class=\"comment\">   there's still dirty data not synced on disk (due a bug in the device driver</span>", 
"<span class=\"comment\">   or due an error of the user), by not destroying the dirty buffers we could</span>", 
"<span class=\"comment\">   generate corruption also on the next media inserted, thus a parameter is</span>", 
"<span class=\"comment\">   necessary to handle this case in the most safe way possible (trying</span>", 
"<span class=\"comment\">   to not corrupt also the new disk inserted with the data belonging to</span>", 
"<span class=\"comment\">   the old now corrupted disk). Also for the ramdisk the natural thing</span>", 
"<span class=\"comment\">   to do in order to release the ramdisk memory is to destroy dirty buffers.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">   These are two special cases. Normal usage imply the device driver</span>", 
"<span class=\"comment\">   to issue a sync on the device (without waiting I/O completion) and</span>", 
"<span class=\"comment\">   then an invalidate_buffers call that doesn't trash dirty buffers.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\">   For handling cache coherency with the blkdev pagecache the 'update' case</span>", 
"<span class=\"comment\">   is been introduced. It is needed to re-read from disk any pinned</span>", 
"<span class=\"comment\">   buffer. NOTE: re-reading from disk is destructive so we can do it only</span>", 
"<span class=\"comment\">   when we assume nobody is changing the buffercache under our I/O and when</span>", 
"<span class=\"comment\">   we think the disk contains more recent information than the buffercache.</span>", 
"<span class=\"comment\">   The update == 1 pass marks the buffers we need to update, the update == 2</span>", 
"<span class=\"comment\">   pass does the actual I/O. */</span>", 
"void <a class=\"id\" href=\"#invalidate_bdev\">invalidate_bdev</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_inode\">bd_inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#nrpages\">nrpages</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#invalidate_bh_lrus\">invalidate_bh_lrus</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lru_add_drain_all\">lru_add_drain_all</a>();<span class=\"ts\"/><span class=\"comment\">/* make sure all lru add caches are flushed */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#invalidate_mapping_pages\">invalidate_mapping_pages</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, 0, -1);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#invalidate_bdev\">invalidate_bdev</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Kick the writeback threads then try to free up some ZONE_NORMAL memory.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#free_more_memory\">free_more_memory</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nid\">nid</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wakeup_flusher_threads\">wakeup_flusher_threads</a>(1024);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#yield\">yield</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_node\">for_each_online_node</a>(<a class=\"id\" href=\"#nid\">nid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>(void)<a class=\"id\" href=\"#first_zones_zonelist\">first_zones_zonelist</a>(<a class=\"id\" href=\"#node_zonelist\">node_zonelist</a>(<a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#GFP_NOFS\">GFP_NOFS</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gfp_zone\">gfp_zone</a>(<a class=\"id\" href=\"#GFP_NOFS\">GFP_NOFS</a>), <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#zone\">zone</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#zone\">zone</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#try_to_free_pages\">try_to_free_pages</a>(<a class=\"id\" href=\"#node_zonelist\">node_zonelist</a>(<a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#GFP_NOFS\">GFP_NOFS</a>), 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#GFP_NOFS\">GFP_NOFS</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * I/O completion handler for block_read_full_page() - pages</span>", 
"<span class=\"comment\"> * which come unlocked at the end of I/O.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#end_buffer_async_read\">end_buffer_async_read</a>(struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>, int <a class=\"id\" href=\"#uptodate\">uptodate</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#first\">first</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#page_uptodate\">page_uptodate</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#buffer_async_read\">buffer_async_read</a>(<a class=\"id\" href=\"#bh\">bh</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_page\">b_page</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#uptodate\">uptodate</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_uptodate\">set_buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_uptodate\">clear_buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#quiet_error\">quiet_error</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer_io_error\">buffer_io_error</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageError\">SetPageError</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Be _very_ careful from here on. Bad things can happen if</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * two buffer heads end IO at almost the same time and both</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * decide that the page is now completely done.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#page_buffers\">page_buffers</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bit_spin_lock\">bit_spin_lock</a>(<a class=\"id\" href=\"#BH_Uptodate_Lock\">BH_Uptodate_Lock</a>, &amp;<a class=\"id\" href=\"#first\">first</a>-><a class=\"id\" href=\"#b_state\">b_state</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_async_read\">clear_buffer_async_read</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_buffer\">unlock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#tmp\">tmp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_uptodate\">page_uptodate</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_async_read\">buffer_async_read</a>(<a class=\"id\" href=\"#tmp\">tmp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#buffer_locked\">buffer_locked</a>(<a class=\"id\" href=\"#tmp\">tmp</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#still_busy\">still_busy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#tmp\">tmp</a> != <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bit_spin_unlock\">bit_spin_unlock</a>(<a class=\"id\" href=\"#BH_Uptodate_Lock\">BH_Uptodate_Lock</a>, &amp;<a class=\"id\" href=\"#first\">first</a>-><a class=\"id\" href=\"#b_state\">b_state</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If none of the buffers had errors and they are all</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * uptodate then we can set the page uptodate.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page_uptodate\">page_uptodate</a> && !<a class=\"id\" href=\"#PageError\">PageError</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageUptodate\">SetPageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>return;", 
"", 
"<a class=\"id\" href=\"#still_busy\">still_busy</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bit_spin_unlock\">bit_spin_unlock</a>(<a class=\"id\" href=\"#BH_Uptodate_Lock\">BH_Uptodate_Lock</a>, &amp;<a class=\"id\" href=\"#first\">first</a>-><a class=\"id\" href=\"#b_state\">b_state</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Completion handler for block_write_full_page() - pages which are unlocked</span>", 
"<span class=\"comment\"> * during I/O, and which have PageWriteback cleared upon I/O completion.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#end_buffer_async_write\">end_buffer_async_write</a>(struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>, int <a class=\"id\" href=\"#uptodate\">uptodate</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#b\">b</a>[<a class=\"id\" href=\"#BDEVNAME_SIZE\">BDEVNAME_SIZE</a>];", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#first\">first</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#buffer_async_write\">buffer_async_write</a>(<a class=\"id\" href=\"#bh\">bh</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_page\">b_page</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#uptodate\">uptodate</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_uptodate\">set_buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#quiet_error\">quiet_error</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer_io_error\">buffer_io_error</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"lost page write due to \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"I/O error on %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#bdevname\">bdevname</a>(<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_bdev\">b_bdev</a>, <a class=\"id\" href=\"#b\">b</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#AS_EIO\">AS_EIO</a>, &amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_write_io_error\">set_buffer_write_io_error</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_uptodate\">clear_buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageError\">SetPageError</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#first\">first</a> = <a class=\"id\" href=\"#page_buffers\">page_buffers</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bit_spin_lock\">bit_spin_lock</a>(<a class=\"id\" href=\"#BH_Uptodate_Lock\">BH_Uptodate_Lock</a>, &amp;<a class=\"id\" href=\"#first\">first</a>-><a class=\"id\" href=\"#b_state\">b_state</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_async_write\">clear_buffer_async_write</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_buffer\">unlock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#tmp\">tmp</a> != <a class=\"id\" href=\"#bh\">bh</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_async_write\">buffer_async_write</a>(<a class=\"id\" href=\"#tmp\">tmp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#buffer_locked\">buffer_locked</a>(<a class=\"id\" href=\"#tmp\">tmp</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#still_busy\">still_busy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bit_spin_unlock\">bit_spin_unlock</a>(<a class=\"id\" href=\"#BH_Uptodate_Lock\">BH_Uptodate_Lock</a>, &amp;<a class=\"id\" href=\"#first\">first</a>-><a class=\"id\" href=\"#b_state\">b_state</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end_page_writeback\">end_page_writeback</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>return;", 
"", 
"<a class=\"id\" href=\"#still_busy\">still_busy</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bit_spin_unlock\">bit_spin_unlock</a>(<a class=\"id\" href=\"#BH_Uptodate_Lock\">BH_Uptodate_Lock</a>, &amp;<a class=\"id\" href=\"#first\">first</a>-><a class=\"id\" href=\"#b_state\">b_state</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#end_buffer_async_write\">end_buffer_async_write</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If a page's buffers are under async readin (end_buffer_async_read</span>", 
"<span class=\"comment\"> * completion) then there is a possibility that another thread of</span>", 
"<span class=\"comment\"> * control could lock one of the buffers after it has completed</span>", 
"<span class=\"comment\"> * but while some of the other buffers have not completed.  This</span>", 
"<span class=\"comment\"> * locked buffer would confuse end_buffer_async_read() into not unlocking</span>", 
"<span class=\"comment\"> * the page.  So the absence of BH_Async_Read tells end_buffer_async_read()</span>", 
"<span class=\"comment\"> * that this buffer is not under async I/O.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The page comes unlocked when it has no locked buffer_async buffers</span>", 
"<span class=\"comment\"> * left.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PageLocked prevents anyone starting new async I/O reads any of</span>", 
"<span class=\"comment\"> * the buffers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PageWriteback is used to prevent simultaneous writeout of the same</span>", 
"<span class=\"comment\"> * page.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PageLocked prevents anyone from starting writeback of a page which is</span>", 
"<span class=\"comment\"> * under read I/O (PageWriteback is only ever set against a locked page).</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#mark_buffer_async_read\">mark_buffer_async_read</a>(struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_end_io\">b_end_io</a> = <a class=\"id\" href=\"#end_buffer_async_read\">end_buffer_async_read</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_async_read\">set_buffer_async_read</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#mark_buffer_async_write_endio\">mark_buffer_async_write_endio</a>(struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#bh_end_io_t\">bh_end_io_t</a> *<a class=\"id\" href=\"#handler\">handler</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_end_io\">b_end_io</a> = <a class=\"id\" href=\"#handler\">handler</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_async_write\">set_buffer_async_write</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#mark_buffer_async_write\">mark_buffer_async_write</a>(struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mark_buffer_async_write_endio\">mark_buffer_async_write_endio</a>(<a class=\"id\" href=\"#bh\">bh</a>, <a class=\"id\" href=\"#end_buffer_async_write\">end_buffer_async_write</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#mark_buffer_async_write\">mark_buffer_async_write</a>);", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * fs/buffer.c contains helper functions for buffer-backed address space's</span>", 
"<span class=\"comment\"> * fsync functions.  A common requirement for buffer-based filesystems is</span>", 
"<span class=\"comment\"> * that certain data from the backing blockdev needs to be written out for</span>", 
"<span class=\"comment\"> * a successful fsync().  For example, ext2 indirect blocks need to be</span>", 
"<span class=\"comment\"> * written back and waited upon before fsync() returns.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The functions mark_buffer_inode_dirty(), fsync_inode_buffers(),</span>", 
"<span class=\"comment\"> * inode_has_buffers() and invalidate_inode_buffers() are provided for the</span>", 
"<span class=\"comment\"> * management of a list of dependent buffers at -&gt;i_mapping-&gt;private_list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Locking is a little subtle: try_to_free_buffers() will remove buffers</span>", 
"<span class=\"comment\"> * from their controlling inode's queue when they are being freed.  But</span>", 
"<span class=\"comment\"> * try_to_free_buffers() will be operating against the *blockdev* mapping</span>", 
"<span class=\"comment\"> * at the time, not against the S_ISREG file which depends on those buffers.</span>", 
"<span class=\"comment\"> * So the locking for private_list is via the private_lock in the address_space</span>", 
"<span class=\"comment\"> * which backs the buffers.  Which is different from the address_space </span>", 
"<span class=\"comment\"> * against which the buffers are listed.  So for a particular address_space,</span>", 
"<span class=\"comment\"> * mapping-&gt;private_lock does *not* protect mapping-&gt;private_list!  In fact,</span>", 
"<span class=\"comment\"> * mapping-&gt;private_list will always be protected by the backing blockdev's</span>", 
"<span class=\"comment\"> * -&gt;private_lock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Which introduces a requirement: all buffers on an address_space's</span>", 
"<span class=\"comment\"> * -&gt;private_list must be from the same address_space: the blockdev's.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * address_spaces which do not place buffers at -&gt;private_list via these</span>", 
"<span class=\"comment\"> * utility functions are free to use private_lock and private_list for</span>", 
"<span class=\"comment\"> * whatever they want.  The only requirement is that list_empty(private_list)</span>", 
"<span class=\"comment\"> * be true at clear_inode() time.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FIXME: clear_inode should not call invalidate_inode_buffers().  The</span>", 
"<span class=\"comment\"> * filesystems should do that.  invalidate_inode_buffers() should just go</span>", 
"<span class=\"comment\"> * BUG_ON(!list_empty).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FIXME: mark_buffer_dirty_inode() is a data-plane operation.  It should</span>", 
"<span class=\"comment\"> * take an address_space, not an inode.  And it should be called</span>", 
"<span class=\"comment\"> * mark_buffer_dirty_fsync() to clearly define why those buffers are being</span>", 
"<span class=\"comment\"> * queued up.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FIXME: mark_buffer_dirty_inode() doesn't need to add the buffer to the</span>", 
"<span class=\"comment\"> * list if it is already on a list.  Because if the buffer is on a list,</span>", 
"<span class=\"comment\"> * it *must* already be on the right one.  If not, the filesystem is being</span>", 
"<span class=\"comment\"> * silly.  This will save a ton of locking.  But first we have to ensure</span>", 
"<span class=\"comment\"> * that buffers are taken *off* the old inode's list when they are freed</span>", 
"<span class=\"comment\"> * (presumably in truncate).  That requires careful auditing of all</span>", 
"<span class=\"comment\"> * filesystems (do it inside bforget()).  It could also be done by bringing</span>", 
"<span class=\"comment\"> * b_inode back.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The buffer's backing address_space's private_lock must be held</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__remove_assoc_queue\">__remove_assoc_queue</a>(struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_assoc_buffers\">b_assoc_buffers</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_assoc_map\">b_assoc_map</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_write_io_error\">buffer_write_io_error</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#AS_EIO\">AS_EIO</a>, &amp;<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_assoc_map\">b_assoc_map</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_assoc_map\">b_assoc_map</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#inode_has_buffers\">inode_has_buffers</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_data\">i_data</a>.<a class=\"id\" href=\"#private_list\">private_list</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * osync is designed to support O_SYNC io.  It waits synchronously for</span>", 
"<span class=\"comment\"> * all already-submitted IO to complete, but does not queue any new</span>", 
"<span class=\"comment\"> * writes to the disk.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * To do O_SYNC writes, just queue the buffer writes with ll_rw_block as</span>", 
"<span class=\"comment\"> * you dirty the buffers, and then use osync_inode_buffers to wait for</span>", 
"<span class=\"comment\"> * completion.  Any other dirty buffers which are not yet queued for</span>", 
"<span class=\"comment\"> * write will not be flushed to disk by the osync.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#osync_buffers_list\">osync_buffers_list</a>(<a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"<a class=\"id\" href=\"#repeat\">repeat</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_prev\">list_for_each_prev</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#BH_ENTRY\">BH_ENTRY</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_locked\">buffer_locked</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_bh\">get_bh</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_on_buffer\">wait_on_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#repeat\">repeat</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#do_thaw_one\">do_thaw_one</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, void *<a class=\"id\" href=\"#unused\">unused</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#b\">b</a>[<a class=\"id\" href=\"#BDEVNAME_SIZE\">BDEVNAME_SIZE</a>];", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_bdev\">s_bdev</a> && !<a class=\"id\" href=\"#thaw_bdev\">thaw_bdev</a>(<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_bdev\">s_bdev</a>, <a class=\"id\" href=\"#sb\">sb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Emergency Thaw on %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#bdevname\">bdevname</a>(<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_bdev\">s_bdev</a>, <a class=\"id\" href=\"#b\">b</a>));", 
"}", 
"", 
"static void <a class=\"id\" href=\"#do_thaw_all\">do_thaw_all</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iterate_supers\">iterate_supers</a>(<a class=\"id\" href=\"#do_thaw_one\">do_thaw_one</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Emergency Thaw complete\\n\");", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * emergency_thaw_all -- forcibly thaw every frozen filesystem</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Used for emergency unfreeze of all filesystems via SysRq</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#emergency_thaw_all\">emergency_thaw_all</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#work\">work</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#work\">work</a>), <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#work\">work</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_WORK\">INIT_WORK</a>(<a class=\"id\" href=\"#work\">work</a>, <a class=\"id\" href=\"#do_thaw_all\">do_thaw_all</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule_work\">schedule_work</a>(<a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sync_mapping_buffers - write out &amp; wait upon a mapping's \"associated\" buffers</span>", 
"<span class=\"comment\"> * @mapping: the mapping which wants those buffers written</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Starts I/O against the buffers at mapping-&gt;private_list, and waits upon</span>", 
"<span class=\"comment\"> * that I/O.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Basically, this is a convenience function for fsync().</span>", 
"<span class=\"comment\"> * @mapping is a file or directory which needs those buffers to be written for</span>", 
"<span class=\"comment\"> * a successful fsync().</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#sync_mapping_buffers\">sync_mapping_buffers</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#buffer_mapping\">buffer_mapping</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#assoc_mapping\">assoc_mapping</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_mapping\">buffer_mapping</a> == <a class=\"id\" href=\"#NULL\">NULL</a> || <a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#private_list\">private_list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#fsync_buffers_list\">fsync_buffers_list</a>(&amp;<a class=\"id\" href=\"#buffer_mapping\">buffer_mapping</a>-><a class=\"id\" href=\"#private_lock\">private_lock</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#private_list\">private_list</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#sync_mapping_buffers\">sync_mapping_buffers</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called when we've recently written block `bblock', and it is known that</span>", 
"<span class=\"comment\"> * `bblock' was for a buffer_boundary() buffer.  This means that the block at</span>", 
"<span class=\"comment\"> * `bblock + 1' is probably a dirty indirect block.  Hunt it down and, if it's</span>", 
"<span class=\"comment\"> * dirty, schedule it for IO.  So that indirects merge nicely with their data.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#write_boundary_block\">write_boundary_block</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#bblock\">bblock</a>, unsigned <a class=\"id\" href=\"#blocksize\">blocksize</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#__find_get_block\">__find_get_block</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#bblock\">bblock</a> + 1, <a class=\"id\" href=\"#blocksize\">blocksize</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bh\">bh</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_dirty\">buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ll_rw_block\">ll_rw_block</a>(<a class=\"id\" href=\"#WRITE\">WRITE</a>, 1, &amp;<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_bh\">put_bh</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#mark_buffer_dirty_inode\">mark_buffer_dirty_inode</a>(struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#buffer_mapping\">buffer_mapping</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_page\">b_page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mark_buffer_dirty\">mark_buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#assoc_mapping\">assoc_mapping</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#assoc_mapping\">assoc_mapping</a> = <a class=\"id\" href=\"#buffer_mapping\">buffer_mapping</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#assoc_mapping\">assoc_mapping</a> != <a class=\"id\" href=\"#buffer_mapping\">buffer_mapping</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_assoc_map\">b_assoc_map</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#buffer_mapping\">buffer_mapping</a>-><a class=\"id\" href=\"#private_lock\">private_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move_tail\">list_move_tail</a>(&amp;<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_assoc_buffers\">b_assoc_buffers</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#private_list\">private_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_assoc_map\">b_assoc_map</a> = <a class=\"id\" href=\"#mapping\">mapping</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#buffer_mapping\">buffer_mapping</a>-><a class=\"id\" href=\"#private_lock\">private_lock</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#mark_buffer_dirty_inode\">mark_buffer_dirty_inode</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Mark the page dirty, and set it dirty in the radix tree, and mark the inode</span>", 
"<span class=\"comment\"> * dirty.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If warn is true, then emit a warning if the page is not uptodate and has</span>", 
"<span class=\"comment\"> * not been truncated.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__set_page_dirty\">__set_page_dirty</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>, int <a class=\"id\" href=\"#warn\">warn</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#tree_lock\">tree_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>) {<span class=\"ts\"/><span class=\"comment\">/* Race with truncate? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#warn\">warn</a> && !<a class=\"id\" href=\"#PageUptodate\">PageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#account_page_dirtied\">account_page_dirtied</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#mapping\">mapping</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#radix_tree_tag_set\">radix_tree_tag_set</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#page_tree\">page_tree</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_index\">page_index</a>(<a class=\"id\" href=\"#page\">page</a>), <a class=\"id\" href=\"#PAGECACHE_TAG_DIRTY\">PAGECACHE_TAG_DIRTY</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#tree_lock\">tree_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mark_inode_dirty\">__mark_inode_dirty</a>(<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>, <a class=\"id\" href=\"#I_DIRTY_PAGES\">I_DIRTY_PAGES</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Add a page to the dirty page list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It is a sad fact of life that this function is called from several places</span>", 
"<span class=\"comment\"> * deeply under spinlocking.  It may not sleep.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the page has buffers, the uptodate buffers are set dirty, to preserve</span>", 
"<span class=\"comment\"> * dirty-state coherency between the page and the buffers.  It the page does</span>", 
"<span class=\"comment\"> * not have buffers then when they are later attached they will all be set</span>", 
"<span class=\"comment\"> * dirty.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The buffers are dirtied before the page is dirtied.  There's a small race</span>", 
"<span class=\"comment\"> * window in which a writepage caller may see the page cleanness but not the</span>", 
"<span class=\"comment\"> * buffer dirtiness.  That's fine.  If this code were to set the page dirty</span>", 
"<span class=\"comment\"> * before the buffers, a concurrent writepage caller could clear the page dirty</span>", 
"<span class=\"comment\"> * bit, see a bunch of clean buffers and we'd end up with dirty buffers/clean</span>", 
"<span class=\"comment\"> * page on the dirty page list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We use private_lock to lock against try_to_free_buffers while using the</span>", 
"<span class=\"comment\"> * page's buffer list.  Also use this to protect against clean buffers being</span>", 
"<span class=\"comment\"> * added to the page after it was set dirty.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FIXME: may need to call -&gt;reservepage here as well.  That's rather up to the</span>", 
"<span class=\"comment\"> * address_space though.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__set_page_dirty_buffers\">__set_page_dirty_buffers</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#newly_dirty\">newly_dirty</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#page_mapping\">page_mapping</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#mapping\">mapping</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return !<a class=\"id\" href=\"#TestSetPageDirty\">TestSetPageDirty</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#private_lock\">private_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page_has_buffers\">page_has_buffers</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#page_buffers\">page_buffers</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#head\">head</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_dirty\">set_buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} while (<a class=\"id\" href=\"#bh\">bh</a> != <a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#newly_dirty\">newly_dirty</a> = !<a class=\"id\" href=\"#TestSetPageDirty\">TestSetPageDirty</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#private_lock\">private_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#newly_dirty\">newly_dirty</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_page_dirty\">__set_page_dirty</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#mapping\">mapping</a>, 1);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#newly_dirty\">newly_dirty</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__set_page_dirty_buffers\">__set_page_dirty_buffers</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Write out and wait upon a list of buffers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We have conflicting pressures: we want to make sure that all</span>", 
"<span class=\"comment\"> * initially dirty buffers get waited on, but that any subsequently</span>", 
"<span class=\"comment\"> * dirtied buffers don't.  After all, we don't want fsync to last</span>", 
"<span class=\"comment\"> * forever if somebody is actively writing to the file.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Do this in two main stages: first we copy dirty buffers to a</span>", 
"<span class=\"comment\"> * temporary inode list, queueing the writes as we go.  Then we clean</span>", 
"<span class=\"comment\"> * up, waiting for those writes to complete.</span>", 
"<span class=\"comment\"> * </span>", 
"<span class=\"comment\"> * During this second stage, any subsequent updates to the file may end</span>", 
"<span class=\"comment\"> * up refiling the buffer on the original inode's dirty list again, so</span>", 
"<span class=\"comment\"> * there is a chance we will end up with a buffer queued for write but</span>", 
"<span class=\"comment\"> * not yet completed on that list.  So, as a final cleanup we go through</span>", 
"<span class=\"comment\"> * the osync code to catch these locked, dirty buffers without requeuing</span>", 
"<span class=\"comment\"> * any newly dirty buffers for write.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#fsync_buffers_list\">fsync_buffers_list</a>(<a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> *<a class=\"id\" href=\"#lock\">lock</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>, *<a class=\"id\" href=\"#prev_mapping\">prev_mapping</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0, <a class=\"id\" href=\"#err2\">err2</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#list\">list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#BH_ENTRY\">BH_ENTRY</a>(<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_assoc_map\">b_assoc_map</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__remove_assoc_queue\">__remove_assoc_queue</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Avoid race with mark_buffer_dirty_inode() which does</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * a lockless check and we rely on seeing the dirty bit */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_dirty\">buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>) || <a class=\"id\" href=\"#buffer_locked\">buffer_locked</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_assoc_buffers\">b_assoc_buffers</a>, &amp;<a class=\"id\" href=\"#tmp\">tmp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_assoc_map\">b_assoc_map</a> = <a class=\"id\" href=\"#mapping\">mapping</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_dirty\">buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_bh\">get_bh</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Ensure any pending I/O completes so that</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * write_dirty_buffer() actually writes the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * current contents - it is a noop if I/O is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * still in flight on potentially older</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * contents.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_dirty_buffer\">write_dirty_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>, <a class=\"id\" href=\"#WRITE_SYNC_PLUG\">WRITE_SYNC_PLUG</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Kick off IO for the previous mapping. Note</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * that we will not run the very last mapping,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * wait_on_buffer() will do that for us</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * through sync_buffer().</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#prev_mapping\">prev_mapping</a> && <a class=\"id\" href=\"#prev_mapping\">prev_mapping</a> != <a class=\"id\" href=\"#mapping\">mapping</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_run_address_space\">blk_run_address_space</a>(<a class=\"id\" href=\"#prev_mapping\">prev_mapping</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prev_mapping\">prev_mapping</a> = <a class=\"id\" href=\"#mapping\">mapping</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#tmp\">tmp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#BH_ENTRY\">BH_ENTRY</a>(<a class=\"id\" href=\"#tmp\">tmp</a>.<a class=\"id\" href=\"#prev\">prev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_bh\">get_bh</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_assoc_map\">b_assoc_map</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__remove_assoc_queue\">__remove_assoc_queue</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Avoid race with mark_buffer_dirty_inode() which does</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * a lockless check and we rely on seeing the dirty bit */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_dirty\">buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_assoc_buffers\">b_assoc_buffers</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#private_list\">private_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_assoc_map\">b_assoc_map</a> = <a class=\"id\" href=\"#mapping\">mapping</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_on_buffer\">wait_on_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(<a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err2\">err2</a> = <a class=\"id\" href=\"#osync_buffers_list\">osync_buffers_list</a>(<a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err2\">err2</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Invalidate any and all dirty buffers on a given inode.  We are</span>", 
"<span class=\"comment\"> * probably unmounting the fs, but that doesn't mean we have already</span>", 
"<span class=\"comment\"> * done a sync().  Just drop the buffers from the inode list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE: we take the inode's blockdev's mapping's private_lock.  Which</span>", 
"<span class=\"comment\"> * assumes that all the buffers are against the blockdev.  Not true</span>", 
"<span class=\"comment\"> * for reiserfs.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#invalidate_inode_buffers\">invalidate_inode_buffers</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode_has_buffers\">inode_has_buffers</a>(<a class=\"id\" href=\"#inode\">inode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a> = &amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_data\">i_data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a> = &amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#private_list\">private_list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#buffer_mapping\">buffer_mapping</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#assoc_mapping\">assoc_mapping</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#buffer_mapping\">buffer_mapping</a>-><a class=\"id\" href=\"#private_lock\">private_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#list\">list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__remove_assoc_queue\">__remove_assoc_queue</a>(<a class=\"id\" href=\"#BH_ENTRY\">BH_ENTRY</a>(<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#next\">next</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#buffer_mapping\">buffer_mapping</a>-><a class=\"id\" href=\"#private_lock\">private_lock</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#invalidate_inode_buffers\">invalidate_inode_buffers</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Remove any clean buffers from the inode's buffer list.  This is called</span>", 
"<span class=\"comment\"> * when we're trying to free the inode itself.  Those buffers can pin it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns true if all buffers were removed.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#remove_inode_buffers\">remove_inode_buffers</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode_has_buffers\">inode_has_buffers</a>(<a class=\"id\" href=\"#inode\">inode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a> = &amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_data\">i_data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a> = &amp;<a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#private_list\">private_list</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#buffer_mapping\">buffer_mapping</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#assoc_mapping\">assoc_mapping</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#buffer_mapping\">buffer_mapping</a>-><a class=\"id\" href=\"#private_lock\">private_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#list\">list</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#BH_ENTRY\">BH_ENTRY</a>(<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#next\">next</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_dirty\">buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__remove_assoc_queue\">__remove_assoc_queue</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#buffer_mapping\">buffer_mapping</a>-><a class=\"id\" href=\"#private_lock\">private_lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Create the appropriate buffers when given a page for data area and</span>", 
"<span class=\"comment\"> * the size of each buffer.. Use the bh-&gt;b_this_page linked list to</span>", 
"<span class=\"comment\"> * follow the buffers created.  Return NULL if unable to create more</span>", 
"<span class=\"comment\"> * buffers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The retry flag is used to differentiate async IO (paging, swapping)</span>", 
"<span class=\"comment\"> * which may not fail from ordinary buffer allocations.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#alloc_page_buffers\">alloc_page_buffers</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#retry\">retry</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>, *<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#offset\">offset</a>;", 
"", 
"<a class=\"id\" href=\"#try_again\">try_again</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#offset\">offset</a> -= <a class=\"id\" href=\"#size\">size</a>) >= 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#alloc_buffer_head\">alloc_buffer_head</a>(<a class=\"id\" href=\"#GFP_NOFS\">GFP_NOFS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bh\">bh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_grow\">no_grow</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_bdev\">b_bdev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a> = <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_blocknr\">b_blocknr</a> = -1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#bh\">bh</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_state\">b_state</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_count\">b_count</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_private\">b_private</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_size\">b_size</a> = <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Link the buffer to its page */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_bh_page\">set_bh_page</a>(<a class=\"id\" href=\"#bh\">bh</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#offset\">offset</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_buffer\">init_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * In case anything failed, we just free everything we got.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#no_grow\">no_grow</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#head\">head</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_buffer_head\">free_buffer_head</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} while (<a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Return failure for non-async IO requests.  Async IO requests</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * are not allowed to fail, so we have to wait until buffer heads</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * become available.  But we don't want tasks sleeping with </span>", 
"<span class=\"comment\"><span class=\"ts\"/> * partially complete buffers, so all were released above.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#retry\">retry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We're _really_ low on memory. Now we just</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * wait for old buffer heads to become free due to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * finishing IO.  Since this is an async request and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the reserve list is empty, we're sure there are </span>", 
"<span class=\"comment\"><span class=\"ts\"/> * async buffer heads in use.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_more_memory\">free_more_memory</a>();", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#try_again\">try_again</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#alloc_page_buffers\">alloc_page_buffers</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#link_dev_buffers\">link_dev_buffers</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>, *<a class=\"id\" href=\"#tail\">tail</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tail\">tail</a> = <a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tail\">tail</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a> = <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#attach_page_buffers\">attach_page_buffers</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#head\">head</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Initialise the state of a blockdev page's buffers.</span>", 
"<span class=\"comment\"> */</span> ", 
"static void", 
"<a class=\"id\" href=\"#init_page_buffers\">init_page_buffers</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#block\">block</a>, int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#page_buffers\">page_buffers</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#uptodate\">uptodate</a> = <a class=\"id\" href=\"#PageUptodate\">PageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_mapped\">buffer_mapped</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_buffer\">init_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_bdev\">b_bdev</a> = <a class=\"id\" href=\"#bdev\">bdev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_blocknr\">b_blocknr</a> = <a class=\"id\" href=\"#block\">block</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#uptodate\">uptodate</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_uptodate\">set_buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_mapped\">set_buffer_mapped</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block\">block</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#bh\">bh</a> != <a class=\"id\" href=\"#head\">head</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Create the page-cache page that contains the requested block.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is user purely for blockdev mappings.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#page\">page</a> *", 
"<a class=\"id\" href=\"#grow_dev_page\">grow_dev_page</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#block\">block</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#index\">index</a>, int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_inode\">bd_inode</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#find_or_create_page\">find_or_create_page</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>, <a class=\"id\" href=\"#index\">index</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#mapping_gfp_mask\">mapping_gfp_mask</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>) &amp; ~<a class=\"id\" href=\"#__GFP_FS\">__GFP_FS</a>)|<a class=\"id\" href=\"#__GFP_MOVABLE\">__GFP_MOVABLE</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#PageLocked\">PageLocked</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page_has_buffers\">page_has_buffers</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#page_buffers\">page_buffers</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_size\">b_size</a> == <a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_page_buffers\">init_page_buffers</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#try_to_free_buffers\">try_to_free_buffers</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#failed\">failed</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Allocate some buffers for this page</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#alloc_page_buffers\">alloc_page_buffers</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#size\">size</a>, 0);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bh\">bh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#failed\">failed</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Link the page to the buffers and initialise them.  Take the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * lock to be atomic wrt __find_get_block(), which does not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * run under the page lock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>-><a class=\"id\" href=\"#private_lock\">private_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#link_dev_buffers\">link_dev_buffers</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_page_buffers\">init_page_buffers</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>-><a class=\"id\" href=\"#private_lock\">private_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<a class=\"id\" href=\"#failed\">failed</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Create buffers for the specified block device block's page.  If</span>", 
"<span class=\"comment\"> * that page was dirty, the buffers are set dirty also.</span>", 
"<span class=\"comment\"> */</span>", 
"static int", 
"<a class=\"id\" href=\"#grow_buffers\">grow_buffers</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#block\">block</a>, int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#sizebits\">sizebits</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sizebits\">sizebits</a> = -1;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sizebits\">sizebits</a>++;", 
"<span class=\"ts\"/>} while ((<a class=\"id\" href=\"#size\">size</a> << <a class=\"id\" href=\"#sizebits\">sizebits</a>) &lt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#block\">block</a> >> <a class=\"id\" href=\"#sizebits\">sizebits</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Check for a block which wants to lie outside our maximum possible</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pagecache index.  (this comparison is done using sector_t types).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#index\">index</a> != <a class=\"id\" href=\"#block\">block</a> >> <a class=\"id\" href=\"#sizebits\">sizebits</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#b\">b</a>[<a class=\"id\" href=\"#BDEVNAME_SIZE\">BDEVNAME_SIZE</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: requested out-of-range block %llu for \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"device %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__func__\">__func__</a>, (unsigned long long)<a class=\"id\" href=\"#block\">block</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdevname\">bdevname</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#b\">b</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#block\">block</a> = <a class=\"id\" href=\"#index\">index</a> << <a class=\"id\" href=\"#sizebits\">sizebits</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Create a page with the proper size buffers.. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#grow_dev_page\">grow_dev_page</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#index\">index</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *", 
"<a class=\"id\" href=\"#__getblk_slow\">__getblk_slow</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#block\">block</a>, int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Size must be multiple of hard sectorsize */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#size\">size</a> &amp; (<a class=\"id\" href=\"#bdev_logical_block_size\">bdev_logical_block_size</a>(<a class=\"id\" href=\"#bdev\">bdev</a>)-1) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#size\">size</a> &lt; 512 || <a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"getblk(): invalid block size %d requested\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"logical block size: %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdev_logical_block_size\">bdev_logical_block_size</a>(<a class=\"id\" href=\"#bdev\">bdev</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dump_stack\">dump_stack</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> * <a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#__find_get_block\">__find_get_block</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bh\">bh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#bh\">bh</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#grow_buffers\">grow_buffers</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_more_memory\">free_more_memory</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The relationship between dirty buffers and dirty pages:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Whenever a page has any dirty buffers, the page's dirty bit is set, and</span>", 
"<span class=\"comment\"> * the page is tagged dirty in its radix tree.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * At all times, the dirtiness of the buffers represents the dirtiness of</span>", 
"<span class=\"comment\"> * subsections of the page.  If the page has buffers, the page dirty bit is</span>", 
"<span class=\"comment\"> * merely a hint about the true dirty state.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When a page is set dirty in its entirety, all its buffers are marked dirty</span>", 
"<span class=\"comment\"> * (if the page has buffers).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When a buffer is marked dirty, its page is dirtied, but the page's other</span>", 
"<span class=\"comment\"> * buffers are not.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Also.  When blockdev buffers are explicitly read with bread(), they</span>", 
"<span class=\"comment\"> * individually become uptodate.  But their backing page remains not</span>", 
"<span class=\"comment\"> * uptodate - even if all of its buffers are uptodate.  A subsequent</span>", 
"<span class=\"comment\"> * block_read_full_page() against that page will discover all the uptodate</span>", 
"<span class=\"comment\"> * buffers, will set the page uptodate and will perform no I/O.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * mark_buffer_dirty - mark a buffer_head as needing writeout</span>", 
"<span class=\"comment\"> * @bh: the buffer_head to mark dirty</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * mark_buffer_dirty() will set the dirty bit against the buffer, then set its</span>", 
"<span class=\"comment\"> * backing page dirty, then tag the page as dirty in its address_space's radix</span>", 
"<span class=\"comment\"> * tree and then attach the address_space's inode to its superblock's dirty</span>", 
"<span class=\"comment\"> * inode list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * mark_buffer_dirty() is atomic.  It takes bh-&gt;b_page-&gt;mapping-&gt;private_lock,</span>", 
"<span class=\"comment\"> * mapping-&gt;tree_lock and the global inode_lock.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#mark_buffer_dirty\">mark_buffer_dirty</a>(struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(!<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Very *carefully* optimize the it-is-already-dirty case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Don't let the final \"is it dirty\" escape to before we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * perhaps modified the buffer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_dirty\">buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_dirty\">buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#test_set_buffer_dirty\">test_set_buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_page\">b_page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#TestSetPageDirty\">TestSetPageDirty</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#page_mapping\">page_mapping</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mapping\">mapping</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_page_dirty\">__set_page_dirty</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#mapping\">mapping</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#mark_buffer_dirty\">mark_buffer_dirty</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Decrement a buffer_head's reference count.  If all buffers against a page</span>", 
"<span class=\"comment\"> * have zero reference count, are clean and unlocked, and if the page is clean</span>", 
"<span class=\"comment\"> * and unlocked then try_to_free_buffers() may strip the buffers from the page</span>", 
"<span class=\"comment\"> * in preparation for freeing it (sometimes, rarely, buffers are removed from</span>", 
"<span class=\"comment\"> * a page but it ends up not being freed, and buffers may later be reattached).</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__brelse\">__brelse</a>(struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> * <a class=\"id\" href=\"#buf\">buf</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#buf\">buf</a>-><a class=\"id\" href=\"#b_count\">b_count</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_bh\">put_bh</a>(<a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN\">WARN</a>(1, <a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"VFS: brelse: Trying to free free buffer\\n\");", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__brelse\">__brelse</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * bforget() is like brelse(), except it discards any</span>", 
"<span class=\"comment\"> * potentially dirty data.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__bforget\">__bforget</a>(struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_dirty\">clear_buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_assoc_map\">b_assoc_map</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#buffer_mapping\">buffer_mapping</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_page\">b_page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#buffer_mapping\">buffer_mapping</a>-><a class=\"id\" href=\"#private_lock\">private_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_assoc_buffers\">b_assoc_buffers</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_assoc_map\">b_assoc_map</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#buffer_mapping\">buffer_mapping</a>-><a class=\"id\" href=\"#private_lock\">private_lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__brelse\">__brelse</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__bforget\">__bforget</a>);", 
"", 
"static struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#__bread_slow\">__bread_slow</a>(struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_buffer\">lock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_buffer\">unlock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_bh\">get_bh</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_end_io\">b_end_io</a> = <a class=\"id\" href=\"#end_buffer_read_sync\">end_buffer_read_sync</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#submit_bh\">submit_bh</a>(<a class=\"id\" href=\"#READ\">READ</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_on_buffer\">wait_on_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Per-cpu buffer LRU implementation.  To reduce the cost of __find_get_block().</span>", 
"<span class=\"comment\"> * The bhs[] array is sorted - newest buffer is at bhs[0].  Buffers have their</span>", 
"<span class=\"comment\"> * refcount elevated by one when they're in an LRU.  A buffer can only appear</span>", 
"<span class=\"comment\"> * once in a particular CPU's LRU.  A single buffer can be present in multiple</span>", 
"<span class=\"comment\"> * CPU's LRUs at the same time.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is a transparent caching front-end to sb_bread(), sb_getblk() and</span>", 
"<span class=\"comment\"> * sb_find_get_block().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The LRUs themselves only need locking against invalidate_bh_lrus.  We use</span>", 
"<span class=\"comment\"> * a local interrupt disable for that.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BH_LRU_SIZE\">BH_LRU_SIZE</a><span class=\"ts\"/>8", 
"", 
"struct <a class=\"id\" href=\"#bh_lru\">bh_lru</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bhs\">bhs</a>[<a class=\"id\" href=\"#BH_LRU_SIZE\">BH_LRU_SIZE</a>];", 
"};", 
"", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#bh_lru\">bh_lru</a>, <a class=\"id\" href=\"#bh_lrus\">bh_lrus</a>) = {{ <a class=\"id\" href=\"#NULL\">NULL</a> }};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#bh_lru_lock\">bh_lru_lock</a>()<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>()", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#bh_lru_unlock\">bh_lru_unlock</a>()<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>()", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#bh_lru_lock\">bh_lru_lock</a>()<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>()", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#bh_lru_unlock\">bh_lru_unlock</a>()<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>()", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#check_irqs_on\">check_irqs_on</a>(void)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>());", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The LRU management algorithm is dopey-but-simple.  Sorry.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#bh_lru_install\">bh_lru_install</a>(struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#evictee\">evictee</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bh_lru\">bh_lru</a> *<a class=\"id\" href=\"#lru\">lru</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_irqs_on\">check_irqs_on</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh_lru_lock\">bh_lru_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lru\">lru</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#bh_lrus\">bh_lrus</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#lru\">lru</a>-><a class=\"id\" href=\"#bhs\">bhs</a>[0] != <a class=\"id\" href=\"#bh\">bh</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bhs\">bhs</a>[<a class=\"id\" href=\"#BH_LRU_SIZE\">BH_LRU_SIZE</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#in\">in</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#out\">out</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_bh\">get_bh</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bhs\">bhs</a>[<a class=\"id\" href=\"#out\">out</a>++] = <a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#in\">in</a> = 0; <a class=\"id\" href=\"#in\">in</a> &lt; <a class=\"id\" href=\"#BH_LRU_SIZE\">BH_LRU_SIZE</a>; <a class=\"id\" href=\"#in\">in</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh2\">bh2</a> = <a class=\"id\" href=\"#lru\">lru</a>-><a class=\"id\" href=\"#bhs\">bhs</a>[<a class=\"id\" href=\"#in\">in</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bh2\">bh2</a> == <a class=\"id\" href=\"#bh\">bh</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__brelse\">__brelse</a>(<a class=\"id\" href=\"#bh2\">bh2</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#out\">out</a> >= <a class=\"id\" href=\"#BH_LRU_SIZE\">BH_LRU_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#evictee\">evictee</a> != <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#evictee\">evictee</a> = <a class=\"id\" href=\"#bh2\">bh2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bhs\">bhs</a>[<a class=\"id\" href=\"#out\">out</a>++] = <a class=\"id\" href=\"#bh2\">bh2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#out\">out</a> &lt; <a class=\"id\" href=\"#BH_LRU_SIZE\">BH_LRU_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bhs\">bhs</a>[<a class=\"id\" href=\"#out\">out</a>++] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#lru\">lru</a>-><a class=\"id\" href=\"#bhs\">bhs</a>, <a class=\"id\" href=\"#bhs\">bhs</a>, sizeof(<a class=\"id\" href=\"#bhs\">bhs</a>));", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh_lru_unlock\">bh_lru_unlock</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#evictee\">evictee</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__brelse\">__brelse</a>(<a class=\"id\" href=\"#evictee\">evictee</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Look up the bh in this cpu's LRU.  If it's there, move it to the head.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *", 
"<a class=\"id\" href=\"#lookup_bh_lru\">lookup_bh_lru</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#block\">block</a>, unsigned <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bh_lru\">bh_lru</a> *<a class=\"id\" href=\"#lru\">lru</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_irqs_on\">check_irqs_on</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh_lru_lock\">bh_lru_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lru\">lru</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#bh_lrus\">bh_lrus</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#BH_LRU_SIZE\">BH_LRU_SIZE</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#lru\">lru</a>-><a class=\"id\" href=\"#bhs\">bhs</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bh\">bh</a> && <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_bdev\">b_bdev</a> == <a class=\"id\" href=\"#bdev\">bdev</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_blocknr\">b_blocknr</a> == <a class=\"id\" href=\"#block\">block</a> && <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_size\">b_size</a> == <a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lru\">lru</a>-><a class=\"id\" href=\"#bhs\">bhs</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#lru\">lru</a>-><a class=\"id\" href=\"#bhs\">bhs</a>[<a class=\"id\" href=\"#i\">i</a> - 1];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lru\">lru</a>-><a class=\"id\" href=\"#bhs\">bhs</a>[0] = <a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_bh\">get_bh</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh_lru_unlock\">bh_lru_unlock</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Perform a pagecache lookup for the matching buffer.  If it's there, refresh</span>", 
"<span class=\"comment\"> * it in the LRU and mark it as accessed.  If it is not present then return</span>", 
"<span class=\"comment\"> * NULL</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *", 
"<a class=\"id\" href=\"#__find_get_block\">__find_get_block</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#block\">block</a>, unsigned <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#lookup_bh_lru\">lookup_bh_lru</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bh\">bh</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#__find_get_block_slow\">__find_get_block_slow</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#block\">block</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bh\">bh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh_lru_install\">bh_lru_install</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bh\">bh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#touch_buffer\">touch_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bh\">bh</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__find_get_block\">__find_get_block</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * __getblk will locate (and, if necessary, create) the buffer_head</span>", 
"<span class=\"comment\"> * which corresponds to the passed block_device, block and size. The</span>", 
"<span class=\"comment\"> * returned buffer has its reference count incremented.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * __getblk() cannot fail - it just keeps trying.  If you pass it an</span>", 
"<span class=\"comment\"> * illegal block number, __getblk() will happily return a buffer_head</span>", 
"<span class=\"comment\"> * which represents the non-existent block.  Very weird.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * __getblk() will lock up the machine if grow_dev_page's try_to_free_buffers()</span>", 
"<span class=\"comment\"> * attempt is failing.  FIXME, perhaps?</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *", 
"<a class=\"id\" href=\"#__getblk\">__getblk</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#block\">block</a>, unsigned <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#__find_get_block\">__find_get_block</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bh\">bh</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#__getblk_slow\">__getblk_slow</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bh\">bh</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__getblk\">__getblk</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Do async read-ahead on a buffer..</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__breadahead\">__breadahead</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#block\">block</a>, unsigned <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#__getblk\">__getblk</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ll_rw_block\">ll_rw_block</a>(<a class=\"id\" href=\"#READA\">READA</a>, 1, &amp;<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__breadahead\">__breadahead</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *  __bread() - reads a specified block and returns the bh</span>", 
"<span class=\"comment\"> *  @bdev: the block_device to read from</span>", 
"<span class=\"comment\"> *  @block: number of block</span>", 
"<span class=\"comment\"> *  @size: size (in bytes) to read</span>", 
"<span class=\"comment\"> * </span>", 
"<span class=\"comment\"> *  Reads a specified block, and returns buffer head that contains it.</span>", 
"<span class=\"comment\"> *  It returns NULL if the block was unreadable.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *", 
"<a class=\"id\" href=\"#__bread\">__bread</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#block\">block</a>, unsigned <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#__getblk\">__getblk</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#bh\">bh</a>) && !<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#__bread_slow\">__bread_slow</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bh\">bh</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__bread\">__bread</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * invalidate_bh_lrus() is called rarely - but not only at unmount.</span>", 
"<span class=\"comment\"> * This doesn't race because it runs in each cpu either in irq</span>", 
"<span class=\"comment\"> * or with preempt disabled.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#invalidate_bh_lru\">invalidate_bh_lru</a>(void *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bh_lru\">bh_lru</a> *<a class=\"id\" href=\"#b\">b</a> = &amp;<a class=\"id\" href=\"#get_cpu_var\">get_cpu_var</a>(<a class=\"id\" href=\"#bh_lrus\">bh_lrus</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#BH_LRU_SIZE\">BH_LRU_SIZE</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brelse\">brelse</a>(<a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#bhs\">bhs</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b\">b</a>-><a class=\"id\" href=\"#bhs\">bhs</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu_var\">put_cpu_var</a>(<a class=\"id\" href=\"#bh_lrus\">bh_lrus</a>);", 
"}", 
"<span class=\"ts\"/>", 
"void <a class=\"id\" href=\"#invalidate_bh_lrus\">invalidate_bh_lrus</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#on_each_cpu\">on_each_cpu</a>(<a class=\"id\" href=\"#invalidate_bh_lru\">invalidate_bh_lru</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 1);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#invalidate_bh_lrus\">invalidate_bh_lrus</a>);", 
"", 
"void <a class=\"id\" href=\"#set_bh_page\">set_bh_page</a>(struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, unsigned long <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_page\">b_page</a> = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#offset\">offset</a> >= <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageHighMem\">PageHighMem</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This catches illegal uses and preserves the offset:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a> = (char *)(0 + <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a> = <a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>) + <a class=\"id\" href=\"#offset\">offset</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#set_bh_page\">set_bh_page</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called when truncating a buffer on a page completely.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#discard_buffer\">discard_buffer</a>(struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> * <a class=\"id\" href=\"#bh\">bh</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_buffer\">lock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_dirty\">clear_buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_bdev\">b_bdev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_mapped\">clear_buffer_mapped</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_req\">clear_buffer_req</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_new\">clear_buffer_new</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_delay\">clear_buffer_delay</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_unwritten\">clear_buffer_unwritten</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_buffer\">unlock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * block_invalidatepage - invalidate part of all of a buffer-backed page</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @page: the page which is affected</span>", 
"<span class=\"comment\"> * @offset: the index of the truncation point</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * block_invalidatepage() is called when all or part of the page has become</span>", 
"<span class=\"comment\"> * invalidatedby a truncate operation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * block_invalidatepage() does not have to release all buffers, but it must</span>", 
"<span class=\"comment\"> * ensure that no dirty buffer is left outside @offset and that no I/O</span>", 
"<span class=\"comment\"> * is underway against any of the blocks which are outside the truncation</span>", 
"<span class=\"comment\"> * point.  Because the caller is about to free (and possibly reuse) those</span>", 
"<span class=\"comment\"> * blocks on-disk.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#block_invalidatepage\">block_invalidatepage</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, unsigned long <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#head\">head</a>, *<a class=\"id\" href=\"#bh\">bh</a>, *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#curr_off\">curr_off</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#PageLocked\">PageLocked</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page_has_buffers\">page_has_buffers</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#page_buffers\">page_buffers</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#next_off\">next_off</a> = <a class=\"id\" href=\"#curr_off\">curr_off</a> + <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_size\">b_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is this block fully invalidated?</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> <= <a class=\"id\" href=\"#curr_off\">curr_off</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#discard_buffer\">discard_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#curr_off\">curr_off</a> = <a class=\"id\" href=\"#next_off\">next_off</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#bh\">bh</a> != <a class=\"id\" href=\"#head\">head</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We release buffers only if the entire page is being invalidated.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The get_block cached value has been unconditionally invalidated,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so real IO is not possible anymore.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#try_to_release_page\">try_to_release_page</a>(<a class=\"id\" href=\"#page\">page</a>, 0);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#block_invalidatepage\">block_invalidatepage</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We attach and possibly dirty the buffers atomically wrt</span>", 
"<span class=\"comment\"> * __set_page_dirty_buffers() via private_lock.  try_to_free_buffers</span>", 
"<span class=\"comment\"> * is already excluded via the page lock.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#create_empty_buffers\">create_empty_buffers</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#blocksize\">blocksize</a>, unsigned long <a class=\"id\" href=\"#b_state\">b_state</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>, *<a class=\"id\" href=\"#head\">head</a>, *<a class=\"id\" href=\"#tail\">tail</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#alloc_page_buffers\">alloc_page_buffers</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#blocksize\">blocksize</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_state\">b_state</a> |= <a class=\"id\" href=\"#b_state\">b_state</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tail\">tail</a> = <a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tail\">tail</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a> = <a class=\"id\" href=\"#head\">head</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#private_lock\">private_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageUptodate\">PageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>) || <a class=\"id\" href=\"#PageDirty\">PageDirty</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageDirty\">PageDirty</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_dirty\">set_buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageUptodate\">PageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_uptodate\">set_buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} while (<a class=\"id\" href=\"#bh\">bh</a> != <a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#attach_page_buffers\">attach_page_buffers</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#private_lock\">private_lock</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#create_empty_buffers\">create_empty_buffers</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We are taking a block for data and we don't want any output from any</span>", 
"<span class=\"comment\"> * buffer-cache aliases starting from return from that function and</span>", 
"<span class=\"comment\"> * until the moment when something will explicitly mark the buffer</span>", 
"<span class=\"comment\"> * dirty (hopefully that will not happen until we will free that block ;-)</span>", 
"<span class=\"comment\"> * We don't even need to mark it not-uptodate - nobody can expect</span>", 
"<span class=\"comment\"> * anything from a newly allocated buffer anyway. We used to used</span>", 
"<span class=\"comment\"> * unmap_buffer() for such invalidation, but that was wrong. We definitely</span>", 
"<span class=\"comment\"> * don't want to mark the alias unmapped, for example - it would confuse</span>", 
"<span class=\"comment\"> * anyone who might pick it with bread() afterwards...</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Also..  Note that bforget() doesn't lock the buffer.  So there can</span>", 
"<span class=\"comment\"> * be writeout I/O going on against recently-freed buffers.  We don't</span>", 
"<span class=\"comment\"> * wait on that I/O in bforget() - it's more efficient to wait on the I/O</span>", 
"<span class=\"comment\"> * only if we really need to.  That happens here.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#unmap_underlying_metadata\">unmap_underlying_metadata</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#block\">block</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#old_bh\">old_bh</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_bh\">old_bh</a> = <a class=\"id\" href=\"#__find_get_block_slow\">__find_get_block_slow</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#block\">block</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#old_bh\">old_bh</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_dirty\">clear_buffer_dirty</a>(<a class=\"id\" href=\"#old_bh\">old_bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_on_buffer\">wait_on_buffer</a>(<a class=\"id\" href=\"#old_bh\">old_bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_req\">clear_buffer_req</a>(<a class=\"id\" href=\"#old_bh\">old_bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__brelse\">__brelse</a>(<a class=\"id\" href=\"#old_bh\">old_bh</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#unmap_underlying_metadata\">unmap_underlying_metadata</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * NOTE! All mapped/uptodate combinations are valid:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Mapped<span class=\"ts\"/>Uptodate<span class=\"ts\"/>Meaning</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>No<span class=\"ts\"/>No<span class=\"ts\"/><span class=\"ts\"/>\"unknown\" - must do get_block()</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>No<span class=\"ts\"/>Yes<span class=\"ts\"/><span class=\"ts\"/>\"hole\" - zero-filled</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Yes<span class=\"ts\"/>No<span class=\"ts\"/><span class=\"ts\"/>\"allocated\" - allocated on disk, not read in</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Yes<span class=\"ts\"/>Yes<span class=\"ts\"/><span class=\"ts\"/>\"valid\" - allocated and up-to-date in memory.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * \"Dirty\" is valid only with the last case (mapped+uptodate).</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * While block_write_full_page is writing back the dirty buffers under</span>", 
"<span class=\"comment\"> * the page lock, whoever dirtied the buffers may decide to clean them</span>", 
"<span class=\"comment\"> * again at any time.  We handle that by only looking at the buffer</span>", 
"<span class=\"comment\"> * state inside lock_buffer().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If block_write_full_page() is called for regular writeback</span>", 
"<span class=\"comment\"> * (wbc-&gt;sync_mode == WB_SYNC_NONE) then it will redirty a page which has a</span>", 
"<span class=\"comment\"> * locked buffer.   This only can happen if someone has written the buffer</span>", 
"<span class=\"comment\"> * directly, with submit_bh().  At the address_space level PageWriteback</span>", 
"<span class=\"comment\"> * prevents this contention from occurring.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If block_write_full_page() is called with wbc-&gt;sync_mode ==</span>", 
"<span class=\"comment\"> * WB_SYNC_ALL, the writes are posted using WRITE_SYNC_PLUG; this</span>", 
"<span class=\"comment\"> * causes the writes to be flagged as synchronous writes, but the</span>", 
"<span class=\"comment\"> * block device queue will NOT be unplugged, since usually many pages</span>", 
"<span class=\"comment\"> * will be pushed to the out before the higher-level caller actually</span>", 
"<span class=\"comment\"> * waits for the writes to be completed.  The various wait functions,</span>", 
"<span class=\"comment\"> * such as wait_on_writeback_range() will ultimately call sync_page()</span>", 
"<span class=\"comment\"> * which will ultimately call blk_run_backing_dev(), which will end up</span>", 
"<span class=\"comment\"> * unplugging the device queue.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__block_write_full_page\">__block_write_full_page</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_block_t\">get_block_t</a> *<a class=\"id\" href=\"#get_block\">get_block</a>, struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a> *<a class=\"id\" href=\"#wbc\">wbc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh_end_io_t\">bh_end_io_t</a> *<a class=\"id\" href=\"#handler\">handler</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#block\">block</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#last_block\">last_block</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>, *<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>const unsigned <a class=\"id\" href=\"#blocksize\">blocksize</a> = 1 << <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_underway\">nr_underway</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#write_op\">write_op</a> = (<a class=\"id\" href=\"#wbc\">wbc</a>-><a class=\"id\" href=\"#sync_mode\">sync_mode</a> == <a class=\"id\" href=\"#WB_SYNC_ALL\">WB_SYNC_ALL</a> ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WRITE_SYNC_PLUG\">WRITE_SYNC_PLUG</a> : <a class=\"id\" href=\"#WRITE\">WRITE</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#PageLocked\">PageLocked</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#last_block\">last_block</a> = (<a class=\"id\" href=\"#i_size_read\">i_size_read</a>(<a class=\"id\" href=\"#inode\">inode</a>) - 1) >> <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page_has_buffers\">page_has_buffers</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#create_empty_buffers\">create_empty_buffers</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#blocksize\">blocksize</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(1 << <a class=\"id\" href=\"#BH_Dirty\">BH_Dirty</a>)|(1 << <a class=\"id\" href=\"#BH_Uptodate\">BH_Uptodate</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Be very careful.  We have no exclusion from __set_page_dirty_buffers</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * here, and the (potentially unmapped) buffers may become dirty at</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * any time.  If a buffer becomes dirty here after we've inspected it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * then we just miss that fact, and the page stays dirty.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Buffers outside i_size may be dirtied by __set_page_dirty_buffers;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * handle that here by just cleaning them.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#block\">block</a> = (<a class=\"id\" href=\"#sector_t\">sector_t</a>)<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a> << (<a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a> - <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#page_buffers\">page_buffers</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#head\">head</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Get all the dirty buffers mapped to disk addresses and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * handle any aliases from the underlying blockdev's mapping.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#block\">block</a> &gt; <a class=\"id\" href=\"#last_block\">last_block</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * mapped buffers outside i_size will occur, because</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * this page can be outside i_size when there is a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * truncate in progress.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * The buffer was zeroed by block_write_full_page()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_dirty\">clear_buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_uptodate\">set_buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if ((!<a class=\"id\" href=\"#buffer_mapped\">buffer_mapped</a>(<a class=\"id\" href=\"#bh\">bh</a>) || <a class=\"id\" href=\"#buffer_delay\">buffer_delay</a>(<a class=\"id\" href=\"#bh\">bh</a>)) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#buffer_dirty\">buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_size\">b_size</a> != <a class=\"id\" href=\"#blocksize\">blocksize</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#get_block\">get_block</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#bh\">bh</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#recover\">recover</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_delay\">clear_buffer_delay</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_new\">buffer_new</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* blockdev mappings never come here */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_new\">clear_buffer_new</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unmap_underlying_metadata\">unmap_underlying_metadata</a>(<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_bdev\">b_bdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_blocknr\">b_blocknr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block\">block</a>++;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#bh\">bh</a> != <a class=\"id\" href=\"#head\">head</a>);", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_mapped\">buffer_mapped</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If it's a fully non-blocking write attempt and we cannot</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * lock the buffer then redirty the page.  Note that this can</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * potentially cause a busy-wait loop from writeback threads</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and kswapd activity, but those code paths have their own</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * higher-level throttling.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#wbc\">wbc</a>-><a class=\"id\" href=\"#sync_mode\">sync_mode</a> != <a class=\"id\" href=\"#WB_SYNC_NONE\">WB_SYNC_NONE</a> || !<a class=\"id\" href=\"#wbc\">wbc</a>-><a class=\"id\" href=\"#nonblocking\">nonblocking</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_buffer\">lock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (!<a class=\"id\" href=\"#trylock_buffer\">trylock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#redirty_page_for_writepage\">redirty_page_for_writepage</a>(<a class=\"id\" href=\"#wbc\">wbc</a>, <a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#test_clear_buffer_dirty\">test_clear_buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mark_buffer_async_write_endio\">mark_buffer_async_write_endio</a>(<a class=\"id\" href=\"#bh\">bh</a>, <a class=\"id\" href=\"#handler\">handler</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_buffer\">unlock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} while ((<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a>) != <a class=\"id\" href=\"#head\">head</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The page and its buffers are protected by PageWriteback(), so we can</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * drop the bh refcounts early.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#PageWriteback\">PageWriteback</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_page_writeback\">set_page_writeback</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_async_write\">buffer_async_write</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#submit_bh\">submit_bh</a>(<a class=\"id\" href=\"#write_op\">write_op</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_underway\">nr_underway</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#bh\">bh</a> != <a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<a class=\"id\" href=\"#done\">done</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_underway\">nr_underway</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The page was marked dirty, but the buffers were</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * clean.  Someone wrote them back by hand with</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * ll_rw_block/submit_bh.  A rare case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end_page_writeback\">end_page_writeback</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The page and buffer_heads can be released at any time from</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * here on.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<a class=\"id\" href=\"#recover\">recover</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ENOSPC, or some other error.  We may already have added some</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * blocks to the file, so we need to write these out to avoid</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * exposing stale data.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The page is currently locked and not marked for writeback</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Recovery: lock and submit the mapped buffers */</span>", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_mapped\">buffer_mapped</a>(<a class=\"id\" href=\"#bh\">bh</a>) && <a class=\"id\" href=\"#buffer_dirty\">buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#buffer_delay\">buffer_delay</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_buffer\">lock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mark_buffer_async_write_endio\">mark_buffer_async_write_endio</a>(<a class=\"id\" href=\"#bh\">bh</a>, <a class=\"id\" href=\"#handler\">handler</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * The buffer may have been set dirty during</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * attachment to a dirty page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_dirty\">clear_buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} while ((<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a>) != <a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SetPageError\">SetPageError</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#PageWriteback\">PageWriteback</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mapping_set_error\">mapping_set_error</a>(<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_page_writeback\">set_page_writeback</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_async_write\">buffer_async_write</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_dirty\">clear_buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#submit_bh\">submit_bh</a>(<a class=\"id\" href=\"#write_op\">write_op</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_underway\">nr_underway</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#bh\">bh</a> != <a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If a page has any new buffers, zero them out here, and mark them uptodate</span>", 
"<span class=\"comment\"> * and dirty so they'll be written out (in order to prevent uninitialised</span>", 
"<span class=\"comment\"> * block data from leaking). And clear the new bit.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#page_zero_new_buffers\">page_zero_new_buffers</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, unsigned <a class=\"id\" href=\"#from\">from</a>, unsigned <a class=\"id\" href=\"#to\">to</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#block_start\">block_start</a>, <a class=\"id\" href=\"#block_end\">block_end</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#head\">head</a>, *<a class=\"id\" href=\"#bh\">bh</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#PageLocked\">PageLocked</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page_has_buffers\">page_has_buffers</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#page_buffers\">page_buffers</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#block_start\">block_start</a> = 0;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_end\">block_end</a> = <a class=\"id\" href=\"#block_start\">block_start</a> + <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_size\">b_size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_new\">buffer_new</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#block_end\">block_end</a> &gt; <a class=\"id\" href=\"#from\">from</a> && <a class=\"id\" href=\"#block_start\">block_start</a> &lt; <a class=\"id\" href=\"#to\">to</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#PageUptodate\">PageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#block_start\">block_start</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#block_end\">block_end</a>) - <a class=\"id\" href=\"#start\">start</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zero_user\">zero_user</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_uptodate\">set_buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_new\">clear_buffer_new</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mark_buffer_dirty\">mark_buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_start\">block_start</a> = <a class=\"id\" href=\"#block_end\">block_end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#bh\">bh</a> != <a class=\"id\" href=\"#head\">head</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#page_zero_new_buffers\">page_zero_new_buffers</a>);", 
"", 
"int <a class=\"id\" href=\"#block_prepare_write\">block_prepare_write</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, unsigned <a class=\"id\" href=\"#from\">from</a>, unsigned <a class=\"id\" href=\"#to\">to</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_block_t\">get_block_t</a> *<a class=\"id\" href=\"#get_block\">get_block</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#block_start\">block_start</a>, <a class=\"id\" href=\"#block_end\">block_end</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#block\">block</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#blocksize\">blocksize</a>, <a class=\"id\" href=\"#bbits\">bbits</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>, *<a class=\"id\" href=\"#head\">head</a>, *<a class=\"id\" href=\"#wait\">wait</a>[2], **<a class=\"id\" href=\"#wait_bh\">wait_bh</a>=<a class=\"id\" href=\"#wait\">wait</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#PageLocked\">PageLocked</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#from\">from</a> &gt; <a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#to\">to</a> &gt; <a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#from\">from</a> &gt; <a class=\"id\" href=\"#to\">to</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blocksize\">blocksize</a> = 1 << <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page_has_buffers\">page_has_buffers</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#create_empty_buffers\">create_empty_buffers</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#blocksize\">blocksize</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#page_buffers\">page_buffers</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bbits\">bbits</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#block\">block</a> = (<a class=\"id\" href=\"#sector_t\">sector_t</a>)<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a> << (<a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a> - <a class=\"id\" href=\"#bbits\">bbits</a>);", 
"", 
"<span class=\"ts\"/>for(<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#block_start\">block_start</a> = 0; <a class=\"id\" href=\"#bh\">bh</a> != <a class=\"id\" href=\"#head\">head</a> || !<a class=\"id\" href=\"#block_start\">block_start</a>;", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#block\">block</a>++, <a class=\"id\" href=\"#block_start\">block_start</a>=<a class=\"id\" href=\"#block_end\">block_end</a>, <a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_end\">block_end</a> = <a class=\"id\" href=\"#block_start\">block_start</a> + <a class=\"id\" href=\"#blocksize\">blocksize</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#block_end\">block_end</a> <= <a class=\"id\" href=\"#from\">from</a> || <a class=\"id\" href=\"#block_start\">block_start</a> >= <a class=\"id\" href=\"#to\">to</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageUptodate\">PageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_uptodate\">set_buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_new\">buffer_new</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_new\">clear_buffer_new</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_mapped\">buffer_mapped</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_size\">b_size</a> != <a class=\"id\" href=\"#blocksize\">blocksize</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#get_block\">get_block</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#bh\">bh</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_new\">buffer_new</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unmap_underlying_metadata\">unmap_underlying_metadata</a>(<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_bdev\">b_bdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_blocknr\">b_blocknr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageUptodate\">PageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_new\">clear_buffer_new</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_uptodate\">set_buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mark_buffer_dirty\">mark_buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#block_end\">block_end</a> &gt; <a class=\"id\" href=\"#to\">to</a> || <a class=\"id\" href=\"#block_start\">block_start</a> &lt; <a class=\"id\" href=\"#from\">from</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zero_user_segments\">zero_user_segments</a>(<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#block_end\">block_end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_start\">block_start</a>, <a class=\"id\" href=\"#from\">from</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageUptodate\">PageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_uptodate\">set_buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue; ", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>) && !<a class=\"id\" href=\"#buffer_delay\">buffer_delay</a>(<a class=\"id\" href=\"#bh\">bh</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#buffer_unwritten\">buffer_unwritten</a>(<a class=\"id\" href=\"#bh\">bh</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>     (<a class=\"id\" href=\"#block_start\">block_start</a> &lt; <a class=\"id\" href=\"#from\">from</a> || <a class=\"id\" href=\"#block_end\">block_end</a> &gt; <a class=\"id\" href=\"#to\">to</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ll_rw_block\">ll_rw_block</a>(<a class=\"id\" href=\"#READ\">READ</a>, 1, &amp;<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#wait_bh\">wait_bh</a>++=<a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we issued read requests - let them complete.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>while(<a class=\"id\" href=\"#wait_bh\">wait_bh</a> &gt; <a class=\"id\" href=\"#wait\">wait</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_on_buffer\">wait_on_buffer</a>(*--<a class=\"id\" href=\"#wait_bh\">wait_bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(*<a class=\"id\" href=\"#wait_bh\">wait_bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#err\">err</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_zero_new_buffers\">page_zero_new_buffers</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#to\">to</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ClearPageUptodate\">ClearPageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#block_prepare_write\">block_prepare_write</a>);", 
"", 
"static int <a class=\"id\" href=\"#__block_commit_write\">__block_commit_write</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#from\">from</a>, unsigned <a class=\"id\" href=\"#to\">to</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#block_start\">block_start</a>, <a class=\"id\" href=\"#block_end\">block_end</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#partial\">partial</a> = 0;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#blocksize\">blocksize</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>, *<a class=\"id\" href=\"#head\">head</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blocksize\">blocksize</a> = 1 << <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a>;", 
"", 
"<span class=\"ts\"/>for(<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#page_buffers\">page_buffers</a>(<a class=\"id\" href=\"#page\">page</a>), <a class=\"id\" href=\"#block_start\">block_start</a> = 0;", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#bh\">bh</a> != <a class=\"id\" href=\"#head\">head</a> || !<a class=\"id\" href=\"#block_start\">block_start</a>;", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#block_start\">block_start</a>=<a class=\"id\" href=\"#block_end\">block_end</a>, <a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_end\">block_end</a> = <a class=\"id\" href=\"#block_start\">block_start</a> + <a class=\"id\" href=\"#blocksize\">blocksize</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#block_end\">block_end</a> <= <a class=\"id\" href=\"#from\">from</a> || <a class=\"id\" href=\"#block_start\">block_start</a> >= <a class=\"id\" href=\"#to\">to</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#partial\">partial</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_uptodate\">set_buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mark_buffer_dirty\">mark_buffer_dirty</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_buffer_new\">clear_buffer_new</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this is a partial write which happened to make all buffers</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * uptodate then we can optimize away a bogus readpage() for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the next read(). Here we 'discover' whether the page went</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * uptodate as a result of this (potentially partial) write.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#partial\">partial</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageUptodate\">SetPageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#__block_write_begin\">__block_write_begin</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>, unsigned <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_block_t\">get_block_t</a> *<a class=\"id\" href=\"#get_block\">get_block</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#pos\">pos</a> &amp; (<a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a> - 1);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#block_prepare_write\">block_prepare_write</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#start\">start</a> + <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#get_block\">get_block</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__block_write_begin\">__block_write_begin</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * block_write_begin takes care of the basic task of block allocation and</span>", 
"<span class=\"comment\"> * bringing partial write blocks uptodate first.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The filesystem needs to handle block truncation upon failure.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#block_write_begin\">block_write_begin</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>, unsigned <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#flags\">flags</a>, struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pagep\">pagep</a>, <a class=\"id\" href=\"#get_block_t\">get_block_t</a> *<a class=\"id\" href=\"#get_block\">get_block</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgoff_t\">pgoff_t</a> <a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#pos\">pos</a> >> <a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#grab_cache_page_write_begin\">grab_cache_page_write_begin</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#index\">index</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page\">page</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#__block_write_begin\">__block_write_begin</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#get_block\">get_block</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#pagep\">pagep</a> = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#status\">status</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#block_write_begin\">block_write_begin</a>);", 
"", 
"int <a class=\"id\" href=\"#block_write_end\">block_write_end</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>, unsigned <a class=\"id\" href=\"#len\">len</a>, unsigned <a class=\"id\" href=\"#copied\">copied</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, void *<a class=\"id\" href=\"#fsdata\">fsdata</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#start\">start</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#pos\">pos</a> &amp; (<a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a> - 1);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#copied\">copied</a> &lt; <a class=\"id\" href=\"#len\">len</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The buffers that were written will now be uptodate, so we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * don't have to worry about a readpage reading them and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * overwriting a partial write. However if we have encountered</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * a short write and only partially written into a buffer, it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * will not be marked uptodate, so a readpage might come in and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * destroy our partial write.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Do the simplest thing, and just treat any short write to a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * non uptodate page as a zero-length write, and force the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * caller to redo the whole thing.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#PageUptodate\">PageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#copied\">copied</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_zero_new_buffers\">page_zero_new_buffers</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#start\">start</a>+<a class=\"id\" href=\"#copied\">copied</a>, <a class=\"id\" href=\"#start\">start</a>+<a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_dcache_page\">flush_dcache_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* This could be a short (even 0-length) commit */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__block_commit_write\">__block_commit_write</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#start\">start</a>+<a class=\"id\" href=\"#copied\">copied</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#copied\">copied</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#block_write_end\">block_write_end</a>);", 
"", 
"int <a class=\"id\" href=\"#generic_write_end\">generic_write_end</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#pos\">pos</a>, unsigned <a class=\"id\" href=\"#len\">len</a>, unsigned <a class=\"id\" href=\"#copied\">copied</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, void *<a class=\"id\" href=\"#fsdata\">fsdata</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i_size_changed\">i_size_changed</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#copied\">copied</a> = <a class=\"id\" href=\"#block_write_end\">block_write_end</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#copied\">copied</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#fsdata\">fsdata</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * No need to use i_size_read() here, the i_size</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cannot change under us because we hold i_mutex.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * But it's important to update i_size while still holding page lock:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * page writeout could otherwise come in and zero beyond i_size.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pos\">pos</a>+<a class=\"id\" href=\"#copied\">copied</a> &gt; <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_size_write\">i_size_write</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#pos\">pos</a>+<a class=\"id\" href=\"#copied\">copied</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_size_changed\">i_size_changed</a> = 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_cache_release\">page_cache_release</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Don't mark the inode dirty under page lock. First, it unnecessarily</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * makes the holding time of page lock longer. Second, it forces lock</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ordering of page lock and transaction start for journaling</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * filesystems.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i_size_changed\">i_size_changed</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mark_inode_dirty\">mark_inode_dirty</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#copied\">copied</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#generic_write_end\">generic_write_end</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * block_is_partially_uptodate checks whether buffers within a page are</span>", 
"<span class=\"comment\"> * uptodate or not.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns true if all buffers which correspond to a file portion</span>", 
"<span class=\"comment\"> * we want to read are uptodate.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#block_is_partially_uptodate\">block_is_partially_uptodate</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#read_descriptor_t\">read_descriptor_t</a> *<a class=\"id\" href=\"#desc\">desc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#from\">from</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#block_start\">block_start</a>, <a class=\"id\" href=\"#block_end\">block_end</a>, <a class=\"id\" href=\"#blocksize\">blocksize</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#to\">to</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>, *<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page_has_buffers\">page_has_buffers</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blocksize\">blocksize</a> = 1 << <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a> = <a class=\"id\" href=\"#min_t\">min_t</a>(unsigned, <a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a> - <a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#desc\">desc</a>-><a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#to\">to</a> = <a class=\"id\" href=\"#from\">from</a> + <a class=\"id\" href=\"#to\">to</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#from\">from</a> &lt; <a class=\"id\" href=\"#blocksize\">blocksize</a> && <a class=\"id\" href=\"#to\">to</a> &gt; <a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a> - <a class=\"id\" href=\"#blocksize\">blocksize</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#page_buffers\">page_buffers</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#block_start\">block_start</a> = 0;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_end\">block_end</a> = <a class=\"id\" href=\"#block_start\">block_start</a> + <a class=\"id\" href=\"#blocksize\">blocksize</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#block_end\">block_end</a> &gt; <a class=\"id\" href=\"#from\">from</a> && <a class=\"id\" href=\"#block_start\">block_start</a> &lt; <a class=\"id\" href=\"#to\">to</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#block_end\">block_end</a> >= <a class=\"id\" href=\"#to\">to</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_start\">block_start</a> = <a class=\"id\" href=\"#block_end\">block_end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#bh\">bh</a> != <a class=\"id\" href=\"#head\">head</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#block_is_partially_uptodate\">block_is_partially_uptodate</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Generic \"read page\" function for block devices that have the normal</span>", 
"<span class=\"comment\"> * get_block functionality. This is most of the block device filesystems.</span>", 
"<span class=\"comment\"> * Reads the page asynchronously --- the unlock_buffer() and</span>", 
"<span class=\"comment\"> * set/clear_buffer_uptodate() functions propagate buffer state into the</span>", 
"<span class=\"comment\"> * page struct once IO has completed.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#block_read_full_page\">block_read_full_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#get_block_t\">get_block_t</a> *<a class=\"id\" href=\"#get_block\">get_block</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#iblock\">iblock</a>, <a class=\"id\" href=\"#lblock\">lblock</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>, *<a class=\"id\" href=\"#head\">head</a>, *<a class=\"id\" href=\"#arr\">arr</a>[<a class=\"id\" href=\"#MAX_BUF_PER_PAGE\">MAX_BUF_PER_PAGE</a>];", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#blocksize\">blocksize</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr\">nr</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#fully_mapped\">fully_mapped</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#PageLocked\">PageLocked</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blocksize\">blocksize</a> = 1 << <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page_has_buffers\">page_has_buffers</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#create_empty_buffers\">create_empty_buffers</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#blocksize\">blocksize</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#page_buffers\">page_buffers</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iblock\">iblock</a> = (<a class=\"id\" href=\"#sector_t\">sector_t</a>)<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#index\">index</a> << (<a class=\"id\" href=\"#PAGE_CACHE_SHIFT\">PAGE_CACHE_SHIFT</a> - <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lblock\">lblock</a> = (<a class=\"id\" href=\"#i_size_read\">i_size_read</a>(<a class=\"id\" href=\"#inode\">inode</a>)+<a class=\"id\" href=\"#blocksize\">blocksize</a>-1) >> <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = 0;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_mapped\">buffer_mapped</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fully_mapped\">fully_mapped</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#iblock\">iblock</a> &lt; <a class=\"id\" href=\"#lblock\">lblock</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_size\">b_size</a> != <a class=\"id\" href=\"#blocksize\">blocksize</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#get_block\">get_block</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#iblock\">iblock</a>, <a class=\"id\" href=\"#bh\">bh</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageError\">SetPageError</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer_mapped\">buffer_mapped</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zero_user\">zero_user</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#i\">i</a> * <a class=\"id\" href=\"#blocksize\">blocksize</a>, <a class=\"id\" href=\"#blocksize\">blocksize</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_uptodate\">set_buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * get_block() might have updated the buffer</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * synchronously</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arr\">arr</a>[<a class=\"id\" href=\"#nr\">nr</a>++] = <a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#i\">i</a>++, <a class=\"id\" href=\"#iblock\">iblock</a>++, (<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_this_page\">b_this_page</a>) != <a class=\"id\" href=\"#head\">head</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fully_mapped\">fully_mapped</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageMappedToDisk\">SetPageMappedToDisk</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#nr\">nr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * All buffers are uptodate - we can set the page uptodate</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * as well. But not if get_block() returned an error.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#PageError\">PageError</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageUptodate\">SetPageUptodate</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Stage two: lock the buffers */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr\">nr</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#arr\">arr</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_buffer\">lock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mark_buffer_async_read\">mark_buffer_async_read</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Stage 3: start the IO.  Check for uptodateness</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * inside the buffer lock in case another process reading</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the underlying blockdev brought it uptodate (the sct fix).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr\">nr</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#arr\">arr</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer_uptodate\">buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end_buffer_async_read\">end_buffer_async_read</a>(<a class=\"id\" href=\"#bh\">bh</a>, 1);", 
];
xr_frag_insert('l/1e/2e5b19224253ab9f2a712f6d1574267b513239.xr', __xr_tmp);
