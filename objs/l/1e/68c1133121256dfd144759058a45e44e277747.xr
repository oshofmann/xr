var __xr_tmp = [
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clockevents_register_device\">clockevents_register_device</a>(&amp;<a class=\"id\" href=\"#pit_ce\">pit_ce</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#global_clock_event\">global_clock_event</a> = &amp;<a class=\"id\" href=\"#pit_ce\">pit_ce</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Since the PIT overflows every tick, its not very useful</span>", 
"<span class=\"comment\"> * to just read by itself. So use jiffies to emulate a free</span>", 
"<span class=\"comment\"> * running counter:</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#cycle_t\">cycle_t</a> <a class=\"id\" href=\"#pit_read\">pit_read</a>(struct <a class=\"id\" href=\"#clocksource\">clocksource</a> *<a class=\"id\" href=\"#cs\">cs</a>)", 
"{", 
"<span class=\"ts\"/>static int <a class=\"id\" href=\"#old_count\">old_count</a>;", 
"<span class=\"ts\"/>static <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#old_jifs\">old_jifs</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#jifs\">jifs</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irqsave\">raw_spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#i8253_lock\">i8253_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Although our caller may have the read side of xtime_lock,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this is now a seqlock, and we are cheating in this routine</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * by having side effects on state that we cannot undo if</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * there is a collision on the seqlock and our caller has to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * retry.  (Namely, old_jifs and old_count.)  So we must treat</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * jiffies as volatile despite the lock.  We read jiffies</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * before latching the timer count to guarantee that although</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the jiffies value might be older than the count (that is,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the counter may underflow between the last point where</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * jiffies was incremented and the point where we latch the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * count), it cannot be newer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jifs\">jifs</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#outb_pit\">outb_pit</a>(0x00, <a class=\"id\" href=\"#PIT_MODE\">PIT_MODE</a>);<span class=\"ts\"/><span class=\"comment\">/* latch the count ASAP */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#inb_pit\">inb_pit</a>(<a class=\"id\" href=\"#PIT_CH0\">PIT_CH0</a>);<span class=\"ts\"/><span class=\"comment\">/* read the latched count */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> |= <a class=\"id\" href=\"#inb_pit\">inb_pit</a>(<a class=\"id\" href=\"#PIT_CH0\">PIT_CH0</a>) << 8;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* VIA686a test code... reset the latch if count &gt; max + 1 */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> &gt; <a class=\"id\" href=\"#LATCH\">LATCH</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#outb_pit\">outb_pit</a>(0x34, <a class=\"id\" href=\"#PIT_MODE\">PIT_MODE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#outb_pit\">outb_pit</a>(<a class=\"id\" href=\"#LATCH\">LATCH</a> &amp; 0xff, <a class=\"id\" href=\"#PIT_CH0\">PIT_CH0</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#outb_pit\">outb_pit</a>(<a class=\"id\" href=\"#LATCH\">LATCH</a> >> 8, <a class=\"id\" href=\"#PIT_CH0\">PIT_CH0</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#LATCH\">LATCH</a> - 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It's possible for count to appear to go the wrong way for a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * couple of reasons:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  1. The timer counter underflows, but we haven't handled the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *     resulting interrupt and incremented jiffies yet.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  2. Hardware problem with the timer, not giving us continuous time,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *     the counter does small \"jumps\" upwards on some Pentium systems,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *     (see c't 95/10 page 335 for Neptun bug.)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Previous attempts to handle these cases intelligently were</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * buggy, so we just do the simple thing now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> &gt; <a class=\"id\" href=\"#old_count\">old_count</a> && <a class=\"id\" href=\"#jifs\">jifs</a> == <a class=\"id\" href=\"#old_jifs\">old_jifs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#old_count\">old_count</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_count\">old_count</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#old_jifs\">old_jifs</a> = <a class=\"id\" href=\"#jifs\">jifs</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irqrestore\">raw_spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#i8253_lock\">i8253_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = (<a class=\"id\" href=\"#LATCH\">LATCH</a> - 1) - <a class=\"id\" href=\"#count\">count</a>;", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#cycle_t\">cycle_t</a>)(<a class=\"id\" href=\"#jifs\">jifs</a> * <a class=\"id\" href=\"#LATCH\">LATCH</a>) + <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#clocksource\">clocksource</a> <a class=\"id\" href=\"#pit_cs\">pit_cs</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>= \"pit\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#rating\">rating</a><span class=\"ts\"/><span class=\"ts\"/>= 110,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#read\">read</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#pit_read\">pit_read</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#mask\">mask</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#CLOCKSOURCE_MASK\">CLOCKSOURCE_MASK</a>(32),", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#mult\">mult</a><span class=\"ts\"/><span class=\"ts\"/>= 0,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#shift\">shift</a><span class=\"ts\"/><span class=\"ts\"/>= 20,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#init_pit_clocksource\">init_pit_clocksource</a>(void)", 
"{", 
"<span class=\"ts\"/> <span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/>  * Several reasons not to register PIT as a clocksource:</span>", 
"<span class=\"comment\"><span class=\"ts\"/>  *</span>", 
"<span class=\"comment\"><span class=\"ts\"/>  * - On SMP PIT does not scale due to i8253_lock</span>", 
"<span class=\"comment\"><span class=\"ts\"/>  * - when HPET is enabled</span>", 
"<span class=\"comment\"><span class=\"ts\"/>  * - when local APIC timer is active (PIT is switched off)</span>", 
"<span class=\"comment\"><span class=\"ts\"/>  */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#num_possible_cpus\">num_possible_cpus</a>() &gt; 1 || <a class=\"id\" href=\"#is_hpet_enabled\">is_hpet_enabled</a>() ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#pit_ce\">pit_ce</a>.<a class=\"id\" href=\"#mode\">mode</a> != <a class=\"id\" href=\"#CLOCK_EVT_MODE_PERIODIC\">CLOCK_EVT_MODE_PERIODIC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pit_cs\">pit_cs</a>.<a class=\"id\" href=\"#mult\">mult</a> = <a class=\"id\" href=\"#clocksource_hz2mult\">clocksource_hz2mult</a>(<a class=\"id\" href=\"#CLOCK_TICK_RATE\">CLOCK_TICK_RATE</a>, <a class=\"id\" href=\"#pit_cs\">pit_cs</a>.<a class=\"id\" href=\"#shift\">shift</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#clocksource_register\">clocksource_register</a>(&amp;<a class=\"id\" href=\"#pit_cs\">pit_cs</a>);", 
"}", 
"<a class=\"id\" href=\"#arch_initcall\">arch_initcall</a>(<a class=\"id\" href=\"#init_pit_clocksource\">init_pit_clocksource</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !CONFIG_X86_64 */</span>", 
];
xr_frag_insert('l/1e/68c1133121256dfd144759058a45e44e277747.xr', __xr_tmp);
