var __xr_tmp = [
"<span class=\"ts\"/><span class=\"comment\">/* no private offset for the host; there's an alternative mechanism */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * True if the transport wants to use a host-based work-queue</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#create_work_queue\">create_work_queue</a> : 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Allows a transport to override the default error handler.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>void (* <a class=\"id\" href=\"#eh_strategy_handler\">eh_strategy_handler</a>)(struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This is an optional routine that allows the transport to become</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * involved when a scsi io timer fires. The return value tells the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * timer routine how to finish the io timeout handling:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * EH_HANDLED:<span class=\"ts\"/><span class=\"ts\"/>I fixed the error, please complete the command</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * EH_RESET_TIMER:<span class=\"ts\"/>I need more time, reset the timer and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>begin counting again</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * EH_NOT_HANDLED<span class=\"ts\"/>Begin normal error recovery</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#blk_eh_timer_return\">blk_eh_timer_return</a> (*<a class=\"id\" href=\"#eh_timed_out\">eh_timed_out</a>)(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Used as callback for the completion of i_t_nexus request</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for target drivers.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int (* <a class=\"id\" href=\"#it_nexus_response\">it_nexus_response</a>)(struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *, <a class=\"id\" href=\"#u64\">u64</a>, int);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Used as callback for the completion of task management</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * request for target drivers.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int (* <a class=\"id\" href=\"#tsk_mgmt_response\">tsk_mgmt_response</a>)(struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *, <a class=\"id\" href=\"#u64\">u64</a>, <a class=\"id\" href=\"#u64\">u64</a>, int);", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#transport_class_to_shost\">transport_class_to_shost</a>(<a class=\"id\" href=\"#tc\">tc</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_to_shost\">dev_to_shost</a>((<a class=\"id\" href=\"#tc\">tc</a>)-><a class=\"id\" href=\"#parent\">parent</a>)", 
"", 
"", 
"<span class=\"comment\">/* Private area maintenance. The driver requested allocations come</span>", 
"<span class=\"comment\"> * directly after the transport class allocations (if any).  The idea</span>", 
"<span class=\"comment\"> * is that you *must* call these only once.  The code assumes that the</span>", 
"<span class=\"comment\"> * initial values are the ones the transport specific code requires */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#scsi_transport_reserve_target\">scsi_transport_reserve_target</a>(struct <a class=\"id\" href=\"#scsi_transport_template\">scsi_transport_template</a> * <a class=\"id\" href=\"#t\">t</a>, int <a class=\"id\" href=\"#space\">space</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#target_private_offset\">target_private_offset</a> != 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#target_private_offset\">target_private_offset</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#target_size\">target_size</a>, sizeof(void *));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#target_size\">target_size</a> = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#target_private_offset\">target_private_offset</a> + <a class=\"id\" href=\"#space\">space</a>;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#scsi_transport_reserve_device\">scsi_transport_reserve_device</a>(struct <a class=\"id\" href=\"#scsi_transport_template\">scsi_transport_template</a> * <a class=\"id\" href=\"#t\">t</a>, int <a class=\"id\" href=\"#space\">space</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#device_private_offset\">device_private_offset</a> != 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#device_private_offset\">device_private_offset</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#device_size\">device_size</a>, sizeof(void *));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#device_size\">device_size</a> = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#device_private_offset\">device_private_offset</a> + <a class=\"id\" href=\"#space\">space</a>;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *", 
"<a class=\"id\" href=\"#scsi_transport_target_data\">scsi_transport_target_data</a>(struct <a class=\"id\" href=\"#scsi_target\">scsi_target</a> *<a class=\"id\" href=\"#starget\">starget</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a> = <a class=\"id\" href=\"#dev_to_shost\">dev_to_shost</a>(&amp;<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#u8\">u8</a> *)<a class=\"id\" href=\"#starget\">starget</a>-><a class=\"id\" href=\"#starget_data\">starget_data</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>+ <a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#transportt\">transportt</a>-><a class=\"id\" href=\"#target_private_offset\">target_private_offset</a>;", 
"", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *", 
"<a class=\"id\" href=\"#scsi_transport_device_data\">scsi_transport_device_data</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#shost\">shost</a> = <a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#u8\">u8</a> *)<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#sdev_data\">sdev_data</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>+ <a class=\"id\" href=\"#shost\">shost</a>-><a class=\"id\" href=\"#transportt\">transportt</a>-><a class=\"id\" href=\"#device_private_offset\">device_private_offset</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* SCSI_TRANSPORT_H */</span>", 
];
xr_frag_insert('l/1e/71dd429db070106e4f3ac2bea988a6b8e98cc7.xr', __xr_tmp);
