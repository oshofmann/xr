var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (C) 2005 Intel Corporation</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>Venkatesh Pallipadi &lt;venkatesh.pallipadi@intel.com&gt;</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/>- Added _PDC for SMP C-states on Intel CPUs</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#acpi\">acpi</a>/<a class=\"id\" href=\"#processor\">processor</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Initialize bm_flags based on the CPU cache properties</span>", 
"<span class=\"comment\"> * On SMP it depends on cache configuration</span>", 
"<span class=\"comment\"> * - When cache is not shared among all CPUs, we flush cache</span>", 
"<span class=\"comment\"> *   before entering C3.</span>", 
"<span class=\"comment\"> * - When cache is shared among all CPUs, we use bm_check</span>", 
"<span class=\"comment\"> *   mechanism as in UP case</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This routine is called only after all the CPUs are online</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#acpi_processor_power_init_bm_check\">acpi_processor_power_init_bm_check</a>(struct <a class=\"id\" href=\"#acpi_processor_flags\">acpi_processor_flags</a> *<a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a> = &amp;<a class=\"id\" href=\"#cpu_data\">cpu_data</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>-><a class=\"id\" href=\"#bm_check\">bm_check</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#num_online_cpus\">num_online_cpus</a>() == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>-><a class=\"id\" href=\"#bm_check\">bm_check</a> = 1;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_vendor\">x86_vendor</a> == <a class=\"id\" href=\"#X86_VENDOR_INTEL\">X86_VENDOR_INTEL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Today all MP CPUs that support C3 share cache.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * And caches should not be flushed by software while</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * entering C3 type state.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>-><a class=\"id\" href=\"#bm_check\">bm_check</a> = 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * On all recent Intel platforms, ARB_DISABLE is a nop.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * So, set bm_control to zero to indicate that ARB_DISABLE</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is not required while entering C3 type state on</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * P4, Core and beyond CPUs</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_vendor\">x86_vendor</a> == <a class=\"id\" href=\"#X86_VENDOR_INTEL\">X86_VENDOR_INTEL</a> &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> &gt; 0xf || (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86\">x86</a> == 6 && <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_model\">x86_model</a> >= 0x0f)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>-><a class=\"id\" href=\"#bm_control\">bm_control</a> = 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_processor_power_init_bm_check\">acpi_processor_power_init_bm_check</a>);", 
"", 
"<span class=\"comment\">/* The code below handles cstate entry with monitor-mwait pair on Intel*/</span>", 
"", 
"struct <a class=\"id\" href=\"#cstate_entry\">cstate_entry</a> {", 
"<span class=\"ts\"/>struct {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#eax\">eax</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#ecx\">ecx</a>;", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#ACPI_PROCESSOR_MAX_POWER\">ACPI_PROCESSOR_MAX_POWER</a>];", 
"};", 
"static struct <a class=\"id\" href=\"#cstate_entry\">cstate_entry</a> <a class=\"id\" href=\"#__percpu\">__percpu</a> *<a class=\"id\" href=\"#cpu_cstate_entry\">cpu_cstate_entry</a>;<span class=\"ts\"/><span class=\"comment\">/* per CPU ptr */</span>", 
"", 
"static short <a class=\"id\" href=\"#mwait_supported\">mwait_supported</a>[<a class=\"id\" href=\"#ACPI_PROCESSOR_MAX_POWER\">ACPI_PROCESSOR_MAX_POWER</a>];", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MWAIT_SUBSTATE_MASK\">MWAIT_SUBSTATE_MASK</a><span class=\"ts\"/>(0xf)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MWAIT_CSTATE_MASK\">MWAIT_CSTATE_MASK</a><span class=\"ts\"/>(0xf)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MWAIT_SUBSTATE_SIZE\">MWAIT_SUBSTATE_SIZE</a><span class=\"ts\"/>(4)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CPUID_MWAIT_LEAF\">CPUID_MWAIT_LEAF</a> (5)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CPUID5_ECX_EXTENSIONS_SUPPORTED\">CPUID5_ECX_EXTENSIONS_SUPPORTED</a> (0x1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CPUID5_ECX_INTERRUPT_BREAK\">CPUID5_ECX_INTERRUPT_BREAK</a><span class=\"ts\"/>(0x2)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MWAIT_ECX_INTERRUPT_BREAK\">MWAIT_ECX_INTERRUPT_BREAK</a><span class=\"ts\"/>(0x1)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NATIVE_CSTATE_BEYOND_HALT\">NATIVE_CSTATE_BEYOND_HALT</a><span class=\"ts\"/>(2)", 
"", 
"static long <a class=\"id\" href=\"#acpi_processor_ffh_cstate_probe_cpu\">acpi_processor_ffh_cstate_probe_cpu</a>(void *<a class=\"id\" href=\"#_cx\">_cx</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_processor_cx\">acpi_processor_cx</a> *<a class=\"id\" href=\"#cx\">cx</a> = <a class=\"id\" href=\"#_cx\">_cx</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#eax\">eax</a>, <a class=\"id\" href=\"#ebx\">ebx</a>, <a class=\"id\" href=\"#ecx\">ecx</a>, <a class=\"id\" href=\"#edx\">edx</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#edx_part\">edx_part</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cstate_type\">cstate_type</a>; <span class=\"comment\">/* C-state type and not ACPI C-state type */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#num_cstate_subtype\">num_cstate_subtype</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuid\">cpuid</a>(<a class=\"id\" href=\"#CPUID_MWAIT_LEAF\">CPUID_MWAIT_LEAF</a>, &amp;<a class=\"id\" href=\"#eax\">eax</a>, &amp;<a class=\"id\" href=\"#ebx\">ebx</a>, &amp;<a class=\"id\" href=\"#ecx\">ecx</a>, &amp;<a class=\"id\" href=\"#edx\">edx</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check whether this particular cx_type (in CST) is supported or not */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cstate_type\">cstate_type</a> = ((<a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#address\">address</a> >> <a class=\"id\" href=\"#MWAIT_SUBSTATE_SIZE\">MWAIT_SUBSTATE_SIZE</a>) &amp;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MWAIT_CSTATE_MASK\">MWAIT_CSTATE_MASK</a>) + 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#edx_part\">edx_part</a> = <a class=\"id\" href=\"#edx\">edx</a> >> (<a class=\"id\" href=\"#cstate_type\">cstate_type</a> * <a class=\"id\" href=\"#MWAIT_SUBSTATE_SIZE\">MWAIT_SUBSTATE_SIZE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#num_cstate_subtype\">num_cstate_subtype</a> = <a class=\"id\" href=\"#edx_part\">edx_part</a> &amp; <a class=\"id\" href=\"#MWAIT_SUBSTATE_MASK\">MWAIT_SUBSTATE_MASK</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#num_cstate_subtype\">num_cstate_subtype</a> &lt; (<a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#address\">address</a> &amp; <a class=\"id\" href=\"#MWAIT_SUBSTATE_MASK\">MWAIT_SUBSTATE_MASK</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -1;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* mwait ecx extensions INTERRUPT_BREAK should be supported for C2/C3 */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#ecx\">ecx</a> &amp; <a class=\"id\" href=\"#CPUID5_ECX_EXTENSIONS_SUPPORTED\">CPUID5_ECX_EXTENSIONS_SUPPORTED</a>) ||", 
"<span class=\"ts\"/>    !(<a class=\"id\" href=\"#ecx\">ecx</a> &amp; <a class=\"id\" href=\"#CPUID5_ECX_INTERRUPT_BREAK\">CPUID5_ECX_INTERRUPT_BREAK</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -1;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mwait_supported\">mwait_supported</a>[<a class=\"id\" href=\"#cstate_type\">cstate_type</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mwait_supported\">mwait_supported</a>[<a class=\"id\" href=\"#cstate_type\">cstate_type</a>] = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Monitor-Mwait will be used to enter C-%d \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"state\\n\", <a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#desc\">desc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_CX_DESC_LEN\">ACPI_CX_DESC_LEN</a>, \"ACPI FFH INTEL MWAIT 0x%x\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#address\">address</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#acpi_processor_ffh_cstate_probe\">acpi_processor_ffh_cstate_probe</a>(unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_processor_cx\">acpi_processor_cx</a> *<a class=\"id\" href=\"#cx\">cx</a>, struct <a class=\"id\" href=\"#acpi_power_register\">acpi_power_register</a> *<a class=\"id\" href=\"#reg\">reg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cstate_entry\">cstate_entry</a> *<a class=\"id\" href=\"#percpu_entry\">percpu_entry</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a> = &amp;<a class=\"id\" href=\"#cpu_data\">cpu_data</a>(<a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpu_cstate_entry\">cpu_cstate_entry</a> || <a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#cpuid_level\">cpuid_level</a> &lt; <a class=\"id\" href=\"#CPUID_MWAIT_LEAF\">CPUID_MWAIT_LEAF</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#bit_offset\">bit_offset</a> != <a class=\"id\" href=\"#NATIVE_CSTATE_BEYOND_HALT\">NATIVE_CSTATE_BEYOND_HALT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#percpu_entry\">percpu_entry</a> = <a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#cpu_cstate_entry\">cpu_cstate_entry</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#percpu_entry\">percpu_entry</a>-><a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#index\">index</a>].<a class=\"id\" href=\"#eax\">eax</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#percpu_entry\">percpu_entry</a>-><a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#index\">index</a>].<a class=\"id\" href=\"#ecx\">ecx</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Make sure we are running on right CPU */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#work_on_cpu\">work_on_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#acpi_processor_ffh_cstate_probe_cpu\">acpi_processor_ffh_cstate_probe_cpu</a>, <a class=\"id\" href=\"#cx\">cx</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Use the hint in CST */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#percpu_entry\">percpu_entry</a>-><a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#index\">index</a>].<a class=\"id\" href=\"#eax\">eax</a> = <a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#address\">address</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#percpu_entry\">percpu_entry</a>-><a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#index\">index</a>].<a class=\"id\" href=\"#ecx\">ecx</a> = <a class=\"id\" href=\"#MWAIT_ECX_INTERRUPT_BREAK\">MWAIT_ECX_INTERRUPT_BREAK</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For _CST FFH on Intel, if GAS.access_size bit 1 is cleared,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * then we should skip checking BM_STS for this C-state.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ref: \"Intel Processor Vendor-Specific ACPI Interface Specification\"</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_vendor\">x86_vendor</a> == <a class=\"id\" href=\"#X86_VENDOR_INTEL\">X86_VENDOR_INTEL</a>) && !(<a class=\"id\" href=\"#reg\">reg</a>-><a class=\"id\" href=\"#access_size\">access_size</a> &amp; 0x2))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#bm_sts_skip\">bm_sts_skip</a> = 1;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#acpi_processor_ffh_cstate_probe\">acpi_processor_ffh_cstate_probe</a>);", 
"", 
"void <a class=\"id\" href=\"#acpi_processor_ffh_cstate_enter\">acpi_processor_ffh_cstate_enter</a>(struct <a class=\"id\" href=\"#acpi_processor_cx\">acpi_processor_cx</a> *<a class=\"id\" href=\"#cx\">cx</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cstate_entry\">cstate_entry</a> *<a class=\"id\" href=\"#percpu_entry\">percpu_entry</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#percpu_entry\">percpu_entry</a> = <a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#cpu_cstate_entry\">cpu_cstate_entry</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mwait_idle_with_hints\">mwait_idle_with_hints</a>(<a class=\"id\" href=\"#percpu_entry\">percpu_entry</a>-><a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#index\">index</a>].<a class=\"id\" href=\"#eax\">eax</a>,", 
"<span class=\"ts\"/>                      <a class=\"id\" href=\"#percpu_entry\">percpu_entry</a>-><a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#index\">index</a>].<a class=\"id\" href=\"#ecx\">ecx</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#acpi_processor_ffh_cstate_enter\">acpi_processor_ffh_cstate_enter</a>);", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#ffh_cstate_init\">ffh_cstate_init</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a> = &amp;<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#x86_vendor\">x86_vendor</a> != <a class=\"id\" href=\"#X86_VENDOR_INTEL\">X86_VENDOR_INTEL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_cstate_entry\">cpu_cstate_entry</a> = <a class=\"id\" href=\"#alloc_percpu\">alloc_percpu</a>(struct <a class=\"id\" href=\"#cstate_entry\">cstate_entry</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__exit\">__exit</a> <a class=\"id\" href=\"#ffh_cstate_exit\">ffh_cstate_exit</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_percpu\">free_percpu</a>(<a class=\"id\" href=\"#cpu_cstate_entry\">cpu_cstate_entry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_cstate_entry\">cpu_cstate_entry</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#arch_initcall\">arch_initcall</a>(<a class=\"id\" href=\"#ffh_cstate_init\">ffh_cstate_init</a>);", 
"<a class=\"id\" href=\"#__exitcall\">__exitcall</a>(<a class=\"id\" href=\"#ffh_cstate_exit\">ffh_cstate_exit</a>);", 
];
xr_frag_insert('l/1e/8408a7b32f0854ed9cc732ea4868e7895339a0.xr', __xr_tmp);
