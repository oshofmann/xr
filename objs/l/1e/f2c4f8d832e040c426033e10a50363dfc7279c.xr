var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Scatterlist Cryptographic API.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (c) 2002 James Morris &lt;jmorris@intercode.com.au&gt;</span>", 
"<span class=\"comment\"> * Copyright (c) 2002 David S. Miller (davem@redhat.com)</span>", 
"<span class=\"comment\"> * Copyright (c) 2005 Herbert Xu &lt;herbert@gondor.apana.org.au&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Portions derived from Cryptoapi, by Alexander Kjeldaas &lt;astor@fast.no&gt;</span>", 
"<span class=\"comment\"> * and Nettle, by Niels MÃ¶ller.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify it</span>", 
"<span class=\"comment\"> * under the terms of the GNU General Public License as published by the Free</span>", 
"<span class=\"comment\"> * Software Foundation; either version 2 of the License, or (at your option)</span>", 
"<span class=\"comment\"> * any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#err\">err</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kmod\">kmod</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#param\">param</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"internal.h\"", 
"", 
"<a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#crypto_alg_list\">crypto_alg_list</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#crypto_alg_list\">crypto_alg_list</a>);", 
"<a class=\"id\" href=\"#DECLARE_RWSEM\">DECLARE_RWSEM</a>(<a class=\"id\" href=\"#crypto_alg_sem\">crypto_alg_sem</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#crypto_alg_sem\">crypto_alg_sem</a>);", 
"", 
"<a class=\"id\" href=\"#BLOCKING_NOTIFIER_HEAD\">BLOCKING_NOTIFIER_HEAD</a>(<a class=\"id\" href=\"#crypto_chain\">crypto_chain</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#crypto_chain\">crypto_chain</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#crypto_alg\">crypto_alg</a> *<a class=\"id\" href=\"#crypto_alg_get\">crypto_alg_get</a>(struct <a class=\"id\" href=\"#crypto_alg\">crypto_alg</a> *<a class=\"id\" href=\"#alg\">alg</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#alg\">alg</a>-><a class=\"id\" href=\"#cra_refcnt\">cra_refcnt</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#alg\">alg</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#crypto_alg\">crypto_alg</a> *<a class=\"id\" href=\"#crypto_mod_get\">crypto_mod_get</a>(struct <a class=\"id\" href=\"#crypto_alg\">crypto_alg</a> *<a class=\"id\" href=\"#alg\">alg</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#try_module_get\">try_module_get</a>(<a class=\"id\" href=\"#alg\">alg</a>-><a class=\"id\" href=\"#cra_module\">cra_module</a>) ? <a class=\"id\" href=\"#crypto_alg_get\">crypto_alg_get</a>(<a class=\"id\" href=\"#alg\">alg</a>) : <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#crypto_mod_get\">crypto_mod_get</a>);", 
"", 
"void <a class=\"id\" href=\"#crypto_mod_put\">crypto_mod_put</a>(struct <a class=\"id\" href=\"#crypto_alg\">crypto_alg</a> *<a class=\"id\" href=\"#alg\">alg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a> *<a class=\"id\" href=\"#module\">module</a> = <a class=\"id\" href=\"#alg\">alg</a>-><a class=\"id\" href=\"#cra_module\">cra_module</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#crypto_alg_put\">crypto_alg_put</a>(<a class=\"id\" href=\"#alg\">alg</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#module\">module</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#crypto_mod_put\">crypto_mod_put</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#crypto_is_test_larval\">crypto_is_test_larval</a>(struct <a class=\"id\" href=\"#crypto_larval\">crypto_larval</a> *<a class=\"id\" href=\"#larval\">larval</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#larval\">larval</a>-><a class=\"id\" href=\"#alg\">alg</a>.<a class=\"id\" href=\"#cra_driver_name\">cra_driver_name</a>[0];", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#crypto_alg\">crypto_alg</a> *<a class=\"id\" href=\"#__crypto_alg_lookup\">__crypto_alg_lookup</a>(const char *<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#crypto_alg\">crypto_alg</a> *<a class=\"id\" href=\"#q\">q</a>, *<a class=\"id\" href=\"#alg\">alg</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#best\">best</a> = -2;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#q\">q</a>, &amp;<a class=\"id\" href=\"#crypto_alg_list\">crypto_alg_list</a>, <a class=\"id\" href=\"#cra_list\">cra_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#exact\">exact</a>, <a class=\"id\" href=\"#fuzzy\">fuzzy</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#crypto_is_moribund\">crypto_is_moribund</a>(<a class=\"id\" href=\"#q\">q</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#cra_flags\">cra_flags</a> ^ <a class=\"id\" href=\"#type\">type</a>) &amp; <a class=\"id\" href=\"#mask\">mask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#crypto_is_larval\">crypto_is_larval</a>(<a class=\"id\" href=\"#q\">q</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#crypto_is_test_larval\">crypto_is_test_larval</a>((struct <a class=\"id\" href=\"#crypto_larval\">crypto_larval</a> *)<a class=\"id\" href=\"#q\">q</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    ((struct <a class=\"id\" href=\"#crypto_larval\">crypto_larval</a> *)<a class=\"id\" href=\"#q\">q</a>)-><a class=\"id\" href=\"#mask\">mask</a> != <a class=\"id\" href=\"#mask\">mask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#exact\">exact</a> = !<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#cra_driver_name\">cra_driver_name</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fuzzy\">fuzzy</a> = !<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#cra_name\">cra_name</a>, <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#exact\">exact</a> && !(<a class=\"id\" href=\"#fuzzy\">fuzzy</a> && <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#cra_priority\">cra_priority</a> &gt; <a class=\"id\" href=\"#best\">best</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#crypto_mod_get\">crypto_mod_get</a>(<a class=\"id\" href=\"#q\">q</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#best\">best</a> = <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#cra_priority\">cra_priority</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#alg\">alg</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#crypto_mod_put\">crypto_mod_put</a>(<a class=\"id\" href=\"#alg\">alg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alg\">alg</a> = <a class=\"id\" href=\"#q\">q</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#exact\">exact</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#alg\">alg</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#crypto_larval_destroy\">crypto_larval_destroy</a>(struct <a class=\"id\" href=\"#crypto_alg\">crypto_alg</a> *<a class=\"id\" href=\"#alg\">alg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#crypto_larval\">crypto_larval</a> *<a class=\"id\" href=\"#larval\">larval</a> = (void *)<a class=\"id\" href=\"#alg\">alg</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#crypto_is_larval\">crypto_is_larval</a>(<a class=\"id\" href=\"#alg\">alg</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#larval\">larval</a>-><a class=\"id\" href=\"#adult\">adult</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#crypto_mod_put\">crypto_mod_put</a>(<a class=\"id\" href=\"#larval\">larval</a>-><a class=\"id\" href=\"#adult\">adult</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#larval\">larval</a>);", 
"}", 
"", 
"struct <a class=\"id\" href=\"#crypto_larval\">crypto_larval</a> *<a class=\"id\" href=\"#crypto_larval_alloc\">crypto_larval_alloc</a>(const char *<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#crypto_larval\">crypto_larval</a> *<a class=\"id\" href=\"#larval\">larval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#larval\">larval</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#larval\">larval</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#larval\">larval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#larval\">larval</a>-><a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#larval\">larval</a>-><a class=\"id\" href=\"#alg\">alg</a>.<a class=\"id\" href=\"#cra_flags\">cra_flags</a> = <a class=\"id\" href=\"#CRYPTO_ALG_LARVAL\">CRYPTO_ALG_LARVAL</a> | <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#larval\">larval</a>-><a class=\"id\" href=\"#alg\">alg</a>.<a class=\"id\" href=\"#cra_priority\">cra_priority</a> = -1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#larval\">larval</a>-><a class=\"id\" href=\"#alg\">alg</a>.<a class=\"id\" href=\"#cra_destroy\">cra_destroy</a> = <a class=\"id\" href=\"#crypto_larval_destroy\">crypto_larval_destroy</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strlcpy\">strlcpy</a>(<a class=\"id\" href=\"#larval\">larval</a>-><a class=\"id\" href=\"#alg\">alg</a>.<a class=\"id\" href=\"#cra_name\">cra_name</a>, <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#CRYPTO_MAX_ALG_NAME\">CRYPTO_MAX_ALG_NAME</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_completion\">init_completion</a>(&amp;<a class=\"id\" href=\"#larval\">larval</a>-><a class=\"id\" href=\"#completion\">completion</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#larval\">larval</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#crypto_larval_alloc\">crypto_larval_alloc</a>);", 
"", 
"static struct <a class=\"id\" href=\"#crypto_alg\">crypto_alg</a> *<a class=\"id\" href=\"#crypto_larval_add\">crypto_larval_add</a>(const char *<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#crypto_alg\">crypto_alg</a> *<a class=\"id\" href=\"#alg\">alg</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#crypto_larval\">crypto_larval</a> *<a class=\"id\" href=\"#larval\">larval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#larval\">larval</a> = <a class=\"id\" href=\"#crypto_larval_alloc\">crypto_larval_alloc</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#larval\">larval</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_CAST\">ERR_CAST</a>(<a class=\"id\" href=\"#larval\">larval</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#larval\">larval</a>-><a class=\"id\" href=\"#alg\">alg</a>.<a class=\"id\" href=\"#cra_refcnt\">cra_refcnt</a>, 2);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#crypto_alg_sem\">crypto_alg_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alg\">alg</a> = <a class=\"id\" href=\"#__crypto_alg_lookup\">__crypto_alg_lookup</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#alg\">alg</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alg\">alg</a> = &amp;<a class=\"id\" href=\"#larval\">larval</a>-><a class=\"id\" href=\"#alg\">alg</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#alg\">alg</a>-><a class=\"id\" href=\"#cra_list\">cra_list</a>, &amp;<a class=\"id\" href=\"#crypto_alg_list\">crypto_alg_list</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#crypto_alg_sem\">crypto_alg_sem</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#alg\">alg</a> != &amp;<a class=\"id\" href=\"#larval\">larval</a>-><a class=\"id\" href=\"#alg\">alg</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#larval\">larval</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#alg\">alg</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#crypto_larval_kill\">crypto_larval_kill</a>(struct <a class=\"id\" href=\"#crypto_alg\">crypto_alg</a> *<a class=\"id\" href=\"#alg\">alg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#crypto_larval\">crypto_larval</a> *<a class=\"id\" href=\"#larval\">larval</a> = (void *)<a class=\"id\" href=\"#alg\">alg</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#crypto_alg_sem\">crypto_alg_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#alg\">alg</a>-><a class=\"id\" href=\"#cra_list\">cra_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#crypto_alg_sem\">crypto_alg_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#complete_all\">complete_all</a>(&amp;<a class=\"id\" href=\"#larval\">larval</a>-><a class=\"id\" href=\"#completion\">completion</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#crypto_alg_put\">crypto_alg_put</a>(<a class=\"id\" href=\"#alg\">alg</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#crypto_larval_kill\">crypto_larval_kill</a>);", 
"", 
"static struct <a class=\"id\" href=\"#crypto_alg\">crypto_alg</a> *<a class=\"id\" href=\"#crypto_larval_wait\">crypto_larval_wait</a>(struct <a class=\"id\" href=\"#crypto_alg\">crypto_alg</a> *<a class=\"id\" href=\"#alg\">alg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#crypto_larval\">crypto_larval</a> *<a class=\"id\" href=\"#larval\">larval</a> = (void *)<a class=\"id\" href=\"#alg\">alg</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#timeout\">timeout</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timeout\">timeout</a> = <a class=\"id\" href=\"#wait_for_completion_interruptible_timeout\">wait_for_completion_interruptible_timeout</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#larval\">larval</a>-><a class=\"id\" href=\"#completion\">completion</a>, 60 * <a class=\"id\" href=\"#HZ\">HZ</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alg\">alg</a> = <a class=\"id\" href=\"#larval\">larval</a>-><a class=\"id\" href=\"#adult\">adult</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#timeout\">timeout</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alg\">alg</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EINTR\">EINTR</a>);", 
"<span class=\"ts\"/>else if (!<a class=\"id\" href=\"#timeout\">timeout</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alg\">alg</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ETIMEDOUT\">ETIMEDOUT</a>);", 
"<span class=\"ts\"/>else if (!<a class=\"id\" href=\"#alg\">alg</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alg\">alg</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOENT\">ENOENT</a>);", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#crypto_is_test_larval\">crypto_is_test_larval</a>(<a class=\"id\" href=\"#larval\">larval</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/> !(<a class=\"id\" href=\"#alg\">alg</a>-><a class=\"id\" href=\"#cra_flags\">cra_flags</a> &amp; <a class=\"id\" href=\"#CRYPTO_ALG_TESTED\">CRYPTO_ALG_TESTED</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alg\">alg</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>);", 
"<span class=\"ts\"/>else if (!<a class=\"id\" href=\"#crypto_mod_get\">crypto_mod_get</a>(<a class=\"id\" href=\"#alg\">alg</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alg\">alg</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#crypto_mod_put\">crypto_mod_put</a>(&amp;<a class=\"id\" href=\"#larval\">larval</a>-><a class=\"id\" href=\"#alg\">alg</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#alg\">alg</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#crypto_alg\">crypto_alg</a> *<a class=\"id\" href=\"#crypto_alg_lookup\">crypto_alg_lookup</a>(const char *<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#crypto_alg\">crypto_alg</a> *<a class=\"id\" href=\"#alg\">alg</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#crypto_alg_sem\">crypto_alg_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alg\">alg</a> = <a class=\"id\" href=\"#__crypto_alg_lookup\">__crypto_alg_lookup</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#crypto_alg_sem\">crypto_alg_sem</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#alg\">alg</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#crypto_alg_lookup\">crypto_alg_lookup</a>);", 
"", 
"struct <a class=\"id\" href=\"#crypto_alg\">crypto_alg</a> *<a class=\"id\" href=\"#crypto_larval_lookup\">crypto_larval_lookup</a>(const char *<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#crypto_alg\">crypto_alg</a> *<a class=\"id\" href=\"#alg\">alg</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#name\">name</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOENT\">ENOENT</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> &= ~(<a class=\"id\" href=\"#CRYPTO_ALG_LARVAL\">CRYPTO_ALG_LARVAL</a> | <a class=\"id\" href=\"#CRYPTO_ALG_DEAD\">CRYPTO_ALG_DEAD</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> &= <a class=\"id\" href=\"#mask\">mask</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alg\">alg</a> = <a class=\"id\" href=\"#crypto_alg_lookup\">crypto_alg_lookup</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#alg\">alg</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#request_module\">request_module</a>(\"%s\", <a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!((<a class=\"id\" href=\"#type\">type</a> ^ <a class=\"id\" href=\"#CRYPTO_ALG_NEED_FALLBACK\">CRYPTO_ALG_NEED_FALLBACK</a>) &amp; <a class=\"id\" href=\"#mask\">mask</a> &amp;", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#CRYPTO_ALG_NEED_FALLBACK\">CRYPTO_ALG_NEED_FALLBACK</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#request_module\">request_module</a>(\"%s-all\", <a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alg\">alg</a> = <a class=\"id\" href=\"#crypto_alg_lookup\">crypto_alg_lookup</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#alg\">alg</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#crypto_is_larval\">crypto_is_larval</a>(<a class=\"id\" href=\"#alg\">alg</a>) ? <a class=\"id\" href=\"#crypto_larval_wait\">crypto_larval_wait</a>(<a class=\"id\" href=\"#alg\">alg</a>) : <a class=\"id\" href=\"#alg\">alg</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#crypto_larval_add\">crypto_larval_add</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#crypto_larval_lookup\">crypto_larval_lookup</a>);", 
"", 
"int <a class=\"id\" href=\"#crypto_probing_notify\">crypto_probing_notify</a>(unsigned long <a class=\"id\" href=\"#val\">val</a>, void *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ok\">ok</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ok\">ok</a> = <a class=\"id\" href=\"#blocking_notifier_call_chain\">blocking_notifier_call_chain</a>(&amp;<a class=\"id\" href=\"#crypto_chain\">crypto_chain</a>, <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#v\">v</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ok\">ok</a> == <a class=\"id\" href=\"#NOTIFY_DONE\">NOTIFY_DONE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#request_module\">request_module</a>(\"cryptomgr\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ok\">ok</a> = <a class=\"id\" href=\"#blocking_notifier_call_chain\">blocking_notifier_call_chain</a>(&amp;<a class=\"id\" href=\"#crypto_chain\">crypto_chain</a>, <a class=\"id\" href=\"#val\">val</a>, <a class=\"id\" href=\"#v\">v</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ok\">ok</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#crypto_probing_notify\">crypto_probing_notify</a>);", 
"", 
"struct <a class=\"id\" href=\"#crypto_alg\">crypto_alg</a> *<a class=\"id\" href=\"#crypto_alg_mod_lookup\">crypto_alg_mod_lookup</a>(const char *<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#crypto_alg\">crypto_alg</a> *<a class=\"id\" href=\"#alg\">alg</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#crypto_alg\">crypto_alg</a> *<a class=\"id\" href=\"#larval\">larval</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ok\">ok</a>;", 
"", 
"<span class=\"ts\"/>if (!((<a class=\"id\" href=\"#type\">type</a> | <a class=\"id\" href=\"#mask\">mask</a>) &amp; <a class=\"id\" href=\"#CRYPTO_ALG_TESTED\">CRYPTO_ALG_TESTED</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> |= <a class=\"id\" href=\"#CRYPTO_ALG_TESTED\">CRYPTO_ALG_TESTED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> |= <a class=\"id\" href=\"#CRYPTO_ALG_TESTED\">CRYPTO_ALG_TESTED</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#larval\">larval</a> = <a class=\"id\" href=\"#crypto_larval_lookup\">crypto_larval_lookup</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#larval\">larval</a>) || !<a class=\"id\" href=\"#crypto_is_larval\">crypto_is_larval</a>(<a class=\"id\" href=\"#larval\">larval</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#larval\">larval</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ok\">ok</a> = <a class=\"id\" href=\"#crypto_probing_notify\">crypto_probing_notify</a>(<a class=\"id\" href=\"#CRYPTO_MSG_ALG_REQUEST\">CRYPTO_MSG_ALG_REQUEST</a>, <a class=\"id\" href=\"#larval\">larval</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ok\">ok</a> == <a class=\"id\" href=\"#NOTIFY_STOP\">NOTIFY_STOP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alg\">alg</a> = <a class=\"id\" href=\"#crypto_larval_wait\">crypto_larval_wait</a>(<a class=\"id\" href=\"#larval\">larval</a>);", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#crypto_mod_put\">crypto_mod_put</a>(<a class=\"id\" href=\"#larval\">larval</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alg\">alg</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOENT\">ENOENT</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#crypto_larval_kill\">crypto_larval_kill</a>(<a class=\"id\" href=\"#larval\">larval</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#alg\">alg</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#crypto_alg_mod_lookup\">crypto_alg_mod_lookup</a>);", 
"", 
"static int <a class=\"id\" href=\"#crypto_init_ops\">crypto_init_ops</a>(struct <a class=\"id\" href=\"#crypto_tfm\">crypto_tfm</a> *<a class=\"id\" href=\"#tfm\">tfm</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#crypto_type\">crypto_type</a> *<a class=\"id\" href=\"#type_obj\">type_obj</a> = <a class=\"id\" href=\"#tfm\">tfm</a>-><a class=\"id\" href=\"#__crt_alg\">__crt_alg</a>-><a class=\"id\" href=\"#cra_type\">cra_type</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type_obj\">type_obj</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#type_obj\">type_obj</a>-><a class=\"id\" href=\"#init\">init</a>(<a class=\"id\" href=\"#tfm\">tfm</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#crypto_tfm_alg_type\">crypto_tfm_alg_type</a>(<a class=\"id\" href=\"#tfm\">tfm</a>)) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CRYPTO_ALG_TYPE_CIPHER\">CRYPTO_ALG_TYPE_CIPHER</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#crypto_init_cipher_ops\">crypto_init_cipher_ops</a>(<a class=\"id\" href=\"#tfm\">tfm</a>);", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CRYPTO_ALG_TYPE_COMPRESS\">CRYPTO_ALG_TYPE_COMPRESS</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#crypto_init_compress_ops\">crypto_init_compress_ops</a>(<a class=\"id\" href=\"#tfm\">tfm</a>);", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#crypto_exit_ops\">crypto_exit_ops</a>(struct <a class=\"id\" href=\"#crypto_tfm\">crypto_tfm</a> *<a class=\"id\" href=\"#tfm\">tfm</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#crypto_type\">crypto_type</a> *<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#tfm\">tfm</a>-><a class=\"id\" href=\"#__crt_alg\">__crt_alg</a>-><a class=\"id\" href=\"#cra_type\">cra_type</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tfm\">tfm</a>-><a class=\"id\" href=\"#exit\">exit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tfm\">tfm</a>-><a class=\"id\" href=\"#exit\">exit</a>(<a class=\"id\" href=\"#tfm\">tfm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#crypto_tfm_alg_type\">crypto_tfm_alg_type</a>(<a class=\"id\" href=\"#tfm\">tfm</a>)) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CRYPTO_ALG_TYPE_CIPHER\">CRYPTO_ALG_TYPE_CIPHER</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#crypto_exit_cipher_ops\">crypto_exit_cipher_ops</a>(<a class=\"id\" href=\"#tfm\">tfm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CRYPTO_ALG_TYPE_COMPRESS\">CRYPTO_ALG_TYPE_COMPRESS</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#crypto_exit_compress_ops\">crypto_exit_compress_ops</a>(<a class=\"id\" href=\"#tfm\">tfm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static unsigned int <a class=\"id\" href=\"#crypto_ctxsize\">crypto_ctxsize</a>(struct <a class=\"id\" href=\"#crypto_alg\">crypto_alg</a> *<a class=\"id\" href=\"#alg\">alg</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#crypto_type\">crypto_type</a> *<a class=\"id\" href=\"#type_obj\">type_obj</a> = <a class=\"id\" href=\"#alg\">alg</a>-><a class=\"id\" href=\"#cra_type\">cra_type</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#alg\">alg</a>-><a class=\"id\" href=\"#cra_alignmask\">cra_alignmask</a> &amp; ~(<a class=\"id\" href=\"#crypto_tfm_ctx_alignment\">crypto_tfm_ctx_alignment</a>() - 1);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type_obj\">type_obj</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#len\">len</a> + <a class=\"id\" href=\"#type_obj\">type_obj</a>-><a class=\"id\" href=\"#ctxsize\">ctxsize</a>(<a class=\"id\" href=\"#alg\">alg</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#alg\">alg</a>-><a class=\"id\" href=\"#cra_flags\">cra_flags</a> &amp; <a class=\"id\" href=\"#CRYPTO_ALG_TYPE_MASK\">CRYPTO_ALG_TYPE_MASK</a>) {", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CRYPTO_ALG_TYPE_CIPHER\">CRYPTO_ALG_TYPE_CIPHER</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#crypto_cipher_ctxsize\">crypto_cipher_ctxsize</a>(<a class=\"id\" href=\"#alg\">alg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CRYPTO_ALG_TYPE_COMPRESS\">CRYPTO_ALG_TYPE_COMPRESS</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#crypto_compress_ctxsize\">crypto_compress_ctxsize</a>(<a class=\"id\" href=\"#alg\">alg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#len\">len</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#crypto_shoot_alg\">crypto_shoot_alg</a>(struct <a class=\"id\" href=\"#crypto_alg\">crypto_alg</a> *<a class=\"id\" href=\"#alg\">alg</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#crypto_alg_sem\">crypto_alg_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alg\">alg</a>-><a class=\"id\" href=\"#cra_flags\">cra_flags</a> |= <a class=\"id\" href=\"#CRYPTO_ALG_DYING\">CRYPTO_ALG_DYING</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#crypto_alg_sem\">crypto_alg_sem</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#crypto_shoot_alg\">crypto_shoot_alg</a>);", 
"", 
"struct <a class=\"id\" href=\"#crypto_tfm\">crypto_tfm</a> *<a class=\"id\" href=\"#__crypto_alloc_tfm\">__crypto_alloc_tfm</a>(struct <a class=\"id\" href=\"#crypto_alg\">crypto_alg</a> *<a class=\"id\" href=\"#alg\">alg</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#crypto_tfm\">crypto_tfm</a> *<a class=\"id\" href=\"#tfm\">tfm</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#tfm_size\">tfm_size</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tfm_size\">tfm_size</a> = sizeof(*<a class=\"id\" href=\"#tfm\">tfm</a>) + <a class=\"id\" href=\"#crypto_ctxsize\">crypto_ctxsize</a>(<a class=\"id\" href=\"#alg\">alg</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tfm\">tfm</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#tfm_size\">tfm_size</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tfm\">tfm</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_err\">out_err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tfm\">tfm</a>-><a class=\"id\" href=\"#__crt_alg\">__crt_alg</a> = <a class=\"id\" href=\"#alg\">alg</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#crypto_init_ops\">crypto_init_ops</a>(<a class=\"id\" href=\"#tfm\">tfm</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_tfm\">out_free_tfm</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tfm\">tfm</a>-><a class=\"id\" href=\"#exit\">exit</a> && <a class=\"id\" href=\"#alg\">alg</a>-><a class=\"id\" href=\"#cra_init\">cra_init</a> && (<a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#alg\">alg</a>-><a class=\"id\" href=\"#cra_init\">cra_init</a>(<a class=\"id\" href=\"#tfm\">tfm</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cra_init_failed\">cra_init_failed</a>;", 
"", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<a class=\"id\" href=\"#cra_init_failed\">cra_init_failed</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#crypto_exit_ops\">crypto_exit_ops</a>(<a class=\"id\" href=\"#tfm\">tfm</a>);", 
"<a class=\"id\" href=\"#out_free_tfm\">out_free_tfm</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> == -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#crypto_shoot_alg\">crypto_shoot_alg</a>(<a class=\"id\" href=\"#alg\">alg</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#tfm\">tfm</a>);", 
"<a class=\"id\" href=\"#out_err\">out_err</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tfm\">tfm</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tfm\">tfm</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__crypto_alloc_tfm\">__crypto_alloc_tfm</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>crypto_alloc_base - Locate algorithm and allocate transform</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@alg_name: Name of algorithm</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@type: Type of algorithm</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@mask: Mask for type comparison</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function should not be used by new algorithm types.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Plesae use crypto_alloc_tfm instead.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>crypto_alloc_base() will first attempt to locate an already loaded</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>algorithm.  If that fails and the kernel supports dynamically loadable</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>modules, it will then attempt to load a module of the same name or</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>alias.  If that fails it will send a query to any loaded crypto manager</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to construct an algorithm on the fly.  A refcount is grabbed on the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>algorithm which is then associated with the new transform.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The returned transform is of a non-determinate type.  Most people</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>should use one of the more specific allocation functions such as</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>crypto_alloc_blkcipher.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>In case of error the return value is an error pointer.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#crypto_tfm\">crypto_tfm</a> *<a class=\"id\" href=\"#crypto_alloc_base\">crypto_alloc_base</a>(const char *<a class=\"id\" href=\"#alg_name\">alg_name</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#crypto_tfm\">crypto_tfm</a> *<a class=\"id\" href=\"#tfm\">tfm</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#crypto_alg\">crypto_alg</a> *<a class=\"id\" href=\"#alg\">alg</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alg\">alg</a> = <a class=\"id\" href=\"#crypto_alg_mod_lookup\">crypto_alg_mod_lookup</a>(<a class=\"id\" href=\"#alg_name\">alg_name</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#alg\">alg</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#alg\">alg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tfm\">tfm</a> = <a class=\"id\" href=\"#__crypto_alloc_tfm\">__crypto_alloc_tfm</a>(<a class=\"id\" href=\"#alg\">alg</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#tfm\">tfm</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#tfm\">tfm</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#crypto_mod_put\">crypto_mod_put</a>(<a class=\"id\" href=\"#alg\">alg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#tfm\">tfm</a>);", 
"", 
"<a class=\"id\" href=\"#err\">err</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> != -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#signal_pending\">signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINTR\">EINTR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#crypto_alloc_base\">crypto_alloc_base</a>);", 
"", 
"void *<a class=\"id\" href=\"#crypto_create_tfm\">crypto_create_tfm</a>(struct <a class=\"id\" href=\"#crypto_alg\">crypto_alg</a> *<a class=\"id\" href=\"#alg\">alg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#crypto_type\">crypto_type</a> *<a class=\"id\" href=\"#frontend\">frontend</a>)", 
"{", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#mem\">mem</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#crypto_tfm\">crypto_tfm</a> *<a class=\"id\" href=\"#tfm\">tfm</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#tfmsize\">tfmsize</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#total\">total</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tfmsize\">tfmsize</a> = <a class=\"id\" href=\"#frontend\">frontend</a>-><a class=\"id\" href=\"#tfmsize\">tfmsize</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#total\">total</a> = <a class=\"id\" href=\"#tfmsize\">tfmsize</a> + sizeof(*<a class=\"id\" href=\"#tfm\">tfm</a>) + <a class=\"id\" href=\"#frontend\">frontend</a>-><a class=\"id\" href=\"#extsize\">extsize</a>(<a class=\"id\" href=\"#alg\">alg</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#total\">total</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mem\">mem</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_err\">out_err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tfm\">tfm</a> = (struct <a class=\"id\" href=\"#crypto_tfm\">crypto_tfm</a> *)(<a class=\"id\" href=\"#mem\">mem</a> + <a class=\"id\" href=\"#tfmsize\">tfmsize</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tfm\">tfm</a>-><a class=\"id\" href=\"#__crt_alg\">__crt_alg</a> = <a class=\"id\" href=\"#alg\">alg</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#frontend\">frontend</a>-><a class=\"id\" href=\"#init_tfm\">init_tfm</a>(<a class=\"id\" href=\"#tfm\">tfm</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_tfm\">out_free_tfm</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tfm\">tfm</a>-><a class=\"id\" href=\"#exit\">exit</a> && <a class=\"id\" href=\"#alg\">alg</a>-><a class=\"id\" href=\"#cra_init\">cra_init</a> && (<a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#alg\">alg</a>-><a class=\"id\" href=\"#cra_init\">cra_init</a>(<a class=\"id\" href=\"#tfm\">tfm</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cra_init_failed\">cra_init_failed</a>;", 
"", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<a class=\"id\" href=\"#cra_init_failed\">cra_init_failed</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#crypto_exit_ops\">crypto_exit_ops</a>(<a class=\"id\" href=\"#tfm\">tfm</a>);", 
"<a class=\"id\" href=\"#out_free_tfm\">out_free_tfm</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> == -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#crypto_shoot_alg\">crypto_shoot_alg</a>(<a class=\"id\" href=\"#alg\">alg</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#mem\">mem</a>);", 
"<a class=\"id\" href=\"#out_err\">out_err</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mem\">mem</a> = <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mem\">mem</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#crypto_create_tfm\">crypto_create_tfm</a>);", 
"", 
"struct <a class=\"id\" href=\"#crypto_alg\">crypto_alg</a> *<a class=\"id\" href=\"#crypto_find_alg\">crypto_find_alg</a>(const char *<a class=\"id\" href=\"#alg_name\">alg_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   const struct <a class=\"id\" href=\"#crypto_type\">crypto_type</a> *<a class=\"id\" href=\"#frontend\">frontend</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#crypto_alg\">crypto_alg</a> *(*<a class=\"id\" href=\"#lookup\">lookup</a>)(const char *<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#mask\">mask</a>) =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#crypto_alg_mod_lookup\">crypto_alg_mod_lookup</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#frontend\">frontend</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> &= <a class=\"id\" href=\"#frontend\">frontend</a>-><a class=\"id\" href=\"#maskclear\">maskclear</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> &= <a class=\"id\" href=\"#frontend\">frontend</a>-><a class=\"id\" href=\"#maskclear\">maskclear</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> |= <a class=\"id\" href=\"#frontend\">frontend</a>-><a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> |= <a class=\"id\" href=\"#frontend\">frontend</a>-><a class=\"id\" href=\"#maskset\">maskset</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#frontend\">frontend</a>-><a class=\"id\" href=\"#lookup\">lookup</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lookup\">lookup</a> = <a class=\"id\" href=\"#frontend\">frontend</a>-><a class=\"id\" href=\"#lookup\">lookup</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#lookup\">lookup</a>(<a class=\"id\" href=\"#alg_name\">alg_name</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#crypto_find_alg\">crypto_find_alg</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>crypto_alloc_tfm - Locate algorithm and allocate transform</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@alg_name: Name of algorithm</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@frontend: Frontend algorithm type</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@type: Type of algorithm</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@mask: Mask for type comparison</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>crypto_alloc_tfm() will first attempt to locate an already loaded</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>algorithm.  If that fails and the kernel supports dynamically loadable</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>modules, it will then attempt to load a module of the same name or</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>alias.  If that fails it will send a query to any loaded crypto manager</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to construct an algorithm on the fly.  A refcount is grabbed on the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>algorithm which is then associated with the new transform.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The returned transform is of a non-determinate type.  Most people</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>should use one of the more specific allocation functions such as</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>crypto_alloc_blkcipher.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>In case of error the return value is an error pointer.</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#crypto_alloc_tfm\">crypto_alloc_tfm</a>(const char *<a class=\"id\" href=\"#alg_name\">alg_name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       const struct <a class=\"id\" href=\"#crypto_type\">crypto_type</a> *<a class=\"id\" href=\"#frontend\">frontend</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#tfm\">tfm</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#crypto_alg\">crypto_alg</a> *<a class=\"id\" href=\"#alg\">alg</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alg\">alg</a> = <a class=\"id\" href=\"#crypto_find_alg\">crypto_find_alg</a>(<a class=\"id\" href=\"#alg_name\">alg_name</a>, <a class=\"id\" href=\"#frontend\">frontend</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#alg\">alg</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#alg\">alg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tfm\">tfm</a> = <a class=\"id\" href=\"#crypto_create_tfm\">crypto_create_tfm</a>(<a class=\"id\" href=\"#alg\">alg</a>, <a class=\"id\" href=\"#frontend\">frontend</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#tfm\">tfm</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#tfm\">tfm</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#crypto_mod_put\">crypto_mod_put</a>(<a class=\"id\" href=\"#alg\">alg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#tfm\">tfm</a>);", 
"", 
"<a class=\"id\" href=\"#err\">err</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> != -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#signal_pending\">signal_pending</a>(<a class=\"id\" href=\"#current\">current</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EINTR\">EINTR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#crypto_alloc_tfm\">crypto_alloc_tfm</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>crypto_destroy_tfm - Free crypto transform</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@mem: Start of tfm slab</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@tfm: Transform to free</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function frees up the transform and any associated resources,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>then drops the refcount on the associated algorithm.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#crypto_destroy_tfm\">crypto_destroy_tfm</a>(void *<a class=\"id\" href=\"#mem\">mem</a>, struct <a class=\"id\" href=\"#crypto_tfm\">crypto_tfm</a> *<a class=\"id\" href=\"#tfm\">tfm</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#crypto_alg\">crypto_alg</a> *<a class=\"id\" href=\"#alg\">alg</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#mem\">mem</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alg\">alg</a> = <a class=\"id\" href=\"#tfm\">tfm</a>-><a class=\"id\" href=\"#__crt_alg\">__crt_alg</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tfm\">tfm</a>-><a class=\"id\" href=\"#exit\">exit</a> && <a class=\"id\" href=\"#alg\">alg</a>-><a class=\"id\" href=\"#cra_exit\">cra_exit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alg\">alg</a>-><a class=\"id\" href=\"#cra_exit\">cra_exit</a>(<a class=\"id\" href=\"#tfm\">tfm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#crypto_exit_ops\">crypto_exit_ops</a>(<a class=\"id\" href=\"#tfm\">tfm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#crypto_mod_put\">crypto_mod_put</a>(<a class=\"id\" href=\"#alg\">alg</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kzfree\">kzfree</a>(<a class=\"id\" href=\"#mem\">mem</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#crypto_destroy_tfm\">crypto_destroy_tfm</a>);", 
"", 
"int <a class=\"id\" href=\"#crypto_has_alg\">crypto_has_alg</a>(const char *<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#crypto_alg\">crypto_alg</a> *<a class=\"id\" href=\"#alg\">alg</a> = <a class=\"id\" href=\"#crypto_alg_mod_lookup\">crypto_alg_mod_lookup</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#mask\">mask</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#alg\">alg</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#crypto_mod_put\">crypto_mod_put</a>(<a class=\"id\" href=\"#alg\">alg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#crypto_has_alg\">crypto_has_alg</a>);", 
"", 
"<a class=\"id\" href=\"#MODULE_DESCRIPTION\">MODULE_DESCRIPTION</a>(\"Cryptographic core API\");", 
"<a class=\"id\" href=\"#MODULE_LICENSE\">MODULE_LICENSE</a>(\"GPL\");", 
];
xr_frag_insert('l/1e/f2c4f8d832e040c426033e10a50363dfc7279c.xr', __xr_tmp);
