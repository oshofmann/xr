var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * x86 instruction analysis</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> * the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\"> * (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> * GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> * along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) IBM Corporation, 2002, 2004, 2009</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#inat\">inat</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#insn\">insn</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#get_next\">get_next</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#insn\">insn</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>({<a class=\"id\" href=\"#t\">t</a> <a class=\"id\" href=\"#r\">r</a>; <a class=\"id\" href=\"#r\">r</a> = *(<a class=\"id\" href=\"#t\">t</a>*)<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#next_byte\">next_byte</a>; <a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#next_byte\">next_byte</a> += sizeof(<a class=\"id\" href=\"#t\">t</a>); <a class=\"id\" href=\"#r\">r</a>; })", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#peek_next\">peek_next</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#insn\">insn</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>({<a class=\"id\" href=\"#t\">t</a> <a class=\"id\" href=\"#r\">r</a>; <a class=\"id\" href=\"#r\">r</a> = *(<a class=\"id\" href=\"#t\">t</a>*)<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#next_byte\">next_byte</a>; <a class=\"id\" href=\"#r\">r</a>; })", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#peek_nbyte_next\">peek_nbyte_next</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#insn\">insn</a>, <a class=\"id\" href=\"#n\">n</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>({<a class=\"id\" href=\"#t\">t</a> <a class=\"id\" href=\"#r\">r</a>; <a class=\"id\" href=\"#r\">r</a> = *(<a class=\"id\" href=\"#t\">t</a>*)((<a class=\"id\" href=\"#insn\">insn</a>)-><a class=\"id\" href=\"#next_byte\">next_byte</a> + <a class=\"id\" href=\"#n\">n</a>); <a class=\"id\" href=\"#r\">r</a>; })", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * insn_init() - initialize struct insn</span>", 
"<span class=\"comment\"> * @insn:<span class=\"ts\"/>&amp;struct insn to be initialized</span>", 
"<span class=\"comment\"> * @kaddr:<span class=\"ts\"/>address (in kernel memory) of instruction (or copy thereof)</span>", 
"<span class=\"comment\"> * @x86_64:<span class=\"ts\"/>!0 for 64-bit kernel or 64-bit app</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#insn_init\">insn_init</a>(struct <a class=\"id\" href=\"#insn\">insn</a> *<a class=\"id\" href=\"#insn\">insn</a>, const void *<a class=\"id\" href=\"#kaddr\">kaddr</a>, int <a class=\"id\" href=\"#x86_64\">x86_64</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#insn\">insn</a>, 0, sizeof(*<a class=\"id\" href=\"#insn\">insn</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#kaddr\">kaddr</a> = <a class=\"id\" href=\"#kaddr\">kaddr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#next_byte\">next_byte</a> = <a class=\"id\" href=\"#kaddr\">kaddr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#x86_64\">x86_64</a> = <a class=\"id\" href=\"#x86_64\">x86_64</a> ? 1 : 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#opnd_bytes\">opnd_bytes</a> = 4;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#x86_64\">x86_64</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#addr_bytes\">addr_bytes</a> = 8;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#addr_bytes\">addr_bytes</a> = 4;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * insn_get_prefixes - scan x86 instruction prefix bytes</span>", 
"<span class=\"comment\"> * @insn:<span class=\"ts\"/>&amp;struct insn containing instruction</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Populates the @insn-&gt;prefixes bitmap, and updates @insn-&gt;next_byte</span>", 
"<span class=\"comment\"> * to point to the (first) opcode.  No effect if @insn-&gt;prefixes.got</span>", 
"<span class=\"comment\"> * is already set.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#insn_get_prefixes\">insn_get_prefixes</a>(struct <a class=\"id\" href=\"#insn\">insn</a> *<a class=\"id\" href=\"#insn\">insn</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#insn_field\">insn_field</a> *<a class=\"id\" href=\"#prefixes\">prefixes</a> = &amp;<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#prefixes\">prefixes</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#insn_attr_t\">insn_attr_t</a> <a class=\"id\" href=\"#attr\">attr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#insn_byte_t\">insn_byte_t</a> <a class=\"id\" href=\"#b\">b</a>, <a class=\"id\" href=\"#lb\">lb</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#nb\">nb</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#prefixes\">prefixes</a>-><a class=\"id\" href=\"#got\">got</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nb\">nb</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lb\">lb</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#b\">b</a> = <a class=\"id\" href=\"#peek_next\">peek_next</a>(<a class=\"id\" href=\"#insn_byte_t\">insn_byte_t</a>, <a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#attr\">attr</a> = <a class=\"id\" href=\"#inat_get_opcode_attribute\">inat_get_opcode_attribute</a>(<a class=\"id\" href=\"#b\">b</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#inat_is_legacy_prefix\">inat_is_legacy_prefix</a>(<a class=\"id\" href=\"#attr\">attr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Skip if same prefix */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nb\">nb</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#prefixes\">prefixes</a>-><a class=\"id\" href=\"#bytes\">bytes</a>[<a class=\"id\" href=\"#i\">i</a>] == <a class=\"id\" href=\"#b\">b</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found\">found</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nb\">nb</a> == 4)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Invalid instruction */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prefixes\">prefixes</a>-><a class=\"id\" href=\"#bytes\">bytes</a>[<a class=\"id\" href=\"#nb\">nb</a>++] = <a class=\"id\" href=\"#b\">b</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inat_is_address_size_prefix\">inat_is_address_size_prefix</a>(<a class=\"id\" href=\"#attr\">attr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* address size switches 2/4 or 4/8 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#x86_64\">x86_64</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#addr_bytes\">addr_bytes</a> ^= 12;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#addr_bytes\">addr_bytes</a> ^= 6;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#inat_is_operand_size_prefix\">inat_is_operand_size_prefix</a>(<a class=\"id\" href=\"#attr\">attr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* oprand size switches 2/4 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#opnd_bytes\">opnd_bytes</a> ^= 6;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#found\">found</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prefixes\">prefixes</a>-><a class=\"id\" href=\"#nbytes\">nbytes</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#next_byte\">next_byte</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lb\">lb</a> = <a class=\"id\" href=\"#b\">b</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b\">b</a> = <a class=\"id\" href=\"#peek_next\">peek_next</a>(<a class=\"id\" href=\"#insn_byte_t\">insn_byte_t</a>, <a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#attr\">attr</a> = <a class=\"id\" href=\"#inat_get_opcode_attribute\">inat_get_opcode_attribute</a>(<a class=\"id\" href=\"#b\">b</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Set the last prefix */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#lb\">lb</a> && <a class=\"id\" href=\"#lb\">lb</a> != <a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#prefixes\">prefixes</a>.<a class=\"id\" href=\"#bytes\">bytes</a>[3]) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#prefixes\">prefixes</a>.<a class=\"id\" href=\"#bytes\">bytes</a>[3])) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Swap the last prefix */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b\">b</a> = <a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#prefixes\">prefixes</a>.<a class=\"id\" href=\"#bytes\">bytes</a>[3];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nb\">nb</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#prefixes\">prefixes</a>-><a class=\"id\" href=\"#bytes\">bytes</a>[<a class=\"id\" href=\"#i\">i</a>] == <a class=\"id\" href=\"#lb\">lb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prefixes\">prefixes</a>-><a class=\"id\" href=\"#bytes\">bytes</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#b\">b</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#prefixes\">prefixes</a>.<a class=\"id\" href=\"#bytes\">bytes</a>[3] = <a class=\"id\" href=\"#lb\">lb</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Decode REX prefix */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#x86_64\">x86_64</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b\">b</a> = <a class=\"id\" href=\"#peek_next\">peek_next</a>(<a class=\"id\" href=\"#insn_byte_t\">insn_byte_t</a>, <a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#attr\">attr</a> = <a class=\"id\" href=\"#inat_get_opcode_attribute\">inat_get_opcode_attribute</a>(<a class=\"id\" href=\"#b\">b</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inat_is_rex_prefix\">inat_is_rex_prefix</a>(<a class=\"id\" href=\"#attr\">attr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#rex_prefix\">rex_prefix</a>.<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#b\">b</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#rex_prefix\">rex_prefix</a>.<a class=\"id\" href=\"#nbytes\">nbytes</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#next_byte\">next_byte</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#X86_REX_W\">X86_REX_W</a>(<a class=\"id\" href=\"#b\">b</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* REX.W overrides opnd_size */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#opnd_bytes\">opnd_bytes</a> = 8;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#rex_prefix\">rex_prefix</a>.<a class=\"id\" href=\"#got\">got</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Decode VEX prefix */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#b\">b</a> = <a class=\"id\" href=\"#peek_next\">peek_next</a>(<a class=\"id\" href=\"#insn_byte_t\">insn_byte_t</a>, <a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#attr\">attr</a> = <a class=\"id\" href=\"#inat_get_opcode_attribute\">inat_get_opcode_attribute</a>(<a class=\"id\" href=\"#b\">b</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inat_is_vex_prefix\">inat_is_vex_prefix</a>(<a class=\"id\" href=\"#attr\">attr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn_byte_t\">insn_byte_t</a> <a class=\"id\" href=\"#b2\">b2</a> = <a class=\"id\" href=\"#peek_nbyte_next\">peek_nbyte_next</a>(<a class=\"id\" href=\"#insn_byte_t\">insn_byte_t</a>, <a class=\"id\" href=\"#insn\">insn</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#x86_64\">x86_64</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * In 32-bits mode, if the [7:6] bits (mod bits of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * ModRM) on the second byte are not 11b, it is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * LDS or LES.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#X86_MODRM_MOD\">X86_MODRM_MOD</a>(<a class=\"id\" href=\"#b2\">b2</a>) != 3)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#vex_end\">vex_end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#vex_prefix\">vex_prefix</a>.<a class=\"id\" href=\"#bytes\">bytes</a>[0] = <a class=\"id\" href=\"#b\">b</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#vex_prefix\">vex_prefix</a>.<a class=\"id\" href=\"#bytes\">bytes</a>[1] = <a class=\"id\" href=\"#b2\">b2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inat_is_vex3_prefix\">inat_is_vex3_prefix</a>(<a class=\"id\" href=\"#attr\">attr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b2\">b2</a> = <a class=\"id\" href=\"#peek_nbyte_next\">peek_nbyte_next</a>(<a class=\"id\" href=\"#insn_byte_t\">insn_byte_t</a>, <a class=\"id\" href=\"#insn\">insn</a>, 2);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#vex_prefix\">vex_prefix</a>.<a class=\"id\" href=\"#bytes\">bytes</a>[2] = <a class=\"id\" href=\"#b2\">b2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#vex_prefix\">vex_prefix</a>.<a class=\"id\" href=\"#nbytes\">nbytes</a> = 3;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#next_byte\">next_byte</a> += 3;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#x86_64\">x86_64</a> && <a class=\"id\" href=\"#X86_VEX_W\">X86_VEX_W</a>(<a class=\"id\" href=\"#b2\">b2</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* VEX.W overrides opnd_size */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#opnd_bytes\">opnd_bytes</a> = 8;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#vex_prefix\">vex_prefix</a>.<a class=\"id\" href=\"#nbytes\">nbytes</a> = 2;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#next_byte\">next_byte</a> += 2;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#vex_end\">vex_end</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#vex_prefix\">vex_prefix</a>.<a class=\"id\" href=\"#got\">got</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prefixes\">prefixes</a>-><a class=\"id\" href=\"#got\">got</a> = 1;", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * insn_get_opcode - collect opcode(s)</span>", 
"<span class=\"comment\"> * @insn:<span class=\"ts\"/>&amp;struct insn containing instruction</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Populates @insn-&gt;opcode, updates @insn-&gt;next_byte to point past the</span>", 
"<span class=\"comment\"> * opcode byte(s), and set @insn-&gt;attr (except for groups).</span>", 
"<span class=\"comment\"> * If necessary, first collects any preceding (prefix) bytes.</span>", 
"<span class=\"comment\"> * Sets @insn-&gt;opcode.value = opcode1.  No effect if @insn-&gt;opcode.got</span>", 
"<span class=\"comment\"> * is already 1.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#insn_get_opcode\">insn_get_opcode</a>(struct <a class=\"id\" href=\"#insn\">insn</a> *<a class=\"id\" href=\"#insn\">insn</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#insn_field\">insn_field</a> *<a class=\"id\" href=\"#opcode\">opcode</a> = &amp;<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#opcode\">opcode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#insn_byte_t\">insn_byte_t</a> <a class=\"id\" href=\"#op\">op</a>, <a class=\"id\" href=\"#pfx\">pfx</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#opcode\">opcode</a>-><a class=\"id\" href=\"#got\">got</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#prefixes\">prefixes</a>.<a class=\"id\" href=\"#got\">got</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn_get_prefixes\">insn_get_prefixes</a>(<a class=\"id\" href=\"#insn\">insn</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Get first opcode */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a> = <a class=\"id\" href=\"#get_next\">get_next</a>(<a class=\"id\" href=\"#insn_byte_t\">insn_byte_t</a>, <a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#opcode\">opcode</a>-><a class=\"id\" href=\"#bytes\">bytes</a>[0] = <a class=\"id\" href=\"#op\">op</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#opcode\">opcode</a>-><a class=\"id\" href=\"#nbytes\">nbytes</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check if there is VEX prefix or not */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#insn_is_avx\">insn_is_avx</a>(<a class=\"id\" href=\"#insn\">insn</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn_byte_t\">insn_byte_t</a> <a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#m\">m</a> = <a class=\"id\" href=\"#insn_vex_m_bits\">insn_vex_m_bits</a>(<a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#insn_vex_p_bits\">insn_vex_p_bits</a>(<a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#attr\">attr</a> = <a class=\"id\" href=\"#inat_get_avx_attribute\">inat_get_avx_attribute</a>(<a class=\"id\" href=\"#op\">op</a>, <a class=\"id\" href=\"#m\">m</a>, <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#inat_accept_vex\">inat_accept_vex</a>(<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#attr\">attr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#attr\">attr</a> = 0;<span class=\"ts\"/><span class=\"comment\">/* This instruction is bad */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#end\">end</a>;<span class=\"ts\"/><span class=\"comment\">/* VEX has only 1 byte for opcode */</span>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#attr\">attr</a> = <a class=\"id\" href=\"#inat_get_opcode_attribute\">inat_get_opcode_attribute</a>(<a class=\"id\" href=\"#op\">op</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#inat_is_escape\">inat_is_escape</a>(<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#attr\">attr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Get escaped opcode */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a> = <a class=\"id\" href=\"#get_next\">get_next</a>(<a class=\"id\" href=\"#insn_byte_t\">insn_byte_t</a>, <a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#opcode\">opcode</a>-><a class=\"id\" href=\"#bytes\">bytes</a>[<a class=\"id\" href=\"#opcode\">opcode</a>-><a class=\"id\" href=\"#nbytes\">nbytes</a>++] = <a class=\"id\" href=\"#op\">op</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pfx\">pfx</a> = <a class=\"id\" href=\"#insn_last_prefix\">insn_last_prefix</a>(<a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#attr\">attr</a> = <a class=\"id\" href=\"#inat_get_escape_attribute\">inat_get_escape_attribute</a>(<a class=\"id\" href=\"#op\">op</a>, <a class=\"id\" href=\"#pfx\">pfx</a>, <a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#attr\">attr</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inat_must_vex\">inat_must_vex</a>(<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#attr\">attr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#attr\">attr</a> = 0;<span class=\"ts\"/><span class=\"comment\">/* This instruction is bad */</span>", 
"<a class=\"id\" href=\"#end\">end</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#opcode\">opcode</a>-><a class=\"id\" href=\"#got\">got</a> = 1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * insn_get_modrm - collect ModRM byte, if any</span>", 
"<span class=\"comment\"> * @insn:<span class=\"ts\"/>&amp;struct insn containing instruction</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Populates @insn-&gt;modrm and updates @insn-&gt;next_byte to point past the</span>", 
"<span class=\"comment\"> * ModRM byte, if any.  If necessary, first collects the preceding bytes</span>", 
"<span class=\"comment\"> * (prefixes and opcode(s)).  No effect if @insn-&gt;modrm.got is already 1.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#insn_get_modrm\">insn_get_modrm</a>(struct <a class=\"id\" href=\"#insn\">insn</a> *<a class=\"id\" href=\"#insn\">insn</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#insn_field\">insn_field</a> *<a class=\"id\" href=\"#modrm\">modrm</a> = &amp;<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#modrm\">modrm</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#insn_byte_t\">insn_byte_t</a> <a class=\"id\" href=\"#pfx\">pfx</a>, <a class=\"id\" href=\"#mod\">mod</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#modrm\">modrm</a>-><a class=\"id\" href=\"#got\">got</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#opcode\">opcode</a>.<a class=\"id\" href=\"#got\">got</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn_get_opcode\">insn_get_opcode</a>(<a class=\"id\" href=\"#insn\">insn</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inat_has_modrm\">inat_has_modrm</a>(<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#attr\">attr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a> = <a class=\"id\" href=\"#get_next\">get_next</a>(<a class=\"id\" href=\"#insn_byte_t\">insn_byte_t</a>, <a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#modrm\">modrm</a>-><a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#mod\">mod</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#modrm\">modrm</a>-><a class=\"id\" href=\"#nbytes\">nbytes</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inat_is_group\">inat_is_group</a>(<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#attr\">attr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pfx\">pfx</a> = <a class=\"id\" href=\"#insn_last_prefix\">insn_last_prefix</a>(<a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#attr\">attr</a> = <a class=\"id\" href=\"#inat_get_group_attribute\">inat_get_group_attribute</a>(<a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#pfx\">pfx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#attr\">attr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#x86_64\">x86_64</a> && <a class=\"id\" href=\"#inat_is_force64\">inat_is_force64</a>(<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#attr\">attr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#opnd_bytes\">opnd_bytes</a> = 8;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#modrm\">modrm</a>-><a class=\"id\" href=\"#got\">got</a> = 1;", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * insn_rip_relative() - Does instruction use RIP-relative addressing mode?</span>", 
"<span class=\"comment\"> * @insn:<span class=\"ts\"/>&amp;struct insn containing instruction</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If necessary, first collects the instruction up to and including the</span>", 
"<span class=\"comment\"> * ModRM byte.  No effect if @insn-&gt;x86_64 is 0.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#insn_rip_relative\">insn_rip_relative</a>(struct <a class=\"id\" href=\"#insn\">insn</a> *<a class=\"id\" href=\"#insn\">insn</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#insn_field\">insn_field</a> *<a class=\"id\" href=\"#modrm\">modrm</a> = &amp;<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#modrm\">modrm</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#x86_64\">x86_64</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#modrm\">modrm</a>-><a class=\"id\" href=\"#got\">got</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn_get_modrm\">insn_get_modrm</a>(<a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For rip-relative instructions, the mod field (top 2 bits)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is zero and the r/m field (bottom 3 bits) is 0x5.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#modrm\">modrm</a>-><a class=\"id\" href=\"#nbytes\">nbytes</a> && (<a class=\"id\" href=\"#modrm\">modrm</a>-><a class=\"id\" href=\"#value\">value</a> &amp; 0xc7) == 0x5);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * insn_get_sib() - Get the SIB byte of instruction</span>", 
"<span class=\"comment\"> * @insn:<span class=\"ts\"/>&amp;struct insn containing instruction</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If necessary, first collects the instruction up to and including the</span>", 
"<span class=\"comment\"> * ModRM byte.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#insn_get_sib\">insn_get_sib</a>(struct <a class=\"id\" href=\"#insn\">insn</a> *<a class=\"id\" href=\"#insn\">insn</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#insn_byte_t\">insn_byte_t</a> <a class=\"id\" href=\"#modrm\">modrm</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#sib\">sib</a>.<a class=\"id\" href=\"#got\">got</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#modrm\">modrm</a>.<a class=\"id\" href=\"#got\">got</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn_get_modrm\">insn_get_modrm</a>(<a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#modrm\">modrm</a>.<a class=\"id\" href=\"#nbytes\">nbytes</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#modrm\">modrm</a> = (<a class=\"id\" href=\"#insn_byte_t\">insn_byte_t</a>)<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#modrm\">modrm</a>.<a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#addr_bytes\">addr_bytes</a> != 2 &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#X86_MODRM_MOD\">X86_MODRM_MOD</a>(<a class=\"id\" href=\"#modrm\">modrm</a>) != 3 && <a class=\"id\" href=\"#X86_MODRM_RM\">X86_MODRM_RM</a>(<a class=\"id\" href=\"#modrm\">modrm</a>) == 4) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#sib\">sib</a>.<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#get_next\">get_next</a>(<a class=\"id\" href=\"#insn_byte_t\">insn_byte_t</a>, <a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#sib\">sib</a>.<a class=\"id\" href=\"#nbytes\">nbytes</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#sib\">sib</a>.<a class=\"id\" href=\"#got\">got</a> = 1;", 
"}", 
"", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * insn_get_displacement() - Get the displacement of instruction</span>", 
"<span class=\"comment\"> * @insn:<span class=\"ts\"/>&amp;struct insn containing instruction</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If necessary, first collects the instruction up to and including the</span>", 
"<span class=\"comment\"> * SIB byte.</span>", 
"<span class=\"comment\"> * Displacement value is sign-expanded.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#insn_get_displacement\">insn_get_displacement</a>(struct <a class=\"id\" href=\"#insn\">insn</a> *<a class=\"id\" href=\"#insn\">insn</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#insn_byte_t\">insn_byte_t</a> <a class=\"id\" href=\"#mod\">mod</a>, <a class=\"id\" href=\"#rm\">rm</a>, <a class=\"id\" href=\"#base\">base</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#displacement\">displacement</a>.<a class=\"id\" href=\"#got\">got</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#sib\">sib</a>.<a class=\"id\" href=\"#got\">got</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn_get_sib\">insn_get_sib</a>(<a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#modrm\">modrm</a>.<a class=\"id\" href=\"#nbytes\">nbytes</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Interpreting the modrm byte:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * mod = 00 - no displacement fields (exceptions below)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * mod = 01 - 1-byte displacement field</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * mod = 10 - displacement field is 4 bytes, or 2 bytes if</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * <span class=\"ts\"/>address size = 2 (0x67 prefix in 32-bit mode)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * mod = 11 - no memory operand</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If address size = 2...</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * mod = 00, r/m = 110 - displacement field is 2 bytes</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If address size != 2...</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * mod != 11, r/m = 100 - SIB byte exists</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * mod = 00, SIB base = 101 - displacement field is 4 bytes</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * mod = 00, r/m = 101 - rip-relative addressing, displacement</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * <span class=\"ts\"/>field is 4 bytes</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mod\">mod</a> = <a class=\"id\" href=\"#X86_MODRM_MOD\">X86_MODRM_MOD</a>(<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#modrm\">modrm</a>.<a class=\"id\" href=\"#value\">value</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rm\">rm</a> = <a class=\"id\" href=\"#X86_MODRM_RM\">X86_MODRM_RM</a>(<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#modrm\">modrm</a>.<a class=\"id\" href=\"#value\">value</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#X86_SIB_BASE\">X86_SIB_BASE</a>(<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#sib\">sib</a>.<a class=\"id\" href=\"#value\">value</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mod\">mod</a> == 3)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#mod\">mod</a> == 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#displacement\">displacement</a>.<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#get_next\">get_next</a>(char, <a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#displacement\">displacement</a>.<a class=\"id\" href=\"#nbytes\">nbytes</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#addr_bytes\">addr_bytes</a> == 2) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#mod\">mod</a> == 0 && <a class=\"id\" href=\"#rm\">rm</a> == 6) || <a class=\"id\" href=\"#mod\">mod</a> == 2) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#displacement\">displacement</a>.<a class=\"id\" href=\"#value\">value</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#get_next\">get_next</a>(short, <a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#displacement\">displacement</a>.<a class=\"id\" href=\"#nbytes\">nbytes</a> = 2;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#mod\">mod</a> == 0 && <a class=\"id\" href=\"#rm\">rm</a> == 5) || <a class=\"id\" href=\"#mod\">mod</a> == 2 ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#mod\">mod</a> == 0 && <a class=\"id\" href=\"#base\">base</a> == 5)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#displacement\">displacement</a>.<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#get_next\">get_next</a>(int, <a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#displacement\">displacement</a>.<a class=\"id\" href=\"#nbytes\">nbytes</a> = 4;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#displacement\">displacement</a>.<a class=\"id\" href=\"#got\">got</a> = 1;", 
"}", 
"", 
"<span class=\"comment\">/* Decode moffset16/32/64 */</span>", 
"static void <a class=\"id\" href=\"#__get_moffset\">__get_moffset</a>(struct <a class=\"id\" href=\"#insn\">insn</a> *<a class=\"id\" href=\"#insn\">insn</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#addr_bytes\">addr_bytes</a>) {", 
"<span class=\"ts\"/>case 2:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#moffset1\">moffset1</a>.<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#get_next\">get_next</a>(short, <a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#moffset1\">moffset1</a>.<a class=\"id\" href=\"#nbytes\">nbytes</a> = 2;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 4:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#moffset1\">moffset1</a>.<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#get_next\">get_next</a>(int, <a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#moffset1\">moffset1</a>.<a class=\"id\" href=\"#nbytes\">nbytes</a> = 4;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 8:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#moffset1\">moffset1</a>.<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#get_next\">get_next</a>(int, <a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#moffset1\">moffset1</a>.<a class=\"id\" href=\"#nbytes\">nbytes</a> = 4;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#moffset2\">moffset2</a>.<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#get_next\">get_next</a>(int, <a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#moffset2\">moffset2</a>.<a class=\"id\" href=\"#nbytes\">nbytes</a> = 4;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#moffset1\">moffset1</a>.<a class=\"id\" href=\"#got\">got</a> = <a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#moffset2\">moffset2</a>.<a class=\"id\" href=\"#got\">got</a> = 1;", 
"}", 
"", 
"<span class=\"comment\">/* Decode imm v32(Iz) */</span>", 
"static void <a class=\"id\" href=\"#__get_immv32\">__get_immv32</a>(struct <a class=\"id\" href=\"#insn\">insn</a> *<a class=\"id\" href=\"#insn\">insn</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#opnd_bytes\">opnd_bytes</a>) {", 
"<span class=\"ts\"/>case 2:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#immediate\">immediate</a>.<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#get_next\">get_next</a>(short, <a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#immediate\">immediate</a>.<a class=\"id\" href=\"#nbytes\">nbytes</a> = 2;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 4:", 
"<span class=\"ts\"/>case 8:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#immediate\">immediate</a>.<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#get_next\">get_next</a>(int, <a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#immediate\">immediate</a>.<a class=\"id\" href=\"#nbytes\">nbytes</a> = 4;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* Decode imm v64(Iv/Ov) */</span>", 
"static void <a class=\"id\" href=\"#__get_immv\">__get_immv</a>(struct <a class=\"id\" href=\"#insn\">insn</a> *<a class=\"id\" href=\"#insn\">insn</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#opnd_bytes\">opnd_bytes</a>) {", 
"<span class=\"ts\"/>case 2:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#immediate1\">immediate1</a>.<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#get_next\">get_next</a>(short, <a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#immediate1\">immediate1</a>.<a class=\"id\" href=\"#nbytes\">nbytes</a> = 2;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 4:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#immediate1\">immediate1</a>.<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#get_next\">get_next</a>(int, <a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#immediate1\">immediate1</a>.<a class=\"id\" href=\"#nbytes\">nbytes</a> = 4;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 8:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#immediate1\">immediate1</a>.<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#get_next\">get_next</a>(int, <a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#immediate1\">immediate1</a>.<a class=\"id\" href=\"#nbytes\">nbytes</a> = 4;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#immediate2\">immediate2</a>.<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#get_next\">get_next</a>(int, <a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#immediate2\">immediate2</a>.<a class=\"id\" href=\"#nbytes\">nbytes</a> = 4;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#immediate1\">immediate1</a>.<a class=\"id\" href=\"#got\">got</a> = <a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#immediate2\">immediate2</a>.<a class=\"id\" href=\"#got\">got</a> = 1;", 
"}", 
"", 
"<span class=\"comment\">/* Decode ptr16:16/32(Ap) */</span>", 
"static void <a class=\"id\" href=\"#__get_immptr\">__get_immptr</a>(struct <a class=\"id\" href=\"#insn\">insn</a> *<a class=\"id\" href=\"#insn\">insn</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#opnd_bytes\">opnd_bytes</a>) {", 
"<span class=\"ts\"/>case 2:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#immediate1\">immediate1</a>.<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#get_next\">get_next</a>(short, <a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#immediate1\">immediate1</a>.<a class=\"id\" href=\"#nbytes\">nbytes</a> = 2;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 4:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#immediate1\">immediate1</a>.<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#get_next\">get_next</a>(int, <a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#immediate1\">immediate1</a>.<a class=\"id\" href=\"#nbytes\">nbytes</a> = 4;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case 8:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* ptr16:64 is not exist (no segment) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#immediate2\">immediate2</a>.<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#get_next\">get_next</a>(unsigned short, <a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#immediate2\">immediate2</a>.<a class=\"id\" href=\"#nbytes\">nbytes</a> = 2;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#immediate1\">immediate1</a>.<a class=\"id\" href=\"#got\">got</a> = <a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#immediate2\">immediate2</a>.<a class=\"id\" href=\"#got\">got</a> = 1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * insn_get_immediate() - Get the immediates of instruction</span>", 
"<span class=\"comment\"> * @insn:<span class=\"ts\"/>&amp;struct insn containing instruction</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If necessary, first collects the instruction up to and including the</span>", 
"<span class=\"comment\"> * displacement bytes.</span>", 
"<span class=\"comment\"> * Basically, most of immediates are sign-expanded. Unsigned-value can be</span>", 
"<span class=\"comment\"> * get by bit masking with ((1 &lt;&lt; (nbytes * 8)) - 1)</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#insn_get_immediate\">insn_get_immediate</a>(struct <a class=\"id\" href=\"#insn\">insn</a> *<a class=\"id\" href=\"#insn\">insn</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#immediate\">immediate</a>.<a class=\"id\" href=\"#got\">got</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#displacement\">displacement</a>.<a class=\"id\" href=\"#got\">got</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn_get_displacement\">insn_get_displacement</a>(<a class=\"id\" href=\"#insn\">insn</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inat_has_moffset\">inat_has_moffset</a>(<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#attr\">attr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__get_moffset\">__get_moffset</a>(<a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#inat_has_immediate\">inat_has_immediate</a>(<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#attr\">attr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* no immediates */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#inat_immediate_size\">inat_immediate_size</a>(<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#attr\">attr</a>)) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#INAT_IMM_BYTE\">INAT_IMM_BYTE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#immediate\">immediate</a>.<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#get_next\">get_next</a>(char, <a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#immediate\">immediate</a>.<a class=\"id\" href=\"#nbytes\">nbytes</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#INAT_IMM_WORD\">INAT_IMM_WORD</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#immediate\">immediate</a>.<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#get_next\">get_next</a>(short, <a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#immediate\">immediate</a>.<a class=\"id\" href=\"#nbytes\">nbytes</a> = 2;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#INAT_IMM_DWORD\">INAT_IMM_DWORD</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#immediate\">immediate</a>.<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#get_next\">get_next</a>(int, <a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#immediate\">immediate</a>.<a class=\"id\" href=\"#nbytes\">nbytes</a> = 4;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#INAT_IMM_QWORD\">INAT_IMM_QWORD</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#immediate1\">immediate1</a>.<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#get_next\">get_next</a>(int, <a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#immediate1\">immediate1</a>.<a class=\"id\" href=\"#nbytes\">nbytes</a> = 4;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#immediate2\">immediate2</a>.<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#get_next\">get_next</a>(int, <a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#immediate2\">immediate2</a>.<a class=\"id\" href=\"#nbytes\">nbytes</a> = 4;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#INAT_IMM_PTR\">INAT_IMM_PTR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__get_immptr\">__get_immptr</a>(<a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#INAT_IMM_VWORD32\">INAT_IMM_VWORD32</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__get_immv32\">__get_immv32</a>(<a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#INAT_IMM_VWORD\">INAT_IMM_VWORD</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__get_immv\">__get_immv</a>(<a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inat_has_second_immediate\">inat_has_second_immediate</a>(<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#attr\">attr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#immediate2\">immediate2</a>.<a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#get_next\">get_next</a>(char, <a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#immediate2\">immediate2</a>.<a class=\"id\" href=\"#nbytes\">nbytes</a> = 1;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#done\">done</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#immediate\">immediate</a>.<a class=\"id\" href=\"#got\">got</a> = 1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * insn_get_length() - Get the length of instruction</span>", 
"<span class=\"comment\"> * @insn:<span class=\"ts\"/>&amp;struct insn containing instruction</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If necessary, first collects the instruction up to and including the</span>", 
"<span class=\"comment\"> * immediates bytes.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#insn_get_length\">insn_get_length</a>(struct <a class=\"id\" href=\"#insn\">insn</a> *<a class=\"id\" href=\"#insn\">insn</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#length\">length</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#immediate\">immediate</a>.<a class=\"id\" href=\"#got\">got</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#insn_get_immediate\">insn_get_immediate</a>(<a class=\"id\" href=\"#insn\">insn</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#length\">length</a> = (unsigned char)((unsigned long)<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#next_byte\">next_byte</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     - (unsigned long)<a class=\"id\" href=\"#insn\">insn</a>-><a class=\"id\" href=\"#kaddr\">kaddr</a>);", 
"}", 
];
xr_frag_insert('l/1e/fca543a5235aef863916d1a14fc54651f58c8b.xr', __xr_tmp);
