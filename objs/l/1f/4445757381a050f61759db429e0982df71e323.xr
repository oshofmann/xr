var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#LINUX_EXPORTFS_H\">LINUX_EXPORTFS_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LINUX_EXPORTFS_H\">LINUX_EXPORTFS_H</a> 1", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#dentry\">dentry</a>;", 
"struct <a class=\"id\" href=\"#inode\">inode</a>;", 
"struct <a class=\"id\" href=\"#super_block\">super_block</a>;", 
"struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The fileid_type identifies how the file within the filesystem is encoded.</span>", 
"<span class=\"comment\"> * In theory this is freely set and parsed by the filesystem, but we try to</span>", 
"<span class=\"comment\"> * stick to conventions so we can share some generic code and don't confuse</span>", 
"<span class=\"comment\"> * sniffers like ethereal/wireshark.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The filesystem must not use the value '0' or '0xff'.</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#fid_type\">fid_type</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The root, or export point, of the filesystem.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (Never actually passed down to the filesystem.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FILEID_ROOT\">FILEID_ROOT</a> = 0,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 32bit inode number, 32 bit generation number.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FILEID_INO32_GEN\">FILEID_INO32_GEN</a> = 1,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 32bit inode number, 32 bit generation number,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 32 bit parent directory inode number.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FILEID_INO32_GEN_PARENT\">FILEID_INO32_GEN_PARENT</a> = 2,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 64 bit object ID, 64 bit root object ID,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 32 bit generation number.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FILEID_BTRFS_WITHOUT_PARENT\">FILEID_BTRFS_WITHOUT_PARENT</a> = 0x4d,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 64 bit object ID, 64 bit root object ID,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 32 bit generation number,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 64 bit parent object ID, 32 bit parent generation.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FILEID_BTRFS_WITH_PARENT\">FILEID_BTRFS_WITH_PARENT</a> = 0x4e,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 64 bit object ID, 64 bit root object ID,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 32 bit generation number,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 64 bit parent object ID, 32 bit parent generation,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 64 bit parent root object ID.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FILEID_BTRFS_WITH_PARENT_ROOT\">FILEID_BTRFS_WITH_PARENT_ROOT</a> = 0x4f,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 32 bit block number, 16 bit partition reference,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 16 bit unused, 32 bit generation number.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FILEID_UDF_WITHOUT_PARENT\">FILEID_UDF_WITHOUT_PARENT</a> = 0x51,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 32 bit block number, 16 bit partition reference,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 16 bit unused, 32 bit generation number,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 32 bit parent block number, 32 bit parent generation number</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#FILEID_UDF_WITH_PARENT\">FILEID_UDF_WITH_PARENT</a> = 0x52,", 
"};", 
"", 
"struct <a class=\"id\" href=\"#fid\">fid</a> {", 
"<span class=\"ts\"/>union {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#ino\">ino</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#gen\">gen</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#parent_ino\">parent_ino</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#parent_gen\">parent_gen</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} <a class=\"id\" href=\"#i32\">i32</a>;", 
" <span class=\"ts\"/><span class=\"ts\"/>struct {", 
" <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#block\">block</a>;", 
" <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#partref\">partref</a>;", 
" <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#parent_partref\">parent_partref</a>;", 
" <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#generation\">generation</a>;", 
" <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#parent_block\">parent_block</a>;", 
" <span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#parent_generation\">parent_generation</a>;", 
" <span class=\"ts\"/><span class=\"ts\"/>} <a class=\"id\" href=\"#udf\">udf</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#raw\">raw</a>[0];", 
"<span class=\"ts\"/>};", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct export_operations - for nfsd to communicate with file systems</span>", 
"<span class=\"comment\"> * @encode_fh:      encode a file handle fragment from a dentry</span>", 
"<span class=\"comment\"> * @fh_to_dentry:   find the implied object and get a dentry for it</span>", 
"<span class=\"comment\"> * @fh_to_parent:   find the implied object's parent and get a dentry for it</span>", 
"<span class=\"comment\"> * @get_name:       find the name for a given inode in a given directory</span>", 
"<span class=\"comment\"> * @get_parent:     find the parent of a given directory</span>", 
"<span class=\"comment\"> * @commit_metadata: commit metadata changes to stable storage</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * See Documentation/filesystems/nfs/Exporting for details on how to use</span>", 
"<span class=\"comment\"> * this interface correctly.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * encode_fh:</span>", 
"<span class=\"comment\"> *    @encode_fh should store in the file handle fragment @fh (using at most</span>", 
"<span class=\"comment\"> *    @max_len bytes) information that can be used by @decode_fh to recover the</span>", 
"<span class=\"comment\"> *    file refered to by the &amp;struct dentry @de.  If the @connectable flag is</span>", 
"<span class=\"comment\"> *    set, the encode_fh() should store sufficient information so that a good</span>", 
"<span class=\"comment\"> *    attempt can be made to find not only the file but also it's place in the</span>", 
"<span class=\"comment\"> *    filesystem.   This typically means storing a reference to de-&gt;d_parent in</span>", 
"<span class=\"comment\"> *    the filehandle fragment.  encode_fh() should return the number of bytes</span>", 
"<span class=\"comment\"> *    stored or a negative error code such as %-ENOSPC</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * fh_to_dentry:</span>", 
"<span class=\"comment\"> *    @fh_to_dentry is given a &amp;struct super_block (@sb) and a file handle</span>", 
"<span class=\"comment\"> *    fragment (@fh, @fh_len). It should return a &amp;struct dentry which refers</span>", 
"<span class=\"comment\"> *    to the same file that the file handle fragment refers to.  If it cannot,</span>", 
"<span class=\"comment\"> *    it should return a %NULL pointer if the file was found but no acceptable</span>", 
"<span class=\"comment\"> *    &amp;dentries were available, or an %ERR_PTR error code indicating why it</span>", 
"<span class=\"comment\"> *    couldn't be found (e.g. %ENOENT or %ENOMEM).  Any suitable dentry can be</span>", 
"<span class=\"comment\"> *    returned including, if necessary, a new dentry created with d_alloc_root.</span>", 
"<span class=\"comment\"> *    The caller can then find any other extant dentries by following the</span>", 
"<span class=\"comment\"> *    d_alias links.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * fh_to_parent:</span>", 
"<span class=\"comment\"> *    Same as @fh_to_dentry, except that it returns a pointer to the parent</span>", 
"<span class=\"comment\"> *    dentry if it was encoded into the filehandle fragment by @encode_fh.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * get_name:</span>", 
"<span class=\"comment\"> *    @get_name should find a name for the given @child in the given @parent</span>", 
"<span class=\"comment\"> *    directory.  The name should be stored in the @name (with the</span>", 
"<span class=\"comment\"> *    understanding that it is already pointing to a a %NAME_MAX+1 sized</span>", 
"<span class=\"comment\"> *    buffer.   get_name() should return %0 on success, a negative error code</span>", 
"<span class=\"comment\"> *    or error.  @get_name will be called without @parent-&gt;i_mutex held.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * get_parent:</span>", 
"<span class=\"comment\"> *    @get_parent should find the parent directory for the given @child which</span>", 
"<span class=\"comment\"> *    is also a directory.  In the event that it cannot be found, or storage</span>", 
"<span class=\"comment\"> *    space cannot be allocated, a %ERR_PTR should be returned.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * commit_metadata:</span>", 
"<span class=\"comment\"> *    @commit_metadata should commit metadata changes to stable storage.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Locking rules:</span>", 
"<span class=\"comment\"> *    get_parent is called with child-&gt;d_inode-&gt;i_mutex down</span>", 
"<span class=\"comment\"> *    get_name is not (which is possibly inconsistent)</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#export_operations\">export_operations</a> {", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#encode_fh\">encode_fh</a>)(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#de\">de</a>, <a class=\"id\" href=\"#__u32\">__u32</a> *<a class=\"id\" href=\"#fh\">fh</a>, int *<a class=\"id\" href=\"#max_len\">max_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#connectable\">connectable</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> * (*<a class=\"id\" href=\"#fh_to_dentry\">fh_to_dentry</a>)(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, struct <a class=\"id\" href=\"#fid\">fid</a> *<a class=\"id\" href=\"#fid\">fid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#fh_len\">fh_len</a>, int <a class=\"id\" href=\"#fh_type\">fh_type</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> * (*<a class=\"id\" href=\"#fh_to_parent\">fh_to_parent</a>)(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, struct <a class=\"id\" href=\"#fid\">fid</a> *<a class=\"id\" href=\"#fid\">fid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#fh_len\">fh_len</a>, int <a class=\"id\" href=\"#fh_type\">fh_type</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#get_name\">get_name</a>)(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#parent\">parent</a>, char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#child\">child</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dentry\">dentry</a> * (*<a class=\"id\" href=\"#get_parent\">get_parent</a>)(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#child\">child</a>);", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#commit_metadata\">commit_metadata</a>)(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>);", 
"};", 
"", 
"extern int <a class=\"id\" href=\"#exportfs_encode_fh\">exportfs_encode_fh</a>(struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>, struct <a class=\"id\" href=\"#fid\">fid</a> *<a class=\"id\" href=\"#fid\">fid</a>,", 
"<span class=\"ts\"/>int *<a class=\"id\" href=\"#max_len\">max_len</a>, int <a class=\"id\" href=\"#connectable\">connectable</a>);", 
"extern struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#exportfs_decode_fh\">exportfs_decode_fh</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>, struct <a class=\"id\" href=\"#fid\">fid</a> *<a class=\"id\" href=\"#fid\">fid</a>,", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#fh_len\">fh_len</a>, int <a class=\"id\" href=\"#fileid_type\">fileid_type</a>, int (*<a class=\"id\" href=\"#acceptable\">acceptable</a>)(void *, struct <a class=\"id\" href=\"#dentry\">dentry</a> *),", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#context\">context</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Generic helpers for filesystems.</span>", 
"<span class=\"comment\"> */</span>", 
"extern struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#generic_fh_to_dentry\">generic_fh_to_dentry</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fid\">fid</a> *<a class=\"id\" href=\"#fid\">fid</a>, int <a class=\"id\" href=\"#fh_len\">fh_len</a>, int <a class=\"id\" href=\"#fh_type\">fh_type</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *(*<a class=\"id\" href=\"#get_inode\">get_inode</a>) (struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#ino\">ino</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#gen\">gen</a>));", 
"extern struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#generic_fh_to_parent\">generic_fh_to_parent</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fid\">fid</a> *<a class=\"id\" href=\"#fid\">fid</a>, int <a class=\"id\" href=\"#fh_len\">fh_len</a>, int <a class=\"id\" href=\"#fh_type\">fh_type</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *(*<a class=\"id\" href=\"#get_inode\">get_inode</a>) (struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#ino\">ino</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#gen\">gen</a>));", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* LINUX_EXPORTFS_H */</span>", 
];
xr_frag_insert('l/1f/4445757381a050f61759db429e0982df71e323.xr', __xr_tmp);
