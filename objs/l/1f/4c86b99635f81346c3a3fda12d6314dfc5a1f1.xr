var __xr_tmp = [
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Module Name: utalloc - local memory allocation routines</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *****************************************************************************/</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (C) 2000 - 2010, Intel Corp.</span>", 
"<span class=\"comment\"> * All rights reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Redistribution and use in source and binary forms, with or without</span>", 
"<span class=\"comment\"> * modification, are permitted provided that the following conditions</span>", 
"<span class=\"comment\"> * are met:</span>", 
"<span class=\"comment\"> * 1. Redistributions of source code must retain the above copyright</span>", 
"<span class=\"comment\"> *    notice, this list of conditions, and the following disclaimer,</span>", 
"<span class=\"comment\"> *    without modification.</span>", 
"<span class=\"comment\"> * 2. Redistributions in binary form must reproduce at minimum a disclaimer</span>", 
"<span class=\"comment\"> *    substantially similar to the \"NO WARRANTY\" disclaimer below</span>", 
"<span class=\"comment\"> *    (\"Disclaimer\") and any redistribution must be conditioned upon</span>", 
"<span class=\"comment\"> *    including a substantially similar Disclaimer requirement for further</span>", 
"<span class=\"comment\"> *    binary redistribution.</span>", 
"<span class=\"comment\"> * 3. Neither the names of the above-listed copyright holders nor the names</span>", 
"<span class=\"comment\"> *    of any contributors may be used to endorse or promote products derived</span>", 
"<span class=\"comment\"> *    from this software without specific prior written permission.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Alternatively, this software may be distributed under the terms of the</span>", 
"<span class=\"comment\"> * GNU General Public License (\"GPL\") version 2 as published by the Free</span>", 
"<span class=\"comment\"> * Software Foundation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NO WARRANTY</span>", 
"<span class=\"comment\"> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span>", 
"<span class=\"comment\"> * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span>", 
"<span class=\"comment\"> * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR</span>", 
"<span class=\"comment\"> * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span>", 
"<span class=\"comment\"> * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span>", 
"<span class=\"comment\"> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS</span>", 
"<span class=\"comment\"> * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</span>", 
"<span class=\"comment\"> * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,</span>", 
"<span class=\"comment\"> * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING</span>", 
"<span class=\"comment\"> * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE</span>", 
"<span class=\"comment\"> * POSSIBILITY OF SUCH DAMAGES.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#acpi\">acpi</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"accommon.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acdebug.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_COMPONENT\">_COMPONENT</a>          <a class=\"id\" href=\"#ACPI_UTILITIES\">ACPI_UTILITIES</a>", 
"<a class=\"id\" href=\"#ACPI_MODULE_NAME\">ACPI_MODULE_NAME</a>(\"utalloc\")", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_create_caches</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Create all local caches</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_ut_create_caches\">acpi_ut_create_caches</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Object Caches, for frequently used objects */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_os_create_cache\">acpi_os_create_cache</a>(\"Acpi-Namespace\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> sizeof(struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_MAX_NAMESPACE_CACHE_DEPTH\">ACPI_MAX_NAMESPACE_CACHE_DEPTH</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#acpi_gbl_namespace_cache\">acpi_gbl_namespace_cache</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_os_create_cache\">acpi_os_create_cache</a>(\"Acpi-State\", sizeof(union <a class=\"id\" href=\"#acpi_generic_state\">acpi_generic_state</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_MAX_STATE_CACHE_DEPTH\">ACPI_MAX_STATE_CACHE_DEPTH</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#acpi_gbl_state_cache\">acpi_gbl_state_cache</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_os_create_cache\">acpi_os_create_cache</a>(\"Acpi-Parse\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> sizeof(struct <a class=\"id\" href=\"#acpi_parse_obj_common\">acpi_parse_obj_common</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_MAX_PARSE_CACHE_DEPTH\">ACPI_MAX_PARSE_CACHE_DEPTH</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#acpi_gbl_ps_node_cache\">acpi_gbl_ps_node_cache</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_os_create_cache\">acpi_os_create_cache</a>(\"Acpi-ParseExt\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> sizeof(struct <a class=\"id\" href=\"#acpi_parse_obj_named\">acpi_parse_obj_named</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_MAX_EXTPARSE_CACHE_DEPTH\">ACPI_MAX_EXTPARSE_CACHE_DEPTH</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#acpi_gbl_ps_node_ext_cache\">acpi_gbl_ps_node_ext_cache</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_os_create_cache\">acpi_os_create_cache</a>(\"Acpi-Operand\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> sizeof(union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#ACPI_MAX_OBJECT_CACHE_DEPTH\">ACPI_MAX_OBJECT_CACHE_DEPTH</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#acpi_gbl_operand_cache\">acpi_gbl_operand_cache</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#ACPI_DBG_TRACK_ALLOCATIONS\">ACPI_DBG_TRACK_ALLOCATIONS</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Memory allocation lists */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ut_create_list\">acpi_ut_create_list</a>(\"Acpi-Global\", 0, &amp;<a class=\"id\" href=\"#acpi_gbl_global_list\">acpi_gbl_global_list</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ut_create_list\">acpi_ut_create_list</a>(\"Acpi-Namespace\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#acpi_gbl_ns_node_list\">acpi_gbl_ns_node_list</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_delete_caches</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  None</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Purge and delete all local caches</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_ut_delete_caches\">acpi_ut_delete_caches</a>(void)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#ACPI_DBG_TRACK_ALLOCATIONS\">ACPI_DBG_TRACK_ALLOCATIONS</a>", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#buffer\">buffer</a>[7];", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_gbl_display_final_mem_stats\">acpi_gbl_display_final_mem_stats</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_STRCPY\">ACPI_STRCPY</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, \"MEMORY\");", 
"<span class=\"ts\"/><span class=\"ts\"/>(void)<a class=\"id\" href=\"#acpi_db_display_statistics\">acpi_db_display_statistics</a>(<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>(void)<a class=\"id\" href=\"#acpi_os_delete_cache\">acpi_os_delete_cache</a>(<a class=\"id\" href=\"#acpi_gbl_namespace_cache\">acpi_gbl_namespace_cache</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_namespace_cache\">acpi_gbl_namespace_cache</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>(void)<a class=\"id\" href=\"#acpi_os_delete_cache\">acpi_os_delete_cache</a>(<a class=\"id\" href=\"#acpi_gbl_state_cache\">acpi_gbl_state_cache</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_state_cache\">acpi_gbl_state_cache</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>(void)<a class=\"id\" href=\"#acpi_os_delete_cache\">acpi_os_delete_cache</a>(<a class=\"id\" href=\"#acpi_gbl_operand_cache\">acpi_gbl_operand_cache</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_operand_cache\">acpi_gbl_operand_cache</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>(void)<a class=\"id\" href=\"#acpi_os_delete_cache\">acpi_os_delete_cache</a>(<a class=\"id\" href=\"#acpi_gbl_ps_node_cache\">acpi_gbl_ps_node_cache</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_ps_node_cache\">acpi_gbl_ps_node_cache</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>(void)<a class=\"id\" href=\"#acpi_os_delete_cache\">acpi_os_delete_cache</a>(<a class=\"id\" href=\"#acpi_gbl_ps_node_ext_cache\">acpi_gbl_ps_node_ext_cache</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_ps_node_ext_cache\">acpi_gbl_ps_node_ext_cache</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#ACPI_DBG_TRACK_ALLOCATIONS\">ACPI_DBG_TRACK_ALLOCATIONS</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Debug only - display leftover memory allocation, if any */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_ut_dump_allocations\">acpi_ut_dump_allocations</a>(<a class=\"id\" href=\"#ACPI_UINT32_MAX\">ACPI_UINT32_MAX</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Free memory lists */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FREE\">ACPI_FREE</a>(<a class=\"id\" href=\"#acpi_gbl_global_list\">acpi_gbl_global_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_global_list\">acpi_gbl_global_list</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FREE\">ACPI_FREE</a>(<a class=\"id\" href=\"#acpi_gbl_ns_node_list\">acpi_gbl_ns_node_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_gbl_ns_node_list\">acpi_gbl_ns_node_list</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_validate_buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Buffer              - Buffer descriptor to be validated</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Perform parameter validation checks on an struct acpi_buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_ut_validate_buffer\">acpi_ut_validate_buffer</a>(struct <a class=\"id\" href=\"#acpi_buffer\">acpi_buffer</a> * <a class=\"id\" href=\"#buffer\">buffer</a>)", 
"{", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Obviously, the structure pointer must be valid */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer\">buffer</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Special semantics for the length */</span>", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#length\">length</a> == <a class=\"id\" href=\"#ACPI_NO_BUFFER\">ACPI_NO_BUFFER</a>) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#length\">length</a> == <a class=\"id\" href=\"#ACPI_ALLOCATE_BUFFER\">ACPI_ALLOCATE_BUFFER</a>) ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#length\">length</a> == <a class=\"id\" href=\"#ACPI_ALLOCATE_LOCAL_BUFFER\">ACPI_ALLOCATE_LOCAL_BUFFER</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Length is valid, the buffer pointer must be also */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#pointer\">pointer</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_initialize_buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Buffer              - Buffer to be validated</span>", 
"<span class=\"comment\"> *              required_length     - Length needed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Validate that the buffer is of the required length or</span>", 
"<span class=\"comment\"> *              allocate a new buffer. Returned buffer is always zeroed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_ut_initialize_buffer\">acpi_ut_initialize_buffer</a>(struct <a class=\"id\" href=\"#acpi_buffer\">acpi_buffer</a> * <a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#acpi_size\">acpi_size</a> <a class=\"id\" href=\"#required_length\">required_length</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_size\">acpi_size</a> <a class=\"id\" href=\"#input_buffer_length\">input_buffer_length</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Parameter validation */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer\">buffer</a> || !<a class=\"id\" href=\"#required_length\">required_length</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Buffer-&gt;Length is used as both an input and output parameter. Get the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * input actual length and set the output required buffer length.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#input_buffer_length\">input_buffer_length</a> = <a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#required_length\">required_length</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The input buffer length contains the actual buffer length, or the type</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of buffer to be allocated by this routine.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#input_buffer_length\">input_buffer_length</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_NO_BUFFER\">ACPI_NO_BUFFER</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Return the exception (and the required buffer length) */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_BUFFER_OVERFLOW\">AE_BUFFER_OVERFLOW</a>);", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_ALLOCATE_BUFFER\">ACPI_ALLOCATE_BUFFER</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Allocate a new buffer */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#pointer\">pointer</a> = <a class=\"id\" href=\"#acpi_os_allocate\">acpi_os_allocate</a>(<a class=\"id\" href=\"#required_length\">required_length</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_ALLOCATE_LOCAL_BUFFER\">ACPI_ALLOCATE_LOCAL_BUFFER</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Allocate a new buffer with local interface to allow tracking */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#pointer\">pointer</a> = <a class=\"id\" href=\"#ACPI_ALLOCATE\">ACPI_ALLOCATE</a>(<a class=\"id\" href=\"#required_length\">required_length</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Existing buffer: Validate the size of the buffer */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#input_buffer_length\">input_buffer_length</a> &lt; <a class=\"id\" href=\"#required_length\">required_length</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_BUFFER_OVERFLOW\">AE_BUFFER_OVERFLOW</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Validate allocation from above or input buffer pointer */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#pointer\">pointer</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_NO_MEMORY\">AE_NO_MEMORY</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Have a valid buffer, clear it */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_MEMSET\">ACPI_MEMSET</a>(<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#pointer\">pointer</a>, 0, <a class=\"id\" href=\"#required_length\">required_length</a>);", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#NOT_USED_BY_LINUX\">NOT_USED_BY_LINUX</a>", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_allocate</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Size                - Size of the allocation</span>", 
"<span class=\"comment\"> *              Component           - Component type of caller</span>", 
"<span class=\"comment\"> *              Module              - Source file name of caller</span>", 
"<span class=\"comment\"> *              Line                - Line number of caller</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Address of the allocated memory on success, NULL on failure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Subsystem equivalent of malloc.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"void *<a class=\"id\" href=\"#acpi_ut_allocate\">acpi_ut_allocate</a>(<a class=\"id\" href=\"#acpi_size\">acpi_size</a> <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#component\">component</a>, const char *<a class=\"id\" href=\"#module\">module</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#line\">line</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#allocation\">allocation</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE_U32\">ACPI_FUNCTION_TRACE_U32</a>(<a class=\"id\" href=\"#ut_allocate\">ut_allocate</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check for an inadvertent size of zero bytes */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_WARNING\">ACPI_WARNING</a>((<a class=\"id\" href=\"#module\">module</a>, <a class=\"id\" href=\"#line\">line</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"Attempt to allocate zero bytes, allocating 1 byte\"));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#allocation\">allocation</a> = <a class=\"id\" href=\"#acpi_os_allocate\">acpi_os_allocate</a>(<a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#allocation\">allocation</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Report allocation error */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_WARNING\">ACPI_WARNING</a>((<a class=\"id\" href=\"#module\">module</a>, <a class=\"id\" href=\"#line\">line</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"Could not allocate size %u\", (<a class=\"id\" href=\"#u32\">u32</a>) <a class=\"id\" href=\"#size\">size</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_PTR\">return_PTR</a>(<a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_PTR\">return_PTR</a>(<a class=\"id\" href=\"#allocation\">allocation</a>);", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ut_allocate_zeroed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Size                - Size of the allocation</span>", 
"<span class=\"comment\"> *              Component           - Component type of caller</span>", 
"<span class=\"comment\"> *              Module              - Source file name of caller</span>", 
"<span class=\"comment\"> *              Line                - Line number of caller</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Address of the allocated memory on success, NULL on failure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Subsystem equivalent of calloc. Allocate and zero memory.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"void *<a class=\"id\" href=\"#acpi_ut_allocate_zeroed\">acpi_ut_allocate_zeroed</a>(<a class=\"id\" href=\"#acpi_size\">acpi_size</a> <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#component\">component</a>, const char *<a class=\"id\" href=\"#module\">module</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#line\">line</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#allocation\">allocation</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_ENTRY\">ACPI_FUNCTION_ENTRY</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#allocation\">allocation</a> = <a class=\"id\" href=\"#acpi_ut_allocate\">acpi_ut_allocate</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#component\">component</a>, <a class=\"id\" href=\"#module\">module</a>, <a class=\"id\" href=\"#line\">line</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#allocation\">allocation</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Clear the memory block */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_MEMSET\">ACPI_MEMSET</a>(<a class=\"id\" href=\"#allocation\">allocation</a>, 0, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#allocation\">allocation</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/1f/4c86b99635f81346c3a3fda12d6314dfc5a1f1.xr', __xr_tmp);
