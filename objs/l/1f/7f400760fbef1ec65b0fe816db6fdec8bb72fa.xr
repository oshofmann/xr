var __xr_tmp = [
"<span class=\"comment\"> *<span class=\"ts\"/>@reg: SCR to write</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@val: value to write</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function is identical to sata_scr_write() except that this</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>function performs flush after writing to the register.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>None if @link is ap-&gt;link.  Kernel thread context otherwise.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0 on success, negative errno on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#sata_scr_write_flush\">sata_scr_write_flush</a>(struct <a class=\"id\" href=\"#ata_link\">ata_link</a> *<a class=\"id\" href=\"#link\">link</a>, int <a class=\"id\" href=\"#reg\">reg</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#val\">val</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_is_host_link\">ata_is_host_link</a>(<a class=\"id\" href=\"#link\">link</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sata_scr_valid\">sata_scr_valid</a>(<a class=\"id\" href=\"#link\">link</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#scr_write\">scr_write</a>(<a class=\"id\" href=\"#link\">link</a>, <a class=\"id\" href=\"#reg\">reg</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#scr_read\">scr_read</a>(<a class=\"id\" href=\"#link\">link</a>, <a class=\"id\" href=\"#reg\">reg</a>, &amp;<a class=\"id\" href=\"#val\">val</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EOPNOTSUPP\">EOPNOTSUPP</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sata_pmp_scr_write\">sata_pmp_scr_write</a>(<a class=\"id\" href=\"#link\">link</a>, <a class=\"id\" href=\"#reg\">reg</a>, <a class=\"id\" href=\"#val\">val</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_phys_link_online - test whether the given link is online</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@link: ATA link to test</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Test whether @link is online.  Note that this function returns</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0 if online status of @link cannot be obtained, so</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_link_online(link) != !ata_link_offline(link).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>None.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>True if the port online status is available and online.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ata_phys_link_online\">ata_phys_link_online</a>(struct <a class=\"id\" href=\"#ata_link\">ata_link</a> *<a class=\"id\" href=\"#link\">link</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sstatus\">sstatus</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sata_scr_read\">sata_scr_read</a>(<a class=\"id\" href=\"#link\">link</a>, <a class=\"id\" href=\"#SCR_STATUS\">SCR_STATUS</a>, &amp;<a class=\"id\" href=\"#sstatus\">sstatus</a>) == 0 &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#ata_sstatus_online\">ata_sstatus_online</a>(<a class=\"id\" href=\"#sstatus\">sstatus</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_phys_link_offline - test whether the given link is offline</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@link: ATA link to test</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Test whether @link is offline.  Note that this function</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>returns 0 if offline status of @link cannot be obtained, so</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_link_online(link) != !ata_link_offline(link).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>None.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>True if the port offline status is available and offline.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ata_phys_link_offline\">ata_phys_link_offline</a>(struct <a class=\"id\" href=\"#ata_link\">ata_link</a> *<a class=\"id\" href=\"#link\">link</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#sstatus\">sstatus</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sata_scr_read\">sata_scr_read</a>(<a class=\"id\" href=\"#link\">link</a>, <a class=\"id\" href=\"#SCR_STATUS\">SCR_STATUS</a>, &amp;<a class=\"id\" href=\"#sstatus\">sstatus</a>) == 0 &&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#ata_sstatus_online\">ata_sstatus_online</a>(<a class=\"id\" href=\"#sstatus\">sstatus</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_link_online - test whether the given link is online</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@link: ATA link to test</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Test whether @link is online.  This is identical to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_phys_link_online() when there's no slave link.  When</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>there's a slave link, this function should only be called on</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the master link and will return true if any of M/S links is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>online.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>None.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>True if the port online status is available and online.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ata_link_online\">ata_link_online</a>(struct <a class=\"id\" href=\"#ata_link\">ata_link</a> *<a class=\"id\" href=\"#link\">link</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_link\">ata_link</a> *<a class=\"id\" href=\"#slave\">slave</a> = <a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#slave_link\">slave_link</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#link\">link</a> == <a class=\"id\" href=\"#slave\">slave</a>);<span class=\"ts\"/><span class=\"comment\">/* shouldn't be called on slave link */</span>", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ata_phys_link_online\">ata_phys_link_online</a>(<a class=\"id\" href=\"#link\">link</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#slave\">slave</a> && <a class=\"id\" href=\"#ata_phys_link_online\">ata_phys_link_online</a>(<a class=\"id\" href=\"#slave\">slave</a>));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_link_offline - test whether the given link is offline</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@link: ATA link to test</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Test whether @link is offline.  This is identical to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_phys_link_offline() when there's no slave link.  When</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>there's a slave link, this function should only be called on</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the master link and will return true if both M/S links are</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>offline.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>None.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>True if the port offline status is available and offline.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#ata_link_offline\">ata_link_offline</a>(struct <a class=\"id\" href=\"#ata_link\">ata_link</a> *<a class=\"id\" href=\"#link\">link</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_link\">ata_link</a> *<a class=\"id\" href=\"#slave\">slave</a> = <a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#slave_link\">slave_link</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#link\">link</a> == <a class=\"id\" href=\"#slave\">slave</a>);<span class=\"ts\"/><span class=\"comment\">/* shouldn't be called on slave link */</span>", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ata_phys_link_offline\">ata_phys_link_offline</a>(<a class=\"id\" href=\"#link\">link</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>(!<a class=\"id\" href=\"#slave\">slave</a> || <a class=\"id\" href=\"#ata_phys_link_offline\">ata_phys_link_offline</a>(<a class=\"id\" href=\"#slave\">slave</a>));", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PM\">CONFIG_PM</a>", 
"static int <a class=\"id\" href=\"#ata_host_request_pm\">ata_host_request_pm</a>(struct <a class=\"id\" href=\"#ata_host\">ata_host</a> *<a class=\"id\" href=\"#host\">host</a>, <a class=\"id\" href=\"#pm_message_t\">pm_message_t</a> <a class=\"id\" href=\"#mesg\">mesg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned int <a class=\"id\" href=\"#action\">action</a>, unsigned int <a class=\"id\" href=\"#ehi_flags\">ehi_flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       int <a class=\"id\" href=\"#wait\">wait</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#n_ports\">n_ports</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#ports\">ports</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_link\">ata_link</a> *<a class=\"id\" href=\"#link\">link</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Previous resume operation might still be in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * progress.  Wait for PM_PENDING to clear.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#pflags\">pflags</a> &amp; <a class=\"id\" href=\"#ATA_PFLAG_PM_PENDING\">ATA_PFLAG_PM_PENDING</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_port_wait_eh\">ata_port_wait_eh</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#pflags\">pflags</a> &amp; <a class=\"id\" href=\"#ATA_PFLAG_PM_PENDING\">ATA_PFLAG_PM_PENDING</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* request PM ops to EH */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#pm_mesg\">pm_mesg</a> = <a class=\"id\" href=\"#mesg\">mesg</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#wait\">wait</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#pm_result\">pm_result</a> = &amp;<a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#pflags\">pflags</a> |= <a class=\"id\" href=\"#ATA_PFLAG_PM_PENDING\">ATA_PFLAG_PM_PENDING</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_for_each_link\">ata_for_each_link</a>(<a class=\"id\" href=\"#link\">link</a>, <a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#HOST_FIRST\">HOST_FIRST</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#eh_info\">eh_info</a>.<a class=\"id\" href=\"#action\">action</a> |= <a class=\"id\" href=\"#action\">action</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#eh_info\">eh_info</a>.<a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ehi_flags\">ehi_flags</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_port_schedule_eh\">ata_port_schedule_eh</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* wait and check result */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#wait\">wait</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_port_wait_eh\">ata_port_wait_eh</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#pflags\">pflags</a> &amp; <a class=\"id\" href=\"#ATA_PFLAG_PM_PENDING\">ATA_PFLAG_PM_PENDING</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_host_suspend - suspend host</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@host: host to suspend</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@mesg: PM message</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Suspend @host.  Actual operation is performed by EH.  This</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>function requests EH to perform PM operations and waits for EH</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to finish.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Kernel thread context (may sleep).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0 on success, -errno on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ata_host_suspend\">ata_host_suspend</a>(struct <a class=\"id\" href=\"#ata_host\">ata_host</a> *<a class=\"id\" href=\"#host\">host</a>, <a class=\"id\" href=\"#pm_message_t\">pm_message_t</a> <a class=\"id\" href=\"#mesg\">mesg</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#ehi_flags\">ehi_flags</a> = <a class=\"id\" href=\"#ATA_EHI_QUIET\">ATA_EHI_QUIET</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * disable link pm on all ports before requesting</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * any pm activity</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_lpm_enable\">ata_lpm_enable</a>(<a class=\"id\" href=\"#host\">host</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * On some hardware, device fails to respond after spun down</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for suspend.  As the device won't be used before being</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * resumed, we don't need to touch the device.  Ask EH to skip</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the usual stuff and proceed directly to suspend.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * http://thread.gmane.org/gmane.linux.ide/46764</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mesg\">mesg</a>.<a class=\"id\" href=\"#event\">event</a> == <a class=\"id\" href=\"#PM_EVENT_SUSPEND\">PM_EVENT_SUSPEND</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ehi_flags\">ehi_flags</a> |= <a class=\"id\" href=\"#ATA_EHI_NO_AUTOPSY\">ATA_EHI_NO_AUTOPSY</a> | <a class=\"id\" href=\"#ATA_EHI_NO_RECOVERY\">ATA_EHI_NO_RECOVERY</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#ata_host_request_pm\">ata_host_request_pm</a>(<a class=\"id\" href=\"#host\">host</a>, <a class=\"id\" href=\"#mesg\">mesg</a>, 0, <a class=\"id\" href=\"#ehi_flags\">ehi_flags</a>, 1);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#power\">power</a>.<a class=\"id\" href=\"#power_state\">power_state</a> = <a class=\"id\" href=\"#mesg\">mesg</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_host_resume - resume host</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@host: host to resume</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Resume @host.  Actual operation is performed by EH.  This</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>function requests EH to perform PM operations and returns.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Note that all resume operations are performed parallely.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Kernel thread context (may sleep).</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ata_host_resume\">ata_host_resume</a>(struct <a class=\"id\" href=\"#ata_host\">ata_host</a> *<a class=\"id\" href=\"#host\">host</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_host_request_pm\">ata_host_request_pm</a>(<a class=\"id\" href=\"#host\">host</a>, <a class=\"id\" href=\"#PMSG_ON\">PMSG_ON</a>, <a class=\"id\" href=\"#ATA_EH_RESET\">ATA_EH_RESET</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ATA_EHI_NO_AUTOPSY\">ATA_EHI_NO_AUTOPSY</a> | <a class=\"id\" href=\"#ATA_EHI_QUIET\">ATA_EHI_QUIET</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#power\">power</a>.<a class=\"id\" href=\"#power_state\">power_state</a> = <a class=\"id\" href=\"#PMSG_ON\">PMSG_ON</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* reenable link pm */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_lpm_disable\">ata_lpm_disable</a>(<a class=\"id\" href=\"#host\">host</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_dev_init - Initialize an ata_device structure</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: Device structure to initialize</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Initialize @dev in preparation for probing.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Inherited from caller.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ata_dev_init\">ata_dev_init</a>(struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_link\">ata_link</a> *<a class=\"id\" href=\"#link\">link</a> = <a class=\"id\" href=\"#ata_dev_phys_link\">ata_dev_phys_link</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#ap\">ap</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* SATA spd limit is bound to the attached device, reset together */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#sata_spd_limit\">sata_spd_limit</a> = <a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#hw_sata_spd_limit\">hw_sata_spd_limit</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#sata_spd\">sata_spd</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* High bits of dev-&gt;flags are used to record warm plug</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * requests which occur asynchronously.  Synchronize using</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * host lock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#ATA_DFLAG_INIT_MASK\">ATA_DFLAG_INIT_MASK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#horkage\">horkage</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>((void *)<a class=\"id\" href=\"#dev\">dev</a> + <a class=\"id\" href=\"#ATA_DEVICE_CLEAR_BEGIN\">ATA_DEVICE_CLEAR_BEGIN</a>, 0,", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#ATA_DEVICE_CLEAR_END\">ATA_DEVICE_CLEAR_END</a> - <a class=\"id\" href=\"#ATA_DEVICE_CLEAR_BEGIN\">ATA_DEVICE_CLEAR_BEGIN</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#pio_mask\">pio_mask</a> = <a class=\"id\" href=\"#UINT_MAX\">UINT_MAX</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#mwdma_mask\">mwdma_mask</a> = <a class=\"id\" href=\"#UINT_MAX\">UINT_MAX</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#udma_mask\">udma_mask</a> = <a class=\"id\" href=\"#UINT_MAX\">UINT_MAX</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_link_init - Initialize an ata_link structure</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ap: ATA port link is attached to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@link: Link structure to initialize</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@pmp: Port multiplier port number</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Initialize @link.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Kernel thread context (may sleep)</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ata_link_init\">ata_link_init</a>(struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>, struct <a class=\"id\" href=\"#ata_link\">ata_link</a> *<a class=\"id\" href=\"#link\">link</a>, int <a class=\"id\" href=\"#pmp\">pmp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* clear everything except for devices */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#link\">link</a>, 0, <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#ata_link\">ata_link</a>, <a class=\"id\" href=\"#device\">device</a>[0]));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#ap\">ap</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#pmp\">pmp</a> = <a class=\"id\" href=\"#pmp\">pmp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#active_tag\">active_tag</a> = <a class=\"id\" href=\"#ATA_TAG_POISON\">ATA_TAG_POISON</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#hw_sata_spd_limit\">hw_sata_spd_limit</a> = <a class=\"id\" href=\"#UINT_MAX\">UINT_MAX</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* can't use iterator, ap isn't initialized yet */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ATA_MAX_DEVICES\">ATA_MAX_DEVICES</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a> = &amp;<a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#device\">device</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#link\">link</a> = <a class=\"id\" href=\"#link\">link</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devno\">devno</a> = <a class=\"id\" href=\"#dev\">dev</a> - <a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#device\">device</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_ATA_ACPI\">CONFIG_ATA_ACPI</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#gtf_filter\">gtf_filter</a> = <a class=\"id\" href=\"#ata_acpi_gtf_filter\">ata_acpi_gtf_filter</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_init\">ata_dev_init</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sata_link_init_spd - Initialize link-&gt;sata_spd_limit</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@link: Link to configure sata_spd_limit for</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Initialize @link-&gt;[hw_]sata_spd_limit to the currently</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>configured value.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Kernel thread context (may sleep).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0 on success, -errno on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#sata_link_init_spd\">sata_link_init_spd</a>(struct <a class=\"id\" href=\"#ata_link\">ata_link</a> *<a class=\"id\" href=\"#link\">link</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#spd\">spd</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#sata_scr_read\">sata_scr_read</a>(<a class=\"id\" href=\"#link\">link</a>, <a class=\"id\" href=\"#SCR_CONTROL\">SCR_CONTROL</a>, &amp;<a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#saved_scontrol\">saved_scontrol</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spd\">spd</a> = (<a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#saved_scontrol\">saved_scontrol</a> >> 4) &amp; 0xf;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#spd\">spd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#hw_sata_spd_limit\">hw_sata_spd_limit</a> &= (1 << <a class=\"id\" href=\"#spd\">spd</a>) - 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_force_link_limits\">ata_force_link_limits</a>(<a class=\"id\" href=\"#link\">link</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#sata_spd_limit\">sata_spd_limit</a> = <a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#hw_sata_spd_limit\">hw_sata_spd_limit</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_port_alloc - allocate and initialize basic ATA port resources</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@host: ATA host this allocated port belongs to</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Allocate and initialize basic ATA port resources.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Allocate ATA port on success, NULL on failure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Inherited from calling layer (may sleep).</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ata_port_alloc\">ata_port_alloc</a>(struct <a class=\"id\" href=\"#ata_host\">ata_host</a> *<a class=\"id\" href=\"#host\">host</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(\"ENTER\\n\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#ap\">ap</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ap\">ap</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#pflags\">pflags</a> |= <a class=\"id\" href=\"#ATA_PFLAG_INITIALIZING\">ATA_PFLAG_INITIALIZING</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a> = &amp;<a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#lock\">lock</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#print_id\">print_id</a> = -1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#host\">host</a> = <a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#ATA_VERBOSE_DEBUG\">ATA_VERBOSE_DEBUG</a>)", 
"<span class=\"ts\"/><span class=\"comment\">/* turn on all debugging levels */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#msg_enable\">msg_enable</a> = 0x00FF;", 
"#<a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#ATA_DEBUG\">ATA_DEBUG</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#msg_enable\">msg_enable</a> = <a class=\"id\" href=\"#ATA_MSG_DRV\">ATA_MSG_DRV</a> | <a class=\"id\" href=\"#ATA_MSG_INFO\">ATA_MSG_INFO</a> | <a class=\"id\" href=\"#ATA_MSG_CTL\">ATA_MSG_CTL</a> | <a class=\"id\" href=\"#ATA_MSG_WARN\">ATA_MSG_WARN</a> | <a class=\"id\" href=\"#ATA_MSG_ERR\">ATA_MSG_ERR</a>;", 
"#else", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#msg_enable\">msg_enable</a> = <a class=\"id\" href=\"#ATA_MSG_DRV\">ATA_MSG_DRV</a> | <a class=\"id\" href=\"#ATA_MSG_ERR\">ATA_MSG_ERR</a> | <a class=\"id\" href=\"#ATA_MSG_WARN\">ATA_MSG_WARN</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#scsi_scan_mutex\">scsi_scan_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_DELAYED_WORK\">INIT_DELAYED_WORK</a>(&amp;<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#hotplug_task\">hotplug_task</a>, <a class=\"id\" href=\"#ata_scsi_hotplug\">ata_scsi_hotplug</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_WORK\">INIT_WORK</a>(&amp;<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#scsi_rescan_task\">scsi_rescan_task</a>, <a class=\"id\" href=\"#ata_scsi_dev_rescan\">ata_scsi_dev_rescan</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#eh_done_q\">eh_done_q</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_waitqueue_head\">init_waitqueue_head</a>(&amp;<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#eh_wait_q\">eh_wait_q</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_completion\">init_completion</a>(&amp;<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#park_req_pending\">park_req_pending</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_timer_deferrable\">init_timer_deferrable</a>(&amp;<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#fastdrain_timer\">fastdrain_timer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#fastdrain_timer\">fastdrain_timer</a>.<a class=\"id\" href=\"#function\">function</a> = <a class=\"id\" href=\"#ata_eh_fastdrain_timerfn\">ata_eh_fastdrain_timerfn</a>;", 
];
xr_frag_insert('l/1f/7f400760fbef1ec65b0fe816db6fdec8bb72fa.xr', __xr_tmp);
