var __xr_tmp = [
"<span class=\"comment\"><span class=\"ts\"/> * freed.  When there was a problem unmapping earlier</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * use a more force-full uncatchable kill to prevent</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * any accesses to the poisoned memory.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kill_procs_ao\">kill_procs_ao</a>(&amp;<a class=\"id\" href=\"#tokill\">tokill</a>, !!<a class=\"id\" href=\"#PageDirty\">PageDirty</a>(<a class=\"id\" href=\"#hpage\">hpage</a>), <a class=\"id\" href=\"#trapno\">trapno</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#ret\">ret</a> != <a class=\"id\" href=\"#SWAP_SUCCESS\">SWAP_SUCCESS</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#set_page_hwpoison_huge_page\">set_page_hwpoison_huge_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#hpage\">hpage</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_pages\">nr_pages</a> = 1 << <a class=\"id\" href=\"#compound_order\">compound_order</a>(<a class=\"id\" href=\"#hpage\">hpage</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_pages\">nr_pages</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageHWPoison\">SetPageHWPoison</a>(<a class=\"id\" href=\"#hpage\">hpage</a> + <a class=\"id\" href=\"#i\">i</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#clear_page_hwpoison_huge_page\">clear_page_hwpoison_huge_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#hpage\">hpage</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_pages\">nr_pages</a> = 1 << <a class=\"id\" href=\"#compound_order\">compound_order</a>(<a class=\"id\" href=\"#hpage\">hpage</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_pages\">nr_pages</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ClearPageHWPoison\">ClearPageHWPoison</a>(<a class=\"id\" href=\"#hpage\">hpage</a> + <a class=\"id\" href=\"#i\">i</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#__memory_failure\">__memory_failure</a>(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>, int <a class=\"id\" href=\"#trapno\">trapno</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page_state\">page_state</a> *<a class=\"id\" href=\"#ps\">ps</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#hpage\">hpage</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#nr_pages\">nr_pages</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sysctl_memory_failure_recovery\">sysctl_memory_failure_recovery</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"Memory failure from trap %d on page %lx\", <a class=\"id\" href=\"#trapno\">trapno</a>, <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pfn_valid\">pfn_valid</a>(<a class=\"id\" href=\"#pfn\">pfn</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"MCE %#lx: memory outside kernel control\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENXIO\">ENXIO</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hpage\">hpage</a> = <a class=\"id\" href=\"#compound_head\">compound_head</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#TestSetPageHWPoison\">TestSetPageHWPoison</a>(<a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"MCE %#lx: already hardware poisoned\\n\", <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a> = 1 << <a class=\"id\" href=\"#compound_order\">compound_order</a>(<a class=\"id\" href=\"#hpage\">hpage</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_long_add\">atomic_long_add</a>(<a class=\"id\" href=\"#nr_pages\">nr_pages</a>, &amp;<a class=\"id\" href=\"#mce_bad_pages\">mce_bad_pages</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We need/can do nothing about count=0 pages.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 1) it's a free page, and therefore in safe hand:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    prep_new_page() will be the gate keeper.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 2) it's part of a non-compound high order page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    Implies some kernel user: cannot stop them from</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    R/W the page; let's pray that the page has been</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *    used and will be freed some time later.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In fact it's dangerous to directly bump up page count from 0,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that may make page_freeze_refs()/page_unfreeze_refs() mismatch.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MF_COUNT_INCREASED\">MF_COUNT_INCREASED</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#get_page_unless_zero\">get_page_unless_zero</a>(<a class=\"id\" href=\"#hpage\">hpage</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_free_buddy_page\">is_free_buddy_page</a>(<a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#action_result\">action_result</a>(<a class=\"id\" href=\"#pfn\">pfn</a>, \"free buddy\", <a class=\"id\" href=\"#DELAYED\">DELAYED</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#action_result\">action_result</a>(<a class=\"id\" href=\"#pfn\">pfn</a>, \"high order kernel\", <a class=\"id\" href=\"#IGNORED\">IGNORED</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We ignore non-LRU pages for good reasons.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - PG_locked is only well defined for LRU pages and a few others</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - to avoid races with __set_page_locked()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * - to avoid races with __SetPageSlab*() (and more non-atomic ops)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The check (unnecessarily) ignores LRU pages being isolated and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * walked by the page reclaim code, however that's not a big loss.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#PageLRU\">PageLRU</a>(<a class=\"id\" href=\"#p\">p</a>) && !<a class=\"id\" href=\"#PageHuge\">PageHuge</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shake_page\">shake_page</a>(<a class=\"id\" href=\"#p\">p</a>, 0);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#PageLRU\">PageLRU</a>(<a class=\"id\" href=\"#p\">p</a>) && !<a class=\"id\" href=\"#PageHuge\">PageHuge</a>(<a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * shake_page could have turned it free.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_free_buddy_page\">is_free_buddy_page</a>(<a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#action_result\">action_result</a>(<a class=\"id\" href=\"#pfn\">pfn</a>, \"free buddy, 2nd try\", <a class=\"id\" href=\"#DELAYED\">DELAYED</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#action_result\">action_result</a>(<a class=\"id\" href=\"#pfn\">pfn</a>, \"non LRU\", <a class=\"id\" href=\"#IGNORED\">IGNORED</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Lock the page and wait for writeback to finish.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It's very difficult to mess with pages currently under IO</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and in many cases impossible, so we just avoid it here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_page_nosync\">lock_page_nosync</a>(<a class=\"id\" href=\"#hpage\">hpage</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * unpoison always clear PG_hwpoison inside page lock</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#PageHWPoison\">PageHWPoison</a>(<a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"MCE %#lx: just unpoisoned\\n\", <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hwpoison_filter\">hwpoison_filter</a>(<a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#TestClearPageHWPoison\">TestClearPageHWPoison</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_long_sub\">atomic_long_sub</a>(<a class=\"id\" href=\"#nr_pages\">nr_pages</a>, &amp;<a class=\"id\" href=\"#mce_bad_pages\">mce_bad_pages</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#hpage\">hpage</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#hpage\">hpage</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For error on the tail page, we should set PG_hwpoison</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * on the head page to show that the hugepage is hwpoisoned</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageTail\">PageTail</a>(<a class=\"id\" href=\"#p\">p</a>) && <a class=\"id\" href=\"#TestSetPageHWPoison\">TestSetPageHWPoison</a>(<a class=\"id\" href=\"#hpage\">hpage</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#action_result\">action_result</a>(<a class=\"id\" href=\"#pfn\">pfn</a>, \"hugepage already hardware poisoned\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#IGNORED\">IGNORED</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#hpage\">hpage</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#hpage\">hpage</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Set PG_hwpoison on all pages in an error hugepage,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * because containment is done in hugepage unit for now.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Since we have done TestSetPageHWPoison() for the head page with</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * page lock held, we can safely set PG_hwpoison bits on tail pages.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageHuge\">PageHuge</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_page_hwpoison_huge_page\">set_page_hwpoison_huge_page</a>(<a class=\"id\" href=\"#hpage\">hpage</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_on_page_writeback\">wait_on_page_writeback</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now take care of user space mappings.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Abort on fail: __remove_from_page_cache() assumes unmapped page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hwpoison_user_mappings\">hwpoison_user_mappings</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#trapno\">trapno</a>) != <a class=\"id\" href=\"#SWAP_SUCCESS\">SWAP_SUCCESS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"MCE %#lx: cannot unmap page, give up\\n\", <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Torn down by someone else?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageLRU\">PageLRU</a>(<a class=\"id\" href=\"#p\">p</a>) && !<a class=\"id\" href=\"#PageSwapCache\">PageSwapCache</a>(<a class=\"id\" href=\"#p\">p</a>) && <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#mapping\">mapping</a> == <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#action_result\">action_result</a>(<a class=\"id\" href=\"#pfn\">pfn</a>, \"already truncated LRU\", <a class=\"id\" href=\"#IGNORED\">IGNORED</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#ps\">ps</a> = <a class=\"id\" href=\"#error_states\">error_states</a>;; <a class=\"id\" href=\"#ps\">ps</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ps\">ps</a>-><a class=\"id\" href=\"#mask\">mask</a>) == <a class=\"id\" href=\"#ps\">ps</a>-><a class=\"id\" href=\"#res\">res</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#page_action\">page_action</a>(<a class=\"id\" href=\"#ps\">ps</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#hpage\">hpage</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__memory_failure\">__memory_failure</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * memory_failure - Handle memory failure of a page.</span>", 
"<span class=\"comment\"> * @pfn: Page Number of the corrupted page</span>", 
"<span class=\"comment\"> * @trapno: Trap number reported in the signal to user space.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is called by the low level machine check code</span>", 
"<span class=\"comment\"> * of an architecture when it detects hardware memory corruption</span>", 
"<span class=\"comment\"> * of a page. It tries its best to recover, which includes</span>", 
"<span class=\"comment\"> * dropping pages, killing processes etc.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The function is primarily of use for corruptions that</span>", 
"<span class=\"comment\"> * happen outside the current execution context (e.g. when</span>", 
"<span class=\"comment\"> * detected by a background scrubber)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Must run in process context (e.g. a work queue) with interrupts</span>", 
"<span class=\"comment\"> * enabled and no spinlocks hold.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#memory_failure\">memory_failure</a>(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>, int <a class=\"id\" href=\"#trapno\">trapno</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__memory_failure\">__memory_failure</a>(<a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#trapno\">trapno</a>, 0);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * unpoison_memory - Unpoison a previously poisoned page</span>", 
"<span class=\"comment\"> * @pfn: Page number of the to be unpoisoned page</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Software-unpoison a page that has been poisoned by</span>", 
"<span class=\"comment\"> * memory_failure() earlier.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is only done on the software-level, so it only works</span>", 
"<span class=\"comment\"> * for linux injected failures, not real hardware failures</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 for success, otherwise -errno.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#unpoison_memory\">unpoison_memory</a>(unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#freeit\">freeit</a> = 0;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#nr_pages\">nr_pages</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pfn_valid\">pfn_valid</a>(<a class=\"id\" href=\"#pfn\">pfn</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENXIO\">ENXIO</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#compound_head\">compound_head</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#PageHWPoison\">PageHWPoison</a>(<a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"MCE: Page was already unpoisoned %#lx\\n\", <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a> = 1 << <a class=\"id\" href=\"#compound_order\">compound_order</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#get_page_unless_zero\">get_page_unless_zero</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#TestClearPageHWPoison\">TestClearPageHWPoison</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_long_sub\">atomic_long_sub</a>(<a class=\"id\" href=\"#nr_pages\">nr_pages</a>, &amp;<a class=\"id\" href=\"#mce_bad_pages\">mce_bad_pages</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"MCE: Software-unpoisoned free page %#lx\\n\", <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_page_nosync\">lock_page_nosync</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This test is racy because PG_hwpoison is set outside of page lock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * That's acceptable because that won't trigger kernel panic. Instead,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the PG_hwpoison page will be caught and isolated on the entrance to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the free buddy page pool.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#TestClearPageHWPoison\">TestClearPageHWPoison</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"MCE: Software-unpoisoned page %#lx\\n\", <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_long_sub\">atomic_long_sub</a>(<a class=\"id\" href=\"#nr_pages\">nr_pages</a>, &amp;<a class=\"id\" href=\"#mce_bad_pages\">mce_bad_pages</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#freeit\">freeit</a> = 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageHuge\">PageHuge</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_page_hwpoison_huge_page\">clear_page_hwpoison_huge_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#freeit\">freeit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#unpoison_memory\">unpoison_memory</a>);", 
"", 
"static struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#new_page\">new_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#p\">p</a>, unsigned long <a class=\"id\" href=\"#private\">private</a>, int **<a class=\"id\" href=\"#x\">x</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nid\">nid</a> = <a class=\"id\" href=\"#page_to_nid\">page_to_nid</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#alloc_pages_exact_node\">alloc_pages_exact_node</a>(<a class=\"id\" href=\"#nid\">nid</a>, <a class=\"id\" href=\"#GFP_HIGHUSER_MOVABLE\">GFP_HIGHUSER_MOVABLE</a>, 0);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Safely get reference count of an arbitrary page.</span>", 
"<span class=\"comment\"> * Returns 0 for a free page, -EIO for a zero refcount page</span>", 
"<span class=\"comment\"> * that is not free, and 1 for any other page type.</span>", 
"<span class=\"comment\"> * For 1 the page is returned with increased page count, otherwise not.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#get_any_page\">get_any_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#p\">p</a>, unsigned long <a class=\"id\" href=\"#pfn\">pfn</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#MF_COUNT_INCREASED\">MF_COUNT_INCREASED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The lock_system_sleep prevents a race with memory hotplug,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * because the isolation assumes there's only a single user.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This is a big hammer, a better would be nicer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_system_sleep\">lock_system_sleep</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Isolate the page, so that it doesn't get reallocated if it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * was free.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_migratetype_isolate\">set_migratetype_isolate</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#get_page_unless_zero\">get_page_unless_zero</a>(<a class=\"id\" href=\"#compound_head\">compound_head</a>(<a class=\"id\" href=\"#p\">p</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_free_buddy_page\">is_free_buddy_page</a>(<a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"get_any_page: %#lx free buddy page\\n\", <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Set hwpoison bit while page is still isolated */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SetPageHWPoison\">SetPageHWPoison</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"get_any_page: %#lx: unknown zero refcount page type %lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Not a free page */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unset_migratetype_isolate\">unset_migratetype_isolate</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_system_sleep\">unlock_system_sleep</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * soft_offline_page - Soft offline a page.</span>", 
"<span class=\"comment\"> * @page: page to offline</span>", 
"<span class=\"comment\"> * @flags: flags. Same as memory_failure().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success, otherwise negated errno.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Soft offline a page, by migration or invalidation,</span>", 
"<span class=\"comment\"> * without killing anything. This is for the case when</span>", 
"<span class=\"comment\"> * a page is not corrupted yet (so it's still valid to access),</span>", 
"<span class=\"comment\"> * but has had a number of corrected errors and is better taken</span>", 
"<span class=\"comment\"> * out.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The actual policy on when to do that is maintained by</span>", 
"<span class=\"comment\"> * user space.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This should never impact any application or cause data loss,</span>", 
"<span class=\"comment\"> * however it might take some time.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is not a 100% solution for all memory, but tries to be</span>", 
"<span class=\"comment\"> * ``good enough'' for the majority of memory.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#soft_offline_page\">soft_offline_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#get_any_page\">get_any_page</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Page cache page we can handle?</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#PageLRU\">PageLRU</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Try to free it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shake_page\">shake_page</a>(<a class=\"id\" href=\"#page\">page</a>, 1);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Did it turn free?</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#get_any_page\">get_any_page</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#pfn\">pfn</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#PageLRU\">PageLRU</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"soft_offline: %#lx: unknown non LRU page type %lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lock_page\">lock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_on_page_writeback\">wait_on_page_writeback</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Synchronized using the page lock with memory_failure()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageHWPoison\">PageHWPoison</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"soft offline: %#lx page already poisoned\\n\", <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Try to invalidate first. This should work for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * non dirty unmapped page cache pages.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#invalidate_inode_page\">invalidate_inode_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unlock_page\">unlock_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Drop count because page migration doesn't like raised</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * counts. The page could get re-allocated, but if it becomes</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * LRU the isolation will just fail.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * RED-PEN would be better to keep it isolated here, but we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * would need to fix isolation locking first.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_page\">put_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"soft_offline: %#lx: invalidated\\n\", <a class=\"id\" href=\"#pfn\">pfn</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Simple invalidation didn't work.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Try to migrate to a new page instead. migrate.c</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * handles a large number of cases for us.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#isolate_lru_page\">isolate_lru_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#pagelist\">pagelist</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>, &amp;<a class=\"id\" href=\"#pagelist\">pagelist</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#migrate_pages\">migrate_pages</a>(&amp;<a class=\"id\" href=\"#pagelist\">pagelist</a>, <a class=\"id\" href=\"#new_page\">new_page</a>, <a class=\"id\" href=\"#MPOL_MF_MOVE_ALL\">MPOL_MF_MOVE_ALL</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"soft offline: %#lx: migration failed %d, type %lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"soft offline: %#lx: isolation failed: %d, page count %d, type %lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a>, <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#page_count\">page_count</a>(<a class=\"id\" href=\"#page\">page</a>), <a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<a class=\"id\" href=\"#done\">done</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_long_add\">atomic_long_add</a>(1, &amp;<a class=\"id\" href=\"#mce_bad_pages\">mce_bad_pages</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SetPageHWPoison\">SetPageHWPoison</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* keep elevated page count for bad page */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The caller must hold current-&gt;mm-&gt;mmap_sem in read mode.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#is_hwpoison_address\">is_hwpoison_address</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgd_t\">pgd_t</a> *<a class=\"id\" href=\"#pgdp\">pgdp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud_t\">pud_t</a> <a class=\"id\" href=\"#pud\">pud</a>, *<a class=\"id\" href=\"#pudp\">pudp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd_t\">pmd_t</a> <a class=\"id\" href=\"#pmd\">pmd</a>, *<a class=\"id\" href=\"#pmdp\">pmdp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_t\">pte_t</a> <a class=\"id\" href=\"#pte\">pte</a>, *<a class=\"id\" href=\"#ptep\">ptep</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swp_entry_t\">swp_entry_t</a> <a class=\"id\" href=\"#entry\">entry</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pgdp\">pgdp</a> = <a class=\"id\" href=\"#pgd_offset\">pgd_offset</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pgd_present\">pgd_present</a>(*<a class=\"id\" href=\"#pgdp\">pgdp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pudp\">pudp</a> = <a class=\"id\" href=\"#pud_offset\">pud_offset</a>(<a class=\"id\" href=\"#pgdp\">pgdp</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pud\">pud</a> = *<a class=\"id\" href=\"#pudp\">pudp</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pud_present\">pud_present</a>(<a class=\"id\" href=\"#pud\">pud</a>) || <a class=\"id\" href=\"#pud_large\">pud_large</a>(<a class=\"id\" href=\"#pud\">pud</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmdp\">pmdp</a> = <a class=\"id\" href=\"#pmd_offset\">pmd_offset</a>(<a class=\"id\" href=\"#pudp\">pudp</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pmd\">pmd</a> = *<a class=\"id\" href=\"#pmdp\">pmdp</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pmd_present\">pmd_present</a>(<a class=\"id\" href=\"#pmd\">pmd</a>) || <a class=\"id\" href=\"#pmd_large\">pmd_large</a>(<a class=\"id\" href=\"#pmd\">pmd</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ptep\">ptep</a> = <a class=\"id\" href=\"#pte_offset_map\">pte_offset_map</a>(<a class=\"id\" href=\"#pmdp\">pmdp</a>, <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte\">pte</a> = *<a class=\"id\" href=\"#ptep\">ptep</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pte_unmap\">pte_unmap</a>(<a class=\"id\" href=\"#ptep\">ptep</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_swap_pte\">is_swap_pte</a>(<a class=\"id\" href=\"#pte\">pte</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#pte_to_swp_entry\">pte_to_swp_entry</a>(<a class=\"id\" href=\"#pte\">pte</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#is_hwpoison_entry\">is_hwpoison_entry</a>(<a class=\"id\" href=\"#entry\">entry</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#is_hwpoison_address\">is_hwpoison_address</a>);", 
];
xr_frag_insert('l/1f/939f536a1a103c82584f5d6346e43ea74d2cb4.xr', __xr_tmp);
