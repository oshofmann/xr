var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Helpers for formatting and printing strings</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright 31 August 2008 James Bottomley</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#math64\">math64</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string_helpers\">string_helpers</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * string_get_size - get the size in the specified units</span>", 
"<span class=\"comment\"> * @size:<span class=\"ts\"/>The size to be converted</span>", 
"<span class=\"comment\"> * @units:<span class=\"ts\"/>units to use (powers of 1000 or 1024)</span>", 
"<span class=\"comment\"> * @buf:<span class=\"ts\"/>buffer to format to</span>", 
"<span class=\"comment\"> * @len:<span class=\"ts\"/>length of buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function returns a string formatted to 3 significant figures</span>", 
"<span class=\"comment\"> * giving the size in the required units.  Returns 0 on success or</span>", 
"<span class=\"comment\"> * error on failure.  @buf is always zero terminated.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#string_get_size\">string_get_size</a>(<a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#size\">size</a>, const enum <a class=\"id\" href=\"#string_size_units\">string_size_units</a> <a class=\"id\" href=\"#units\">units</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    char *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#units_10\">units_10</a>[] = { \"B\", \"kB\", \"MB\", \"GB\", \"TB\", \"PB\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"EB\", \"ZB\", \"YB\", <a class=\"id\" href=\"#NULL\">NULL</a>};", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#units_2\">units_2</a>[] = {\"B\", \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"EiB\", \"ZiB\", \"YiB\", <a class=\"id\" href=\"#NULL\">NULL</a> };", 
"<span class=\"ts\"/>const char **<a class=\"id\" href=\"#units_str\">units_str</a>[] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>[<a class=\"id\" href=\"#STRING_UNITS_10\">STRING_UNITS_10</a>] =  <a class=\"id\" href=\"#units_10\">units_10</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>[<a class=\"id\" href=\"#STRING_UNITS_2\">STRING_UNITS_2</a>] = <a class=\"id\" href=\"#units_2\">units_2</a>,", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>const unsigned int <a class=\"id\" href=\"#divisor\">divisor</a>[] = {", 
"<span class=\"ts\"/><span class=\"ts\"/>[<a class=\"id\" href=\"#STRING_UNITS_10\">STRING_UNITS_10</a>] = 1000,", 
"<span class=\"ts\"/><span class=\"ts\"/>[<a class=\"id\" href=\"#STRING_UNITS_2\">STRING_UNITS_2</a>] = 1024,", 
"<span class=\"ts\"/>};", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#remainder\">remainder</a> = 0, <a class=\"id\" href=\"#sf_cap\">sf_cap</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#tmp\">tmp</a>[8];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>[0] = '\\0';", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> >= <a class=\"id\" href=\"#divisor\">divisor</a>[<a class=\"id\" href=\"#units\">units</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#size\">size</a> >= <a class=\"id\" href=\"#divisor\">divisor</a>[<a class=\"id\" href=\"#units\">units</a>] && <a class=\"id\" href=\"#units_str\">units_str</a>[<a class=\"id\" href=\"#units\">units</a>][<a class=\"id\" href=\"#i\">i</a>]) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remainder\">remainder</a> = <a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#divisor\">divisor</a>[<a class=\"id\" href=\"#units\">units</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sf_cap\">sf_cap</a> = <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0; <a class=\"id\" href=\"#sf_cap\">sf_cap</a>*10 &lt; 1000; <a class=\"id\" href=\"#j\">j</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sf_cap\">sf_cap</a> *= 10;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#j\">j</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remainder\">remainder</a> *= 1000;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#remainder\">remainder</a>, <a class=\"id\" href=\"#divisor\">divisor</a>[<a class=\"id\" href=\"#units\">units</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, sizeof(<a class=\"id\" href=\"#tmp\">tmp</a>), \".%03lld\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> (unsigned long long)<a class=\"id\" href=\"#remainder\">remainder</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>[<a class=\"id\" href=\"#j\">j</a>+1] = '\\0';", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#len\">len</a>, \"%lld%s %s\", (unsigned long long)<a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#tmp\">tmp</a>, <a class=\"id\" href=\"#units_str\">units_str</a>[<a class=\"id\" href=\"#units\">units</a>][<a class=\"id\" href=\"#i\">i</a>]);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#string_get_size\">string_get_size</a>);", 
];
xr_frag_insert('l/1f/a22b3361ea1e2533c71d6570d60cb7a4d3df2e.xr', __xr_tmp);
