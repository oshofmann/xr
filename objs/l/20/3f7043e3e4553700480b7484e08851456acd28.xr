var __xr_tmp = [
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * These special macros can be used to get or set a debugging register</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#get_debugreg\">get_debugreg</a>(<a class=\"id\" href=\"#var\">var</a>, register)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#var\">var</a>) = <a class=\"id\" href=\"#native_get_debugreg\">native_get_debugreg</a>(register)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#set_debugreg\">set_debugreg</a>(<a class=\"id\" href=\"#value\">value</a>, register)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#native_set_debugreg\">native_set_debugreg</a>(register, <a class=\"id\" href=\"#value\">value</a>)", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#load_sp0\">load_sp0</a>(struct <a class=\"id\" href=\"#tss_struct\">tss_struct</a> *<a class=\"id\" href=\"#tss\">tss</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#thread_struct\">thread_struct</a> *<a class=\"id\" href=\"#thread\">thread</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#native_load_sp0\">native_load_sp0</a>(<a class=\"id\" href=\"#tss\">tss</a>, <a class=\"id\" href=\"#thread\">thread</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#set_iopl_mask\">set_iopl_mask</a> <a class=\"id\" href=\"#native_set_iopl_mask\">native_set_iopl_mask</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PARAVIRT */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Save the cr4 feature set we're using (ie</span>", 
"<span class=\"comment\"> * Pentium 4MB enable and PPro Global page</span>", 
"<span class=\"comment\"> * enable), so that any CPU's that boot up</span>", 
"<span class=\"comment\"> * after us can get the correct flags.</span>", 
"<span class=\"comment\"> */</span>", 
"extern unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mmu_cr4_features\">mmu_cr4_features</a>;", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_in_cr4\">set_in_cr4</a>(unsigned long <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#cr4\">cr4</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mmu_cr4_features\">mmu_cr4_features</a> |= <a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cr4\">cr4</a> = <a class=\"id\" href=\"#read_cr4\">read_cr4</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cr4\">cr4</a> |= <a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_cr4\">write_cr4</a>(<a class=\"id\" href=\"#cr4\">cr4</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#clear_in_cr4\">clear_in_cr4</a>(unsigned long <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#cr4\">cr4</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mmu_cr4_features\">mmu_cr4_features</a> &= ~<a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cr4\">cr4</a> = <a class=\"id\" href=\"#read_cr4\">read_cr4</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cr4\">cr4</a> &= ~<a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_cr4\">write_cr4</a>(<a class=\"id\" href=\"#cr4\">cr4</a>);", 
"}", 
"", 
"typedef struct {", 
"<span class=\"ts\"/>unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seg\">seg</a>;", 
"} <a class=\"id\" href=\"#mm_segment_t\">mm_segment_t</a>;", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * create a kernel thread without removing it from tasklists</span>", 
"<span class=\"comment\"> */</span>", 
"extern int <a class=\"id\" href=\"#kernel_thread\">kernel_thread</a>(int (*<a class=\"id\" href=\"#fn\">fn</a>)(void *), void *<a class=\"id\" href=\"#arg\">arg</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"comment\">/* Free all resources held by a thread. */</span>", 
"extern void <a class=\"id\" href=\"#release_thread\">release_thread</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *);", 
"", 
"<span class=\"comment\">/* Prepare to copy thread state - unlazy all lazy state */</span>", 
"extern void <a class=\"id\" href=\"#prepare_to_copy\">prepare_to_copy</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"", 
"unsigned long <a class=\"id\" href=\"#get_wchan\">get_wchan</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Generic CPUID function</span>", 
"<span class=\"comment\"> * clear %ecx since some cpus (Cyrix MII) do not set or clear %ecx</span>", 
"<span class=\"comment\"> * resulting in stale register contents being returned.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#cpuid\">cpuid</a>(unsigned int <a class=\"id\" href=\"#op\">op</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned int *<a class=\"id\" href=\"#eax\">eax</a>, unsigned int *<a class=\"id\" href=\"#ebx\">ebx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned int *<a class=\"id\" href=\"#ecx\">ecx</a>, unsigned int *<a class=\"id\" href=\"#edx\">edx</a>)", 
"{", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#eax\">eax</a> = <a class=\"id\" href=\"#op\">op</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#ecx\">ecx</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__cpuid\">__cpuid</a>(<a class=\"id\" href=\"#eax\">eax</a>, <a class=\"id\" href=\"#ebx\">ebx</a>, <a class=\"id\" href=\"#ecx\">ecx</a>, <a class=\"id\" href=\"#edx\">edx</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Some CPUID calls want 'count' to be placed in ecx */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#cpuid_count\">cpuid_count</a>(unsigned int <a class=\"id\" href=\"#op\">op</a>, int <a class=\"id\" href=\"#count\">count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned int *<a class=\"id\" href=\"#eax\">eax</a>, unsigned int *<a class=\"id\" href=\"#ebx\">ebx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned int *<a class=\"id\" href=\"#ecx\">ecx</a>, unsigned int *<a class=\"id\" href=\"#edx\">edx</a>)", 
"{", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#eax\">eax</a> = <a class=\"id\" href=\"#op\">op</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#ecx\">ecx</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__cpuid\">__cpuid</a>(<a class=\"id\" href=\"#eax\">eax</a>, <a class=\"id\" href=\"#ebx\">ebx</a>, <a class=\"id\" href=\"#ecx\">ecx</a>, <a class=\"id\" href=\"#edx\">edx</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * CPUID functions returning a single datum</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#cpuid_eax\">cpuid_eax</a>(unsigned int <a class=\"id\" href=\"#op\">op</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#eax\">eax</a>, <a class=\"id\" href=\"#ebx\">ebx</a>, <a class=\"id\" href=\"#ecx\">ecx</a>, <a class=\"id\" href=\"#edx\">edx</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuid\">cpuid</a>(<a class=\"id\" href=\"#op\">op</a>, &amp;<a class=\"id\" href=\"#eax\">eax</a>, &amp;<a class=\"id\" href=\"#ebx\">ebx</a>, &amp;<a class=\"id\" href=\"#ecx\">ecx</a>, &amp;<a class=\"id\" href=\"#edx\">edx</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#eax\">eax</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#cpuid_ebx\">cpuid_ebx</a>(unsigned int <a class=\"id\" href=\"#op\">op</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#eax\">eax</a>, <a class=\"id\" href=\"#ebx\">ebx</a>, <a class=\"id\" href=\"#ecx\">ecx</a>, <a class=\"id\" href=\"#edx\">edx</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuid\">cpuid</a>(<a class=\"id\" href=\"#op\">op</a>, &amp;<a class=\"id\" href=\"#eax\">eax</a>, &amp;<a class=\"id\" href=\"#ebx\">ebx</a>, &amp;<a class=\"id\" href=\"#ecx\">ecx</a>, &amp;<a class=\"id\" href=\"#edx\">edx</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ebx\">ebx</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#cpuid_ecx\">cpuid_ecx</a>(unsigned int <a class=\"id\" href=\"#op\">op</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#eax\">eax</a>, <a class=\"id\" href=\"#ebx\">ebx</a>, <a class=\"id\" href=\"#ecx\">ecx</a>, <a class=\"id\" href=\"#edx\">edx</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuid\">cpuid</a>(<a class=\"id\" href=\"#op\">op</a>, &amp;<a class=\"id\" href=\"#eax\">eax</a>, &amp;<a class=\"id\" href=\"#ebx\">ebx</a>, &amp;<a class=\"id\" href=\"#ecx\">ecx</a>, &amp;<a class=\"id\" href=\"#edx\">edx</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ecx\">ecx</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#cpuid_edx\">cpuid_edx</a>(unsigned int <a class=\"id\" href=\"#op\">op</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#eax\">eax</a>, <a class=\"id\" href=\"#ebx\">ebx</a>, <a class=\"id\" href=\"#ecx\">ecx</a>, <a class=\"id\" href=\"#edx\">edx</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuid\">cpuid</a>(<a class=\"id\" href=\"#op\">op</a>, &amp;<a class=\"id\" href=\"#eax\">eax</a>, &amp;<a class=\"id\" href=\"#ebx\">ebx</a>, &amp;<a class=\"id\" href=\"#ecx\">ecx</a>, &amp;<a class=\"id\" href=\"#edx\">edx</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#edx\">edx</a>;", 
"}", 
"", 
"<span class=\"comment\">/* REP NOP (PAUSE) is a good thing to insert into busy-wait loops. */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#rep_nop\">rep_nop</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"rep; nop\" ::: \"memory\");", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rep_nop\">rep_nop</a>();", 
"}", 
"", 
"<span class=\"comment\">/* Stop speculative execution and prefetching of modified code. */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#sync_core\">sync_core</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_M386\">CONFIG_M386</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_M486\">CONFIG_M486</a>)", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86\">x86</a> &lt; 5)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* There is no speculative execution.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * jmp is a barrier to prefetching. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"jmp 1f\\n1:\\n\" ::: \"memory\");", 
"<span class=\"ts\"/>else", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* cpuid is a barrier to speculative execution.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Prefetched instructions are automatically</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * invalidated when modified. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"cpuid\" : \"=a\" (<a class=\"id\" href=\"#tmp\">tmp</a>) : \"0\" (1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     : \"ebx\", \"ecx\", \"edx\", \"memory\");", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__monitor\">__monitor</a>(const void *<a class=\"id\" href=\"#eax\">eax</a>, unsigned long <a class=\"id\" href=\"#ecx\">ecx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned long <a class=\"id\" href=\"#edx\">edx</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* \"monitor %eax, %ecx, %edx;\" */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\".byte 0x0f, 0x01, 0xc8;\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     :: \"a\" (<a class=\"id\" href=\"#eax\">eax</a>), \"c\" (<a class=\"id\" href=\"#ecx\">ecx</a>), \"d\"(<a class=\"id\" href=\"#edx\">edx</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__mwait\">__mwait</a>(unsigned long <a class=\"id\" href=\"#eax\">eax</a>, unsigned long <a class=\"id\" href=\"#ecx\">ecx</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* \"mwait %eax, %ecx;\" */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\".byte 0x0f, 0x01, 0xc9;\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     :: \"a\" (<a class=\"id\" href=\"#eax\">eax</a>), \"c\" (<a class=\"id\" href=\"#ecx\">ecx</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__sti_mwait\">__sti_mwait</a>(unsigned long <a class=\"id\" href=\"#eax\">eax</a>, unsigned long <a class=\"id\" href=\"#ecx\">ecx</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_hardirqs_on\">trace_hardirqs_on</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/* \"mwait %eax, %ecx;\" */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"sti; .byte 0x0f, 0x01, 0xc9;\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     :: \"a\" (<a class=\"id\" href=\"#eax\">eax</a>), \"c\" (<a class=\"id\" href=\"#ecx\">ecx</a>));", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#mwait_idle_with_hints\">mwait_idle_with_hints</a>(unsigned long <a class=\"id\" href=\"#eax\">eax</a>, unsigned long <a class=\"id\" href=\"#ecx\">ecx</a>);", 
"", 
"extern void <a class=\"id\" href=\"#select_idle_routine\">select_idle_routine</a>(const struct <a class=\"id\" href=\"#cpuinfo_x86\">cpuinfo_x86</a> *<a class=\"id\" href=\"#c\">c</a>);", 
"extern void <a class=\"id\" href=\"#init_c1e_mask\">init_c1e_mask</a>(void);", 
"", 
"extern unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#boot_option_idle_override\">boot_option_idle_override</a>;", 
"extern unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idle_halt\">idle_halt</a>;", 
"extern unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idle_nomwait\">idle_nomwait</a>;", 
"extern <a class=\"id\" href=\"#bool\">bool</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c1e_detected\">c1e_detected</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * on systems with caches, caches must be flashed as the absolute</span>", 
"<span class=\"comment\"> * last instruction before going into a suspended halt.  Otherwise,</span>", 
"<span class=\"comment\"> * dirty data can linger in the cache and become stale on resume,</span>", 
"<span class=\"comment\"> * leading to strange errors.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * perform a variety of operations to guarantee that the compiler</span>", 
"<span class=\"comment\"> * will not reorder instructions.  wbinvd itself is serializing</span>", 
"<span class=\"comment\"> * so the processor will not reorder.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Systems without cache can just go into halt.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#wbinvd_halt\">wbinvd_halt</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mb\">mb</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/* check for clflush to determine if wbinvd is legal */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_has_clflush\">cpu_has_clflush</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"cli; wbinvd; 1: hlt; jmp 1b\" : : : \"memory\");", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>while (1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#halt\">halt</a>();", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#enable_sep_cpu\">enable_sep_cpu</a>(void);", 
"extern int <a class=\"id\" href=\"#sysenter_setup\">sysenter_setup</a>(void);", 
"", 
"extern void <a class=\"id\" href=\"#early_trap_init\">early_trap_init</a>(void);", 
"", 
"<span class=\"comment\">/* Defined in head.S */</span>", 
"extern struct <a class=\"id\" href=\"#desc_ptr\">desc_ptr</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#early_gdt_descr\">early_gdt_descr</a>;", 
"", 
"extern void <a class=\"id\" href=\"#cpu_set_gdt\">cpu_set_gdt</a>(int);", 
"extern void <a class=\"id\" href=\"#switch_to_new_gdt\">switch_to_new_gdt</a>(int);", 
"extern void <a class=\"id\" href=\"#load_percpu_segment\">load_percpu_segment</a>(int);", 
"extern void <a class=\"id\" href=\"#cpu_init\">cpu_init</a>(void);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#get_debugctlmsr\">get_debugctlmsr</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#debugctlmsr\">debugctlmsr</a> = 0;", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_X86_DEBUGCTLMSR\">CONFIG_X86_DEBUGCTLMSR</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86\">x86</a> &lt; 6)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdmsrl\">rdmsrl</a>(<a class=\"id\" href=\"#MSR_IA32_DEBUGCTLMSR\">MSR_IA32_DEBUGCTLMSR</a>, <a class=\"id\" href=\"#debugctlmsr\">debugctlmsr</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#debugctlmsr\">debugctlmsr</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#update_debugctlmsr\">update_debugctlmsr</a>(unsigned long <a class=\"id\" href=\"#debugctlmsr\">debugctlmsr</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_X86_DEBUGCTLMSR\">CONFIG_X86_DEBUGCTLMSR</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86\">x86</a> &lt; 6)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wrmsrl\">wrmsrl</a>(<a class=\"id\" href=\"#MSR_IA32_DEBUGCTLMSR\">MSR_IA32_DEBUGCTLMSR</a>, <a class=\"id\" href=\"#debugctlmsr\">debugctlmsr</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * from system description table in BIOS. Mostly for MCA use, but</span>", 
"<span class=\"comment\"> * others may find it useful:</span>", 
"<span class=\"comment\"> */</span>", 
"extern unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#machine_id\">machine_id</a>;", 
"extern unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#machine_submodel_id\">machine_submodel_id</a>;", 
"extern unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BIOS_revision\">BIOS_revision</a>;", 
"", 
"<span class=\"comment\">/* Boot loader type from the setup header: */</span>", 
"extern int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bootloader_type\">bootloader_type</a>;", 
"extern int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bootloader_version\">bootloader_version</a>;", 
"", 
"extern char<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ignore_fpu_irq\">ignore_fpu_irq</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#HAVE_ARCH_PICK_MMAP_LAYOUT\">HAVE_ARCH_PICK_MMAP_LAYOUT</a> 1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ARCH_HAS_PREFETCHW\">ARCH_HAS_PREFETCHW</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ARCH_HAS_SPINLOCK_PREFETCH\">ARCH_HAS_SPINLOCK_PREFETCH</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BASE_PREFETCH\">BASE_PREFETCH</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ASM_NOP4\">ASM_NOP4</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ARCH_HAS_PREFETCH\">ARCH_HAS_PREFETCH</a>", 
"#else", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#BASE_PREFETCH\">BASE_PREFETCH</a><span class=\"ts\"/><span class=\"ts\"/>\"prefetcht0 (%1)\"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Prefetch instructions for Pentium III (+) and AMD Athlon (+)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It's not worth to care about 3dnow prefetches for the K6</span>", 
"<span class=\"comment\"> * because they are microcoded there and very slow.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#prefetch\">prefetch</a>(const void *<a class=\"id\" href=\"#x\">x</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alternative_input\">alternative_input</a>(<a class=\"id\" href=\"#BASE_PREFETCH\">BASE_PREFETCH</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"prefetchnta (%1)\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#X86_FEATURE_XMM\">X86_FEATURE_XMM</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"r\" (<a class=\"id\" href=\"#x\">x</a>));", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * 3dnow prefetch to get an exclusive cache line.</span>", 
"<span class=\"comment\"> * Useful for spinlocks to avoid one state transition in the</span>", 
"<span class=\"comment\"> * cache coherency protocol:</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#prefetchw\">prefetchw</a>(const void *<a class=\"id\" href=\"#x\">x</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alternative_input\">alternative_input</a>(<a class=\"id\" href=\"#BASE_PREFETCH\">BASE_PREFETCH</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"prefetchw (%1)\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#X86_FEATURE_3DNOW\">X86_FEATURE_3DNOW</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"r\" (<a class=\"id\" href=\"#x\">x</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#spin_lock_prefetch\">spin_lock_prefetch</a>(const void *<a class=\"id\" href=\"#x\">x</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prefetchw\">prefetchw</a>(<a class=\"id\" href=\"#x\">x</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * User space process size: 3GB (default).</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TASK_SIZE\">TASK_SIZE</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PAGE_OFFSET\">PAGE_OFFSET</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TASK_SIZE_MAX\">TASK_SIZE_MAX</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TASK_SIZE\">TASK_SIZE</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#STACK_TOP\">STACK_TOP</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TASK_SIZE\">TASK_SIZE</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#STACK_TOP_MAX\">STACK_TOP_MAX</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#STACK_TOP\">STACK_TOP</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INIT_THREAD\">INIT_THREAD</a>  {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#sp0\">sp0</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= sizeof(<a class=\"id\" href=\"#init_stack\">init_stack</a>) + (long)&amp;<a class=\"id\" href=\"#init_stack\">init_stack</a>, \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#vm86_info\">vm86_info</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#NULL\">NULL</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#sysenter_cs\">sysenter_cs</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#__KERNEL_CS\">__KERNEL_CS</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#io_bitmap_ptr\">io_bitmap_ptr</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#NULL\">NULL</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \\", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Note that the .io_bitmap member must be extra-big. This is because</span>", 
"<span class=\"comment\"> * the CPU will access an additional byte beyond the end of the IO</span>", 
"<span class=\"comment\"> * permission bitmap. The extra byte must be all 1 bits, and must</span>", 
"<span class=\"comment\"> * be within the limit.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INIT_TSS\">INIT_TSS</a>  {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#x86_tss\">x86_tss</a> = {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \\", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#sp0\">sp0</a><span class=\"ts\"/><span class=\"ts\"/>= sizeof(<a class=\"id\" href=\"#init_stack\">init_stack</a>) + (long)&amp;<a class=\"id\" href=\"#init_stack\">init_stack</a>, \\", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#ss0\">ss0</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#__KERNEL_DS\">__KERNEL_DS</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \\", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#ss1\">ss1</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#__KERNEL_CS\">__KERNEL_CS</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \\", 
"<span class=\"ts\"/><span class=\"ts\"/>.<a class=\"id\" href=\"#io_bitmap_base\">io_bitmap_base</a><span class=\"ts\"/>= <a class=\"id\" href=\"#INVALID_IO_BITMAP_OFFSET\">INVALID_IO_BITMAP_OFFSET</a>,<span class=\"ts\"/><span class=\"ts\"/>  \\", 
"<span class=\"ts\"/> },<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#io_bitmap\">io_bitmap</a><span class=\"ts\"/><span class=\"ts\"/>= { [0 ... <a class=\"id\" href=\"#IO_BITMAP_LONGS\">IO_BITMAP_LONGS</a>] = ~0 },<span class=\"ts\"/>  \\", 
"}", 
"", 
"extern unsigned long <a class=\"id\" href=\"#thread_saved_pc\">thread_saved_pc</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#THREAD_SIZE_LONGS\">THREAD_SIZE_LONGS</a>      (<a class=\"id\" href=\"#THREAD_SIZE\">THREAD_SIZE</a>/sizeof(unsigned long))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KSTK_TOP\">KSTK_TOP</a>(<a class=\"id\" href=\"#info\">info</a>)                                                 \\", 
"({                                                                     \\", 
"       unsigned long *<a class=\"id\" href=\"#__ptr\">__ptr</a> = (unsigned long *)(<a class=\"id\" href=\"#info\">info</a>);                 \\", 
"       (unsigned long)(&amp;<a class=\"id\" href=\"#__ptr\">__ptr</a>[<a class=\"id\" href=\"#THREAD_SIZE_LONGS\">THREAD_SIZE_LONGS</a>]);                     \\", 
"})", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The below -8 is to reserve 8 bytes on top of the ring0 stack.</span>", 
"<span class=\"comment\"> * This is necessary to guarantee that the entire \"struct pt_regs\"</span>", 
"<span class=\"comment\"> * is accessable even if the CPU haven't stored the SS/ESP registers</span>", 
"<span class=\"comment\"> * on the stack (interrupt gate does not save these registers</span>", 
"<span class=\"comment\"> * when switching to the same priv ring).</span>", 
"<span class=\"comment\"> * Therefore beware: accessing the ss/esp fields of the</span>", 
"<span class=\"comment\"> * \"struct pt_regs\" is possible, but they may contain the</span>", 
"<span class=\"comment\"> * completely wrong values.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#task_pt_regs\">task_pt_regs</a>(<a class=\"id\" href=\"#task\">task</a>)                                             \\", 
"({                                                                     \\", 
"       struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#__regs__\">__regs__</a>;                                       \\", 
"       <a class=\"id\" href=\"#__regs__\">__regs__</a> = (struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *)(<a class=\"id\" href=\"#KSTK_TOP\">KSTK_TOP</a>(<a class=\"id\" href=\"#task_stack_page\">task_stack_page</a>(<a class=\"id\" href=\"#task\">task</a>))-8); \\", 
"       <a class=\"id\" href=\"#__regs__\">__regs__</a> - 1;                                                   \\", 
"})", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KSTK_ESP\">KSTK_ESP</a>(<a class=\"id\" href=\"#task\">task</a>)<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#task_pt_regs\">task_pt_regs</a>(<a class=\"id\" href=\"#task\">task</a>)-><a class=\"id\" href=\"#sp\">sp</a>)", 
"", 
"#else", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * User space process size. 47bits minus one guard page.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TASK_SIZE_MAX\">TASK_SIZE_MAX</a><span class=\"ts\"/>((1UL << 47) - <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"", 
"<span class=\"comment\">/* This decides where the kernel will search for a free chunk of vm</span>", 
"<span class=\"comment\"> * space during mmap's.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IA32_PAGE_OFFSET\">IA32_PAGE_OFFSET</a><span class=\"ts\"/>((<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#personality\">personality</a> &amp; <a class=\"id\" href=\"#ADDR_LIMIT_3GB\">ADDR_LIMIT_3GB</a>) ? \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0xc0000000 : 0xFFFFe000)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TASK_SIZE\">TASK_SIZE</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#test_thread_flag\">test_thread_flag</a>(<a class=\"id\" href=\"#TIF_IA32\">TIF_IA32</a>) ? \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#IA32_PAGE_OFFSET\">IA32_PAGE_OFFSET</a> : <a class=\"id\" href=\"#TASK_SIZE_MAX\">TASK_SIZE_MAX</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TASK_SIZE_OF\">TASK_SIZE_OF</a>(<a class=\"id\" href=\"#child\">child</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#test_tsk_thread_flag\">test_tsk_thread_flag</a>(<a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#TIF_IA32\">TIF_IA32</a>)) ? \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#IA32_PAGE_OFFSET\">IA32_PAGE_OFFSET</a> : <a class=\"id\" href=\"#TASK_SIZE_MAX\">TASK_SIZE_MAX</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#STACK_TOP\">STACK_TOP</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TASK_SIZE\">TASK_SIZE</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#STACK_TOP_MAX\">STACK_TOP_MAX</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TASK_SIZE_MAX\">TASK_SIZE_MAX</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INIT_THREAD\">INIT_THREAD</a>  { \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#sp0\">sp0</a> = (unsigned long)&amp;<a class=\"id\" href=\"#init_stack\">init_stack</a> + sizeof(<a class=\"id\" href=\"#init_stack\">init_stack</a>) \\", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INIT_TSS\">INIT_TSS</a>  { \\", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#x86_tss\">x86_tss</a>.<a class=\"id\" href=\"#sp0\">sp0</a> = (unsigned long)&amp;<a class=\"id\" href=\"#init_stack\">init_stack</a> + sizeof(<a class=\"id\" href=\"#init_stack\">init_stack</a>) \\", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return saved PC of a blocked thread.</span>", 
"<span class=\"comment\"> * What is this good for? it will be always the scheduler or ret_from_fork.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#thread_saved_pc\">thread_saved_pc</a>(<a class=\"id\" href=\"#t\">t</a>)<span class=\"ts\"/>(*(unsigned long *)((<a class=\"id\" href=\"#t\">t</a>)-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#sp\">sp</a> - 8))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#task_pt_regs\">task_pt_regs</a>(<a class=\"id\" href=\"#tsk\">tsk</a>)<span class=\"ts\"/>((struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *)(<a class=\"id\" href=\"#tsk\">tsk</a>)-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#sp0\">sp0</a> - 1)", 
"extern unsigned long <a class=\"id\" href=\"#KSTK_ESP\">KSTK_ESP</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_X86_64 */</span>", 
"", 
"extern void <a class=\"id\" href=\"#start_thread\">start_thread</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, unsigned long <a class=\"id\" href=\"#new_ip\">new_ip</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned long <a class=\"id\" href=\"#new_sp\">new_sp</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This decides where the kernel will search for a free chunk of vm</span>", 
"<span class=\"comment\"> * space during mmap's.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TASK_UNMAPPED_BASE\">TASK_UNMAPPED_BASE</a><span class=\"ts\"/>(<a class=\"id\" href=\"#PAGE_ALIGN\">PAGE_ALIGN</a>(<a class=\"id\" href=\"#TASK_SIZE\">TASK_SIZE</a> / 3))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KSTK_EIP\">KSTK_EIP</a>(<a class=\"id\" href=\"#task\">task</a>)<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#task_pt_regs\">task_pt_regs</a>(<a class=\"id\" href=\"#task\">task</a>)-><a class=\"id\" href=\"#ip\">ip</a>)", 
"", 
"<span class=\"comment\">/* Get/set a process' ability to use the timestamp counter instruction */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GET_TSC_CTL\">GET_TSC_CTL</a>(<a class=\"id\" href=\"#adr\">adr</a>)<span class=\"ts\"/><a class=\"id\" href=\"#get_tsc_mode\">get_tsc_mode</a>((<a class=\"id\" href=\"#adr\">adr</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SET_TSC_CTL\">SET_TSC_CTL</a>(<a class=\"id\" href=\"#val\">val</a>)<span class=\"ts\"/><a class=\"id\" href=\"#set_tsc_mode\">set_tsc_mode</a>((<a class=\"id\" href=\"#val\">val</a>))", 
"", 
"extern int <a class=\"id\" href=\"#get_tsc_mode\">get_tsc_mode</a>(unsigned long <a class=\"id\" href=\"#adr\">adr</a>);", 
"extern int <a class=\"id\" href=\"#set_tsc_mode\">set_tsc_mode</a>(unsigned int <a class=\"id\" href=\"#val\">val</a>);", 
"", 
"extern int <a class=\"id\" href=\"#amd_get_nb_id\">amd_get_nb_id</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"struct <a class=\"id\" href=\"#aperfmperf\">aperfmperf</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#aperf\">aperf</a>, <a class=\"id\" href=\"#mperf\">mperf</a>;", 
"};", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#get_aperfmperf\">get_aperfmperf</a>(struct <a class=\"id\" href=\"#aperfmperf\">aperfmperf</a> *<a class=\"id\" href=\"#am\">am</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(!<a class=\"id\" href=\"#boot_cpu_has\">boot_cpu_has</a>(<a class=\"id\" href=\"#X86_FEATURE_APERFMPERF\">X86_FEATURE_APERFMPERF</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdmsrl\">rdmsrl</a>(<a class=\"id\" href=\"#MSR_IA32_APERF\">MSR_IA32_APERF</a>, <a class=\"id\" href=\"#am\">am</a>-><a class=\"id\" href=\"#aperf\">aperf</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rdmsrl\">rdmsrl</a>(<a class=\"id\" href=\"#MSR_IA32_MPERF\">MSR_IA32_MPERF</a>, <a class=\"id\" href=\"#am\">am</a>-><a class=\"id\" href=\"#mperf\">mperf</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#APERFMPERF_SHIFT\">APERFMPERF_SHIFT</a> 10", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a>", 
"unsigned long <a class=\"id\" href=\"#calc_aperfmperf_ratio\">calc_aperfmperf_ratio</a>(struct <a class=\"id\" href=\"#aperfmperf\">aperfmperf</a> *<a class=\"id\" href=\"#old\">old</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#aperfmperf\">aperfmperf</a> *<a class=\"id\" href=\"#new\">new</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#aperf\">aperf</a> = <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#aperf\">aperf</a> - <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#aperf\">aperf</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#mperf\">mperf</a> = <a class=\"id\" href=\"#new\">new</a>-><a class=\"id\" href=\"#mperf\">mperf</a> - <a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#mperf\">mperf</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#ratio\">ratio</a> = <a class=\"id\" href=\"#aperf\">aperf</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mperf\">mperf</a> >>= <a class=\"id\" href=\"#APERFMPERF_SHIFT\">APERFMPERF_SHIFT</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mperf\">mperf</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ratio\">ratio</a> = <a class=\"id\" href=\"#div64_u64\">div64_u64</a>(<a class=\"id\" href=\"#aperf\">aperf</a>, <a class=\"id\" href=\"#mperf\">mperf</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ratio\">ratio</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * AMD errata checking</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_CPU_SUP_AMD\">CONFIG_CPU_SUP_AMD</a>", 
"extern const int <a class=\"id\" href=\"#amd_erratum_383\">amd_erratum_383</a>[];", 
"extern const int <a class=\"id\" href=\"#amd_erratum_400\">amd_erratum_400</a>[];", 
"extern <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#cpu_has_amd_erratum\">cpu_has_amd_erratum</a>(const int *);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#AMD_LEGACY_ERRATUM\">AMD_LEGACY_ERRATUM</a>(...)<span class=\"ts\"/><span class=\"ts\"/>{ -1, <a class=\"id\" href=\"#__VA_ARGS__\">__VA_ARGS__</a>, 0 }", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#AMD_OSVW_ERRATUM\">AMD_OSVW_ERRATUM</a>(<a class=\"id\" href=\"#osvw_id\">osvw_id</a>, ...)<span class=\"ts\"/>{ <a class=\"id\" href=\"#osvw_id\">osvw_id</a>, <a class=\"id\" href=\"#__VA_ARGS__\">__VA_ARGS__</a>, 0 }", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#AMD_MODEL_RANGE\">AMD_MODEL_RANGE</a>(<a class=\"id\" href=\"#f\">f</a>, <a class=\"id\" href=\"#m_start\">m_start</a>, <a class=\"id\" href=\"#s_start\">s_start</a>, <a class=\"id\" href=\"#m_end\">m_end</a>, <a class=\"id\" href=\"#s_end\">s_end</a>) \\", 
"<span class=\"ts\"/>((<a class=\"id\" href=\"#f\">f</a> << 24) | (<a class=\"id\" href=\"#m_start\">m_start</a> << 16) | (<a class=\"id\" href=\"#s_start\">s_start</a> << 12) | (<a class=\"id\" href=\"#m_end\">m_end</a> << 4) | (<a class=\"id\" href=\"#s_end\">s_end</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#AMD_MODEL_RANGE_FAMILY\">AMD_MODEL_RANGE_FAMILY</a>(<a class=\"id\" href=\"#range\">range</a>)<span class=\"ts\"/>(((<a class=\"id\" href=\"#range\">range</a>) >> 24) &amp; 0xff)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#AMD_MODEL_RANGE_START\">AMD_MODEL_RANGE_START</a>(<a class=\"id\" href=\"#range\">range</a>)<span class=\"ts\"/>(((<a class=\"id\" href=\"#range\">range</a>) >> 12) &amp; 0xfff)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#AMD_MODEL_RANGE_END\">AMD_MODEL_RANGE_END</a>(<a class=\"id\" href=\"#range\">range</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#range\">range</a>) &amp; 0xfff)", 
"", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#cpu_has_amd_erratum\">cpu_has_amd_erratum</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#false\">false</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_CPU_SUP_AMD */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _ASM_X86_PROCESSOR_H */</span>", 
];
xr_frag_insert('l/20/3f7043e3e4553700480b7484e08851456acd28.xr', __xr_tmp);
