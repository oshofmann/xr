var __xr_tmp = [
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#net_ratelimit\">net_ratelimit</a>())<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_err\">pr_err</a>(<a class=\"id\" href=\"#msg\">msg</a>, ##<a class=\"id\" href=\"#__VA_ARGS__\">__VA_ARGS__</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (0)", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_IP_VS_DEBUG\">CONFIG_IP_VS_DEBUG</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EnterFunction\">EnterFunction</a>(<a class=\"id\" href=\"#level\">level</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#level\">level</a> <= <a class=\"id\" href=\"#ip_vs_get_debug_level\">ip_vs_get_debug_level</a>())<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#pr_fmt\">pr_fmt</a>(\"Enter: %s, %s line %i\\n\"),<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#__FILE__\">__FILE__</a>, <a class=\"id\" href=\"#__LINE__\">__LINE__</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LeaveFunction\">LeaveFunction</a>(<a class=\"id\" href=\"#level\">level</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#level\">level</a> <= <a class=\"id\" href=\"#ip_vs_get_debug_level\">ip_vs_get_debug_level</a>())<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#pr_fmt\">pr_fmt</a>(\"Leave: %s, %s line %i\\n\"),<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#__FILE__\">__FILE__</a>, <a class=\"id\" href=\"#__LINE__\">__LINE__</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} while (0)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EnterFunction\">EnterFunction</a>(<a class=\"id\" href=\"#level\">level</a>)   do {} while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LeaveFunction\">LeaveFunction</a>(<a class=\"id\" href=\"#level\">level</a>)   do {} while (0)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#IP_VS_WAIT_WHILE\">IP_VS_WAIT_WHILE</a>(<a class=\"id\" href=\"#expr\">expr</a>)<span class=\"ts\"/>while (<a class=\"id\" href=\"#expr\">expr</a>) { <a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>(); }", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *      The port number of FTP service (in network order).</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FTPPORT\">FTPPORT</a>  <a class=\"id\" href=\"#cpu_to_be16\">cpu_to_be16</a>(21)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FTPDATA\">FTPDATA</a>  <a class=\"id\" href=\"#cpu_to_be16\">cpu_to_be16</a>(20)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *      TCP State Values</span>", 
"<span class=\"comment\"> */</span>", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP_VS_TCP_S_NONE\">IP_VS_TCP_S_NONE</a> = 0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP_VS_TCP_S_ESTABLISHED\">IP_VS_TCP_S_ESTABLISHED</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP_VS_TCP_S_SYN_SENT\">IP_VS_TCP_S_SYN_SENT</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP_VS_TCP_S_SYN_RECV\">IP_VS_TCP_S_SYN_RECV</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP_VS_TCP_S_FIN_WAIT\">IP_VS_TCP_S_FIN_WAIT</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP_VS_TCP_S_TIME_WAIT\">IP_VS_TCP_S_TIME_WAIT</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP_VS_TCP_S_CLOSE\">IP_VS_TCP_S_CLOSE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP_VS_TCP_S_CLOSE_WAIT\">IP_VS_TCP_S_CLOSE_WAIT</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP_VS_TCP_S_LAST_ACK\">IP_VS_TCP_S_LAST_ACK</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP_VS_TCP_S_LISTEN\">IP_VS_TCP_S_LISTEN</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP_VS_TCP_S_SYNACK\">IP_VS_TCP_S_SYNACK</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP_VS_TCP_S_LAST\">IP_VS_TCP_S_LAST</a>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>UDP State Values</span>", 
"<span class=\"comment\"> */</span>", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP_VS_UDP_S_NORMAL\">IP_VS_UDP_S_NORMAL</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP_VS_UDP_S_LAST\">IP_VS_UDP_S_LAST</a>,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ICMP State Values</span>", 
"<span class=\"comment\"> */</span>", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP_VS_ICMP_S_NORMAL\">IP_VS_ICMP_S_NORMAL</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP_VS_ICMP_S_LAST\">IP_VS_ICMP_S_LAST</a>,", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>SCTP State Values</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#ip_vs_sctp_states\">ip_vs_sctp_states</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP_VS_SCTP_S_NONE\">IP_VS_SCTP_S_NONE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP_VS_SCTP_S_INIT_CLI\">IP_VS_SCTP_S_INIT_CLI</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP_VS_SCTP_S_INIT_SER\">IP_VS_SCTP_S_INIT_SER</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP_VS_SCTP_S_INIT_ACK_CLI\">IP_VS_SCTP_S_INIT_ACK_CLI</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP_VS_SCTP_S_INIT_ACK_SER\">IP_VS_SCTP_S_INIT_ACK_SER</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP_VS_SCTP_S_ECHO_CLI\">IP_VS_SCTP_S_ECHO_CLI</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP_VS_SCTP_S_ECHO_SER\">IP_VS_SCTP_S_ECHO_SER</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP_VS_SCTP_S_ESTABLISHED\">IP_VS_SCTP_S_ESTABLISHED</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP_VS_SCTP_S_SHUT_CLI\">IP_VS_SCTP_S_SHUT_CLI</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP_VS_SCTP_S_SHUT_SER\">IP_VS_SCTP_S_SHUT_SER</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP_VS_SCTP_S_SHUT_ACK_CLI\">IP_VS_SCTP_S_SHUT_ACK_CLI</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP_VS_SCTP_S_SHUT_ACK_SER\">IP_VS_SCTP_S_SHUT_ACK_SER</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP_VS_SCTP_S_CLOSED\">IP_VS_SCTP_S_CLOSED</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP_VS_SCTP_S_LAST\">IP_VS_SCTP_S_LAST</a>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Delta sequence info structure</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Each ip_vs_conn has 2 (output AND input seq. changes).</span>", 
"<span class=\"comment\"> *      Only used in the VS/NAT.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ip_vs_seq\">ip_vs_seq</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_seq\">init_seq</a>;<span class=\"ts\"/><span class=\"comment\">/* Add delta from this seq */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Delta in sequence numbers */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#previous_delta\">previous_delta</a>;<span class=\"ts\"/><span class=\"comment\">/* Delta in sequence numbers</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   before last resized pkt */</span>", 
"};", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>IPVS statistics objects</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ip_vs_estimator\">ip_vs_estimator</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_inbytes\">last_inbytes</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_outbytes\">last_outbytes</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_conns\">last_conns</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_inpkts\">last_inpkts</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#last_outpkts\">last_outpkts</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cps\">cps</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inpps\">inpps</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#outpps\">outpps</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inbps\">inbps</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#outbps\">outbps</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#ip_vs_stats\">ip_vs_stats</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ip_vs_stats_user\">ip_vs_stats_user</a><span class=\"ts\"/><a class=\"id\" href=\"#ustats\">ustats</a>;         <span class=\"comment\">/* statistics */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ip_vs_estimator\">ip_vs_estimator</a><span class=\"ts\"/><a class=\"id\" href=\"#est\">est</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* estimator */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a>              <a class=\"id\" href=\"#lock\">lock</a>;           <span class=\"comment\">/* spin lock */</span>", 
"};", 
"", 
"struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a>;", 
"struct <a class=\"id\" href=\"#iphdr\">iphdr</a>;", 
"struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a>;", 
"struct <a class=\"id\" href=\"#ip_vs_app\">ip_vs_app</a>;", 
"struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a>;", 
"", 
"struct <a class=\"id\" href=\"#ip_vs_protocol\">ip_vs_protocol</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ip_vs_protocol\">ip_vs_protocol</a><span class=\"ts\"/>*<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>char<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#protocol\">protocol</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num_states\">num_states</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dont_defrag\">dont_defrag</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#appcnt\">appcnt</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* counter of proto app incs */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#timeout_table\">timeout_table</a>;<span class=\"ts\"/><span class=\"comment\">/* protocol timeout table */</span>", 
"", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#init\">init</a>)(struct <a class=\"id\" href=\"#ip_vs_protocol\">ip_vs_protocol</a> *<a class=\"id\" href=\"#pp\">pp</a>);", 
"", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#exit\">exit</a>)(struct <a class=\"id\" href=\"#ip_vs_protocol\">ip_vs_protocol</a> *<a class=\"id\" href=\"#pp\">pp</a>);", 
"", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#conn_schedule\">conn_schedule</a>)(int <a class=\"id\" href=\"#af\">af</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#ip_vs_protocol\">ip_vs_protocol</a> *<a class=\"id\" href=\"#pp\">pp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int *<a class=\"id\" href=\"#verdict\">verdict</a>, struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> **<a class=\"id\" href=\"#cpp\">cpp</a>);", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *", 
"<span class=\"ts\"/>(*<a class=\"id\" href=\"#conn_in_get\">conn_in_get</a>)(int <a class=\"id\" href=\"#af\">af</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#ip_vs_protocol\">ip_vs_protocol</a> *<a class=\"id\" href=\"#pp\">pp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       const struct <a class=\"id\" href=\"#ip_vs_iphdr\">ip_vs_iphdr</a> *<a class=\"id\" href=\"#iph\">iph</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       unsigned int <a class=\"id\" href=\"#proto_off\">proto_off</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       int <a class=\"id\" href=\"#inverse\">inverse</a>);", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *", 
"<span class=\"ts\"/>(*<a class=\"id\" href=\"#conn_out_get\">conn_out_get</a>)(int <a class=\"id\" href=\"#af\">af</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ip_vs_protocol\">ip_vs_protocol</a> *<a class=\"id\" href=\"#pp\">pp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#ip_vs_iphdr\">ip_vs_iphdr</a> *<a class=\"id\" href=\"#iph\">iph</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#proto_off\">proto_off</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#inverse\">inverse</a>);", 
"", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#snat_handler\">snat_handler</a>)(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#ip_vs_protocol\">ip_vs_protocol</a> *<a class=\"id\" href=\"#pp\">pp</a>, struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *<a class=\"id\" href=\"#cp\">cp</a>);", 
"", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#dnat_handler\">dnat_handler</a>)(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#ip_vs_protocol\">ip_vs_protocol</a> *<a class=\"id\" href=\"#pp\">pp</a>, struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *<a class=\"id\" href=\"#cp\">cp</a>);", 
"", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#csum_check\">csum_check</a>)(int <a class=\"id\" href=\"#af\">af</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#ip_vs_protocol\">ip_vs_protocol</a> *<a class=\"id\" href=\"#pp\">pp</a>);", 
"", 
"<span class=\"ts\"/>const char *(*<a class=\"id\" href=\"#state_name\">state_name</a>)(int <a class=\"id\" href=\"#state\">state</a>);", 
"", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#state_transition\">state_transition</a>)(struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *<a class=\"id\" href=\"#cp\">cp</a>, int <a class=\"id\" href=\"#direction\">direction</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ip_vs_protocol\">ip_vs_protocol</a> *<a class=\"id\" href=\"#pp\">pp</a>);", 
"", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#register_app\">register_app</a>)(struct <a class=\"id\" href=\"#ip_vs_app\">ip_vs_app</a> *<a class=\"id\" href=\"#inc\">inc</a>);", 
"", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#unregister_app\">unregister_app</a>)(struct <a class=\"id\" href=\"#ip_vs_app\">ip_vs_app</a> *<a class=\"id\" href=\"#inc\">inc</a>);", 
"", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#app_conn_bind\">app_conn_bind</a>)(struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *<a class=\"id\" href=\"#cp\">cp</a>);", 
"", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#debug_packet\">debug_packet</a>)(struct <a class=\"id\" href=\"#ip_vs_protocol\">ip_vs_protocol</a> *<a class=\"id\" href=\"#pp\">pp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const char *<a class=\"id\" href=\"#msg\">msg</a>);", 
"", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#timeout_change\">timeout_change</a>)(struct <a class=\"id\" href=\"#ip_vs_protocol\">ip_vs_protocol</a> *<a class=\"id\" href=\"#pp\">pp</a>, int <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#set_state_timeout\">set_state_timeout</a>)(struct <a class=\"id\" href=\"#ip_vs_protocol\">ip_vs_protocol</a> *<a class=\"id\" href=\"#pp\">pp</a>, char *<a class=\"id\" href=\"#sname\">sname</a>, int <a class=\"id\" href=\"#to\">to</a>);", 
"};", 
"", 
"extern struct <a class=\"id\" href=\"#ip_vs_protocol\">ip_vs_protocol</a> * <a class=\"id\" href=\"#ip_vs_proto_get\">ip_vs_proto_get</a>(unsigned short <a class=\"id\" href=\"#proto\">proto</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>IP_VS structure allocated for each dynamically scheduled connection</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a>        <a class=\"id\" href=\"#c_list\">c_list</a>;         <span class=\"comment\">/* hashed list heads */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Protocol, addresses and port numbers */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a>                      <a class=\"id\" href=\"#af\">af</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* address family */</span>", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#nf_inet_addr\">nf_inet_addr</a>       <a class=\"id\" href=\"#caddr\">caddr</a>;          <span class=\"comment\">/* client address */</span>", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#nf_inet_addr\">nf_inet_addr</a>       <a class=\"id\" href=\"#vaddr\">vaddr</a>;          <span class=\"comment\">/* virtual address */</span>", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#nf_inet_addr\">nf_inet_addr</a>       <a class=\"id\" href=\"#daddr\">daddr</a>;          <span class=\"comment\">/* destination address */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be16\">__be16</a>                   <a class=\"id\" href=\"#cport\">cport</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be16\">__be16</a>                   <a class=\"id\" href=\"#vport\">vport</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be16\">__be16</a>                   <a class=\"id\" href=\"#dport\">dport</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a>                   <a class=\"id\" href=\"#protocol\">protocol</a>;       <span class=\"comment\">/* Which protocol (TCP/UDP) */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* counter and timer */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#refcnt\">refcnt</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* reference count */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timer_list\">timer_list</a><span class=\"ts\"/><a class=\"id\" href=\"#timer\">timer</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Expiration timer */</span>", 
"<span class=\"ts\"/>volatile unsigned long<span class=\"ts\"/><a class=\"id\" href=\"#timeout\">timeout</a>;<span class=\"ts\"/><span class=\"comment\">/* timeout */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Flags and state transition */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a>              <a class=\"id\" href=\"#lock\">lock</a>;           <span class=\"comment\">/* lock for state transition */</span>", 
"<span class=\"ts\"/>volatile <a class=\"id\" href=\"#__u16\">__u16</a>          <a class=\"id\" href=\"#flags\">flags</a>;          <span class=\"comment\">/* status flags */</span>", 
"<span class=\"ts\"/>volatile <a class=\"id\" href=\"#__u16\">__u16</a>          <a class=\"id\" href=\"#state\">state</a>;          <span class=\"comment\">/* state info */</span>", 
"<span class=\"ts\"/>volatile <a class=\"id\" href=\"#__u16\">__u16</a>          <a class=\"id\" href=\"#old_state\">old_state</a>;      <span class=\"comment\">/* old state, to be used for</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * state transition triggerd</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * synchronization</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Control members */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a>       *<a class=\"id\" href=\"#control\">control</a>;       <span class=\"comment\">/* Master control connection */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a>                <a class=\"id\" href=\"#n_control\">n_control</a>;      <span class=\"comment\">/* Number of controlled ones */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ip_vs_dest\">ip_vs_dest</a>       *<a class=\"id\" href=\"#dest\">dest</a>;          <span class=\"comment\">/* real server */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a>                <a class=\"id\" href=\"#in_pkts\">in_pkts</a>;        <span class=\"comment\">/* incoming packet counter */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* packet transmitter for different forwarding methods.  If it</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   mangles the packet, it must return NF_DROP or better NF_STOLEN,</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   otherwise this must be changed to a sk_buff **.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#packet_xmit\">packet_xmit</a>)(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *<a class=\"id\" href=\"#cp\">cp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#ip_vs_protocol\">ip_vs_protocol</a> *<a class=\"id\" href=\"#pp\">pp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Note: we can group the following members into a structure,</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   in order to save more space, and the following members are</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   only used in VS/NAT anyway */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ip_vs_app\">ip_vs_app</a>        *<a class=\"id\" href=\"#app\">app</a>;           <span class=\"comment\">/* bound ip_vs_app object */</span>", 
"<span class=\"ts\"/>void                    *<a class=\"id\" href=\"#app_data\">app_data</a>;      <span class=\"comment\">/* Application private data */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ip_vs_seq\">ip_vs_seq</a>        <a class=\"id\" href=\"#in_seq\">in_seq</a>;         <span class=\"comment\">/* incoming seq. struct */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ip_vs_seq\">ip_vs_seq</a>        <a class=\"id\" href=\"#out_seq\">out_seq</a>;        <span class=\"comment\">/* outgoing seq. struct */</span>", 
"};", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Extended internal versions of struct ip_vs_service_user and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ip_vs_dest_user for IPv6 support.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>We need these to conveniently pass around service and destination</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>options, but unfortunately, we also need to keep the old definitions to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>maintain userspace backwards compatibility for the setsockopt interface.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ip_vs_service_user_kern\">ip_vs_service_user_kern</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* virtual service addresses */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#af\">af</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#protocol\">protocol</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#nf_inet_addr\">nf_inet_addr</a><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* virtual ip address */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#port\">port</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fwmark\">fwmark</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* firwall mark of service */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* virtual service options */</span>", 
"<span class=\"ts\"/>char<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#sched_name\">sched_name</a>;", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* virtual service flags */</span>", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timeout\">timeout</a>;<span class=\"ts\"/><span class=\"comment\">/* persistent timeout in sec */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#netmask\">netmask</a>;<span class=\"ts\"/><span class=\"comment\">/* persistent netmask */</span>", 
"};", 
"", 
"", 
"struct <a class=\"id\" href=\"#ip_vs_dest_user_kern\">ip_vs_dest_user_kern</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* destination server address */</span>", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#nf_inet_addr\">nf_inet_addr</a><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#port\">port</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* real server options */</span>", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#conn_flags\">conn_flags</a>;<span class=\"ts\"/><span class=\"comment\">/* connection flags */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#weight\">weight</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* destination weight */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* thresholds for active connections */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u_threshold\">u_threshold</a>;<span class=\"ts\"/><span class=\"comment\">/* upper threshold */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l_threshold\">l_threshold</a>;<span class=\"ts\"/><span class=\"comment\">/* lower threshold */</span>", 
"};", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The information about the virtual service offered to the net</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and the forwarding entries</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ip_vs_service\">ip_vs_service</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#s_list\">s_list</a>;   <span class=\"comment\">/* for normal service table */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#f_list\">f_list</a>;   <span class=\"comment\">/* for fwmark-based service table */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#refcnt\">refcnt</a>;   <span class=\"comment\">/* reference counter */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#usecnt\">usecnt</a>;   <span class=\"comment\">/* use counter */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#af\">af</a>;       <span class=\"comment\">/* address family */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#protocol\">protocol</a>; <span class=\"comment\">/* which protocol (TCP/UDP) */</span>", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#nf_inet_addr\">nf_inet_addr</a><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a>;<span class=\"ts\"/>  <span class=\"comment\">/* IP address for virtual service */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be16\">__be16</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#port\">port</a>;<span class=\"ts\"/>  <span class=\"comment\">/* port number for the service */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a>                   <a class=\"id\" href=\"#fwmark\">fwmark</a>;   <span class=\"comment\">/* firewall mark of the service */</span>", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>;<span class=\"ts\"/>  <span class=\"comment\">/* service status flags */</span>", 
"<span class=\"ts\"/>unsigned<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timeout\">timeout</a>;  <span class=\"comment\">/* persistent timeout in ticks */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be32\">__be32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#netmask\">netmask</a>;  <span class=\"comment\">/* grouping granularity */</span>", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#destinations\">destinations</a>;  <span class=\"comment\">/* real server d-linked list */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num_dests\">num_dests</a>;     <span class=\"comment\">/* number of servers */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ip_vs_stats\">ip_vs_stats</a>      <a class=\"id\" href=\"#stats\">stats</a>;         <span class=\"comment\">/* statistics for the service */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ip_vs_app\">ip_vs_app</a><span class=\"ts\"/>*<a class=\"id\" href=\"#inc\">inc</a>;<span class=\"ts\"/>  <span class=\"comment\">/* bind conns to this app inc */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* for scheduling */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ip_vs_scheduler\">ip_vs_scheduler</a><span class=\"ts\"/>*<a class=\"id\" href=\"#scheduler\">scheduler</a>;    <span class=\"comment\">/* bound scheduler object */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rwlock_t\">rwlock_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sched_lock\">sched_lock</a>;    <span class=\"comment\">/* lock sched_data */</span>", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#sched_data\">sched_data</a>;   <span class=\"comment\">/* scheduler application data */</span>", 
"};", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The real server destination forwarding entry</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>with ip address, port number, and so on.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ip_vs_dest\">ip_vs_dest</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#n_list\">n_list</a>;   <span class=\"comment\">/* for the dests in the service */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#d_list\">d_list</a>;   <span class=\"comment\">/* for table with all the dests */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#af\">af</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* address family */</span>", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#nf_inet_addr\">nf_inet_addr</a><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* IP address of the server */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be16\">__be16</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#port\">port</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* port number of the server */</span>", 
"<span class=\"ts\"/>volatile unsigned<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* dest status flags */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#conn_flags\">conn_flags</a>;<span class=\"ts\"/><span class=\"comment\">/* flags to copy to conn */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#weight\">weight</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* server weight */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#refcnt\">refcnt</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* reference counter */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ip_vs_stats\">ip_vs_stats</a>      <a class=\"id\" href=\"#stats\">stats</a>;          <span class=\"comment\">/* statistics */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* connection counters and thresholds */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#activeconns\">activeconns</a>;<span class=\"ts\"/><span class=\"comment\">/* active connections */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inactconns\">inactconns</a>;<span class=\"ts\"/><span class=\"comment\">/* inactive connections */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#persistconns\">persistconns</a>;<span class=\"ts\"/><span class=\"comment\">/* persistent connections */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u_threshold\">u_threshold</a>;<span class=\"ts\"/><span class=\"comment\">/* upper threshold */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#l_threshold\">l_threshold</a>;<span class=\"ts\"/><span class=\"comment\">/* lower threshold */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* for destination cache */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst_lock\">dst_lock</a>;<span class=\"ts\"/><span class=\"comment\">/* lock of dst_cache */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dst_entry\">dst_entry</a><span class=\"ts\"/>*<a class=\"id\" href=\"#dst_cache\">dst_cache</a>;<span class=\"ts\"/><span class=\"comment\">/* destination cache entry */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst_rtos\">dst_rtos</a>;<span class=\"ts\"/><span class=\"comment\">/* RT_TOS(tos) for dst */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* for virtual service */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ip_vs_service\">ip_vs_service</a><span class=\"ts\"/>*<a class=\"id\" href=\"#svc\">svc</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* service it belongs to */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#protocol\">protocol</a>;<span class=\"ts\"/><span class=\"comment\">/* which protocol (TCP/UDP) */</span>", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#nf_inet_addr\">nf_inet_addr</a><span class=\"ts\"/><a class=\"id\" href=\"#vaddr\">vaddr</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* virtual IP address */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be16\">__be16</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vport\">vport</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* virtual port number */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u32\">__u32</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vfwmark\">vfwmark</a>;<span class=\"ts\"/><span class=\"comment\">/* firewall mark of service */</span>", 
"};", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The scheduler object</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ip_vs_scheduler\">ip_vs_scheduler</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#n_list\">n_list</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* d-linked list head */</span>", 
"<span class=\"ts\"/>char<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#name\">name</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* scheduler name */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#refcnt\">refcnt</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* reference counter */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#module\">module</a>;<span class=\"ts\"/><span class=\"comment\">/* THIS_MODULE/NULL */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* scheduler initializing service */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#init_service\">init_service</a>)(struct <a class=\"id\" href=\"#ip_vs_service\">ip_vs_service</a> *<a class=\"id\" href=\"#svc\">svc</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* scheduling service finish */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#done_service\">done_service</a>)(struct <a class=\"id\" href=\"#ip_vs_service\">ip_vs_service</a> *<a class=\"id\" href=\"#svc\">svc</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* scheduler updating service */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#update_service\">update_service</a>)(struct <a class=\"id\" href=\"#ip_vs_service\">ip_vs_service</a> *<a class=\"id\" href=\"#svc\">svc</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* selecting a server from the given service */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ip_vs_dest\">ip_vs_dest</a>* (*<a class=\"id\" href=\"#schedule\">schedule</a>)(struct <a class=\"id\" href=\"#ip_vs_service\">ip_vs_service</a> *<a class=\"id\" href=\"#svc\">svc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"};", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>The application module object (a.k.a. app incarnation)</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ip_vs_app\">ip_vs_app</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#a_list\">a_list</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* member in app list */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* IP_VS_APP_TYPE_xxx */</span>", 
"<span class=\"ts\"/>char<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#name\">name</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* application module name */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__u16\">__u16</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#protocol\">protocol</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#module\">module</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#module\">module</a>;<span class=\"ts\"/><span class=\"comment\">/* THIS_MODULE/NULL */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#incs_list\">incs_list</a>;<span class=\"ts\"/><span class=\"comment\">/* list of incarnations */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* members for application incarnations */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#p_list\">p_list</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* member in proto app list */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ip_vs_app\">ip_vs_app</a><span class=\"ts\"/>*<a class=\"id\" href=\"#app\">app</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* its real application */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__be16\">__be16</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#port\">port</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* port number in net order */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#usecnt\">usecnt</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* usage counter */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* output hook: return false if can't linearize. diff set for TCP.  */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#pkt_out\">pkt_out</a>)(struct <a class=\"id\" href=\"#ip_vs_app\">ip_vs_app</a> *, struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *, int *<a class=\"id\" href=\"#diff\">diff</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* input hook: return false if can't linearize. diff set for TCP. */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#pkt_in\">pkt_in</a>)(struct <a class=\"id\" href=\"#ip_vs_app\">ip_vs_app</a> *, struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *, int *<a class=\"id\" href=\"#diff\">diff</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* ip_vs_app initializer */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#init_conn\">init_conn</a>)(struct <a class=\"id\" href=\"#ip_vs_app\">ip_vs_app</a> *, struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* ip_vs_app finish */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#done_conn\">done_conn</a>)(struct <a class=\"id\" href=\"#ip_vs_app\">ip_vs_app</a> *, struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *);", 
"", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* not used now */</span>", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#bind_conn\">bind_conn</a>)(struct <a class=\"id\" href=\"#ip_vs_app\">ip_vs_app</a> *, struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#ip_vs_protocol\">ip_vs_protocol</a> *);", 
"", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#unbind_conn\">unbind_conn</a>)(struct <a class=\"id\" href=\"#ip_vs_app\">ip_vs_app</a> *, struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *);", 
"", 
"<span class=\"ts\"/>int *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timeout_table\">timeout_table</a>;", 
"<span class=\"ts\"/>int *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timeouts\">timeouts</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timeouts_size\">timeouts_size</a>;", 
"", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#conn_schedule\">conn_schedule</a>)(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#ip_vs_app\">ip_vs_app</a> *<a class=\"id\" href=\"#app\">app</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int *<a class=\"id\" href=\"#verdict\">verdict</a>, struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> **<a class=\"id\" href=\"#cpp\">cpp</a>);", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *", 
"<span class=\"ts\"/>(*<a class=\"id\" href=\"#conn_in_get\">conn_in_get</a>)(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#ip_vs_app\">ip_vs_app</a> *<a class=\"id\" href=\"#app\">app</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       const struct <a class=\"id\" href=\"#iphdr\">iphdr</a> *<a class=\"id\" href=\"#iph\">iph</a>, unsigned int <a class=\"id\" href=\"#proto_off\">proto_off</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       int <a class=\"id\" href=\"#inverse\">inverse</a>);", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *", 
"<span class=\"ts\"/>(*<a class=\"id\" href=\"#conn_out_get\">conn_out_get</a>)(const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#ip_vs_app\">ip_vs_app</a> *<a class=\"id\" href=\"#app\">app</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#iphdr\">iphdr</a> *<a class=\"id\" href=\"#iph\">iph</a>, unsigned int <a class=\"id\" href=\"#proto_off\">proto_off</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#inverse\">inverse</a>);", 
"", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#state_transition\">state_transition</a>)(struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *<a class=\"id\" href=\"#cp\">cp</a>, int <a class=\"id\" href=\"#direction\">direction</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ip_vs_app\">ip_vs_app</a> *<a class=\"id\" href=\"#app\">app</a>);", 
"", 
"<span class=\"ts\"/>void (*<a class=\"id\" href=\"#timeout_change\">timeout_change</a>)(struct <a class=\"id\" href=\"#ip_vs_app\">ip_vs_app</a> *<a class=\"id\" href=\"#app\">app</a>, int <a class=\"id\" href=\"#flags\">flags</a>);", 
"};", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *      IPVS core functions</span>", 
"<span class=\"comment\"> *      (from ip_vs_core.c)</span>", 
"<span class=\"comment\"> */</span>", 
"extern const char *<a class=\"id\" href=\"#ip_vs_proto_name\">ip_vs_proto_name</a>(unsigned <a class=\"id\" href=\"#proto\">proto</a>);", 
"extern void <a class=\"id\" href=\"#ip_vs_init_hash_table\">ip_vs_init_hash_table</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#rows\">rows</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IP_VS_INIT_HASH_TABLE\">IP_VS_INIT_HASH_TABLE</a>(<a class=\"id\" href=\"#t\">t</a>) <a class=\"id\" href=\"#ip_vs_init_hash_table\">ip_vs_init_hash_table</a>((<a class=\"id\" href=\"#t\">t</a>), <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>((<a class=\"id\" href=\"#t\">t</a>)))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IP_VS_APP_TYPE_FTP\">IP_VS_APP_TYPE_FTP</a><span class=\"ts\"/>1", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *     ip_vs_conn handling functions</span>", 
"<span class=\"comment\"> *     (from ip_vs_conn.c)</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"enum {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP_VS_DIR_INPUT\">IP_VS_DIR_INPUT</a> = 0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP_VS_DIR_OUTPUT\">IP_VS_DIR_OUTPUT</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP_VS_DIR_INPUT_ONLY\">IP_VS_DIR_INPUT_ONLY</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP_VS_DIR_LAST\">IP_VS_DIR_LAST</a>,", 
"};", 
"", 
"extern struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *<a class=\"id\" href=\"#ip_vs_conn_in_get\">ip_vs_conn_in_get</a>", 
"(int <a class=\"id\" href=\"#af\">af</a>, int <a class=\"id\" href=\"#protocol\">protocol</a>, const union <a class=\"id\" href=\"#nf_inet_addr\">nf_inet_addr</a> *<a class=\"id\" href=\"#s_addr\">s_addr</a>, <a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#s_port\">s_port</a>,", 
" const union <a class=\"id\" href=\"#nf_inet_addr\">nf_inet_addr</a> *<a class=\"id\" href=\"#d_addr\">d_addr</a>, <a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#d_port\">d_port</a>);", 
"", 
"extern struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *<a class=\"id\" href=\"#ip_vs_ct_in_get\">ip_vs_ct_in_get</a>", 
"(int <a class=\"id\" href=\"#af\">af</a>, int <a class=\"id\" href=\"#protocol\">protocol</a>, const union <a class=\"id\" href=\"#nf_inet_addr\">nf_inet_addr</a> *<a class=\"id\" href=\"#s_addr\">s_addr</a>, <a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#s_port\">s_port</a>,", 
" const union <a class=\"id\" href=\"#nf_inet_addr\">nf_inet_addr</a> *<a class=\"id\" href=\"#d_addr\">d_addr</a>, <a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#d_port\">d_port</a>);", 
"", 
"struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> * <a class=\"id\" href=\"#ip_vs_conn_in_get_proto\">ip_vs_conn_in_get_proto</a>(int <a class=\"id\" href=\"#af\">af</a>, const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#ip_vs_protocol\">ip_vs_protocol</a> *<a class=\"id\" href=\"#pp\">pp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    const struct <a class=\"id\" href=\"#ip_vs_iphdr\">ip_vs_iphdr</a> *<a class=\"id\" href=\"#iph\">iph</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned int <a class=\"id\" href=\"#proto_off\">proto_off</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#inverse\">inverse</a>);", 
"", 
"extern struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *<a class=\"id\" href=\"#ip_vs_conn_out_get\">ip_vs_conn_out_get</a>", 
"(int <a class=\"id\" href=\"#af\">af</a>, int <a class=\"id\" href=\"#protocol\">protocol</a>, const union <a class=\"id\" href=\"#nf_inet_addr\">nf_inet_addr</a> *<a class=\"id\" href=\"#s_addr\">s_addr</a>, <a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#s_port\">s_port</a>,", 
" const union <a class=\"id\" href=\"#nf_inet_addr\">nf_inet_addr</a> *<a class=\"id\" href=\"#d_addr\">d_addr</a>, <a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#d_port\">d_port</a>);", 
"", 
"struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> * <a class=\"id\" href=\"#ip_vs_conn_out_get_proto\">ip_vs_conn_out_get_proto</a>(int <a class=\"id\" href=\"#af\">af</a>, const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#ip_vs_protocol\">ip_vs_protocol</a> *<a class=\"id\" href=\"#pp\">pp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     const struct <a class=\"id\" href=\"#ip_vs_iphdr\">ip_vs_iphdr</a> *<a class=\"id\" href=\"#iph\">iph</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned int <a class=\"id\" href=\"#proto_off\">proto_off</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#inverse\">inverse</a>);", 
"", 
"<span class=\"comment\">/* put back the conn without restarting its timer */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__ip_vs_conn_put\">__ip_vs_conn_put</a>(struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *<a class=\"id\" href=\"#cp\">cp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>);", 
"}", 
"extern void <a class=\"id\" href=\"#ip_vs_conn_put\">ip_vs_conn_put</a>(struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *<a class=\"id\" href=\"#cp\">cp</a>);", 
"extern void <a class=\"id\" href=\"#ip_vs_conn_fill_cport\">ip_vs_conn_fill_cport</a>(struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *<a class=\"id\" href=\"#cp\">cp</a>, <a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#cport\">cport</a>);", 
"", 
"extern struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *", 
"<a class=\"id\" href=\"#ip_vs_conn_new\">ip_vs_conn_new</a>(int <a class=\"id\" href=\"#af\">af</a>, int <a class=\"id\" href=\"#proto\">proto</a>, const union <a class=\"id\" href=\"#nf_inet_addr\">nf_inet_addr</a> *<a class=\"id\" href=\"#caddr\">caddr</a>, <a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#cport\">cport</a>,", 
"<span class=\"ts\"/>       const union <a class=\"id\" href=\"#nf_inet_addr\">nf_inet_addr</a> *<a class=\"id\" href=\"#vaddr\">vaddr</a>, <a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#vport\">vport</a>,", 
"<span class=\"ts\"/>       const union <a class=\"id\" href=\"#nf_inet_addr\">nf_inet_addr</a> *<a class=\"id\" href=\"#daddr\">daddr</a>, <a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#dport\">dport</a>, unsigned <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/>       struct <a class=\"id\" href=\"#ip_vs_dest\">ip_vs_dest</a> *<a class=\"id\" href=\"#dest\">dest</a>);", 
"extern void <a class=\"id\" href=\"#ip_vs_conn_expire_now\">ip_vs_conn_expire_now</a>(struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *<a class=\"id\" href=\"#cp\">cp</a>);", 
"", 
"extern const char * <a class=\"id\" href=\"#ip_vs_state_name\">ip_vs_state_name</a>(<a class=\"id\" href=\"#__u16\">__u16</a> <a class=\"id\" href=\"#proto\">proto</a>, int <a class=\"id\" href=\"#state\">state</a>);", 
"", 
"extern void <a class=\"id\" href=\"#ip_vs_tcp_conn_listen\">ip_vs_tcp_conn_listen</a>(struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *<a class=\"id\" href=\"#cp\">cp</a>);", 
"extern int <a class=\"id\" href=\"#ip_vs_check_template\">ip_vs_check_template</a>(struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *<a class=\"id\" href=\"#ct\">ct</a>);", 
"extern void <a class=\"id\" href=\"#ip_vs_random_dropentry\">ip_vs_random_dropentry</a>(void);", 
"extern int <a class=\"id\" href=\"#ip_vs_conn_init\">ip_vs_conn_init</a>(void);", 
"extern void <a class=\"id\" href=\"#ip_vs_conn_cleanup\">ip_vs_conn_cleanup</a>(void);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ip_vs_control_del\">ip_vs_control_del</a>(struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *<a class=\"id\" href=\"#cp\">cp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *<a class=\"id\" href=\"#ctl_cp\">ctl_cp</a> = <a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#control\">control</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ctl_cp\">ctl_cp</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#IP_VS_ERR_BUF\">IP_VS_ERR_BUF</a>(\"request control DEL for uncontrolled: \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"%s:%d to %s:%d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#IP_VS_DBG_ADDR\">IP_VS_DBG_ADDR</a>(<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#af\">af</a>, &amp;<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#caddr\">caddr</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#cport\">cport</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#IP_VS_DBG_ADDR\">IP_VS_DBG_ADDR</a>(<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#af\">af</a>, &amp;<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#vaddr\">vaddr</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#vport\">vport</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP_VS_DBG_BUF\">IP_VS_DBG_BUF</a>(7, \"DELeting control for: \"", 
"<span class=\"ts\"/><span class=\"ts\"/>      \"cp.dst=%s:%d ctl_cp.dst=%s:%d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#IP_VS_DBG_ADDR\">IP_VS_DBG_ADDR</a>(<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#af\">af</a>, &amp;<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#caddr\">caddr</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#cport\">cport</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#IP_VS_DBG_ADDR\">IP_VS_DBG_ADDR</a>(<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#af\">af</a>, &amp;<a class=\"id\" href=\"#ctl_cp\">ctl_cp</a>-><a class=\"id\" href=\"#caddr\">caddr</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#ctl_cp\">ctl_cp</a>-><a class=\"id\" href=\"#cport\">cport</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#control\">control</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#ctl_cp\">ctl_cp</a>-><a class=\"id\" href=\"#n_control\">n_control</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#IP_VS_ERR_BUF\">IP_VS_ERR_BUF</a>(\"BUG control DEL with n=0 : \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"%s:%d to %s:%d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#IP_VS_DBG_ADDR\">IP_VS_DBG_ADDR</a>(<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#af\">af</a>, &amp;<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#caddr\">caddr</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#cport\">cport</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#IP_VS_DBG_ADDR\">IP_VS_DBG_ADDR</a>(<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#af\">af</a>, &amp;<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#vaddr\">vaddr</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#vport\">vport</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#ctl_cp\">ctl_cp</a>-><a class=\"id\" href=\"#n_control\">n_control</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#ip_vs_control_add\">ip_vs_control_add</a>(struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *<a class=\"id\" href=\"#cp\">cp</a>, struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *<a class=\"id\" href=\"#ctl_cp\">ctl_cp</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#control\">control</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#IP_VS_ERR_BUF\">IP_VS_ERR_BUF</a>(\"request control ADD for already controlled: \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"%s:%d to %s:%d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#IP_VS_DBG_ADDR\">IP_VS_DBG_ADDR</a>(<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#af\">af</a>, &amp;<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#caddr\">caddr</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#cport\">cport</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#IP_VS_DBG_ADDR\">IP_VS_DBG_ADDR</a>(<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#af\">af</a>, &amp;<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#vaddr\">vaddr</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#vport\">vport</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ip_vs_control_del\">ip_vs_control_del</a>(<a class=\"id\" href=\"#cp\">cp</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#IP_VS_DBG_BUF\">IP_VS_DBG_BUF</a>(7, \"ADDing control for: \"", 
"<span class=\"ts\"/><span class=\"ts\"/>      \"cp.dst=%s:%d ctl_cp.dst=%s:%d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#IP_VS_DBG_ADDR\">IP_VS_DBG_ADDR</a>(<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#af\">af</a>, &amp;<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#caddr\">caddr</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#cport\">cport</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#IP_VS_DBG_ADDR\">IP_VS_DBG_ADDR</a>(<a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#af\">af</a>, &amp;<a class=\"id\" href=\"#ctl_cp\">ctl_cp</a>-><a class=\"id\" href=\"#caddr\">caddr</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#ntohs\">ntohs</a>(<a class=\"id\" href=\"#ctl_cp\">ctl_cp</a>-><a class=\"id\" href=\"#cport\">cport</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cp\">cp</a>-><a class=\"id\" href=\"#control\">control</a> = <a class=\"id\" href=\"#ctl_cp\">ctl_cp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#ctl_cp\">ctl_cp</a>-><a class=\"id\" href=\"#n_control\">n_control</a>);", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *      IPVS application functions</span>", 
"<span class=\"comment\"> *      (from ip_vs_app.c)</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IP_VS_APP_MAX_PORTS\">IP_VS_APP_MAX_PORTS</a>  8", 
"extern int <a class=\"id\" href=\"#register_ip_vs_app\">register_ip_vs_app</a>(struct <a class=\"id\" href=\"#ip_vs_app\">ip_vs_app</a> *<a class=\"id\" href=\"#app\">app</a>);", 
"extern void <a class=\"id\" href=\"#unregister_ip_vs_app\">unregister_ip_vs_app</a>(struct <a class=\"id\" href=\"#ip_vs_app\">ip_vs_app</a> *<a class=\"id\" href=\"#app\">app</a>);", 
"extern int <a class=\"id\" href=\"#ip_vs_bind_app\">ip_vs_bind_app</a>(struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *<a class=\"id\" href=\"#cp\">cp</a>, struct <a class=\"id\" href=\"#ip_vs_protocol\">ip_vs_protocol</a> *<a class=\"id\" href=\"#pp\">pp</a>);", 
"extern void <a class=\"id\" href=\"#ip_vs_unbind_app\">ip_vs_unbind_app</a>(struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *<a class=\"id\" href=\"#cp\">cp</a>);", 
"extern int", 
"<a class=\"id\" href=\"#register_ip_vs_app_inc\">register_ip_vs_app_inc</a>(struct <a class=\"id\" href=\"#ip_vs_app\">ip_vs_app</a> *<a class=\"id\" href=\"#app\">app</a>, <a class=\"id\" href=\"#__u16\">__u16</a> <a class=\"id\" href=\"#proto\">proto</a>, <a class=\"id\" href=\"#__u16\">__u16</a> <a class=\"id\" href=\"#port\">port</a>);", 
"extern int <a class=\"id\" href=\"#ip_vs_app_inc_get\">ip_vs_app_inc_get</a>(struct <a class=\"id\" href=\"#ip_vs_app\">ip_vs_app</a> *<a class=\"id\" href=\"#inc\">inc</a>);", 
"extern void <a class=\"id\" href=\"#ip_vs_app_inc_put\">ip_vs_app_inc_put</a>(struct <a class=\"id\" href=\"#ip_vs_app\">ip_vs_app</a> *<a class=\"id\" href=\"#inc\">inc</a>);", 
"", 
"extern int <a class=\"id\" href=\"#ip_vs_app_pkt_out\">ip_vs_app_pkt_out</a>(struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"extern int <a class=\"id\" href=\"#ip_vs_app_pkt_in\">ip_vs_app_pkt_in</a>(struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"extern int <a class=\"id\" href=\"#ip_vs_app_init\">ip_vs_app_init</a>(void);", 
"extern void <a class=\"id\" href=\"#ip_vs_app_cleanup\">ip_vs_app_cleanup</a>(void);", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>IPVS protocol functions (from ip_vs_proto.c)</span>", 
"<span class=\"comment\"> */</span>", 
"extern int <a class=\"id\" href=\"#ip_vs_protocol_init\">ip_vs_protocol_init</a>(void);", 
"extern void <a class=\"id\" href=\"#ip_vs_protocol_cleanup\">ip_vs_protocol_cleanup</a>(void);", 
"extern void <a class=\"id\" href=\"#ip_vs_protocol_timeout_change\">ip_vs_protocol_timeout_change</a>(int <a class=\"id\" href=\"#flags\">flags</a>);", 
"extern int *<a class=\"id\" href=\"#ip_vs_create_timeout_table\">ip_vs_create_timeout_table</a>(int *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#size\">size</a>);", 
"extern int", 
"<a class=\"id\" href=\"#ip_vs_set_state_timeout\">ip_vs_set_state_timeout</a>(int *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#num\">num</a>, const char *const *<a class=\"id\" href=\"#names\">names</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a>, int <a class=\"id\" href=\"#to\">to</a>);", 
"extern void", 
"<a class=\"id\" href=\"#ip_vs_tcpudp_debug_packet\">ip_vs_tcpudp_debug_packet</a>(struct <a class=\"id\" href=\"#ip_vs_protocol\">ip_vs_protocol</a> *<a class=\"id\" href=\"#pp\">pp</a>, const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#offset\">offset</a>, const char *<a class=\"id\" href=\"#msg\">msg</a>);", 
"", 
"extern struct <a class=\"id\" href=\"#ip_vs_protocol\">ip_vs_protocol</a> <a class=\"id\" href=\"#ip_vs_protocol_tcp\">ip_vs_protocol_tcp</a>;", 
"extern struct <a class=\"id\" href=\"#ip_vs_protocol\">ip_vs_protocol</a> <a class=\"id\" href=\"#ip_vs_protocol_udp\">ip_vs_protocol_udp</a>;", 
"extern struct <a class=\"id\" href=\"#ip_vs_protocol\">ip_vs_protocol</a> <a class=\"id\" href=\"#ip_vs_protocol_icmp\">ip_vs_protocol_icmp</a>;", 
"extern struct <a class=\"id\" href=\"#ip_vs_protocol\">ip_vs_protocol</a> <a class=\"id\" href=\"#ip_vs_protocol_esp\">ip_vs_protocol_esp</a>;", 
"extern struct <a class=\"id\" href=\"#ip_vs_protocol\">ip_vs_protocol</a> <a class=\"id\" href=\"#ip_vs_protocol_ah\">ip_vs_protocol_ah</a>;", 
"extern struct <a class=\"id\" href=\"#ip_vs_protocol\">ip_vs_protocol</a> <a class=\"id\" href=\"#ip_vs_protocol_sctp\">ip_vs_protocol_sctp</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *      Registering/unregistering scheduler functions</span>", 
"<span class=\"comment\"> *      (from ip_vs_sched.c)</span>", 
"<span class=\"comment\"> */</span>", 
"extern int <a class=\"id\" href=\"#register_ip_vs_scheduler\">register_ip_vs_scheduler</a>(struct <a class=\"id\" href=\"#ip_vs_scheduler\">ip_vs_scheduler</a> *<a class=\"id\" href=\"#scheduler\">scheduler</a>);", 
"extern int <a class=\"id\" href=\"#unregister_ip_vs_scheduler\">unregister_ip_vs_scheduler</a>(struct <a class=\"id\" href=\"#ip_vs_scheduler\">ip_vs_scheduler</a> *<a class=\"id\" href=\"#scheduler\">scheduler</a>);", 
"extern int <a class=\"id\" href=\"#ip_vs_bind_scheduler\">ip_vs_bind_scheduler</a>(struct <a class=\"id\" href=\"#ip_vs_service\">ip_vs_service</a> *<a class=\"id\" href=\"#svc\">svc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ip_vs_scheduler\">ip_vs_scheduler</a> *<a class=\"id\" href=\"#scheduler\">scheduler</a>);", 
"extern int <a class=\"id\" href=\"#ip_vs_unbind_scheduler\">ip_vs_unbind_scheduler</a>(struct <a class=\"id\" href=\"#ip_vs_service\">ip_vs_service</a> *<a class=\"id\" href=\"#svc\">svc</a>);", 
"extern struct <a class=\"id\" href=\"#ip_vs_scheduler\">ip_vs_scheduler</a> *<a class=\"id\" href=\"#ip_vs_scheduler_get\">ip_vs_scheduler_get</a>(const char *<a class=\"id\" href=\"#sched_name\">sched_name</a>);", 
"extern void <a class=\"id\" href=\"#ip_vs_scheduler_put\">ip_vs_scheduler_put</a>(struct <a class=\"id\" href=\"#ip_vs_scheduler\">ip_vs_scheduler</a> *<a class=\"id\" href=\"#scheduler\">scheduler</a>);", 
"extern struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *", 
"<a class=\"id\" href=\"#ip_vs_schedule\">ip_vs_schedule</a>(struct <a class=\"id\" href=\"#ip_vs_service\">ip_vs_service</a> *<a class=\"id\" href=\"#svc\">svc</a>, const struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>);", 
"extern int <a class=\"id\" href=\"#ip_vs_leave\">ip_vs_leave</a>(struct <a class=\"id\" href=\"#ip_vs_service\">ip_vs_service</a> *<a class=\"id\" href=\"#svc\">svc</a>, struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ip_vs_protocol\">ip_vs_protocol</a> *<a class=\"id\" href=\"#pp\">pp</a>);", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *      IPVS control data and functions (from ip_vs_ctl.c)</span>", 
"<span class=\"comment\"> */</span>", 
"extern int <a class=\"id\" href=\"#sysctl_ip_vs_cache_bypass\">sysctl_ip_vs_cache_bypass</a>;", 
"extern int <a class=\"id\" href=\"#sysctl_ip_vs_expire_nodest_conn\">sysctl_ip_vs_expire_nodest_conn</a>;", 
"extern int <a class=\"id\" href=\"#sysctl_ip_vs_expire_quiescent_template\">sysctl_ip_vs_expire_quiescent_template</a>;", 
"extern int <a class=\"id\" href=\"#sysctl_ip_vs_sync_threshold\">sysctl_ip_vs_sync_threshold</a>[2];", 
"extern int <a class=\"id\" href=\"#sysctl_ip_vs_nat_icmp_send\">sysctl_ip_vs_nat_icmp_send</a>;", 
"extern struct <a class=\"id\" href=\"#ip_vs_stats\">ip_vs_stats</a> <a class=\"id\" href=\"#ip_vs_stats\">ip_vs_stats</a>;", 
"extern const struct <a class=\"id\" href=\"#ctl_path\">ctl_path</a> <a class=\"id\" href=\"#net_vs_ctl_path\">net_vs_ctl_path</a>[];", 
"", 
"extern struct <a class=\"id\" href=\"#ip_vs_service\">ip_vs_service</a> *", 
"<a class=\"id\" href=\"#ip_vs_service_get\">ip_vs_service_get</a>(int <a class=\"id\" href=\"#af\">af</a>, <a class=\"id\" href=\"#__u32\">__u32</a> <a class=\"id\" href=\"#fwmark\">fwmark</a>, <a class=\"id\" href=\"#__u16\">__u16</a> <a class=\"id\" href=\"#protocol\">protocol</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  const union <a class=\"id\" href=\"#nf_inet_addr\">nf_inet_addr</a> *<a class=\"id\" href=\"#vaddr\">vaddr</a>, <a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#vport\">vport</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ip_vs_service_put\">ip_vs_service_put</a>(struct <a class=\"id\" href=\"#ip_vs_service\">ip_vs_service</a> *<a class=\"id\" href=\"#svc\">svc</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#svc\">svc</a>-><a class=\"id\" href=\"#usecnt\">usecnt</a>);", 
"}", 
"", 
"extern struct <a class=\"id\" href=\"#ip_vs_dest\">ip_vs_dest</a> *", 
"<a class=\"id\" href=\"#ip_vs_lookup_real_service\">ip_vs_lookup_real_service</a>(int <a class=\"id\" href=\"#af\">af</a>, <a class=\"id\" href=\"#__u16\">__u16</a> <a class=\"id\" href=\"#protocol\">protocol</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  const union <a class=\"id\" href=\"#nf_inet_addr\">nf_inet_addr</a> *<a class=\"id\" href=\"#daddr\">daddr</a>, <a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#dport\">dport</a>);", 
"", 
"extern int <a class=\"id\" href=\"#ip_vs_use_count_inc\">ip_vs_use_count_inc</a>(void);", 
"extern void <a class=\"id\" href=\"#ip_vs_use_count_dec\">ip_vs_use_count_dec</a>(void);", 
"extern int <a class=\"id\" href=\"#ip_vs_control_init\">ip_vs_control_init</a>(void);", 
"extern void <a class=\"id\" href=\"#ip_vs_control_cleanup\">ip_vs_control_cleanup</a>(void);", 
"extern struct <a class=\"id\" href=\"#ip_vs_dest\">ip_vs_dest</a> *", 
"<a class=\"id\" href=\"#ip_vs_find_dest\">ip_vs_find_dest</a>(int <a class=\"id\" href=\"#af\">af</a>, const union <a class=\"id\" href=\"#nf_inet_addr\">nf_inet_addr</a> *<a class=\"id\" href=\"#daddr\">daddr</a>, <a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#dport\">dport</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>const union <a class=\"id\" href=\"#nf_inet_addr\">nf_inet_addr</a> *<a class=\"id\" href=\"#vaddr\">vaddr</a>, <a class=\"id\" href=\"#__be16\">__be16</a> <a class=\"id\" href=\"#vport\">vport</a>, <a class=\"id\" href=\"#__u16\">__u16</a> <a class=\"id\" href=\"#protocol\">protocol</a>);", 
"extern struct <a class=\"id\" href=\"#ip_vs_dest\">ip_vs_dest</a> *<a class=\"id\" href=\"#ip_vs_try_bind_dest\">ip_vs_try_bind_dest</a>(struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *<a class=\"id\" href=\"#cp\">cp</a>);", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *      IPVS sync daemon data and function prototypes</span>", 
"<span class=\"comment\"> *      (from ip_vs_sync.c)</span>", 
"<span class=\"comment\"> */</span>", 
"extern volatile int <a class=\"id\" href=\"#ip_vs_sync_state\">ip_vs_sync_state</a>;", 
"extern volatile int <a class=\"id\" href=\"#ip_vs_master_syncid\">ip_vs_master_syncid</a>;", 
"extern volatile int <a class=\"id\" href=\"#ip_vs_backup_syncid\">ip_vs_backup_syncid</a>;", 
"extern char <a class=\"id\" href=\"#ip_vs_master_mcast_ifn\">ip_vs_master_mcast_ifn</a>[<a class=\"id\" href=\"#IP_VS_IFNAME_MAXLEN\">IP_VS_IFNAME_MAXLEN</a>];", 
"extern char <a class=\"id\" href=\"#ip_vs_backup_mcast_ifn\">ip_vs_backup_mcast_ifn</a>[<a class=\"id\" href=\"#IP_VS_IFNAME_MAXLEN\">IP_VS_IFNAME_MAXLEN</a>];", 
"extern int <a class=\"id\" href=\"#start_sync_thread\">start_sync_thread</a>(int <a class=\"id\" href=\"#state\">state</a>, char *<a class=\"id\" href=\"#mcast_ifn\">mcast_ifn</a>, <a class=\"id\" href=\"#__u8\">__u8</a> <a class=\"id\" href=\"#syncid\">syncid</a>);", 
"extern int <a class=\"id\" href=\"#stop_sync_thread\">stop_sync_thread</a>(int <a class=\"id\" href=\"#state\">state</a>);", 
"extern void <a class=\"id\" href=\"#ip_vs_sync_conn\">ip_vs_sync_conn</a>(struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *<a class=\"id\" href=\"#cp\">cp</a>);", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *      IPVS rate estimator prototypes (from ip_vs_est.c)</span>", 
"<span class=\"comment\"> */</span>", 
"extern int <a class=\"id\" href=\"#ip_vs_estimator_init\">ip_vs_estimator_init</a>(void);", 
"extern void <a class=\"id\" href=\"#ip_vs_estimator_cleanup\">ip_vs_estimator_cleanup</a>(void);", 
"extern void <a class=\"id\" href=\"#ip_vs_new_estimator\">ip_vs_new_estimator</a>(struct <a class=\"id\" href=\"#ip_vs_stats\">ip_vs_stats</a> *<a class=\"id\" href=\"#stats\">stats</a>);", 
"extern void <a class=\"id\" href=\"#ip_vs_kill_estimator\">ip_vs_kill_estimator</a>(struct <a class=\"id\" href=\"#ip_vs_stats\">ip_vs_stats</a> *<a class=\"id\" href=\"#stats\">stats</a>);", 
"extern void <a class=\"id\" href=\"#ip_vs_zero_estimator\">ip_vs_zero_estimator</a>(struct <a class=\"id\" href=\"#ip_vs_stats\">ip_vs_stats</a> *<a class=\"id\" href=\"#stats\">stats</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Various IPVS packet transmitters (from ip_vs_xmit.c)</span>", 
"<span class=\"comment\"> */</span>", 
"extern int <a class=\"id\" href=\"#ip_vs_null_xmit\">ip_vs_null_xmit</a>", 
"(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *<a class=\"id\" href=\"#cp\">cp</a>, struct <a class=\"id\" href=\"#ip_vs_protocol\">ip_vs_protocol</a> *<a class=\"id\" href=\"#pp\">pp</a>);", 
"extern int <a class=\"id\" href=\"#ip_vs_bypass_xmit\">ip_vs_bypass_xmit</a>", 
"(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *<a class=\"id\" href=\"#cp\">cp</a>, struct <a class=\"id\" href=\"#ip_vs_protocol\">ip_vs_protocol</a> *<a class=\"id\" href=\"#pp\">pp</a>);", 
"extern int <a class=\"id\" href=\"#ip_vs_nat_xmit\">ip_vs_nat_xmit</a>", 
"(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *<a class=\"id\" href=\"#cp\">cp</a>, struct <a class=\"id\" href=\"#ip_vs_protocol\">ip_vs_protocol</a> *<a class=\"id\" href=\"#pp\">pp</a>);", 
"extern int <a class=\"id\" href=\"#ip_vs_tunnel_xmit\">ip_vs_tunnel_xmit</a>", 
"(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *<a class=\"id\" href=\"#cp\">cp</a>, struct <a class=\"id\" href=\"#ip_vs_protocol\">ip_vs_protocol</a> *<a class=\"id\" href=\"#pp\">pp</a>);", 
"extern int <a class=\"id\" href=\"#ip_vs_dr_xmit\">ip_vs_dr_xmit</a>", 
"(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *<a class=\"id\" href=\"#cp\">cp</a>, struct <a class=\"id\" href=\"#ip_vs_protocol\">ip_vs_protocol</a> *<a class=\"id\" href=\"#pp\">pp</a>);", 
"extern int <a class=\"id\" href=\"#ip_vs_icmp_xmit\">ip_vs_icmp_xmit</a>", 
"(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *<a class=\"id\" href=\"#cp\">cp</a>, struct <a class=\"id\" href=\"#ip_vs_protocol\">ip_vs_protocol</a> *<a class=\"id\" href=\"#pp\">pp</a>, int <a class=\"id\" href=\"#offset\">offset</a>);", 
"extern void <a class=\"id\" href=\"#ip_vs_dst_reset\">ip_vs_dst_reset</a>(struct <a class=\"id\" href=\"#ip_vs_dest\">ip_vs_dest</a> *<a class=\"id\" href=\"#dest\">dest</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_IP_VS_IPV6\">CONFIG_IP_VS_IPV6</a>", 
"extern int <a class=\"id\" href=\"#ip_vs_bypass_xmit_v6\">ip_vs_bypass_xmit_v6</a>", 
"(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *<a class=\"id\" href=\"#cp\">cp</a>, struct <a class=\"id\" href=\"#ip_vs_protocol\">ip_vs_protocol</a> *<a class=\"id\" href=\"#pp\">pp</a>);", 
"extern int <a class=\"id\" href=\"#ip_vs_nat_xmit_v6\">ip_vs_nat_xmit_v6</a>", 
"(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *<a class=\"id\" href=\"#cp\">cp</a>, struct <a class=\"id\" href=\"#ip_vs_protocol\">ip_vs_protocol</a> *<a class=\"id\" href=\"#pp\">pp</a>);", 
"extern int <a class=\"id\" href=\"#ip_vs_tunnel_xmit_v6\">ip_vs_tunnel_xmit_v6</a>", 
"(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *<a class=\"id\" href=\"#cp\">cp</a>, struct <a class=\"id\" href=\"#ip_vs_protocol\">ip_vs_protocol</a> *<a class=\"id\" href=\"#pp\">pp</a>);", 
"extern int <a class=\"id\" href=\"#ip_vs_dr_xmit_v6\">ip_vs_dr_xmit_v6</a>", 
"(struct <a class=\"id\" href=\"#sk_buff\">sk_buff</a> *<a class=\"id\" href=\"#skb\">skb</a>, struct <a class=\"id\" href=\"#ip_vs_conn\">ip_vs_conn</a> *<a class=\"id\" href=\"#cp\">cp</a>, struct <a class=\"id\" href=\"#ip_vs_protocol\">ip_vs_protocol</a> *<a class=\"id\" href=\"#pp\">pp</a>);", 
];
xr_frag_insert('l/20/559adbe6173a884e4b8ae12b3ae91a27fb23a5.xr', __xr_tmp);
