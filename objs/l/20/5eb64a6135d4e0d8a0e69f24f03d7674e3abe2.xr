var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Dynamic DMA mapping support.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This implementation is a fallback for platforms that do not support</span>", 
"<span class=\"comment\"> * I/O TLBs (aka DMA address translation hardware).</span>", 
"<span class=\"comment\"> * Copyright (C) 2000 Asit Mallick &lt;Asit.K.Mallick@intel.com&gt;</span>", 
"<span class=\"comment\"> * Copyright (C) 2000 Goutham Rao &lt;goutham.rao@intel.com&gt;</span>", 
"<span class=\"comment\"> * Copyright (C) 2000, 2003 Hewlett-Packard Co</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>David Mosberger-Tang &lt;davidm@hpl.hp.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 03/05/07 davidm<span class=\"ts\"/>Switch from PCI-DMA to generic device DMA API.</span>", 
"<span class=\"comment\"> * 00/12/13 davidm<span class=\"ts\"/>Rename to swiotlb.c and add mark_clean() to avoid</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unnecessary i-cache flushing.</span>", 
"<span class=\"comment\"> * 04/07/.. ak<span class=\"ts\"/><span class=\"ts\"/>Better overflow handling. Assorted fixes.</span>", 
"<span class=\"comment\"> * 05/09/10 linville<span class=\"ts\"/>Add support for syncing ranges, support syncing for</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>DMA_BIDIRECTIONAL mappings, miscellaneous cleanup.</span>", 
"<span class=\"comment\"> * 08/12/11 beckyb<span class=\"ts\"/>Add highmem support</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cache\">cache</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#dma\">dma</a>-<a class=\"id\" href=\"#mapping\">mapping</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#swiotlb\">swiotlb</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pfn\">pfn</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ctype\">ctype</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#highmem\">highmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#gfp\">gfp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#io\">io</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#dma\">dma</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#scatterlist\">scatterlist</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bootmem\">bootmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#iommu\">iommu</a>-<a class=\"id\" href=\"#helper\">helper</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#OFFSET\">OFFSET</a>(<a class=\"id\" href=\"#val\">val</a>,<a class=\"id\" href=\"#align\">align</a>) ((unsigned long)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>                   ( (<a class=\"id\" href=\"#val\">val</a>) &amp; ( (<a class=\"id\" href=\"#align\">align</a>) - 1)))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SLABS_PER_PAGE\">SLABS_PER_PAGE</a> (1 << (<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a> - <a class=\"id\" href=\"#IO_TLB_SHIFT\">IO_TLB_SHIFT</a>))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Minimum IO TLB size to bother booting with.  Systems with mainly</span>", 
"<span class=\"comment\"> * 64bit capable cards will only lightly use the swiotlb.  If we can't</span>", 
"<span class=\"comment\"> * allocate a contiguous 1MB, we're probably in trouble anyway.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#IO_TLB_MIN_SLABS\">IO_TLB_MIN_SLABS</a> ((1<<20) >> <a class=\"id\" href=\"#IO_TLB_SHIFT\">IO_TLB_SHIFT</a>)", 
"", 
"int <a class=\"id\" href=\"#swiotlb_force\">swiotlb_force</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Used to do a quick range check in swiotlb_tbl_unmap_single and</span>", 
"<span class=\"comment\"> * swiotlb_tbl_sync_single_*, to see if the memory was in fact allocated by this</span>", 
"<span class=\"comment\"> * API.</span>", 
"<span class=\"comment\"> */</span>", 
"static char *<a class=\"id\" href=\"#io_tlb_start\">io_tlb_start</a>, *<a class=\"id\" href=\"#io_tlb_end\">io_tlb_end</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The number of IO TLB blocks (in groups of 64) betweeen io_tlb_start and</span>", 
"<span class=\"comment\"> * io_tlb_end.  This is command line adjustable via setup_io_tlb_npages.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned long <a class=\"id\" href=\"#io_tlb_nslabs\">io_tlb_nslabs</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * When the IOMMU overflows we return a fallback buffer. This sets the size.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned long <a class=\"id\" href=\"#io_tlb_overflow\">io_tlb_overflow</a> = 32*1024;", 
"", 
"void *<a class=\"id\" href=\"#io_tlb_overflow_buffer\">io_tlb_overflow_buffer</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is a free list describing the number of free entries available from</span>", 
"<span class=\"comment\"> * each index</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned int *<a class=\"id\" href=\"#io_tlb_list\">io_tlb_list</a>;", 
"static unsigned int <a class=\"id\" href=\"#io_tlb_index\">io_tlb_index</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We need to save away the original address corresponding to a mapped entry</span>", 
"<span class=\"comment\"> * for the sync operations.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> *<a class=\"id\" href=\"#io_tlb_orig_addr\">io_tlb_orig_addr</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Protect the above data structures in the map and unmap calls</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#io_tlb_lock\">io_tlb_lock</a>);", 
"", 
"static int <a class=\"id\" href=\"#late_alloc\">late_alloc</a>;", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a>", 
"<a class=\"id\" href=\"#setup_io_tlb_npages\">setup_io_tlb_npages</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#isdigit\">isdigit</a>(*<a class=\"id\" href=\"#str\">str</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#io_tlb_nslabs\">io_tlb_nslabs</a> = <a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#str\">str</a>, &amp;<a class=\"id\" href=\"#str\">str</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* avoid tail segment of size &lt; IO_TLB_SEGSIZE */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#io_tlb_nslabs\">io_tlb_nslabs</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#io_tlb_nslabs\">io_tlb_nslabs</a>, <a class=\"id\" href=\"#IO_TLB_SEGSIZE\">IO_TLB_SEGSIZE</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#str\">str</a> == ',')", 
"<span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#str\">str</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#str\">str</a>, \"force\"))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swiotlb_force\">swiotlb_force</a> = 1;", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"swiotlb=\", <a class=\"id\" href=\"#setup_io_tlb_npages\">setup_io_tlb_npages</a>);", 
"<span class=\"comment\">/* make io_tlb_overflow tunable too? */</span>", 
"", 
"<span class=\"comment\">/* Note that this doesn't work with highmem page */</span>", 
"static <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#swiotlb_virt_to_bus\">swiotlb_virt_to_bus</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#hwdev\">hwdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      volatile void *<a class=\"id\" href=\"#address\">address</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#phys_to_dma\">phys_to_dma</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#virt_to_phys\">virt_to_phys</a>(<a class=\"id\" href=\"#address\">address</a>));", 
"}", 
"", 
"void <a class=\"id\" href=\"#swiotlb_print_info\">swiotlb_print_info</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#bytes\">bytes</a> = <a class=\"id\" href=\"#io_tlb_nslabs\">io_tlb_nslabs</a> << <a class=\"id\" href=\"#IO_TLB_SHIFT\">IO_TLB_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#pstart\">pstart</a>, <a class=\"id\" href=\"#pend\">pend</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pstart\">pstart</a> = <a class=\"id\" href=\"#virt_to_phys\">virt_to_phys</a>(<a class=\"id\" href=\"#io_tlb_start\">io_tlb_start</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pend\">pend</a> = <a class=\"id\" href=\"#virt_to_phys\">virt_to_phys</a>(<a class=\"id\" href=\"#io_tlb_end\">io_tlb_end</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Placing %luMB software IO TLB between %p - %p\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#bytes\">bytes</a> >> 20, <a class=\"id\" href=\"#io_tlb_start\">io_tlb_start</a>, <a class=\"id\" href=\"#io_tlb_end\">io_tlb_end</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"software IO TLB at phys %#llx - %#llx\\n\",", 
"<span class=\"ts\"/>       (unsigned long long)<a class=\"id\" href=\"#pstart\">pstart</a>,", 
"<span class=\"ts\"/>       (unsigned long long)<a class=\"id\" href=\"#pend\">pend</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#swiotlb_init_with_tbl\">swiotlb_init_with_tbl</a>(char *<a class=\"id\" href=\"#tlb\">tlb</a>, unsigned long <a class=\"id\" href=\"#nslabs\">nslabs</a>, int <a class=\"id\" href=\"#verbose\">verbose</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#bytes\">bytes</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bytes\">bytes</a> = <a class=\"id\" href=\"#nslabs\">nslabs</a> << <a class=\"id\" href=\"#IO_TLB_SHIFT\">IO_TLB_SHIFT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#io_tlb_nslabs\">io_tlb_nslabs</a> = <a class=\"id\" href=\"#nslabs\">nslabs</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#io_tlb_start\">io_tlb_start</a> = <a class=\"id\" href=\"#tlb\">tlb</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#io_tlb_end\">io_tlb_end</a> = <a class=\"id\" href=\"#io_tlb_start\">io_tlb_start</a> + <a class=\"id\" href=\"#bytes\">bytes</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Allocate and initialize the free list array.  This array is used</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to find contiguous free memory regions of size up to IO_TLB_SEGSIZE</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * between io_tlb_start and io_tlb_end.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#io_tlb_list\">io_tlb_list</a> = <a class=\"id\" href=\"#alloc_bootmem\">alloc_bootmem</a>(<a class=\"id\" href=\"#io_tlb_nslabs\">io_tlb_nslabs</a> * sizeof(int));", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#io_tlb_nslabs\">io_tlb_nslabs</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
" <span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#io_tlb_list\">io_tlb_list</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#IO_TLB_SEGSIZE\">IO_TLB_SEGSIZE</a> - <a class=\"id\" href=\"#OFFSET\">OFFSET</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#IO_TLB_SEGSIZE\">IO_TLB_SEGSIZE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#io_tlb_index\">io_tlb_index</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#io_tlb_orig_addr\">io_tlb_orig_addr</a> = <a class=\"id\" href=\"#alloc_bootmem\">alloc_bootmem</a>(<a class=\"id\" href=\"#io_tlb_nslabs\">io_tlb_nslabs</a> * sizeof(<a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a>));", 
];
xr_frag_insert('l/20/5eb64a6135d4e0d8a0e69f24f03d7674e3abe2.xr', __xr_tmp);
