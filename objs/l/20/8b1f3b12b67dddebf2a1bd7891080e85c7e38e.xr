var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * include/linux/writeback.h</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#WRITEBACK_H\">WRITEBACK_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#WRITEBACK_H\">WRITEBACK_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a>;", 
"", 
"extern <a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#inode_lock\">inode_lock</a>;", 
"extern struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#inode_in_use\">inode_in_use</a>;", 
"extern struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#inode_unused\">inode_unused</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * fs/fs-writeback.c</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#writeback_sync_modes\">writeback_sync_modes</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WB_SYNC_NONE\">WB_SYNC_NONE</a>,<span class=\"ts\"/><span class=\"comment\">/* Don't wait on anything */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WB_SYNC_ALL\">WB_SYNC_ALL</a>,<span class=\"ts\"/><span class=\"comment\">/* Wait on every mapping */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A control structure which tells the writeback code what to do.  These are</span>", 
"<span class=\"comment\"> * always on the stack, and hence need no locking.  They are always initialised</span>", 
"<span class=\"comment\"> * in a manner such that unspecified fields are set to zero.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a> {", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#writeback_sync_modes\">writeback_sync_modes</a> <a class=\"id\" href=\"#sync_mode\">sync_mode</a>;", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#older_than_this\">older_than_this</a>;<span class=\"ts\"/><span class=\"comment\">/* If !NULL, only write back inodes</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   older than this */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#wb_start\">wb_start</a>;         <span class=\"comment\">/* Time writeback_inodes_wb was</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   called. This is needed to avoid</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   extra jobs and livelock */</span>", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#nr_to_write\">nr_to_write</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Write this many pages, and decrement</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   this for each page written */</span>", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#pages_skipped\">pages_skipped</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Pages which were not written */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For a_ops-&gt;writepages(): is start or end are non-zero then this is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a hint that the filesystem need only write out the pages inside that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * byterange.  The byte at `end' is included in the writeout request.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#range_start\">range_start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#range_end\">range_end</a>;", 
"", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#nonblocking\">nonblocking</a>:1;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Don't get stuck on request queues */</span>", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#encountered_congestion\">encountered_congestion</a>:1; <span class=\"comment\">/* An output: a queue is full */</span>", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#for_kupdate\">for_kupdate</a>:1;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* A kupdate writeback */</span>", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#for_background\">for_background</a>:1;<span class=\"ts\"/><span class=\"comment\">/* A background writeback */</span>", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#for_reclaim\">for_reclaim</a>:1;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Invoked from the page allocator */</span>", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#range_cyclic\">range_cyclic</a>:1;<span class=\"ts\"/><span class=\"comment\">/* range_start is cyclic */</span>", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#more_io\">more_io</a>:1;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* more io to be dispatched */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * fs/fs-writeback.c</span>", 
"<span class=\"comment\"> */</span><span class=\"ts\"/>", 
"struct <a class=\"id\" href=\"#bdi_writeback\">bdi_writeback</a>;", 
"int <a class=\"id\" href=\"#inode_wait\">inode_wait</a>(void *);", 
"void <a class=\"id\" href=\"#writeback_inodes_sb\">writeback_inodes_sb</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *);", 
"int <a class=\"id\" href=\"#writeback_inodes_sb_if_idle\">writeback_inodes_sb_if_idle</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *);", 
"void <a class=\"id\" href=\"#sync_inodes_sb\">sync_inodes_sb</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *);", 
"void <a class=\"id\" href=\"#writeback_inodes_wb\">writeback_inodes_wb</a>(struct <a class=\"id\" href=\"#bdi_writeback\">bdi_writeback</a> *<a class=\"id\" href=\"#wb\">wb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a> *<a class=\"id\" href=\"#wbc\">wbc</a>);", 
"long <a class=\"id\" href=\"#wb_do_writeback\">wb_do_writeback</a>(struct <a class=\"id\" href=\"#bdi_writeback\">bdi_writeback</a> *<a class=\"id\" href=\"#wb\">wb</a>, int <a class=\"id\" href=\"#force_wait\">force_wait</a>);", 
"void <a class=\"id\" href=\"#wakeup_flusher_threads\">wakeup_flusher_threads</a>(long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>);", 
"", 
"<span class=\"comment\">/* writeback.h requires fs.h; it, too, is not included from here. */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#wait_on_inode\">wait_on_inode</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_on_bit\">wait_on_bit</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a>, <a class=\"id\" href=\"#__I_NEW\">__I_NEW</a>, <a class=\"id\" href=\"#inode_wait\">inode_wait</a>, <a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#inode_sync_wait\">inode_sync_wait</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_on_bit\">wait_on_bit</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a>, <a class=\"id\" href=\"#__I_SYNC\">__I_SYNC</a>, <a class=\"id\" href=\"#inode_wait\">inode_wait</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * mm/page-writeback.c</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BLOCK\">CONFIG_BLOCK</a>", 
"void <a class=\"id\" href=\"#laptop_io_completion\">laptop_io_completion</a>(struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#info\">info</a>);", 
"void <a class=\"id\" href=\"#laptop_sync_completion\">laptop_sync_completion</a>(void);", 
"void <a class=\"id\" href=\"#laptop_mode_sync\">laptop_mode_sync</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>);", 
"void <a class=\"id\" href=\"#laptop_mode_timer_fn\">laptop_mode_timer_fn</a>(unsigned long <a class=\"id\" href=\"#data\">data</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#laptop_sync_completion\">laptop_sync_completion</a>(void) { }", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"void <a class=\"id\" href=\"#throttle_vm_writeout\">throttle_vm_writeout</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"", 
"<span class=\"comment\">/* These are exported to sysctl. */</span>", 
"extern int <a class=\"id\" href=\"#dirty_background_ratio\">dirty_background_ratio</a>;", 
"extern unsigned long <a class=\"id\" href=\"#dirty_background_bytes\">dirty_background_bytes</a>;", 
"extern int <a class=\"id\" href=\"#vm_dirty_ratio\">vm_dirty_ratio</a>;", 
"extern unsigned long <a class=\"id\" href=\"#vm_dirty_bytes\">vm_dirty_bytes</a>;", 
"extern unsigned int <a class=\"id\" href=\"#dirty_writeback_interval\">dirty_writeback_interval</a>;", 
"extern unsigned int <a class=\"id\" href=\"#dirty_expire_interval\">dirty_expire_interval</a>;", 
"extern int <a class=\"id\" href=\"#vm_highmem_is_dirtyable\">vm_highmem_is_dirtyable</a>;", 
"extern int <a class=\"id\" href=\"#block_dump\">block_dump</a>;", 
"extern int <a class=\"id\" href=\"#laptop_mode\">laptop_mode</a>;", 
"", 
"extern unsigned long <a class=\"id\" href=\"#determine_dirtyable_memory\">determine_dirtyable_memory</a>(void);", 
"", 
"extern int <a class=\"id\" href=\"#dirty_background_ratio_handler\">dirty_background_ratio_handler</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#lenp\">lenp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>);", 
"extern int <a class=\"id\" href=\"#dirty_background_bytes_handler\">dirty_background_bytes_handler</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#lenp\">lenp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>);", 
"extern int <a class=\"id\" href=\"#dirty_ratio_handler\">dirty_ratio_handler</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#lenp\">lenp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>);", 
"extern int <a class=\"id\" href=\"#dirty_bytes_handler\">dirty_bytes_handler</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#lenp\">lenp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>);", 
"", 
"struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a>;", 
"int <a class=\"id\" href=\"#dirty_writeback_centisecs_handler\">dirty_writeback_centisecs_handler</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *, int,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      void <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#size_t\">size_t</a> *, <a class=\"id\" href=\"#loff_t\">loff_t</a> *);", 
"", 
"void <a class=\"id\" href=\"#global_dirty_limits\">global_dirty_limits</a>(unsigned long *<a class=\"id\" href=\"#pbackground\">pbackground</a>, unsigned long *<a class=\"id\" href=\"#pdirty\">pdirty</a>);", 
"unsigned long <a class=\"id\" href=\"#bdi_dirty_limit\">bdi_dirty_limit</a>(struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned long <a class=\"id\" href=\"#dirty\">dirty</a>);", 
"", 
"void <a class=\"id\" href=\"#page_writeback_init\">page_writeback_init</a>(void);", 
"void <a class=\"id\" href=\"#balance_dirty_pages_ratelimited_nr\">balance_dirty_pages_ratelimited_nr</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_pages_dirtied\">nr_pages_dirtied</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#balance_dirty_pages_ratelimited\">balance_dirty_pages_ratelimited</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#balance_dirty_pages_ratelimited_nr\">balance_dirty_pages_ratelimited_nr</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, 1);", 
"}", 
"", 
"typedef int (*<a class=\"id\" href=\"#writepage_t\">writepage_t</a>)(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a> *<a class=\"id\" href=\"#wbc\">wbc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a>);", 
"", 
"int <a class=\"id\" href=\"#generic_writepages\">generic_writepages</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a> *<a class=\"id\" href=\"#wbc\">wbc</a>);", 
"int <a class=\"id\" href=\"#write_cache_pages\">write_cache_pages</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a> *<a class=\"id\" href=\"#wbc\">wbc</a>, <a class=\"id\" href=\"#writepage_t\">writepage_t</a> <a class=\"id\" href=\"#writepage\">writepage</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      void *<a class=\"id\" href=\"#data\">data</a>);", 
"int <a class=\"id\" href=\"#do_writepages\">do_writepages</a>(struct <a class=\"id\" href=\"#address_space\">address_space</a> *<a class=\"id\" href=\"#mapping\">mapping</a>, struct <a class=\"id\" href=\"#writeback_control\">writeback_control</a> *<a class=\"id\" href=\"#wbc\">wbc</a>);", 
"void <a class=\"id\" href=\"#set_page_dirty_balance\">set_page_dirty_balance</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#page_mkwrite\">page_mkwrite</a>);", 
"void <a class=\"id\" href=\"#writeback_set_ratelimit\">writeback_set_ratelimit</a>(void);", 
"", 
"<span class=\"comment\">/* pdflush.c */</span>", 
"extern int <a class=\"id\" href=\"#nr_pdflush_threads\">nr_pdflush_threads</a>;<span class=\"ts\"/><span class=\"comment\">/* Global so it can be exported to sysctl</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   read-only. */</span>", 
"", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* WRITEBACK_H */</span>", 
];
xr_frag_insert('l/20/8b1f3b12b67dddebf2a1bd7891080e85c7e38e.xr', __xr_tmp);
