var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_ASM_X86_PAGE_H\">_ASM_X86_PAGE_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_ASM_X86_PAGE_H\">_ASM_X86_PAGE_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__KERNEL__\">__KERNEL__</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#page_types\">page_types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#page_64\">page_64</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#else", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#page_32\">page_32</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* CONFIG_X86_64 */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__ASSEMBLY__\">__ASSEMBLY__</a>", 
"", 
"struct <a class=\"id\" href=\"#page\">page</a>;", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#clear_user_page\">clear_user_page</a>(void *<a class=\"id\" href=\"#page\">page</a>, unsigned long <a class=\"id\" href=\"#vaddr\">vaddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#pg\">pg</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clear_page\">clear_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#copy_user_page\">copy_user_page</a>(void *<a class=\"id\" href=\"#to\">to</a>, void *<a class=\"id\" href=\"#from\">from</a>, unsigned long <a class=\"id\" href=\"#vaddr\">vaddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#topage\">topage</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#copy_page\">copy_page</a>(<a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#from\">from</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__alloc_zeroed_user_highpage\">__alloc_zeroed_user_highpage</a>(<a class=\"id\" href=\"#movableflags\">movableflags</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#vaddr\">vaddr</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alloc_page_vma\">alloc_page_vma</a>(<a class=\"id\" href=\"#GFP_HIGHUSER\">GFP_HIGHUSER</a> | <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a> | <a class=\"id\" href=\"#movableflags\">movableflags</a>, <a class=\"id\" href=\"#vma\">vma</a>, <a class=\"id\" href=\"#vaddr\">vaddr</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HAVE_ARCH_ALLOC_ZEROED_USER_HIGHPAGE\">__HAVE_ARCH_ALLOC_ZEROED_USER_HIGHPAGE</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__phys_addr\">__phys_addr</a>((unsigned long)(<a class=\"id\" href=\"#x\">x</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__pa_nodebug\">__pa_nodebug</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><a class=\"id\" href=\"#__phys_addr_nodebug\">__phys_addr_nodebug</a>((unsigned long)(<a class=\"id\" href=\"#x\">x</a>))", 
"<span class=\"comment\">/* __pa_symbol should be used for C visible symbols.</span>", 
"<span class=\"comment\">   This seems to be the official gcc blessed way to do such arithmetic. */</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We need __phys_reloc_hide() here because gcc may assume that there is no</span>", 
"<span class=\"comment\"> * overflow during __pa() calculation and can optimize it unexpectedly.</span>", 
"<span class=\"comment\"> * Newer versions of gcc provide -fno-strict-overflow switch to handle this</span>", 
"<span class=\"comment\"> * case properly. Once all supported versions of gcc understand it, we can</span>", 
"<span class=\"comment\"> * remove this Voodoo magic stuff. (i.e. once gcc3.x is deprecated)</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__pa_symbol\">__pa_symbol</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#__phys_reloc_hide\">__phys_reloc_hide</a>((unsigned long)(<a class=\"id\" href=\"#x\">x</a>)))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__va\">__va</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>((void *)((unsigned long)(<a class=\"id\" href=\"#x\">x</a>)+<a class=\"id\" href=\"#PAGE_OFFSET\">PAGE_OFFSET</a>))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__boot_va\">__boot_va</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__va\">__va</a>(<a class=\"id\" href=\"#x\">x</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__boot_pa\">__boot_pa</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#x\">x</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * virt_to_page(kaddr) returns a valid pointer if and only if</span>", 
"<span class=\"comment\"> * virt_addr_valid(kaddr) returns true.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#kaddr\">kaddr</a>)<span class=\"ts\"/><a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#kaddr\">kaddr</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#pfn_to_kaddr\">pfn_to_kaddr</a>(<a class=\"id\" href=\"#pfn\">pfn</a>)      <a class=\"id\" href=\"#__va\">__va</a>((<a class=\"id\" href=\"#pfn\">pfn</a>) << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>)", 
"extern <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#__virt_addr_valid\">__virt_addr_valid</a>(unsigned long <a class=\"id\" href=\"#kaddr\">kaddr</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#virt_addr_valid\">virt_addr_valid</a>(<a class=\"id\" href=\"#kaddr\">kaddr</a>)<span class=\"ts\"/><a class=\"id\" href=\"#__virt_addr_valid\">__virt_addr_valid</a>((unsigned long) (<a class=\"id\" href=\"#kaddr\">kaddr</a>))", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* __ASSEMBLY__ */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>-<a class=\"id\" href=\"#generic\">generic</a>/<a class=\"id\" href=\"#memory_model\">memory_model</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>-<a class=\"id\" href=\"#generic\">generic</a>/<a class=\"id\" href=\"#getorder\">getorder</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HAVE_ARCH_GATE_AREA\">__HAVE_ARCH_GATE_AREA</a> 1", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* __KERNEL__ */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _ASM_X86_PAGE_H */</span>", 
];
xr_frag_insert('l/20/fbe6dfef33ad4c8c977ef63db47ba457ce790b.xr', __xr_tmp);
