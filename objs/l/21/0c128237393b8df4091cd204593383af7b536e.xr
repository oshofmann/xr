var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_percpu\">free_percpu</a>(<a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#local\">local</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#local\">local</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(<a class=\"id\" href=\"#idr_ref\">idr_ref</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#client_count\">client_count</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#chancnt\">chancnt</a> = <a class=\"id\" href=\"#chancnt\">chancnt</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#dma_list_mutex\">dma_list_mutex</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* take references on public channels */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dmaengine_ref_count\">dmaengine_ref_count</a> && !<a class=\"id\" href=\"#dma_has_cap\">dma_has_cap</a>(<a class=\"id\" href=\"#DMA_PRIVATE\">DMA_PRIVATE</a>, <a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#cap_mask\">cap_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#chan\">chan</a>, &amp;<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#channels\">channels</a>, <a class=\"id\" href=\"#device_node\">device_node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* if clients are already waiting for channels we need</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * to take references on their behalf</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dma_chan_get\">dma_chan_get</a>(<a class=\"id\" href=\"#chan\">chan</a>) == -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* note we can only get here for the first</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * channel as the remaining channels are</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * guaranteed to get a reference</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#dma_list_mutex\">dma_list_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail_rcu\">list_add_tail_rcu</a>(&amp;<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#global_node\">global_node</a>, &amp;<a class=\"id\" href=\"#dma_device_list\">dma_device_list</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dma_has_cap\">dma_has_cap</a>(<a class=\"id\" href=\"#DMA_PRIVATE\">DMA_PRIVATE</a>, <a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#cap_mask\">cap_mask</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#privatecnt\">privatecnt</a>++;<span class=\"ts\"/><span class=\"comment\">/* Always private */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_channel_rebalance\">dma_channel_rebalance</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#dma_list_mutex\">dma_list_mutex</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#err_out\">err_out</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* if we never registered a channel just release the idr */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(<a class=\"id\" href=\"#idr_ref\">idr_ref</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#dma_list_mutex\">dma_list_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idr_remove\">idr_remove</a>(&amp;<a class=\"id\" href=\"#dma_idr\">dma_idr</a>, <a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#dev_id\">dev_id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#dma_list_mutex\">dma_list_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#idr_ref\">idr_ref</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#chan\">chan</a>, &amp;<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#channels\">channels</a>, <a class=\"id\" href=\"#device_node\">device_node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#local\">local</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#dma_list_mutex\">dma_list_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#chan\">chan</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#dma_list_mutex\">dma_list_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device_unregister\">device_unregister</a>(&amp;<a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#device\">device</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_percpu\">free_percpu</a>(<a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#local\">local</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dma_async_device_register\">dma_async_device_register</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * dma_async_device_unregister - unregister a DMA device</span>", 
"<span class=\"comment\"> * @device: &amp;dma_device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This routine is called by dma driver exit routines, dmaengine holds module</span>", 
"<span class=\"comment\"> * references to prevent it being called while channels are in use.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#dma_async_device_unregister\">dma_async_device_unregister</a>(struct <a class=\"id\" href=\"#dma_device\">dma_device</a> *<a class=\"id\" href=\"#device\">device</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#dma_list_mutex\">dma_list_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_rcu\">list_del_rcu</a>(&amp;<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#global_node\">global_node</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_channel_rebalance\">dma_channel_rebalance</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#dma_list_mutex\">dma_list_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#chan\">chan</a>, &amp;<a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#channels\">channels</a>, <a class=\"id\" href=\"#device_node\">device_node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ONCE\">WARN_ONCE</a>(<a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#client_count\">client_count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"%s called while %d clients hold a reference\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#client_count\">client_count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#dma_list_mutex\">dma_list_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#chan\">chan</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#dma_list_mutex\">dma_list_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#device_unregister\">device_unregister</a>(&amp;<a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#device\">device</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_percpu\">free_percpu</a>(<a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#local\">local</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dma_async_device_unregister\">dma_async_device_unregister</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * dma_async_memcpy_buf_to_buf - offloaded copy between virtual addresses</span>", 
"<span class=\"comment\"> * @chan: DMA channel to offload copy to</span>", 
"<span class=\"comment\"> * @dest: destination address (virtual)</span>", 
"<span class=\"comment\"> * @src: source address (virtual)</span>", 
"<span class=\"comment\"> * @len: length</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Both @dest and @src must be mappable to a bus address according to the</span>", 
"<span class=\"comment\"> * DMA mapping API rules for streaming mappings.</span>", 
"<span class=\"comment\"> * Both @dest and @src must stay memory resident (kernel memory or locked</span>", 
"<span class=\"comment\"> * user space pages).</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#dma_cookie_t\">dma_cookie_t</a>", 
"<a class=\"id\" href=\"#dma_async_memcpy_buf_to_buf\">dma_async_memcpy_buf_to_buf</a>(struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>, void *<a class=\"id\" href=\"#dest\">dest</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_device\">dma_device</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#device\">device</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> *<a class=\"id\" href=\"#tx\">tx</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#dma_dest\">dma_dest</a>, <a class=\"id\" href=\"#dma_src\">dma_src</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_cookie_t\">dma_cookie_t</a> <a class=\"id\" href=\"#cookie\">cookie</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_src\">dma_src</a> = <a class=\"id\" href=\"#dma_map_single\">dma_map_single</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#src\">src</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#DMA_TO_DEVICE\">DMA_TO_DEVICE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_dest\">dma_dest</a> = <a class=\"id\" href=\"#dma_map_single\">dma_map_single</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#dest\">dest</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#DMA_FROM_DEVICE\">DMA_FROM_DEVICE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#DMA_CTRL_ACK\">DMA_CTRL_ACK</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMA_COMPL_SRC_UNMAP_SINGLE\">DMA_COMPL_SRC_UNMAP_SINGLE</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMA_COMPL_DEST_UNMAP_SINGLE\">DMA_COMPL_DEST_UNMAP_SINGLE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tx\">tx</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#device_prep_dma_memcpy\">device_prep_dma_memcpy</a>(<a class=\"id\" href=\"#chan\">chan</a>, <a class=\"id\" href=\"#dma_dest\">dma_dest</a>, <a class=\"id\" href=\"#dma_src\">dma_src</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tx\">tx</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_unmap_single\">dma_unmap_single</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#dma_src\">dma_src</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#DMA_TO_DEVICE\">DMA_TO_DEVICE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_unmap_single\">dma_unmap_single</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#dma_dest\">dma_dest</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#DMA_FROM_DEVICE\">DMA_FROM_DEVICE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tx\">tx</a>-><a class=\"id\" href=\"#callback\">callback</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cookie\">cookie</a> = <a class=\"id\" href=\"#tx\">tx</a>-><a class=\"id\" href=\"#tx_submit\">tx_submit</a>(<a class=\"id\" href=\"#tx\">tx</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__this_cpu_add\">__this_cpu_add</a>(<a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#local\">local</a>-><a class=\"id\" href=\"#bytes_transferred\">bytes_transferred</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__this_cpu_inc\">__this_cpu_inc</a>(<a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#local\">local</a>-><a class=\"id\" href=\"#memcpy_count\">memcpy_count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cookie\">cookie</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dma_async_memcpy_buf_to_buf\">dma_async_memcpy_buf_to_buf</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * dma_async_memcpy_buf_to_pg - offloaded copy from address to page</span>", 
"<span class=\"comment\"> * @chan: DMA channel to offload copy to</span>", 
"<span class=\"comment\"> * @page: destination page</span>", 
"<span class=\"comment\"> * @offset: offset in page to copy to</span>", 
"<span class=\"comment\"> * @kdata: source address (virtual)</span>", 
"<span class=\"comment\"> * @len: length</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Both @page/@offset and @kdata must be mappable to a bus address according</span>", 
"<span class=\"comment\"> * to the DMA mapping API rules for streaming mappings.</span>", 
"<span class=\"comment\"> * Both @page/@offset and @kdata must stay memory resident (kernel memory or</span>", 
"<span class=\"comment\"> * locked user space pages)</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#dma_cookie_t\">dma_cookie_t</a>", 
"<a class=\"id\" href=\"#dma_async_memcpy_buf_to_pg\">dma_async_memcpy_buf_to_pg</a>(struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#offset\">offset</a>, void *<a class=\"id\" href=\"#kdata\">kdata</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_device\">dma_device</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#device\">device</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> *<a class=\"id\" href=\"#tx\">tx</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#dma_dest\">dma_dest</a>, <a class=\"id\" href=\"#dma_src\">dma_src</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_cookie_t\">dma_cookie_t</a> <a class=\"id\" href=\"#cookie\">cookie</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_src\">dma_src</a> = <a class=\"id\" href=\"#dma_map_single\">dma_map_single</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#kdata\">kdata</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#DMA_TO_DEVICE\">DMA_TO_DEVICE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_dest\">dma_dest</a> = <a class=\"id\" href=\"#dma_map_page\">dma_map_page</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#DMA_FROM_DEVICE\">DMA_FROM_DEVICE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#DMA_CTRL_ACK\">DMA_CTRL_ACK</a> | <a class=\"id\" href=\"#DMA_COMPL_SRC_UNMAP_SINGLE\">DMA_COMPL_SRC_UNMAP_SINGLE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tx\">tx</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#device_prep_dma_memcpy\">device_prep_dma_memcpy</a>(<a class=\"id\" href=\"#chan\">chan</a>, <a class=\"id\" href=\"#dma_dest\">dma_dest</a>, <a class=\"id\" href=\"#dma_src\">dma_src</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tx\">tx</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_unmap_single\">dma_unmap_single</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#dma_src\">dma_src</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#DMA_TO_DEVICE\">DMA_TO_DEVICE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_unmap_page\">dma_unmap_page</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#dma_dest\">dma_dest</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#DMA_FROM_DEVICE\">DMA_FROM_DEVICE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tx\">tx</a>-><a class=\"id\" href=\"#callback\">callback</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cookie\">cookie</a> = <a class=\"id\" href=\"#tx\">tx</a>-><a class=\"id\" href=\"#tx_submit\">tx_submit</a>(<a class=\"id\" href=\"#tx\">tx</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__this_cpu_add\">__this_cpu_add</a>(<a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#local\">local</a>-><a class=\"id\" href=\"#bytes_transferred\">bytes_transferred</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__this_cpu_inc\">__this_cpu_inc</a>(<a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#local\">local</a>-><a class=\"id\" href=\"#memcpy_count\">memcpy_count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cookie\">cookie</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dma_async_memcpy_buf_to_pg\">dma_async_memcpy_buf_to_pg</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * dma_async_memcpy_pg_to_pg - offloaded copy from page to page</span>", 
"<span class=\"comment\"> * @chan: DMA channel to offload copy to</span>", 
"<span class=\"comment\"> * @dest_pg: destination page</span>", 
"<span class=\"comment\"> * @dest_off: offset in page to copy to</span>", 
"<span class=\"comment\"> * @src_pg: source page</span>", 
"<span class=\"comment\"> * @src_off: offset in page to copy from</span>", 
"<span class=\"comment\"> * @len: length</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Both @dest_page/@dest_off and @src_page/@src_off must be mappable to a bus</span>", 
"<span class=\"comment\"> * address according to the DMA mapping API rules for streaming mappings.</span>", 
"<span class=\"comment\"> * Both @dest_page/@dest_off and @src_page/@src_off must stay memory resident</span>", 
"<span class=\"comment\"> * (kernel memory or locked user space pages).</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#dma_cookie_t\">dma_cookie_t</a>", 
"<a class=\"id\" href=\"#dma_async_memcpy_pg_to_pg\">dma_async_memcpy_pg_to_pg</a>(struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#dest_pg\">dest_pg</a>,", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#dest_off\">dest_off</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#src_pg\">src_pg</a>, unsigned int <a class=\"id\" href=\"#src_off\">src_off</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_device\">dma_device</a> *<a class=\"id\" href=\"#dev\">dev</a> = <a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#device\">device</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> *<a class=\"id\" href=\"#tx\">tx</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#dma_dest\">dma_dest</a>, <a class=\"id\" href=\"#dma_src\">dma_src</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_cookie_t\">dma_cookie_t</a> <a class=\"id\" href=\"#cookie\">cookie</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_src\">dma_src</a> = <a class=\"id\" href=\"#dma_map_page\">dma_map_page</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#src_pg\">src_pg</a>, <a class=\"id\" href=\"#src_off\">src_off</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#DMA_TO_DEVICE\">DMA_TO_DEVICE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_dest\">dma_dest</a> = <a class=\"id\" href=\"#dma_map_page\">dma_map_page</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#dest_pg\">dest_pg</a>, <a class=\"id\" href=\"#dest_off\">dest_off</a>, <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DMA_FROM_DEVICE\">DMA_FROM_DEVICE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#DMA_CTRL_ACK\">DMA_CTRL_ACK</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tx\">tx</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#device_prep_dma_memcpy\">device_prep_dma_memcpy</a>(<a class=\"id\" href=\"#chan\">chan</a>, <a class=\"id\" href=\"#dma_dest\">dma_dest</a>, <a class=\"id\" href=\"#dma_src\">dma_src</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tx\">tx</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_unmap_page\">dma_unmap_page</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#dma_src\">dma_src</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#DMA_TO_DEVICE\">DMA_TO_DEVICE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_unmap_page\">dma_unmap_page</a>(<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#dma_dest\">dma_dest</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#DMA_FROM_DEVICE\">DMA_FROM_DEVICE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tx\">tx</a>-><a class=\"id\" href=\"#callback\">callback</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cookie\">cookie</a> = <a class=\"id\" href=\"#tx\">tx</a>-><a class=\"id\" href=\"#tx_submit\">tx_submit</a>(<a class=\"id\" href=\"#tx\">tx</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__this_cpu_add\">__this_cpu_add</a>(<a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#local\">local</a>-><a class=\"id\" href=\"#bytes_transferred\">bytes_transferred</a>, <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__this_cpu_inc\">__this_cpu_inc</a>(<a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#local\">local</a>-><a class=\"id\" href=\"#memcpy_count\">memcpy_count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cookie\">cookie</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dma_async_memcpy_pg_to_pg\">dma_async_memcpy_pg_to_pg</a>);", 
"", 
"void <a class=\"id\" href=\"#dma_async_tx_descriptor_init\">dma_async_tx_descriptor_init</a>(struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> *<a class=\"id\" href=\"#tx\">tx</a>,", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tx\">tx</a>-><a class=\"id\" href=\"#chan\">chan</a> = <a class=\"id\" href=\"#chan\">chan</a>;", 
"<span class=\"ts\"/>#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_ASYNC_TX_DISABLE_CHANNEL_SWITCH\">CONFIG_ASYNC_TX_DISABLE_CHANNEL_SWITCH</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#tx\">tx</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#dma_async_tx_descriptor_init\">dma_async_tx_descriptor_init</a>);", 
"", 
"<span class=\"comment\">/* dma_wait_for_async_tx - spin wait for a transaction to complete</span>", 
"<span class=\"comment\"> * @tx: in-flight transaction to wait on</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#dma_status\">dma_status</a>", 
"<a class=\"id\" href=\"#dma_wait_for_async_tx\">dma_wait_for_async_tx</a>(struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> *<a class=\"id\" href=\"#tx\">tx</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#dma_sync_wait_timeout\">dma_sync_wait_timeout</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#msecs_to_jiffies\">msecs_to_jiffies</a>(5000);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#tx\">tx</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#DMA_SUCCESS\">DMA_SUCCESS</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#tx\">tx</a>-><a class=\"id\" href=\"#cookie\">cookie</a> == -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#time_after_eq\">time_after_eq</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#dma_sync_wait_timeout\">dma_sync_wait_timeout</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_err\">pr_err</a>(\"%s timeout waiting for descriptor submission\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__func__\">__func__</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#DMA_ERROR\">DMA_ERROR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dma_sync_wait\">dma_sync_wait</a>(<a class=\"id\" href=\"#tx\">tx</a>-><a class=\"id\" href=\"#chan\">chan</a>, <a class=\"id\" href=\"#tx\">tx</a>-><a class=\"id\" href=\"#cookie\">cookie</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#dma_wait_for_async_tx\">dma_wait_for_async_tx</a>);", 
"", 
"<span class=\"comment\">/* dma_run_dependencies - helper routine for dma drivers to process</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(start) dependent operations on their target channel</span>", 
"<span class=\"comment\"> * @tx: transaction with dependencies</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#dma_run_dependencies\">dma_run_dependencies</a>(struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> *<a class=\"id\" href=\"#tx\">tx</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> *<a class=\"id\" href=\"#dep\">dep</a> = <a class=\"id\" href=\"#txd_next\">txd_next</a>(<a class=\"id\" href=\"#tx\">tx</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_async_tx_descriptor\">dma_async_tx_descriptor</a> *<a class=\"id\" href=\"#dep_next\">dep_next</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_chan\">dma_chan</a> *<a class=\"id\" href=\"#chan\">chan</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dep\">dep</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we'll submit tx-&gt;next now, so clear the link */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#txd_clear_next\">txd_clear_next</a>(<a class=\"id\" href=\"#tx\">tx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chan\">chan</a> = <a class=\"id\" href=\"#dep\">dep</a>-><a class=\"id\" href=\"#chan\">chan</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* keep submitting up until a channel switch is detected</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in that case we will be called again as a result of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * processing the interrupt from async_tx_channel_switch</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (; <a class=\"id\" href=\"#dep\">dep</a>; <a class=\"id\" href=\"#dep\">dep</a> = <a class=\"id\" href=\"#dep_next\">dep_next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#txd_lock\">txd_lock</a>(<a class=\"id\" href=\"#dep\">dep</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#txd_clear_parent\">txd_clear_parent</a>(<a class=\"id\" href=\"#dep\">dep</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dep_next\">dep_next</a> = <a class=\"id\" href=\"#txd_next\">txd_next</a>(<a class=\"id\" href=\"#dep\">dep</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dep_next\">dep_next</a> && <a class=\"id\" href=\"#dep_next\">dep_next</a>-><a class=\"id\" href=\"#chan\">chan</a> == <a class=\"id\" href=\"#chan\">chan</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#txd_clear_next\">txd_clear_next</a>(<a class=\"id\" href=\"#dep\">dep</a>); <span class=\"comment\">/* -&gt;next will be submitted */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dep_next\">dep_next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>; <span class=\"comment\">/* submit current dep and terminate */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#txd_unlock\">txd_unlock</a>(<a class=\"id\" href=\"#dep\">dep</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dep\">dep</a>-><a class=\"id\" href=\"#tx_submit\">tx_submit</a>(<a class=\"id\" href=\"#dep\">dep</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#chan\">chan</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#device_issue_pending\">device_issue_pending</a>(<a class=\"id\" href=\"#chan\">chan</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#dma_run_dependencies\">dma_run_dependencies</a>);", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#dma_bus_init\">dma_bus_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idr_init\">idr_init</a>(&amp;<a class=\"id\" href=\"#dma_idr\">dma_idr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#dma_list_mutex\">dma_list_mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#class_register\">class_register</a>(&amp;<a class=\"id\" href=\"#dma_devclass\">dma_devclass</a>);", 
"}", 
"<a class=\"id\" href=\"#arch_initcall\">arch_initcall</a>(<a class=\"id\" href=\"#dma_bus_init\">dma_bus_init</a>);", 
"", 
"", 
];
xr_frag_insert('l/21/0c128237393b8df4091cd204593383af7b536e.xr', __xr_tmp);
