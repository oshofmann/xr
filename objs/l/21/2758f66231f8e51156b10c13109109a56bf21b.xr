var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_ASM_X86_ATOMIC64_64_H\">_ASM_X86_ATOMIC64_64_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_ASM_X86_ATOMIC64_64_H\">_ASM_X86_ATOMIC64_64_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#alternative\">alternative</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#cmpxchg\">cmpxchg</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/* The 64-bit atomic type */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ATOMIC64_INIT\">ATOMIC64_INIT</a>(<a class=\"id\" href=\"#i\">i</a>)<span class=\"ts\"/>{ (<a class=\"id\" href=\"#i\">i</a>) }", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * atomic64_read - read atomic64 variable</span>", 
"<span class=\"comment\"> * @v: pointer of type atomic64_t</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Atomically reads the value of @v.</span>", 
"<span class=\"comment\"> * Doesn't imply a read memory barrier.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> long <a class=\"id\" href=\"#atomic64_read\">atomic64_read</a>(const <a class=\"id\" href=\"#atomic64_t\">atomic64_t</a> *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>return (*(volatile long *)&amp;(<a class=\"id\" href=\"#v\">v</a>)-><a class=\"id\" href=\"#counter\">counter</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * atomic64_set - set atomic64 variable</span>", 
"<span class=\"comment\"> * @v: pointer to type atomic64_t</span>", 
"<span class=\"comment\"> * @i: required value</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Atomically sets the value of @v to @i.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#atomic64_set\">atomic64_set</a>(<a class=\"id\" href=\"#atomic64_t\">atomic64_t</a> *<a class=\"id\" href=\"#v\">v</a>, long <a class=\"id\" href=\"#i\">i</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#counter\">counter</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * atomic64_add - add integer to atomic64 variable</span>", 
"<span class=\"comment\"> * @i: integer value to add</span>", 
"<span class=\"comment\"> * @v: pointer to type atomic64_t</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Atomically adds @i to @v.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#atomic64_add\">atomic64_add</a>(long <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#atomic64_t\">atomic64_t</a> *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(<a class=\"id\" href=\"#LOCK_PREFIX\">LOCK_PREFIX</a> \"addq %1,%0\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"=m\" (<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#counter\">counter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"er\" (<a class=\"id\" href=\"#i\">i</a>), \"m\" (<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#counter\">counter</a>));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * atomic64_sub - subtract the atomic64 variable</span>", 
"<span class=\"comment\"> * @i: integer value to subtract</span>", 
"<span class=\"comment\"> * @v: pointer to type atomic64_t</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Atomically subtracts @i from @v.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#atomic64_sub\">atomic64_sub</a>(long <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#atomic64_t\">atomic64_t</a> *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(<a class=\"id\" href=\"#LOCK_PREFIX\">LOCK_PREFIX</a> \"subq %1,%0\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"=m\" (<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#counter\">counter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"er\" (<a class=\"id\" href=\"#i\">i</a>), \"m\" (<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#counter\">counter</a>));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * atomic64_sub_and_test - subtract value from variable and test result</span>", 
"<span class=\"comment\"> * @i: integer value to subtract</span>", 
"<span class=\"comment\"> * @v: pointer to type atomic64_t</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Atomically subtracts @i from @v and returns</span>", 
"<span class=\"comment\"> * true if the result is zero, or false for all</span>", 
"<span class=\"comment\"> * other cases.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#atomic64_sub_and_test\">atomic64_sub_and_test</a>(long <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#atomic64_t\">atomic64_t</a> *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#c\">c</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(<a class=\"id\" href=\"#LOCK_PREFIX\">LOCK_PREFIX</a> \"subq %2,%0; sete %1\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"=m\" (<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#counter\">counter</a>), \"=qm\" (<a class=\"id\" href=\"#c\">c</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"er\" (<a class=\"id\" href=\"#i\">i</a>), \"m\" (<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#counter\">counter</a>) : \"memory\");", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#c\">c</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * atomic64_inc - increment atomic64 variable</span>", 
"<span class=\"comment\"> * @v: pointer to type atomic64_t</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Atomically increments @v by 1.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#atomic64_inc\">atomic64_inc</a>(<a class=\"id\" href=\"#atomic64_t\">atomic64_t</a> *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(<a class=\"id\" href=\"#LOCK_PREFIX\">LOCK_PREFIX</a> \"incq %0\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"=m\" (<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#counter\">counter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"m\" (<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#counter\">counter</a>));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * atomic64_dec - decrement atomic64 variable</span>", 
"<span class=\"comment\"> * @v: pointer to type atomic64_t</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Atomically decrements @v by 1.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#atomic64_dec\">atomic64_dec</a>(<a class=\"id\" href=\"#atomic64_t\">atomic64_t</a> *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(<a class=\"id\" href=\"#LOCK_PREFIX\">LOCK_PREFIX</a> \"decq %0\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"=m\" (<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#counter\">counter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"m\" (<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#counter\">counter</a>));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * atomic64_dec_and_test - decrement and test</span>", 
"<span class=\"comment\"> * @v: pointer to type atomic64_t</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Atomically decrements @v by 1 and</span>", 
"<span class=\"comment\"> * returns true if the result is 0, or false for all other</span>", 
"<span class=\"comment\"> * cases.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#atomic64_dec_and_test\">atomic64_dec_and_test</a>(<a class=\"id\" href=\"#atomic64_t\">atomic64_t</a> *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#c\">c</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(<a class=\"id\" href=\"#LOCK_PREFIX\">LOCK_PREFIX</a> \"decq %0; sete %1\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"=m\" (<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#counter\">counter</a>), \"=qm\" (<a class=\"id\" href=\"#c\">c</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"m\" (<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#counter\">counter</a>) : \"memory\");", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#c\">c</a> != 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * atomic64_inc_and_test - increment and test</span>", 
"<span class=\"comment\"> * @v: pointer to type atomic64_t</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Atomically increments @v by 1</span>", 
"<span class=\"comment\"> * and returns true if the result is zero, or false for all</span>", 
"<span class=\"comment\"> * other cases.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#atomic64_inc_and_test\">atomic64_inc_and_test</a>(<a class=\"id\" href=\"#atomic64_t\">atomic64_t</a> *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#c\">c</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(<a class=\"id\" href=\"#LOCK_PREFIX\">LOCK_PREFIX</a> \"incq %0; sete %1\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"=m\" (<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#counter\">counter</a>), \"=qm\" (<a class=\"id\" href=\"#c\">c</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"m\" (<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#counter\">counter</a>) : \"memory\");", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#c\">c</a> != 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * atomic64_add_negative - add and test if negative</span>", 
"<span class=\"comment\"> * @i: integer value to add</span>", 
"<span class=\"comment\"> * @v: pointer to type atomic64_t</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Atomically adds @i to @v and returns true</span>", 
"<span class=\"comment\"> * if the result is negative, or false when</span>", 
"<span class=\"comment\"> * result is greater than or equal to zero.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#atomic64_add_negative\">atomic64_add_negative</a>(long <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#atomic64_t\">atomic64_t</a> *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#c\">c</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(<a class=\"id\" href=\"#LOCK_PREFIX\">LOCK_PREFIX</a> \"addq %2,%0; sets %1\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"=m\" (<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#counter\">counter</a>), \"=qm\" (<a class=\"id\" href=\"#c\">c</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"er\" (<a class=\"id\" href=\"#i\">i</a>), \"m\" (<a class=\"id\" href=\"#v\">v</a>-><a class=\"id\" href=\"#counter\">counter</a>) : \"memory\");", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#c\">c</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * atomic64_add_return - add and return</span>", 
"<span class=\"comment\"> * @i: integer value to add</span>", 
];
xr_frag_insert('l/21/2758f66231f8e51156b10c13109109a56bf21b.xr', __xr_tmp);
