var __xr_tmp = [
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vmap_page_range\">vmap_page_range</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#prot\">prot</a>, <a class=\"id\" href=\"#pages\">pages</a>) &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vm_unmap_ram\">vm_unmap_ram</a>(<a class=\"id\" href=\"#mem\">mem</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#mem\">mem</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#vm_map_ram\">vm_map_ram</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * vm_area_register_early - register vmap area early during boot</span>", 
"<span class=\"comment\"> * @vm: vm_struct to register</span>", 
"<span class=\"comment\"> * @align: requested alignment</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is used to register kernel vm area before</span>", 
"<span class=\"comment\"> * vmalloc_init() is called.  @vm-&gt;size and @vm-&gt;flags should contain</span>", 
"<span class=\"comment\"> * proper values on entry and other fields should be zero.  On return,</span>", 
"<span class=\"comment\"> * vm-&gt;addr contains the allocated address.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DO NOT USE THIS FUNCTION UNLESS YOU KNOW WHAT YOU'RE DOING.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#vm_area_register_early\">vm_area_register_early</a>(struct <a class=\"id\" href=\"#vm_struct\">vm_struct</a> *<a class=\"id\" href=\"#vm\">vm</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#align\">align</a>)", 
"{", 
"<span class=\"ts\"/>static <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#vm_init_off\">vm_init_off</a> <a class=\"id\" href=\"#__initdata\">__initdata</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#VMALLOC_START\">VMALLOC_START</a> + <a class=\"id\" href=\"#vm_init_off\">vm_init_off</a>, <a class=\"id\" href=\"#align\">align</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vm_init_off\">vm_init_off</a> = <a class=\"id\" href=\"#PFN_ALIGN\">PFN_ALIGN</a>(<a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#vm\">vm</a>-><a class=\"id\" href=\"#size\">size</a>) - <a class=\"id\" href=\"#VMALLOC_START\">VMALLOC_START</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vm\">vm</a>-><a class=\"id\" href=\"#addr\">addr</a> = (void *)<a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vm\">vm</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#vmlist\">vmlist</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vmlist\">vmlist</a> = <a class=\"id\" href=\"#vm\">vm</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#vmalloc_init\">vmalloc_init</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a> *<a class=\"id\" href=\"#va\">va</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_struct\">vm_struct</a> *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vmap_block_queue\">vmap_block_queue</a> *<a class=\"id\" href=\"#vbq\">vbq</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vbq\">vbq</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#vmap_block_queue\">vmap_block_queue</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#vbq\">vbq</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#vbq\">vbq</a>-><a class=\"id\" href=\"#free\">free</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Import existing vmlist entries. */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#vmlist\">vmlist</a>; <a class=\"id\" href=\"#tmp\">tmp</a>; <a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#va\">va</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a>), <a class=\"id\" href=\"#GFP_NOWAIT\">GFP_NOWAIT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#flags\">flags</a> | <a class=\"id\" href=\"#VM_VM_AREA\">VM_VM_AREA</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#va_start\">va_start</a> = (unsigned long)<a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#va_end\">va_end</a> = <a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#va_start\">va_start</a> + <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__insert_vmap_area\">__insert_vmap_area</a>(<a class=\"id\" href=\"#va\">va</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vmap_area_pcpu_hole\">vmap_area_pcpu_hole</a> = <a class=\"id\" href=\"#VMALLOC_END\">VMALLOC_END</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vmap_initialized\">vmap_initialized</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * map_kernel_range_noflush - map kernel VM area with the specified pages</span>", 
"<span class=\"comment\"> * @addr: start of the VM area to map</span>", 
"<span class=\"comment\"> * @size: size of the VM area to map</span>", 
"<span class=\"comment\"> * @prot: page protection flags to use</span>", 
"<span class=\"comment\"> * @pages: pages to map</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Map PFN_UP(@size) pages at @addr.  The VM area @addr and @size</span>", 
"<span class=\"comment\"> * specify should have been allocated using get_vm_area() and its</span>", 
"<span class=\"comment\"> * friends.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE:</span>", 
"<span class=\"comment\"> * This function does NOT do any cache flushing.  The caller is</span>", 
"<span class=\"comment\"> * responsible for calling flush_cache_vmap() on to-be-mapped areas</span>", 
"<span class=\"comment\"> * before calling this function.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * The number of pages mapped on success, -errno on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#map_kernel_range_noflush\">map_kernel_range_noflush</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#prot\">prot</a>, struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#vmap_page_range_noflush\">vmap_page_range_noflush</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#prot\">prot</a>, <a class=\"id\" href=\"#pages\">pages</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * unmap_kernel_range_noflush - unmap kernel VM area</span>", 
"<span class=\"comment\"> * @addr: start of the VM area to unmap</span>", 
"<span class=\"comment\"> * @size: size of the VM area to unmap</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Unmap PFN_UP(@size) pages at @addr.  The VM area @addr and @size</span>", 
"<span class=\"comment\"> * specify should have been allocated using get_vm_area() and its</span>", 
"<span class=\"comment\"> * friends.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE:</span>", 
"<span class=\"comment\"> * This function does NOT do any cache flushing.  The caller is</span>", 
"<span class=\"comment\"> * responsible for calling flush_cache_vunmap() on to-be-mapped areas</span>", 
"<span class=\"comment\"> * before calling this function and flush_tlb_kernel_range() after.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#unmap_kernel_range_noflush\">unmap_kernel_range_noflush</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vunmap_page_range\">vunmap_page_range</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#size\">size</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * unmap_kernel_range - unmap kernel VM area and flush cache and TLB</span>", 
"<span class=\"comment\"> * @addr: start of the VM area to unmap</span>", 
"<span class=\"comment\"> * @size: size of the VM area to unmap</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Similar to unmap_kernel_range_noflush() but flushes vcache before</span>", 
"<span class=\"comment\"> * the unmapping and tlb after.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#unmap_kernel_range\">unmap_kernel_range</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, unsigned long <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_cache_vunmap\">flush_cache_vunmap</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vunmap_page_range\">vunmap_page_range</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_tlb_kernel_range\">flush_tlb_kernel_range</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#map_vm_area\">map_vm_area</a>(struct <a class=\"id\" href=\"#vm_struct\">vm_struct</a> *<a class=\"id\" href=\"#area\">area</a>, <a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#prot\">prot</a>, struct <a class=\"id\" href=\"#page\">page</a> ***<a class=\"id\" href=\"#pages\">pages</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a> = (unsigned long)<a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#size\">size</a> - <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#vmap_page_range\">vmap_page_range</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#prot\">prot</a>, *<a class=\"id\" href=\"#pages\">pages</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#pages\">pages</a> += <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#map_vm_area\">map_vm_area</a>);", 
"", 
"<span class=\"comment\">/*** Old vmalloc interfaces ***/</span>", 
"<a class=\"id\" href=\"#DEFINE_RWLOCK\">DEFINE_RWLOCK</a>(<a class=\"id\" href=\"#vmlist_lock\">vmlist_lock</a>);", 
"struct <a class=\"id\" href=\"#vm_struct\">vm_struct</a> *<a class=\"id\" href=\"#vmlist\">vmlist</a>;", 
"", 
"static void <a class=\"id\" href=\"#insert_vmalloc_vm\">insert_vmalloc_vm</a>(struct <a class=\"id\" href=\"#vm_struct\">vm_struct</a> *<a class=\"id\" href=\"#vm\">vm</a>, struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a> *<a class=\"id\" href=\"#va\">va</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      unsigned long <a class=\"id\" href=\"#flags\">flags</a>, void *<a class=\"id\" href=\"#caller\">caller</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_struct\">vm_struct</a> *<a class=\"id\" href=\"#tmp\">tmp</a>, **<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vm\">vm</a>-><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vm\">vm</a>-><a class=\"id\" href=\"#addr\">addr</a> = (void *)<a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#va_start\">va_start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vm\">vm</a>-><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#va_end\">va_end</a> - <a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#va_start\">va_start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vm\">vm</a>-><a class=\"id\" href=\"#caller\">caller</a> = <a class=\"id\" href=\"#caller\">caller</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#vm\">vm</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#VM_VM_AREA\">VM_VM_AREA</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_lock\">write_lock</a>(&amp;<a class=\"id\" href=\"#vmlist_lock\">vmlist_lock</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#p\">p</a> = &amp;<a class=\"id\" href=\"#vmlist\">vmlist</a>; (<a class=\"id\" href=\"#tmp\">tmp</a> = *<a class=\"id\" href=\"#p\">p</a>) != <a class=\"id\" href=\"#NULL\">NULL</a>; <a class=\"id\" href=\"#p\">p</a> = &amp;<a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#addr\">addr</a> >= <a class=\"id\" href=\"#vm\">vm</a>-><a class=\"id\" href=\"#addr\">addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vm\">vm</a>-><a class=\"id\" href=\"#next\">next</a> = *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#vm\">vm</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#vmlist_lock\">vmlist_lock</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#vm_struct\">vm_struct</a> *<a class=\"id\" href=\"#__get_vm_area_node\">__get_vm_area_node</a>(unsigned long <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#align\">align</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>, unsigned long <a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#end\">end</a>, int <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, void *<a class=\"id\" href=\"#caller\">caller</a>)", 
"{", 
"<span class=\"ts\"/>static struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a> *<a class=\"id\" href=\"#va\">va</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_struct\">vm_struct</a> *<a class=\"id\" href=\"#area\">area</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#in_interrupt\">in_interrupt</a>());", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#VM_IOREMAP\">VM_IOREMAP</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#bit\">bit</a> = <a class=\"id\" href=\"#fls\">fls</a>(<a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bit\">bit</a> &gt; <a class=\"id\" href=\"#IOREMAP_MAX_ORDER\">IOREMAP_MAX_ORDER</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bit\">bit</a> = <a class=\"id\" href=\"#IOREMAP_MAX_ORDER\">IOREMAP_MAX_ORDER</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#bit\">bit</a> &lt; <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bit\">bit</a> = <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#align\">align</a> = 1ul << <a class=\"id\" href=\"#bit\">bit</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#PAGE_ALIGN\">PAGE_ALIGN</a>(<a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#size\">size</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#area\">area</a> = <a class=\"id\" href=\"#kzalloc_node\">kzalloc_node</a>(sizeof(*<a class=\"id\" href=\"#area\">area</a>), <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#GFP_RECLAIM_MASK\">GFP_RECLAIM_MASK</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#area\">area</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We always allocate a guard page.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> += <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va\">va</a> = <a class=\"id\" href=\"#alloc_vmap_area\">alloc_vmap_area</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#va\">va</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#area\">area</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#insert_vmalloc_vm\">insert_vmalloc_vm</a>(<a class=\"id\" href=\"#area\">area</a>, <a class=\"id\" href=\"#va\">va</a>, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#caller\">caller</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#area\">area</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#vm_struct\">vm_struct</a> *<a class=\"id\" href=\"#__get_vm_area\">__get_vm_area</a>(unsigned long <a class=\"id\" href=\"#size\">size</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__get_vm_area_node\">__get_vm_area_node</a>(<a class=\"id\" href=\"#size\">size</a>, 1, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>, -1, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__builtin_return_address\">__builtin_return_address</a>(0));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__get_vm_area\">__get_vm_area</a>);", 
"", 
"struct <a class=\"id\" href=\"#vm_struct\">vm_struct</a> *<a class=\"id\" href=\"#__get_vm_area_caller\">__get_vm_area_caller</a>(unsigned long <a class=\"id\" href=\"#size\">size</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned long <a class=\"id\" href=\"#start\">start</a>, unsigned long <a class=\"id\" href=\"#end\">end</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       void *<a class=\"id\" href=\"#caller\">caller</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__get_vm_area_node\">__get_vm_area_node</a>(<a class=\"id\" href=\"#size\">size</a>, 1, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>, -1, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#caller\">caller</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>get_vm_area  -  reserve a contiguous kernel virtual area</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@size:<span class=\"ts\"/><span class=\"ts\"/>size of the area</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@flags:<span class=\"ts\"/><span class=\"ts\"/>%VM_IOREMAP for I/O mappings or VM_ALLOC</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Search an area of @size in the kernel virtual mapping area,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and reserved it for out purposes.  Returns the area descriptor</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>on success or %NULL on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#vm_struct\">vm_struct</a> *<a class=\"id\" href=\"#get_vm_area\">get_vm_area</a>(unsigned long <a class=\"id\" href=\"#size\">size</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__get_vm_area_node\">__get_vm_area_node</a>(<a class=\"id\" href=\"#size\">size</a>, 1, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#VMALLOC_START\">VMALLOC_START</a>, <a class=\"id\" href=\"#VMALLOC_END\">VMALLOC_END</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>-1, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, <a class=\"id\" href=\"#__builtin_return_address\">__builtin_return_address</a>(0));", 
"}", 
"", 
"struct <a class=\"id\" href=\"#vm_struct\">vm_struct</a> *<a class=\"id\" href=\"#get_vm_area_caller\">get_vm_area_caller</a>(unsigned long <a class=\"id\" href=\"#size\">size</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#caller\">caller</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__get_vm_area_node\">__get_vm_area_node</a>(<a class=\"id\" href=\"#size\">size</a>, 1, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#VMALLOC_START\">VMALLOC_START</a>, <a class=\"id\" href=\"#VMALLOC_END\">VMALLOC_END</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>-1, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>, <a class=\"id\" href=\"#caller\">caller</a>);", 
"}", 
"", 
"struct <a class=\"id\" href=\"#vm_struct\">vm_struct</a> *<a class=\"id\" href=\"#get_vm_area_node\">get_vm_area_node</a>(unsigned long <a class=\"id\" href=\"#size\">size</a>, unsigned long <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__get_vm_area_node\">__get_vm_area_node</a>(<a class=\"id\" href=\"#size\">size</a>, 1, <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#VMALLOC_START\">VMALLOC_START</a>, <a class=\"id\" href=\"#VMALLOC_END\">VMALLOC_END</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#__builtin_return_address\">__builtin_return_address</a>(0));", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#vm_struct\">vm_struct</a> *<a class=\"id\" href=\"#find_vm_area\">find_vm_area</a>(const void *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a> *<a class=\"id\" href=\"#va\">va</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va\">va</a> = <a class=\"id\" href=\"#find_vmap_area\">find_vmap_area</a>((unsigned long)<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#va\">va</a> && <a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#VM_VM_AREA\">VM_VM_AREA</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>remove_vm_area  -  find and remove a continuous kernel virtual area</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@addr:<span class=\"ts\"/><span class=\"ts\"/>base address</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Search for the kernel VM area starting at @addr, and remove it.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function returns the found VM area, but using it is NOT safe</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>on SMP machines, except for its size or flags.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#vm_struct\">vm_struct</a> *<a class=\"id\" href=\"#remove_vm_area\">remove_vm_area</a>(const void *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vmap_area\">vmap_area</a> *<a class=\"id\" href=\"#va\">va</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va\">va</a> = <a class=\"id\" href=\"#find_vmap_area\">find_vmap_area</a>((unsigned long)<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#va\">va</a> && <a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#VM_VM_AREA\">VM_VM_AREA</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_struct\">vm_struct</a> *<a class=\"id\" href=\"#vm\">vm</a> = <a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_struct\">vm_struct</a> *<a class=\"id\" href=\"#tmp\">tmp</a>, **<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * remove from list and disallow access to this vm_struct</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * before unmap. (address range confliction is maintained by</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * vmap.)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_lock\">write_lock</a>(&amp;<a class=\"id\" href=\"#vmlist_lock\">vmlist_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#p\">p</a> = &amp;<a class=\"id\" href=\"#vmlist\">vmlist</a>; (<a class=\"id\" href=\"#tmp\">tmp</a> = *<a class=\"id\" href=\"#p\">p</a>) != <a class=\"id\" href=\"#vm\">vm</a>; <a class=\"id\" href=\"#p\">p</a> = &amp;<a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_unlock\">write_unlock</a>(&amp;<a class=\"id\" href=\"#vmlist_lock\">vmlist_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vmap_debug_free_range\">vmap_debug_free_range</a>(<a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#va_start\">va_start</a>, <a class=\"id\" href=\"#va\">va</a>-><a class=\"id\" href=\"#va_end\">va_end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_unmap_vmap_area\">free_unmap_vmap_area</a>(<a class=\"id\" href=\"#va\">va</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vm\">vm</a>-><a class=\"id\" href=\"#size\">size</a> -= <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#vm\">vm</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__vunmap\">__vunmap</a>(const void *<a class=\"id\" href=\"#addr\">addr</a>, int <a class=\"id\" href=\"#deallocate_pages\">deallocate_pages</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_struct\">vm_struct</a> *<a class=\"id\" href=\"#area\">area</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#addr\">addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>-1) &amp; (unsigned long)<a class=\"id\" href=\"#addr\">addr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN\">WARN</a>(1, <a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"Trying to vfree() bad address (%p)\\n\", <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#area\">area</a> = <a class=\"id\" href=\"#remove_vm_area\">remove_vm_area</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#area\">area</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN\">WARN</a>(1, <a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"Trying to vfree() nonexistent vm area (%p)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_check_no_locks_freed\">debug_check_no_locks_freed</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#debug_check_no_obj_freed\">debug_check_no_obj_freed</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#deallocate_pages\">deallocate_pages</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#nr_pages\">nr_pages</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_page\">__free_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#VM_VPAGES\">VM_VPAGES</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vfree\">vfree</a>(<a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#pages\">pages</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#pages\">pages</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#area\">area</a>);", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>vfree  -  release memory allocated by vmalloc()</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@addr:<span class=\"ts\"/><span class=\"ts\"/>memory base address</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Free the virtually continuous memory area starting at @addr, as</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>obtained from vmalloc(), vmalloc_32() or __vmalloc(). If @addr is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>NULL, no operation is performed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Must not be called in interrupt context.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#vfree\">vfree</a>(const void *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#in_interrupt\">in_interrupt</a>());", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmemleak_free\">kmemleak_free</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__vunmap\">__vunmap</a>(<a class=\"id\" href=\"#addr\">addr</a>, 1);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#vfree\">vfree</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>vunmap  -  release virtual mapping obtained by vmap()</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@addr:<span class=\"ts\"/><span class=\"ts\"/>memory base address</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Free the virtually contiguous memory area starting at @addr,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>which was created from the page array passed to vmap().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Must not be called in interrupt context.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#vunmap\">vunmap</a>(const void *<a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#in_interrupt\">in_interrupt</a>());", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__vunmap\">__vunmap</a>(<a class=\"id\" href=\"#addr\">addr</a>, 0);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#vunmap\">vunmap</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>vmap  -  map an array of pages into virtually contiguous space</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@pages:<span class=\"ts\"/><span class=\"ts\"/>array of page pointers</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@count:<span class=\"ts\"/><span class=\"ts\"/>number of pages to map</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@flags:<span class=\"ts\"/><span class=\"ts\"/>vm_area-&gt;flags</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@prot:<span class=\"ts\"/><span class=\"ts\"/>page protection for the mapping</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Maps @count pages from @pages into contiguous kernel virtual</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>space.</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#vmap\">vmap</a>(struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>, unsigned int <a class=\"id\" href=\"#count\">count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#prot\">prot</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_struct\">vm_struct</a> *<a class=\"id\" href=\"#area\">area</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> &gt; <a class=\"id\" href=\"#totalram_pages\">totalram_pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#area\">area</a> = <a class=\"id\" href=\"#get_vm_area_caller\">get_vm_area_caller</a>((<a class=\"id\" href=\"#count\">count</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>), <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__builtin_return_address\">__builtin_return_address</a>(0));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#area\">area</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#map_vm_area\">map_vm_area</a>(<a class=\"id\" href=\"#area\">area</a>, <a class=\"id\" href=\"#prot\">prot</a>, &amp;<a class=\"id\" href=\"#pages\">pages</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vunmap\">vunmap</a>(<a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#addr\">addr</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#vmap\">vmap</a>);", 
"", 
"static void *<a class=\"id\" href=\"#__vmalloc_node\">__vmalloc_node</a>(unsigned long <a class=\"id\" href=\"#size\">size</a>, unsigned long <a class=\"id\" href=\"#align\">align</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#prot\">prot</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#node\">node</a>, void *<a class=\"id\" href=\"#caller\">caller</a>);", 
"static void *<a class=\"id\" href=\"#__vmalloc_area_node\">__vmalloc_area_node</a>(struct <a class=\"id\" href=\"#vm_struct\">vm_struct</a> *<a class=\"id\" href=\"#area\">area</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#prot\">prot</a>, int <a class=\"id\" href=\"#node\">node</a>, void *<a class=\"id\" href=\"#caller\">caller</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#nr_pages\">nr_pages</a>, <a class=\"id\" href=\"#array_size\">array_size</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#nested_gfp\">nested_gfp</a> = (<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#GFP_RECLAIM_MASK\">GFP_RECLAIM_MASK</a>) | <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr_pages\">nr_pages</a> = (<a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#size\">size</a> - <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>) >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#array_size\">array_size</a> = (<a class=\"id\" href=\"#nr_pages\">nr_pages</a> * sizeof(struct <a class=\"id\" href=\"#page\">page</a> *));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#nr_pages\">nr_pages</a> = <a class=\"id\" href=\"#nr_pages\">nr_pages</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Please note that the recursion is strictly bounded. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#array_size\">array_size</a> &gt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#__vmalloc_node\">__vmalloc_node</a>(<a class=\"id\" href=\"#array_size\">array_size</a>, 1, <a class=\"id\" href=\"#nested_gfp\">nested_gfp</a>|<a class=\"id\" href=\"#__GFP_HIGHMEM\">__GFP_HIGHMEM</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PAGE_KERNEL\">PAGE_KERNEL</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#caller\">caller</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#VM_VPAGES\">VM_VPAGES</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#kmalloc_node\">kmalloc_node</a>(<a class=\"id\" href=\"#array_size\">array_size</a>, <a class=\"id\" href=\"#nested_gfp\">nested_gfp</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#pages\">pages</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#caller\">caller</a> = <a class=\"id\" href=\"#caller\">caller</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#pages\">pages</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#remove_vm_area\">remove_vm_area</a>(<a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#area\">area</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#nr_pages\">nr_pages</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#node\">node</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#alloc_page\">alloc_page</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#alloc_pages_node\">alloc_pages_node</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, 0);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Successfully allocated i pages, free them in __vunmap() */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#nr_pages\">nr_pages</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#map_vm_area\">map_vm_area</a>(<a class=\"id\" href=\"#area\">area</a>, <a class=\"id\" href=\"#prot\">prot</a>, &amp;<a class=\"id\" href=\"#pages\">pages</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<a class=\"id\" href=\"#fail\">fail</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vfree\">vfree</a>(<a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"void *<a class=\"id\" href=\"#__vmalloc_area\">__vmalloc_area</a>(struct <a class=\"id\" href=\"#vm_struct\">vm_struct</a> *<a class=\"id\" href=\"#area\">area</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#prot\">prot</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#__vmalloc_area_node\">__vmalloc_area_node</a>(<a class=\"id\" href=\"#area\">area</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#prot\">prot</a>, -1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#__builtin_return_address\">__builtin_return_address</a>(0));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A ref_count = 3 is needed because the vm_struct and vmap_area</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * structures allocated in the __get_vm_area_node() function contain</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * references to the virtual address of the vmalloc'ed block.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmemleak_alloc\">kmemleak_alloc</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#size\">size</a> - <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, 3, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#addr\">addr</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>__vmalloc_node  -  allocate virtually contiguous memory</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@size:<span class=\"ts\"/><span class=\"ts\"/>allocation size</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@align:<span class=\"ts\"/><span class=\"ts\"/>desired alignment</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@gfp_mask:<span class=\"ts\"/>flags for the page level allocator</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@prot:<span class=\"ts\"/><span class=\"ts\"/>protection mask for the allocated pages</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@node:<span class=\"ts\"/><span class=\"ts\"/>node to use for allocation or -1</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@caller:<span class=\"ts\"/>caller's return address</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Allocate enough pages to cover @size from the page level</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>allocator with @gfp_mask flags.  Map them into contiguous</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>kernel virtual space, using a pagetable protection of @prot.</span>", 
"<span class=\"comment\"> */</span>", 
"static void *<a class=\"id\" href=\"#__vmalloc_node\">__vmalloc_node</a>(unsigned long <a class=\"id\" href=\"#size\">size</a>, unsigned long <a class=\"id\" href=\"#align\">align</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#prot\">prot</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    int <a class=\"id\" href=\"#node\">node</a>, void *<a class=\"id\" href=\"#caller\">caller</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_struct\">vm_struct</a> *<a class=\"id\" href=\"#area\">area</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#real_size\">real_size</a> = <a class=\"id\" href=\"#size\">size</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#PAGE_ALIGN\">PAGE_ALIGN</a>(<a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#size\">size</a> || (<a class=\"id\" href=\"#size\">size</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>) &gt; <a class=\"id\" href=\"#totalram_pages\">totalram_pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#area\">area</a> = <a class=\"id\" href=\"#__get_vm_area_node\">__get_vm_area_node</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>, <a class=\"id\" href=\"#VM_ALLOC\">VM_ALLOC</a>, <a class=\"id\" href=\"#VMALLOC_START\">VMALLOC_START</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#VMALLOC_END\">VMALLOC_END</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#caller\">caller</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#area\">area</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#__vmalloc_area_node\">__vmalloc_area_node</a>(<a class=\"id\" href=\"#area\">area</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#prot\">prot</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#caller\">caller</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A ref_count = 3 is needed because the vm_struct and vmap_area</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * structures allocated in the __get_vm_area_node() function contain</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * references to the virtual address of the vmalloc'ed block.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmemleak_alloc\">kmemleak_alloc</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#real_size\">real_size</a>, 3, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#addr\">addr</a>;", 
"}", 
"", 
"void *<a class=\"id\" href=\"#__vmalloc\">__vmalloc</a>(unsigned long <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#pgprot_t\">pgprot_t</a> <a class=\"id\" href=\"#prot\">prot</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__vmalloc_node\">__vmalloc_node</a>(<a class=\"id\" href=\"#size\">size</a>, 1, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#prot\">prot</a>, -1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__builtin_return_address\">__builtin_return_address</a>(0));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__vmalloc\">__vmalloc</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>vmalloc  -  allocate virtually contiguous memory</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@size:<span class=\"ts\"/><span class=\"ts\"/>allocation size</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Allocate enough pages to cover @size from the page level</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>allocator and map them into contiguous kernel virtual space.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>For tight control over page level allocator and protection flags</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>use __vmalloc() instead.</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#vmalloc\">vmalloc</a>(unsigned long <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__vmalloc_node\">__vmalloc_node</a>(<a class=\"id\" href=\"#size\">size</a>, 1, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a> | <a class=\"id\" href=\"#__GFP_HIGHMEM\">__GFP_HIGHMEM</a>, <a class=\"id\" href=\"#PAGE_KERNEL\">PAGE_KERNEL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>-1, <a class=\"id\" href=\"#__builtin_return_address\">__builtin_return_address</a>(0));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#vmalloc\">vmalloc</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * vmalloc_user - allocate zeroed virtually contiguous memory for userspace</span>", 
"<span class=\"comment\"> * @size: allocation size</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The resulting memory area is zeroed so it can be mapped to userspace</span>", 
"<span class=\"comment\"> * without leaking data.</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#vmalloc_user\">vmalloc_user</a>(unsigned long <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_struct\">vm_struct</a> *<a class=\"id\" href=\"#area\">area</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__vmalloc_node\">__vmalloc_node</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#SHMLBA\">SHMLBA</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a> | <a class=\"id\" href=\"#__GFP_HIGHMEM\">__GFP_HIGHMEM</a> | <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#PAGE_KERNEL\">PAGE_KERNEL</a>, -1, <a class=\"id\" href=\"#__builtin_return_address\">__builtin_return_address</a>(0));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#area\">area</a> = <a class=\"id\" href=\"#find_vm_area\">find_vm_area</a>(<a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#VM_USERMAP\">VM_USERMAP</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#vmalloc_user\">vmalloc_user</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>vmalloc_node  -  allocate memory on a specific node</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@size:<span class=\"ts\"/><span class=\"ts\"/>allocation size</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@node:<span class=\"ts\"/><span class=\"ts\"/>numa node</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Allocate enough pages to cover @size from the page level</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>allocator and map them into contiguous kernel virtual space.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>For tight control over page level allocator and protection flags</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>use __vmalloc() instead.</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#vmalloc_node\">vmalloc_node</a>(unsigned long <a class=\"id\" href=\"#size\">size</a>, int <a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__vmalloc_node\">__vmalloc_node</a>(<a class=\"id\" href=\"#size\">size</a>, 1, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a> | <a class=\"id\" href=\"#__GFP_HIGHMEM\">__GFP_HIGHMEM</a>, <a class=\"id\" href=\"#PAGE_KERNEL\">PAGE_KERNEL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#__builtin_return_address\">__builtin_return_address</a>(0));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#vmalloc_node\">vmalloc_node</a>);", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#PAGE_KERNEL_EXEC\">PAGE_KERNEL_EXEC</a>", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PAGE_KERNEL_EXEC\">PAGE_KERNEL_EXEC</a> <a class=\"id\" href=\"#PAGE_KERNEL\">PAGE_KERNEL</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>vmalloc_exec  -  allocate virtually contiguous, executable memory</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@size:<span class=\"ts\"/><span class=\"ts\"/>allocation size</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Kernel-internal function to allocate enough pages to cover @size</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the page level allocator and map them into contiguous and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>executable kernel virtual space.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>For tight control over page level allocator and protection flags</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>use __vmalloc() instead.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void *<a class=\"id\" href=\"#vmalloc_exec\">vmalloc_exec</a>(unsigned long <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__vmalloc_node\">__vmalloc_node</a>(<a class=\"id\" href=\"#size\">size</a>, 1, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a> | <a class=\"id\" href=\"#__GFP_HIGHMEM\">__GFP_HIGHMEM</a>, <a class=\"id\" href=\"#PAGE_KERNEL_EXEC\">PAGE_KERNEL_EXEC</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      -1, <a class=\"id\" href=\"#__builtin_return_address\">__builtin_return_address</a>(0));", 
"}", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_64BIT\">CONFIG_64BIT</a>) && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_ZONE_DMA32\">CONFIG_ZONE_DMA32</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GFP_VMALLOC32\">GFP_VMALLOC32</a> <a class=\"id\" href=\"#GFP_DMA32\">GFP_DMA32</a> | <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>", 
"#<a class=\"id\" href=\"#elif\">elif</a> <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_64BIT\">CONFIG_64BIT</a>) && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_ZONE_DMA\">CONFIG_ZONE_DMA</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GFP_VMALLOC32\">GFP_VMALLOC32</a> <a class=\"id\" href=\"#GFP_DMA\">GFP_DMA</a> | <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#GFP_VMALLOC32\">GFP_VMALLOC32</a> <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>vmalloc_32  -  allocate virtually contiguous memory (32bit addressable)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@size:<span class=\"ts\"/><span class=\"ts\"/>allocation size</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Allocate enough 32bit PA addressable pages to cover @size from the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>page level allocator and map them into contiguous kernel virtual space.</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#vmalloc_32\">vmalloc_32</a>(unsigned long <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__vmalloc_node\">__vmalloc_node</a>(<a class=\"id\" href=\"#size\">size</a>, 1, <a class=\"id\" href=\"#GFP_VMALLOC32\">GFP_VMALLOC32</a>, <a class=\"id\" href=\"#PAGE_KERNEL\">PAGE_KERNEL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      -1, <a class=\"id\" href=\"#__builtin_return_address\">__builtin_return_address</a>(0));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#vmalloc_32\">vmalloc_32</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * vmalloc_32_user - allocate zeroed virtually contiguous 32bit memory</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@size:<span class=\"ts\"/><span class=\"ts\"/>allocation size</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The resulting memory area is 32bit addressable and zeroed so it can be</span>", 
"<span class=\"comment\"> * mapped to userspace without leaking data.</span>", 
"<span class=\"comment\"> */</span>", 
"void *<a class=\"id\" href=\"#vmalloc_32_user\">vmalloc_32_user</a>(unsigned long <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vm_struct\">vm_struct</a> *<a class=\"id\" href=\"#area\">area</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__vmalloc_node\">__vmalloc_node</a>(<a class=\"id\" href=\"#size\">size</a>, 1, <a class=\"id\" href=\"#GFP_VMALLOC32\">GFP_VMALLOC32</a> | <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>, <a class=\"id\" href=\"#PAGE_KERNEL\">PAGE_KERNEL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     -1, <a class=\"id\" href=\"#__builtin_return_address\">__builtin_return_address</a>(0));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#area\">area</a> = <a class=\"id\" href=\"#find_vm_area\">find_vm_area</a>(<a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#VM_USERMAP\">VM_USERMAP</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#vmalloc_32_user\">vmalloc_32_user</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * small helper routine , copy contents to buf from addr.</span>", 
"<span class=\"comment\"> * If the page is not present, fill zero.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
];
xr_frag_insert('l/21/49d8365330b45bd7a43efa91e61116bedc2303.xr', __xr_tmp);
