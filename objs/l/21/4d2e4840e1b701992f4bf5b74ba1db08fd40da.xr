var __xr_tmp = [
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Module Name: nsxfobj - Public interfaces to the ACPI subsystem</span>", 
"<span class=\"comment\"> *                         ACPI Object oriented interfaces</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (C) 2000 - 2010, Intel Corp.</span>", 
"<span class=\"comment\"> * All rights reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Redistribution and use in source and binary forms, with or without</span>", 
"<span class=\"comment\"> * modification, are permitted provided that the following conditions</span>", 
"<span class=\"comment\"> * are met:</span>", 
"<span class=\"comment\"> * 1. Redistributions of source code must retain the above copyright</span>", 
"<span class=\"comment\"> *    notice, this list of conditions, and the following disclaimer,</span>", 
"<span class=\"comment\"> *    without modification.</span>", 
"<span class=\"comment\"> * 2. Redistributions in binary form must reproduce at minimum a disclaimer</span>", 
"<span class=\"comment\"> *    substantially similar to the \"NO WARRANTY\" disclaimer below</span>", 
"<span class=\"comment\"> *    (\"Disclaimer\") and any redistribution must be conditioned upon</span>", 
"<span class=\"comment\"> *    including a substantially similar Disclaimer requirement for further</span>", 
"<span class=\"comment\"> *    binary redistribution.</span>", 
"<span class=\"comment\"> * 3. Neither the names of the above-listed copyright holders nor the names</span>", 
"<span class=\"comment\"> *    of any contributors may be used to endorse or promote products derived</span>", 
"<span class=\"comment\"> *    from this software without specific prior written permission.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Alternatively, this software may be distributed under the terms of the</span>", 
"<span class=\"comment\"> * GNU General Public License (\"GPL\") version 2 as published by the Free</span>", 
"<span class=\"comment\"> * Software Foundation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NO WARRANTY</span>", 
"<span class=\"comment\"> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span>", 
"<span class=\"comment\"> * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span>", 
"<span class=\"comment\"> * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR</span>", 
"<span class=\"comment\"> * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span>", 
"<span class=\"comment\"> * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span>", 
"<span class=\"comment\"> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS</span>", 
"<span class=\"comment\"> * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</span>", 
"<span class=\"comment\"> * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,</span>", 
"<span class=\"comment\"> * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING</span>", 
"<span class=\"comment\"> * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE</span>", 
"<span class=\"comment\"> * POSSIBILITY OF SUCH DAMAGES.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#acpi\">acpi</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"accommon.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acnamesp.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_COMPONENT\">_COMPONENT</a>          <a class=\"id\" href=\"#ACPI_NAMESPACE\">ACPI_NAMESPACE</a>", 
"<a class=\"id\" href=\"#ACPI_MODULE_NAME\">ACPI_MODULE_NAME</a>(\"nsxfobj\")", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_get_id</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Handle          - Handle of object whose id is desired</span>", 
"<span class=\"comment\"> *              ret_id          - Where the id will be placed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: This routine returns the owner id associated with a handle</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_get_id\">acpi_get_id</a>(<a class=\"id\" href=\"#acpi_handle\">acpi_handle</a> <a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#acpi_owner_id\">acpi_owner_id</a> * <a class=\"id\" href=\"#ret_id\">ret_id</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Parameter Validation */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret_id\">ret_id</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ut_acquire_mutex\">acpi_ut_acquire_mutex</a>(<a class=\"id\" href=\"#ACPI_MTX_NAMESPACE\">ACPI_MTX_NAMESPACE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Convert and validate the handle */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#acpi_ns_validate_handle\">acpi_ns_validate_handle</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#node\">node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>(void)<a class=\"id\" href=\"#acpi_ut_release_mutex\">acpi_ut_release_mutex</a>(<a class=\"id\" href=\"#ACPI_MTX_NAMESPACE\">ACPI_MTX_NAMESPACE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#ret_id\">ret_id</a> = <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#owner_id\">owner_id</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ut_release_mutex\">acpi_ut_release_mutex</a>(<a class=\"id\" href=\"#ACPI_MTX_NAMESPACE\">ACPI_MTX_NAMESPACE</a>);", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#ACPI_EXPORT_SYMBOL\">ACPI_EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_get_id\">acpi_get_id</a>)", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_get_type</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Handle          - Handle of object whose type is desired</span>", 
"<span class=\"comment\"> *              ret_type        - Where the type will be placed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: This routine returns the type associatd with a particular handle</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_get_type\">acpi_get_type</a>(<a class=\"id\" href=\"#acpi_handle\">acpi_handle</a> <a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#acpi_object_type\">acpi_object_type</a> * <a class=\"id\" href=\"#ret_type\">ret_type</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Parameter Validation */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret_type\">ret_type</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Special case for the predefined Root Node</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (return type ANY)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#handle\">handle</a> == <a class=\"id\" href=\"#ACPI_ROOT_OBJECT\">ACPI_ROOT_OBJECT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ret_type\">ret_type</a> = <a class=\"id\" href=\"#ACPI_TYPE_ANY\">ACPI_TYPE_ANY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ut_acquire_mutex\">acpi_ut_acquire_mutex</a>(<a class=\"id\" href=\"#ACPI_MTX_NAMESPACE\">ACPI_MTX_NAMESPACE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Convert and validate the handle */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#acpi_ns_validate_handle\">acpi_ns_validate_handle</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#node\">node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>(void)<a class=\"id\" href=\"#acpi_ut_release_mutex\">acpi_ut_release_mutex</a>(<a class=\"id\" href=\"#ACPI_MTX_NAMESPACE\">ACPI_MTX_NAMESPACE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#ret_type\">ret_type</a> = <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#type\">type</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ut_release_mutex\">acpi_ut_release_mutex</a>(<a class=\"id\" href=\"#ACPI_MTX_NAMESPACE\">ACPI_MTX_NAMESPACE</a>);", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#ACPI_EXPORT_SYMBOL\">ACPI_EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_get_type\">acpi_get_type</a>)", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_get_parent</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Handle          - Handle of object whose parent is desired</span>", 
"<span class=\"comment\"> *              ret_handle      - Where the parent handle will be placed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Returns a handle to the parent of the object represented by</span>", 
"<span class=\"comment\"> *              Handle.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_get_parent\">acpi_get_parent</a>(<a class=\"id\" href=\"#acpi_handle\">acpi_handle</a> <a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#acpi_handle\">acpi_handle</a> * <a class=\"id\" href=\"#ret_handle\">ret_handle</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> *<a class=\"id\" href=\"#parent_node\">parent_node</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret_handle\">ret_handle</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Special case for the predefined Root Node (no parent) */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#handle\">handle</a> == <a class=\"id\" href=\"#ACPI_ROOT_OBJECT\">ACPI_ROOT_OBJECT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_NULL_ENTRY\">AE_NULL_ENTRY</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ut_acquire_mutex\">acpi_ut_acquire_mutex</a>(<a class=\"id\" href=\"#ACPI_MTX_NAMESPACE\">ACPI_MTX_NAMESPACE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Convert and validate the handle */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#acpi_ns_validate_handle\">acpi_ns_validate_handle</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#node\">node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock_and_exit\">unlock_and_exit</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Get the parent entry */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parent_node\">parent_node</a> = <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#ret_handle\">ret_handle</a> = <a class=\"id\" href=\"#ACPI_CAST_PTR\">ACPI_CAST_PTR</a>(<a class=\"id\" href=\"#acpi_handle\">acpi_handle</a>, <a class=\"id\" href=\"#parent_node\">parent_node</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Return exception if parent is null */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#parent_node\">parent_node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_NULL_ENTRY\">AE_NULL_ENTRY</a>;", 
"<span class=\"ts\"/>}", 
"", 
"      <a class=\"id\" href=\"#unlock_and_exit\">unlock_and_exit</a>:", 
"", 
"<span class=\"ts\"/>(void)<a class=\"id\" href=\"#acpi_ut_release_mutex\">acpi_ut_release_mutex</a>(<a class=\"id\" href=\"#ACPI_MTX_NAMESPACE\">ACPI_MTX_NAMESPACE</a>);", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#ACPI_EXPORT_SYMBOL\">ACPI_EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_get_parent\">acpi_get_parent</a>)", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_get_next_object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Type            - Type of object to be searched for</span>", 
"<span class=\"comment\"> *              Parent          - Parent object whose children we are getting</span>", 
"<span class=\"comment\"> *              last_child      - Previous child that was found.</span>", 
"<span class=\"comment\"> *                                The NEXT child will be returned</span>", 
"<span class=\"comment\"> *              ret_handle      - Where handle to the next object is placed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Return the next peer object within the namespace.  If Handle is</span>", 
"<span class=\"comment\"> *              valid, Scope is ignored.  Otherwise, the first object within</span>", 
"<span class=\"comment\"> *              Scope is returned.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_get_next_object\">acpi_get_next_object</a>(<a class=\"id\" href=\"#acpi_object_type\">acpi_object_type</a> <a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#acpi_handle\">acpi_handle</a> <a class=\"id\" href=\"#parent\">parent</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#acpi_handle\">acpi_handle</a> <a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#acpi_handle\">acpi_handle</a> * <a class=\"id\" href=\"#ret_handle\">ret_handle</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> *<a class=\"id\" href=\"#parent_node\">parent_node</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> *<a class=\"id\" href=\"#child_node\">child_node</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Parameter validation */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> &gt; <a class=\"id\" href=\"#ACPI_TYPE_EXTERNAL_MAX\">ACPI_TYPE_EXTERNAL_MAX</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ut_acquire_mutex\">acpi_ut_acquire_mutex</a>(<a class=\"id\" href=\"#ACPI_MTX_NAMESPACE\">ACPI_MTX_NAMESPACE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If null handle, use the parent */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#child\">child</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Start search at the beginning of the specified scope */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parent_node\">parent_node</a> = <a class=\"id\" href=\"#acpi_ns_validate_handle\">acpi_ns_validate_handle</a>(<a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#parent_node\">parent_node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock_and_exit\">unlock_and_exit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Non-null handle, ignore the parent */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Convert and validate the handle */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#child_node\">child_node</a> = <a class=\"id\" href=\"#acpi_ns_validate_handle\">acpi_ns_validate_handle</a>(<a class=\"id\" href=\"#child\">child</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#child_node\">child_node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock_and_exit\">unlock_and_exit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Internal function does the real work */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#acpi_ns_get_next_node_typed\">acpi_ns_get_next_node_typed</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#parent_node\">parent_node</a>, <a class=\"id\" href=\"#child_node\">child_node</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#node\">node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_NOT_FOUND\">AE_NOT_FOUND</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock_and_exit\">unlock_and_exit</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret_handle\">ret_handle</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ret_handle\">ret_handle</a> = <a class=\"id\" href=\"#ACPI_CAST_PTR\">ACPI_CAST_PTR</a>(<a class=\"id\" href=\"#acpi_handle\">acpi_handle</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/>}", 
"", 
"      <a class=\"id\" href=\"#unlock_and_exit\">unlock_and_exit</a>:", 
"", 
"<span class=\"ts\"/>(void)<a class=\"id\" href=\"#acpi_ut_release_mutex\">acpi_ut_release_mutex</a>(<a class=\"id\" href=\"#ACPI_MTX_NAMESPACE\">ACPI_MTX_NAMESPACE</a>);", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#ACPI_EXPORT_SYMBOL\">ACPI_EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_get_next_object\">acpi_get_next_object</a>)", 
];
xr_frag_insert('l/21/4d2e4840e1b701992f4bf5b74ba1db08fd40da.xr', __xr_tmp);
