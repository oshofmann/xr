var __xr_tmp = [
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Get the overflow emergency buffer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#io_tlb_overflow_buffer\">io_tlb_overflow_buffer</a> = <a class=\"id\" href=\"#alloc_bootmem_low\">alloc_bootmem_low</a>(<a class=\"id\" href=\"#io_tlb_overflow\">io_tlb_overflow</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#io_tlb_overflow_buffer\">io_tlb_overflow_buffer</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"Cannot allocate SWIOTLB overflow buffer!\\n\");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#verbose\">verbose</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swiotlb_print_info\">swiotlb_print_info</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Statically reserve bounce buffer space and initialize bounce buffer data</span>", 
"<span class=\"comment\"> * structures for the software IO TLB used to implement the DMA API.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a>", 
"<a class=\"id\" href=\"#swiotlb_init_with_default_size\">swiotlb_init_with_default_size</a>(<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#default_size\">default_size</a>, int <a class=\"id\" href=\"#verbose\">verbose</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#bytes\">bytes</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#io_tlb_nslabs\">io_tlb_nslabs</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#io_tlb_nslabs\">io_tlb_nslabs</a> = (<a class=\"id\" href=\"#default_size\">default_size</a> >> <a class=\"id\" href=\"#IO_TLB_SHIFT\">IO_TLB_SHIFT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#io_tlb_nslabs\">io_tlb_nslabs</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#io_tlb_nslabs\">io_tlb_nslabs</a>, <a class=\"id\" href=\"#IO_TLB_SEGSIZE\">IO_TLB_SEGSIZE</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bytes\">bytes</a> = <a class=\"id\" href=\"#io_tlb_nslabs\">io_tlb_nslabs</a> << <a class=\"id\" href=\"#IO_TLB_SHIFT\">IO_TLB_SHIFT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Get IO TLB memory from the low pages</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#io_tlb_start\">io_tlb_start</a> = <a class=\"id\" href=\"#alloc_bootmem_low_pages\">alloc_bootmem_low_pages</a>(<a class=\"id\" href=\"#bytes\">bytes</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#io_tlb_start\">io_tlb_start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"Cannot allocate SWIOTLB buffer\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swiotlb_init_with_tbl\">swiotlb_init_with_tbl</a>(<a class=\"id\" href=\"#io_tlb_start\">io_tlb_start</a>, <a class=\"id\" href=\"#io_tlb_nslabs\">io_tlb_nslabs</a>, <a class=\"id\" href=\"#verbose\">verbose</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a>", 
"<a class=\"id\" href=\"#swiotlb_init\">swiotlb_init</a>(int <a class=\"id\" href=\"#verbose\">verbose</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swiotlb_init_with_default_size\">swiotlb_init_with_default_size</a>(64 * (1<<20), <a class=\"id\" href=\"#verbose\">verbose</a>);<span class=\"ts\"/><span class=\"comment\">/* default to 64MB */</span>", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Systems with larger DMA zones (those that don't support ISA) can</span>", 
"<span class=\"comment\"> * initialize the swiotlb later using the slab allocator if needed.</span>", 
"<span class=\"comment\"> * This should be just like above, but with some error catching.</span>", 
"<span class=\"comment\"> */</span>", 
"int", 
"<a class=\"id\" href=\"#swiotlb_late_init_with_default_size\">swiotlb_late_init_with_default_size</a>(<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#default_size\">default_size</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#bytes\">bytes</a>, <a class=\"id\" href=\"#req_nslabs\">req_nslabs</a> = <a class=\"id\" href=\"#io_tlb_nslabs\">io_tlb_nslabs</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#order\">order</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#io_tlb_nslabs\">io_tlb_nslabs</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#io_tlb_nslabs\">io_tlb_nslabs</a> = (<a class=\"id\" href=\"#default_size\">default_size</a> >> <a class=\"id\" href=\"#IO_TLB_SHIFT\">IO_TLB_SHIFT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#io_tlb_nslabs\">io_tlb_nslabs</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#io_tlb_nslabs\">io_tlb_nslabs</a>, <a class=\"id\" href=\"#IO_TLB_SEGSIZE\">IO_TLB_SEGSIZE</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Get IO TLB memory from the low pages</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#order\">order</a> = <a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#io_tlb_nslabs\">io_tlb_nslabs</a> << <a class=\"id\" href=\"#IO_TLB_SHIFT\">IO_TLB_SHIFT</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#io_tlb_nslabs\">io_tlb_nslabs</a> = <a class=\"id\" href=\"#SLABS_PER_PAGE\">SLABS_PER_PAGE</a> << <a class=\"id\" href=\"#order\">order</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bytes\">bytes</a> = <a class=\"id\" href=\"#io_tlb_nslabs\">io_tlb_nslabs</a> << <a class=\"id\" href=\"#IO_TLB_SHIFT\">IO_TLB_SHIFT</a>;", 
"", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#SLABS_PER_PAGE\">SLABS_PER_PAGE</a> << <a class=\"id\" href=\"#order\">order</a>) &gt; <a class=\"id\" href=\"#IO_TLB_MIN_SLABS\">IO_TLB_MIN_SLABS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#io_tlb_start\">io_tlb_start</a> = (void *)<a class=\"id\" href=\"#__get_free_pages\">__get_free_pages</a>(<a class=\"id\" href=\"#GFP_DMA\">GFP_DMA</a> | <a class=\"id\" href=\"#__GFP_NOWARN\">__GFP_NOWARN</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#io_tlb_start\">io_tlb_start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#order\">order</a>--;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#io_tlb_start\">io_tlb_start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup1\">cleanup1</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#order\">order</a> != <a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#bytes\">bytes</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"Warning: only able to allocate %ld MB \"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"for software IO TLB\\n\", (<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> << <a class=\"id\" href=\"#order\">order</a>) >> 20);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#io_tlb_nslabs\">io_tlb_nslabs</a> = <a class=\"id\" href=\"#SLABS_PER_PAGE\">SLABS_PER_PAGE</a> << <a class=\"id\" href=\"#order\">order</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bytes\">bytes</a> = <a class=\"id\" href=\"#io_tlb_nslabs\">io_tlb_nslabs</a> << <a class=\"id\" href=\"#IO_TLB_SHIFT\">IO_TLB_SHIFT</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#io_tlb_end\">io_tlb_end</a> = <a class=\"id\" href=\"#io_tlb_start\">io_tlb_start</a> + <a class=\"id\" href=\"#bytes\">bytes</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#io_tlb_start\">io_tlb_start</a>, 0, <a class=\"id\" href=\"#bytes\">bytes</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Allocate and initialize the free list array.  This array is used</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to find contiguous free memory regions of size up to IO_TLB_SEGSIZE</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * between io_tlb_start and io_tlb_end.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#io_tlb_list\">io_tlb_list</a> = (unsigned int *)<a class=\"id\" href=\"#__get_free_pages\">__get_free_pages</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>,", 
"<span class=\"ts\"/>                              <a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#io_tlb_nslabs\">io_tlb_nslabs</a> * sizeof(int)));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#io_tlb_list\">io_tlb_list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup2\">cleanup2</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#io_tlb_nslabs\">io_tlb_nslabs</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
" <span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#io_tlb_list\">io_tlb_list</a>[<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#IO_TLB_SEGSIZE\">IO_TLB_SEGSIZE</a> - <a class=\"id\" href=\"#OFFSET\">OFFSET</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#IO_TLB_SEGSIZE\">IO_TLB_SEGSIZE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#io_tlb_index\">io_tlb_index</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#io_tlb_orig_addr\">io_tlb_orig_addr</a> = (<a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> *)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__get_free_pages\">__get_free_pages</a>(<a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#io_tlb_nslabs\">io_tlb_nslabs</a> *", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   sizeof(<a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a>)));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#io_tlb_orig_addr\">io_tlb_orig_addr</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup3\">cleanup3</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#io_tlb_orig_addr\">io_tlb_orig_addr</a>, 0, <a class=\"id\" href=\"#io_tlb_nslabs\">io_tlb_nslabs</a> * sizeof(<a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Get the overflow emergency buffer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#io_tlb_overflow_buffer\">io_tlb_overflow_buffer</a> = (void *)<a class=\"id\" href=\"#__get_free_pages\">__get_free_pages</a>(<a class=\"id\" href=\"#GFP_DMA\">GFP_DMA</a>,", 
"<span class=\"ts\"/>                                          <a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#io_tlb_overflow\">io_tlb_overflow</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#io_tlb_overflow_buffer\">io_tlb_overflow_buffer</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup4\">cleanup4</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swiotlb_print_info\">swiotlb_print_info</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#late_alloc\">late_alloc</a> = 1;", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#cleanup4\">cleanup4</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_pages\">free_pages</a>((unsigned long)<a class=\"id\" href=\"#io_tlb_orig_addr\">io_tlb_orig_addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#io_tlb_nslabs\">io_tlb_nslabs</a> * sizeof(<a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a>)));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#io_tlb_orig_addr\">io_tlb_orig_addr</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<a class=\"id\" href=\"#cleanup3\">cleanup3</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_pages\">free_pages</a>((unsigned long)<a class=\"id\" href=\"#io_tlb_list\">io_tlb_list</a>, <a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#io_tlb_nslabs\">io_tlb_nslabs</a> *", 
"<span class=\"ts\"/>                                                 sizeof(int)));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#io_tlb_list\">io_tlb_list</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<a class=\"id\" href=\"#cleanup2\">cleanup2</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#io_tlb_end\">io_tlb_end</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_pages\">free_pages</a>((unsigned long)<a class=\"id\" href=\"#io_tlb_start\">io_tlb_start</a>, <a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#io_tlb_start\">io_tlb_start</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<a class=\"id\" href=\"#cleanup1\">cleanup1</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#io_tlb_nslabs\">io_tlb_nslabs</a> = <a class=\"id\" href=\"#req_nslabs\">req_nslabs</a>;", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#swiotlb_free\">swiotlb_free</a>(void)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#io_tlb_overflow_buffer\">io_tlb_overflow_buffer</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#late_alloc\">late_alloc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_pages\">free_pages</a>((unsigned long)<a class=\"id\" href=\"#io_tlb_overflow_buffer\">io_tlb_overflow_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#io_tlb_overflow\">io_tlb_overflow</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_pages\">free_pages</a>((unsigned long)<a class=\"id\" href=\"#io_tlb_orig_addr\">io_tlb_orig_addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#io_tlb_nslabs\">io_tlb_nslabs</a> * sizeof(<a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a>)));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_pages\">free_pages</a>((unsigned long)<a class=\"id\" href=\"#io_tlb_list\">io_tlb_list</a>, <a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#io_tlb_nslabs\">io_tlb_nslabs</a> *", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> sizeof(int)));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_pages\">free_pages</a>((unsigned long)<a class=\"id\" href=\"#io_tlb_start\">io_tlb_start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#io_tlb_nslabs\">io_tlb_nslabs</a> << <a class=\"id\" href=\"#IO_TLB_SHIFT\">IO_TLB_SHIFT</a>));", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_bootmem_late\">free_bootmem_late</a>(<a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#io_tlb_overflow_buffer\">io_tlb_overflow_buffer</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#io_tlb_overflow\">io_tlb_overflow</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_bootmem_late\">free_bootmem_late</a>(<a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#io_tlb_orig_addr\">io_tlb_orig_addr</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#io_tlb_nslabs\">io_tlb_nslabs</a> * sizeof(<a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_bootmem_late\">free_bootmem_late</a>(<a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#io_tlb_list\">io_tlb_list</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#io_tlb_nslabs\">io_tlb_nslabs</a> * sizeof(int));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_bootmem_late\">free_bootmem_late</a>(<a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#io_tlb_start\">io_tlb_start</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#io_tlb_nslabs\">io_tlb_nslabs</a> << <a class=\"id\" href=\"#IO_TLB_SHIFT\">IO_TLB_SHIFT</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#is_swiotlb_buffer\">is_swiotlb_buffer</a>(<a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#paddr\">paddr</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#paddr\">paddr</a> >= <a class=\"id\" href=\"#virt_to_phys\">virt_to_phys</a>(<a class=\"id\" href=\"#io_tlb_start\">io_tlb_start</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#paddr\">paddr</a> &lt; <a class=\"id\" href=\"#virt_to_phys\">virt_to_phys</a>(<a class=\"id\" href=\"#io_tlb_end\">io_tlb_end</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Bounce: copy the swiotlb buffer back to the original dma location</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#swiotlb_bounce\">swiotlb_bounce</a>(<a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#phys\">phys</a>, char *<a class=\"id\" href=\"#dma_addr\">dma_addr</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#dir\">dir</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#PFN_DOWN\">PFN_DOWN</a>(<a class=\"id\" href=\"#phys\">phys</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageHighMem\">PageHighMem</a>(<a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#pfn\">pfn</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The buffer does not have a mapping.  Map it in and copy */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#phys\">phys</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#sz\">sz</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#size\">size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sz\">sz</a> = <a class=\"id\" href=\"#min_t\">min_t</a>(<a class=\"id\" href=\"#size_t\">size_t</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> - <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#kmap_atomic\">kmap_atomic</a>(<a class=\"id\" href=\"#pfn_to_page\">pfn_to_page</a>(<a class=\"id\" href=\"#pfn\">pfn</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#KM_BOUNCE_READ\">KM_BOUNCE_READ</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dir\">dir</a> == <a class=\"id\" href=\"#DMA_TO_DEVICE\">DMA_TO_DEVICE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#dma_addr\">dma_addr</a>, <a class=\"id\" href=\"#buffer\">buffer</a> + <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#sz\">sz</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#buffer\">buffer</a> + <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#dma_addr\">dma_addr</a>, <a class=\"id\" href=\"#sz\">sz</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kunmap_atomic\">kunmap_atomic</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#KM_BOUNCE_READ\">KM_BOUNCE_READ</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> -= <a class=\"id\" href=\"#sz\">sz</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pfn\">pfn</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_addr\">dma_addr</a> += <a class=\"id\" href=\"#sz\">sz</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dir\">dir</a> == <a class=\"id\" href=\"#DMA_TO_DEVICE\">DMA_TO_DEVICE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#dma_addr\">dma_addr</a>, <a class=\"id\" href=\"#phys_to_virt\">phys_to_virt</a>(<a class=\"id\" href=\"#phys\">phys</a>), <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#phys_to_virt\">phys_to_virt</a>(<a class=\"id\" href=\"#phys\">phys</a>), <a class=\"id\" href=\"#dma_addr\">dma_addr</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#swiotlb_bounce\">swiotlb_bounce</a>);", 
"", 
"void *<a class=\"id\" href=\"#swiotlb_tbl_map_single\">swiotlb_tbl_map_single</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#tbl_dma_addr\">tbl_dma_addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#phys\">phys</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#dir\">dir</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#dma_addr\">dma_addr</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#nslots\">nslots</a>, <a class=\"id\" href=\"#stride\">stride</a>, <a class=\"id\" href=\"#index\">index</a>, <a class=\"id\" href=\"#wrap\">wrap</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#offset_slots\">offset_slots</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#max_slots\">max_slots</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mask\">mask</a> = <a class=\"id\" href=\"#dma_get_seg_boundary\">dma_get_seg_boundary</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tbl_dma_addr\">tbl_dma_addr</a> &= <a class=\"id\" href=\"#mask\">mask</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset_slots\">offset_slots</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#tbl_dma_addr\">tbl_dma_addr</a>, 1 << <a class=\"id\" href=\"#IO_TLB_SHIFT\">IO_TLB_SHIFT</a>) >> <a class=\"id\" href=\"#IO_TLB_SHIFT\">IO_TLB_SHIFT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"> <span class=\"ts\"/> * Carefully handle integer overflow which can occur when mask == ~0UL.</span>", 
"<span class=\"comment\"> <span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_slots\">max_slots</a> = <a class=\"id\" href=\"#mask\">mask</a> + 1", 
"<span class=\"ts\"/><span class=\"ts\"/>    ? <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#mask\">mask</a> + 1, 1 << <a class=\"id\" href=\"#IO_TLB_SHIFT\">IO_TLB_SHIFT</a>) >> <a class=\"id\" href=\"#IO_TLB_SHIFT\">IO_TLB_SHIFT</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>    : 1UL << (<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> - <a class=\"id\" href=\"#IO_TLB_SHIFT\">IO_TLB_SHIFT</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For mappings greater than a page, we limit the stride (and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * hence alignment) to a page size.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nslots\">nslots</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#size\">size</a>, 1 << <a class=\"id\" href=\"#IO_TLB_SHIFT\">IO_TLB_SHIFT</a>) >> <a class=\"id\" href=\"#IO_TLB_SHIFT\">IO_TLB_SHIFT</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stride\">stride</a> = (1 << (<a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a> - <a class=\"id\" href=\"#IO_TLB_SHIFT\">IO_TLB_SHIFT</a>));", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stride\">stride</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#nslots\">nslots</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Find suitable number of IO TLB entries size that will fit this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * request and allocate a buffer from that IO TLB pool.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#io_tlb_lock\">io_tlb_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#io_tlb_index\">io_tlb_index</a>, <a class=\"id\" href=\"#stride\">stride</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#index\">index</a> >= <a class=\"id\" href=\"#io_tlb_nslabs\">io_tlb_nslabs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wrap\">wrap</a> = <a class=\"id\" href=\"#index\">index</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#iommu_is_span_boundary\">iommu_is_span_boundary</a>(<a class=\"id\" href=\"#index\">index</a>, <a class=\"id\" href=\"#nslots\">nslots</a>, <a class=\"id\" href=\"#offset_slots\">offset_slots</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#max_slots\">max_slots</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> += <a class=\"id\" href=\"#stride\">stride</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#index\">index</a> >= <a class=\"id\" href=\"#io_tlb_nslabs\">io_tlb_nslabs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#index\">index</a> == <a class=\"id\" href=\"#wrap\">wrap</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#not_found\">not_found</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If we find a slot that indicates we have 'nslots' number of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * contiguous buffers, we allocate the buffers from that slot</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and mark the entries as '0' indicating unavailable.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#io_tlb_list\">io_tlb_list</a>[<a class=\"id\" href=\"#index\">index</a>] >= <a class=\"id\" href=\"#nslots\">nslots</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#index\">index</a>; <a class=\"id\" href=\"#i\">i</a> &lt; (int) (<a class=\"id\" href=\"#index\">index</a> + <a class=\"id\" href=\"#nslots\">nslots</a>); <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#io_tlb_list\">io_tlb_list</a>[<a class=\"id\" href=\"#i\">i</a>] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#index\">index</a> - 1; (<a class=\"id\" href=\"#OFFSET\">OFFSET</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#IO_TLB_SEGSIZE\">IO_TLB_SEGSIZE</a>) != <a class=\"id\" href=\"#IO_TLB_SEGSIZE\">IO_TLB_SEGSIZE</a> - 1) && <a class=\"id\" href=\"#io_tlb_list\">io_tlb_list</a>[<a class=\"id\" href=\"#i\">i</a>]; <a class=\"id\" href=\"#i\">i</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#io_tlb_list\">io_tlb_list</a>[<a class=\"id\" href=\"#i\">i</a>] = ++<a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_addr\">dma_addr</a> = <a class=\"id\" href=\"#io_tlb_start\">io_tlb_start</a> + (<a class=\"id\" href=\"#index\">index</a> << <a class=\"id\" href=\"#IO_TLB_SHIFT\">IO_TLB_SHIFT</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Update the indices to avoid searching in the next</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * round.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#io_tlb_index\">io_tlb_index</a> = ((<a class=\"id\" href=\"#index\">index</a> + <a class=\"id\" href=\"#nslots\">nslots</a>) &lt; <a class=\"id\" href=\"#io_tlb_nslabs\">io_tlb_nslabs</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>? (<a class=\"id\" href=\"#index\">index</a> + <a class=\"id\" href=\"#nslots\">nslots</a>) : 0);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found\">found</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> += <a class=\"id\" href=\"#stride\">stride</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#index\">index</a> >= <a class=\"id\" href=\"#io_tlb_nslabs\">io_tlb_nslabs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = 0;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#index\">index</a> != <a class=\"id\" href=\"#wrap\">wrap</a>);", 
"", 
"<a class=\"id\" href=\"#not_found\">not_found</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#io_tlb_lock\">io_tlb_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<a class=\"id\" href=\"#found\">found</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#io_tlb_lock\">io_tlb_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Save away the mapping from the original address to the DMA address.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This is needed when we sync the memory.  Then we sync the buffer if</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * needed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nslots\">nslots</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#io_tlb_orig_addr\">io_tlb_orig_addr</a>[<a class=\"id\" href=\"#index\">index</a>+<a class=\"id\" href=\"#i\">i</a>] = <a class=\"id\" href=\"#phys\">phys</a> + (<a class=\"id\" href=\"#i\">i</a> << <a class=\"id\" href=\"#IO_TLB_SHIFT\">IO_TLB_SHIFT</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dir\">dir</a> == <a class=\"id\" href=\"#DMA_TO_DEVICE\">DMA_TO_DEVICE</a> || <a class=\"id\" href=\"#dir\">dir</a> == <a class=\"id\" href=\"#DMA_BIDIRECTIONAL\">DMA_BIDIRECTIONAL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swiotlb_bounce\">swiotlb_bounce</a>(<a class=\"id\" href=\"#phys\">phys</a>, <a class=\"id\" href=\"#dma_addr\">dma_addr</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#DMA_TO_DEVICE\">DMA_TO_DEVICE</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dma_addr\">dma_addr</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#swiotlb_tbl_map_single\">swiotlb_tbl_map_single</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Allocates bounce buffer and returns its kernel virtual address.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void *", 
"<a class=\"id\" href=\"#map_single\">map_single</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#phys\">phys</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/>   enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#dir\">dir</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#start_dma_addr\">start_dma_addr</a> = <a class=\"id\" href=\"#swiotlb_virt_to_bus\">swiotlb_virt_to_bus</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#io_tlb_start\">io_tlb_start</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#swiotlb_tbl_map_single\">swiotlb_tbl_map_single</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#start_dma_addr\">start_dma_addr</a>, <a class=\"id\" href=\"#phys\">phys</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#dir\">dir</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * dma_addr is the kernel virtual address of the bounce buffer to unmap.</span>", 
"<span class=\"comment\"> */</span>", 
"void", 
"<a class=\"id\" href=\"#swiotlb_tbl_unmap_single\">swiotlb_tbl_unmap_single</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#hwdev\">hwdev</a>, char *<a class=\"id\" href=\"#dma_addr\">dma_addr</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#dir\">dir</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#nslots\">nslots</a> = <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#size\">size</a>, 1 << <a class=\"id\" href=\"#IO_TLB_SHIFT\">IO_TLB_SHIFT</a>) >> <a class=\"id\" href=\"#IO_TLB_SHIFT\">IO_TLB_SHIFT</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#index\">index</a> = (<a class=\"id\" href=\"#dma_addr\">dma_addr</a> - <a class=\"id\" href=\"#io_tlb_start\">io_tlb_start</a>) >> <a class=\"id\" href=\"#IO_TLB_SHIFT\">IO_TLB_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#phys\">phys</a> = <a class=\"id\" href=\"#io_tlb_orig_addr\">io_tlb_orig_addr</a>[<a class=\"id\" href=\"#index\">index</a>];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * First, sync the memory before unmapping the entry</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#phys\">phys</a> && ((<a class=\"id\" href=\"#dir\">dir</a> == <a class=\"id\" href=\"#DMA_FROM_DEVICE\">DMA_FROM_DEVICE</a>) || (<a class=\"id\" href=\"#dir\">dir</a> == <a class=\"id\" href=\"#DMA_BIDIRECTIONAL\">DMA_BIDIRECTIONAL</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swiotlb_bounce\">swiotlb_bounce</a>(<a class=\"id\" href=\"#phys\">phys</a>, <a class=\"id\" href=\"#dma_addr\">dma_addr</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#DMA_FROM_DEVICE\">DMA_FROM_DEVICE</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Return the buffer to the free list by setting the corresponding</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * entries to indicate the number of contiguous entries available.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * While returning the entries to the free list, we merge the entries</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * with slots below and above the pool being returned.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#io_tlb_lock\">io_tlb_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = ((<a class=\"id\" href=\"#index\">index</a> + <a class=\"id\" href=\"#nslots\">nslots</a>) &lt; <a class=\"id\" href=\"#ALIGN\">ALIGN</a>(<a class=\"id\" href=\"#index\">index</a> + 1, <a class=\"id\" href=\"#IO_TLB_SEGSIZE\">IO_TLB_SEGSIZE</a>) ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#io_tlb_list\">io_tlb_list</a>[<a class=\"id\" href=\"#index\">index</a> + <a class=\"id\" href=\"#nslots\">nslots</a>] : 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Step 1: return the slots to the free list, merging the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * slots with superceeding slots</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#index\">index</a> + <a class=\"id\" href=\"#nslots\">nslots</a> - 1; <a class=\"id\" href=\"#i\">i</a> >= <a class=\"id\" href=\"#index\">index</a>; <a class=\"id\" href=\"#i\">i</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#io_tlb_list\">io_tlb_list</a>[<a class=\"id\" href=\"#i\">i</a>] = ++<a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Step 2: merge the returned slots with the preceding slots,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * if available (non zero)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#index\">index</a> - 1; (<a class=\"id\" href=\"#OFFSET\">OFFSET</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#IO_TLB_SEGSIZE\">IO_TLB_SEGSIZE</a>) != <a class=\"id\" href=\"#IO_TLB_SEGSIZE\">IO_TLB_SEGSIZE</a> -1) && <a class=\"id\" href=\"#io_tlb_list\">io_tlb_list</a>[<a class=\"id\" href=\"#i\">i</a>]; <a class=\"id\" href=\"#i\">i</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#io_tlb_list\">io_tlb_list</a>[<a class=\"id\" href=\"#i\">i</a>] = ++<a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#io_tlb_lock\">io_tlb_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#swiotlb_tbl_unmap_single\">swiotlb_tbl_unmap_single</a>);", 
"", 
"void", 
"<a class=\"id\" href=\"#swiotlb_tbl_sync_single\">swiotlb_tbl_sync_single</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#hwdev\">hwdev</a>, char *<a class=\"id\" href=\"#dma_addr\">dma_addr</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#dma_sync_target\">dma_sync_target</a> <a class=\"id\" href=\"#target\">target</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#index\">index</a> = (<a class=\"id\" href=\"#dma_addr\">dma_addr</a> - <a class=\"id\" href=\"#io_tlb_start\">io_tlb_start</a>) >> <a class=\"id\" href=\"#IO_TLB_SHIFT\">IO_TLB_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#phys\">phys</a> = <a class=\"id\" href=\"#io_tlb_orig_addr\">io_tlb_orig_addr</a>[<a class=\"id\" href=\"#index\">index</a>];", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phys\">phys</a> += ((unsigned long)<a class=\"id\" href=\"#dma_addr\">dma_addr</a> &amp; ((1 << <a class=\"id\" href=\"#IO_TLB_SHIFT\">IO_TLB_SHIFT</a>) - 1));", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#target\">target</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SYNC_FOR_CPU\">SYNC_FOR_CPU</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#dir\">dir</a> == <a class=\"id\" href=\"#DMA_FROM_DEVICE\">DMA_FROM_DEVICE</a> || <a class=\"id\" href=\"#dir\">dir</a> == <a class=\"id\" href=\"#DMA_BIDIRECTIONAL\">DMA_BIDIRECTIONAL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swiotlb_bounce\">swiotlb_bounce</a>(<a class=\"id\" href=\"#phys\">phys</a>, <a class=\"id\" href=\"#dma_addr\">dma_addr</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#DMA_FROM_DEVICE\">DMA_FROM_DEVICE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#dir\">dir</a> != <a class=\"id\" href=\"#DMA_TO_DEVICE\">DMA_TO_DEVICE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SYNC_FOR_DEVICE\">SYNC_FOR_DEVICE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#dir\">dir</a> == <a class=\"id\" href=\"#DMA_TO_DEVICE\">DMA_TO_DEVICE</a> || <a class=\"id\" href=\"#dir\">dir</a> == <a class=\"id\" href=\"#DMA_BIDIRECTIONAL\">DMA_BIDIRECTIONAL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swiotlb_bounce\">swiotlb_bounce</a>(<a class=\"id\" href=\"#phys\">phys</a>, <a class=\"id\" href=\"#dma_addr\">dma_addr</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#DMA_TO_DEVICE\">DMA_TO_DEVICE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#dir\">dir</a> != <a class=\"id\" href=\"#DMA_FROM_DEVICE\">DMA_FROM_DEVICE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#swiotlb_tbl_sync_single\">swiotlb_tbl_sync_single</a>);", 
"", 
"void *", 
"<a class=\"id\" href=\"#swiotlb_alloc_coherent\">swiotlb_alloc_coherent</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> *<a class=\"id\" href=\"#dma_handle\">dma_handle</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#dev_addr\">dev_addr</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#order\">order</a> = <a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#dma_mask\">dma_mask</a> = <a class=\"id\" href=\"#DMA_BIT_MASK\">DMA_BIT_MASK</a>(32);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hwdev\">hwdev</a> && <a class=\"id\" href=\"#hwdev\">hwdev</a>-><a class=\"id\" href=\"#coherent_dma_mask\">coherent_dma_mask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_mask\">dma_mask</a> = <a class=\"id\" href=\"#hwdev\">hwdev</a>-><a class=\"id\" href=\"#coherent_dma_mask\">coherent_dma_mask</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = (void *)<a class=\"id\" href=\"#__get_free_pages\">__get_free_pages</a>(<a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> && <a class=\"id\" href=\"#swiotlb_virt_to_bus\">swiotlb_virt_to_bus</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#ret\">ret</a>) + <a class=\"id\" href=\"#size\">size</a> - 1 &gt; <a class=\"id\" href=\"#dma_mask\">dma_mask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The allocated memory isn't reachable by the device.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_pages\">free_pages</a>((unsigned long) <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We are either out of memory or the device can't DMA to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * GFP_DMA memory; fall back on map_single(), which</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * will grab memory from the lowest available address range.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#map_single\">map_single</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, 0, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#DMA_FROM_DEVICE\">DMA_FROM_DEVICE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#ret\">ret</a>, 0, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_addr\">dev_addr</a> = <a class=\"id\" href=\"#swiotlb_virt_to_bus\">swiotlb_virt_to_bus</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#ret\">ret</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Confirm address can be DMA'd by device */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dev_addr\">dev_addr</a> + <a class=\"id\" href=\"#size\">size</a> - 1 &gt; <a class=\"id\" href=\"#dma_mask\">dma_mask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"hwdev DMA mask = 0x%016Lx, dev_addr = 0x%016Lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       (unsigned long long)<a class=\"id\" href=\"#dma_mask\">dma_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       (unsigned long long)<a class=\"id\" href=\"#dev_addr\">dev_addr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* DMA_TO_DEVICE to avoid memcpy in unmap_single */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swiotlb_tbl_unmap_single\">swiotlb_tbl_unmap_single</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#DMA_TO_DEVICE\">DMA_TO_DEVICE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#dma_handle\">dma_handle</a> = <a class=\"id\" href=\"#dev_addr\">dev_addr</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#swiotlb_alloc_coherent\">swiotlb_alloc_coherent</a>);", 
"", 
"void", 
"<a class=\"id\" href=\"#swiotlb_free_coherent\">swiotlb_free_coherent</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, void *<a class=\"id\" href=\"#vaddr\">vaddr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#dev_addr\">dev_addr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#paddr\">paddr</a> = <a class=\"id\" href=\"#dma_to_phys\">dma_to_phys</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#dev_addr\">dev_addr</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>());", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_swiotlb_buffer\">is_swiotlb_buffer</a>(<a class=\"id\" href=\"#paddr\">paddr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_pages\">free_pages</a>((unsigned long)<a class=\"id\" href=\"#vaddr\">vaddr</a>, <a class=\"id\" href=\"#get_order\">get_order</a>(<a class=\"id\" href=\"#size\">size</a>));", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* DMA_TO_DEVICE to avoid memcpy in swiotlb_tbl_unmap_single */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swiotlb_tbl_unmap_single\">swiotlb_tbl_unmap_single</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#vaddr\">vaddr</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#DMA_TO_DEVICE\">DMA_TO_DEVICE</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#swiotlb_free_coherent\">swiotlb_free_coherent</a>);", 
"", 
"static void", 
"<a class=\"id\" href=\"#swiotlb_full\">swiotlb_full</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/>     int <a class=\"id\" href=\"#do_panic\">do_panic</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Ran out of IOMMU space for this operation. This is very bad.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Unfortunately the drivers cannot handle this operation properly.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * unless they check for dma_mapping_error (most don't)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * When the mapping is small enough return a static buffer to limit</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the damage, or panic when the transfer is too big.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"DMA: Out of SW-IOMMU space for %zu bytes at \"", 
"<span class=\"ts\"/>       \"device %s\\n\", <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#dev\">dev</a> ? <a class=\"id\" href=\"#dev_name\">dev_name</a>(<a class=\"id\" href=\"#dev\">dev</a>) : \"?\");", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> <= <a class=\"id\" href=\"#io_tlb_overflow\">io_tlb_overflow</a> || !<a class=\"id\" href=\"#do_panic\">do_panic</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dir\">dir</a> == <a class=\"id\" href=\"#DMA_BIDIRECTIONAL\">DMA_BIDIRECTIONAL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"DMA: Random memory could be DMA accessed\\n\");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dir\">dir</a> == <a class=\"id\" href=\"#DMA_FROM_DEVICE\">DMA_FROM_DEVICE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"DMA: Random memory could be DMA written\\n\");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dir\">dir</a> == <a class=\"id\" href=\"#DMA_TO_DEVICE\">DMA_TO_DEVICE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"DMA: Random memory could be DMA read\\n\");", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Map a single buffer of the indicated size for DMA in streaming mode.  The</span>", 
"<span class=\"comment\"> * physical address to use is returned.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Once the device is given the dma address, the device owns this memory until</span>", 
"<span class=\"comment\"> * either swiotlb_unmap_page or swiotlb_dma_sync_single is performed.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#swiotlb_map_page\">swiotlb_map_page</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#dma_attrs\">dma_attrs</a> *<a class=\"id\" href=\"#attrs\">attrs</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#phys\">phys</a> = <a class=\"id\" href=\"#page_to_phys\">page_to_phys</a>(<a class=\"id\" href=\"#page\">page</a>) + <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#dev_addr\">dev_addr</a> = <a class=\"id\" href=\"#phys_to_dma\">phys_to_dma</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#phys\">phys</a>);", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#map\">map</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#dir\">dir</a> == <a class=\"id\" href=\"#DMA_NONE\">DMA_NONE</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the address happens to be in the device's DMA window,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we can safely return the device addr and not worry about bounce</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * buffering it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dma_capable\">dma_capable</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#dev_addr\">dev_addr</a>, <a class=\"id\" href=\"#size\">size</a>) && !<a class=\"id\" href=\"#swiotlb_force\">swiotlb_force</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#dev_addr\">dev_addr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Oh well, have to allocate and map a bounce buffer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#map_single\">map_single</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#phys\">phys</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#dir\">dir</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#map\">map</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swiotlb_full\">swiotlb_full</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#dir\">dir</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#io_tlb_overflow_buffer\">io_tlb_overflow_buffer</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_addr\">dev_addr</a> = <a class=\"id\" href=\"#swiotlb_virt_to_bus\">swiotlb_virt_to_bus</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#map\">map</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Ensure that the address returned is DMA'ble</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dma_capable\">dma_capable</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#dev_addr\">dev_addr</a>, <a class=\"id\" href=\"#size\">size</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"map_single: bounce buffer is not DMA'ble\");", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#dev_addr\">dev_addr</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#swiotlb_map_page\">swiotlb_map_page</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Unmap a single streaming mode DMA translation.  The dma_addr and size must</span>", 
"<span class=\"comment\"> * match what was provided for in a previous swiotlb_map_page call.  All</span>", 
"<span class=\"comment\"> * other usages are undefined.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * After this call, reads by the cpu to the buffer are guaranteed to see</span>", 
"<span class=\"comment\"> * whatever the device wrote there.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#unmap_single\">unmap_single</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#dev_addr\">dev_addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#dir\">dir</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#paddr\">paddr</a> = <a class=\"id\" href=\"#dma_to_phys\">dma_to_phys</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#dev_addr\">dev_addr</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#dir\">dir</a> == <a class=\"id\" href=\"#DMA_NONE\">DMA_NONE</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_swiotlb_buffer\">is_swiotlb_buffer</a>(<a class=\"id\" href=\"#paddr\">paddr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swiotlb_tbl_unmap_single\">swiotlb_tbl_unmap_single</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#phys_to_virt\">phys_to_virt</a>(<a class=\"id\" href=\"#paddr\">paddr</a>), <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#dir\">dir</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dir\">dir</a> != <a class=\"id\" href=\"#DMA_FROM_DEVICE\">DMA_FROM_DEVICE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * phys_to_virt doesn't work with hihgmem page but we could</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * call dma_mark_clean() with hihgmem page here. However, we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * are fine since dma_mark_clean() is null on POWERPC. We can</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * make dma_mark_clean() take a physical address if necessary.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_mark_clean\">dma_mark_clean</a>(<a class=\"id\" href=\"#phys_to_virt\">phys_to_virt</a>(<a class=\"id\" href=\"#paddr\">paddr</a>), <a class=\"id\" href=\"#size\">size</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#swiotlb_unmap_page\">swiotlb_unmap_page</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#dev_addr\">dev_addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#dma_attrs\">dma_attrs</a> *<a class=\"id\" href=\"#attrs\">attrs</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unmap_single\">unmap_single</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#dev_addr\">dev_addr</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#dir\">dir</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#swiotlb_unmap_page\">swiotlb_unmap_page</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Make physical memory consistent for a single streaming mode DMA translation</span>", 
"<span class=\"comment\"> * after a transfer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If you perform a swiotlb_map_page() but wish to interrogate the buffer</span>", 
"<span class=\"comment\"> * using the cpu, yet do not wish to teardown the dma mapping, you must</span>", 
"<span class=\"comment\"> * call this function before doing so.  At the next point you give the dma</span>", 
"<span class=\"comment\"> * address back to the card, you must first perform a</span>", 
"<span class=\"comment\"> * swiotlb_dma_sync_for_device, and then the device again owns the buffer</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#swiotlb_sync_single\">swiotlb_sync_single</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#dev_addr\">dev_addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    enum <a class=\"id\" href=\"#dma_sync_target\">dma_sync_target</a> <a class=\"id\" href=\"#target\">target</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#paddr\">paddr</a> = <a class=\"id\" href=\"#dma_to_phys\">dma_to_phys</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#dev_addr\">dev_addr</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#dir\">dir</a> == <a class=\"id\" href=\"#DMA_NONE\">DMA_NONE</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_swiotlb_buffer\">is_swiotlb_buffer</a>(<a class=\"id\" href=\"#paddr\">paddr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swiotlb_tbl_sync_single\">swiotlb_tbl_sync_single</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#phys_to_virt\">phys_to_virt</a>(<a class=\"id\" href=\"#paddr\">paddr</a>), <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#target\">target</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dir\">dir</a> != <a class=\"id\" href=\"#DMA_FROM_DEVICE\">DMA_FROM_DEVICE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dma_mark_clean\">dma_mark_clean</a>(<a class=\"id\" href=\"#phys_to_virt\">phys_to_virt</a>(<a class=\"id\" href=\"#paddr\">paddr</a>), <a class=\"id\" href=\"#size\">size</a>);", 
"}", 
"", 
"void", 
"<a class=\"id\" href=\"#swiotlb_sync_single_for_cpu\">swiotlb_sync_single_for_cpu</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#dev_addr\">dev_addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#dir\">dir</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swiotlb_sync_single\">swiotlb_sync_single</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#dev_addr\">dev_addr</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#SYNC_FOR_CPU\">SYNC_FOR_CPU</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#swiotlb_sync_single_for_cpu\">swiotlb_sync_single_for_cpu</a>);", 
"", 
"void", 
"<a class=\"id\" href=\"#swiotlb_sync_single_for_device\">swiotlb_sync_single_for_device</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#dev_addr\">dev_addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#dir\">dir</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swiotlb_sync_single\">swiotlb_sync_single</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#dev_addr\">dev_addr</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#SYNC_FOR_DEVICE\">SYNC_FOR_DEVICE</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#swiotlb_sync_single_for_device\">swiotlb_sync_single_for_device</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Map a set of buffers described by scatterlist in streaming mode for DMA.</span>", 
"<span class=\"comment\"> * This is the scatter-gather version of the above swiotlb_map_page</span>", 
"<span class=\"comment\"> * interface.  Here the scatter gather list elements are each tagged with the</span>", 
"<span class=\"comment\"> * appropriate dma address and length.  They are obtained via</span>", 
"<span class=\"comment\"> * sg_dma_{address,length}(SG).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE: An implementation may be able to use a smaller number of</span>", 
"<span class=\"comment\"> *       DMA address/length pairs than there are SG table elements.</span>", 
"<span class=\"comment\"> *       (for example via virtual mapping capabilities)</span>", 
"<span class=\"comment\"> *       The routine returns the number of addr/length pairs actually</span>", 
"<span class=\"comment\"> *       used, at most nents.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Device ownership issues as mentioned above for swiotlb_map_page are the</span>", 
"<span class=\"comment\"> * same here.</span>", 
"<span class=\"comment\"> */</span>", 
"int", 
"<a class=\"id\" href=\"#swiotlb_map_sg_attrs\">swiotlb_map_sg_attrs</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#hwdev\">hwdev</a>, struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sgl\">sgl</a>, int <a class=\"id\" href=\"#nelems\">nelems</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#dir\">dir</a>, struct <a class=\"id\" href=\"#dma_attrs\">dma_attrs</a> *<a class=\"id\" href=\"#attrs\">attrs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sg\">sg</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#dir\">dir</a> == <a class=\"id\" href=\"#DMA_NONE\">DMA_NONE</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_sg\">for_each_sg</a>(<a class=\"id\" href=\"#sgl\">sgl</a>, <a class=\"id\" href=\"#sg\">sg</a>, <a class=\"id\" href=\"#nelems\">nelems</a>, <a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#phys_addr_t\">phys_addr_t</a> <a class=\"id\" href=\"#paddr\">paddr</a> = <a class=\"id\" href=\"#sg_phys\">sg_phys</a>(<a class=\"id\" href=\"#sg\">sg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#dev_addr\">dev_addr</a> = <a class=\"id\" href=\"#phys_to_dma\">phys_to_dma</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#paddr\">paddr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#swiotlb_force\">swiotlb_force</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#dma_capable\">dma_capable</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#dev_addr\">dev_addr</a>, <a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#length\">length</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#map_single\">map_single</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#sg_phys\">sg_phys</a>(<a class=\"id\" href=\"#sg\">sg</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#dir\">dir</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#map\">map</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Don't panic here, we expect map_sg users</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   to do proper error handling. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swiotlb_full\">swiotlb_full</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#length\">length</a>, <a class=\"id\" href=\"#dir\">dir</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swiotlb_unmap_sg_attrs\">swiotlb_unmap_sg_attrs</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#sgl\">sgl</a>, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#attrs\">attrs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sgl\">sgl</a>[0].<a class=\"id\" href=\"#dma_length\">dma_length</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#dma_address\">dma_address</a> = <a class=\"id\" href=\"#swiotlb_virt_to_bus\">swiotlb_virt_to_bus</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#map\">map</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#dma_address\">dma_address</a> = <a class=\"id\" href=\"#dev_addr\">dev_addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#dma_length\">dma_length</a> = <a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nelems\">nelems</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#swiotlb_map_sg_attrs\">swiotlb_map_sg_attrs</a>);", 
"", 
"int", 
"<a class=\"id\" href=\"#swiotlb_map_sg\">swiotlb_map_sg</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#hwdev\">hwdev</a>, struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sgl\">sgl</a>, int <a class=\"id\" href=\"#nelems\">nelems</a>,", 
"<span class=\"ts\"/>       enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#dir\">dir</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#swiotlb_map_sg_attrs\">swiotlb_map_sg_attrs</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#sgl\">sgl</a>, <a class=\"id\" href=\"#nelems\">nelems</a>, <a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#swiotlb_map_sg\">swiotlb_map_sg</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Unmap a set of streaming mode DMA translations.  Again, cpu read rules</span>", 
"<span class=\"comment\"> * concerning calls here are the same as for swiotlb_unmap_page() above.</span>", 
"<span class=\"comment\"> */</span>", 
"void", 
"<a class=\"id\" href=\"#swiotlb_unmap_sg_attrs\">swiotlb_unmap_sg_attrs</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#hwdev\">hwdev</a>, struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sgl\">sgl</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       int <a class=\"id\" href=\"#nelems\">nelems</a>, enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#dir\">dir</a>, struct <a class=\"id\" href=\"#dma_attrs\">dma_attrs</a> *<a class=\"id\" href=\"#attrs\">attrs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sg\">sg</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#dir\">dir</a> == <a class=\"id\" href=\"#DMA_NONE\">DMA_NONE</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_sg\">for_each_sg</a>(<a class=\"id\" href=\"#sgl\">sgl</a>, <a class=\"id\" href=\"#sg\">sg</a>, <a class=\"id\" href=\"#nelems\">nelems</a>, <a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unmap_single\">unmap_single</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#dma_address\">dma_address</a>, <a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#dma_length\">dma_length</a>, <a class=\"id\" href=\"#dir\">dir</a>);", 
"", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#swiotlb_unmap_sg_attrs\">swiotlb_unmap_sg_attrs</a>);", 
"", 
"void", 
"<a class=\"id\" href=\"#swiotlb_unmap_sg\">swiotlb_unmap_sg</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#hwdev\">hwdev</a>, struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sgl\">sgl</a>, int <a class=\"id\" href=\"#nelems\">nelems</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#dir\">dir</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#swiotlb_unmap_sg_attrs\">swiotlb_unmap_sg_attrs</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#sgl\">sgl</a>, <a class=\"id\" href=\"#nelems\">nelems</a>, <a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#swiotlb_unmap_sg\">swiotlb_unmap_sg</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Make physical memory consistent for a set of streaming mode DMA translations</span>", 
"<span class=\"comment\"> * after a transfer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The same as swiotlb_sync_single_* but for a scatter-gather list, same rules</span>", 
"<span class=\"comment\"> * and usage.</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#swiotlb_sync_sg\">swiotlb_sync_sg</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#hwdev\">hwdev</a>, struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sgl\">sgl</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#nelems\">nelems</a>, enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>enum <a class=\"id\" href=\"#dma_sync_target\">dma_sync_target</a> <a class=\"id\" href=\"#target\">target</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sg\">sg</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_sg\">for_each_sg</a>(<a class=\"id\" href=\"#sgl\">sgl</a>, <a class=\"id\" href=\"#sg\">sg</a>, <a class=\"id\" href=\"#nelems\">nelems</a>, <a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#swiotlb_sync_single\">swiotlb_sync_single</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#dma_address\">dma_address</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#dma_length\">dma_length</a>, <a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#target\">target</a>);", 
"}", 
"", 
"void", 
"<a class=\"id\" href=\"#swiotlb_sync_sg_for_cpu\">swiotlb_sync_sg_for_cpu</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#hwdev\">hwdev</a>, struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sg\">sg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#nelems\">nelems</a>, enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#dir\">dir</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swiotlb_sync_sg\">swiotlb_sync_sg</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#sg\">sg</a>, <a class=\"id\" href=\"#nelems\">nelems</a>, <a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#SYNC_FOR_CPU\">SYNC_FOR_CPU</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#swiotlb_sync_sg_for_cpu\">swiotlb_sync_sg_for_cpu</a>);", 
"", 
"void", 
"<a class=\"id\" href=\"#swiotlb_sync_sg_for_device\">swiotlb_sync_sg_for_device</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#hwdev\">hwdev</a>, struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sg\">sg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#nelems\">nelems</a>, enum <a class=\"id\" href=\"#dma_data_direction\">dma_data_direction</a> <a class=\"id\" href=\"#dir\">dir</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swiotlb_sync_sg\">swiotlb_sync_sg</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#sg\">sg</a>, <a class=\"id\" href=\"#nelems\">nelems</a>, <a class=\"id\" href=\"#dir\">dir</a>, <a class=\"id\" href=\"#SYNC_FOR_DEVICE\">SYNC_FOR_DEVICE</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#swiotlb_sync_sg_for_device\">swiotlb_sync_sg_for_device</a>);", 
"", 
"int", 
"<a class=\"id\" href=\"#swiotlb_dma_mapping_error\">swiotlb_dma_mapping_error</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#dma_addr_t\">dma_addr_t</a> <a class=\"id\" href=\"#dma_addr\">dma_addr</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#dma_addr\">dma_addr</a> == <a class=\"id\" href=\"#swiotlb_virt_to_bus\">swiotlb_virt_to_bus</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#io_tlb_overflow_buffer\">io_tlb_overflow_buffer</a>));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#swiotlb_dma_mapping_error\">swiotlb_dma_mapping_error</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return whether the given device DMA address mask can be supported</span>", 
"<span class=\"comment\"> * properly.  For example, if your device can only drive the low 24-bits</span>", 
"<span class=\"comment\"> * during bus mastering, then you would pass 0x00ffffff as the mask to</span>", 
"<span class=\"comment\"> * this function.</span>", 
"<span class=\"comment\"> */</span>", 
"int", 
"<a class=\"id\" href=\"#swiotlb_dma_supported\">swiotlb_dma_supported</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#swiotlb_virt_to_bus\">swiotlb_virt_to_bus</a>(<a class=\"id\" href=\"#hwdev\">hwdev</a>, <a class=\"id\" href=\"#io_tlb_end\">io_tlb_end</a> - 1) <= <a class=\"id\" href=\"#mask\">mask</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#swiotlb_dma_supported\">swiotlb_dma_supported</a>);", 
];
xr_frag_insert('l/21/7aeae0fc4da3ad53c6f978d356f48bc97b2b9c.xr', __xr_tmp);
