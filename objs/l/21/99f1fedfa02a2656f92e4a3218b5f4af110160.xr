var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Kernel Debug Core</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Maintainer: Jason Wessel &lt;jason.wessel@windriver.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2000-2001 VERITAS Software Corporation.</span>", 
"<span class=\"comment\"> * Copyright (C) 2002-2004 Timesys Corporation</span>", 
"<span class=\"comment\"> * Copyright (C) 2003-2004 Amit S. Kale &lt;amitkale@linsyssoft.com&gt;</span>", 
"<span class=\"comment\"> * Copyright (C) 2004 Pavel Machek &lt;pavel@ucw.cz&gt;</span>", 
"<span class=\"comment\"> * Copyright (C) 2004-2006 Tom Rini &lt;trini@kernel.crashing.org&gt;</span>", 
"<span class=\"comment\"> * Copyright (C) 2004-2006 LinSysSoft Technologies Pvt. Ltd.</span>", 
"<span class=\"comment\"> * Copyright (C) 2005-2009 Wind River Systems, Inc.</span>", 
"<span class=\"comment\"> * Copyright (C) 2007 MontaVista Software, Inc.</span>", 
"<span class=\"comment\"> * Copyright (C) 2008 Red Hat, Inc., Ingo Molnar &lt;mingo@redhat.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Contributors at various stages not listed above:</span>", 
"<span class=\"comment\"> *  Jason Wessel ( jason.wessel@windriver.com )</span>", 
"<span class=\"comment\"> *  George Anzinger &lt;george@mvista.com&gt;</span>", 
"<span class=\"comment\"> *  Anurekh Saxena (anurekh.saxena@timesys.com)</span>", 
"<span class=\"comment\"> *  Lake Stevens Instrument Division (Glenn Engel)</span>", 
"<span class=\"comment\"> *  Jim Kingdon, Cygnus Support.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Original KGDB stub: David Grothe &lt;dave@gcom.com&gt;,</span>", 
"<span class=\"comment\"> * Tigran Aivazian &lt;tigran@sco.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file is licensed under the terms of the GNU General Public License</span>", 
"<span class=\"comment\"> * version 2. This program is licensed \"as is\" without any warranty of any</span>", 
"<span class=\"comment\"> * kind, whether express or implied.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pid_namespace\">pid_namespace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#clocksource\">clocksource</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#console\">console</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#threads\">threads</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ptrace\">ptrace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#delay\">delay</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sysrq\">sysrq</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kgdb\">kgdb</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kdb\">kdb</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pid\">pid</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#smp\">smp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#cacheflush\">cacheflush</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#byteorder\">byteorder</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#atomic\">atomic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#system\">system</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"debug_core.h\"", 
"", 
"static int <a class=\"id\" href=\"#kgdb_break_asap\">kgdb_break_asap</a>;", 
"", 
"struct <a class=\"id\" href=\"#debuggerinfo_struct\">debuggerinfo_struct</a> <a class=\"id\" href=\"#kgdb_info\">kgdb_info</a>[<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>];", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kgdb_connected - Is a host GDB connected to us?</span>", 
"<span class=\"comment\"> */</span>", 
"int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_connected\">kgdb_connected</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#kgdb_connected\">kgdb_connected</a>);", 
"", 
"<span class=\"comment\">/* All the KGDB handlers are installed */</span>", 
"int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_io_module_registered\">kgdb_io_module_registered</a>;", 
"", 
"<span class=\"comment\">/* Guard for recursive entry */</span>", 
"static int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#exception_level\">exception_level</a>;", 
"", 
"struct <a class=\"id\" href=\"#kgdb_io\">kgdb_io</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#dbg_io_ops\">dbg_io_ops</a>;", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#kgdb_registration_lock\">kgdb_registration_lock</a>);", 
"", 
"<span class=\"comment\">/* kgdb console driver is loaded */</span>", 
"static int <a class=\"id\" href=\"#kgdb_con_registered\">kgdb_con_registered</a>;", 
"<span class=\"comment\">/* determine if kgdb console output should be used */</span>", 
"static int <a class=\"id\" href=\"#kgdb_use_con\">kgdb_use_con</a>;", 
"<span class=\"comment\">/* Flag for alternate operations for early debugging */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#dbg_is_early\">dbg_is_early</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"comment\">/* Next cpu to become the master debug core */</span>", 
"int <a class=\"id\" href=\"#dbg_switch_cpu\">dbg_switch_cpu</a>;", 
"", 
"<span class=\"comment\">/* Use kdb or gdbserver mode */</span>", 
"int <a class=\"id\" href=\"#dbg_kdb_mode\">dbg_kdb_mode</a> = 1;", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#opt_kgdb_con\">opt_kgdb_con</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kgdb_use_con\">kgdb_use_con</a> = 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#early_param\">early_param</a>(\"kgdbcon\", <a class=\"id\" href=\"#opt_kgdb_con\">opt_kgdb_con</a>);", 
"", 
"<a class=\"id\" href=\"#module_param\">module_param</a>(<a class=\"id\" href=\"#kgdb_use_con\">kgdb_use_con</a>, int, 0644);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Holds information about breakpoints in a kernel. These breakpoints are</span>", 
"<span class=\"comment\"> * added and removed by gdb.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#kgdb_bkpt\">kgdb_bkpt</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_break\">kgdb_break</a>[<a class=\"id\" href=\"#KGDB_MAX_BREAKPOINTS\">KGDB_MAX_BREAKPOINTS</a>] = {", 
"<span class=\"ts\"/>[0 ... <a class=\"id\" href=\"#KGDB_MAX_BREAKPOINTS\">KGDB_MAX_BREAKPOINTS</a>-1] = { .<a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#BP_UNDEFINED\">BP_UNDEFINED</a> }", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The CPU# of the active CPU, or -1 if none:</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_active\">kgdb_active</a> = <a class=\"id\" href=\"#ATOMIC_INIT\">ATOMIC_INIT</a>(-1);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#kgdb_active\">kgdb_active</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We use NR_CPUs not PERCPU, in case kgdb is used to debug early</span>", 
"<span class=\"comment\"> * bootup code (which might not have percpu set up yet):</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#passive_cpu_wait\">passive_cpu_wait</a>[<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>];", 
"static <a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_in_kgdb\">cpu_in_kgdb</a>[<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>];", 
"static <a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_break_tasklet_var\">kgdb_break_tasklet_var</a>;", 
"<a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_setting_breakpoint\">kgdb_setting_breakpoint</a>;", 
"", 
"struct <a class=\"id\" href=\"#task_struct\">task_struct</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#kgdb_usethread\">kgdb_usethread</a>;", 
"struct <a class=\"id\" href=\"#task_struct\">task_struct</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#kgdb_contthread\">kgdb_contthread</a>;", 
"", 
"int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_single_step\">kgdb_single_step</a>;", 
"static <a class=\"id\" href=\"#pid_t\">pid_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_sstep_pid\">kgdb_sstep_pid</a>;", 
"", 
"<span class=\"comment\">/* to keep track of the CPU which is doing the single stepping*/</span>", 
"<a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_cpu_doing_single_step\">kgdb_cpu_doing_single_step</a> = <a class=\"id\" href=\"#ATOMIC_INIT\">ATOMIC_INIT</a>(-1);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If you are debugging a problem where roundup (the collection of</span>", 
"<span class=\"comment\"> * all other CPUs) is a problem [this should be extremely rare],</span>", 
"<span class=\"comment\"> * then use the nokgdbroundup option to avoid roundup. In that case</span>", 
"<span class=\"comment\"> * the other CPUs might interfere with your debugging context, so</span>", 
"<span class=\"comment\"> * use this with care:</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#kgdb_do_roundup\">kgdb_do_roundup</a> = 1;", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#opt_nokgdbroundup\">opt_nokgdbroundup</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kgdb_do_roundup\">kgdb_do_roundup</a> = 0;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#early_param\">early_param</a>(\"nokgdbroundup\", <a class=\"id\" href=\"#opt_nokgdbroundup\">opt_nokgdbroundup</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Finally, some KGDB code :-)</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Weak aliases for breakpoint management,</span>", 
"<span class=\"comment\"> * can be overriden by architectures when needed:</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__weak\">__weak</a> <a class=\"id\" href=\"#kgdb_arch_set_breakpoint\">kgdb_arch_set_breakpoint</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, char *<a class=\"id\" href=\"#saved_instr\">saved_instr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#probe_kernel_read\">probe_kernel_read</a>(<a class=\"id\" href=\"#saved_instr\">saved_instr</a>, (char *)<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#BREAK_INSTR_SIZE\">BREAK_INSTR_SIZE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#probe_kernel_write\">probe_kernel_write</a>((char *)<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#arch_kgdb_ops\">arch_kgdb_ops</a>.<a class=\"id\" href=\"#gdb_bpt_instr\">gdb_bpt_instr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#BREAK_INSTR_SIZE\">BREAK_INSTR_SIZE</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#__weak\">__weak</a> <a class=\"id\" href=\"#kgdb_arch_remove_breakpoint\">kgdb_arch_remove_breakpoint</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>, char *<a class=\"id\" href=\"#bundle\">bundle</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#probe_kernel_write\">probe_kernel_write</a>((char *)<a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  (char *)<a class=\"id\" href=\"#bundle\">bundle</a>, <a class=\"id\" href=\"#BREAK_INSTR_SIZE\">BREAK_INSTR_SIZE</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#__weak\">__weak</a> <a class=\"id\" href=\"#kgdb_validate_break_address\">kgdb_validate_break_address</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#tmp_variable\">tmp_variable</a>[<a class=\"id\" href=\"#BREAK_INSTR_SIZE\">BREAK_INSTR_SIZE</a>];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Validate setting the breakpoint and then removing it.  In the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * remove fails, the kernel needs to emit a bad message because we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * are deep trouble not being able to put things back the way we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * found them.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#kgdb_arch_set_breakpoint\">kgdb_arch_set_breakpoint</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#tmp_variable\">tmp_variable</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#kgdb_arch_remove_breakpoint\">kgdb_arch_remove_breakpoint</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#tmp_variable\">tmp_variable</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"KGDB: Critical breakpoint error, kernel \"", 
"<span class=\"ts\"/><span class=\"ts\"/>   \"memory destroyed at: %lx\", <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"unsigned long <a class=\"id\" href=\"#__weak\">__weak</a> <a class=\"id\" href=\"#kgdb_arch_pc\">kgdb_arch_pc</a>(int <a class=\"id\" href=\"#exception\">exception</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#instruction_pointer\">instruction_pointer</a>(<a class=\"id\" href=\"#regs\">regs</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#__weak\">__weak</a> <a class=\"id\" href=\"#kgdb_arch_init\">kgdb_arch_init</a>(void)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#__weak\">__weak</a> <a class=\"id\" href=\"#kgdb_skipexception\">kgdb_skipexception</a>(int <a class=\"id\" href=\"#exception\">exception</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>kgdb_disable_hw_debug - Disable hardware debugging while we in kgdb.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@regs: Current &amp;struct pt_regs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function will be called if the particular architecture must</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>disable hardware debugging while it is processing gdb packets or</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>handling exception.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__weak\">__weak</a> <a class=\"id\" href=\"#kgdb_disable_hw_debug\">kgdb_disable_hw_debug</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Some architectures need cache flushes when we set/clear a</span>", 
"<span class=\"comment\"> * breakpoint:</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#kgdb_flush_swbreak_addr\">kgdb_flush_swbreak_addr</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#CACHE_FLUSH_IS_SAFE\">CACHE_FLUSH_IS_SAFE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a> && <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_cache\">mmap_cache</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_cache_range\">flush_cache_range</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_cache\">mmap_cache</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#BREAK_INSTR_SIZE\">BREAK_INSTR_SIZE</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Force flush instruction cache if it was outside the mm */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_icache_range\">flush_icache_range</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#BREAK_INSTR_SIZE\">BREAK_INSTR_SIZE</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * SW breakpoint management:</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#dbg_activate_sw_breakpoints\">dbg_activate_sw_breakpoints</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#KGDB_MAX_BREAKPOINTS\">KGDB_MAX_BREAKPOINTS</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kgdb_break\">kgdb_break</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#state\">state</a> != <a class=\"id\" href=\"#BP_SET\">BP_SET</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#kgdb_break\">kgdb_break</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#bpt_addr\">bpt_addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#kgdb_arch_set_breakpoint\">kgdb_arch_set_breakpoint</a>(<a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_break\">kgdb_break</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#saved_instr\">saved_instr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"KGDB: BP install failed: %lx\", <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_flush_swbreak_addr\">kgdb_flush_swbreak_addr</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_break\">kgdb_break</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#BP_ACTIVE\">BP_ACTIVE</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#dbg_set_sw_break\">dbg_set_sw_break</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#kgdb_validate_break_address\">kgdb_validate_break_address</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#breakno\">breakno</a> = -1;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#KGDB_MAX_BREAKPOINTS\">KGDB_MAX_BREAKPOINTS</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#kgdb_break\">kgdb_break</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#BP_SET\">BP_SET</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#kgdb_break\">kgdb_break</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#bpt_addr\">bpt_addr</a> == <a class=\"id\" href=\"#addr\">addr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EEXIST\">EEXIST</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#KGDB_MAX_BREAKPOINTS\">KGDB_MAX_BREAKPOINTS</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kgdb_break\">kgdb_break</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#BP_REMOVED\">BP_REMOVED</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_break\">kgdb_break</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#bpt_addr\">bpt_addr</a> == <a class=\"id\" href=\"#addr\">addr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#breakno\">breakno</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#breakno\">breakno</a> == -1) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#KGDB_MAX_BREAKPOINTS\">KGDB_MAX_BREAKPOINTS</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kgdb_break\">kgdb_break</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#BP_UNDEFINED\">BP_UNDEFINED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#breakno\">breakno</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#breakno\">breakno</a> == -1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#E2BIG\">E2BIG</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kgdb_break\">kgdb_break</a>[<a class=\"id\" href=\"#breakno\">breakno</a>].<a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#BP_SET\">BP_SET</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kgdb_break\">kgdb_break</a>[<a class=\"id\" href=\"#breakno\">breakno</a>].<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#BP_BREAKPOINT\">BP_BREAKPOINT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kgdb_break\">kgdb_break</a>[<a class=\"id\" href=\"#breakno\">breakno</a>].<a class=\"id\" href=\"#bpt_addr\">bpt_addr</a> = <a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#dbg_deactivate_sw_breakpoints\">dbg_deactivate_sw_breakpoints</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#KGDB_MAX_BREAKPOINTS\">KGDB_MAX_BREAKPOINTS</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kgdb_break\">kgdb_break</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#state\">state</a> != <a class=\"id\" href=\"#BP_ACTIVE\">BP_ACTIVE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#kgdb_break\">kgdb_break</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#bpt_addr\">bpt_addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#kgdb_arch_remove_breakpoint\">kgdb_arch_remove_breakpoint</a>(<a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_break\">kgdb_break</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#saved_instr\">saved_instr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"KGDB: BP remove failed: %lx\\n\", <a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_flush_swbreak_addr\">kgdb_flush_swbreak_addr</a>(<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_break\">kgdb_break</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#BP_SET\">BP_SET</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#dbg_remove_sw_break\">dbg_remove_sw_break</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#KGDB_MAX_BREAKPOINTS\">KGDB_MAX_BREAKPOINTS</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#kgdb_break\">kgdb_break</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#BP_SET\">BP_SET</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#kgdb_break\">kgdb_break</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#bpt_addr\">bpt_addr</a> == <a class=\"id\" href=\"#addr\">addr</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_break\">kgdb_break</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#BP_REMOVED\">BP_REMOVED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#kgdb_isremovedbreak\">kgdb_isremovedbreak</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#KGDB_MAX_BREAKPOINTS\">KGDB_MAX_BREAKPOINTS</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#kgdb_break\">kgdb_break</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#BP_REMOVED\">BP_REMOVED</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#kgdb_break\">kgdb_break</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#bpt_addr\">bpt_addr</a> == <a class=\"id\" href=\"#addr\">addr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#dbg_remove_all_break\">dbg_remove_all_break</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Clear memory breakpoints. */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#KGDB_MAX_BREAKPOINTS\">KGDB_MAX_BREAKPOINTS</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kgdb_break\">kgdb_break</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#state\">state</a> != <a class=\"id\" href=\"#BP_ACTIVE\">BP_ACTIVE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#setundefined\">setundefined</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#kgdb_break\">kgdb_break</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#bpt_addr\">bpt_addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#kgdb_arch_remove_breakpoint\">kgdb_arch_remove_breakpoint</a>(<a class=\"id\" href=\"#addr\">addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_break\">kgdb_break</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#saved_instr\">saved_instr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"KGDB: breakpoint remove failed: %lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#addr\">addr</a>);", 
"<a class=\"id\" href=\"#setundefined\">setundefined</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_break\">kgdb_break</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#BP_UNDEFINED\">BP_UNDEFINED</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Clear hardware breakpoints. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#arch_kgdb_ops\">arch_kgdb_ops</a>.<a class=\"id\" href=\"#remove_all_hw_break\">remove_all_hw_break</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arch_kgdb_ops\">arch_kgdb_ops</a>.<a class=\"id\" href=\"#remove_all_hw_break\">remove_all_hw_break</a>();", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Return true if there is a valid kgdb I/O module.  Also if no</span>", 
"<span class=\"comment\"> * debugger is attached a message can be printed to the console about</span>", 
"<span class=\"comment\"> * waiting for the debugger to attach.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The print_wait argument is only to be true when called from inside</span>", 
"<span class=\"comment\"> * the core kgdb_handle_exception, because it will wait for the</span>", 
"<span class=\"comment\"> * debugger to attach.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#kgdb_io_ready\">kgdb_io_ready</a>(int <a class=\"id\" href=\"#print_wait\">print_wait</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dbg_io_ops\">dbg_io_ops</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kgdb_connected\">kgdb_connected</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#kgdb_setting_breakpoint\">kgdb_setting_breakpoint</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#print_wait\">print_wait</a>) {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KGDB_KDB\">CONFIG_KGDB_KDB</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#dbg_kdb_mode\">dbg_kdb_mode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CRIT\">KERN_CRIT</a> \"KGDB: waiting... or $3#33 for KDB\\n\");", 
"#else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CRIT\">KERN_CRIT</a> \"KGDB: Waiting for remote debugger\\n\");", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#kgdb_reenter_check\">kgdb_reenter_check</a>(struct <a class=\"id\" href=\"#kgdb_state\">kgdb_state</a> *<a class=\"id\" href=\"#ks\">ks</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#addr\">addr</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#kgdb_active\">kgdb_active</a>) != <a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Panic on recursive debugger calls: */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#exception_level\">exception_level</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a> = <a class=\"id\" href=\"#kgdb_arch_pc\">kgdb_arch_pc</a>(<a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#ex_vector\">ex_vector</a>, <a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#linux_regs\">linux_regs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dbg_deactivate_sw_breakpoints\">dbg_deactivate_sw_breakpoints</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the break point removed ok at the place exception</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * occurred, try to recover and print a warning to the end</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * user because the user planted a breakpoint in a place that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * KGDB needs in order to function.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dbg_remove_sw_break\">dbg_remove_sw_break</a>(<a class=\"id\" href=\"#addr\">addr</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#exception_level\">exception_level</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_skipexception\">kgdb_skipexception</a>(<a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#ex_vector\">ex_vector</a>, <a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#linux_regs\">linux_regs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dbg_activate_sw_breakpoints\">dbg_activate_sw_breakpoints</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CRIT\">KERN_CRIT</a> \"KGDB: re-enter error: breakpoint removed %lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(1);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dbg_remove_all_break\">dbg_remove_all_break</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kgdb_skipexception\">kgdb_skipexception</a>(<a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#ex_vector\">ex_vector</a>, <a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#linux_regs\">linux_regs</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#exception_level\">exception_level</a> &gt; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dump_stack\">dump_stack</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"Recursive entry to debugger\");", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CRIT\">KERN_CRIT</a> \"KGDB: re-enter exception: ALL breakpoints killed\\n\");", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KGDB_KDB\">CONFIG_KGDB_KDB</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* Allow kdb to debug itself one level */</span>", 
"<span class=\"ts\"/>return 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dump_stack\">dump_stack</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"Recursive entry to debugger\");", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#dbg_cpu_switch\">dbg_cpu_switch</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, int <a class=\"id\" href=\"#next_cpu\">next_cpu</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Mark the cpu we are switching away from as a slave when it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * holds the kgdb_active token.  This must be done so that the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that all the cpus wait in for the debug core will not enter</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * again as the master. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> == <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#kgdb_active\">kgdb_active</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_info\">kgdb_info</a>[<a class=\"id\" href=\"#cpu\">cpu</a>].<a class=\"id\" href=\"#exception_state\">exception_state</a> |= <a class=\"id\" href=\"#DCPU_IS_SLAVE\">DCPU_IS_SLAVE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_info\">kgdb_info</a>[<a class=\"id\" href=\"#cpu\">cpu</a>].<a class=\"id\" href=\"#exception_state\">exception_state</a> &= ~<a class=\"id\" href=\"#DCPU_WANT_MASTER\">DCPU_WANT_MASTER</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kgdb_info\">kgdb_info</a>[<a class=\"id\" href=\"#next_cpu\">next_cpu</a>].<a class=\"id\" href=\"#exception_state\">exception_state</a> |= <a class=\"id\" href=\"#DCPU_NEXT_MASTER\">DCPU_NEXT_MASTER</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#kgdb_cpu_enter\">kgdb_cpu_enter</a>(struct <a class=\"id\" href=\"#kgdb_state\">kgdb_state</a> *<a class=\"id\" href=\"#ks\">ks</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#sstep_tries\">sstep_tries</a> = 100;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#trace_on\">trace_on</a> = 0;", 
"<a class=\"id\" href=\"#acquirelock\">acquirelock</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Interrupts will be restored by the 'trap return' code, except when</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * single stepping.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kgdb_info\">kgdb_info</a>[<a class=\"id\" href=\"#cpu\">cpu</a>].<a class=\"id\" href=\"#debuggerinfo\">debuggerinfo</a> = <a class=\"id\" href=\"#regs\">regs</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kgdb_info\">kgdb_info</a>[<a class=\"id\" href=\"#cpu\">cpu</a>].<a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kgdb_info\">kgdb_info</a>[<a class=\"id\" href=\"#cpu\">cpu</a>].<a class=\"id\" href=\"#ret_state\">ret_state</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kgdb_info\">kgdb_info</a>[<a class=\"id\" href=\"#cpu\">cpu</a>].<a class=\"id\" href=\"#irq_depth\">irq_depth</a> = <a class=\"id\" href=\"#hardirq_count\">hardirq_count</a>() >> <a class=\"id\" href=\"#HARDIRQ_SHIFT\">HARDIRQ_SHIFT</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Make sure the above info reaches the primary CPU before</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * our cpu_in_kgdb[] flag setting does:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#cpu_in_kgdb\">cpu_in_kgdb</a>[<a class=\"id\" href=\"#cpu\">cpu</a>]);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#exception_level\">exception_level</a> == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cpu_master_loop\">cpu_master_loop</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * CPU will loop if it is a slave or request to become a kgdb</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * master cpu and acquire the kgdb_active lock:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>while (1) {", 
"<a class=\"id\" href=\"#cpu_loop\">cpu_loop</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kgdb_info\">kgdb_info</a>[<a class=\"id\" href=\"#cpu\">cpu</a>].<a class=\"id\" href=\"#exception_state\">exception_state</a> &amp; <a class=\"id\" href=\"#DCPU_NEXT_MASTER\">DCPU_NEXT_MASTER</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_info\">kgdb_info</a>[<a class=\"id\" href=\"#cpu\">cpu</a>].<a class=\"id\" href=\"#exception_state\">exception_state</a> &= ~<a class=\"id\" href=\"#DCPU_NEXT_MASTER\">DCPU_NEXT_MASTER</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cpu_master_loop\">cpu_master_loop</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#kgdb_info\">kgdb_info</a>[<a class=\"id\" href=\"#cpu\">cpu</a>].<a class=\"id\" href=\"#exception_state\">exception_state</a> &amp; <a class=\"id\" href=\"#DCPU_WANT_MASTER\">DCPU_WANT_MASTER</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_cmpxchg\">atomic_cmpxchg</a>(&amp;<a class=\"id\" href=\"#kgdb_active\">kgdb_active</a>, -1, <a class=\"id\" href=\"#cpu\">cpu</a>) == <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#kgdb_info\">kgdb_info</a>[<a class=\"id\" href=\"#cpu\">cpu</a>].<a class=\"id\" href=\"#exception_state\">exception_state</a> &amp; <a class=\"id\" href=\"#DCPU_IS_SLAVE\">DCPU_IS_SLAVE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#passive_cpu_wait\">passive_cpu_wait</a>[<a class=\"id\" href=\"#cpu\">cpu</a>]))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#return_normal\">return_normal</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<a class=\"id\" href=\"#return_normal\">return_normal</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Return to normal operation by executing any</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * hw breakpoint fixup.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#arch_kgdb_ops\">arch_kgdb_ops</a>.<a class=\"id\" href=\"#correct_hw_break\">correct_hw_break</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arch_kgdb_ops\">arch_kgdb_ops</a>.<a class=\"id\" href=\"#correct_hw_break\">correct_hw_break</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#trace_on\">trace_on</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tracing_on\">tracing_on</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#cpu_in_kgdb\">cpu_in_kgdb</a>[<a class=\"id\" href=\"#cpu\">cpu</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#touch_softlockup_watchdog_sync\">touch_softlockup_watchdog_sync</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clocksource_touch_watchdog\">clocksource_touch_watchdog</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For single stepping, try to only enter on the processor</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that was single stepping.  To gaurd against a deadlock, the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * kernel will only try for the value of sstep_tries before</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * giving up and continuing on.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#kgdb_cpu_doing_single_step\">kgdb_cpu_doing_single_step</a>) != -1 &&", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#kgdb_info\">kgdb_info</a>[<a class=\"id\" href=\"#cpu\">cpu</a>].<a class=\"id\" href=\"#task\">task</a> &&", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#kgdb_info\">kgdb_info</a>[<a class=\"id\" href=\"#cpu\">cpu</a>].<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#pid\">pid</a> != <a class=\"id\" href=\"#kgdb_sstep_pid\">kgdb_sstep_pid</a>) && --<a class=\"id\" href=\"#sstep_tries\">sstep_tries</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#kgdb_active\">kgdb_active</a>, -1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#touch_softlockup_watchdog_sync\">touch_softlockup_watchdog_sync</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clocksource_touch_watchdog\">clocksource_touch_watchdog</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#acquirelock\">acquirelock</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kgdb_io_ready\">kgdb_io_ready</a>(1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_info\">kgdb_info</a>[<a class=\"id\" href=\"#cpu\">cpu</a>].<a class=\"id\" href=\"#ret_state\">ret_state</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#kgdb_restore\">kgdb_restore</a>; <span class=\"comment\">/* No I/O connection, resume the system */</span>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Don't enter if we have hit a removed breakpoint.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kgdb_skipexception\">kgdb_skipexception</a>(<a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#ex_vector\">ex_vector</a>, <a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#linux_regs\">linux_regs</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#kgdb_restore\">kgdb_restore</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Call the I/O driver's pre_exception routine */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dbg_io_ops\">dbg_io_ops</a>-><a class=\"id\" href=\"#pre_exception\">pre_exception</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dbg_io_ops\">dbg_io_ops</a>-><a class=\"id\" href=\"#pre_exception\">pre_exception</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kgdb_disable_hw_debug\">kgdb_disable_hw_debug</a>(<a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#linux_regs\">linux_regs</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Get the passive CPU lock which will hold all the non-primary</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * CPU in a spin state while the debugger is active</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kgdb_single_step\">kgdb_single_step</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#passive_cpu_wait\">passive_cpu_wait</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* Signal the other CPUs to enter kgdb_wait() */</span>", 
"<span class=\"ts\"/>if ((!<a class=\"id\" href=\"#kgdb_single_step\">kgdb_single_step</a>) && <a class=\"id\" href=\"#kgdb_do_roundup\">kgdb_do_roundup</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_roundup_cpus\">kgdb_roundup_cpus</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Wait for the other CPUs to be notified and be waiting for us:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#kgdb_do_roundup\">kgdb_do_roundup</a> && !<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#cpu_in_kgdb\">cpu_in_kgdb</a>[<a class=\"id\" href=\"#i\">i</a>]))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * At this point the primary processor is completely</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in the debugger and all secondary CPUs are quiescent</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dbg_deactivate_sw_breakpoints\">dbg_deactivate_sw_breakpoints</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kgdb_single_step\">kgdb_single_step</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kgdb_contthread\">kgdb_contthread</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#exception_level\">exception_level</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_on\">trace_on</a> = <a class=\"id\" href=\"#tracing_is_on\">tracing_is_on</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#trace_on\">trace_on</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tracing_off\">tracing_off</a>();", 
"", 
"<span class=\"ts\"/>while (1) {", 
"<a class=\"id\" href=\"#cpu_master_loop\">cpu_master_loop</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#dbg_kdb_mode\">dbg_kdb_mode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_connected\">kgdb_connected</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#kdb_stub\">kdb_stub</a>(<a class=\"id\" href=\"#ks\">ks</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> == -1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_connected\">kgdb_connected</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#gdb_serial_stub\">gdb_serial_stub</a>(<a class=\"id\" href=\"#ks\">ks</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> == <a class=\"id\" href=\"#DBG_PASS_EVENT\">DBG_PASS_EVENT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dbg_kdb_mode\">dbg_kdb_mode</a> = !<a class=\"id\" href=\"#dbg_kdb_mode\">dbg_kdb_mode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#error\">error</a> == <a class=\"id\" href=\"#DBG_SWITCH_CPU_EVENT\">DBG_SWITCH_CPU_EVENT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dbg_cpu_switch\">dbg_cpu_switch</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#dbg_switch_cpu\">dbg_switch_cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cpu_loop\">cpu_loop</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_info\">kgdb_info</a>[<a class=\"id\" href=\"#cpu\">cpu</a>].<a class=\"id\" href=\"#ret_state\">ret_state</a> = <a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Call the I/O driver's post_exception routine */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dbg_io_ops\">dbg_io_ops</a>-><a class=\"id\" href=\"#post_exception\">post_exception</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dbg_io_ops\">dbg_io_ops</a>-><a class=\"id\" href=\"#post_exception\">post_exception</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#cpu_in_kgdb\">cpu_in_kgdb</a>[<a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#cpu\">cpu</a>]);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kgdb_single_step\">kgdb_single_step</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>-1; <a class=\"id\" href=\"#i\">i</a> >= 0; <a class=\"id\" href=\"#i\">i</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#passive_cpu_wait\">passive_cpu_wait</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Wait till all the CPUs have quit from the debugger,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * but allow a CPU that hit an exception and is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * waiting to become the master to remain in the debug</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * core.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#kgdb_do_roundup\">kgdb_do_roundup</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#cpu_in_kgdb\">cpu_in_kgdb</a>[<a class=\"id\" href=\"#i\">i</a>]) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       !(<a class=\"id\" href=\"#kgdb_info\">kgdb_info</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#exception_state\">exception_state</a> &amp;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#DCPU_WANT_MASTER\">DCPU_WANT_MASTER</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#kgdb_restore\">kgdb_restore</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#kgdb_cpu_doing_single_step\">kgdb_cpu_doing_single_step</a>) != -1) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#sstep_cpu\">sstep_cpu</a> = <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#kgdb_cpu_doing_single_step\">kgdb_cpu_doing_single_step</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kgdb_info\">kgdb_info</a>[<a class=\"id\" href=\"#sstep_cpu\">sstep_cpu</a>].<a class=\"id\" href=\"#task\">task</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_sstep_pid\">kgdb_sstep_pid</a> = <a class=\"id\" href=\"#kgdb_info\">kgdb_info</a>[<a class=\"id\" href=\"#sstep_cpu\">sstep_cpu</a>].<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_sstep_pid\">kgdb_sstep_pid</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#trace_on\">trace_on</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tracing_on\">tracing_on</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/* Free kgdb_active */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#kgdb_active\">kgdb_active</a>, -1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#touch_softlockup_watchdog_sync\">touch_softlockup_watchdog_sync</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#clocksource_touch_watchdog\">clocksource_touch_watchdog</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kgdb_info\">kgdb_info</a>[<a class=\"id\" href=\"#cpu\">cpu</a>].<a class=\"id\" href=\"#ret_state\">ret_state</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * kgdb_handle_exception() - main entry point from a kernel exception</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Locking hierarchy:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>interface locks, if any (begin_session)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>kgdb lock (kgdb_active)</span>", 
"<span class=\"comment\"> */</span>", 
"int", 
"<a class=\"id\" href=\"#kgdb_handle_exception\">kgdb_handle_exception</a>(int <a class=\"id\" href=\"#evector\">evector</a>, int <a class=\"id\" href=\"#signo\">signo</a>, int <a class=\"id\" href=\"#ecode\">ecode</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kgdb_state\">kgdb_state</a> <a class=\"id\" href=\"#kgdb_var\">kgdb_var</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kgdb_state\">kgdb_state</a> *<a class=\"id\" href=\"#ks\">ks</a> = &amp;<a class=\"id\" href=\"#kgdb_var\">kgdb_var</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#cpu\">cpu</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#raw_smp_processor_id\">raw_smp_processor_id</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#ex_vector\">ex_vector</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#evector\">evector</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#signo\">signo</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#signo\">signo</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#err_code\">err_code</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#ecode\">ecode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#kgdb_usethreadid\">kgdb_usethreadid</a><span class=\"ts\"/>= 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#linux_regs\">linux_regs</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#regs\">regs</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kgdb_reenter_check\">kgdb_reenter_check</a>(<a class=\"id\" href=\"#ks\">ks</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0; <span class=\"comment\">/* Ouch, double exception ! */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kgdb_info\">kgdb_info</a>[<a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#cpu\">cpu</a>].<a class=\"id\" href=\"#exception_state\">exception_state</a> |= <a class=\"id\" href=\"#DCPU_WANT_MASTER\">DCPU_WANT_MASTER</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#kgdb_cpu_enter\">kgdb_cpu_enter</a>(<a class=\"id\" href=\"#ks\">ks</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kgdb_info\">kgdb_info</a>[<a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#cpu\">cpu</a>].<a class=\"id\" href=\"#exception_state\">exception_state</a> &= ~(<a class=\"id\" href=\"#DCPU_WANT_MASTER\">DCPU_WANT_MASTER</a> |", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DCPU_IS_SLAVE\">DCPU_IS_SLAVE</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#kgdb_nmicallback\">kgdb_nmicallback</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>, void *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kgdb_state\">kgdb_state</a> <a class=\"id\" href=\"#kgdb_var\">kgdb_var</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kgdb_state\">kgdb_state</a> *<a class=\"id\" href=\"#ks\">ks</a> = &amp;<a class=\"id\" href=\"#kgdb_var\">kgdb_var</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#ks\">ks</a>, 0, sizeof(struct <a class=\"id\" href=\"#kgdb_state\">kgdb_state</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#cpu\">cpu</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ks\">ks</a>-><a class=\"id\" href=\"#linux_regs\">linux_regs</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#regs\">regs</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#cpu_in_kgdb\">cpu_in_kgdb</a>[<a class=\"id\" href=\"#cpu\">cpu</a>]) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#kgdb_active\">kgdb_active</a>) != -1 &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#kgdb_active\">kgdb_active</a>) != <a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_info\">kgdb_info</a>[<a class=\"id\" href=\"#cpu\">cpu</a>].<a class=\"id\" href=\"#exception_state\">exception_state</a> |= <a class=\"id\" href=\"#DCPU_IS_SLAVE\">DCPU_IS_SLAVE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_cpu_enter\">kgdb_cpu_enter</a>(<a class=\"id\" href=\"#ks\">ks</a>, <a class=\"id\" href=\"#regs\">regs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_info\">kgdb_info</a>[<a class=\"id\" href=\"#cpu\">cpu</a>].<a class=\"id\" href=\"#exception_state\">exception_state</a> &= ~<a class=\"id\" href=\"#DCPU_IS_SLAVE\">DCPU_IS_SLAVE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#kgdb_console_write\">kgdb_console_write</a>(struct <a class=\"id\" href=\"#console\">console</a> *<a class=\"id\" href=\"#co\">co</a>, const char *<a class=\"id\" href=\"#s\">s</a>,", 
"   unsigned <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If we're debugging, or KGDB has not connected, don't try</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and print. */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kgdb_connected\">kgdb_connected</a> || <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#kgdb_active\">kgdb_active</a>) != -1 || <a class=\"id\" href=\"#dbg_kdb_mode\">dbg_kdb_mode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gdbstub_msg_write\">gdbstub_msg_write</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#console\">console</a> <a class=\"id\" href=\"#kgdbcons\">kgdbcons</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>= \"kgdb\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#write\">write</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#kgdb_console_write\">kgdb_console_write</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#flags\">flags</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#CON_PRINTBUFFER\">CON_PRINTBUFFER</a> | <a class=\"id\" href=\"#CON_ENABLED\">CON_ENABLED</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#index\">index</a><span class=\"ts\"/><span class=\"ts\"/>= -1,", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MAGIC_SYSRQ\">CONFIG_MAGIC_SYSRQ</a>", 
"static void <a class=\"id\" href=\"#sysrq_handle_dbg\">sysrq_handle_dbg</a>(int <a class=\"id\" href=\"#key\">key</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dbg_io_ops\">dbg_io_ops</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CRIT\">KERN_CRIT</a> \"ERROR: No KGDB I/O module available\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kgdb_connected\">kgdb_connected</a>) {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KGDB_KDB\">CONFIG_KGDB_KDB</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#dbg_kdb_mode\">dbg_kdb_mode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CRIT\">KERN_CRIT</a> \"KGDB or $3#33 for KDB\\n\");", 
"#else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CRIT\">KERN_CRIT</a> \"Entering KGDB\\n\");", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kgdb_breakpoint\">kgdb_breakpoint</a>();", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#sysrq_key_op\">sysrq_key_op</a> <a class=\"id\" href=\"#sysrq_dbg_op\">sysrq_dbg_op</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#handler\">handler</a><span class=\"ts\"/>= <a class=\"id\" href=\"#sysrq_handle_dbg\">sysrq_handle_dbg</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#help_msg\">help_msg</a><span class=\"ts\"/>= \"debug(G)\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#action_msg\">action_msg</a><span class=\"ts\"/>= \"DEBUG\",", 
"};", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static int <a class=\"id\" href=\"#kgdb_panic_event\">kgdb_panic_event</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#self\">self</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned long <a class=\"id\" href=\"#val\">val</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dbg_kdb_mode\">dbg_kdb_mode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kdb_printf\">kdb_printf</a>(\"PANIC: %s\\n\", (char *)<a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kgdb_breakpoint\">kgdb_breakpoint</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_DONE\">NOTIFY_DONE</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> <a class=\"id\" href=\"#kgdb_panic_event_nb\">kgdb_panic_event_nb</a> = {", 
"       .<a class=\"id\" href=\"#notifier_call\">notifier_call</a><span class=\"ts\"/>= <a class=\"id\" href=\"#kgdb_panic_event\">kgdb_panic_event</a>,", 
"       .<a class=\"id\" href=\"#priority\">priority</a><span class=\"ts\"/>= <a class=\"id\" href=\"#INT_MAX\">INT_MAX</a>,", 
"};", 
"", 
"void <a class=\"id\" href=\"#__weak\">__weak</a> <a class=\"id\" href=\"#kgdb_arch_late\">kgdb_arch_late</a>(void)", 
"{", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#dbg_late_init\">dbg_late_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dbg_is_early\">dbg_is_early</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kgdb_io_module_registered\">kgdb_io_module_registered</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_arch_late\">kgdb_arch_late</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kdb_init\">kdb_init</a>(<a class=\"id\" href=\"#KDB_INIT_FULL\">KDB_INIT_FULL</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#kgdb_register_callbacks\">kgdb_register_callbacks</a>(void)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kgdb_io_module_registered\">kgdb_io_module_registered</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_io_module_registered\">kgdb_io_module_registered</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_arch_init\">kgdb_arch_init</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#dbg_is_early\">dbg_is_early</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_arch_late\">kgdb_arch_late</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_notifier_chain_register\">atomic_notifier_chain_register</a>(&amp;<a class=\"id\" href=\"#panic_notifier_list\">panic_notifier_list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#kgdb_panic_event_nb\">kgdb_panic_event_nb</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MAGIC_SYSRQ\">CONFIG_MAGIC_SYSRQ</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#register_sysrq_key\">register_sysrq_key</a>('g', &amp;<a class=\"id\" href=\"#sysrq_dbg_op\">sysrq_dbg_op</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kgdb_use_con\">kgdb_use_con</a> && !<a class=\"id\" href=\"#kgdb_con_registered\">kgdb_con_registered</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#register_console\">register_console</a>(&amp;<a class=\"id\" href=\"#kgdbcons\">kgdbcons</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_con_registered\">kgdb_con_registered</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#kgdb_unregister_callbacks\">kgdb_unregister_callbacks</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * When this routine is called KGDB should unregister from the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * panic handler and clean up, making sure it is not handling any</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * break exceptions at the time.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kgdb_io_module_registered\">kgdb_io_module_registered</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_io_module_registered\">kgdb_io_module_registered</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_notifier_chain_unregister\">atomic_notifier_chain_unregister</a>(&amp;<a class=\"id\" href=\"#panic_notifier_list\">panic_notifier_list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#kgdb_panic_event_nb\">kgdb_panic_event_nb</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_arch_exit\">kgdb_arch_exit</a>();", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MAGIC_SYSRQ\">CONFIG_MAGIC_SYSRQ</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unregister_sysrq_key\">unregister_sysrq_key</a>('g', &amp;<a class=\"id\" href=\"#sysrq_dbg_op\">sysrq_dbg_op</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kgdb_con_registered\">kgdb_con_registered</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unregister_console\">unregister_console</a>(&amp;<a class=\"id\" href=\"#kgdbcons\">kgdbcons</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_con_registered\">kgdb_con_registered</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * There are times a tasklet needs to be used vs a compiled in</span>", 
"<span class=\"comment\"> * break point so as to cause an exception outside a kgdb I/O module,</span>", 
"<span class=\"comment\"> * such as is the case with kgdboe, where calling a breakpoint in the</span>", 
"<span class=\"comment\"> * I/O driver itself would be fatal.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#kgdb_tasklet_bpt\">kgdb_tasklet_bpt</a>(unsigned long <a class=\"id\" href=\"#ing\">ing</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kgdb_breakpoint\">kgdb_breakpoint</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#kgdb_break_tasklet_var\">kgdb_break_tasklet_var</a>, 0);", 
"}", 
"", 
"static <a class=\"id\" href=\"#DECLARE_TASKLET\">DECLARE_TASKLET</a>(<a class=\"id\" href=\"#kgdb_tasklet_breakpoint\">kgdb_tasklet_breakpoint</a>, <a class=\"id\" href=\"#kgdb_tasklet_bpt\">kgdb_tasklet_bpt</a>, 0);", 
"", 
"void <a class=\"id\" href=\"#kgdb_schedule_breakpoint\">kgdb_schedule_breakpoint</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#kgdb_break_tasklet_var\">kgdb_break_tasklet_var</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#kgdb_active\">kgdb_active</a>) != -1 ||", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#kgdb_setting_breakpoint\">kgdb_setting_breakpoint</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#kgdb_break_tasklet_var\">kgdb_break_tasklet_var</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tasklet_schedule\">tasklet_schedule</a>(&amp;<a class=\"id\" href=\"#kgdb_tasklet_breakpoint\">kgdb_tasklet_breakpoint</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#kgdb_schedule_breakpoint\">kgdb_schedule_breakpoint</a>);", 
"", 
"static void <a class=\"id\" href=\"#kgdb_initial_breakpoint\">kgdb_initial_breakpoint</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kgdb_break_asap\">kgdb_break_asap</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CRIT\">KERN_CRIT</a> \"kgdb: Waiting for connection from remote gdb...\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kgdb_breakpoint\">kgdb_breakpoint</a>();", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>kgdb_register_io_module - register KGDB IO module</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@new_dbg_io_ops: the io ops vector</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Register it with the KGDB core.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#kgdb_register_io_module\">kgdb_register_io_module</a>(struct <a class=\"id\" href=\"#kgdb_io\">kgdb_io</a> *<a class=\"id\" href=\"#new_dbg_io_ops\">new_dbg_io_ops</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#kgdb_registration_lock\">kgdb_registration_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dbg_io_ops\">dbg_io_ops</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#kgdb_registration_lock\">kgdb_registration_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"kgdb: Another I/O driver is already \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"registered with KGDB.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#new_dbg_io_ops\">new_dbg_io_ops</a>-><a class=\"id\" href=\"#init\">init</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#new_dbg_io_ops\">new_dbg_io_ops</a>-><a class=\"id\" href=\"#init\">init</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#kgdb_registration_lock\">kgdb_registration_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dbg_io_ops\">dbg_io_ops</a> = <a class=\"id\" href=\"#new_dbg_io_ops\">new_dbg_io_ops</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#kgdb_registration_lock\">kgdb_registration_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"kgdb: Registered I/O driver %s.\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#new_dbg_io_ops\">new_dbg_io_ops</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Arm KGDB now. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kgdb_register_callbacks\">kgdb_register_callbacks</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kgdb_break_asap\">kgdb_break_asap</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_initial_breakpoint\">kgdb_initial_breakpoint</a>();", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#kgdb_register_io_module\">kgdb_register_io_module</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>kkgdb_unregister_io_module - unregister KGDB IO module</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@old_dbg_io_ops: the io ops vector</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Unregister it with the KGDB core.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#kgdb_unregister_io_module\">kgdb_unregister_io_module</a>(struct <a class=\"id\" href=\"#kgdb_io\">kgdb_io</a> *<a class=\"id\" href=\"#old_dbg_io_ops\">old_dbg_io_ops</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#kgdb_connected\">kgdb_connected</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * KGDB is no longer able to communicate out, so</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * unregister our callbacks and reset state.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kgdb_unregister_callbacks\">kgdb_unregister_callbacks</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#kgdb_registration_lock\">kgdb_registration_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#dbg_io_ops\">dbg_io_ops</a> != <a class=\"id\" href=\"#old_dbg_io_ops\">old_dbg_io_ops</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dbg_io_ops\">dbg_io_ops</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#kgdb_registration_lock\">kgdb_registration_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>\"kgdb: Unregistered I/O driver %s, debugger disabled.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old_dbg_io_ops\">old_dbg_io_ops</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#kgdb_unregister_io_module\">kgdb_unregister_io_module</a>);", 
"", 
"int <a class=\"id\" href=\"#dbg_io_get_char\">dbg_io_get_char</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#dbg_io_ops\">dbg_io_ops</a>-><a class=\"id\" href=\"#read_char\">read_char</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == <a class=\"id\" href=\"#NO_POLL_CHAR\">NO_POLL_CHAR</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dbg_kdb_mode\">dbg_kdb_mode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == 127)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 8;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * kgdb_breakpoint - generate breakpoint exception</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function will generate a breakpoint exception.  It is used at the</span>", 
"<span class=\"comment\"> * beginning of a program to sync up with a debugger and can be used</span>", 
"<span class=\"comment\"> * otherwise as a quick means to stop program execution and \"break\" into</span>", 
"<span class=\"comment\"> * the debugger.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#kgdb_breakpoint\">kgdb_breakpoint</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#kgdb_setting_breakpoint\">kgdb_setting_breakpoint</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wmb\">wmb</a>(); <span class=\"comment\">/* Sync point before breakpoint */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_kgdb_breakpoint\">arch_kgdb_breakpoint</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wmb\">wmb</a>(); <span class=\"comment\">/* Sync point after breakpoint */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#kgdb_setting_breakpoint\">kgdb_setting_breakpoint</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#kgdb_breakpoint\">kgdb_breakpoint</a>);", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#opt_kgdb_wait\">opt_kgdb_wait</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kgdb_break_asap\">kgdb_break_asap</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kdb_init\">kdb_init</a>(<a class=\"id\" href=\"#KDB_INIT_EARLY\">KDB_INIT_EARLY</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kgdb_io_module_registered\">kgdb_io_module_registered</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kgdb_initial_breakpoint\">kgdb_initial_breakpoint</a>();", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#early_param\">early_param</a>(\"kgdbwait\", <a class=\"id\" href=\"#opt_kgdb_wait\">opt_kgdb_wait</a>);", 
];
xr_frag_insert('l/21/99f1fedfa02a2656f92e4a3218b5f4af110160.xr', __xr_tmp);
