var __xr_tmp = [
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_start_request - start request processing on the driver</span>", 
"<span class=\"comment\"> * @req: request to dequeue</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *     Dequeue @req and start timeout timer on it.  This hands off the</span>", 
"<span class=\"comment\"> *     request to the driver.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *     Block internal functions which don't want to start timer should</span>", 
"<span class=\"comment\"> *     call blk_dequeue_request().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Context:</span>", 
"<span class=\"comment\"> *     queue_lock must be held.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#blk_start_request\">blk_start_request</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#req\">req</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_dequeue_request\">blk_dequeue_request</a>(<a class=\"id\" href=\"#req\">req</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We are now handing the request to the hardware, initialize</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * resid_len to full count and add the timeout handler.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#resid_len\">resid_len</a> = <a class=\"id\" href=\"#blk_rq_bytes\">blk_rq_bytes</a>(<a class=\"id\" href=\"#req\">req</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#blk_bidi_rq\">blk_bidi_rq</a>(<a class=\"id\" href=\"#req\">req</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#next_rq\">next_rq</a>-><a class=\"id\" href=\"#resid_len\">resid_len</a> = <a class=\"id\" href=\"#blk_rq_bytes\">blk_rq_bytes</a>(<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#next_rq\">next_rq</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_add_timer\">blk_add_timer</a>(<a class=\"id\" href=\"#req\">req</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_start_request\">blk_start_request</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_fetch_request - fetch a request from a request queue</span>", 
"<span class=\"comment\"> * @q: request queue to fetch a request from</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *     Return the request at the top of @q.  The request is started on</span>", 
"<span class=\"comment\"> *     return and LLD can start processing it immediately.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return:</span>", 
"<span class=\"comment\"> *     Pointer to the request at the top of @q if available.  Null</span>", 
"<span class=\"comment\"> *     otherwise.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Context:</span>", 
"<span class=\"comment\"> *     queue_lock must be held.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#blk_fetch_request\">blk_fetch_request</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a> = <a class=\"id\" href=\"#blk_peek_request\">blk_peek_request</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rq\">rq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_start_request\">blk_start_request</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rq\">rq</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_fetch_request\">blk_fetch_request</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_update_request - Special helper function for request stacking drivers</span>", 
"<span class=\"comment\"> * @req:      the request being processed</span>", 
"<span class=\"comment\"> * @error:    %0 for success, &lt; %0 for error</span>", 
"<span class=\"comment\"> * @nr_bytes: number of bytes to complete @req</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *     Ends I/O on a number of bytes attached to @req, but doesn't complete</span>", 
"<span class=\"comment\"> *     the request structure even if @req doesn't have leftover.</span>", 
"<span class=\"comment\"> *     If @req has leftover, sets it up for the next range of segments.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *     This special helper function is only for request stacking drivers</span>", 
"<span class=\"comment\"> *     (e.g. request-based dm) so that they can handle partial completion.</span>", 
"<span class=\"comment\"> *     Actual device drivers should use blk_end_request instead.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *     Passing the result of blk_rq_bytes() as @nr_bytes guarantees</span>", 
"<span class=\"comment\"> *     %false return from this function.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return:</span>", 
"<span class=\"comment\"> *     %false - this request doesn't have any more data</span>", 
"<span class=\"comment\"> *     %true  - this request has more data</span>", 
"<span class=\"comment\"> **/</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#blk_update_request\">blk_update_request</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#req\">req</a>, int <a class=\"id\" href=\"#error\">error</a>, unsigned int <a class=\"id\" href=\"#nr_bytes\">nr_bytes</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#total_bytes\">total_bytes</a>, <a class=\"id\" href=\"#bio_nbytes\">bio_nbytes</a>, <a class=\"id\" href=\"#next_idx\">next_idx</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#bio\">bio</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_block_rq_complete\">trace_block_rq_complete</a>(<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#req\">req</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For fs requests, rq is just carrier of independent bio's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and each partial completion should be handled separately.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Reset per-request error on each partial completion.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * TODO: tj: This is too subtle.  It would be better to let</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * low level drivers do what they see fit.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd_type\">cmd_type</a> == <a class=\"id\" href=\"#REQ_TYPE_FS\">REQ_TYPE_FS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#errors\">errors</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> && <a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd_type\">cmd_type</a> == <a class=\"id\" href=\"#REQ_TYPE_FS\">REQ_TYPE_FS</a> &&", 
"<span class=\"ts\"/>    !(<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_QUIET\">REQ_QUIET</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"end_request: I/O error, dev %s, sector %llu\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#rq_disk\">rq_disk</a> ? <a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#rq_disk\">rq_disk</a>-><a class=\"id\" href=\"#disk_name\">disk_name</a> : \"?\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long long)<a class=\"id\" href=\"#blk_rq_pos\">blk_rq_pos</a>(<a class=\"id\" href=\"#req\">req</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_account_io_completion\">blk_account_io_completion</a>(<a class=\"id\" href=\"#req\">req</a>, <a class=\"id\" href=\"#nr_bytes\">nr_bytes</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#total_bytes\">total_bytes</a> = <a class=\"id\" href=\"#bio_nbytes\">bio_nbytes</a> = 0;", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#bio\">bio</a>) != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#nbytes\">nbytes</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_bytes\">nr_bytes</a> >= <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_size\">bi_size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_next\">bi_next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nbytes\">nbytes</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_size\">bi_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req_bio_endio\">req_bio_endio</a>(<a class=\"id\" href=\"#req\">req</a>, <a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#nbytes\">nbytes</a>, <a class=\"id\" href=\"#error\">error</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_idx\">next_idx</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio_nbytes\">bio_nbytes</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_idx\">bi_idx</a> + <a class=\"id\" href=\"#next_idx\">next_idx</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#idx\">idx</a> >= <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_vcnt\">bi_vcnt</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_dump_rq_flags\">blk_dump_rq_flags</a>(<a class=\"id\" href=\"#req\">req</a>, \"__end_that\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"%s: bio idx %d >= vcnt %d\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_vcnt\">bi_vcnt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nbytes\">nbytes</a> = <a class=\"id\" href=\"#bio_iovec_idx\">bio_iovec_idx</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#idx\">idx</a>)-><a class=\"id\" href=\"#bv_len\">bv_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BIO_BUG_ON\">BIO_BUG_ON</a>(<a class=\"id\" href=\"#nbytes\">nbytes</a> &gt; <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_size\">bi_size</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * not a complete bvec done</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#nbytes\">nbytes</a> &gt; <a class=\"id\" href=\"#nr_bytes\">nr_bytes</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio_nbytes\">bio_nbytes</a> += <a class=\"id\" href=\"#nr_bytes\">nr_bytes</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#total_bytes\">total_bytes</a> += <a class=\"id\" href=\"#nr_bytes\">nr_bytes</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * advance to the next vector</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_idx\">next_idx</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio_nbytes\">bio_nbytes</a> += <a class=\"id\" href=\"#nbytes\">nbytes</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#total_bytes\">total_bytes</a> += <a class=\"id\" href=\"#nbytes\">nbytes</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_bytes\">nr_bytes</a> -= <a class=\"id\" href=\"#nbytes\">nbytes</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#bio\">bio</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bio\">bio</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * end more in this run, or just return 'not-done'</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#nr_bytes\">nr_bytes</a> <= 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * completely done</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#bio\">bio</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Reset counters so that the request stacking driver</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * can find how many bytes remain in the request</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * later.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#__data_len\">__data_len</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * if the request wasn't completed, update state</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bio_nbytes\">bio_nbytes</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req_bio_endio\">req_bio_endio</a>(<a class=\"id\" href=\"#req\">req</a>, <a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#bio_nbytes\">bio_nbytes</a>, <a class=\"id\" href=\"#error\">error</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_idx\">bi_idx</a> += <a class=\"id\" href=\"#next_idx\">next_idx</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio_iovec\">bio_iovec</a>(<a class=\"id\" href=\"#bio\">bio</a>)-><a class=\"id\" href=\"#bv_offset\">bv_offset</a> += <a class=\"id\" href=\"#nr_bytes\">nr_bytes</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio_iovec\">bio_iovec</a>(<a class=\"id\" href=\"#bio\">bio</a>)-><a class=\"id\" href=\"#bv_len\">bv_len</a> -= <a class=\"id\" href=\"#nr_bytes\">nr_bytes</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#__data_len\">__data_len</a> -= <a class=\"id\" href=\"#total_bytes\">total_bytes</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#bio_data\">bio_data</a>(<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#bio\">bio</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* update sector only for requests with clear definition of sector */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd_type\">cmd_type</a> == <a class=\"id\" href=\"#REQ_TYPE_FS\">REQ_TYPE_FS</a> || (<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_DISCARD\">REQ_DISCARD</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#__sector\">__sector</a> += <a class=\"id\" href=\"#total_bytes\">total_bytes</a> >> 9;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* mixed attributes always follow the first bio */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_MIXED_MERGE\">REQ_MIXED_MERGE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &= ~<a class=\"id\" href=\"#REQ_FAILFAST_MASK\">REQ_FAILFAST_MASK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> |= <a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_rw\">bi_rw</a> &amp; <a class=\"id\" href=\"#REQ_FAILFAST_MASK\">REQ_FAILFAST_MASK</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If total number of sectors is less than the first segment</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * size, something has gone terribly wrong.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#blk_rq_bytes\">blk_rq_bytes</a>(<a class=\"id\" href=\"#req\">req</a>) &lt; <a class=\"id\" href=\"#blk_rq_cur_bytes\">blk_rq_cur_bytes</a>(<a class=\"id\" href=\"#req\">req</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"blk: request botched\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#__data_len\">__data_len</a> = <a class=\"id\" href=\"#blk_rq_cur_bytes\">blk_rq_cur_bytes</a>(<a class=\"id\" href=\"#req\">req</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* recalculate the number of segments */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_recalc_rq_segments\">blk_recalc_rq_segments</a>(<a class=\"id\" href=\"#req\">req</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#blk_update_request\">blk_update_request</a>);", 
"", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#blk_update_bidi_request\">blk_update_bidi_request</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>, int <a class=\"id\" href=\"#error\">error</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned int <a class=\"id\" href=\"#nr_bytes\">nr_bytes</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    unsigned int <a class=\"id\" href=\"#bidi_bytes\">bidi_bytes</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#blk_update_request\">blk_update_request</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#error\">error</a>, <a class=\"id\" href=\"#nr_bytes\">nr_bytes</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Bidi request must be completed as a whole */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#blk_bidi_rq\">blk_bidi_rq</a>(<a class=\"id\" href=\"#rq\">rq</a>)) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#blk_update_request\">blk_update_request</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#next_rq\">next_rq</a>, <a class=\"id\" href=\"#error\">error</a>, <a class=\"id\" href=\"#bidi_bytes\">bidi_bytes</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#blk_queue_add_random\">blk_queue_add_random</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#q\">q</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_disk_randomness\">add_disk_randomness</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rq_disk\">rq_disk</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_unprep_request - unprepare a request</span>", 
"<span class=\"comment\"> * @req:<span class=\"ts\"/>the request</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function makes a request ready for complete resubmission (or</span>", 
"<span class=\"comment\"> * completion).  It happens only after all error handling is complete,</span>", 
"<span class=\"comment\"> * so represents the appropriate moment to deallocate any resources</span>", 
"<span class=\"comment\"> * that were allocated to the request in the prep_rq_fn.  The queue</span>", 
"<span class=\"comment\"> * lock is held when calling this.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#blk_unprep_request\">blk_unprep_request</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#req\">req</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#q\">q</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &= ~<a class=\"id\" href=\"#REQ_DONTPREP\">REQ_DONTPREP</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#unprep_rq_fn\">unprep_rq_fn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#unprep_rq_fn\">unprep_rq_fn</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#req\">req</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#blk_unprep_request\">blk_unprep_request</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * queue lock must be held</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#blk_finish_request\">blk_finish_request</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#req\">req</a>, int <a class=\"id\" href=\"#error\">error</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#blk_rq_tagged\">blk_rq_tagged</a>(<a class=\"id\" href=\"#req\">req</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_end_tag\">blk_queue_end_tag</a>(<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#req\">req</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#blk_queued_rq\">blk_queued_rq</a>(<a class=\"id\" href=\"#req\">req</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#laptop_mode\">laptop_mode</a>) && <a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd_type\">cmd_type</a> == <a class=\"id\" href=\"#REQ_TYPE_FS\">REQ_TYPE_FS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#laptop_io_completion\">laptop_io_completion</a>(&amp;<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_delete_timer\">blk_delete_timer</a>(<a class=\"id\" href=\"#req\">req</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_DONTPREP\">REQ_DONTPREP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_unprep_request\">blk_unprep_request</a>(<a class=\"id\" href=\"#req\">req</a>);", 
"", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_account_io_done\">blk_account_io_done</a>(<a class=\"id\" href=\"#req\">req</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#end_io\">end_io</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#end_io\">end_io</a>(<a class=\"id\" href=\"#req\">req</a>, <a class=\"id\" href=\"#error\">error</a>);", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#blk_bidi_rq\">blk_bidi_rq</a>(<a class=\"id\" href=\"#req\">req</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__blk_put_request\">__blk_put_request</a>(<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#next_rq\">next_rq</a>-><a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#next_rq\">next_rq</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__blk_put_request\">__blk_put_request</a>(<a class=\"id\" href=\"#req\">req</a>-><a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#req\">req</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_end_bidi_request - Complete a bidi request</span>", 
"<span class=\"comment\"> * @rq:         the request to complete</span>", 
"<span class=\"comment\"> * @error:      %0 for success, &lt; %0 for error</span>", 
"<span class=\"comment\"> * @nr_bytes:   number of bytes to complete @rq</span>", 
"<span class=\"comment\"> * @bidi_bytes: number of bytes to complete @rq-&gt;next_rq</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *     Ends I/O on a number of bytes attached to @rq and @rq-&gt;next_rq.</span>", 
"<span class=\"comment\"> *     Drivers that supports bidi can safely call this member for any</span>", 
"<span class=\"comment\"> *     type of request, bidi or uni.  In the later case @bidi_bytes is</span>", 
"<span class=\"comment\"> *     just ignored.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return:</span>", 
"<span class=\"comment\"> *     %false - we are done with this request</span>", 
"<span class=\"comment\"> *     %true  - still buffers pending for this request</span>", 
"<span class=\"comment\"> **/</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#blk_end_bidi_request\">blk_end_bidi_request</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>, int <a class=\"id\" href=\"#error\">error</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> unsigned int <a class=\"id\" href=\"#nr_bytes\">nr_bytes</a>, unsigned int <a class=\"id\" href=\"#bidi_bytes\">bidi_bytes</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#q\">q</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#blk_update_bidi_request\">blk_update_bidi_request</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#error\">error</a>, <a class=\"id\" href=\"#nr_bytes\">nr_bytes</a>, <a class=\"id\" href=\"#bidi_bytes\">bidi_bytes</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_finish_request\">blk_finish_request</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#error\">error</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#queue_lock\">queue_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __blk_end_bidi_request - Complete a bidi request with queue lock held</span>", 
"<span class=\"comment\"> * @rq:         the request to complete</span>", 
"<span class=\"comment\"> * @error:      %0 for success, &lt; %0 for error</span>", 
"<span class=\"comment\"> * @nr_bytes:   number of bytes to complete @rq</span>", 
"<span class=\"comment\"> * @bidi_bytes: number of bytes to complete @rq-&gt;next_rq</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *     Identical to blk_end_bidi_request() except that queue lock is</span>", 
"<span class=\"comment\"> *     assumed to be locked on entry and remains so on return.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return:</span>", 
"<span class=\"comment\"> *     %false - we are done with this request</span>", 
"<span class=\"comment\"> *     %true  - still buffers pending for this request</span>", 
"<span class=\"comment\"> **/</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#__blk_end_bidi_request\">__blk_end_bidi_request</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>, int <a class=\"id\" href=\"#error\">error</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned int <a class=\"id\" href=\"#nr_bytes\">nr_bytes</a>, unsigned int <a class=\"id\" href=\"#bidi_bytes\">bidi_bytes</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#blk_update_bidi_request\">blk_update_bidi_request</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#error\">error</a>, <a class=\"id\" href=\"#nr_bytes\">nr_bytes</a>, <a class=\"id\" href=\"#bidi_bytes\">bidi_bytes</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_finish_request\">blk_finish_request</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#error\">error</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_end_request - Helper function for drivers to complete the request.</span>", 
"<span class=\"comment\"> * @rq:       the request being processed</span>", 
"<span class=\"comment\"> * @error:    %0 for success, &lt; %0 for error</span>", 
"<span class=\"comment\"> * @nr_bytes: number of bytes to complete</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *     Ends I/O on a number of bytes attached to @rq.</span>", 
"<span class=\"comment\"> *     If @rq has leftover, sets it up for the next range of segments.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return:</span>", 
"<span class=\"comment\"> *     %false - we are done with this request</span>", 
"<span class=\"comment\"> *     %true  - still buffers pending for this request</span>", 
"<span class=\"comment\"> **/</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#blk_end_request\">blk_end_request</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>, int <a class=\"id\" href=\"#error\">error</a>, unsigned int <a class=\"id\" href=\"#nr_bytes\">nr_bytes</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#blk_end_bidi_request\">blk_end_bidi_request</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#error\">error</a>, <a class=\"id\" href=\"#nr_bytes\">nr_bytes</a>, 0);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_end_request\">blk_end_request</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_end_request_all - Helper function for drives to finish the request.</span>", 
"<span class=\"comment\"> * @rq: the request to finish</span>", 
"<span class=\"comment\"> * @error: %0 for success, &lt; %0 for error</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *     Completely finish @rq.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#blk_end_request_all\">blk_end_request_all</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>, int <a class=\"id\" href=\"#error\">error</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#pending\">pending</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#bidi_bytes\">bidi_bytes</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#blk_bidi_rq\">blk_bidi_rq</a>(<a class=\"id\" href=\"#rq\">rq</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bidi_bytes\">bidi_bytes</a> = <a class=\"id\" href=\"#blk_rq_bytes\">blk_rq_bytes</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#next_rq\">next_rq</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pending\">pending</a> = <a class=\"id\" href=\"#blk_end_bidi_request\">blk_end_bidi_request</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#error\">error</a>, <a class=\"id\" href=\"#blk_rq_bytes\">blk_rq_bytes</a>(<a class=\"id\" href=\"#rq\">rq</a>), <a class=\"id\" href=\"#bidi_bytes\">bidi_bytes</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#pending\">pending</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_end_request_all\">blk_end_request_all</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_end_request_cur - Helper function to finish the current request chunk.</span>", 
"<span class=\"comment\"> * @rq: the request to finish the current chunk for</span>", 
"<span class=\"comment\"> * @error: %0 for success, &lt; %0 for error</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *     Complete the current consecutively mapped chunk from @rq.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return:</span>", 
"<span class=\"comment\"> *     %false - we are done with this request</span>", 
"<span class=\"comment\"> *     %true  - still buffers pending for this request</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#blk_end_request_cur\">blk_end_request_cur</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>, int <a class=\"id\" href=\"#error\">error</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#blk_end_request\">blk_end_request</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#error\">error</a>, <a class=\"id\" href=\"#blk_rq_cur_bytes\">blk_rq_cur_bytes</a>(<a class=\"id\" href=\"#rq\">rq</a>));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#blk_end_request_cur\">blk_end_request_cur</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_end_request_err - Finish a request till the next failure boundary.</span>", 
"<span class=\"comment\"> * @rq: the request to finish till the next failure boundary for</span>", 
"<span class=\"comment\"> * @error: must be negative errno</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *     Complete @rq till the next failure boundary.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return:</span>", 
"<span class=\"comment\"> *     %false - we are done with this request</span>", 
"<span class=\"comment\"> *     %true  - still buffers pending for this request</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#blk_end_request_err\">blk_end_request_err</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>, int <a class=\"id\" href=\"#error\">error</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#error\">error</a> >= 0);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#blk_end_request\">blk_end_request</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#error\">error</a>, <a class=\"id\" href=\"#blk_rq_err_bytes\">blk_rq_err_bytes</a>(<a class=\"id\" href=\"#rq\">rq</a>));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#blk_end_request_err\">blk_end_request_err</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __blk_end_request - Helper function for drivers to complete the request.</span>", 
"<span class=\"comment\"> * @rq:       the request being processed</span>", 
"<span class=\"comment\"> * @error:    %0 for success, &lt; %0 for error</span>", 
"<span class=\"comment\"> * @nr_bytes: number of bytes to complete</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *     Must be called with queue lock held unlike blk_end_request().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return:</span>", 
"<span class=\"comment\"> *     %false - we are done with this request</span>", 
"<span class=\"comment\"> *     %true  - still buffers pending for this request</span>", 
"<span class=\"comment\"> **/</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#__blk_end_request\">__blk_end_request</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>, int <a class=\"id\" href=\"#error\">error</a>, unsigned int <a class=\"id\" href=\"#nr_bytes\">nr_bytes</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__blk_end_bidi_request\">__blk_end_bidi_request</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#error\">error</a>, <a class=\"id\" href=\"#nr_bytes\">nr_bytes</a>, 0);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__blk_end_request\">__blk_end_request</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __blk_end_request_all - Helper function for drives to finish the request.</span>", 
"<span class=\"comment\"> * @rq: the request to finish</span>", 
"<span class=\"comment\"> * @error: %0 for success, &lt; %0 for error</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *     Completely finish @rq.  Must be called with queue lock held.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__blk_end_request_all\">__blk_end_request_all</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>, int <a class=\"id\" href=\"#error\">error</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#pending\">pending</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#bidi_bytes\">bidi_bytes</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#blk_bidi_rq\">blk_bidi_rq</a>(<a class=\"id\" href=\"#rq\">rq</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bidi_bytes\">bidi_bytes</a> = <a class=\"id\" href=\"#blk_rq_bytes\">blk_rq_bytes</a>(<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#next_rq\">next_rq</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pending\">pending</a> = <a class=\"id\" href=\"#__blk_end_bidi_request\">__blk_end_bidi_request</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#error\">error</a>, <a class=\"id\" href=\"#blk_rq_bytes\">blk_rq_bytes</a>(<a class=\"id\" href=\"#rq\">rq</a>), <a class=\"id\" href=\"#bidi_bytes\">bidi_bytes</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#pending\">pending</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__blk_end_request_all\">__blk_end_request_all</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __blk_end_request_cur - Helper function to finish the current request chunk.</span>", 
"<span class=\"comment\"> * @rq: the request to finish the current chunk for</span>", 
"<span class=\"comment\"> * @error: %0 for success, &lt; %0 for error</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *     Complete the current consecutively mapped chunk from @rq.  Must</span>", 
"<span class=\"comment\"> *     be called with queue lock held.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return:</span>", 
"<span class=\"comment\"> *     %false - we are done with this request</span>", 
"<span class=\"comment\"> *     %true  - still buffers pending for this request</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#__blk_end_request_cur\">__blk_end_request_cur</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>, int <a class=\"id\" href=\"#error\">error</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__blk_end_request\">__blk_end_request</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#error\">error</a>, <a class=\"id\" href=\"#blk_rq_cur_bytes\">blk_rq_cur_bytes</a>(<a class=\"id\" href=\"#rq\">rq</a>));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__blk_end_request_cur\">__blk_end_request_cur</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __blk_end_request_err - Finish a request till the next failure boundary.</span>", 
"<span class=\"comment\"> * @rq: the request to finish till the next failure boundary for</span>", 
"<span class=\"comment\"> * @error: must be negative errno</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *     Complete @rq till the next failure boundary.  Must be called</span>", 
"<span class=\"comment\"> *     with queue lock held.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return:</span>", 
"<span class=\"comment\"> *     %false - we are done with this request</span>", 
"<span class=\"comment\"> *     %true  - still buffers pending for this request</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#__blk_end_request_err\">__blk_end_request_err</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>, int <a class=\"id\" href=\"#error\">error</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#error\">error</a> >= 0);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__blk_end_request\">__blk_end_request</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#error\">error</a>, <a class=\"id\" href=\"#blk_rq_err_bytes\">blk_rq_err_bytes</a>(<a class=\"id\" href=\"#rq\">rq</a>));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#__blk_end_request_err\">__blk_end_request_err</a>);", 
"", 
"void <a class=\"id\" href=\"#blk_rq_bio_prep\">blk_rq_bio_prep</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Bit 0 (R/W) is identical in rq-&gt;cmd_flags and bio-&gt;bi_rw */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> |= <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_rw\">bi_rw</a> &amp; <a class=\"id\" href=\"#REQ_WRITE\">REQ_WRITE</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bio_has_data\">bio_has_data</a>(<a class=\"id\" href=\"#bio\">bio</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#nr_phys_segments\">nr_phys_segments</a> = <a class=\"id\" href=\"#bio_phys_segments\">bio_phys_segments</a>(<a class=\"id\" href=\"#q\">q</a>, <a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#bio_data\">bio_data</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#__data_len\">__data_len</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_size\">bi_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#biotail\">biotail</a> = <a class=\"id\" href=\"#bio\">bio</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_bdev\">bi_bdev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#rq_disk\">rq_disk</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_bdev\">bi_bdev</a>-><a class=\"id\" href=\"#bd_disk\">bd_disk</a>;", 
"}", 
"", 
"#if <a class=\"id\" href=\"#ARCH_IMPLEMENTS_FLUSH_DCACHE_PAGE\">ARCH_IMPLEMENTS_FLUSH_DCACHE_PAGE</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * rq_flush_dcache_pages - Helper function to flush all pages in a request</span>", 
"<span class=\"comment\"> * @rq: the request to be flushed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *     Flush all pages in @rq.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#rq_flush_dcache_pages\">rq_flush_dcache_pages</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#req_iterator\">req_iterator</a> <a class=\"id\" href=\"#iter\">iter</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio_vec\">bio_vec</a> *<a class=\"id\" href=\"#bvec\">bvec</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rq_for_each_segment\">rq_for_each_segment</a>(<a class=\"id\" href=\"#bvec\">bvec</a>, <a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#iter\">iter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_dcache_page\">flush_dcache_page</a>(<a class=\"id\" href=\"#bvec\">bvec</a>-><a class=\"id\" href=\"#bv_page\">bv_page</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#rq_flush_dcache_pages\">rq_flush_dcache_pages</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_lld_busy - Check if underlying low-level drivers of a device are busy</span>", 
"<span class=\"comment\"> * @q : the queue of the device being checked</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *    Check if underlying low-level drivers of a device are busy.</span>", 
"<span class=\"comment\"> *    If the drivers want to export their busy state, they must set own</span>", 
"<span class=\"comment\"> *    exporting function using blk_queue_lld_busy() first.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *    Basically, this function is used only by request stacking drivers</span>", 
"<span class=\"comment\"> *    to stop dispatching requests to underlying devices when underlying</span>", 
"<span class=\"comment\"> *    devices are busy.  This behavior helps more I/O merging on the queue</span>", 
"<span class=\"comment\"> *    of the request stacking driver and prevents I/O throughput regression</span>", 
"<span class=\"comment\"> *    on burst I/O load.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Return:</span>", 
"<span class=\"comment\"> *    0 - Not busy (The request stacking driver should dispatch request)</span>", 
"<span class=\"comment\"> *    1 - Busy (The request stacking driver should stop dispatching request)</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#blk_lld_busy\">blk_lld_busy</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#lld_busy_fn\">lld_busy_fn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#lld_busy_fn\">lld_busy_fn</a>(<a class=\"id\" href=\"#q\">q</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#blk_lld_busy\">blk_lld_busy</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_rq_unprep_clone - Helper function to free all bios in a cloned request</span>", 
"<span class=\"comment\"> * @rq: the clone request to be cleaned up</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *     Free all bios in @rq for a cloned request.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#blk_rq_unprep_clone\">blk_rq_unprep_clone</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>;", 
"", 
"<span class=\"ts\"/>while ((<a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#bio\">bio</a>) != <a class=\"id\" href=\"#NULL\">NULL</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#bio\">bio</a>-><a class=\"id\" href=\"#bi_next\">bi_next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio_put\">bio_put</a>(<a class=\"id\" href=\"#bio\">bio</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#blk_rq_unprep_clone\">blk_rq_unprep_clone</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copy attributes of the original request to the clone request.</span>", 
"<span class=\"comment\"> * The actual data parts (e.g. -&gt;cmd, -&gt;buffer, -&gt;sense) are not copied.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__blk_rq_prep_clone\">__blk_rq_prep_clone</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#dst\">dst</a>, struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#src\">src</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#src\">src</a>-><a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> = (<a class=\"id\" href=\"#rq_data_dir\">rq_data_dir</a>(<a class=\"id\" href=\"#src\">src</a>) | <a class=\"id\" href=\"#REQ_NOMERGE\">REQ_NOMERGE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#src\">src</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_DISCARD\">REQ_DISCARD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> |= <a class=\"id\" href=\"#REQ_DISCARD\">REQ_DISCARD</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#cmd_type\">cmd_type</a> = <a class=\"id\" href=\"#src\">src</a>-><a class=\"id\" href=\"#cmd_type\">cmd_type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#__sector\">__sector</a> = <a class=\"id\" href=\"#blk_rq_pos\">blk_rq_pos</a>(<a class=\"id\" href=\"#src\">src</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#__data_len\">__data_len</a> = <a class=\"id\" href=\"#blk_rq_bytes\">blk_rq_bytes</a>(<a class=\"id\" href=\"#src\">src</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#nr_phys_segments\">nr_phys_segments</a> = <a class=\"id\" href=\"#src\">src</a>-><a class=\"id\" href=\"#nr_phys_segments\">nr_phys_segments</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#ioprio\">ioprio</a> = <a class=\"id\" href=\"#src\">src</a>-><a class=\"id\" href=\"#ioprio\">ioprio</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dst\">dst</a>-><a class=\"id\" href=\"#extra_len\">extra_len</a> = <a class=\"id\" href=\"#src\">src</a>-><a class=\"id\" href=\"#extra_len\">extra_len</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * blk_rq_prep_clone - Helper function to setup clone request</span>", 
"<span class=\"comment\"> * @rq: the request to be setup</span>", 
"<span class=\"comment\"> * @rq_src: original request to be cloned</span>", 
"<span class=\"comment\"> * @bs: bio_set that bios for clone are allocated from</span>", 
"<span class=\"comment\"> * @gfp_mask: memory allocation mask for bio</span>", 
"<span class=\"comment\"> * @bio_ctr: setup function to be called for each clone bio.</span>", 
"<span class=\"comment\"> *           Returns %0 for success, non %0 for failure.</span>", 
"<span class=\"comment\"> * @data: private data to be passed to @bio_ctr</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Description:</span>", 
"<span class=\"comment\"> *     Clones bios in @rq_src to @rq, and copies attributes of @rq_src to @rq.</span>", 
"<span class=\"comment\"> *     The actual data parts of @rq_src (e.g. -&gt;cmd, -&gt;buffer, -&gt;sense)</span>", 
"<span class=\"comment\"> *     are not copied, and copying such parts is the caller's responsibility.</span>", 
"<span class=\"comment\"> *     Also, pages which the original bios are pointing to are not copied</span>", 
"<span class=\"comment\"> *     and the cloned bios just point same pages.</span>", 
"<span class=\"comment\"> *     So cloned bios must be completed before original bios, which means</span>", 
"<span class=\"comment\"> *     the caller must complete @rq before @rq_src.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#blk_rq_prep_clone\">blk_rq_prep_clone</a>(struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq\">rq</a>, struct <a class=\"id\" href=\"#request\">request</a> *<a class=\"id\" href=\"#rq_src\">rq_src</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#bio_set\">bio_set</a> *<a class=\"id\" href=\"#bs\">bs</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      int (*<a class=\"id\" href=\"#bio_ctr\">bio_ctr</a>)(struct <a class=\"id\" href=\"#bio\">bio</a> *, struct <a class=\"id\" href=\"#bio\">bio</a> *, void *),", 
"<span class=\"ts\"/><span class=\"ts\"/>      void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bio\">bio</a> *<a class=\"id\" href=\"#bio\">bio</a>, *<a class=\"id\" href=\"#bio_src\">bio_src</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bs\">bs</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bs\">bs</a> = <a class=\"id\" href=\"#fs_bio_set\">fs_bio_set</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_rq_init\">blk_rq_init</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#rq\">rq</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__rq_for_each_bio\">__rq_for_each_bio</a>(<a class=\"id\" href=\"#bio_src\">bio_src</a>, <a class=\"id\" href=\"#rq_src\">rq_src</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#bio_alloc_bioset\">bio_alloc_bioset</a>(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#bio_src\">bio_src</a>-><a class=\"id\" href=\"#bi_max_vecs\">bi_max_vecs</a>, <a class=\"id\" href=\"#bs\">bs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bio\">bio</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_and_out\">free_and_out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__bio_clone\">__bio_clone</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#bio_src\">bio_src</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bio_integrity\">bio_integrity</a>(<a class=\"id\" href=\"#bio_src\">bio_src</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#bio_integrity_clone\">bio_integrity_clone</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#bio_src\">bio_src</a>, <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>, <a class=\"id\" href=\"#bs\">bs</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_and_out\">free_and_out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bio_ctr\">bio_ctr</a> && <a class=\"id\" href=\"#bio_ctr\">bio_ctr</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#bio_src\">bio_src</a>, <a class=\"id\" href=\"#data\">data</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#free_and_out\">free_and_out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#bio\">bio</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#biotail\">biotail</a>-><a class=\"id\" href=\"#bi_next\">bi_next</a> = <a class=\"id\" href=\"#bio\">bio</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#biotail\">biotail</a> = <a class=\"id\" href=\"#bio\">bio</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#bio\">bio</a> = <a class=\"id\" href=\"#rq\">rq</a>-><a class=\"id\" href=\"#biotail\">biotail</a> = <a class=\"id\" href=\"#bio\">bio</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__blk_rq_prep_clone\">__blk_rq_prep_clone</a>(<a class=\"id\" href=\"#rq\">rq</a>, <a class=\"id\" href=\"#rq_src\">rq_src</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#free_and_out\">free_and_out</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bio\">bio</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bio_free\">bio_free</a>(<a class=\"id\" href=\"#bio\">bio</a>, <a class=\"id\" href=\"#bs\">bs</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_rq_unprep_clone\">blk_rq_unprep_clone</a>(<a class=\"id\" href=\"#rq\">rq</a>);", 
"", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#blk_rq_prep_clone\">blk_rq_prep_clone</a>);", 
"", 
"int <a class=\"id\" href=\"#kblockd_schedule_work\">kblockd_schedule_work</a>(struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a>, struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#queue_work\">queue_work</a>(<a class=\"id\" href=\"#kblockd_workqueue\">kblockd_workqueue</a>, <a class=\"id\" href=\"#work\">work</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#kblockd_schedule_work\">kblockd_schedule_work</a>);", 
"", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#blk_dev_init\">blk_dev_init</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUILD_BUG_ON\">BUILD_BUG_ON</a>(<a class=\"id\" href=\"#__REQ_NR_BITS\">__REQ_NR_BITS</a> &gt; 8 *", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(((struct <a class=\"id\" href=\"#request\">request</a> *)0)-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kblockd_workqueue\">kblockd_workqueue</a> = <a class=\"id\" href=\"#create_workqueue\">create_workqueue</a>(\"kblockd\");", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kblockd_workqueue\">kblockd_workqueue</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"Failed to create kblockd\\n\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#request_cachep\">request_cachep</a> = <a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(\"blkdev_requests\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(struct <a class=\"id\" href=\"#request\">request</a>), 0, <a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_requestq_cachep\">blk_requestq_cachep</a> = <a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(\"blkdev_queue\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(struct <a class=\"id\" href=\"#request_queue\">request_queue</a>), 0, <a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
];
xr_frag_insert('l/21/b1b6e20d2e7a8d265842b6ee989a8c5088781b.xr', __xr_tmp);
