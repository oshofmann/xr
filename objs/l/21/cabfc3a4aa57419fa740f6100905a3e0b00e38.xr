var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * linux/fs/inode.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * (C) 1997 Linus Torvalds</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#dcache\">dcache</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#writeback\">writeback</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#backing\">backing</a>-<a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#wait\">wait</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rwsem\">rwsem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hash\">hash</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#swap\">swap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#security\">security</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pagemap\">pagemap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cdev\">cdev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bootmem\">bootmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fsnotify\">fsnotify</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mount\">mount</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#async\">async</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#posix_acl\">posix_acl</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is needed for the following functions:</span>", 
"<span class=\"comment\"> *  - inode_has_buffers</span>", 
"<span class=\"comment\"> *  - invalidate_inode_buffers</span>", 
"<span class=\"comment\"> *  - invalidate_bdev</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FIXME: remove all knowledge of the buffer layer from this file</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#buffer_head\">buffer_head</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * New inode.c implementation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This implementation has the basic premise of trying</span>", 
"<span class=\"comment\"> * to be extremely low-overhead and SMP-safe, yet be</span>", 
"<span class=\"comment\"> * simple enough to be \"obviously correct\".</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Famous last words.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* inode dynamic allocation 1999, Andrea Arcangeli &lt;andrea@suse.de&gt; */</span>", 
"", 
"<span class=\"comment\">/* #define INODE_PARANOIA 1 */</span>", 
"<span class=\"comment\">/* #define INODE_DEBUG 1 */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Inode lookup is no longer as critical as it used to be:</span>", 
"<span class=\"comment\"> * most of the lookups are going to be through the dcache.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I_HASHBITS\">I_HASHBITS</a><span class=\"ts\"/><a class=\"id\" href=\"#i_hash_shift\">i_hash_shift</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#I_HASHMASK\">I_HASHMASK</a><span class=\"ts\"/><a class=\"id\" href=\"#i_hash_mask\">i_hash_mask</a>", 
"", 
"static unsigned int <a class=\"id\" href=\"#i_hash_mask\">i_hash_mask</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"static unsigned int <a class=\"id\" href=\"#i_hash_shift\">i_hash_shift</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Each inode can be on two separate lists. One is</span>", 
"<span class=\"comment\"> * the hash list of the inode, used for lookups. The</span>", 
"<span class=\"comment\"> * other linked list is the \"type\" list:</span>", 
"<span class=\"comment\"> *  \"in_use\" - valid inode, i_count &gt; 0, i_nlink &gt; 0</span>", 
"<span class=\"comment\"> *  \"dirty\"  - as \"in_use\" but also dirty</span>", 
"<span class=\"comment\"> *  \"unused\" - valid inode, i_count = 0</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * A \"dirty\" list is maintained for each super block,</span>", 
"<span class=\"comment\"> * allowing for low-overhead inode sync() operations.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#inode_in_use\">inode_in_use</a>);", 
"<a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#inode_unused\">inode_unused</a>);", 
"static struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#inode_hashtable\">inode_hashtable</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * A simple spinlock to protect the list manipulations.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE! You also have to own the lock if you change</span>", 
"<span class=\"comment\"> * the i_state of an inode while it is in use..</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * iprune_sem provides exclusion between the kswapd or try_to_free_pages</span>", 
"<span class=\"comment\"> * icache shrinking path, and the umount path.  Without this exclusion,</span>", 
"<span class=\"comment\"> * by the time prune_icache calls iput for the inode whose pages it has</span>", 
"<span class=\"comment\"> * been invalidating, or by the time it calls clear_inode &amp; destroy_inode</span>", 
"<span class=\"comment\"> * from its final dispose_list, the struct super_block they refer to</span>", 
"<span class=\"comment\"> * (for inode-&gt;i_sb-&gt;s_op) may already have been freed and reused.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We make this an rwsem because the fastpath is icache shrinking. In</span>", 
"<span class=\"comment\"> * some cases a filesystem may be doing a significant amount of work in</span>", 
"<span class=\"comment\"> * its inode reclaim code, so this should improve parallelism.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#DECLARE_RWSEM\">DECLARE_RWSEM</a>(<a class=\"id\" href=\"#iprune_sem\">iprune_sem</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Statistics gathering..</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#inodes_stat_t\">inodes_stat_t</a> <a class=\"id\" href=\"#inodes_stat\">inodes_stat</a>;", 
"", 
"static struct <a class=\"id\" href=\"#kmem_cache\">kmem_cache</a> *<a class=\"id\" href=\"#inode_cachep\">inode_cachep</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"static void <a class=\"id\" href=\"#wake_up_inode\">wake_up_inode</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Prevent speculative execution through spin_unlock(&amp;inode_lock);</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up_bit\">wake_up_bit</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a>, <a class=\"id\" href=\"#__I_NEW\">__I_NEW</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * inode_init_always - perform inode structure intialisation</span>", 
"<span class=\"comment\"> * @sb: superblock inode belongs to</span>", 
"<span class=\"comment\"> * @inode: inode to initialise</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * These are initializations that need to be done on every inode</span>", 
"<span class=\"comment\"> * allocation as the fields are not initialised by slab allocation.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#inode_init_always\">inode_init_always</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>static const struct <a class=\"id\" href=\"#address_space_operations\">address_space_operations</a> <a class=\"id\" href=\"#empty_aops\">empty_aops</a>;", 
"<span class=\"ts\"/>static const struct <a class=\"id\" href=\"#inode_operations\">inode_operations</a> <a class=\"id\" href=\"#empty_iops\">empty_iops</a>;", 
"<span class=\"ts\"/>static const struct <a class=\"id\" href=\"#file_operations\">file_operations</a> <a class=\"id\" href=\"#empty_fops\">empty_fops</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#address_space\">address_space</a> *const <a class=\"id\" href=\"#mapping\">mapping</a> = &amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_data\">i_data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a> = <a class=\"id\" href=\"#sb\">sb</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a> = <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_blocksize_bits\">s_blocksize_bits</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_flags\">i_flags</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_count\">i_count</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_op\">i_op</a> = &amp;<a class=\"id\" href=\"#empty_iops\">empty_iops</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_fop\">i_fop</a> = &amp;<a class=\"id\" href=\"#empty_fops\">empty_fops</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_nlink\">i_nlink</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_uid\">i_uid</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_gid\">i_gid</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_writecount\">i_writecount</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blocks\">i_blocks</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_bytes\">i_bytes</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_generation\">i_generation</a> = 0;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_QUOTA\">CONFIG_QUOTA</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_dquot\">i_dquot</a>, 0, sizeof(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_dquot\">i_dquot</a>));", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_pipe\">i_pipe</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_bdev\">i_bdev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_cdev\">i_cdev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_rdev\">i_rdev</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#dirtied_when\">dirtied_when</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#security_inode_alloc\">security_inode_alloc</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_lock\">i_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lockdep_set_class\">lockdep_set_class</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_lock\">i_lock</a>, &amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_type\">s_type</a>-><a class=\"id\" href=\"#i_lock_key\">i_lock_key</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lockdep_set_class\">lockdep_set_class</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>, &amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_type\">s_type</a>-><a class=\"id\" href=\"#i_mutex_key\">i_mutex_key</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_rwsem\">init_rwsem</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_alloc_sem\">i_alloc_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lockdep_set_class\">lockdep_set_class</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_alloc_sem\">i_alloc_sem</a>, &amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_type\">s_type</a>-><a class=\"id\" href=\"#i_alloc_sem_key\">i_alloc_sem_key</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a> = &amp;<a class=\"id\" href=\"#empty_aops\">empty_aops</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#host\">host</a> = <a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#flags\">flags</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mapping_set_gfp_mask\">mapping_set_gfp_mask</a>(<a class=\"id\" href=\"#mapping\">mapping</a>, <a class=\"id\" href=\"#GFP_HIGHUSER_MOVABLE\">GFP_HIGHUSER_MOVABLE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#assoc_mapping\">assoc_mapping</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> = &amp;<a class=\"id\" href=\"#default_backing_dev_info\">default_backing_dev_info</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#writeback_index\">writeback_index</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the block_device provides a backing_dev_info for client</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * inodes then use that.  Otherwise the inode share the bdev's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * backing_dev_info.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_bdev\">s_bdev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> *<a class=\"id\" href=\"#bdi\">bdi</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdi\">bdi</a> = <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_bdev\">s_bdev</a>-><a class=\"id\" href=\"#bd_inode\">bd_inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>-><a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mapping\">mapping</a>-><a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> = <a class=\"id\" href=\"#bdi\">bdi</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_private\">i_private</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a> = <a class=\"id\" href=\"#mapping\">mapping</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FS_POSIX_ACL\">CONFIG_FS_POSIX_ACL</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_acl\">i_acl</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_default_acl\">i_default_acl</a> = <a class=\"id\" href=\"#ACL_NOT_CACHED\">ACL_NOT_CACHED</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FSNOTIFY\">CONFIG_FSNOTIFY</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_fsnotify_mask\">i_fsnotify_mask</a> = 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>return 0;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#inode_init_always\">inode_init_always</a>);", 
"", 
"static struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#alloc_inode\">alloc_inode</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_op\">s_op</a>-><a class=\"id\" href=\"#alloc_inode\">alloc_inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_op\">s_op</a>-><a class=\"id\" href=\"#alloc_inode\">alloc_inode</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#kmem_cache_alloc\">kmem_cache_alloc</a>(<a class=\"id\" href=\"#inode_cachep\">inode_cachep</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#inode\">inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#inode_init_always\">inode_init_always</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#inode\">inode</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_op\">s_op</a>-><a class=\"id\" href=\"#destroy_inode\">destroy_inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_op\">s_op</a>-><a class=\"id\" href=\"#destroy_inode\">destroy_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#inode_cachep\">inode_cachep</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#inode\">inode</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#__destroy_inode\">__destroy_inode</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#inode_has_buffers\">inode_has_buffers</a>(<a class=\"id\" href=\"#inode\">inode</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#security_inode_free\">security_inode_free</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_inode_delete\">fsnotify_inode_delete</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FS_POSIX_ACL\">CONFIG_FS_POSIX_ACL</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_acl\">i_acl</a> && <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_acl\">i_acl</a> != <a class=\"id\" href=\"#ACL_NOT_CACHED\">ACL_NOT_CACHED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#posix_acl_release\">posix_acl_release</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_acl\">i_acl</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_default_acl\">i_default_acl</a> && <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_default_acl\">i_default_acl</a> != <a class=\"id\" href=\"#ACL_NOT_CACHED\">ACL_NOT_CACHED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#posix_acl_release\">posix_acl_release</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_default_acl\">i_default_acl</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__destroy_inode\">__destroy_inode</a>);", 
"", 
"void <a class=\"id\" href=\"#destroy_inode\">destroy_inode</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__destroy_inode\">__destroy_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_op\">s_op</a>-><a class=\"id\" href=\"#destroy_inode\">destroy_inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_op\">s_op</a>-><a class=\"id\" href=\"#destroy_inode\">destroy_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#inode_cachep\">inode_cachep</a>, (<a class=\"id\" href=\"#inode\">inode</a>));", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * These are initializations that only need to be done</span>", 
"<span class=\"comment\"> * once, because the fields are idempotent across use</span>", 
"<span class=\"comment\"> * of the inode, so let the slab aware of that.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#inode_init_once\">inode_init_once</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#inode\">inode</a>, 0, sizeof(*<a class=\"id\" href=\"#inode\">inode</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_HLIST_NODE\">INIT_HLIST_NODE</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_hash\">i_hash</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_dentry\">i_dentry</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_devices\">i_devices</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_RADIX_TREE\">INIT_RADIX_TREE</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_data\">i_data</a>.<a class=\"id\" href=\"#page_tree\">page_tree</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_data\">i_data</a>.<a class=\"id\" href=\"#tree_lock\">tree_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_data\">i_data</a>.<a class=\"id\" href=\"#i_mmap_lock\">i_mmap_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_data\">i_data</a>.<a class=\"id\" href=\"#private_list\">private_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_data\">i_data</a>.<a class=\"id\" href=\"#private_lock\">private_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_RAW_PRIO_TREE_ROOT\">INIT_RAW_PRIO_TREE_ROOT</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_data\">i_data</a>.<a class=\"id\" href=\"#i_mmap\">i_mmap</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_data\">i_data</a>.<a class=\"id\" href=\"#i_mmap_nonlinear\">i_mmap_nonlinear</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i_size_ordered_init\">i_size_ordered_init</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FSNOTIFY\">CONFIG_FSNOTIFY</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_HLIST_HEAD\">INIT_HLIST_HEAD</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_fsnotify_marks\">i_fsnotify_marks</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#inode_init_once\">inode_init_once</a>);", 
"", 
"static void <a class=\"id\" href=\"#init_once\">init_once</a>(void *<a class=\"id\" href=\"#foo\">foo</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = (struct <a class=\"id\" href=\"#inode\">inode</a> *) <a class=\"id\" href=\"#foo\">foo</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode_init_once\">inode_init_once</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * inode_lock must be held</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__iget\">__iget</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_inc_return\">atomic_inc_return</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_count\">i_count</a>) != 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> &amp; (<a class=\"id\" href=\"#I_DIRTY\">I_DIRTY</a>|<a class=\"id\" href=\"#I_SYNC\">I_SYNC</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move\">list_move</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_list\">i_list</a>, &amp;<a class=\"id\" href=\"#inode_in_use\">inode_in_use</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inodes_stat\">inodes_stat</a>.<a class=\"id\" href=\"#nr_unused\">nr_unused</a>--;", 
"}", 
"", 
"void <a class=\"id\" href=\"#end_writeback\">end_writeback</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_data\">i_data</a>.<a class=\"id\" href=\"#nrpages\">nrpages</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_data\">i_data</a>.<a class=\"id\" href=\"#private_list\">private_list</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> &amp; <a class=\"id\" href=\"#I_FREEING\">I_FREEING</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> &amp; <a class=\"id\" href=\"#I_CLEAR\">I_CLEAR</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode_sync_wait\">inode_sync_wait</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> = <a class=\"id\" href=\"#I_FREEING\">I_FREEING</a> | <a class=\"id\" href=\"#I_CLEAR\">I_CLEAR</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#end_writeback\">end_writeback</a>);", 
"", 
"static void <a class=\"id\" href=\"#evict\">evict</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#super_operations\">super_operations</a> *<a class=\"id\" href=\"#op\">op</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_op\">s_op</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#evict_inode\">evict_inode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#evict_inode\">evict_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_data\">i_data</a>.<a class=\"id\" href=\"#nrpages\">nrpages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#truncate_inode_pages\">truncate_inode_pages</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_data\">i_data</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end_writeback\">end_writeback</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISBLK\">S_ISBLK</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>) && <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_bdev\">i_bdev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd_forget\">bd_forget</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISCHR\">S_ISCHR</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>) && <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_cdev\">i_cdev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cd_forget\">cd_forget</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * dispose_list - dispose of the contents of a local list</span>", 
"<span class=\"comment\"> * @head: the head of the list to free</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Dispose-list gets a local list with local inodes in it, so it doesn't</span>", 
"<span class=\"comment\"> * need to worry about list corruption and SMP locks.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#dispose_list\">dispose_list</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_disposed\">nr_disposed</a> = 0;", 
"", 
"<span class=\"ts\"/>while (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#head\">head</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(<a class=\"id\" href=\"#head\">head</a>, struct <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#i_list\">i_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_list\">i_list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#evict\">evict</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_del_init\">hlist_del_init</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_hash\">i_hash</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb_list\">i_sb_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_inode\">wake_up_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#destroy_inode\">destroy_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_disposed\">nr_disposed</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inodes_stat\">inodes_stat</a>.<a class=\"id\" href=\"#nr_inodes\">nr_inodes</a> -= <a class=\"id\" href=\"#nr_disposed\">nr_disposed</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Invalidate all inodes for a device.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#invalidate_list\">invalidate_list</a>(struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#head\">head</a>, struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#dispose\">dispose</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#busy\">busy</a> = 0, <a class=\"id\" href=\"#count\">count</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#head\">head</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>for (;;) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We can reschedule here without worrying about the list's</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * consistency because the per-sb list of inodes must not</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * change during umount anymore, and because iprune_sem keeps</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * shrink_icache_memory() away.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched_lock\">cond_resched_lock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a> == <a class=\"id\" href=\"#head\">head</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, struct <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#i_sb_list\">i_sb_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> &amp; <a class=\"id\" href=\"#I_NEW\">I_NEW</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#invalidate_inode_buffers\">invalidate_inode_buffers</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_count\">i_count</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move\">list_move</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_list\">i_list</a>, <a class=\"id\" href=\"#dispose\">dispose</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> &amp; <a class=\"id\" href=\"#I_NEW\">I_NEW</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> |= <a class=\"id\" href=\"#I_FREEING\">I_FREEING</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#busy\">busy</a> = 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* only unused inodes may be cached with i_count zero */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inodes_stat\">inodes_stat</a>.<a class=\"id\" href=\"#nr_unused\">nr_unused</a> -= <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#busy\">busy</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>invalidate_inodes<span class=\"ts\"/>- discard the inodes on a device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sb: superblock</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Discard all of the inodes for a given superblock. If the discard</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>fails because there are busy inodes then a non zero value is returned.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If the discard is successful all the inodes have been discarded.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#invalidate_inodes\">invalidate_inodes</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#busy\">busy</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#throw_away\">throw_away</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#iprune_sem\">iprune_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_unmount_inodes\">fsnotify_unmount_inodes</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_inodes\">s_inodes</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#busy\">busy</a> = <a class=\"id\" href=\"#invalidate_list\">invalidate_list</a>(&amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_inodes\">s_inodes</a>, &amp;<a class=\"id\" href=\"#throw_away\">throw_away</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dispose_list\">dispose_list</a>(&amp;<a class=\"id\" href=\"#throw_away\">throw_away</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#iprune_sem\">iprune_sem</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#busy\">busy</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#invalidate_inodes\">invalidate_inodes</a>);", 
"", 
"static int <a class=\"id\" href=\"#can_unuse\">can_unuse</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode_has_buffers\">inode_has_buffers</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_count\">i_count</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_data\">i_data</a>.<a class=\"id\" href=\"#nrpages\">nrpages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Scan `goal' inodes on the unused list for freeable ones. They are moved to</span>", 
"<span class=\"comment\"> * a temporary list and then are freed outside inode_lock by dispose_list().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Any inodes which are pinned purely because of attached pagecache have their</span>", 
"<span class=\"comment\"> * pagecache removed.  We expect the final iput() on that inode to add it to</span>", 
"<span class=\"comment\"> * the front of the inode_unused list.  So look for it there and if the</span>", 
"<span class=\"comment\"> * inode is still freeable, proceed.  The right inode is found 99.9% of the</span>", 
"<span class=\"comment\"> * time in testing on a 4-way.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the inode has metadata buffers attached to mapping-&gt;private_list then</span>", 
"<span class=\"comment\"> * try to remove them.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#prune_icache\">prune_icache</a>(int <a class=\"id\" href=\"#nr_to_scan\">nr_to_scan</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#freeable\">freeable</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_pruned\">nr_pruned</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_scanned\">nr_scanned</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#reap\">reap</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#iprune_sem\">iprune_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#nr_scanned\">nr_scanned</a> = 0; <a class=\"id\" href=\"#nr_scanned\">nr_scanned</a> &lt; <a class=\"id\" href=\"#nr_to_scan\">nr_to_scan</a>; <a class=\"id\" href=\"#nr_scanned\">nr_scanned</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#inode_unused\">inode_unused</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#inode_unused\">inode_unused</a>.<a class=\"id\" href=\"#prev\">prev</a>, struct <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#i_list\">i_list</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> || <a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_count\">i_count</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move\">list_move</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_list\">i_list</a>, &amp;<a class=\"id\" href=\"#inode_unused\">inode_unused</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inode_has_buffers\">inode_has_buffers</a>(<a class=\"id\" href=\"#inode\">inode</a>) || <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_data\">i_data</a>.<a class=\"id\" href=\"#nrpages\">nrpages</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__iget\">__iget</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#remove_inode_buffers\">remove_inode_buffers</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reap\">reap</a> += <a class=\"id\" href=\"#invalidate_mapping_pages\">invalidate_mapping_pages</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_data\">i_data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0, -1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iput\">iput</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a> != <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#inode_unused\">inode_unused</a>.<a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#i_list\">i_list</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;<span class=\"ts\"/><span class=\"comment\">/* wrong inode or list_empty */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#can_unuse\">can_unuse</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move\">list_move</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_list\">i_list</a>, &amp;<a class=\"id\" href=\"#freeable\">freeable</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> &amp; <a class=\"id\" href=\"#I_NEW\">I_NEW</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> |= <a class=\"id\" href=\"#I_FREEING\">I_FREEING</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_pruned\">nr_pruned</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inodes_stat\">inodes_stat</a>.<a class=\"id\" href=\"#nr_unused\">nr_unused</a> -= <a class=\"id\" href=\"#nr_pruned\">nr_pruned</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#current_is_kswapd\">current_is_kswapd</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__count_vm_events\">__count_vm_events</a>(<a class=\"id\" href=\"#KSWAPD_INODESTEAL\">KSWAPD_INODESTEAL</a>, <a class=\"id\" href=\"#reap\">reap</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__count_vm_events\">__count_vm_events</a>(<a class=\"id\" href=\"#PGINODESTEAL\">PGINODESTEAL</a>, <a class=\"id\" href=\"#reap\">reap</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dispose_list\">dispose_list</a>(&amp;<a class=\"id\" href=\"#freeable\">freeable</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#iprune_sem\">iprune_sem</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * shrink_icache_memory() will attempt to reclaim some unused inodes.  Here,</span>", 
"<span class=\"comment\"> * \"unused\" means that no dentries are referring to the inodes: the files are</span>", 
"<span class=\"comment\"> * not open and the dcache references to those inodes have already been</span>", 
"<span class=\"comment\"> * reclaimed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is passed the number of inodes to scan, and it returns the</span>", 
"<span class=\"comment\"> * total number of remaining possibly-reclaimable inodes.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#shrink_icache_memory\">shrink_icache_memory</a>(struct <a class=\"id\" href=\"#shrinker\">shrinker</a> *<a class=\"id\" href=\"#shrink\">shrink</a>, int <a class=\"id\" href=\"#nr\">nr</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr\">nr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Nasty deadlock avoidance.  We may hold various FS locks,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and we don't want to recurse into the FS that called us</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * in clear_inode() and friends..</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#gfp_mask\">gfp_mask</a> &amp; <a class=\"id\" href=\"#__GFP_FS\">__GFP_FS</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prune_icache\">prune_icache</a>(<a class=\"id\" href=\"#nr\">nr</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#inodes_stat\">inodes_stat</a>.<a class=\"id\" href=\"#nr_unused\">nr_unused</a> / 100) * <a class=\"id\" href=\"#sysctl_vfs_cache_pressure\">sysctl_vfs_cache_pressure</a>;", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#shrinker\">shrinker</a> <a class=\"id\" href=\"#icache_shrinker\">icache_shrinker</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#shrink\">shrink</a> = <a class=\"id\" href=\"#shrink_icache_memory\">shrink_icache_memory</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#seeks\">seeks</a> = <a class=\"id\" href=\"#DEFAULT_SEEKS\">DEFAULT_SEEKS</a>,", 
"};", 
"", 
"static void <a class=\"id\" href=\"#__wait_on_freeing_inode\">__wait_on_freeing_inode</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called with the inode lock held.</span>", 
"<span class=\"comment\"> * NOTE: we are not increasing the inode-refcount, you must call __iget()</span>", 
"<span class=\"comment\"> * by hand after calling find_inode now! This simplifies iunique and won't</span>", 
"<span class=\"comment\"> * add any additional branch in the common code.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#find_inode\">find_inode</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#test\">test</a>)(struct <a class=\"id\" href=\"#inode\">inode</a> *, void *),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<a class=\"id\" href=\"#repeat\">repeat</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry\">hlist_for_each_entry</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#i_hash\">i_hash</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a> != <a class=\"id\" href=\"#sb\">sb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#test\">test</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#data\">data</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> &amp; (<a class=\"id\" href=\"#I_FREEING\">I_FREEING</a>|<a class=\"id\" href=\"#I_WILL_FREE\">I_WILL_FREE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__wait_on_freeing_inode\">__wait_on_freeing_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#repeat\">repeat</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#node\">node</a> ? <a class=\"id\" href=\"#inode\">inode</a> : <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * find_inode_fast is the fast path version of find_inode, see the comment at</span>", 
"<span class=\"comment\"> * iget_locked for details.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#find_inode_fast\">find_inode_fast</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a>, unsigned long <a class=\"id\" href=\"#ino\">ino</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<a class=\"id\" href=\"#repeat\">repeat</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry\">hlist_for_each_entry</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#i_hash\">i_hash</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a> != <a class=\"id\" href=\"#ino\">ino</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a> != <a class=\"id\" href=\"#sb\">sb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> &amp; (<a class=\"id\" href=\"#I_FREEING\">I_FREEING</a>|<a class=\"id\" href=\"#I_WILL_FREE\">I_WILL_FREE</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__wait_on_freeing_inode\">__wait_on_freeing_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#repeat\">repeat</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#node\">node</a> ? <a class=\"id\" href=\"#inode\">inode</a> : <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static unsigned long <a class=\"id\" href=\"#hash\">hash</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, unsigned long <a class=\"id\" href=\"#hashval\">hashval</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = (<a class=\"id\" href=\"#hashval\">hashval</a> * (unsigned long)<a class=\"id\" href=\"#sb\">sb</a>) ^ (<a class=\"id\" href=\"#GOLDEN_RATIO_PRIME\">GOLDEN_RATIO_PRIME</a> + <a class=\"id\" href=\"#hashval\">hashval</a>) /", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#L1_CACHE_BYTES\">L1_CACHE_BYTES</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a> = <a class=\"id\" href=\"#tmp\">tmp</a> ^ ((<a class=\"id\" href=\"#tmp\">tmp</a> ^ <a class=\"id\" href=\"#GOLDEN_RATIO_PRIME\">GOLDEN_RATIO_PRIME</a>) >> <a class=\"id\" href=\"#I_HASHBITS\">I_HASHBITS</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tmp\">tmp</a> &amp; <a class=\"id\" href=\"#I_HASHMASK\">I_HASHMASK</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#__inode_add_to_lists\">__inode_add_to_lists</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inodes_stat\">inodes_stat</a>.<a class=\"id\" href=\"#nr_inodes\">nr_inodes</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_list\">i_list</a>, &amp;<a class=\"id\" href=\"#inode_in_use\">inode_in_use</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb_list\">i_sb_list</a>, &amp;<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_inodes\">s_inodes</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#head\">head</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_add_head\">hlist_add_head</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_hash\">i_hash</a>, <a class=\"id\" href=\"#head\">head</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * inode_add_to_lists - add a new inode to relevant lists</span>", 
"<span class=\"comment\"> * @sb: superblock inode belongs to</span>", 
"<span class=\"comment\"> * @inode: inode to mark in use</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When an inode is allocated it needs to be accounted for, added to the in use</span>", 
"<span class=\"comment\"> * list, the owning superblock and the inode hash. This needs to be done under</span>", 
"<span class=\"comment\"> * the inode_lock, so export a function to do this rather than the inode lock</span>", 
"<span class=\"comment\"> * itself. We calculate the hash list to add to here so it is all internal</span>", 
"<span class=\"comment\"> * which requires the caller to have already set up the inode number in the</span>", 
"<span class=\"comment\"> * inode to add.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#inode_add_to_lists\">inode_add_to_lists</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#inode_hashtable\">inode_hashtable</a> + <a class=\"id\" href=\"#hash\">hash</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__inode_add_to_lists\">__inode_add_to_lists</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#inode_add_to_lists\">inode_add_to_lists</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>new_inode <span class=\"ts\"/>- obtain an inode</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sb: superblock</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Allocates a new inode for given superblock. The default gfp_mask</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>for allocations related to inode-&gt;i_mapping is GFP_HIGHUSER_MOVABLE.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If HIGHMEM pages are unsuitable or it is known that pages allocated</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>for the page cache are not reclaimable or migratable,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>mapping_set_gfp_mask() must be called with suitable flags on the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>newly created inode's mapping</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#new_inode\">new_inode</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * On a 32bit, non LFS stat() call, glibc will generate an EOVERFLOW</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * error if st_ino won't fit in target struct field. Use 32bit counter</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * here to attempt to avoid that.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>static unsigned int <a class=\"id\" href=\"#last_ino\">last_ino</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_prefetch\">spin_lock_prefetch</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#alloc_inode\">alloc_inode</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__inode_add_to_lists\">__inode_add_to_lists</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a> = ++<a class=\"id\" href=\"#last_ino\">last_ino</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#inode\">inode</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#new_inode\">new_inode</a>);", 
"", 
"void <a class=\"id\" href=\"#unlock_new_inode\">unlock_new_inode</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_LOCK_ALLOC\">CONFIG_DEBUG_LOCK_ALLOC</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a> &amp; <a class=\"id\" href=\"#S_IFDIR\">S_IFDIR</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a> *<a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_type\">s_type</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Set new key only if filesystem hasn't already changed it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#lockdep_match_class\">lockdep_match_class</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    &amp;<a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#i_mutex_key\">i_mutex_key</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * ensure nobody is actually holding i_mutex</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_destroy\">mutex_destroy</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lockdep_set_class\">lockdep_set_class</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mutex\">i_mutex</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  &amp;<a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#i_mutex_dir_key\">i_mutex_dir_key</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This is special!  We do not need the spinlock when clearing I_NEW,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * because we're guaranteed that nobody else tries to do anything about</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the state of the inode when it is locked, as we just created it (so</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * there can be no old holders that haven't tested I_NEW).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * However we must emit the memory barrier so that other CPUs reliably</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * see the clearing of I_NEW after the other inode initialisation has</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * completed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_mb\">smp_mb</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> &amp; <a class=\"id\" href=\"#I_NEW\">I_NEW</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> &= ~<a class=\"id\" href=\"#I_NEW\">I_NEW</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up_inode\">wake_up_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#unlock_new_inode\">unlock_new_inode</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is called without the inode lock held.. Be careful.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We no longer cache the sb_flags in i_flags - see fs.h</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>-- rmk@arm.uk.linux.org</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#get_new_inode\">get_new_inode</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#test\">test</a>)(struct <a class=\"id\" href=\"#inode\">inode</a> *, void *),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#set\">set</a>)(struct <a class=\"id\" href=\"#inode\">inode</a> *, void *),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#alloc_inode\">alloc_inode</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#old\">old</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We released the lock, so.. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#find_inode\">find_inode</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#test\">test</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#old\">old</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#set\">set</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#data\">data</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#set_failed\">set_failed</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__inode_add_to_lists\">__inode_add_to_lists</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> = <a class=\"id\" href=\"#I_NEW\">I_NEW</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Return the locked inode with I_NEW set, the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * caller is responsible for filling in the contents</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Uhhuh, somebody else created the same inode under</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * us. Use the old inode instead of the one we just</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * allocated.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__iget\">__iget</a>(<a class=\"id\" href=\"#old\">old</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#destroy_inode\">destroy_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#old\">old</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_on_inode\">wait_on_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#inode\">inode</a>;", 
"", 
"<a class=\"id\" href=\"#set_failed\">set_failed</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#destroy_inode\">destroy_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * get_new_inode_fast is the fast path version of get_new_inode, see the</span>", 
"<span class=\"comment\"> * comment at iget_locked for details.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#get_new_inode_fast\">get_new_inode_fast</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a>, unsigned long <a class=\"id\" href=\"#ino\">ino</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#alloc_inode\">alloc_inode</a>(<a class=\"id\" href=\"#sb\">sb</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#old\">old</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We released the lock, so.. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#find_inode_fast\">find_inode_fast</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#ino\">ino</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#old\">old</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a> = <a class=\"id\" href=\"#ino\">ino</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__inode_add_to_lists\">__inode_add_to_lists</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> = <a class=\"id\" href=\"#I_NEW\">I_NEW</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Return the locked inode with I_NEW set, the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * caller is responsible for filling in the contents</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Uhhuh, somebody else created the same inode under</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * us. Use the old inode instead of the one we just</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * allocated.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__iget\">__iget</a>(<a class=\"id\" href=\"#old\">old</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#destroy_inode\">destroy_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#old\">old</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_on_inode\">wait_on_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#inode\">inode</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>iunique - get a unique inode number</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sb: superblock</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@max_reserved: highest reserved inode number</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Obtain an inode number that is unique on the system for a given</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>superblock. This is used by file systems that have no natural</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>permanent inode numbering system. An inode number is returned that</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is higher than the reserved limit but unique.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>BUGS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>With a large number of inodes live on the file system this function</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>currently becomes quite slow.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#ino_t\">ino_t</a> <a class=\"id\" href=\"#iunique\">iunique</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#ino_t\">ino_t</a> <a class=\"id\" href=\"#max_reserved\">max_reserved</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * On a 32bit, non LFS stat() call, glibc will generate an EOVERFLOW</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * error if st_ino won't fit in target struct field. Use 32bit counter</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * here to attempt to avoid that.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>static unsigned int <a class=\"id\" href=\"#counter\">counter</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ino_t\">ino_t</a> <a class=\"id\" href=\"#res\">res</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#counter\">counter</a> <= <a class=\"id\" href=\"#max_reserved\">max_reserved</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#counter\">counter</a> = <a class=\"id\" href=\"#max_reserved\">max_reserved</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#counter\">counter</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#inode_hashtable\">inode_hashtable</a> + <a class=\"id\" href=\"#hash\">hash</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#find_inode_fast\">find_inode_fast</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#inode\">inode</a> != <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#iunique\">iunique</a>);", 
"", 
"struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#igrab\">igrab</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> &amp; (<a class=\"id\" href=\"#I_FREEING\">I_FREEING</a>|<a class=\"id\" href=\"#I_WILL_FREE\">I_WILL_FREE</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__iget\">__iget</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Handle the case where s_op-&gt;clear_inode is not been</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * called yet, and somebody is calling igrab</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * while the inode is getting freed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#inode\">inode</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#igrab\">igrab</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ifind - internal function, you want ilookup5() or iget5().</span>", 
"<span class=\"comment\"> * @sb:<span class=\"ts\"/><span class=\"ts\"/>super block of file system to search</span>", 
"<span class=\"comment\"> * @head:       the head of the list to search</span>", 
"<span class=\"comment\"> * @test:<span class=\"ts\"/>callback used for comparisons between inodes</span>", 
"<span class=\"comment\"> * @data:<span class=\"ts\"/>opaque data pointer to pass to @test</span>", 
"<span class=\"comment\"> * @wait:<span class=\"ts\"/>if true wait for the inode to be unlocked, if false do not</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ifind() searches for the inode specified by @data in the inode</span>", 
"<span class=\"comment\"> * cache. This is a generalized version of ifind_fast() for file systems where</span>", 
"<span class=\"comment\"> * the inode number is not sufficient for unique identification of an inode.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the inode is in the cache, the inode is returned with an incremented</span>", 
"<span class=\"comment\"> * reference count.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Otherwise NULL is returned.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note, @test is called with the inode_lock held, so can't sleep.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#ifind\">ifind</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a>, int (*<a class=\"id\" href=\"#test\">test</a>)(struct <a class=\"id\" href=\"#inode\">inode</a> *, void *),", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a>, const int <a class=\"id\" href=\"#wait\">wait</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#find_inode\">find_inode</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#test\">test</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__iget\">__iget</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#wait\">wait</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_on_inode\">wait_on_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ifind_fast - internal function, you want ilookup() or iget().</span>", 
"<span class=\"comment\"> * @sb:<span class=\"ts\"/><span class=\"ts\"/>super block of file system to search</span>", 
"<span class=\"comment\"> * @head:       head of the list to search</span>", 
"<span class=\"comment\"> * @ino:<span class=\"ts\"/>inode number to search for</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ifind_fast() searches for the inode @ino in the inode cache. This is for</span>", 
"<span class=\"comment\"> * file systems where the inode number is sufficient for unique identification</span>", 
"<span class=\"comment\"> * of an inode.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the inode is in the cache, the inode is returned with an incremented</span>", 
"<span class=\"comment\"> * reference count.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Otherwise NULL is returned.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#ifind_fast\">ifind_fast</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a>, unsigned long <a class=\"id\" href=\"#ino\">ino</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#find_inode_fast\">find_inode_fast</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#ino\">ino</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__iget\">__iget</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_on_inode\">wait_on_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ilookup5_nowait - search for an inode in the inode cache</span>", 
"<span class=\"comment\"> * @sb:<span class=\"ts\"/><span class=\"ts\"/>super block of file system to search</span>", 
"<span class=\"comment\"> * @hashval:<span class=\"ts\"/>hash value (usually inode number) to search for</span>", 
"<span class=\"comment\"> * @test:<span class=\"ts\"/>callback used for comparisons between inodes</span>", 
"<span class=\"comment\"> * @data:<span class=\"ts\"/>opaque data pointer to pass to @test</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ilookup5() uses ifind() to search for the inode specified by @hashval and</span>", 
"<span class=\"comment\"> * @data in the inode cache. This is a generalized version of ilookup() for</span>", 
"<span class=\"comment\"> * file systems where the inode number is not sufficient for unique</span>", 
"<span class=\"comment\"> * identification of an inode.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the inode is in the cache, the inode is returned with an incremented</span>", 
"<span class=\"comment\"> * reference count.  Note, the inode lock is not waited upon so you have to be</span>", 
"<span class=\"comment\"> * very careful what you do with the returned inode.  You probably should be</span>", 
"<span class=\"comment\"> * using ilookup5() instead.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Otherwise NULL is returned.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note, @test is called with the inode_lock held, so can't sleep.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#ilookup5_nowait\">ilookup5_nowait</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, unsigned long <a class=\"id\" href=\"#hashval\">hashval</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#test\">test</a>)(struct <a class=\"id\" href=\"#inode\">inode</a> *, void *), void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#inode_hashtable\">inode_hashtable</a> + <a class=\"id\" href=\"#hash\">hash</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#hashval\">hashval</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ifind\">ifind</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#test\">test</a>, <a class=\"id\" href=\"#data\">data</a>, 0);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#ilookup5_nowait\">ilookup5_nowait</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ilookup5 - search for an inode in the inode cache</span>", 
"<span class=\"comment\"> * @sb:<span class=\"ts\"/><span class=\"ts\"/>super block of file system to search</span>", 
"<span class=\"comment\"> * @hashval:<span class=\"ts\"/>hash value (usually inode number) to search for</span>", 
"<span class=\"comment\"> * @test:<span class=\"ts\"/>callback used for comparisons between inodes</span>", 
"<span class=\"comment\"> * @data:<span class=\"ts\"/>opaque data pointer to pass to @test</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ilookup5() uses ifind() to search for the inode specified by @hashval and</span>", 
"<span class=\"comment\"> * @data in the inode cache. This is a generalized version of ilookup() for</span>", 
"<span class=\"comment\"> * file systems where the inode number is not sufficient for unique</span>", 
"<span class=\"comment\"> * identification of an inode.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the inode is in the cache, the inode lock is waited upon and the inode is</span>", 
"<span class=\"comment\"> * returned with an incremented reference count.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Otherwise NULL is returned.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note, @test is called with the inode_lock held, so can't sleep.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#ilookup5\">ilookup5</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, unsigned long <a class=\"id\" href=\"#hashval\">hashval</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#test\">test</a>)(struct <a class=\"id\" href=\"#inode\">inode</a> *, void *), void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#inode_hashtable\">inode_hashtable</a> + <a class=\"id\" href=\"#hash\">hash</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#hashval\">hashval</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ifind\">ifind</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#test\">test</a>, <a class=\"id\" href=\"#data\">data</a>, 1);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#ilookup5\">ilookup5</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ilookup - search for an inode in the inode cache</span>", 
"<span class=\"comment\"> * @sb:<span class=\"ts\"/><span class=\"ts\"/>super block of file system to search</span>", 
"<span class=\"comment\"> * @ino:<span class=\"ts\"/>inode number to search for</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ilookup() uses ifind_fast() to search for the inode @ino in the inode cache.</span>", 
"<span class=\"comment\"> * This is for file systems where the inode number is sufficient for unique</span>", 
"<span class=\"comment\"> * identification of an inode.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the inode is in the cache, the inode is returned with an incremented</span>", 
"<span class=\"comment\"> * reference count.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Otherwise NULL is returned.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#ilookup\">ilookup</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, unsigned long <a class=\"id\" href=\"#ino\">ino</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#inode_hashtable\">inode_hashtable</a> + <a class=\"id\" href=\"#hash\">hash</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#ino\">ino</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ifind_fast\">ifind_fast</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#ino\">ino</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#ilookup\">ilookup</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * iget5_locked - obtain an inode from a mounted file system</span>", 
"<span class=\"comment\"> * @sb:<span class=\"ts\"/><span class=\"ts\"/>super block of file system</span>", 
"<span class=\"comment\"> * @hashval:<span class=\"ts\"/>hash value (usually inode number) to get</span>", 
"<span class=\"comment\"> * @test:<span class=\"ts\"/>callback used for comparisons between inodes</span>", 
"<span class=\"comment\"> * @set:<span class=\"ts\"/>callback used to initialize a new struct inode</span>", 
"<span class=\"comment\"> * @data:<span class=\"ts\"/>opaque data pointer to pass to @test and @set</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * iget5_locked() uses ifind() to search for the inode specified by @hashval</span>", 
"<span class=\"comment\"> * and @data in the inode cache and if present it is returned with an increased</span>", 
"<span class=\"comment\"> * reference count. This is a generalized version of iget_locked() for file</span>", 
"<span class=\"comment\"> * systems where the inode number is not sufficient for unique identification</span>", 
"<span class=\"comment\"> * of an inode.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the inode is not in cache, get_new_inode() is called to allocate a new</span>", 
"<span class=\"comment\"> * inode and this is returned locked, hashed, and with the I_NEW flag set. The</span>", 
"<span class=\"comment\"> * file system gets to fill it in before unlocking it via unlock_new_inode().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note both @test and @set are called with the inode_lock held, so can't sleep.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#iget5_locked\">iget5_locked</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, unsigned long <a class=\"id\" href=\"#hashval\">hashval</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#test\">test</a>)(struct <a class=\"id\" href=\"#inode\">inode</a> *, void *),", 
"<span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#set\">set</a>)(struct <a class=\"id\" href=\"#inode\">inode</a> *, void *), void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#inode_hashtable\">inode_hashtable</a> + <a class=\"id\" href=\"#hash\">hash</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#hashval\">hashval</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#ifind\">ifind</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#test\">test</a>, <a class=\"id\" href=\"#data\">data</a>, 1);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * get_new_inode() will do the right thing, re-trying the search</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in case it had to block at any point.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#get_new_inode\">get_new_inode</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#test\">test</a>, <a class=\"id\" href=\"#set\">set</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#iget5_locked\">iget5_locked</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * iget_locked - obtain an inode from a mounted file system</span>", 
"<span class=\"comment\"> * @sb:<span class=\"ts\"/><span class=\"ts\"/>super block of file system</span>", 
"<span class=\"comment\"> * @ino:<span class=\"ts\"/>inode number to get</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * iget_locked() uses ifind_fast() to search for the inode specified by @ino in</span>", 
"<span class=\"comment\"> * the inode cache and if present it is returned with an increased reference</span>", 
"<span class=\"comment\"> * count. This is for file systems where the inode number is sufficient for</span>", 
"<span class=\"comment\"> * unique identification of an inode.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the inode is not in cache, get_new_inode_fast() is called to allocate a</span>", 
"<span class=\"comment\"> * new inode and this is returned locked, hashed, and with the I_NEW flag set.</span>", 
"<span class=\"comment\"> * The file system gets to fill it in before unlocking it via</span>", 
"<span class=\"comment\"> * unlock_new_inode().</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#iget_locked\">iget_locked</a>(struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a>, unsigned long <a class=\"id\" href=\"#ino\">ino</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#inode_hashtable\">inode_hashtable</a> + <a class=\"id\" href=\"#hash\">hash</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#ino\">ino</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#ifind_fast\">ifind_fast</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#ino\">ino</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * get_new_inode_fast() will do the right thing, re-trying the search</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in case it had to block at any point.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#get_new_inode_fast\">get_new_inode_fast</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#ino\">ino</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#iget_locked\">iget_locked</a>);", 
"", 
"int <a class=\"id\" href=\"#insert_inode_locked\">insert_inode_locked</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ino_t\">ino_t</a> <a class=\"id\" href=\"#ino\">ino</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#inode_hashtable\">inode_hashtable</a> + <a class=\"id\" href=\"#hash\">hash</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#ino\">ino</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> |= <a class=\"id\" href=\"#I_NEW\">I_NEW</a>;", 
"<span class=\"ts\"/>while (1) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry\">hlist_for_each_entry</a>(<a class=\"id\" href=\"#old\">old</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#i_hash\">i_hash</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a> != <a class=\"id\" href=\"#ino\">ino</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a> != <a class=\"id\" href=\"#sb\">sb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#i_state\">i_state</a> &amp; (<a class=\"id\" href=\"#I_FREEING\">I_FREEING</a>|<a class=\"id\" href=\"#I_WILL_FREE\">I_WILL_FREE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#node\">node</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_add_head\">hlist_add_head</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_hash\">i_hash</a>, <a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__iget\">__iget</a>(<a class=\"id\" href=\"#old\">old</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_on_inode\">wait_on_inode</a>(<a class=\"id\" href=\"#old\">old</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#hlist_unhashed\">hlist_unhashed</a>(&amp;<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#i_hash\">i_hash</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iput\">iput</a>(<a class=\"id\" href=\"#old\">old</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iput\">iput</a>(<a class=\"id\" href=\"#old\">old</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#insert_inode_locked\">insert_inode_locked</a>);", 
"", 
"int <a class=\"id\" href=\"#insert_inode_locked4\">insert_inode_locked4</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, unsigned long <a class=\"id\" href=\"#hashval\">hashval</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int (*<a class=\"id\" href=\"#test\">test</a>)(struct <a class=\"id\" href=\"#inode\">inode</a> *, void *), void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#inode_hashtable\">inode_hashtable</a> + <a class=\"id\" href=\"#hash\">hash</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#hashval\">hashval</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> |= <a class=\"id\" href=\"#I_NEW\">I_NEW</a>;", 
"", 
"<span class=\"ts\"/>while (1) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_node\">hlist_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_for_each_entry\">hlist_for_each_entry</a>(<a class=\"id\" href=\"#old\">old</a>, <a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#head\">head</a>, <a class=\"id\" href=\"#i_hash\">i_hash</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a> != <a class=\"id\" href=\"#sb\">sb</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#test\">test</a>(<a class=\"id\" href=\"#old\">old</a>, <a class=\"id\" href=\"#data\">data</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#i_state\">i_state</a> &amp; (<a class=\"id\" href=\"#I_FREEING\">I_FREEING</a>|<a class=\"id\" href=\"#I_WILL_FREE\">I_WILL_FREE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#node\">node</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_add_head\">hlist_add_head</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_hash\">i_hash</a>, <a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__iget\">__iget</a>(<a class=\"id\" href=\"#old\">old</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_on_inode\">wait_on_inode</a>(<a class=\"id\" href=\"#old\">old</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#hlist_unhashed\">hlist_unhashed</a>(&amp;<a class=\"id\" href=\"#old\">old</a>-><a class=\"id\" href=\"#i_hash\">i_hash</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iput\">iput</a>(<a class=\"id\" href=\"#old\">old</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iput\">iput</a>(<a class=\"id\" href=\"#old\">old</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#insert_inode_locked4\">insert_inode_locked4</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>__insert_inode_hash - hash an inode</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@inode: unhashed inode</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@hashval: unsigned long value used to locate this object in the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>inode_hashtable.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Add an inode to the inode hash for this superblock.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__insert_inode_hash\">__insert_inode_hash</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, unsigned long <a class=\"id\" href=\"#hashval\">hashval</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a> *<a class=\"id\" href=\"#head\">head</a> = <a class=\"id\" href=\"#inode_hashtable\">inode_hashtable</a> + <a class=\"id\" href=\"#hash\">hash</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#hashval\">hashval</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_add_head\">hlist_add_head</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_hash\">i_hash</a>, <a class=\"id\" href=\"#head\">head</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__insert_inode_hash\">__insert_inode_hash</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>remove_inode_hash - remove an inode from the hash</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@inode: inode to unhash</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Remove an inode from the superblock.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#remove_inode_hash\">remove_inode_hash</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_del_init\">hlist_del_init</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_hash\">i_hash</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#remove_inode_hash\">remove_inode_hash</a>);", 
"", 
"int <a class=\"id\" href=\"#generic_delete_inode\">generic_delete_inode</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#generic_delete_inode\">generic_delete_inode</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Normal UNIX filesystem behaviour: delete the</span>", 
"<span class=\"comment\"> * inode when the usage count drops to zero, and</span>", 
"<span class=\"comment\"> * i_nlink is zero.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#generic_drop_inode\">generic_drop_inode</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>return !<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_nlink\">i_nlink</a> || <a class=\"id\" href=\"#hlist_unhashed\">hlist_unhashed</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_hash\">i_hash</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#generic_drop_inode\">generic_drop_inode</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called when we're dropping the last reference</span>", 
"<span class=\"comment\"> * to an inode.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Call the FS \"drop_inode()\" function, defaulting to</span>", 
"<span class=\"comment\"> * the legacy UNIX filesystem behaviour.  If it tells</span>", 
"<span class=\"comment\"> * us to evict inode, do so.  Otherwise, retain inode</span>", 
"<span class=\"comment\"> * in cache if fs is alive, sync and evict if fs is</span>", 
"<span class=\"comment\"> * shutting down.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#iput_final\">iput_final</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#super_operations\">super_operations</a> *<a class=\"id\" href=\"#op\">op</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_op\">s_op</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#drop\">drop</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#op\">op</a> && <a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#drop_inode\">drop_inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drop\">drop</a> = <a class=\"id\" href=\"#op\">op</a>-><a class=\"id\" href=\"#drop_inode\">drop_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#drop\">drop</a> = <a class=\"id\" href=\"#generic_drop_inode\">generic_drop_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#drop\">drop</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> &amp; (<a class=\"id\" href=\"#I_DIRTY\">I_DIRTY</a>|<a class=\"id\" href=\"#I_SYNC\">I_SYNC</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move\">list_move</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_list\">i_list</a>, &amp;<a class=\"id\" href=\"#inode_unused\">inode_unused</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inodes_stat\">inodes_stat</a>.<a class=\"id\" href=\"#nr_unused\">nr_unused</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sb\">sb</a>-><a class=\"id\" href=\"#s_flags\">s_flags</a> &amp; <a class=\"id\" href=\"#MS_ACTIVE\">MS_ACTIVE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> &amp; <a class=\"id\" href=\"#I_NEW\">I_NEW</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> |= <a class=\"id\" href=\"#I_WILL_FREE\">I_WILL_FREE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#write_inode_now\">write_inode_now</a>(<a class=\"id\" href=\"#inode\">inode</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> &amp; <a class=\"id\" href=\"#I_NEW\">I_NEW</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> &= ~<a class=\"id\" href=\"#I_WILL_FREE\">I_WILL_FREE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inodes_stat\">inodes_stat</a>.<a class=\"id\" href=\"#nr_unused\">nr_unused</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hlist_del_init\">hlist_del_init</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_hash\">i_hash</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_list\">i_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb_list\">i_sb_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> &amp; <a class=\"id\" href=\"#I_NEW\">I_NEW</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> |= <a class=\"id\" href=\"#I_FREEING\">I_FREEING</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inodes_stat\">inodes_stat</a>.<a class=\"id\" href=\"#nr_inodes\">nr_inodes</a>--;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#evict\">evict</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hlist_del_init\">hlist_del_init</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_hash\">i_hash</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up_inode\">wake_up_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> != (<a class=\"id\" href=\"#I_FREEING\">I_FREEING</a> | <a class=\"id\" href=\"#I_CLEAR\">I_CLEAR</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#destroy_inode\">destroy_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>iput<span class=\"ts\"/>- put an inode</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@inode: inode to put</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Puts an inode, dropping its usage count. If the inode use count hits</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>zero, the inode is then freed and may also be destroyed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Consequently, iput() can sleep.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#iput\">iput</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> &amp; <a class=\"id\" href=\"#I_CLEAR\">I_CLEAR</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_lock\">atomic_dec_and_lock</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_count\">i_count</a>, &amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iput_final\">iput_final</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#iput\">iput</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>bmap<span class=\"ts\"/>- find a block number in a file</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@inode: inode of file</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@block: block to find</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns the block number on the device holding the inode that</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>is the disk block number for the block of the file requested.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>That is, asked for block 4 of inode 1 the function will return the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>disk block relative to the disk start that holds that block of the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>file.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#bmap\">bmap</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#block\">block</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#res\">res</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a>-><a class=\"id\" href=\"#bmap\">bmap</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>-><a class=\"id\" href=\"#a_ops\">a_ops</a>-><a class=\"id\" href=\"#bmap\">bmap</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>, <a class=\"id\" href=\"#block\">block</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bmap\">bmap</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * With relative atime, only update atime if the previous atime is</span>", 
"<span class=\"comment\"> * earlier than either the ctime or mtime or if at least a day has</span>", 
"<span class=\"comment\"> * passed since the last atime update.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#relatime_need_update\">relatime_need_update</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#now\">now</a>)", 
"{", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_flags\">mnt_flags</a> &amp; <a class=\"id\" href=\"#MNT_RELATIME\">MNT_RELATIME</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Is mtime younger than atime? If yes, update atime:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#timespec_compare\">timespec_compare</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mtime\">i_mtime</a>, &amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_atime\">i_atime</a>) >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Is ctime younger than atime? If yes, update atime:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#timespec_compare\">timespec_compare</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ctime\">i_ctime</a>, &amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_atime\">i_atime</a>) >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Is the previous atime value older than a day? If yes,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * update atime:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((long)(<a class=\"id\" href=\"#now\">now</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a> - <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_atime\">i_atime</a>.<a class=\"id\" href=\"#tv_sec\">tv_sec</a>) >= 24*60*60)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Good, we can skip the atime update:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>touch_atime<span class=\"ts\"/>-<span class=\"ts\"/>update the access time</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@mnt: mount the inode is accessed on</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dentry: dentry accessed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Update the accessed time on an inode and mark it for writeback.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function automatically handles read only file systems and media,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>as well as the \"noatime\" flag and inode specific \"noatime\" markers.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#touch_atime\">touch_atime</a>(struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>, struct <a class=\"id\" href=\"#dentry\">dentry</a> *<a class=\"id\" href=\"#dentry\">dentry</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#now\">now</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_flags\">i_flags</a> &amp; <a class=\"id\" href=\"#S_NOATIME\">S_NOATIME</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_NOATIME\">IS_NOATIME</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_flags\">s_flags</a> &amp; <a class=\"id\" href=\"#MS_NODIRATIME\">MS_NODIRATIME</a>) && <a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_flags\">mnt_flags</a> &amp; <a class=\"id\" href=\"#MNT_NOATIME\">MNT_NOATIME</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#mnt\">mnt</a>-><a class=\"id\" href=\"#mnt_flags\">mnt_flags</a> &amp; <a class=\"id\" href=\"#MNT_NODIRATIME\">MNT_NODIRATIME</a>) && <a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#current_fs_time\">current_fs_time</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#relatime_need_update\">relatime_need_update</a>(<a class=\"id\" href=\"#mnt\">mnt</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#now\">now</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#timespec_equal\">timespec_equal</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_atime\">i_atime</a>, &amp;<a class=\"id\" href=\"#now\">now</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mnt_want_write\">mnt_want_write</a>(<a class=\"id\" href=\"#mnt\">mnt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_atime\">i_atime</a> = <a class=\"id\" href=\"#now\">now</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mark_inode_dirty_sync\">mark_inode_dirty_sync</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mnt_drop_write\">mnt_drop_write</a>(<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#touch_atime\">touch_atime</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>file_update_time<span class=\"ts\"/>-<span class=\"ts\"/>update mtime and ctime time</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@file: file accessed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Update the mtime and ctime members of an inode and mark the inode</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>for writeback.  Note that this function is meant exclusively for</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>usage in the file write path of filesystems, and filesystems may</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>choose to explicitly ignore update via this function with the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>S_NOCMTIME inode flag, e.g. for network filesystem where these</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>timestamps are handled by the server.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"void <a class=\"id\" href=\"#file_update_time\">file_update_time</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#timespec\">timespec</a> <a class=\"id\" href=\"#now\">now</a>;", 
"<span class=\"ts\"/>enum { <a class=\"id\" href=\"#S_MTIME\">S_MTIME</a> = 1, <a class=\"id\" href=\"#S_CTIME\">S_CTIME</a> = 2, <a class=\"id\" href=\"#S_VERSION\">S_VERSION</a> = 4 } <a class=\"id\" href=\"#sync_it\">sync_it</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* First try to exhaust all avenues to not sync */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_NOCMTIME\">IS_NOCMTIME</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#current_fs_time\">current_fs_time</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#timespec_equal\">timespec_equal</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mtime\">i_mtime</a>, &amp;<a class=\"id\" href=\"#now\">now</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sync_it\">sync_it</a> = <a class=\"id\" href=\"#S_MTIME\">S_MTIME</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#timespec_equal\">timespec_equal</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ctime\">i_ctime</a>, &amp;<a class=\"id\" href=\"#now\">now</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sync_it\">sync_it</a> |= <a class=\"id\" href=\"#S_CTIME\">S_CTIME</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_I_VERSION\">IS_I_VERSION</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sync_it\">sync_it</a> |= <a class=\"id\" href=\"#S_VERSION\">S_VERSION</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sync_it\">sync_it</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Finally allowed to write? Takes lock. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mnt_want_write_file\">mnt_want_write_file</a>(<a class=\"id\" href=\"#file\">file</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Only change inode inside the lock region */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sync_it\">sync_it</a> &amp; <a class=\"id\" href=\"#S_VERSION\">S_VERSION</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode_inc_iversion\">inode_inc_iversion</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sync_it\">sync_it</a> &amp; <a class=\"id\" href=\"#S_CTIME\">S_CTIME</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ctime\">i_ctime</a> = <a class=\"id\" href=\"#now\">now</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sync_it\">sync_it</a> &amp; <a class=\"id\" href=\"#S_MTIME\">S_MTIME</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mtime\">i_mtime</a> = <a class=\"id\" href=\"#now\">now</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mark_inode_dirty_sync\">mark_inode_dirty_sync</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mnt_drop_write\">mnt_drop_write</a>(<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#mnt\">mnt</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#file_update_time\">file_update_time</a>);", 
"", 
"int <a class=\"id\" href=\"#inode_needs_sync\">inode_needs_sync</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_SYNC\">IS_SYNC</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>) && <a class=\"id\" href=\"#IS_DIRSYNC\">IS_DIRSYNC</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#inode_needs_sync\">inode_needs_sync</a>);", 
"", 
"int <a class=\"id\" href=\"#inode_wait\">inode_wait</a>(void *<a class=\"id\" href=\"#word\">word</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#inode_wait\">inode_wait</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If we try to find an inode in the inode hash while it is being</span>", 
"<span class=\"comment\"> * deleted, we have to wait until the filesystem completes its</span>", 
"<span class=\"comment\"> * deletion before reporting that it isn't found.  This function waits</span>", 
"<span class=\"comment\"> * until the deletion _might_ have completed.  Callers are responsible</span>", 
"<span class=\"comment\"> * to recheck inode state.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It doesn't matter if I_NEW is not set initially, a call to</span>", 
"<span class=\"comment\"> * wake_up_inode() after removing from the hash list will DTRT.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is called with inode_lock held.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__wait_on_freeing_inode\">__wait_on_freeing_inode</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#wq\">wq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEFINE_WAIT_BIT\">DEFINE_WAIT_BIT</a>(<a class=\"id\" href=\"#wait\">wait</a>, &amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a>, <a class=\"id\" href=\"#__I_NEW\">__I_NEW</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wq\">wq</a> = <a class=\"id\" href=\"#bit_waitqueue\">bit_waitqueue</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a>, <a class=\"id\" href=\"#__I_NEW\">__I_NEW</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prepare_to_wait\">prepare_to_wait</a>(<a class=\"id\" href=\"#wq\">wq</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>.<a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#finish_wait\">finish_wait</a>(<a class=\"id\" href=\"#wq\">wq</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>.<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#inode_lock\">inode_lock</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#__initdata\">__initdata</a> unsigned long <a class=\"id\" href=\"#ihash_entries\">ihash_entries</a>;", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#set_ihash_entries\">set_ihash_entries</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#str\">str</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ihash_entries\">ihash_entries</a> = <a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#str\">str</a>, &amp;<a class=\"id\" href=\"#str\">str</a>, 0);", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"ihash_entries=\", <a class=\"id\" href=\"#set_ihash_entries\">set_ihash_entries</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Initialize the waitqueues and inode hash table.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#inode_init_early\">inode_init_early</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#loop\">loop</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If hashes are distributed across NUMA nodes, defer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * hash allocation until vmalloc space is available.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hashdist\">hashdist</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode_hashtable\">inode_hashtable</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alloc_large_system_hash\">alloc_large_system_hash</a>(\"Inode-cache\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ihash_entries\">ihash_entries</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>14,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#HASH_EARLY\">HASH_EARLY</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#i_hash_shift\">i_hash_shift</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#i_hash_mask\">i_hash_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#loop\">loop</a> = 0; <a class=\"id\" href=\"#loop\">loop</a> &lt; (1 << <a class=\"id\" href=\"#i_hash_shift\">i_hash_shift</a>); <a class=\"id\" href=\"#loop\">loop</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_HLIST_HEAD\">INIT_HLIST_HEAD</a>(&amp;<a class=\"id\" href=\"#inode_hashtable\">inode_hashtable</a>[<a class=\"id\" href=\"#loop\">loop</a>]);", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#inode_init\">inode_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#loop\">loop</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* inode slab cache */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode_cachep\">inode_cachep</a> = <a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(\"inode_cache\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> sizeof(struct <a class=\"id\" href=\"#inode\">inode</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> (<a class=\"id\" href=\"#SLAB_RECLAIM_ACCOUNT\">SLAB_RECLAIM_ACCOUNT</a>|<a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a>|", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#SLAB_MEM_SPREAD\">SLAB_MEM_SPREAD</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#init_once\">init_once</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_shrinker\">register_shrinker</a>(&amp;<a class=\"id\" href=\"#icache_shrinker\">icache_shrinker</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Hash may have been set up in inode_init_early */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#hashdist\">hashdist</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode_hashtable\">inode_hashtable</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#alloc_large_system_hash\">alloc_large_system_hash</a>(\"Inode-cache\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ihash_entries\">ihash_entries</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>14,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#i_hash_shift\">i_hash_shift</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#i_hash_mask\">i_hash_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#loop\">loop</a> = 0; <a class=\"id\" href=\"#loop\">loop</a> &lt; (1 << <a class=\"id\" href=\"#i_hash_shift\">i_hash_shift</a>); <a class=\"id\" href=\"#loop\">loop</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_HLIST_HEAD\">INIT_HLIST_HEAD</a>(&amp;<a class=\"id\" href=\"#inode_hashtable\">inode_hashtable</a>[<a class=\"id\" href=\"#loop\">loop</a>]);", 
"}", 
"", 
"void <a class=\"id\" href=\"#init_special_inode\">init_special_inode</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#umode_t\">umode_t</a> <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#rdev\">rdev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a> = <a class=\"id\" href=\"#mode\">mode</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISCHR\">S_ISCHR</a>(<a class=\"id\" href=\"#mode\">mode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_fop\">i_fop</a> = &amp;<a class=\"id\" href=\"#def_chr_fops\">def_chr_fops</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_rdev\">i_rdev</a> = <a class=\"id\" href=\"#rdev\">rdev</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#S_ISBLK\">S_ISBLK</a>(<a class=\"id\" href=\"#mode\">mode</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_fop\">i_fop</a> = &amp;<a class=\"id\" href=\"#def_blk_fops\">def_blk_fops</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_rdev\">i_rdev</a> = <a class=\"id\" href=\"#rdev\">rdev</a>;", 
"<span class=\"ts\"/>} else if (<a class=\"id\" href=\"#S_ISFIFO\">S_ISFIFO</a>(<a class=\"id\" href=\"#mode\">mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_fop\">i_fop</a> = &amp;<a class=\"id\" href=\"#def_fifo_fops\">def_fifo_fops</a>;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#S_ISSOCK\">S_ISSOCK</a>(<a class=\"id\" href=\"#mode\">mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_fop\">i_fop</a> = &amp;<a class=\"id\" href=\"#bad_sock_fops\">bad_sock_fops</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a> \"init_special_inode: bogus i_mode (%o) for\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \" inode %s:%lu\\n\", <a class=\"id\" href=\"#mode\">mode</a>, <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_id\">s_id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#init_special_inode\">init_special_inode</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * Init uid,gid,mode for new inode according to posix standards</span>", 
"<span class=\"comment\"> * @inode: New inode</span>", 
"<span class=\"comment\"> * @dir: Directory inode</span>", 
"<span class=\"comment\"> * @mode: mode of the new inode</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#inode_init_owner\">inode_init_owner</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, const struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#dir\">dir</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mode_t\">mode_t</a> <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_uid\">i_uid</a> = <a class=\"id\" href=\"#current_fsuid\">current_fsuid</a>();", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dir\">dir</a> && <a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a> &amp; <a class=\"id\" href=\"#S_ISGID\">S_ISGID</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_gid\">i_gid</a> = <a class=\"id\" href=\"#dir\">dir</a>-><a class=\"id\" href=\"#i_gid\">i_gid</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISDIR\">S_ISDIR</a>(<a class=\"id\" href=\"#mode\">mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mode\">mode</a> |= <a class=\"id\" href=\"#S_ISGID\">S_ISGID</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_gid\">i_gid</a> = <a class=\"id\" href=\"#current_fsgid\">current_fsgid</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a> = <a class=\"id\" href=\"#mode\">mode</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#inode_init_owner\">inode_init_owner</a>);", 
];
xr_frag_insert('l/21/cabfc3a4aa57419fa740f6100905a3e0b00e38.xr', __xr_tmp);
