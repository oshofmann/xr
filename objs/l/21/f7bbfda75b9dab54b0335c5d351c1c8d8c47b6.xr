var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_ASM_X86_LOCAL_H\">_ASM_X86_LOCAL_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_ASM_X86_LOCAL_H\">_ASM_X86_LOCAL_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#percpu\">percpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#system\">system</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#atomic\">atomic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#asm\">asm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"typedef struct {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_long_t\">atomic_long_t</a> <a class=\"id\" href=\"#a\">a</a>;", 
"} <a class=\"id\" href=\"#local_t\">local_t</a>;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LOCAL_INIT\">LOCAL_INIT</a>(<a class=\"id\" href=\"#i\">i</a>)<span class=\"ts\"/>{ <a class=\"id\" href=\"#ATOMIC_LONG_INIT\">ATOMIC_LONG_INIT</a>(<a class=\"id\" href=\"#i\">i</a>) }", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#local_read\">local_read</a>(<a class=\"id\" href=\"#l\">l</a>)<span class=\"ts\"/><a class=\"id\" href=\"#atomic_long_read\">atomic_long_read</a>(&amp;(<a class=\"id\" href=\"#l\">l</a>)-><a class=\"id\" href=\"#a\">a</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#local_set\">local_set</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#i\">i</a>)<span class=\"ts\"/><a class=\"id\" href=\"#atomic_long_set\">atomic_long_set</a>(&amp;(<a class=\"id\" href=\"#l\">l</a>)-><a class=\"id\" href=\"#a\">a</a>, (<a class=\"id\" href=\"#i\">i</a>))", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#local_inc\">local_inc</a>(<a class=\"id\" href=\"#local_t\">local_t</a> *<a class=\"id\" href=\"#l\">l</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(<a class=\"id\" href=\"#_ASM_INC\">_ASM_INC</a> \"%0\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"+m\" (<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#a\">a</a>.<a class=\"id\" href=\"#counter\">counter</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#local_dec\">local_dec</a>(<a class=\"id\" href=\"#local_t\">local_t</a> *<a class=\"id\" href=\"#l\">l</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(<a class=\"id\" href=\"#_ASM_DEC\">_ASM_DEC</a> \"%0\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"+m\" (<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#a\">a</a>.<a class=\"id\" href=\"#counter\">counter</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#local_add\">local_add</a>(long <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#local_t\">local_t</a> *<a class=\"id\" href=\"#l\">l</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(<a class=\"id\" href=\"#_ASM_ADD\">_ASM_ADD</a> \"%1,%0\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"+m\" (<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#a\">a</a>.<a class=\"id\" href=\"#counter\">counter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"ir\" (<a class=\"id\" href=\"#i\">i</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#local_sub\">local_sub</a>(long <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#local_t\">local_t</a> *<a class=\"id\" href=\"#l\">l</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(<a class=\"id\" href=\"#_ASM_SUB\">_ASM_SUB</a> \"%1,%0\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"+m\" (<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#a\">a</a>.<a class=\"id\" href=\"#counter\">counter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"ir\" (<a class=\"id\" href=\"#i\">i</a>));", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * local_sub_and_test - subtract value from variable and test result</span>", 
"<span class=\"comment\"> * @i: integer value to subtract</span>", 
"<span class=\"comment\"> * @l: pointer to type local_t</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Atomically subtracts @i from @l and returns</span>", 
"<span class=\"comment\"> * true if the result is zero, or false for all</span>", 
"<span class=\"comment\"> * other cases.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#local_sub_and_test\">local_sub_and_test</a>(long <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#local_t\">local_t</a> *<a class=\"id\" href=\"#l\">l</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#c\">c</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(<a class=\"id\" href=\"#_ASM_SUB\">_ASM_SUB</a> \"%2,%0; sete %1\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"+m\" (<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#a\">a</a>.<a class=\"id\" href=\"#counter\">counter</a>), \"=qm\" (<a class=\"id\" href=\"#c\">c</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"ir\" (<a class=\"id\" href=\"#i\">i</a>) : \"memory\");", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#c\">c</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * local_dec_and_test - decrement and test</span>", 
"<span class=\"comment\"> * @l: pointer to type local_t</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Atomically decrements @l by 1 and</span>", 
"<span class=\"comment\"> * returns true if the result is 0, or false for all other</span>", 
"<span class=\"comment\"> * cases.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#local_dec_and_test\">local_dec_and_test</a>(<a class=\"id\" href=\"#local_t\">local_t</a> *<a class=\"id\" href=\"#l\">l</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#c\">c</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(<a class=\"id\" href=\"#_ASM_DEC\">_ASM_DEC</a> \"%0; sete %1\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"+m\" (<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#a\">a</a>.<a class=\"id\" href=\"#counter\">counter</a>), \"=qm\" (<a class=\"id\" href=\"#c\">c</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>     : : \"memory\");", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#c\">c</a> != 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * local_inc_and_test - increment and test</span>", 
"<span class=\"comment\"> * @l: pointer to type local_t</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Atomically increments @l by 1</span>", 
"<span class=\"comment\"> * and returns true if the result is zero, or false for all</span>", 
"<span class=\"comment\"> * other cases.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#local_inc_and_test\">local_inc_and_test</a>(<a class=\"id\" href=\"#local_t\">local_t</a> *<a class=\"id\" href=\"#l\">l</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#c\">c</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(<a class=\"id\" href=\"#_ASM_INC\">_ASM_INC</a> \"%0; sete %1\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"+m\" (<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#a\">a</a>.<a class=\"id\" href=\"#counter\">counter</a>), \"=qm\" (<a class=\"id\" href=\"#c\">c</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>     : : \"memory\");", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#c\">c</a> != 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * local_add_negative - add and test if negative</span>", 
"<span class=\"comment\"> * @i: integer value to add</span>", 
"<span class=\"comment\"> * @l: pointer to type local_t</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Atomically adds @i to @l and returns true</span>", 
"<span class=\"comment\"> * if the result is negative, or false when</span>", 
"<span class=\"comment\"> * result is greater than or equal to zero.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#local_add_negative\">local_add_negative</a>(long <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#local_t\">local_t</a> *<a class=\"id\" href=\"#l\">l</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#c\">c</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(<a class=\"id\" href=\"#_ASM_ADD\">_ASM_ADD</a> \"%2,%0; sets %1\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"+m\" (<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#a\">a</a>.<a class=\"id\" href=\"#counter\">counter</a>), \"=qm\" (<a class=\"id\" href=\"#c\">c</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"ir\" (<a class=\"id\" href=\"#i\">i</a>) : \"memory\");", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#c\">c</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * local_add_return - add and return</span>", 
"<span class=\"comment\"> * @i: integer value to add</span>", 
"<span class=\"comment\"> * @l: pointer to type local_t</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Atomically adds @i to @l and returns @i + @l</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> long <a class=\"id\" href=\"#local_add_return\">local_add_return</a>(long <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#local_t\">local_t</a> *<a class=\"id\" href=\"#l\">l</a>)", 
"{", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#__i\">__i</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_M386\">CONFIG_M386</a>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#boot_cpu_data\">boot_cpu_data</a>.<a class=\"id\" href=\"#x86\">x86</a> <= 3))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_xadd\">no_xadd</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"comment\">/* Modern 486+ processor */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__i\">__i</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(<a class=\"id\" href=\"#_ASM_XADD\">_ASM_XADD</a> \"%0, %1;\"", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"+r\" (<a class=\"id\" href=\"#i\">i</a>), \"+m\" (<a class=\"id\" href=\"#l\">l</a>-><a class=\"id\" href=\"#a\">a</a>.<a class=\"id\" href=\"#counter\">counter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>     : : \"memory\");", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a> + <a class=\"id\" href=\"#__i\">__i</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_M386\">CONFIG_M386</a>", 
"<a class=\"id\" href=\"#no_xadd\">no_xadd</a>: <span class=\"comment\">/* Legacy 386 processor */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__i\">__i</a> = <a class=\"id\" href=\"#local_read\">local_read</a>(<a class=\"id\" href=\"#l\">l</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_set\">local_set</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#i\">i</a> + <a class=\"id\" href=\"#__i\">__i</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a> + <a class=\"id\" href=\"#__i\">__i</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> long <a class=\"id\" href=\"#local_sub_return\">local_sub_return</a>(long <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#local_t\">local_t</a> *<a class=\"id\" href=\"#l\">l</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#local_add_return\">local_add_return</a>(-<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#l\">l</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#local_inc_return\">local_inc_return</a>(<a class=\"id\" href=\"#l\">l</a>)  (<a class=\"id\" href=\"#local_add_return\">local_add_return</a>(1, <a class=\"id\" href=\"#l\">l</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#local_dec_return\">local_dec_return</a>(<a class=\"id\" href=\"#l\">l</a>)  (<a class=\"id\" href=\"#local_sub_return\">local_sub_return</a>(1, <a class=\"id\" href=\"#l\">l</a>))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#local_cmpxchg\">local_cmpxchg</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#o\">o</a>, <a class=\"id\" href=\"#n\">n</a>) \\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#cmpxchg_local\">cmpxchg_local</a>(&amp;((<a class=\"id\" href=\"#l\">l</a>)-><a class=\"id\" href=\"#a\">a</a>.<a class=\"id\" href=\"#counter\">counter</a>), (<a class=\"id\" href=\"#o\">o</a>), (<a class=\"id\" href=\"#n\">n</a>)))", 
"<span class=\"comment\">/* Always has a lock prefix */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#local_xchg\">local_xchg</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#n\">n</a>) (<a class=\"id\" href=\"#xchg\">xchg</a>(&amp;((<a class=\"id\" href=\"#l\">l</a>)-><a class=\"id\" href=\"#a\">a</a>.<a class=\"id\" href=\"#counter\">counter</a>), (<a class=\"id\" href=\"#n\">n</a>)))", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * local_add_unless - add unless the number is a given value</span>", 
"<span class=\"comment\"> * @l: pointer of type local_t</span>", 
"<span class=\"comment\"> * @a: the amount to add to l...</span>", 
"<span class=\"comment\"> * @u: ...unless l is equal to u.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Atomically adds @a to @l, so long as it was not @u.</span>", 
"<span class=\"comment\"> * Returns non-zero if @l was not @u, and zero otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#local_add_unless\">local_add_unless</a>(<a class=\"id\" href=\"#l\">l</a>, <a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#u\">u</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#old\">old</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = <a class=\"id\" href=\"#local_read\">local_read</a>((<a class=\"id\" href=\"#l\">l</a>));<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>for (;;) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#c\">c</a> == (<a class=\"id\" href=\"#u\">u</a>)))<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#old\">old</a> = <a class=\"id\" href=\"#local_cmpxchg\">local_cmpxchg</a>((<a class=\"id\" href=\"#l\">l</a>), <a class=\"id\" href=\"#c\">c</a>, <a class=\"id\" href=\"#c\">c</a> + (<a class=\"id\" href=\"#a\">a</a>));<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#old\">old</a> == <a class=\"id\" href=\"#c\">c</a>))<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = <a class=\"id\" href=\"#old\">old</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> != (<a class=\"id\" href=\"#u\">u</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#local_inc_not_zero\">local_inc_not_zero</a>(<a class=\"id\" href=\"#l\">l</a>) <a class=\"id\" href=\"#local_add_unless\">local_add_unless</a>((<a class=\"id\" href=\"#l\">l</a>), 1, 0)", 
"", 
"<span class=\"comment\">/* On x86_32, these are no better than the atomic variants.</span>", 
"<span class=\"comment\"> * On x86-64 these are better than the atomic variants on SMP kernels</span>", 
"<span class=\"comment\"> * because they dont use a lock prefix.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__local_inc\">__local_inc</a>(<a class=\"id\" href=\"#l\">l</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_inc\">local_inc</a>(<a class=\"id\" href=\"#l\">l</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__local_dec\">__local_dec</a>(<a class=\"id\" href=\"#l\">l</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_dec\">local_dec</a>(<a class=\"id\" href=\"#l\">l</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__local_add\">__local_add</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#l\">l</a>)<span class=\"ts\"/><a class=\"id\" href=\"#local_add\">local_add</a>((<a class=\"id\" href=\"#i\">i</a>), (<a class=\"id\" href=\"#l\">l</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__local_sub\">__local_sub</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#l\">l</a>)<span class=\"ts\"/><a class=\"id\" href=\"#local_sub\">local_sub</a>((<a class=\"id\" href=\"#i\">i</a>), (<a class=\"id\" href=\"#l\">l</a>))", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _ASM_X86_LOCAL_H */</span>", 
];
xr_frag_insert('l/21/f7bbfda75b9dab54b0335c5d351c1c8d8c47b6.xr', __xr_tmp);
