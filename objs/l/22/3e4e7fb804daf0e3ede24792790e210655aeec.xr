var __xr_tmp = [
"<span class=\"comment\">/* By Ross Biro 1/23/92 */</span>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Pentium III FXSR, SSE support</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Gareth Hughes &lt;gareth@valinux.com&gt;, May 2000</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#smp\">smp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ptrace\">ptrace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#regset\">regset</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#tracehook\">tracehook</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#user\">user</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#elf\">elf</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#security\">security</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#audit\">audit</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#seccomp\">seccomp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#signal\">signal</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#perf_event\">perf_event</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hw_breakpoint\">hw_breakpoint</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pgtable\">pgtable</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#system\">system</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#processor\">processor</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#i387\">i387</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#debugreg\">debugreg</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#ldt\">ldt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#desc\">desc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#prctl\">prctl</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#proto\">proto</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#hw_breakpoint\">hw_breakpoint</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"tls.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CREATE_TRACE_POINTS\">CREATE_TRACE_POINTS</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#trace\">trace</a>/<a class=\"id\" href=\"#events\">events</a>/<a class=\"id\" href=\"#syscalls\">syscalls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"enum <a class=\"id\" href=\"#x86_regset\">x86_regset</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REGSET_GENERAL\">REGSET_GENERAL</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REGSET_FP\">REGSET_FP</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REGSET_XFP\">REGSET_XFP</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REGSET_IOPERM64\">REGSET_IOPERM64</a> = <a class=\"id\" href=\"#REGSET_XFP\">REGSET_XFP</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REGSET_XSTATE\">REGSET_XSTATE</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REGSET_TLS\">REGSET_TLS</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REGSET_IOPERM32\">REGSET_IOPERM32</a>,", 
"};", 
"", 
"struct <a class=\"id\" href=\"#pt_regs_offset\">pt_regs_offset</a> {", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#offset\">offset</a>;", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#REG_OFFSET_NAME\">REG_OFFSET_NAME</a>(<a class=\"id\" href=\"#r\">r</a>) {.<a class=\"id\" href=\"#name\">name</a> = #<a class=\"id\" href=\"#r\">r</a>, .<a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a>, <a class=\"id\" href=\"#r\">r</a>)}", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#REG_OFFSET_END\">REG_OFFSET_END</a> {.<a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#NULL\">NULL</a>, .<a class=\"id\" href=\"#offset\">offset</a> = 0}", 
"", 
"static const struct <a class=\"id\" href=\"#pt_regs_offset\">pt_regs_offset</a> <a class=\"id\" href=\"#regoffset_table\">regoffset_table</a>[] = {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_OFFSET_NAME\">REG_OFFSET_NAME</a>(<a class=\"id\" href=\"#r15\">r15</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_OFFSET_NAME\">REG_OFFSET_NAME</a>(<a class=\"id\" href=\"#r14\">r14</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_OFFSET_NAME\">REG_OFFSET_NAME</a>(<a class=\"id\" href=\"#r13\">r13</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_OFFSET_NAME\">REG_OFFSET_NAME</a>(<a class=\"id\" href=\"#r12\">r12</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_OFFSET_NAME\">REG_OFFSET_NAME</a>(<a class=\"id\" href=\"#r11\">r11</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_OFFSET_NAME\">REG_OFFSET_NAME</a>(<a class=\"id\" href=\"#r10\">r10</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_OFFSET_NAME\">REG_OFFSET_NAME</a>(<a class=\"id\" href=\"#r9\">r9</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_OFFSET_NAME\">REG_OFFSET_NAME</a>(<a class=\"id\" href=\"#r8\">r8</a>),", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_OFFSET_NAME\">REG_OFFSET_NAME</a>(<a class=\"id\" href=\"#bx\">bx</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_OFFSET_NAME\">REG_OFFSET_NAME</a>(<a class=\"id\" href=\"#cx\">cx</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_OFFSET_NAME\">REG_OFFSET_NAME</a>(<a class=\"id\" href=\"#dx\">dx</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_OFFSET_NAME\">REG_OFFSET_NAME</a>(<a class=\"id\" href=\"#si\">si</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_OFFSET_NAME\">REG_OFFSET_NAME</a>(<a class=\"id\" href=\"#di\">di</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_OFFSET_NAME\">REG_OFFSET_NAME</a>(<a class=\"id\" href=\"#bp\">bp</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_OFFSET_NAME\">REG_OFFSET_NAME</a>(<a class=\"id\" href=\"#ax\">ax</a>),", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_OFFSET_NAME\">REG_OFFSET_NAME</a>(<a class=\"id\" href=\"#ds\">ds</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_OFFSET_NAME\">REG_OFFSET_NAME</a>(<a class=\"id\" href=\"#es\">es</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_OFFSET_NAME\">REG_OFFSET_NAME</a>(<a class=\"id\" href=\"#fs\">fs</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_OFFSET_NAME\">REG_OFFSET_NAME</a>(<a class=\"id\" href=\"#gs\">gs</a>),", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_OFFSET_NAME\">REG_OFFSET_NAME</a>(<a class=\"id\" href=\"#orig_ax\">orig_ax</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_OFFSET_NAME\">REG_OFFSET_NAME</a>(<a class=\"id\" href=\"#ip\">ip</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_OFFSET_NAME\">REG_OFFSET_NAME</a>(<a class=\"id\" href=\"#cs\">cs</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_OFFSET_NAME\">REG_OFFSET_NAME</a>(<a class=\"id\" href=\"#flags\">flags</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_OFFSET_NAME\">REG_OFFSET_NAME</a>(<a class=\"id\" href=\"#sp\">sp</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_OFFSET_NAME\">REG_OFFSET_NAME</a>(<a class=\"id\" href=\"#ss\">ss</a>),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#REG_OFFSET_END\">REG_OFFSET_END</a>,", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * regs_query_register_offset() - query register offset from its name</span>", 
"<span class=\"comment\"> * @name:<span class=\"ts\"/>the name of a register</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * regs_query_register_offset() returns the offset of a register in struct</span>", 
"<span class=\"comment\"> * pt_regs from its name. If the name is invalid, this returns -EINVAL;</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#regs_query_register_offset\">regs_query_register_offset</a>(const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#pt_regs_offset\">pt_regs_offset</a> *<a class=\"id\" href=\"#roff\">roff</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#roff\">roff</a> = <a class=\"id\" href=\"#regoffset_table\">regoffset_table</a>; <a class=\"id\" href=\"#roff\">roff</a>-><a class=\"id\" href=\"#name\">name</a> != <a class=\"id\" href=\"#NULL\">NULL</a>; <a class=\"id\" href=\"#roff\">roff</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#roff\">roff</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#name\">name</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#roff\">roff</a>-><a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * regs_query_register_name() - query register name from its offset</span>", 
"<span class=\"comment\"> * @offset:<span class=\"ts\"/>the offset of a register in struct pt_regs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * regs_query_register_name() returns the name of a register from its</span>", 
"<span class=\"comment\"> * offset in struct pt_regs. If the @offset is invalid, this returns NULL;</span>", 
"<span class=\"comment\"> */</span>", 
"const char *<a class=\"id\" href=\"#regs_query_register_name\">regs_query_register_name</a>(unsigned int <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#pt_regs_offset\">pt_regs_offset</a> *<a class=\"id\" href=\"#roff\">roff</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#roff\">roff</a> = <a class=\"id\" href=\"#regoffset_table\">regoffset_table</a>; <a class=\"id\" href=\"#roff\">roff</a>-><a class=\"id\" href=\"#name\">name</a> != <a class=\"id\" href=\"#NULL\">NULL</a>; <a class=\"id\" href=\"#roff\">roff</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#roff\">roff</a>-><a class=\"id\" href=\"#offset\">offset</a> == <a class=\"id\" href=\"#offset\">offset</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#roff\">roff</a>-><a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static const int <a class=\"id\" href=\"#arg_offs_table\">arg_offs_table</a>[] = {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"<span class=\"ts\"/>[0] = <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a>, <a class=\"id\" href=\"#ax\">ax</a>),", 
"<span class=\"ts\"/>[1] = <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a>, <a class=\"id\" href=\"#dx\">dx</a>),", 
"<span class=\"ts\"/>[2] = <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a>, <a class=\"id\" href=\"#cx\">cx</a>)", 
"#else <span class=\"comment\">/* CONFIG_X86_64 */</span>", 
"<span class=\"ts\"/>[0] = <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a>, <a class=\"id\" href=\"#di\">di</a>),", 
"<span class=\"ts\"/>[1] = <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a>, <a class=\"id\" href=\"#si\">si</a>),", 
"<span class=\"ts\"/>[2] = <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a>, <a class=\"id\" href=\"#dx\">dx</a>),", 
"<span class=\"ts\"/>[3] = <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a>, <a class=\"id\" href=\"#cx\">cx</a>),", 
"<span class=\"ts\"/>[4] = <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a>, <a class=\"id\" href=\"#r8\">r8</a>),", 
"<span class=\"ts\"/>[5] = <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a>, <a class=\"id\" href=\"#r9\">r9</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * does not yet catch signals sent when the child dies.</span>", 
"<span class=\"comment\"> * in exit.c or in signal.c.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Determines which flags the user has access to [1 = access, 0 = no access].</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FLAG_MASK_32\">FLAG_MASK_32</a><span class=\"ts\"/><span class=\"ts\"/>((unsigned long)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> (<a class=\"id\" href=\"#X86_EFLAGS_CF\">X86_EFLAGS_CF</a> | <a class=\"id\" href=\"#X86_EFLAGS_PF\">X86_EFLAGS_PF</a> |<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#X86_EFLAGS_AF\">X86_EFLAGS_AF</a> | <a class=\"id\" href=\"#X86_EFLAGS_ZF\">X86_EFLAGS_ZF</a> |<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#X86_EFLAGS_SF\">X86_EFLAGS_SF</a> | <a class=\"id\" href=\"#X86_EFLAGS_TF\">X86_EFLAGS_TF</a> |<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#X86_EFLAGS_DF\">X86_EFLAGS_DF</a> | <a class=\"id\" href=\"#X86_EFLAGS_OF\">X86_EFLAGS_OF</a> |<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#X86_EFLAGS_RF\">X86_EFLAGS_RF</a> | <a class=\"id\" href=\"#X86_EFLAGS_AC\">X86_EFLAGS_AC</a>))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Determines whether a value may be installed in a segment register.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#invalid_selector\">invalid_selector</a>(<a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#value\">value</a> != 0 && (<a class=\"id\" href=\"#value\">value</a> &amp; <a class=\"id\" href=\"#SEGMENT_RPL_MASK\">SEGMENT_RPL_MASK</a>) != <a class=\"id\" href=\"#USER_RPL\">USER_RPL</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FLAG_MASK\">FLAG_MASK</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#FLAG_MASK_32\">FLAG_MASK_32</a>", 
"", 
"static unsigned long *<a class=\"id\" href=\"#pt_regs_access\">pt_regs_access</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, unsigned long <a class=\"id\" href=\"#regno\">regno</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUILD_BUG_ON\">BUILD_BUG_ON</a>(<a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a>, <a class=\"id\" href=\"#bx\">bx</a>) != 0);", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#bx\">bx</a> + (<a class=\"id\" href=\"#regno\">regno</a> >> 2);", 
"}", 
"", 
"static <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#get_segment_reg\">get_segment_reg</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>, unsigned long <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Returning the value truncates it to 16 bits.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#retval\">retval</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> != <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user_regs_struct\">user_regs_struct</a>, <a class=\"id\" href=\"#gs\">gs</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = *<a class=\"id\" href=\"#pt_regs_access\">pt_regs_access</a>(<a class=\"id\" href=\"#task_pt_regs\">task_pt_regs</a>(<a class=\"id\" href=\"#task\">task</a>), <a class=\"id\" href=\"#offset\">offset</a>);", 
"<span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#task\">task</a> == <a class=\"id\" href=\"#current\">current</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#get_user_gs\">get_user_gs</a>(<a class=\"id\" href=\"#task_pt_regs\">task_pt_regs</a>(<a class=\"id\" href=\"#task\">task</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#task_user_gs\">task_user_gs</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#set_segment_reg\">set_segment_reg</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The value argument was already truncated to 16 bits.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#invalid_selector\">invalid_selector</a>(<a class=\"id\" href=\"#value\">value</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For %cs and %ss we cannot permit a null selector.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We can permit a bogus selector as long as it has USER_RPL.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Null selectors are fine for other segment registers, but</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we will never get back to user mode with invalid %cs or %ss</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and will take the trap in iret instead.  Much code relies</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * on user_mode() to distinguish a user trap frame (which can</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * safely use invalid selectors) from a kernel trap frame.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#offset\">offset</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user_regs_struct\">user_regs_struct</a>, <a class=\"id\" href=\"#cs\">cs</a>):", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user_regs_struct\">user_regs_struct</a>, <a class=\"id\" href=\"#ss\">ss</a>):", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#value\">value</a> == 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#pt_regs_access\">pt_regs_access</a>(<a class=\"id\" href=\"#task_pt_regs\">task_pt_regs</a>(<a class=\"id\" href=\"#task\">task</a>), <a class=\"id\" href=\"#offset\">offset</a>) = <a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user_regs_struct\">user_regs_struct</a>, <a class=\"id\" href=\"#gs\">gs</a>):", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#task\">task</a> == <a class=\"id\" href=\"#current\">current</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_user_gs\">set_user_gs</a>(<a class=\"id\" href=\"#task_pt_regs\">task_pt_regs</a>(<a class=\"id\" href=\"#task\">task</a>), <a class=\"id\" href=\"#value\">value</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_user_gs\">task_user_gs</a>(<a class=\"id\" href=\"#task\">task</a>) = <a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#else  <span class=\"comment\">/* CONFIG_X86_64 */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FLAG_MASK\">FLAG_MASK</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#FLAG_MASK_32\">FLAG_MASK_32</a> | <a class=\"id\" href=\"#X86_EFLAGS_NT\">X86_EFLAGS_NT</a>)", 
"", 
"static unsigned long *<a class=\"id\" href=\"#pt_regs_access\">pt_regs_access</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>, unsigned long <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUILD_BUG_ON\">BUILD_BUG_ON</a>(<a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a>, <a class=\"id\" href=\"#r15\">r15</a>) != 0);", 
"<span class=\"ts\"/>return &amp;<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#r15\">r15</a> + (<a class=\"id\" href=\"#offset\">offset</a> / sizeof(<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#r15\">r15</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#get_segment_reg\">get_segment_reg</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>, unsigned long <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Returning the value truncates it to 16 bits.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#seg\">seg</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#offset\">offset</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user_regs_struct\">user_regs_struct</a>, <a class=\"id\" href=\"#fs\">fs</a>):", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#task\">task</a> == <a class=\"id\" href=\"#current\">current</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Older gas can't assemble movq %?s,%r?? */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a>(\"movl %%fs,%0\" : \"=r\" (<a class=\"id\" href=\"#seg\">seg</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#seg\">seg</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#fsindex\">fsindex</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user_regs_struct\">user_regs_struct</a>, <a class=\"id\" href=\"#gs\">gs</a>):", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#task\">task</a> == <a class=\"id\" href=\"#current\">current</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a>(\"movl %%gs,%0\" : \"=r\" (<a class=\"id\" href=\"#seg\">seg</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#seg\">seg</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#gsindex\">gsindex</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user_regs_struct\">user_regs_struct</a>, <a class=\"id\" href=\"#ds\">ds</a>):", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#task\">task</a> == <a class=\"id\" href=\"#current\">current</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a>(\"movl %%ds,%0\" : \"=r\" (<a class=\"id\" href=\"#seg\">seg</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#seg\">seg</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#ds\">ds</a>;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user_regs_struct\">user_regs_struct</a>, <a class=\"id\" href=\"#es\">es</a>):", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#task\">task</a> == <a class=\"id\" href=\"#current\">current</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a>(\"movl %%es,%0\" : \"=r\" (<a class=\"id\" href=\"#seg\">seg</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#seg\">seg</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#es\">es</a>;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user_regs_struct\">user_regs_struct</a>, <a class=\"id\" href=\"#cs\">cs</a>):", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user_regs_struct\">user_regs_struct</a>, <a class=\"id\" href=\"#ss\">ss</a>):", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return *<a class=\"id\" href=\"#pt_regs_access\">pt_regs_access</a>(<a class=\"id\" href=\"#task_pt_regs\">task_pt_regs</a>(<a class=\"id\" href=\"#task\">task</a>), <a class=\"id\" href=\"#offset\">offset</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#set_segment_reg\">set_segment_reg</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The value argument was already truncated to 16 bits.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#invalid_selector\">invalid_selector</a>(<a class=\"id\" href=\"#value\">value</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#offset\">offset</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user_regs_struct\">user_regs_struct</a>,<a class=\"id\" href=\"#fs\">fs</a>):", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If this is setting fs as for normal 64-bit use but</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * setting fs_base has implicitly changed it, leave it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#value\">value</a> == <a class=\"id\" href=\"#FS_TLS_SEL\">FS_TLS_SEL</a> && <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#fsindex\">fsindex</a> == 0 &&", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#fs\">fs</a> != 0) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#value\">value</a> == 0 && <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#fsindex\">fsindex</a> == <a class=\"id\" href=\"#FS_TLS_SEL\">FS_TLS_SEL</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#fs\">fs</a> == 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#fsindex\">fsindex</a> = <a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#task\">task</a> == <a class=\"id\" href=\"#current\">current</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loadsegment\">loadsegment</a>(<a class=\"id\" href=\"#fs\">fs</a>, <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#fsindex\">fsindex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user_regs_struct\">user_regs_struct</a>,<a class=\"id\" href=\"#gs\">gs</a>):", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If this is setting gs as for normal 64-bit use but</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * setting gs_base has implicitly changed it, leave it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#value\">value</a> == <a class=\"id\" href=\"#GS_TLS_SEL\">GS_TLS_SEL</a> && <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#gsindex\">gsindex</a> == 0 &&", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#gs\">gs</a> != 0) ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#value\">value</a> == 0 && <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#gsindex\">gsindex</a> == <a class=\"id\" href=\"#GS_TLS_SEL\">GS_TLS_SEL</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#gs\">gs</a> == 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#gsindex\">gsindex</a> = <a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#task\">task</a> == <a class=\"id\" href=\"#current\">current</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#load_gs_index\">load_gs_index</a>(<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#gsindex\">gsindex</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user_regs_struct\">user_regs_struct</a>,<a class=\"id\" href=\"#ds\">ds</a>):", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#ds\">ds</a> = <a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#task\">task</a> == <a class=\"id\" href=\"#current\">current</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loadsegment\">loadsegment</a>(<a class=\"id\" href=\"#ds\">ds</a>, <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#ds\">ds</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user_regs_struct\">user_regs_struct</a>,<a class=\"id\" href=\"#es\">es</a>):", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#es\">es</a> = <a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#task\">task</a> == <a class=\"id\" href=\"#current\">current</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loadsegment\">loadsegment</a>(<a class=\"id\" href=\"#es\">es</a>, <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#es\">es</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Can't actually change these in 64-bit mode.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user_regs_struct\">user_regs_struct</a>,<a class=\"id\" href=\"#cs\">cs</a>):", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#value\">value</a> == 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_IA32_EMULATION\">CONFIG_IA32_EMULATION</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#test_tsk_thread_flag\">test_tsk_thread_flag</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#TIF_IA32\">TIF_IA32</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_pt_regs\">task_pt_regs</a>(<a class=\"id\" href=\"#task\">task</a>)-><a class=\"id\" href=\"#cs\">cs</a> = <a class=\"id\" href=\"#value\">value</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user_regs_struct\">user_regs_struct</a>,<a class=\"id\" href=\"#ss\">ss</a>):", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#value\">value</a> == 0))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_IA32_EMULATION\">CONFIG_IA32_EMULATION</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#test_tsk_thread_flag\">test_tsk_thread_flag</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#TIF_IA32\">TIF_IA32</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_pt_regs\">task_pt_regs</a>(<a class=\"id\" href=\"#task\">task</a>)-><a class=\"id\" href=\"#ss\">ss</a> = <a class=\"id\" href=\"#value\">value</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* CONFIG_X86_32 */</span>", 
"", 
"static unsigned long <a class=\"id\" href=\"#get_flags\">get_flags</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#task_pt_regs\">task_pt_regs</a>(<a class=\"id\" href=\"#task\">task</a>)-><a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the debugger set TF, hide it from the readout.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_tsk_thread_flag\">test_tsk_thread_flag</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#TIF_FORCED_TF\">TIF_FORCED_TF</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> &= ~<a class=\"id\" href=\"#X86_EFLAGS_TF\">X86_EFLAGS_TF</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#set_flags\">set_flags</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>, unsigned long <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a> = <a class=\"id\" href=\"#task_pt_regs\">task_pt_regs</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the user value contains TF, mark that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it was not \"us\" (the debugger) that set it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If not, make sure it stays set if we had.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#value\">value</a> &amp; <a class=\"id\" href=\"#X86_EFLAGS_TF\">X86_EFLAGS_TF</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_tsk_thread_flag\">clear_tsk_thread_flag</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#TIF_FORCED_TF\">TIF_FORCED_TF</a>);", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#test_tsk_thread_flag\">test_tsk_thread_flag</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#TIF_FORCED_TF\">TIF_FORCED_TF</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> |= <a class=\"id\" href=\"#X86_EFLAGS_TF\">X86_EFLAGS_TF</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#flags\">flags</a> = (<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; ~<a class=\"id\" href=\"#FLAG_MASK\">FLAG_MASK</a>) | (<a class=\"id\" href=\"#value\">value</a> &amp; <a class=\"id\" href=\"#FLAG_MASK\">FLAG_MASK</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#putreg\">putreg</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#child\">child</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  unsigned long <a class=\"id\" href=\"#offset\">offset</a>, unsigned long <a class=\"id\" href=\"#value\">value</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#offset\">offset</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user_regs_struct\">user_regs_struct</a>, <a class=\"id\" href=\"#cs\">cs</a>):", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user_regs_struct\">user_regs_struct</a>, <a class=\"id\" href=\"#ds\">ds</a>):", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user_regs_struct\">user_regs_struct</a>, <a class=\"id\" href=\"#es\">es</a>):", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user_regs_struct\">user_regs_struct</a>, <a class=\"id\" href=\"#fs\">fs</a>):", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user_regs_struct\">user_regs_struct</a>, <a class=\"id\" href=\"#gs\">gs</a>):", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user_regs_struct\">user_regs_struct</a>, <a class=\"id\" href=\"#ss\">ss</a>):", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#set_segment_reg\">set_segment_reg</a>(<a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#offset\">offset</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user_regs_struct\">user_regs_struct</a>, <a class=\"id\" href=\"#flags\">flags</a>):", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#set_flags\">set_flags</a>(<a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user_regs_struct\">user_regs_struct</a>,<a class=\"id\" href=\"#fs_base\">fs_base</a>):", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#value\">value</a> >= <a class=\"id\" href=\"#TASK_SIZE_OF\">TASK_SIZE_OF</a>(<a class=\"id\" href=\"#child\">child</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * When changing the segment base, use do_arch_prctl</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to set either thread.fs or thread.fsindex and the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * corresponding GDT slot.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#fs\">fs</a> != <a class=\"id\" href=\"#value\">value</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#do_arch_prctl\">do_arch_prctl</a>(<a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#ARCH_SET_FS\">ARCH_SET_FS</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user_regs_struct\">user_regs_struct</a>,<a class=\"id\" href=\"#gs_base\">gs_base</a>):", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Exactly the same here as the %fs handling above.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#value\">value</a> >= <a class=\"id\" href=\"#TASK_SIZE_OF\">TASK_SIZE_OF</a>(<a class=\"id\" href=\"#child\">child</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#child\">child</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#gs\">gs</a> != <a class=\"id\" href=\"#value\">value</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#do_arch_prctl\">do_arch_prctl</a>(<a class=\"id\" href=\"#child\">child</a>, <a class=\"id\" href=\"#ARCH_SET_GS\">ARCH_SET_GS</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#pt_regs_access\">pt_regs_access</a>(<a class=\"id\" href=\"#task_pt_regs\">task_pt_regs</a>(<a class=\"id\" href=\"#child\">child</a>), <a class=\"id\" href=\"#offset\">offset</a>) = <a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static unsigned long <a class=\"id\" href=\"#getreg\">getreg</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>, unsigned long <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#offset\">offset</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user_regs_struct\">user_regs_struct</a>, <a class=\"id\" href=\"#cs\">cs</a>):", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user_regs_struct\">user_regs_struct</a>, <a class=\"id\" href=\"#ds\">ds</a>):", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user_regs_struct\">user_regs_struct</a>, <a class=\"id\" href=\"#es\">es</a>):", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user_regs_struct\">user_regs_struct</a>, <a class=\"id\" href=\"#fs\">fs</a>):", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user_regs_struct\">user_regs_struct</a>, <a class=\"id\" href=\"#gs\">gs</a>):", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user_regs_struct\">user_regs_struct</a>, <a class=\"id\" href=\"#ss\">ss</a>):", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#get_segment_reg\">get_segment_reg</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#offset\">offset</a>);", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user_regs_struct\">user_regs_struct</a>, <a class=\"id\" href=\"#flags\">flags</a>):", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#get_flags\">get_flags</a>(<a class=\"id\" href=\"#task\">task</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user_regs_struct\">user_regs_struct</a>, <a class=\"id\" href=\"#fs_base\">fs_base</a>): {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * do_arch_prctl may have used a GDT slot instead of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the MSR.  To userland, it appears the same either</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * way, except the %fs segment selector might not be 0.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#seg\">seg</a> = <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#fsindex\">fsindex</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#fs\">fs</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#fs\">fs</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#task\">task</a> == <a class=\"id\" href=\"#current\">current</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a>(\"movl %%fs,%0\" : \"=r\" (<a class=\"id\" href=\"#seg\">seg</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#seg\">seg</a> != <a class=\"id\" href=\"#FS_TLS_SEL\">FS_TLS_SEL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#get_desc_base\">get_desc_base</a>(&amp;<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#tls_array\">tls_array</a>[<a class=\"id\" href=\"#FS_TLS\">FS_TLS</a>]);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#user_regs_struct\">user_regs_struct</a>, <a class=\"id\" href=\"#gs_base\">gs_base</a>): {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Exactly the same here as the %fs handling above.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#seg\">seg</a> = <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#gsindex\">gsindex</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#gs\">gs</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#gs\">gs</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#task\">task</a> == <a class=\"id\" href=\"#current\">current</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a>(\"movl %%gs,%0\" : \"=r\" (<a class=\"id\" href=\"#seg\">seg</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#seg\">seg</a> != <a class=\"id\" href=\"#GS_TLS_SEL\">GS_TLS_SEL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#get_desc_base\">get_desc_base</a>(&amp;<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#thread\">thread</a>.<a class=\"id\" href=\"#tls_array\">tls_array</a>[<a class=\"id\" href=\"#GS_TLS\">GS_TLS</a>]);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return *<a class=\"id\" href=\"#pt_regs_access\">pt_regs_access</a>(<a class=\"id\" href=\"#task_pt_regs\">task_pt_regs</a>(<a class=\"id\" href=\"#task\">task</a>), <a class=\"id\" href=\"#offset\">offset</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#genregs_get\">genregs_get</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#target\">target</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       const struct <a class=\"id\" href=\"#user_regset\">user_regset</a> *<a class=\"id\" href=\"#regset\">regset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       unsigned int <a class=\"id\" href=\"#pos\">pos</a>, unsigned int <a class=\"id\" href=\"#count\">count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       void *<a class=\"id\" href=\"#kbuf\">kbuf</a>, void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#ubuf\">ubuf</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kbuf\">kbuf</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#k\">k</a> = <a class=\"id\" href=\"#kbuf\">kbuf</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#count\">count</a> >= sizeof(*<a class=\"id\" href=\"#k\">k</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#k\">k</a>++ = <a class=\"id\" href=\"#getreg\">getreg</a>(<a class=\"id\" href=\"#target\">target</a>, <a class=\"id\" href=\"#pos\">pos</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> -= sizeof(*<a class=\"id\" href=\"#k\">k</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> += sizeof(*<a class=\"id\" href=\"#k\">k</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#u\">u</a> = <a class=\"id\" href=\"#ubuf\">ubuf</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#count\">count</a> >= sizeof(*<a class=\"id\" href=\"#u\">u</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#__put_user\">__put_user</a>(<a class=\"id\" href=\"#getreg\">getreg</a>(<a class=\"id\" href=\"#target\">target</a>, <a class=\"id\" href=\"#pos\">pos</a>), <a class=\"id\" href=\"#u\">u</a>++))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> -= sizeof(*<a class=\"id\" href=\"#u\">u</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pos\">pos</a> += sizeof(*<a class=\"id\" href=\"#u\">u</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
];
xr_frag_insert('l/22/3e4e7fb804daf0e3ede24792790e210655aeec.xr', __xr_tmp);
