var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#elf_ppnt\">elf_ppnt</a>-><a class=\"id\" href=\"#p_filesz\">p_filesz</a> &gt; <a class=\"id\" href=\"#PATH_MAX\">PATH_MAX</a> || ", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#elf_ppnt\">elf_ppnt</a>-><a class=\"id\" href=\"#p_filesz\">p_filesz</a> &lt; 2)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_ph\">out_free_ph</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#elf_interpreter\">elf_interpreter</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#elf_ppnt\">elf_ppnt</a>-><a class=\"id\" href=\"#p_filesz\">p_filesz</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#elf_interpreter\">elf_interpreter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_ph\">out_free_ph</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#kernel_read\">kernel_read</a>(<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#elf_ppnt\">elf_ppnt</a>-><a class=\"id\" href=\"#p_offset\">p_offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#elf_interpreter\">elf_interpreter</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#elf_ppnt\">elf_ppnt</a>-><a class=\"id\" href=\"#p_filesz\">p_filesz</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> != <a class=\"id\" href=\"#elf_ppnt\">elf_ppnt</a>-><a class=\"id\" href=\"#p_filesz\">p_filesz</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_interp\">out_free_interp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* make sure path is NULL terminated */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#ENOEXEC\">ENOEXEC</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#elf_interpreter\">elf_interpreter</a>[<a class=\"id\" href=\"#elf_ppnt\">elf_ppnt</a>-><a class=\"id\" href=\"#p_filesz\">p_filesz</a> - 1] != '\\0')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_interp\">out_free_interp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#interpreter\">interpreter</a> = <a class=\"id\" href=\"#open_exec\">open_exec</a>(<a class=\"id\" href=\"#elf_interpreter\">elf_interpreter</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#interpreter\">interpreter</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#interpreter\">interpreter</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_interp\">out_free_interp</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If the binary is not readable then enforce</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * mm-&gt;dumpable = 0 regardless of the interpreter's</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * permissions.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#file_permission\">file_permission</a>(<a class=\"id\" href=\"#interpreter\">interpreter</a>, <a class=\"id\" href=\"#MAY_READ\">MAY_READ</a>) &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#interp_flags\">interp_flags</a> |= <a class=\"id\" href=\"#BINPRM_FLAGS_ENFORCE_NONDUMP\">BINPRM_FLAGS_ENFORCE_NONDUMP</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#kernel_read\">kernel_read</a>(<a class=\"id\" href=\"#interpreter\">interpreter</a>, 0, <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#buf\">buf</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#BINPRM_BUF_SIZE\">BINPRM_BUF_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> != <a class=\"id\" href=\"#BINPRM_BUF_SIZE\">BINPRM_BUF_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_dentry\">out_free_dentry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Get the exec headers */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loc\">loc</a>-><a class=\"id\" href=\"#interp_elf_ex\">interp_elf_ex</a> = *((struct <a class=\"id\" href=\"#elfhdr\">elfhdr</a> *)<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#elf_ppnt\">elf_ppnt</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf_ppnt\">elf_ppnt</a> = <a class=\"id\" href=\"#elf_phdata\">elf_phdata</a>;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#loc\">loc</a>-><a class=\"id\" href=\"#elf_ex\">elf_ex</a>.<a class=\"id\" href=\"#e_phnum\">e_phnum</a>; <a class=\"id\" href=\"#i\">i</a>++, <a class=\"id\" href=\"#elf_ppnt\">elf_ppnt</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#elf_ppnt\">elf_ppnt</a>-><a class=\"id\" href=\"#p_type\">p_type</a> == <a class=\"id\" href=\"#PT_GNU_STACK\">PT_GNU_STACK</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#elf_ppnt\">elf_ppnt</a>-><a class=\"id\" href=\"#p_flags\">p_flags</a> &amp; <a class=\"id\" href=\"#PF_X\">PF_X</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#executable_stack\">executable_stack</a> = <a class=\"id\" href=\"#EXSTACK_ENABLE_X\">EXSTACK_ENABLE_X</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#executable_stack\">executable_stack</a> = <a class=\"id\" href=\"#EXSTACK_DISABLE_X\">EXSTACK_DISABLE_X</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Some simple consistency checks for the interpreter */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#elf_interpreter\">elf_interpreter</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#ELIBBAD\">ELIBBAD</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Not an ELF interpreter */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#memcmp\">memcmp</a>(<a class=\"id\" href=\"#loc\">loc</a>-><a class=\"id\" href=\"#interp_elf_ex\">interp_elf_ex</a>.<a class=\"id\" href=\"#e_ident\">e_ident</a>, <a class=\"id\" href=\"#ELFMAG\">ELFMAG</a>, <a class=\"id\" href=\"#SELFMAG\">SELFMAG</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_dentry\">out_free_dentry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Verify the interpreter has a valid arch */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#elf_check_arch\">elf_check_arch</a>(&amp;<a class=\"id\" href=\"#loc\">loc</a>-><a class=\"id\" href=\"#interp_elf_ex\">interp_elf_ex</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_dentry\">out_free_dentry</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Flush all traces of the currently running executable */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#flush_old_exec\">flush_old_exec</a>(<a class=\"id\" href=\"#bprm\">bprm</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_dentry\">out_free_dentry</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* OK, This is the point of no return */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#PF_FORKNOEXEC\">PF_FORKNOEXEC</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#def_flags\">def_flags</a> = <a class=\"id\" href=\"#def_flags\">def_flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Do this immediately, since STACK_TOP as used in setup_arg_pages</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   may depend on the personality.  */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SET_PERSONALITY\">SET_PERSONALITY</a>(<a class=\"id\" href=\"#loc\">loc</a>-><a class=\"id\" href=\"#elf_ex\">elf_ex</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#elf_read_implies_exec\">elf_read_implies_exec</a>(<a class=\"id\" href=\"#loc\">loc</a>-><a class=\"id\" href=\"#elf_ex\">elf_ex</a>, <a class=\"id\" href=\"#executable_stack\">executable_stack</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#personality\">personality</a> |= <a class=\"id\" href=\"#READ_IMPLIES_EXEC\">READ_IMPLIES_EXEC</a>;", 
"", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#personality\">personality</a> &amp; <a class=\"id\" href=\"#ADDR_NO_RANDOMIZE\">ADDR_NO_RANDOMIZE</a>) && <a class=\"id\" href=\"#randomize_va_space\">randomize_va_space</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#PF_RANDOMIZE\">PF_RANDOMIZE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#setup_new_exec\">setup_new_exec</a>(<a class=\"id\" href=\"#bprm\">bprm</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Do this so that we can load the interpreter, if need be.  We will</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   change some of these later */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#free_area_cache\">free_area_cache</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_base\">mmap_base</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#cached_hole_size\">cached_hole_size</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#setup_arg_pages\">setup_arg_pages</a>(<a class=\"id\" href=\"#bprm\">bprm</a>, <a class=\"id\" href=\"#randomize_stack_top\">randomize_stack_top</a>(<a class=\"id\" href=\"#STACK_TOP\">STACK_TOP</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#executable_stack\">executable_stack</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#send_sig\">send_sig</a>(<a class=\"id\" href=\"#SIGKILL\">SIGKILL</a>, <a class=\"id\" href=\"#current\">current</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_dentry\">out_free_dentry</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#start_stack\">start_stack</a> = <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Now we do a little grungy work by mmapping the ELF image into</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   the correct location in memory. */</span>", 
"<span class=\"ts\"/>for(<a class=\"id\" href=\"#i\">i</a> = 0, <a class=\"id\" href=\"#elf_ppnt\">elf_ppnt</a> = <a class=\"id\" href=\"#elf_phdata\">elf_phdata</a>;", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#loc\">loc</a>-><a class=\"id\" href=\"#elf_ex\">elf_ex</a>.<a class=\"id\" href=\"#e_phnum\">e_phnum</a>; <a class=\"id\" href=\"#i\">i</a>++, <a class=\"id\" href=\"#elf_ppnt\">elf_ppnt</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#elf_prot\">elf_prot</a> = 0, <a class=\"id\" href=\"#elf_flags\">elf_flags</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#k\">k</a>, <a class=\"id\" href=\"#vaddr\">vaddr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#elf_ppnt\">elf_ppnt</a>-><a class=\"id\" href=\"#p_type\">p_type</a> != <a class=\"id\" href=\"#PT_LOAD\">PT_LOAD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a> (<a class=\"id\" href=\"#elf_brk\">elf_brk</a> &gt; <a class=\"id\" href=\"#elf_bss\">elf_bss</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nbyte\">nbyte</a>;", 
"<span class=\"ts\"/>            ", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* There was a PT_LOAD segment with p_memsz &gt; p_filesz</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   before this one. Map anonymous pages, if needed,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   and clear the area.  */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#set_brk\">set_brk</a> (<a class=\"id\" href=\"#elf_bss\">elf_bss</a> + <a class=\"id\" href=\"#load_bias\">load_bias</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#elf_brk\">elf_brk</a> + <a class=\"id\" href=\"#load_bias\">load_bias</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#send_sig\">send_sig</a>(<a class=\"id\" href=\"#SIGKILL\">SIGKILL</a>, <a class=\"id\" href=\"#current\">current</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_dentry\">out_free_dentry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nbyte\">nbyte</a> = <a class=\"id\" href=\"#ELF_PAGEOFFSET\">ELF_PAGEOFFSET</a>(<a class=\"id\" href=\"#elf_bss\">elf_bss</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nbyte\">nbyte</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nbyte\">nbyte</a> = <a class=\"id\" href=\"#ELF_MIN_ALIGN\">ELF_MIN_ALIGN</a> - <a class=\"id\" href=\"#nbyte\">nbyte</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nbyte\">nbyte</a> &gt; <a class=\"id\" href=\"#elf_brk\">elf_brk</a> - <a class=\"id\" href=\"#elf_bss\">elf_bss</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nbyte\">nbyte</a> = <a class=\"id\" href=\"#elf_brk\">elf_brk</a> - <a class=\"id\" href=\"#elf_bss\">elf_bss</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#clear_user\">clear_user</a>((void <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#elf_bss\">elf_bss</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#load_bias\">load_bias</a>, <a class=\"id\" href=\"#nbyte\">nbyte</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * This bss-zeroing can fail if the ELF</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * file specifies odd protections. So</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * we don't check the return value</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#elf_ppnt\">elf_ppnt</a>-><a class=\"id\" href=\"#p_flags\">p_flags</a> &amp; <a class=\"id\" href=\"#PF_R\">PF_R</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#elf_prot\">elf_prot</a> |= <a class=\"id\" href=\"#PROT_READ\">PROT_READ</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#elf_ppnt\">elf_ppnt</a>-><a class=\"id\" href=\"#p_flags\">p_flags</a> &amp; <a class=\"id\" href=\"#PF_W\">PF_W</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#elf_prot\">elf_prot</a> |= <a class=\"id\" href=\"#PROT_WRITE\">PROT_WRITE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#elf_ppnt\">elf_ppnt</a>-><a class=\"id\" href=\"#p_flags\">p_flags</a> &amp; <a class=\"id\" href=\"#PF_X\">PF_X</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#elf_prot\">elf_prot</a> |= <a class=\"id\" href=\"#PROT_EXEC\">PROT_EXEC</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#elf_flags\">elf_flags</a> = <a class=\"id\" href=\"#MAP_PRIVATE\">MAP_PRIVATE</a> | <a class=\"id\" href=\"#MAP_DENYWRITE\">MAP_DENYWRITE</a> | <a class=\"id\" href=\"#MAP_EXECUTABLE\">MAP_EXECUTABLE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#vaddr\">vaddr</a> = <a class=\"id\" href=\"#elf_ppnt\">elf_ppnt</a>-><a class=\"id\" href=\"#p_vaddr\">p_vaddr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#loc\">loc</a>-><a class=\"id\" href=\"#elf_ex\">elf_ex</a>.<a class=\"id\" href=\"#e_type\">e_type</a> == <a class=\"id\" href=\"#ET_EXEC\">ET_EXEC</a> || <a class=\"id\" href=\"#load_addr_set\">load_addr_set</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#elf_flags\">elf_flags</a> |= <a class=\"id\" href=\"#MAP_FIXED\">MAP_FIXED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#loc\">loc</a>-><a class=\"id\" href=\"#elf_ex\">elf_ex</a>.<a class=\"id\" href=\"#e_type\">e_type</a> == <a class=\"id\" href=\"#ET_DYN\">ET_DYN</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Try and get dynamic programs out of the way of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * default mmap base, as well as whatever program they</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * might try to exec.  This is because the brk will</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * follow the loader, and is not movable.  */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86\">CONFIG_X86</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#load_bias\">load_bias</a> = 0;", 
"#else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#load_bias\">load_bias</a> = <a class=\"id\" href=\"#ELF_PAGESTART\">ELF_PAGESTART</a>(<a class=\"id\" href=\"#ELF_ET_DYN_BASE\">ELF_ET_DYN_BASE</a> - <a class=\"id\" href=\"#vaddr\">vaddr</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#elf_map\">elf_map</a>(<a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#load_bias\">load_bias</a> + <a class=\"id\" href=\"#vaddr\">vaddr</a>, <a class=\"id\" href=\"#elf_ppnt\">elf_ppnt</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#elf_prot\">elf_prot</a>, <a class=\"id\" href=\"#elf_flags\">elf_flags</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#BAD_ADDR\">BAD_ADDR</a>(<a class=\"id\" href=\"#error\">error</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#send_sig\">send_sig</a>(<a class=\"id\" href=\"#SIGKILL\">SIGKILL</a>, <a class=\"id\" href=\"#current\">current</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>((void *)<a class=\"id\" href=\"#error\">error</a>) ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>((void*)<a class=\"id\" href=\"#error\">error</a>) : -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_dentry\">out_free_dentry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#load_addr_set\">load_addr_set</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#load_addr_set\">load_addr_set</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#load_addr\">load_addr</a> = (<a class=\"id\" href=\"#elf_ppnt\">elf_ppnt</a>-><a class=\"id\" href=\"#p_vaddr\">p_vaddr</a> - <a class=\"id\" href=\"#elf_ppnt\">elf_ppnt</a>-><a class=\"id\" href=\"#p_offset\">p_offset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#loc\">loc</a>-><a class=\"id\" href=\"#elf_ex\">elf_ex</a>.<a class=\"id\" href=\"#e_type\">e_type</a> == <a class=\"id\" href=\"#ET_DYN\">ET_DYN</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#load_bias\">load_bias</a> += <a class=\"id\" href=\"#error\">error</a> -", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>             <a class=\"id\" href=\"#ELF_PAGESTART\">ELF_PAGESTART</a>(<a class=\"id\" href=\"#load_bias\">load_bias</a> + <a class=\"id\" href=\"#vaddr\">vaddr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#load_addr\">load_addr</a> += <a class=\"id\" href=\"#load_bias\">load_bias</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reloc_func_desc\">reloc_func_desc</a> = <a class=\"id\" href=\"#load_bias\">load_bias</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k\">k</a> = <a class=\"id\" href=\"#elf_ppnt\">elf_ppnt</a>-><a class=\"id\" href=\"#p_vaddr\">p_vaddr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#k\">k</a> &lt; <a class=\"id\" href=\"#start_code\">start_code</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_code\">start_code</a> = <a class=\"id\" href=\"#k\">k</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#start_data\">start_data</a> &lt; <a class=\"id\" href=\"#k\">k</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_data\">start_data</a> = <a class=\"id\" href=\"#k\">k</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Check to see if the section's size will overflow the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * allowed task size. Note that p_filesz must always be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * &lt;= p_memsz so it is only necessary to check p_memsz.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#BAD_ADDR\">BAD_ADDR</a>(<a class=\"id\" href=\"#k\">k</a>) || <a class=\"id\" href=\"#elf_ppnt\">elf_ppnt</a>-><a class=\"id\" href=\"#p_filesz\">p_filesz</a> &gt; <a class=\"id\" href=\"#elf_ppnt\">elf_ppnt</a>-><a class=\"id\" href=\"#p_memsz\">p_memsz</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#elf_ppnt\">elf_ppnt</a>-><a class=\"id\" href=\"#p_memsz\">p_memsz</a> &gt; <a class=\"id\" href=\"#TASK_SIZE\">TASK_SIZE</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#TASK_SIZE\">TASK_SIZE</a> - <a class=\"id\" href=\"#elf_ppnt\">elf_ppnt</a>-><a class=\"id\" href=\"#p_memsz\">p_memsz</a> &lt; <a class=\"id\" href=\"#k\">k</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* set_brk can never work. Avoid overflows. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#send_sig\">send_sig</a>(<a class=\"id\" href=\"#SIGKILL\">SIGKILL</a>, <a class=\"id\" href=\"#current\">current</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_dentry\">out_free_dentry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k\">k</a> = <a class=\"id\" href=\"#elf_ppnt\">elf_ppnt</a>-><a class=\"id\" href=\"#p_vaddr\">p_vaddr</a> + <a class=\"id\" href=\"#elf_ppnt\">elf_ppnt</a>-><a class=\"id\" href=\"#p_filesz\">p_filesz</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#k\">k</a> &gt; <a class=\"id\" href=\"#elf_bss\">elf_bss</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#elf_bss\">elf_bss</a> = <a class=\"id\" href=\"#k\">k</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#elf_ppnt\">elf_ppnt</a>-><a class=\"id\" href=\"#p_flags\">p_flags</a> &amp; <a class=\"id\" href=\"#PF_X\">PF_X</a>) && <a class=\"id\" href=\"#end_code\">end_code</a> &lt; <a class=\"id\" href=\"#k\">k</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end_code\">end_code</a> = <a class=\"id\" href=\"#k\">k</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#end_data\">end_data</a> &lt; <a class=\"id\" href=\"#k\">k</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end_data\">end_data</a> = <a class=\"id\" href=\"#k\">k</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k\">k</a> = <a class=\"id\" href=\"#elf_ppnt\">elf_ppnt</a>-><a class=\"id\" href=\"#p_vaddr\">p_vaddr</a> + <a class=\"id\" href=\"#elf_ppnt\">elf_ppnt</a>-><a class=\"id\" href=\"#p_memsz\">p_memsz</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#k\">k</a> &gt; <a class=\"id\" href=\"#elf_brk\">elf_brk</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#elf_brk\">elf_brk</a> = <a class=\"id\" href=\"#k\">k</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loc\">loc</a>-><a class=\"id\" href=\"#elf_ex\">elf_ex</a>.<a class=\"id\" href=\"#e_entry\">e_entry</a> += <a class=\"id\" href=\"#load_bias\">load_bias</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf_bss\">elf_bss</a> += <a class=\"id\" href=\"#load_bias\">load_bias</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf_brk\">elf_brk</a> += <a class=\"id\" href=\"#load_bias\">load_bias</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start_code\">start_code</a> += <a class=\"id\" href=\"#load_bias\">load_bias</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end_code\">end_code</a> += <a class=\"id\" href=\"#load_bias\">load_bias</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start_data\">start_data</a> += <a class=\"id\" href=\"#load_bias\">load_bias</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end_data\">end_data</a> += <a class=\"id\" href=\"#load_bias\">load_bias</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Calling set_brk effectively mmaps the pages that we need</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for the bss and break sections.  We must do this before</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mapping in the interpreter, to make sure it doesn't wind</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * up getting placed where the bss needs to go.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#set_brk\">set_brk</a>(<a class=\"id\" href=\"#elf_bss\">elf_bss</a>, <a class=\"id\" href=\"#elf_brk\">elf_brk</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#send_sig\">send_sig</a>(<a class=\"id\" href=\"#SIGKILL\">SIGKILL</a>, <a class=\"id\" href=\"#current\">current</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_dentry\">out_free_dentry</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#elf_bss\">elf_bss</a> != <a class=\"id\" href=\"#elf_brk\">elf_brk</a>) && <a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#padzero\">padzero</a>(<a class=\"id\" href=\"#elf_bss\">elf_bss</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#send_sig\">send_sig</a>(<a class=\"id\" href=\"#SIGSEGV\">SIGSEGV</a>, <a class=\"id\" href=\"#current\">current</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>; <span class=\"comment\">/* Nobody gets to see this, but.. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_dentry\">out_free_dentry</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#elf_interpreter\">elf_interpreter</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#uninitialized_var\">uninitialized_var</a>(<a class=\"id\" href=\"#interp_map_addr\">interp_map_addr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#elf_entry\">elf_entry</a> = <a class=\"id\" href=\"#load_elf_interp\">load_elf_interp</a>(&amp;<a class=\"id\" href=\"#loc\">loc</a>-><a class=\"id\" href=\"#interp_elf_ex\">interp_elf_ex</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#interpreter\">interpreter</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    &amp;<a class=\"id\" href=\"#interp_map_addr\">interp_map_addr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#load_bias\">load_bias</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>((void *)<a class=\"id\" href=\"#elf_entry\">elf_entry</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * load_elf_interp() returns relocation</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * adjustment</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#interp_load_addr\">interp_load_addr</a> = <a class=\"id\" href=\"#elf_entry\">elf_entry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#elf_entry\">elf_entry</a> += <a class=\"id\" href=\"#loc\">loc</a>-><a class=\"id\" href=\"#interp_elf_ex\">interp_elf_ex</a>.<a class=\"id\" href=\"#e_entry\">e_entry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#BAD_ADDR\">BAD_ADDR</a>(<a class=\"id\" href=\"#elf_entry\">elf_entry</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#force_sig\">force_sig</a>(<a class=\"id\" href=\"#SIGSEGV\">SIGSEGV</a>, <a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>((void *)<a class=\"id\" href=\"#elf_entry\">elf_entry</a>) ?", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(int)<a class=\"id\" href=\"#elf_entry\">elf_entry</a> : -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_dentry\">out_free_dentry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#reloc_func_desc\">reloc_func_desc</a> = <a class=\"id\" href=\"#interp_load_addr\">interp_load_addr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#allow_write_access\">allow_write_access</a>(<a class=\"id\" href=\"#interpreter\">interpreter</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fput\">fput</a>(<a class=\"id\" href=\"#interpreter\">interpreter</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#elf_interpreter\">elf_interpreter</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#elf_entry\">elf_entry</a> = <a class=\"id\" href=\"#loc\">loc</a>-><a class=\"id\" href=\"#elf_ex\">elf_ex</a>.<a class=\"id\" href=\"#e_entry\">e_entry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#BAD_ADDR\">BAD_ADDR</a>(<a class=\"id\" href=\"#elf_entry\">elf_entry</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#force_sig\">force_sig</a>(<a class=\"id\" href=\"#SIGSEGV\">SIGSEGV</a>, <a class=\"id\" href=\"#current\">current</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_dentry\">out_free_dentry</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#elf_phdata\">elf_phdata</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_binfmt\">set_binfmt</a>(&amp;<a class=\"id\" href=\"#elf_format\">elf_format</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#ARCH_HAS_SETUP_ADDITIONAL_PAGES\">ARCH_HAS_SETUP_ADDITIONAL_PAGES</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#arch_setup_additional_pages\">arch_setup_additional_pages</a>(<a class=\"id\" href=\"#bprm\">bprm</a>, !!<a class=\"id\" href=\"#elf_interpreter\">elf_interpreter</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#send_sig\">send_sig</a>(<a class=\"id\" href=\"#SIGKILL\">SIGKILL</a>, <a class=\"id\" href=\"#current\">current</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* ARCH_HAS_SETUP_ADDITIONAL_PAGES */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#install_exec_creds\">install_exec_creds</a>(<a class=\"id\" href=\"#bprm\">bprm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#PF_FORKNOEXEC\">PF_FORKNOEXEC</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#create_elf_tables\">create_elf_tables</a>(<a class=\"id\" href=\"#bprm\">bprm</a>, &amp;<a class=\"id\" href=\"#loc\">loc</a>-><a class=\"id\" href=\"#elf_ex\">elf_ex</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#load_addr\">load_addr</a>, <a class=\"id\" href=\"#interp_load_addr\">interp_load_addr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#send_sig\">send_sig</a>(<a class=\"id\" href=\"#SIGKILL\">SIGKILL</a>, <a class=\"id\" href=\"#current\">current</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* N.B. passed_fileno might not be initialized? */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#end_code\">end_code</a> = <a class=\"id\" href=\"#end_code\">end_code</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#start_code\">start_code</a> = <a class=\"id\" href=\"#start_code\">start_code</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#start_data\">start_data</a> = <a class=\"id\" href=\"#start_data\">start_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#end_data\">end_data</a> = <a class=\"id\" href=\"#end_data\">end_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#start_stack\">start_stack</a> = <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#p\">p</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#arch_randomize_brk\">arch_randomize_brk</a>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PF_RANDOMIZE\">PF_RANDOMIZE</a>) && (<a class=\"id\" href=\"#randomize_va_space\">randomize_va_space</a> &gt; 1))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#brk\">brk</a> = <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#start_brk\">start_brk</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#arch_randomize_brk\">arch_randomize_brk</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#personality\">personality</a> &amp; <a class=\"id\" href=\"#MMAP_PAGE_ZERO\">MMAP_PAGE_ZERO</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Why this, you ask???  Well SVr4 maps page 0 as read-only,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   and some applications \"depend\" upon this behavior.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   Since we do not have the power to recompile these, we</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   emulate the SVr4 behavior. Sigh. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#do_mmap\">do_mmap</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, 0, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, <a class=\"id\" href=\"#PROT_READ\">PROT_READ</a> | <a class=\"id\" href=\"#PROT_EXEC\">PROT_EXEC</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MAP_FIXED\">MAP_FIXED</a> | <a class=\"id\" href=\"#MAP_PRIVATE\">MAP_PRIVATE</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#ELF_PLAT_INIT\">ELF_PLAT_INIT</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The ABI may specify that certain registers be set up in special</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ways (on i386 %edx is the address of a DT_FINI function, for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * example.  In addition, it may also specify (eg, PowerPC64 ELF)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that the e_entry field is the address of the function descriptor</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * for the startup routine, rather than the address of the startup</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * routine itself.  This macro performs whatever initialization to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the regs structure is required as well as any relocations to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * function descriptor entries when executing dynamically links apps.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ELF_PLAT_INIT\">ELF_PLAT_INIT</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#reloc_func_desc\">reloc_func_desc</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start_thread\">start_thread</a>(<a class=\"id\" href=\"#regs\">regs</a>, <a class=\"id\" href=\"#elf_entry\">elf_entry</a>, <a class=\"id\" href=\"#bprm\">bprm</a>-><a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = 0;", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#loc\">loc</a>);", 
"<a class=\"id\" href=\"#out_ret\">out_ret</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* error cleanup */</span>", 
"<a class=\"id\" href=\"#out_free_dentry\">out_free_dentry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#allow_write_access\">allow_write_access</a>(<a class=\"id\" href=\"#interpreter\">interpreter</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#interpreter\">interpreter</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fput\">fput</a>(<a class=\"id\" href=\"#interpreter\">interpreter</a>);", 
"<a class=\"id\" href=\"#out_free_interp\">out_free_interp</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#elf_interpreter\">elf_interpreter</a>);", 
"<a class=\"id\" href=\"#out_free_ph\">out_free_ph</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#elf_phdata\">elf_phdata</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"}", 
"", 
"<span class=\"comment\">/* This is really simpleminded and specialized - we are loading an</span>", 
"<span class=\"comment\">   a.out library that is given an ELF header. */</span>", 
"static int <a class=\"id\" href=\"#load_elf_library\">load_elf_library</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#elf_phdr\">elf_phdr</a> *<a class=\"id\" href=\"#elf_phdata\">elf_phdata</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#elf_phdr\">elf_phdr</a> *<a class=\"id\" href=\"#eppnt\">eppnt</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#elf_bss\">elf_bss</a>, <a class=\"id\" href=\"#bss\">bss</a>, <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a>, <a class=\"id\" href=\"#error\">error</a>, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#elfhdr\">elfhdr</a> <a class=\"id\" href=\"#elf_ex\">elf_ex</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOEXEC\">ENOEXEC</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#kernel_read\">kernel_read</a>(<a class=\"id\" href=\"#file\">file</a>, 0, (char *)&amp;<a class=\"id\" href=\"#elf_ex\">elf_ex</a>, sizeof(<a class=\"id\" href=\"#elf_ex\">elf_ex</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> != sizeof(<a class=\"id\" href=\"#elf_ex\">elf_ex</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#memcmp\">memcmp</a>(<a class=\"id\" href=\"#elf_ex\">elf_ex</a>.<a class=\"id\" href=\"#e_ident\">e_ident</a>, <a class=\"id\" href=\"#ELFMAG\">ELFMAG</a>, <a class=\"id\" href=\"#SELFMAG\">SELFMAG</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* First of all, some simple consistency checks */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#elf_ex\">elf_ex</a>.<a class=\"id\" href=\"#e_type\">e_type</a> != <a class=\"id\" href=\"#ET_EXEC\">ET_EXEC</a> || <a class=\"id\" href=\"#elf_ex\">elf_ex</a>.<a class=\"id\" href=\"#e_phnum\">e_phnum</a> &gt; 2 ||", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#elf_check_arch\">elf_check_arch</a>(&amp;<a class=\"id\" href=\"#elf_ex\">elf_ex</a>) || !<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a> || !<a class=\"id\" href=\"#file\">file</a>-><a class=\"id\" href=\"#f_op\">f_op</a>-><a class=\"id\" href=\"#mmap\">mmap</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Now read in all of the header information */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#j\">j</a> = sizeof(struct <a class=\"id\" href=\"#elf_phdr\">elf_phdr</a>) * <a class=\"id\" href=\"#elf_ex\">elf_ex</a>.<a class=\"id\" href=\"#e_phnum\">e_phnum</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* j &lt; ELF_MIN_ALIGN because elf_ex.e_phnum &lt;= 2 */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf_phdata\">elf_phdata</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#elf_phdata\">elf_phdata</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#eppnt\">eppnt</a> = <a class=\"id\" href=\"#elf_phdata\">elf_phdata</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOEXEC\">ENOEXEC</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#kernel_read\">kernel_read</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#elf_ex\">elf_ex</a>.<a class=\"id\" href=\"#e_phoff\">e_phoff</a>, (char *)<a class=\"id\" href=\"#eppnt\">eppnt</a>, <a class=\"id\" href=\"#j\">j</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retval\">retval</a> != <a class=\"id\" href=\"#j\">j</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_ph\">out_free_ph</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#j\">j</a> = 0, <a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a>&lt;<a class=\"id\" href=\"#elf_ex\">elf_ex</a>.<a class=\"id\" href=\"#e_phnum\">e_phnum</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#eppnt\">eppnt</a> + <a class=\"id\" href=\"#i\">i</a>)-><a class=\"id\" href=\"#p_type\">p_type</a> == <a class=\"id\" href=\"#PT_LOAD\">PT_LOAD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#j\">j</a>++;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#j\">j</a> != 1)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_ph\">out_free_ph</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#eppnt\">eppnt</a>-><a class=\"id\" href=\"#p_type\">p_type</a> != <a class=\"id\" href=\"#PT_LOAD\">PT_LOAD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#eppnt\">eppnt</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Now use mmap to map the library into memory. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#do_mmap\">do_mmap</a>(<a class=\"id\" href=\"#file\">file</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ELF_PAGESTART\">ELF_PAGESTART</a>(<a class=\"id\" href=\"#eppnt\">eppnt</a>-><a class=\"id\" href=\"#p_vaddr\">p_vaddr</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#eppnt\">eppnt</a>-><a class=\"id\" href=\"#p_filesz\">p_filesz</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#ELF_PAGEOFFSET\">ELF_PAGEOFFSET</a>(<a class=\"id\" href=\"#eppnt\">eppnt</a>-><a class=\"id\" href=\"#p_vaddr\">p_vaddr</a>)),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PROT_READ\">PROT_READ</a> | <a class=\"id\" href=\"#PROT_WRITE\">PROT_WRITE</a> | <a class=\"id\" href=\"#PROT_EXEC\">PROT_EXEC</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#MAP_FIXED\">MAP_FIXED</a> | <a class=\"id\" href=\"#MAP_PRIVATE\">MAP_PRIVATE</a> | <a class=\"id\" href=\"#MAP_DENYWRITE\">MAP_DENYWRITE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#eppnt\">eppnt</a>-><a class=\"id\" href=\"#p_offset\">p_offset</a> -", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#ELF_PAGEOFFSET\">ELF_PAGEOFFSET</a>(<a class=\"id\" href=\"#eppnt\">eppnt</a>-><a class=\"id\" href=\"#p_vaddr\">p_vaddr</a>)));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a> != <a class=\"id\" href=\"#ELF_PAGESTART\">ELF_PAGESTART</a>(<a class=\"id\" href=\"#eppnt\">eppnt</a>-><a class=\"id\" href=\"#p_vaddr\">p_vaddr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_ph\">out_free_ph</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf_bss\">elf_bss</a> = <a class=\"id\" href=\"#eppnt\">eppnt</a>-><a class=\"id\" href=\"#p_vaddr\">p_vaddr</a> + <a class=\"id\" href=\"#eppnt\">eppnt</a>-><a class=\"id\" href=\"#p_filesz\">p_filesz</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#padzero\">padzero</a>(<a class=\"id\" href=\"#elf_bss\">elf_bss</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_ph\">out_free_ph</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#ELF_PAGESTART\">ELF_PAGESTART</a>(<a class=\"id\" href=\"#eppnt\">eppnt</a>-><a class=\"id\" href=\"#p_filesz\">p_filesz</a> + <a class=\"id\" href=\"#eppnt\">eppnt</a>-><a class=\"id\" href=\"#p_vaddr\">p_vaddr</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ELF_MIN_ALIGN\">ELF_MIN_ALIGN</a> - 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bss\">bss</a> = <a class=\"id\" href=\"#eppnt\">eppnt</a>-><a class=\"id\" href=\"#p_memsz\">p_memsz</a> + <a class=\"id\" href=\"#eppnt\">eppnt</a>-><a class=\"id\" href=\"#p_vaddr\">p_vaddr</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bss\">bss</a> &gt; <a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_brk\">do_brk</a>(<a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#bss\">bss</a> - <a class=\"id\" href=\"#len\">len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#mmap_sem\">mmap_sem</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = 0;", 
"", 
"<a class=\"id\" href=\"#out_free_ph\">out_free_ph</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#elf_phdata\">elf_phdata</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_ELF_CORE\">CONFIG_ELF_CORE</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ELF core dumper</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Modelled on fs/exec.c:aout_core_dump()</span>", 
"<span class=\"comment\"> * Jeremy Fitzhardinge &lt;jeremy@sw.oz.au&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Decide what to dump of a segment, part, all or none.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned long <a class=\"id\" href=\"#vma_dump_size\">vma_dump_size</a>(struct <a class=\"id\" href=\"#vm_area_struct\">vm_area_struct</a> *<a class=\"id\" href=\"#vma\">vma</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#mm_flags\">mm_flags</a>)", 
"{", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FILTER\">FILTER</a>(<a class=\"id\" href=\"#type\">type</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#mm_flags\">mm_flags</a> &amp; (1UL << <a class=\"id\" href=\"#MMF_DUMP_\">MMF_DUMP_</a>##<a class=\"id\" href=\"#type\">type</a>))", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The vma can be set up to tell us the answer directly.  */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_ALWAYSDUMP\">VM_ALWAYSDUMP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#whole\">whole</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Hugetlb memory check */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_HUGETLB\">VM_HUGETLB</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_SHARED\">VM_SHARED</a>) && <a class=\"id\" href=\"#FILTER\">FILTER</a>(<a class=\"id\" href=\"#HUGETLB_SHARED\">HUGETLB_SHARED</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#whole\">whole</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_SHARED\">VM_SHARED</a>) && <a class=\"id\" href=\"#FILTER\">FILTER</a>(<a class=\"id\" href=\"#HUGETLB_PRIVATE\">HUGETLB_PRIVATE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#whole\">whole</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Do not dump I/O mapped devices or special mappings */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; (<a class=\"id\" href=\"#VM_IO\">VM_IO</a> | <a class=\"id\" href=\"#VM_RESERVED\">VM_RESERVED</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* By default, dump shared memory if mapped from an anonymous file. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_SHARED\">VM_SHARED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a>-><a class=\"id\" href=\"#f_path\">f_path</a>.<a class=\"id\" href=\"#dentry\">dentry</a>-><a class=\"id\" href=\"#d_inode\">d_inode</a>-><a class=\"id\" href=\"#i_nlink\">i_nlink</a> == 0 ?", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#FILTER\">FILTER</a>(<a class=\"id\" href=\"#ANON_SHARED\">ANON_SHARED</a>) : <a class=\"id\" href=\"#FILTER\">FILTER</a>(<a class=\"id\" href=\"#MAPPED_SHARED\">MAPPED_SHARED</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#whole\">whole</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Dump segments that have been written to.  */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#anon_vma\">anon_vma</a> && <a class=\"id\" href=\"#FILTER\">FILTER</a>(<a class=\"id\" href=\"#ANON_PRIVATE\">ANON_PRIVATE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#whole\">whole</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_file\">vm_file</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#FILTER\">FILTER</a>(<a class=\"id\" href=\"#MAPPED_PRIVATE\">MAPPED_PRIVATE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#whole\">whole</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this looks like the beginning of a DSO or executable mapping,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * check for an ELF header.  If we find one, dump the first page to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * aid in determining what was mapped here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#FILTER\">FILTER</a>(<a class=\"id\" href=\"#ELF_HEADERS\">ELF_HEADERS</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_pgoff\">vm_pgoff</a> == 0 && (<a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_flags\">vm_flags</a> &amp; <a class=\"id\" href=\"#VM_READ\">VM_READ</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#header\">header</a> = (<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#__user\">__user</a> *) <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#word\">word</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mm_segment_t\">mm_segment_t</a> <a class=\"id\" href=\"#fs\">fs</a> = <a class=\"id\" href=\"#get_fs\">get_fs</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Doing it this way gets the constant folded by GCC.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>union {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#cmp\">cmp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#elfmag\">elfmag</a>[<a class=\"id\" href=\"#SELFMAG\">SELFMAG</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>} <a class=\"id\" href=\"#magic\">magic</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUILD_BUG_ON\">BUILD_BUG_ON</a>(<a class=\"id\" href=\"#SELFMAG\">SELFMAG</a> != sizeof <a class=\"id\" href=\"#word\">word</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#magic\">magic</a>.<a class=\"id\" href=\"#elfmag\">elfmag</a>[<a class=\"id\" href=\"#EI_MAG0\">EI_MAG0</a>] = <a class=\"id\" href=\"#ELFMAG0\">ELFMAG0</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#magic\">magic</a>.<a class=\"id\" href=\"#elfmag\">elfmag</a>[<a class=\"id\" href=\"#EI_MAG1\">EI_MAG1</a>] = <a class=\"id\" href=\"#ELFMAG1\">ELFMAG1</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#magic\">magic</a>.<a class=\"id\" href=\"#elfmag\">elfmag</a>[<a class=\"id\" href=\"#EI_MAG2\">EI_MAG2</a>] = <a class=\"id\" href=\"#ELFMAG2\">ELFMAG2</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#magic\">magic</a>.<a class=\"id\" href=\"#elfmag\">elfmag</a>[<a class=\"id\" href=\"#EI_MAG3\">EI_MAG3</a>] = <a class=\"id\" href=\"#ELFMAG3\">ELFMAG3</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Switch to the user \"segment\" for get_user(),</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * then put back what elf_core_dump() had in place.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_fs\">set_fs</a>(<a class=\"id\" href=\"#USER_DS\">USER_DS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#word\">word</a>, <a class=\"id\" href=\"#header\">header</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#word\">word</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_fs\">set_fs</a>(<a class=\"id\" href=\"#fs\">fs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#word\">word</a> == <a class=\"id\" href=\"#magic\">magic</a>.<a class=\"id\" href=\"#cmp\">cmp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>;", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#undef\">undef</a><span class=\"ts\"/><a class=\"id\" href=\"#FILTER\">FILTER</a>", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#whole\">whole</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_end\">vm_end</a> - <a class=\"id\" href=\"#vma\">vma</a>-><a class=\"id\" href=\"#vm_start\">vm_start</a>;", 
"}", 
"", 
"<span class=\"comment\">/* An ELF note in memory */</span>", 
"struct <a class=\"id\" href=\"#memelfnote\">memelfnote</a>", 
"{", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#datasz\">datasz</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a>;", 
"};", 
"", 
"static int <a class=\"id\" href=\"#notesize\">notesize</a>(struct <a class=\"id\" href=\"#memelfnote\">memelfnote</a> *<a class=\"id\" href=\"#en\">en</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#sz\">sz</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sz\">sz</a> = sizeof(struct <a class=\"id\" href=\"#elf_note\">elf_note</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sz\">sz</a> += <a class=\"id\" href=\"#roundup\">roundup</a>(<a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#en\">en</a>-><a class=\"id\" href=\"#name\">name</a>) + 1, 4);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sz\">sz</a> += <a class=\"id\" href=\"#roundup\">roundup</a>(<a class=\"id\" href=\"#en\">en</a>-><a class=\"id\" href=\"#datasz\">datasz</a>, 4);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sz\">sz</a>;", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DUMP_WRITE\">DUMP_WRITE</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#nr\">nr</a>, <a class=\"id\" href=\"#foffset\">foffset</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do { if (!<a class=\"id\" href=\"#dump_write\">dump_write</a>(<a class=\"id\" href=\"#file\">file</a>, (<a class=\"id\" href=\"#addr\">addr</a>), (<a class=\"id\" href=\"#nr\">nr</a>))) return 0; *<a class=\"id\" href=\"#foffset\">foffset</a> += (<a class=\"id\" href=\"#nr\">nr</a>); } while(0)", 
"", 
"static int <a class=\"id\" href=\"#alignfile\">alignfile</a>(struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#foffset\">foffset</a>)", 
"{", 
"<span class=\"ts\"/>static const char <a class=\"id\" href=\"#buf\">buf</a>[4] = { 0, };", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DUMP_WRITE\">DUMP_WRITE</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#roundup\">roundup</a>(*<a class=\"id\" href=\"#foffset\">foffset</a>, 4) - *<a class=\"id\" href=\"#foffset\">foffset</a>, <a class=\"id\" href=\"#foffset\">foffset</a>);", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#writenote\">writenote</a>(struct <a class=\"id\" href=\"#memelfnote\">memelfnote</a> *<a class=\"id\" href=\"#men\">men</a>, struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#foffset\">foffset</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#elf_note\">elf_note</a> <a class=\"id\" href=\"#en\">en</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#en\">en</a>.<a class=\"id\" href=\"#n_namesz\">n_namesz</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#men\">men</a>-><a class=\"id\" href=\"#name\">name</a>) + 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#en\">en</a>.<a class=\"id\" href=\"#n_descsz\">n_descsz</a> = <a class=\"id\" href=\"#men\">men</a>-><a class=\"id\" href=\"#datasz\">datasz</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#en\">en</a>.<a class=\"id\" href=\"#n_type\">n_type</a> = <a class=\"id\" href=\"#men\">men</a>-><a class=\"id\" href=\"#type\">type</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DUMP_WRITE\">DUMP_WRITE</a>(&amp;<a class=\"id\" href=\"#en\">en</a>, sizeof(<a class=\"id\" href=\"#en\">en</a>), <a class=\"id\" href=\"#foffset\">foffset</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DUMP_WRITE\">DUMP_WRITE</a>(<a class=\"id\" href=\"#men\">men</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#en\">en</a>.<a class=\"id\" href=\"#n_namesz\">n_namesz</a>, <a class=\"id\" href=\"#foffset\">foffset</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#alignfile\">alignfile</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#foffset\">foffset</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DUMP_WRITE\">DUMP_WRITE</a>(<a class=\"id\" href=\"#men\">men</a>-><a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#men\">men</a>-><a class=\"id\" href=\"#datasz\">datasz</a>, <a class=\"id\" href=\"#foffset\">foffset</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#alignfile\">alignfile</a>(<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#foffset\">foffset</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#DUMP_WRITE\">DUMP_WRITE</a>", 
"", 
"static void <a class=\"id\" href=\"#fill_elf_header\">fill_elf_header</a>(struct <a class=\"id\" href=\"#elfhdr\">elfhdr</a> *<a class=\"id\" href=\"#elf\">elf</a>, int <a class=\"id\" href=\"#segs\">segs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#machine\">machine</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#flags\">flags</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#osabi\">osabi</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#elf\">elf</a>, 0, sizeof(*<a class=\"id\" href=\"#elf\">elf</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#elf\">elf</a>-><a class=\"id\" href=\"#e_ident\">e_ident</a>, <a class=\"id\" href=\"#ELFMAG\">ELFMAG</a>, <a class=\"id\" href=\"#SELFMAG\">SELFMAG</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf\">elf</a>-><a class=\"id\" href=\"#e_ident\">e_ident</a>[<a class=\"id\" href=\"#EI_CLASS\">EI_CLASS</a>] = <a class=\"id\" href=\"#ELF_CLASS\">ELF_CLASS</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf\">elf</a>-><a class=\"id\" href=\"#e_ident\">e_ident</a>[<a class=\"id\" href=\"#EI_DATA\">EI_DATA</a>] = <a class=\"id\" href=\"#ELF_DATA\">ELF_DATA</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf\">elf</a>-><a class=\"id\" href=\"#e_ident\">e_ident</a>[<a class=\"id\" href=\"#EI_VERSION\">EI_VERSION</a>] = <a class=\"id\" href=\"#EV_CURRENT\">EV_CURRENT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf\">elf</a>-><a class=\"id\" href=\"#e_ident\">e_ident</a>[<a class=\"id\" href=\"#EI_OSABI\">EI_OSABI</a>] = <a class=\"id\" href=\"#ELF_OSABI\">ELF_OSABI</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf\">elf</a>-><a class=\"id\" href=\"#e_type\">e_type</a> = <a class=\"id\" href=\"#ET_CORE\">ET_CORE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf\">elf</a>-><a class=\"id\" href=\"#e_machine\">e_machine</a> = <a class=\"id\" href=\"#machine\">machine</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf\">elf</a>-><a class=\"id\" href=\"#e_version\">e_version</a> = <a class=\"id\" href=\"#EV_CURRENT\">EV_CURRENT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf\">elf</a>-><a class=\"id\" href=\"#e_phoff\">e_phoff</a> = sizeof(struct <a class=\"id\" href=\"#elfhdr\">elfhdr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf\">elf</a>-><a class=\"id\" href=\"#e_flags\">e_flags</a> = <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf\">elf</a>-><a class=\"id\" href=\"#e_ehsize\">e_ehsize</a> = sizeof(struct <a class=\"id\" href=\"#elfhdr\">elfhdr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf\">elf</a>-><a class=\"id\" href=\"#e_phentsize\">e_phentsize</a> = sizeof(struct <a class=\"id\" href=\"#elf_phdr\">elf_phdr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf\">elf</a>-><a class=\"id\" href=\"#e_phnum\">e_phnum</a> = <a class=\"id\" href=\"#segs\">segs</a>;", 
"", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#fill_elf_note_phdr\">fill_elf_note_phdr</a>(struct <a class=\"id\" href=\"#elf_phdr\">elf_phdr</a> *<a class=\"id\" href=\"#phdr\">phdr</a>, int <a class=\"id\" href=\"#sz\">sz</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#offset\">offset</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phdr\">phdr</a>-><a class=\"id\" href=\"#p_type\">p_type</a> = <a class=\"id\" href=\"#PT_NOTE\">PT_NOTE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phdr\">phdr</a>-><a class=\"id\" href=\"#p_offset\">p_offset</a> = <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phdr\">phdr</a>-><a class=\"id\" href=\"#p_vaddr\">p_vaddr</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phdr\">phdr</a>-><a class=\"id\" href=\"#p_paddr\">p_paddr</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phdr\">phdr</a>-><a class=\"id\" href=\"#p_filesz\">p_filesz</a> = <a class=\"id\" href=\"#sz\">sz</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phdr\">phdr</a>-><a class=\"id\" href=\"#p_memsz\">p_memsz</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phdr\">phdr</a>-><a class=\"id\" href=\"#p_flags\">p_flags</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phdr\">phdr</a>-><a class=\"id\" href=\"#p_align\">p_align</a> = 0;", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#fill_note\">fill_note</a>(struct <a class=\"id\" href=\"#memelfnote\">memelfnote</a> *<a class=\"id\" href=\"#note\">note</a>, const char *<a class=\"id\" href=\"#name\">name</a>, int <a class=\"id\" href=\"#type\">type</a>, ", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#sz\">sz</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#note\">note</a>-><a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#note\">note</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#note\">note</a>-><a class=\"id\" href=\"#datasz\">datasz</a> = <a class=\"id\" href=\"#sz\">sz</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#note\">note</a>-><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * fill up all the fields in prstatus from the given task struct, except</span>", 
"<span class=\"comment\"> * registers which need to be filled up separately.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#fill_prstatus\">fill_prstatus</a>(struct <a class=\"id\" href=\"#elf_prstatus\">elf_prstatus</a> *<a class=\"id\" href=\"#prstatus\">prstatus</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, long <a class=\"id\" href=\"#signr\">signr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prstatus\">prstatus</a>-><a class=\"id\" href=\"#pr_info\">pr_info</a>.<a class=\"id\" href=\"#si_signo\">si_signo</a> = <a class=\"id\" href=\"#prstatus\">prstatus</a>-><a class=\"id\" href=\"#pr_cursig\">pr_cursig</a> = <a class=\"id\" href=\"#signr\">signr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prstatus\">prstatus</a>-><a class=\"id\" href=\"#pr_sigpend\">pr_sigpend</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#pending\">pending</a>.<a class=\"id\" href=\"#signal\">signal</a>.<a class=\"id\" href=\"#sig\">sig</a>[0];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prstatus\">prstatus</a>-><a class=\"id\" href=\"#pr_sighold\">pr_sighold</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#blocked\">blocked</a>.<a class=\"id\" href=\"#sig\">sig</a>[0];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prstatus\">prstatus</a>-><a class=\"id\" href=\"#pr_ppid\">pr_ppid</a> = <a class=\"id\" href=\"#task_pid_vnr\">task_pid_vnr</a>(<a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#real_parent\">real_parent</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prstatus\">prstatus</a>-><a class=\"id\" href=\"#pr_pid\">pr_pid</a> = <a class=\"id\" href=\"#task_pid_vnr\">task_pid_vnr</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prstatus\">prstatus</a>-><a class=\"id\" href=\"#pr_pgrp\">pr_pgrp</a> = <a class=\"id\" href=\"#task_pgrp_vnr\">task_pgrp_vnr</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#prstatus\">prstatus</a>-><a class=\"id\" href=\"#pr_sid\">pr_sid</a> = <a class=\"id\" href=\"#task_session_vnr\">task_session_vnr</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#thread_group_leader\">thread_group_leader</a>(<a class=\"id\" href=\"#p\">p</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#task_cputime\">task_cputime</a> <a class=\"id\" href=\"#cputime\">cputime</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This is the record for the group leader.  It shows the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * group-wide total, not its individual thread total.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#thread_group_cputime\">thread_group_cputime</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#cputime\">cputime</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cputime_to_timeval\">cputime_to_timeval</a>(<a class=\"id\" href=\"#cputime\">cputime</a>.<a class=\"id\" href=\"#utime\">utime</a>, &amp;<a class=\"id\" href=\"#prstatus\">prstatus</a>-><a class=\"id\" href=\"#pr_utime\">pr_utime</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cputime_to_timeval\">cputime_to_timeval</a>(<a class=\"id\" href=\"#cputime\">cputime</a>.<a class=\"id\" href=\"#stime\">stime</a>, &amp;<a class=\"id\" href=\"#prstatus\">prstatus</a>-><a class=\"id\" href=\"#pr_stime\">pr_stime</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cputime_to_timeval\">cputime_to_timeval</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#utime\">utime</a>, &amp;<a class=\"id\" href=\"#prstatus\">prstatus</a>-><a class=\"id\" href=\"#pr_utime\">pr_utime</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cputime_to_timeval\">cputime_to_timeval</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#stime\">stime</a>, &amp;<a class=\"id\" href=\"#prstatus\">prstatus</a>-><a class=\"id\" href=\"#pr_stime\">pr_stime</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cputime_to_timeval\">cputime_to_timeval</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#cutime\">cutime</a>, &amp;<a class=\"id\" href=\"#prstatus\">prstatus</a>-><a class=\"id\" href=\"#pr_cutime\">pr_cutime</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cputime_to_timeval\">cputime_to_timeval</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#signal\">signal</a>-><a class=\"id\" href=\"#cstime\">cstime</a>, &amp;<a class=\"id\" href=\"#prstatus\">prstatus</a>-><a class=\"id\" href=\"#pr_cstime\">pr_cstime</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#fill_psinfo\">fill_psinfo</a>(struct <a class=\"id\" href=\"#elf_prpsinfo\">elf_prpsinfo</a> *<a class=\"id\" href=\"#psinfo\">psinfo</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cred\">cred</a> *<a class=\"id\" href=\"#cred\">cred</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/><span class=\"comment\">/* first copy the parameters from user space */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#psinfo\">psinfo</a>, 0, sizeof(struct <a class=\"id\" href=\"#elf_prpsinfo\">elf_prpsinfo</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#arg_end\">arg_end</a> - <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#arg_start\">arg_start</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> >= <a class=\"id\" href=\"#ELF_PRARGSZ\">ELF_PRARGSZ</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#ELF_PRARGSZ\">ELF_PRARGSZ</a>-1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#copy_from_user\">copy_from_user</a>(&amp;<a class=\"id\" href=\"#psinfo\">psinfo</a>-><a class=\"id\" href=\"#pr_psargs\">pr_psargs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>           (const char <a class=\"id\" href=\"#__user\">__user</a> *)<a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#arg_start\">arg_start</a>, <a class=\"id\" href=\"#len\">len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/>for(<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#len\">len</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#psinfo\">psinfo</a>-><a class=\"id\" href=\"#pr_psargs\">pr_psargs</a>[<a class=\"id\" href=\"#i\">i</a>] == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#psinfo\">psinfo</a>-><a class=\"id\" href=\"#pr_psargs\">pr_psargs</a>[<a class=\"id\" href=\"#i\">i</a>] = ' ';", 
"<span class=\"ts\"/><a class=\"id\" href=\"#psinfo\">psinfo</a>-><a class=\"id\" href=\"#pr_psargs\">pr_psargs</a>[<a class=\"id\" href=\"#len\">len</a>] = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#psinfo\">psinfo</a>-><a class=\"id\" href=\"#pr_ppid\">pr_ppid</a> = <a class=\"id\" href=\"#task_pid_vnr\">task_pid_vnr</a>(<a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#real_parent\">real_parent</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#psinfo\">psinfo</a>-><a class=\"id\" href=\"#pr_pid\">pr_pid</a> = <a class=\"id\" href=\"#task_pid_vnr\">task_pid_vnr</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#psinfo\">psinfo</a>-><a class=\"id\" href=\"#pr_pgrp\">pr_pgrp</a> = <a class=\"id\" href=\"#task_pgrp_vnr\">task_pgrp_vnr</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#psinfo\">psinfo</a>-><a class=\"id\" href=\"#pr_sid\">pr_sid</a> = <a class=\"id\" href=\"#task_session_vnr\">task_session_vnr</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#state\">state</a> ? <a class=\"id\" href=\"#ffz\">ffz</a>(~<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#state\">state</a>) + 1 : 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#psinfo\">psinfo</a>-><a class=\"id\" href=\"#pr_state\">pr_state</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#psinfo\">psinfo</a>-><a class=\"id\" href=\"#pr_sname\">pr_sname</a> = (<a class=\"id\" href=\"#i\">i</a> &gt; 5) ? '.' : \"RSDTZW\"[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#psinfo\">psinfo</a>-><a class=\"id\" href=\"#pr_zomb\">pr_zomb</a> = <a class=\"id\" href=\"#psinfo\">psinfo</a>-><a class=\"id\" href=\"#pr_sname\">pr_sname</a> == 'Z';", 
"<span class=\"ts\"/><a class=\"id\" href=\"#psinfo\">psinfo</a>-><a class=\"id\" href=\"#pr_nice\">pr_nice</a> = <a class=\"id\" href=\"#task_nice\">task_nice</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#psinfo\">psinfo</a>-><a class=\"id\" href=\"#pr_flag\">pr_flag</a> = <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cred\">cred</a> = <a class=\"id\" href=\"#__task_cred\">__task_cred</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SET_UID\">SET_UID</a>(<a class=\"id\" href=\"#psinfo\">psinfo</a>-><a class=\"id\" href=\"#pr_uid\">pr_uid</a>, <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#uid\">uid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SET_GID\">SET_GID</a>(<a class=\"id\" href=\"#psinfo\">psinfo</a>-><a class=\"id\" href=\"#pr_gid\">pr_gid</a>, <a class=\"id\" href=\"#cred\">cred</a>-><a class=\"id\" href=\"#gid\">gid</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strncpy\">strncpy</a>(<a class=\"id\" href=\"#psinfo\">psinfo</a>-><a class=\"id\" href=\"#pr_fname\">pr_fname</a>, <a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#comm\">comm</a>, sizeof(<a class=\"id\" href=\"#psinfo\">psinfo</a>-><a class=\"id\" href=\"#pr_fname\">pr_fname</a>));", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#fill_auxv_note\">fill_auxv_note</a>(struct <a class=\"id\" href=\"#memelfnote\">memelfnote</a> *<a class=\"id\" href=\"#note\">note</a>, struct <a class=\"id\" href=\"#mm_struct\">mm_struct</a> *<a class=\"id\" href=\"#mm\">mm</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf_addr_t\">elf_addr_t</a> *<a class=\"id\" href=\"#auxv\">auxv</a> = (<a class=\"id\" href=\"#elf_addr_t\">elf_addr_t</a> *) <a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#saved_auxv\">saved_auxv</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a> = 0;", 
"<span class=\"ts\"/>do", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> += 2;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#auxv\">auxv</a>[<a class=\"id\" href=\"#i\">i</a> - 2] != <a class=\"id\" href=\"#AT_NULL\">AT_NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fill_note\">fill_note</a>(<a class=\"id\" href=\"#note\">note</a>, \"CORE\", <a class=\"id\" href=\"#NT_AUXV\">NT_AUXV</a>, <a class=\"id\" href=\"#i\">i</a> * sizeof(<a class=\"id\" href=\"#elf_addr_t\">elf_addr_t</a>), <a class=\"id\" href=\"#auxv\">auxv</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CORE_DUMP_USE_REGSET\">CORE_DUMP_USE_REGSET</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#regset\">regset</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#elf_thread_core_info\">elf_thread_core_info</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#elf_thread_core_info\">elf_thread_core_info</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#elf_prstatus\">elf_prstatus</a> <a class=\"id\" href=\"#prstatus\">prstatus</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#memelfnote\">memelfnote</a> <a class=\"id\" href=\"#notes\">notes</a>[0];", 
"};", 
"", 
"struct <a class=\"id\" href=\"#elf_note_info\">elf_note_info</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#elf_thread_core_info\">elf_thread_core_info</a> *<a class=\"id\" href=\"#thread\">thread</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#memelfnote\">memelfnote</a> <a class=\"id\" href=\"#psinfo\">psinfo</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#memelfnote\">memelfnote</a> <a class=\"id\" href=\"#auxv\">auxv</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#thread_notes\">thread_notes</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * When a regset has a writeback hook, we call it on each thread before</span>", 
"<span class=\"comment\"> * dumping user memory.  On register window machines, this makes sure the</span>", 
"<span class=\"comment\"> * user memory backing the register data is up to date before we read it.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#do_thread_regset_writeback\">do_thread_regset_writeback</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       const struct <a class=\"id\" href=\"#user_regset\">user_regset</a> *<a class=\"id\" href=\"#regset\">regset</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#regset\">regset</a>-><a class=\"id\" href=\"#writeback\">writeback</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#regset\">regset</a>-><a class=\"id\" href=\"#writeback\">writeback</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#regset\">regset</a>, 1);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#fill_thread_core_info\">fill_thread_core_info</a>(struct <a class=\"id\" href=\"#elf_thread_core_info\">elf_thread_core_info</a> *<a class=\"id\" href=\"#t\">t</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const struct <a class=\"id\" href=\"#user_regset_view\">user_regset_view</a> *<a class=\"id\" href=\"#view\">view</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> long <a class=\"id\" href=\"#signr\">signr</a>, <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#total\">total</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * NT_PRSTATUS is the one special case, because the regset data</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * goes into the pr_reg field inside the note contents, rather</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * than being the whole note contents.  We fill the reset in here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We assume that regset 0 is NT_PRSTATUS.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fill_prstatus\">fill_prstatus</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#prstatus\">prstatus</a>, <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#signr\">signr</a>);", 
"<span class=\"ts\"/>(void) <a class=\"id\" href=\"#view\">view</a>-><a class=\"id\" href=\"#regsets\">regsets</a>[0].<a class=\"id\" href=\"#get\">get</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#task\">task</a>, &amp;<a class=\"id\" href=\"#view\">view</a>-><a class=\"id\" href=\"#regsets\">regsets</a>[0],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    0, sizeof(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#prstatus\">prstatus</a>.<a class=\"id\" href=\"#pr_reg\">pr_reg</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    &amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#prstatus\">prstatus</a>.<a class=\"id\" href=\"#pr_reg\">pr_reg</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fill_note\">fill_note</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#notes\">notes</a>[0], \"CORE\", <a class=\"id\" href=\"#NT_PRSTATUS\">NT_PRSTATUS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  sizeof(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#prstatus\">prstatus</a>), &amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#prstatus\">prstatus</a>);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#total\">total</a> += <a class=\"id\" href=\"#notesize\">notesize</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#notes\">notes</a>[0]);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_thread_regset_writeback\">do_thread_regset_writeback</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#task\">task</a>, &amp;<a class=\"id\" href=\"#view\">view</a>-><a class=\"id\" href=\"#regsets\">regsets</a>[0]);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Each other regset might generate a note too.  For each regset</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that has no core_note_type or is inactive, we leave t-&gt;notes[i]</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * all zero and we'll know to skip writing it later.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#view\">view</a>-><a class=\"id\" href=\"#n\">n</a>; ++<a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#user_regset\">user_regset</a> *<a class=\"id\" href=\"#regset\">regset</a> = &amp;<a class=\"id\" href=\"#view\">view</a>-><a class=\"id\" href=\"#regsets\">regsets</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_thread_regset_writeback\">do_thread_regset_writeback</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#regset\">regset</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#regset\">regset</a>-><a class=\"id\" href=\"#core_note_type\">core_note_type</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (!<a class=\"id\" href=\"#regset\">regset</a>-><a class=\"id\" href=\"#active\">active</a> || <a class=\"id\" href=\"#regset\">regset</a>-><a class=\"id\" href=\"#active\">active</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#regset\">regset</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#regset\">regset</a>-><a class=\"id\" href=\"#n\">n</a> * <a class=\"id\" href=\"#regset\">regset</a>-><a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#data\">data</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#regset\">regset</a>-><a class=\"id\" href=\"#get\">get</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#regset\">regset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  0, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#ret\">ret</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#regset\">regset</a>-><a class=\"id\" href=\"#core_note_type\">core_note_type</a> != <a class=\"id\" href=\"#NT_PRFPREG\">NT_PRFPREG</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fill_note\">fill_note</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#notes\">notes</a>[<a class=\"id\" href=\"#i\">i</a>], \"LINUX\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#regset\">regset</a>-><a class=\"id\" href=\"#core_note_type\">core_note_type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#prstatus\">prstatus</a>.<a class=\"id\" href=\"#pr_fpvalid\">pr_fpvalid</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fill_note\">fill_note</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#notes\">notes</a>[<a class=\"id\" href=\"#i\">i</a>], \"CORE\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#NT_PRFPREG\">NT_PRFPREG</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#total\">total</a> += <a class=\"id\" href=\"#notesize\">notesize</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#notes\">notes</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#fill_note_info\">fill_note_info</a>(struct <a class=\"id\" href=\"#elfhdr\">elfhdr</a> *<a class=\"id\" href=\"#elf\">elf</a>, int <a class=\"id\" href=\"#phdrs\">phdrs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#elf_note_info\">elf_note_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  long <a class=\"id\" href=\"#signr\">signr</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#dump_task\">dump_task</a> = <a class=\"id\" href=\"#current\">current</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#user_regset_view\">user_regset_view</a> *<a class=\"id\" href=\"#view\">view</a> = <a class=\"id\" href=\"#task_user_regset_view\">task_user_regset_view</a>(<a class=\"id\" href=\"#dump_task\">dump_task</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#elf_thread_core_info\">elf_thread_core_info</a> *<a class=\"id\" href=\"#t\">t</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#elf_prpsinfo\">elf_prpsinfo</a> *<a class=\"id\" href=\"#psinfo\">psinfo</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#core_thread\">core_thread</a> *<a class=\"id\" href=\"#ct\">ct</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#size\">size</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#thread\">thread</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#psinfo\">psinfo</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(*<a class=\"id\" href=\"#psinfo\">psinfo</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#psinfo\">psinfo</a> == <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fill_note\">fill_note</a>(&amp;<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#psinfo\">psinfo</a>, \"CORE\", <a class=\"id\" href=\"#NT_PRPSINFO\">NT_PRPSINFO</a>, sizeof(*<a class=\"id\" href=\"#psinfo\">psinfo</a>), <a class=\"id\" href=\"#psinfo\">psinfo</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Figure out how many notes we're going to need for each thread.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#thread_notes\">thread_notes</a> = 0;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#view\">view</a>-><a class=\"id\" href=\"#n\">n</a>; ++<a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#view\">view</a>-><a class=\"id\" href=\"#regsets\">regsets</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#core_note_type\">core_note_type</a> != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>++<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#thread_notes\">thread_notes</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Sanity check.  We rely on regset 0 being in NT_PRSTATUS,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * since it is our one special case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#thread_notes\">thread_notes</a> == 0) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#view\">view</a>-><a class=\"id\" href=\"#regsets\">regsets</a>[0].<a class=\"id\" href=\"#core_note_type\">core_note_type</a> != <a class=\"id\" href=\"#NT_PRSTATUS\">NT_PRSTATUS</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Initialize the ELF file header.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fill_elf_header\">fill_elf_header</a>(<a class=\"id\" href=\"#elf\">elf</a>, <a class=\"id\" href=\"#phdrs\">phdrs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#view\">view</a>-><a class=\"id\" href=\"#e_machine\">e_machine</a>, <a class=\"id\" href=\"#view\">view</a>-><a class=\"id\" href=\"#e_flags\">e_flags</a>, <a class=\"id\" href=\"#view\">view</a>-><a class=\"id\" href=\"#ei_osabi\">ei_osabi</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Allocate a structure for each thread.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#ct\">ct</a> = &amp;<a class=\"id\" href=\"#dump_task\">dump_task</a>-><a class=\"id\" href=\"#mm\">mm</a>-><a class=\"id\" href=\"#core_state\">core_state</a>-><a class=\"id\" href=\"#dumper\">dumper</a>; <a class=\"id\" href=\"#ct\">ct</a>; <a class=\"id\" href=\"#ct\">ct</a> = <a class=\"id\" href=\"#ct\">ct</a>-><a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(<a class=\"id\" href=\"#offsetof\">offsetof</a>(struct <a class=\"id\" href=\"#elf_thread_core_info\">elf_thread_core_info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#notes\">notes</a>[<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#thread_notes\">thread_notes</a>]),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#t\">t</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#ct\">ct</a>-><a class=\"id\" href=\"#task\">task</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ct\">ct</a>-><a class=\"id\" href=\"#task\">task</a> == <a class=\"id\" href=\"#dump_task\">dump_task</a> || !<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#thread\">thread</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#thread\">thread</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#thread\">thread</a> = <a class=\"id\" href=\"#t\">t</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Make sure to keep the original task at</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the head of the list.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#thread\">thread</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#thread\">thread</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#t\">t</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now fill in each thread's information.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#thread\">thread</a>; <a class=\"id\" href=\"#t\">t</a> != <a class=\"id\" href=\"#NULL\">NULL</a>; <a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#next\">next</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#fill_thread_core_info\">fill_thread_core_info</a>(<a class=\"id\" href=\"#t\">t</a>, <a class=\"id\" href=\"#view\">view</a>, <a class=\"id\" href=\"#signr\">signr</a>, &amp;<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#size\">size</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Fill in the two process-wide notes.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fill_psinfo\">fill_psinfo</a>(<a class=\"id\" href=\"#psinfo\">psinfo</a>, <a class=\"id\" href=\"#dump_task\">dump_task</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a>, <a class=\"id\" href=\"#dump_task\">dump_task</a>-><a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#size\">size</a> += <a class=\"id\" href=\"#notesize\">notesize</a>(&amp;<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#psinfo\">psinfo</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fill_auxv_note\">fill_auxv_note</a>(&amp;<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#auxv\">auxv</a>, <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#mm\">mm</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#size\">size</a> += <a class=\"id\" href=\"#notesize\">notesize</a>(&amp;<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#auxv\">auxv</a>);", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#get_note_info_size\">get_note_info_size</a>(struct <a class=\"id\" href=\"#elf_note_info\">elf_note_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#size\">size</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Write all the notes for each thread.  When writing the first thread, the</span>", 
"<span class=\"comment\"> * process-wide notes are interleaved after the first thread-specific note.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#write_note_info\">write_note_info</a>(struct <a class=\"id\" href=\"#elf_note_info\">elf_note_info</a> *<a class=\"id\" href=\"#info\">info</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#file\">file</a> *<a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#foffset\">foffset</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#first\">first</a> = 1;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#elf_thread_core_info\">elf_thread_core_info</a> *<a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#thread\">thread</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#writenote\">writenote</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#notes\">notes</a>[0], <a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#foffset\">foffset</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#first\">first</a> && !<a class=\"id\" href=\"#writenote\">writenote</a>(&amp;<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#psinfo\">psinfo</a>, <a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#foffset\">foffset</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#first\">first</a> && !<a class=\"id\" href=\"#writenote\">writenote</a>(&amp;<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#auxv\">auxv</a>, <a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#foffset\">foffset</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#thread_notes\">thread_notes</a>; ++<a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#notes\">notes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#data\">data</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    !<a class=\"id\" href=\"#writenote\">writenote</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#notes\">notes</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#file\">file</a>, <a class=\"id\" href=\"#foffset\">foffset</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first\">first</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#t\">t</a>);", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#free_note_info\">free_note_info</a>(struct <a class=\"id\" href=\"#elf_note_info\">elf_note_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#elf_thread_core_info\">elf_thread_core_info</a> *<a class=\"id\" href=\"#threads\">threads</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#thread\">thread</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#threads\">threads</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#elf_thread_core_info\">elf_thread_core_info</a> *<a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#threads\">threads</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#threads\">threads</a> = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#notes\">notes</a>[0].<a class=\"id\" href=\"#data\">data</a> && <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#notes\">notes</a>[0].<a class=\"id\" href=\"#data\">data</a> != &amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#prstatus\">prstatus</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#thread_notes\">thread_notes</a>; ++<a class=\"id\" href=\"#i\">i</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#notes\">notes</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#t\">t</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#psinfo\">psinfo</a>.<a class=\"id\" href=\"#data\">data</a>);", 
"}", 
"", 
"#else", 
"", 
"<span class=\"comment\">/* Here is the structure in which status of each thread is captured. */</span>", 
"struct <a class=\"id\" href=\"#elf_thread_status\">elf_thread_status</a>", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#elf_prstatus\">elf_prstatus</a> <a class=\"id\" href=\"#prstatus\">prstatus</a>;<span class=\"ts\"/><span class=\"comment\">/* NT_PRSTATUS */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf_fpregset_t\">elf_fpregset_t</a> <a class=\"id\" href=\"#fpu\">fpu</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* NT_PRFPREG */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#thread\">thread</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#ELF_CORE_COPY_XFPREGS\">ELF_CORE_COPY_XFPREGS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf_fpxregset_t\">elf_fpxregset_t</a> <a class=\"id\" href=\"#xfpu\">xfpu</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* ELF_CORE_XFPREG_TYPE */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#memelfnote\">memelfnote</a> <a class=\"id\" href=\"#notes\">notes</a>[3];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#num_notes\">num_notes</a>;", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * In order to add the specific thread information for the elf file format,</span>", 
"<span class=\"comment\"> * we need to keep a linked list of every threads pr_status and then create</span>", 
"<span class=\"comment\"> * a single section for them in the final core file.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#elf_dump_thread_status\">elf_dump_thread_status</a>(long <a class=\"id\" href=\"#signr\">signr</a>, struct <a class=\"id\" href=\"#elf_thread_status\">elf_thread_status</a> *<a class=\"id\" href=\"#t\">t</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#sz\">sz</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#thread\">thread</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#num_notes\">num_notes</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fill_prstatus\">fill_prstatus</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#prstatus\">prstatus</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#signr\">signr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf_core_copy_task_regs\">elf_core_copy_task_regs</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#prstatus\">prstatus</a>.<a class=\"id\" href=\"#pr_reg\">pr_reg</a>);<span class=\"ts\"/>", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fill_note\">fill_note</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#notes\">notes</a>[0], \"CORE\", <a class=\"id\" href=\"#NT_PRSTATUS\">NT_PRSTATUS</a>, sizeof(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#prstatus\">prstatus</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>  &amp;(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#prstatus\">prstatus</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#num_notes\">num_notes</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sz\">sz</a> += <a class=\"id\" href=\"#notesize\">notesize</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#notes\">notes</a>[0]);", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#prstatus\">prstatus</a>.<a class=\"id\" href=\"#pr_fpvalid\">pr_fpvalid</a> = <a class=\"id\" href=\"#elf_core_copy_task_fpregs\">elf_core_copy_task_fpregs</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#fpu\">fpu</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fill_note\">fill_note</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#notes\">notes</a>[1], \"CORE\", <a class=\"id\" href=\"#NT_PRFPREG\">NT_PRFPREG</a>, sizeof(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#fpu\">fpu</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  &amp;(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#fpu\">fpu</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#num_notes\">num_notes</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sz\">sz</a> += <a class=\"id\" href=\"#notesize\">notesize</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#notes\">notes</a>[1]);", 
"<span class=\"ts\"/>}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#ELF_CORE_COPY_XFPREGS\">ELF_CORE_COPY_XFPREGS</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#elf_core_copy_task_xfpregs\">elf_core_copy_task_xfpregs</a>(<a class=\"id\" href=\"#p\">p</a>, &amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#xfpu\">xfpu</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fill_note\">fill_note</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#notes\">notes</a>[2], \"LINUX\", <a class=\"id\" href=\"#ELF_CORE_XFPREG_TYPE\">ELF_CORE_XFPREG_TYPE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  sizeof(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#xfpu\">xfpu</a>), &amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#xfpu\">xfpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#num_notes\">num_notes</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sz\">sz</a> += <a class=\"id\" href=\"#notesize\">notesize</a>(&amp;<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#notes\">notes</a>[2]);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sz\">sz</a>;", 
"}", 
"", 
"struct <a class=\"id\" href=\"#elf_note_info\">elf_note_info</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#memelfnote\">memelfnote</a> *<a class=\"id\" href=\"#notes\">notes</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#elf_prstatus\">elf_prstatus</a> *<a class=\"id\" href=\"#prstatus\">prstatus</a>;<span class=\"ts\"/><span class=\"comment\">/* NT_PRSTATUS */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#elf_prpsinfo\">elf_prpsinfo</a> *<a class=\"id\" href=\"#psinfo\">psinfo</a>;<span class=\"ts\"/><span class=\"comment\">/* NT_PRPSINFO */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#thread_list\">thread_list</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf_fpregset_t\">elf_fpregset_t</a> *<a class=\"id\" href=\"#fpu\">fpu</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#ELF_CORE_COPY_XFPREGS\">ELF_CORE_COPY_XFPREGS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#elf_fpxregset_t\">elf_fpxregset_t</a> *<a class=\"id\" href=\"#xfpu\">xfpu</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#thread_status_size\">thread_status_size</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#numnote\">numnote</a>;", 
];
xr_frag_insert('l/23/5ac43c1c40b5a8e81fc6bab917b939ba4bc0fa.xr', __xr_tmp);
