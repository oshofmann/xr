var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#pcpu_group_info\">pcpu_group_info</a> *<a class=\"id\" href=\"#gi\">gi</a> = &amp;<a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#groups\">groups</a>[<a class=\"id\" href=\"#group\">group</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#unit\">unit</a> = 0, <a class=\"id\" href=\"#unit_end\">unit_end</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#gi\">gi</a>-><a class=\"id\" href=\"#nr_units\">nr_units</a> % <a class=\"id\" href=\"#upa\">upa</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#alloc_end\">alloc_end</a> += <a class=\"id\" href=\"#gi\">gi</a>-><a class=\"id\" href=\"#nr_units\">nr_units</a> / <a class=\"id\" href=\"#upa\">upa</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#alloc\">alloc</a> &lt; <a class=\"id\" href=\"#alloc_end\">alloc_end</a>; <a class=\"id\" href=\"#alloc\">alloc</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#alloc\">alloc</a> % <a class=\"id\" href=\"#apl\">apl</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"%spcpu-alloc: \", <a class=\"id\" href=\"#lvl\">lvl</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"[%0*d] \", <a class=\"id\" href=\"#group_width\">group_width</a>, <a class=\"id\" href=\"#group\">group</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#unit_end\">unit_end</a> += <a class=\"id\" href=\"#upa\">upa</a>; <a class=\"id\" href=\"#unit\">unit</a> &lt; <a class=\"id\" href=\"#unit_end\">unit_end</a>; <a class=\"id\" href=\"#unit\">unit</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#gi\">gi</a>-><a class=\"id\" href=\"#cpu_map\">cpu_map</a>[<a class=\"id\" href=\"#unit\">unit</a>] != <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"%0*d \", <a class=\"id\" href=\"#cpu_width\">cpu_width</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#gi\">gi</a>-><a class=\"id\" href=\"#cpu_map\">cpu_map</a>[<a class=\"id\" href=\"#unit\">unit</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"%s \", <a class=\"id\" href=\"#empty_str\">empty_str</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"\\n\");", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pcpu_setup_first_chunk - initialize the first percpu chunk</span>", 
"<span class=\"comment\"> * @ai: pcpu_alloc_info describing how to percpu area is shaped</span>", 
"<span class=\"comment\"> * @base_addr: mapped address</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Initialize the first percpu chunk which contains the kernel static</span>", 
"<span class=\"comment\"> * perpcu area.  This function is to be called from arch percpu area</span>", 
"<span class=\"comment\"> * setup path.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @ai contains all information necessary to initialize the first</span>", 
"<span class=\"comment\"> * chunk and prime the dynamic percpu allocator.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @ai-&gt;static_size is the size of static percpu area.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @ai-&gt;reserved_size, if non-zero, specifies the amount of bytes to</span>", 
"<span class=\"comment\"> * reserve after the static area in the first chunk.  This reserves</span>", 
"<span class=\"comment\"> * the first chunk such that it's available only through reserved</span>", 
"<span class=\"comment\"> * percpu allocation.  This is primarily used to serve module percpu</span>", 
"<span class=\"comment\"> * static areas on architectures where the addressing model has</span>", 
"<span class=\"comment\"> * limited offset range for symbol relocations to guarantee module</span>", 
"<span class=\"comment\"> * percpu symbols fall inside the relocatable range.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @ai-&gt;dyn_size determines the number of bytes available for dynamic</span>", 
"<span class=\"comment\"> * allocation in the first chunk.  The area between @ai-&gt;static_size +</span>", 
"<span class=\"comment\"> * @ai-&gt;reserved_size + @ai-&gt;dyn_size and @ai-&gt;unit_size is unused.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @ai-&gt;unit_size specifies unit size and must be aligned to PAGE_SIZE</span>", 
"<span class=\"comment\"> * and equal to or larger than @ai-&gt;static_size + @ai-&gt;reserved_size +</span>", 
"<span class=\"comment\"> * @ai-&gt;dyn_size.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @ai-&gt;atom_size is the allocation atom size and used as alignment</span>", 
"<span class=\"comment\"> * for vm areas.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @ai-&gt;alloc_size is the allocation size and always multiple of</span>", 
"<span class=\"comment\"> * @ai-&gt;atom_size.  This is larger than @ai-&gt;atom_size if</span>", 
"<span class=\"comment\"> * @ai-&gt;unit_size is larger than @ai-&gt;atom_size.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @ai-&gt;nr_groups and @ai-&gt;groups describe virtual memory layout of</span>", 
"<span class=\"comment\"> * percpu areas.  Units which should be colocated are put into the</span>", 
"<span class=\"comment\"> * same group.  Dynamic VM areas will be allocated according to these</span>", 
"<span class=\"comment\"> * groupings.  If @ai-&gt;nr_groups is zero, a single group containing</span>", 
"<span class=\"comment\"> * all units is assumed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The caller should have mapped the first chunk at @base_addr and</span>", 
"<span class=\"comment\"> * copied static data to each unit.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the first chunk ends up with both reserved and dynamic areas, it</span>", 
"<span class=\"comment\"> * is served by two chunks - one to serve the core static and reserved</span>", 
"<span class=\"comment\"> * areas and the other for the dynamic area.  They share the same vm</span>", 
"<span class=\"comment\"> * and page map but uses different area allocation map to stay away</span>", 
"<span class=\"comment\"> * from each other.  The latter chunk is circulated in the chunk slots</span>", 
"<span class=\"comment\"> * and available for dynamic allocation like any other chunks.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * 0 on success, -errno on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#pcpu_setup_first_chunk\">pcpu_setup_first_chunk</a>(const struct <a class=\"id\" href=\"#pcpu_alloc_info\">pcpu_alloc_info</a> *<a class=\"id\" href=\"#ai\">ai</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  void *<a class=\"id\" href=\"#base_addr\">base_addr</a>)", 
"{", 
"<span class=\"ts\"/>static char <a class=\"id\" href=\"#cpus_buf\">cpus_buf</a>[4096] <a class=\"id\" href=\"#__initdata\">__initdata</a>;", 
"<span class=\"ts\"/>static int <a class=\"id\" href=\"#smap\">smap</a>[<a class=\"id\" href=\"#PERCPU_DYNAMIC_EARLY_SLOTS\">PERCPU_DYNAMIC_EARLY_SLOTS</a>] <a class=\"id\" href=\"#__initdata\">__initdata</a>;", 
"<span class=\"ts\"/>static int <a class=\"id\" href=\"#dmap\">dmap</a>[<a class=\"id\" href=\"#PERCPU_DYNAMIC_EARLY_SLOTS\">PERCPU_DYNAMIC_EARLY_SLOTS</a>] <a class=\"id\" href=\"#__initdata\">__initdata</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#dyn_size\">dyn_size</a> = <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#dyn_size\">dyn_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size_sum\">size_sum</a> = <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#static_size\">static_size</a> + <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#reserved_size\">reserved_size</a> + <a class=\"id\" href=\"#dyn_size\">dyn_size</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a> *<a class=\"id\" href=\"#schunk\">schunk</a>, *<a class=\"id\" href=\"#dchunk\">dchunk</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#group_offsets\">group_offsets</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#group_sizes\">group_sizes</a>;", 
"<span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#unit_off\">unit_off</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>int *<a class=\"id\" href=\"#unit_map\">unit_map</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#unit\">unit</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpumask_scnprintf\">cpumask_scnprintf</a>(<a class=\"id\" href=\"#cpus_buf\">cpus_buf</a>, sizeof(<a class=\"id\" href=\"#cpus_buf\">cpus_buf</a>), <a class=\"id\" href=\"#cpu_possible_mask\">cpu_possible_mask</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#PCPU_SETUP_BUG_ON\">PCPU_SETUP_BUG_ON</a>(<a class=\"id\" href=\"#cond\">cond</a>)<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#cond\">cond</a>)) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_emerg\">pr_emerg</a>(\"PERCPU: failed to initialize, %s\", #<a class=\"id\" href=\"#cond\">cond</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_emerg\">pr_emerg</a>(\"PERCPU: cpu_possible_mask=%s\\n\", <a class=\"id\" href=\"#cpus_buf\">cpus_buf</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcpu_dump_alloc_info\">pcpu_dump_alloc_info</a>(<a class=\"id\" href=\"#KERN_EMERG\">KERN_EMERG</a>, <a class=\"id\" href=\"#ai\">ai</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while (0)", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* sanity checks */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PCPU_SETUP_BUG_ON\">PCPU_SETUP_BUG_ON</a>(<a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#nr_groups\">nr_groups</a> <= 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PCPU_SETUP_BUG_ON\">PCPU_SETUP_BUG_ON</a>(!<a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#static_size\">static_size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PCPU_SETUP_BUG_ON\">PCPU_SETUP_BUG_ON</a>(!<a class=\"id\" href=\"#base_addr\">base_addr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PCPU_SETUP_BUG_ON\">PCPU_SETUP_BUG_ON</a>(<a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#unit_size\">unit_size</a> &lt; <a class=\"id\" href=\"#size_sum\">size_sum</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PCPU_SETUP_BUG_ON\">PCPU_SETUP_BUG_ON</a>(<a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#unit_size\">unit_size</a> &amp; ~<a class=\"id\" href=\"#PAGE_MASK\">PAGE_MASK</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PCPU_SETUP_BUG_ON\">PCPU_SETUP_BUG_ON</a>(<a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#unit_size\">unit_size</a> &lt; <a class=\"id\" href=\"#PCPU_MIN_UNIT_SIZE\">PCPU_MIN_UNIT_SIZE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PCPU_SETUP_BUG_ON\">PCPU_SETUP_BUG_ON</a>(<a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#dyn_size\">dyn_size</a> &lt; <a class=\"id\" href=\"#PERCPU_DYNAMIC_EARLY_SIZE\">PERCPU_DYNAMIC_EARLY_SIZE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#PCPU_SETUP_BUG_ON\">PCPU_SETUP_BUG_ON</a>(<a class=\"id\" href=\"#pcpu_verify_alloc_info\">pcpu_verify_alloc_info</a>(<a class=\"id\" href=\"#ai\">ai</a>) &lt; 0);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* process group information and build config tables accordingly */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group_offsets\">group_offsets</a> = <a class=\"id\" href=\"#alloc_bootmem\">alloc_bootmem</a>(<a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#nr_groups\">nr_groups</a> * sizeof(<a class=\"id\" href=\"#group_offsets\">group_offsets</a>[0]));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group_sizes\">group_sizes</a> = <a class=\"id\" href=\"#alloc_bootmem\">alloc_bootmem</a>(<a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#nr_groups\">nr_groups</a> * sizeof(<a class=\"id\" href=\"#group_sizes\">group_sizes</a>[0]));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unit_map\">unit_map</a> = <a class=\"id\" href=\"#alloc_bootmem\">alloc_bootmem</a>(<a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a> * sizeof(<a class=\"id\" href=\"#unit_map\">unit_map</a>[0]));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unit_off\">unit_off</a> = <a class=\"id\" href=\"#alloc_bootmem\">alloc_bootmem</a>(<a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a> * sizeof(<a class=\"id\" href=\"#unit_off\">unit_off</a>[0]));", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#cpu\">cpu</a> = 0; <a class=\"id\" href=\"#cpu\">cpu</a> &lt; <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>; <a class=\"id\" href=\"#cpu\">cpu</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unit_map\">unit_map</a>[<a class=\"id\" href=\"#cpu\">cpu</a>] = <a class=\"id\" href=\"#UINT_MAX\">UINT_MAX</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcpu_first_unit_cpu\">pcpu_first_unit_cpu</a> = <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#group\">group</a> = 0, <a class=\"id\" href=\"#unit\">unit</a> = 0; <a class=\"id\" href=\"#group\">group</a> &lt; <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#nr_groups\">nr_groups</a>; <a class=\"id\" href=\"#group\">group</a>++, <a class=\"id\" href=\"#unit\">unit</a> += <a class=\"id\" href=\"#i\">i</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>const struct <a class=\"id\" href=\"#pcpu_group_info\">pcpu_group_info</a> *<a class=\"id\" href=\"#gi\">gi</a> = &amp;<a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#groups\">groups</a>[<a class=\"id\" href=\"#group\">group</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group_offsets\">group_offsets</a>[<a class=\"id\" href=\"#group\">group</a>] = <a class=\"id\" href=\"#gi\">gi</a>-><a class=\"id\" href=\"#base_offset\">base_offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group_sizes\">group_sizes</a>[<a class=\"id\" href=\"#group\">group</a>] = <a class=\"id\" href=\"#gi\">gi</a>-><a class=\"id\" href=\"#nr_units\">nr_units</a> * <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#unit_size\">unit_size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#gi\">gi</a>-><a class=\"id\" href=\"#nr_units\">nr_units</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#gi\">gi</a>-><a class=\"id\" href=\"#cpu_map\">cpu_map</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> == <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PCPU_SETUP_BUG_ON\">PCPU_SETUP_BUG_ON</a>(<a class=\"id\" href=\"#cpu\">cpu</a> &gt; <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PCPU_SETUP_BUG_ON\">PCPU_SETUP_BUG_ON</a>(!<a class=\"id\" href=\"#cpu_possible\">cpu_possible</a>(<a class=\"id\" href=\"#cpu\">cpu</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PCPU_SETUP_BUG_ON\">PCPU_SETUP_BUG_ON</a>(<a class=\"id\" href=\"#unit_map\">unit_map</a>[<a class=\"id\" href=\"#cpu\">cpu</a>] != <a class=\"id\" href=\"#UINT_MAX\">UINT_MAX</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unit_map\">unit_map</a>[<a class=\"id\" href=\"#cpu\">cpu</a>] = <a class=\"id\" href=\"#unit\">unit</a> + <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unit_off\">unit_off</a>[<a class=\"id\" href=\"#cpu\">cpu</a>] = <a class=\"id\" href=\"#gi\">gi</a>-><a class=\"id\" href=\"#base_offset\">base_offset</a> + <a class=\"id\" href=\"#i\">i</a> * <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#unit_size\">unit_size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pcpu_first_unit_cpu\">pcpu_first_unit_cpu</a> == <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcpu_first_unit_cpu\">pcpu_first_unit_cpu</a> = <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcpu_last_unit_cpu\">pcpu_last_unit_cpu</a> = <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcpu_nr_units\">pcpu_nr_units</a> = <a class=\"id\" href=\"#unit\">unit</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PCPU_SETUP_BUG_ON\">PCPU_SETUP_BUG_ON</a>(<a class=\"id\" href=\"#unit_map\">unit_map</a>[<a class=\"id\" href=\"#cpu\">cpu</a>] == <a class=\"id\" href=\"#UINT_MAX\">UINT_MAX</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we're done parsing the input, undefine BUG macro and dump config */</span>", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#PCPU_SETUP_BUG_ON\">PCPU_SETUP_BUG_ON</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcpu_dump_alloc_info\">pcpu_dump_alloc_info</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>, <a class=\"id\" href=\"#ai\">ai</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcpu_nr_groups\">pcpu_nr_groups</a> = <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#nr_groups\">nr_groups</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcpu_group_offsets\">pcpu_group_offsets</a> = <a class=\"id\" href=\"#group_offsets\">group_offsets</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcpu_group_sizes\">pcpu_group_sizes</a> = <a class=\"id\" href=\"#group_sizes\">group_sizes</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcpu_unit_map\">pcpu_unit_map</a> = <a class=\"id\" href=\"#unit_map\">unit_map</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcpu_unit_offsets\">pcpu_unit_offsets</a> = <a class=\"id\" href=\"#unit_off\">unit_off</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* determine basic parameters */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcpu_unit_pages\">pcpu_unit_pages</a> = <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#unit_size\">unit_size</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcpu_unit_size\">pcpu_unit_size</a> = <a class=\"id\" href=\"#pcpu_unit_pages\">pcpu_unit_pages</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcpu_atom_size\">pcpu_atom_size</a> = <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#atom_size\">atom_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcpu_chunk_struct_size\">pcpu_chunk_struct_size</a> = sizeof(struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BITS_TO_LONGS\">BITS_TO_LONGS</a>(<a class=\"id\" href=\"#pcpu_unit_pages\">pcpu_unit_pages</a>) * sizeof(unsigned long);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Allocate chunk slots.  The additional last slot is for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * empty chunks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcpu_nr_slots\">pcpu_nr_slots</a> = <a class=\"id\" href=\"#__pcpu_size_to_slot\">__pcpu_size_to_slot</a>(<a class=\"id\" href=\"#pcpu_unit_size\">pcpu_unit_size</a>) + 2;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcpu_slot\">pcpu_slot</a> = <a class=\"id\" href=\"#alloc_bootmem\">alloc_bootmem</a>(<a class=\"id\" href=\"#pcpu_nr_slots\">pcpu_nr_slots</a> * sizeof(<a class=\"id\" href=\"#pcpu_slot\">pcpu_slot</a>[0]));", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#pcpu_nr_slots\">pcpu_nr_slots</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#pcpu_slot\">pcpu_slot</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Initialize static chunk.  If reserved_size is zero, the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * static chunk covers static area + dynamic allocation area</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in the first chunk.  If reserved_size is not zero, it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * covers static area + reserved area (mostly used for module</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * static percpu allocation).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schunk\">schunk</a> = <a class=\"id\" href=\"#alloc_bootmem\">alloc_bootmem</a>(<a class=\"id\" href=\"#pcpu_chunk_struct_size\">pcpu_chunk_struct_size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#schunk\">schunk</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schunk\">schunk</a>-><a class=\"id\" href=\"#base_addr\">base_addr</a> = <a class=\"id\" href=\"#base_addr\">base_addr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schunk\">schunk</a>-><a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#smap\">smap</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schunk\">schunk</a>-><a class=\"id\" href=\"#map_alloc\">map_alloc</a> = <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#smap\">smap</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schunk\">schunk</a>-><a class=\"id\" href=\"#immutable\">immutable</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bitmap_fill\">bitmap_fill</a>(<a class=\"id\" href=\"#schunk\">schunk</a>-><a class=\"id\" href=\"#populated\">populated</a>, <a class=\"id\" href=\"#pcpu_unit_pages\">pcpu_unit_pages</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#reserved_size\">reserved_size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schunk\">schunk</a>-><a class=\"id\" href=\"#free_size\">free_size</a> = <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#reserved_size\">reserved_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcpu_reserved_chunk\">pcpu_reserved_chunk</a> = <a class=\"id\" href=\"#schunk\">schunk</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcpu_reserved_chunk_limit\">pcpu_reserved_chunk_limit</a> = <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#static_size\">static_size</a> + <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#reserved_size\">reserved_size</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schunk\">schunk</a>-><a class=\"id\" href=\"#free_size\">free_size</a> = <a class=\"id\" href=\"#dyn_size\">dyn_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dyn_size\">dyn_size</a> = 0;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* dynamic area covered */</span>", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schunk\">schunk</a>-><a class=\"id\" href=\"#contig_hint\">contig_hint</a> = <a class=\"id\" href=\"#schunk\">schunk</a>-><a class=\"id\" href=\"#free_size\">free_size</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#schunk\">schunk</a>-><a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#schunk\">schunk</a>-><a class=\"id\" href=\"#map_used\">map_used</a>++] = -<a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#static_size\">static_size</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#schunk\">schunk</a>-><a class=\"id\" href=\"#free_size\">free_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schunk\">schunk</a>-><a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#schunk\">schunk</a>-><a class=\"id\" href=\"#map_used\">map_used</a>++] = <a class=\"id\" href=\"#schunk\">schunk</a>-><a class=\"id\" href=\"#free_size\">free_size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* init dynamic chunk if necessary */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#dyn_size\">dyn_size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dchunk\">dchunk</a> = <a class=\"id\" href=\"#alloc_bootmem\">alloc_bootmem</a>(<a class=\"id\" href=\"#pcpu_chunk_struct_size\">pcpu_chunk_struct_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#dchunk\">dchunk</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dchunk\">dchunk</a>-><a class=\"id\" href=\"#base_addr\">base_addr</a> = <a class=\"id\" href=\"#base_addr\">base_addr</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dchunk\">dchunk</a>-><a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#dmap\">dmap</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dchunk\">dchunk</a>-><a class=\"id\" href=\"#map_alloc\">map_alloc</a> = <a class=\"id\" href=\"#ARRAY_SIZE\">ARRAY_SIZE</a>(<a class=\"id\" href=\"#dmap\">dmap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dchunk\">dchunk</a>-><a class=\"id\" href=\"#immutable\">immutable</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bitmap_fill\">bitmap_fill</a>(<a class=\"id\" href=\"#dchunk\">dchunk</a>-><a class=\"id\" href=\"#populated\">populated</a>, <a class=\"id\" href=\"#pcpu_unit_pages\">pcpu_unit_pages</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dchunk\">dchunk</a>-><a class=\"id\" href=\"#contig_hint\">contig_hint</a> = <a class=\"id\" href=\"#dchunk\">dchunk</a>-><a class=\"id\" href=\"#free_size\">free_size</a> = <a class=\"id\" href=\"#dyn_size\">dyn_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dchunk\">dchunk</a>-><a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#dchunk\">dchunk</a>-><a class=\"id\" href=\"#map_used\">map_used</a>++] = -<a class=\"id\" href=\"#pcpu_reserved_chunk_limit\">pcpu_reserved_chunk_limit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dchunk\">dchunk</a>-><a class=\"id\" href=\"#map\">map</a>[<a class=\"id\" href=\"#dchunk\">dchunk</a>-><a class=\"id\" href=\"#map_used\">map_used</a>++] = <a class=\"id\" href=\"#dchunk\">dchunk</a>-><a class=\"id\" href=\"#free_size\">free_size</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* link the first chunk in */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcpu_first_chunk\">pcpu_first_chunk</a> = <a class=\"id\" href=\"#dchunk\">dchunk</a> ?: <a class=\"id\" href=\"#schunk\">schunk</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcpu_chunk_relocate\">pcpu_chunk_relocate</a>(<a class=\"id\" href=\"#pcpu_first_chunk\">pcpu_first_chunk</a>, -1);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we're done */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcpu_base_addr\">pcpu_base_addr</a> = <a class=\"id\" href=\"#base_addr\">base_addr</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"const char *<a class=\"id\" href=\"#pcpu_fc_names\">pcpu_fc_names</a>[<a class=\"id\" href=\"#PCPU_FC_NR\">PCPU_FC_NR</a>] <a class=\"id\" href=\"#__initdata\">__initdata</a> = {", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#PCPU_FC_AUTO\">PCPU_FC_AUTO</a>]<span class=\"ts\"/>= \"auto\",", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#PCPU_FC_EMBED\">PCPU_FC_EMBED</a>]<span class=\"ts\"/>= \"embed\",", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#PCPU_FC_PAGE\">PCPU_FC_PAGE</a>]<span class=\"ts\"/>= \"page\",", 
"};", 
"", 
"enum <a class=\"id\" href=\"#pcpu_fc\">pcpu_fc</a> <a class=\"id\" href=\"#pcpu_chosen_fc\">pcpu_chosen_fc</a> <a class=\"id\" href=\"#__initdata\">__initdata</a> = <a class=\"id\" href=\"#PCPU_FC_AUTO\">PCPU_FC_AUTO</a>;", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#percpu_alloc_setup\">percpu_alloc_setup</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/>if (0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* nada */</span>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NEED_PER_CPU_EMBED_FIRST_CHUNK\">CONFIG_NEED_PER_CPU_EMBED_FIRST_CHUNK</a>", 
"<span class=\"ts\"/>else if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#str\">str</a>, \"embed\"))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcpu_chosen_fc\">pcpu_chosen_fc</a> = <a class=\"id\" href=\"#PCPU_FC_EMBED\">PCPU_FC_EMBED</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NEED_PER_CPU_PAGE_FIRST_CHUNK\">CONFIG_NEED_PER_CPU_PAGE_FIRST_CHUNK</a>", 
"<span class=\"ts\"/>else if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#str\">str</a>, \"page\"))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pcpu_chosen_fc\">pcpu_chosen_fc</a> = <a class=\"id\" href=\"#PCPU_FC_PAGE\">PCPU_FC_PAGE</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"PERCPU: unknown allocator %s specified\\n\", <a class=\"id\" href=\"#str\">str</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#early_param\">early_param</a>(\"percpu_alloc\", <a class=\"id\" href=\"#percpu_alloc_setup\">percpu_alloc_setup</a>);", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_NEED_PER_CPU_EMBED_FIRST_CHUNK\">CONFIG_NEED_PER_CPU_EMBED_FIRST_CHUNK</a>) || \\", 
"<span class=\"ts\"/>!<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_HAVE_SETUP_PER_CPU_AREA\">CONFIG_HAVE_SETUP_PER_CPU_AREA</a>)", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pcpu_embed_first_chunk - embed the first percpu chunk into bootmem</span>", 
"<span class=\"comment\"> * @reserved_size: the size of reserved percpu area in bytes</span>", 
"<span class=\"comment\"> * @dyn_size: minimum free size for dynamic allocation in bytes</span>", 
"<span class=\"comment\"> * @atom_size: allocation atom size</span>", 
"<span class=\"comment\"> * @cpu_distance_fn: callback to determine distance between cpus, optional</span>", 
"<span class=\"comment\"> * @alloc_fn: function to allocate percpu page</span>", 
"<span class=\"comment\"> * @free_fn: funtion to free percpu page</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is a helper to ease setting up embedded first percpu chunk and</span>", 
"<span class=\"comment\"> * can be called where pcpu_setup_first_chunk() is expected.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If this function is used to setup the first chunk, it is allocated</span>", 
"<span class=\"comment\"> * by calling @alloc_fn and used as-is without being mapped into</span>", 
"<span class=\"comment\"> * vmalloc area.  Allocations are always whole multiples of @atom_size</span>", 
"<span class=\"comment\"> * aligned to @atom_size.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This enables the first chunk to piggy back on the linear physical</span>", 
"<span class=\"comment\"> * mapping which often uses larger page size.  Please note that this</span>", 
"<span class=\"comment\"> * can result in very sparse cpu-&gt;unit mapping on NUMA machines thus</span>", 
"<span class=\"comment\"> * requiring large vmalloc address space.  Don't use this allocator if</span>", 
"<span class=\"comment\"> * vmalloc space is not orders of magnitude larger than distances</span>", 
"<span class=\"comment\"> * between node memory addresses (ie. 32bit NUMA machines).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @dyn_size specifies the minimum dynamic area size.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the needed size is smaller than the minimum or specified unit</span>", 
"<span class=\"comment\"> * size, the leftover is returned using @free_fn.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * 0 on success, -errno on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#pcpu_embed_first_chunk\">pcpu_embed_first_chunk</a>(<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#reserved_size\">reserved_size</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#dyn_size\">dyn_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#atom_size\">atom_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#pcpu_fc_cpu_distance_fn_t\">pcpu_fc_cpu_distance_fn_t</a> <a class=\"id\" href=\"#cpu_distance_fn\">cpu_distance_fn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#pcpu_fc_alloc_fn_t\">pcpu_fc_alloc_fn_t</a> <a class=\"id\" href=\"#alloc_fn\">alloc_fn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#pcpu_fc_free_fn_t\">pcpu_fc_free_fn_t</a> <a class=\"id\" href=\"#free_fn\">free_fn</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#base\">base</a> = (void *)<a class=\"id\" href=\"#ULONG_MAX\">ULONG_MAX</a>;", 
"<span class=\"ts\"/>void **<a class=\"id\" href=\"#areas\">areas</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pcpu_alloc_info\">pcpu_alloc_info</a> *<a class=\"id\" href=\"#ai\">ai</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size_sum\">size_sum</a>, <a class=\"id\" href=\"#areas_size\">areas_size</a>, <a class=\"id\" href=\"#max_distance\">max_distance</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#group\">group</a>, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ai\">ai</a> = <a class=\"id\" href=\"#pcpu_build_alloc_info\">pcpu_build_alloc_info</a>(<a class=\"id\" href=\"#reserved_size\">reserved_size</a>, <a class=\"id\" href=\"#dyn_size\">dyn_size</a>, <a class=\"id\" href=\"#atom_size\">atom_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#cpu_distance_fn\">cpu_distance_fn</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#ai\">ai</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#ai\">ai</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_sum\">size_sum</a> = <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#static_size\">static_size</a> + <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#reserved_size\">reserved_size</a> + <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#dyn_size\">dyn_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#areas_size\">areas_size</a> = <a class=\"id\" href=\"#PFN_ALIGN\">PFN_ALIGN</a>(<a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#nr_groups\">nr_groups</a> * sizeof(void *));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#areas\">areas</a> = <a class=\"id\" href=\"#alloc_bootmem_nopanic\">alloc_bootmem_nopanic</a>(<a class=\"id\" href=\"#areas_size\">areas_size</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#areas\">areas</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* allocate, copy and determine base address */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#group\">group</a> = 0; <a class=\"id\" href=\"#group\">group</a> &lt; <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#nr_groups\">nr_groups</a>; <a class=\"id\" href=\"#group\">group</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#pcpu_group_info\">pcpu_group_info</a> *<a class=\"id\" href=\"#gi\">gi</a> = &amp;<a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#groups\">groups</a>[<a class=\"id\" href=\"#group\">group</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#ptr\">ptr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#gi\">gi</a>-><a class=\"id\" href=\"#nr_units\">nr_units</a> && <a class=\"id\" href=\"#cpu\">cpu</a> == <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#gi\">gi</a>-><a class=\"id\" href=\"#cpu_map\">cpu_map</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#cpu\">cpu</a> == <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* allocate space for the whole group */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#alloc_fn\">alloc_fn</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#gi\">gi</a>-><a class=\"id\" href=\"#nr_units\">nr_units</a> * <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#unit_size\">unit_size</a>, <a class=\"id\" href=\"#atom_size\">atom_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ptr\">ptr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_areas\">out_free_areas</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#areas\">areas</a>[<a class=\"id\" href=\"#group\">group</a>] = <a class=\"id\" href=\"#ptr\">ptr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#base\">base</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#base\">base</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#gi\">gi</a>-><a class=\"id\" href=\"#nr_units\">nr_units</a>; <a class=\"id\" href=\"#i\">i</a>++, <a class=\"id\" href=\"#ptr\">ptr</a> += <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#unit_size\">unit_size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#gi\">gi</a>-><a class=\"id\" href=\"#cpu_map\">cpu_map</a>[<a class=\"id\" href=\"#i\">i</a>] == <a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* unused unit, free whole */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_fn\">free_fn</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#unit_size\">unit_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* copy and return the unused part */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#__per_cpu_load\">__per_cpu_load</a>, <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#static_size\">static_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_fn\">free_fn</a>(<a class=\"id\" href=\"#ptr\">ptr</a> + <a class=\"id\" href=\"#size_sum\">size_sum</a>, <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#unit_size\">unit_size</a> - <a class=\"id\" href=\"#size_sum\">size_sum</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* base address is now known, determine group base offsets */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_distance\">max_distance</a> = 0;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#group\">group</a> = 0; <a class=\"id\" href=\"#group\">group</a> &lt; <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#nr_groups\">nr_groups</a>; <a class=\"id\" href=\"#group\">group</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#groups\">groups</a>[<a class=\"id\" href=\"#group\">group</a>].<a class=\"id\" href=\"#base_offset\">base_offset</a> = <a class=\"id\" href=\"#areas\">areas</a>[<a class=\"id\" href=\"#group\">group</a>] - <a class=\"id\" href=\"#base\">base</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_distance\">max_distance</a> = <a class=\"id\" href=\"#max_t\">max_t</a>(<a class=\"id\" href=\"#size_t\">size_t</a>, <a class=\"id\" href=\"#max_distance\">max_distance</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#groups\">groups</a>[<a class=\"id\" href=\"#group\">group</a>].<a class=\"id\" href=\"#base_offset\">base_offset</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_distance\">max_distance</a> += <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#unit_size\">unit_size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* warn if maximum distance is further than 75% of vmalloc space */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#max_distance\">max_distance</a> &gt; (<a class=\"id\" href=\"#VMALLOC_END\">VMALLOC_END</a> - <a class=\"id\" href=\"#VMALLOC_START\">VMALLOC_START</a>) * 3 / 4) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"PERCPU: max_distance=0x%zx too large for vmalloc \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"space 0x%lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#max_distance\">max_distance</a>, <a class=\"id\" href=\"#VMALLOC_END\">VMALLOC_END</a> - <a class=\"id\" href=\"#VMALLOC_START\">VMALLOC_START</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NEED_PER_CPU_PAGE_FIRST_CHUNK\">CONFIG_NEED_PER_CPU_PAGE_FIRST_CHUNK</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* and fail if we have fallback */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"PERCPU: Embedded %zu pages/cpu @%p s%zu r%zu d%zu u%zu\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PFN_DOWN\">PFN_DOWN</a>(<a class=\"id\" href=\"#size_sum\">size_sum</a>), <a class=\"id\" href=\"#base\">base</a>, <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#static_size\">static_size</a>, <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#reserved_size\">reserved_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#dyn_size\">dyn_size</a>, <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#unit_size\">unit_size</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#pcpu_setup_first_chunk\">pcpu_setup_first_chunk</a>(<a class=\"id\" href=\"#ai\">ai</a>, <a class=\"id\" href=\"#base\">base</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"", 
"<a class=\"id\" href=\"#out_free_areas\">out_free_areas</a>:", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#group\">group</a> = 0; <a class=\"id\" href=\"#group\">group</a> &lt; <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#nr_groups\">nr_groups</a>; <a class=\"id\" href=\"#group\">group</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_fn\">free_fn</a>(<a class=\"id\" href=\"#areas\">areas</a>[<a class=\"id\" href=\"#group\">group</a>],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#groups\">groups</a>[<a class=\"id\" href=\"#group\">group</a>].<a class=\"id\" href=\"#nr_units\">nr_units</a> * <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#unit_size\">unit_size</a>);", 
"<a class=\"id\" href=\"#out_free\">out_free</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcpu_free_alloc_info\">pcpu_free_alloc_info</a>(<a class=\"id\" href=\"#ai\">ai</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#areas\">areas</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_bootmem\">free_bootmem</a>(<a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#areas\">areas</a>), <a class=\"id\" href=\"#areas_size\">areas_size</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_NEED_PER_CPU_EMBED_FIRST_CHUNK ||</span>", 
"<span class=\"comment\"><span class=\"ts\"/>  !CONFIG_HAVE_SETUP_PER_CPU_AREA */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_NEED_PER_CPU_PAGE_FIRST_CHUNK\">CONFIG_NEED_PER_CPU_PAGE_FIRST_CHUNK</a>", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * pcpu_page_first_chunk - map the first chunk using PAGE_SIZE pages</span>", 
"<span class=\"comment\"> * @reserved_size: the size of reserved percpu area in bytes</span>", 
"<span class=\"comment\"> * @alloc_fn: function to allocate percpu page, always called with PAGE_SIZE</span>", 
"<span class=\"comment\"> * @free_fn: funtion to free percpu page, always called with PAGE_SIZE</span>", 
"<span class=\"comment\"> * @populate_pte_fn: function to populate pte</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is a helper to ease setting up page-remapped first percpu</span>", 
"<span class=\"comment\"> * chunk and can be called where pcpu_setup_first_chunk() is expected.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is the basic allocator.  Static percpu area is allocated</span>", 
"<span class=\"comment\"> * page-by-page into vmalloc area.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * 0 on success, -errno on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#pcpu_page_first_chunk\">pcpu_page_first_chunk</a>(<a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#reserved_size\">reserved_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#pcpu_fc_alloc_fn_t\">pcpu_fc_alloc_fn_t</a> <a class=\"id\" href=\"#alloc_fn\">alloc_fn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#pcpu_fc_free_fn_t\">pcpu_fc_free_fn_t</a> <a class=\"id\" href=\"#free_fn\">free_fn</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#pcpu_fc_populate_pte_fn_t\">pcpu_fc_populate_pte_fn_t</a> <a class=\"id\" href=\"#populate_pte_fn\">populate_pte_fn</a>)", 
"{", 
"<span class=\"ts\"/>static struct <a class=\"id\" href=\"#vm_struct\">vm_struct</a> <a class=\"id\" href=\"#vm\">vm</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pcpu_alloc_info\">pcpu_alloc_info</a> *<a class=\"id\" href=\"#ai\">ai</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#psize_str\">psize_str</a>[16];", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#unit_pages\">unit_pages</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#pages_size\">pages_size</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> **<a class=\"id\" href=\"#pages\">pages</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#unit\">unit</a>, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#psize_str\">psize_str</a>, sizeof(<a class=\"id\" href=\"#psize_str\">psize_str</a>), \"%luK\", <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> >> 10);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ai\">ai</a> = <a class=\"id\" href=\"#pcpu_build_alloc_info\">pcpu_build_alloc_info</a>(<a class=\"id\" href=\"#reserved_size\">reserved_size</a>, 0, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#ai\">ai</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#ai\">ai</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#nr_groups\">nr_groups</a> != 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#groups\">groups</a>[0].<a class=\"id\" href=\"#nr_units\">nr_units</a> != <a class=\"id\" href=\"#num_possible_cpus\">num_possible_cpus</a>());", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unit_pages\">unit_pages</a> = <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#unit_size\">unit_size</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* unaligned allocations can't be freed, round up to page size */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pages_size\">pages_size</a> = <a class=\"id\" href=\"#PFN_ALIGN\">PFN_ALIGN</a>(<a class=\"id\" href=\"#unit_pages\">unit_pages</a> * <a class=\"id\" href=\"#num_possible_cpus\">num_possible_cpus</a>() *", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       sizeof(<a class=\"id\" href=\"#pages\">pages</a>[0]));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a> = <a class=\"id\" href=\"#alloc_bootmem\">alloc_bootmem</a>(<a class=\"id\" href=\"#pages_size\">pages_size</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* allocate pages */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#j\">j</a> = 0;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#unit\">unit</a> = 0; <a class=\"id\" href=\"#unit\">unit</a> &lt; <a class=\"id\" href=\"#num_possible_cpus\">num_possible_cpus</a>(); <a class=\"id\" href=\"#unit\">unit</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#unit_pages\">unit_pages</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#groups\">groups</a>[0].<a class=\"id\" href=\"#cpu_map\">cpu_map</a>[<a class=\"id\" href=\"#unit\">unit</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#ptr\">ptr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ptr\">ptr</a> = <a class=\"id\" href=\"#alloc_fn\">alloc_fn</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ptr\">ptr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"PERCPU: failed to allocate %s page \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"for cpu%u\\n\", <a class=\"id\" href=\"#psize_str\">psize_str</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#enomem\">enomem</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#j\">j</a>++] = <a class=\"id\" href=\"#virt_to_page\">virt_to_page</a>(<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* allocate vm area, map the pages and copy static data */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vm\">vm</a>.<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#VM_ALLOC\">VM_ALLOC</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vm\">vm</a>.<a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#num_possible_cpus\">num_possible_cpus</a>() * <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#unit_size\">unit_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vm_area_register_early\">vm_area_register_early</a>(&amp;<a class=\"id\" href=\"#vm\">vm</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#unit\">unit</a> = 0; <a class=\"id\" href=\"#unit\">unit</a> &lt; <a class=\"id\" href=\"#num_possible_cpus\">num_possible_cpus</a>(); <a class=\"id\" href=\"#unit\">unit</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#unit_addr\">unit_addr</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long)<a class=\"id\" href=\"#vm\">vm</a>.<a class=\"id\" href=\"#addr\">addr</a> + <a class=\"id\" href=\"#unit\">unit</a> * <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#unit_size\">unit_size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#unit_pages\">unit_pages</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#populate_pte_fn\">populate_pte_fn</a>(<a class=\"id\" href=\"#unit_addr\">unit_addr</a> + (<a class=\"id\" href=\"#i\">i</a> << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* pte already populated, the following shouldn't fail */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#__pcpu_map_pages\">__pcpu_map_pages</a>(<a class=\"id\" href=\"#unit_addr\">unit_addr</a>, &amp;<a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#unit\">unit</a> * <a class=\"id\" href=\"#unit_pages\">unit_pages</a>],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#unit_pages\">unit_pages</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"failed to map percpu area, err=%d\\n\", <a class=\"id\" href=\"#rc\">rc</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * FIXME: Archs with virtual cache should flush local</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * cache for the linear mapping here - something</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * equivalent to flush_cache_vmap() on the local cpu.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * flush_cache_vmap() can't be used as most supporting</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * data structures are not set up yet.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* copy static data */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>((void *)<a class=\"id\" href=\"#unit_addr\">unit_addr</a>, <a class=\"id\" href=\"#__per_cpu_load\">__per_cpu_load</a>, <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#static_size\">static_size</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* we're ready, commit */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"PERCPU: %d %s pages/cpu @%p s%zu r%zu d%zu\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unit_pages\">unit_pages</a>, <a class=\"id\" href=\"#psize_str\">psize_str</a>, <a class=\"id\" href=\"#vm\">vm</a>.<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#static_size\">static_size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#reserved_size\">reserved_size</a>, <a class=\"id\" href=\"#ai\">ai</a>-><a class=\"id\" href=\"#dyn_size\">dyn_size</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#pcpu_setup_first_chunk\">pcpu_setup_first_chunk</a>(<a class=\"id\" href=\"#ai\">ai</a>, <a class=\"id\" href=\"#vm\">vm</a>.<a class=\"id\" href=\"#addr\">addr</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_ar\">out_free_ar</a>;", 
"", 
"<a class=\"id\" href=\"#enomem\">enomem</a>:", 
"<span class=\"ts\"/>while (--<a class=\"id\" href=\"#j\">j</a> >= 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_fn\">free_fn</a>(<a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#pages\">pages</a>[<a class=\"id\" href=\"#j\">j</a>]), <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<a class=\"id\" href=\"#out_free_ar\">out_free_ar</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_bootmem\">free_bootmem</a>(<a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#pages\">pages</a>), <a class=\"id\" href=\"#pages_size\">pages_size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pcpu_free_alloc_info\">pcpu_free_alloc_info</a>(<a class=\"id\" href=\"#ai\">ai</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_NEED_PER_CPU_PAGE_FIRST_CHUNK */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Generic percpu area setup.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The embedding helper is used because its behavior closely resembles</span>", 
"<span class=\"comment\"> * the original non-dynamic generic percpu area setup.  This is</span>", 
"<span class=\"comment\"> * important because many archs have addressing restrictions and might</span>", 
"<span class=\"comment\"> * fail if the percpu area is located far away from the previous</span>", 
"<span class=\"comment\"> * location.  As an added bonus, in non-NUMA cases, embedding is</span>", 
"<span class=\"comment\"> * generally a good idea TLB-wise because percpu area can piggy back</span>", 
"<span class=\"comment\"> * on the physical linear memory mapping which uses large page</span>", 
"<span class=\"comment\"> * mappings on applicable archs.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_HAVE_SETUP_PER_CPU_AREA\">CONFIG_HAVE_SETUP_PER_CPU_AREA</a>", 
"unsigned long <a class=\"id\" href=\"#__per_cpu_offset\">__per_cpu_offset</a>[<a class=\"id\" href=\"#NR_CPUS\">NR_CPUS</a>] <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__per_cpu_offset\">__per_cpu_offset</a>);", 
"", 
"static void * <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#pcpu_dfl_fc_alloc\">pcpu_dfl_fc_alloc</a>(unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#align\">align</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__alloc_bootmem_nopanic\">__alloc_bootmem_nopanic</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#align\">align</a>, <a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#MAX_DMA_ADDRESS\">MAX_DMA_ADDRESS</a>));", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#pcpu_dfl_fc_free\">pcpu_dfl_fc_free</a>(void *<a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_bootmem\">free_bootmem</a>(<a class=\"id\" href=\"#__pa\">__pa</a>(<a class=\"id\" href=\"#ptr\">ptr</a>), <a class=\"id\" href=\"#size\">size</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#setup_per_cpu_areas\">setup_per_cpu_areas</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#delta\">delta</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rc\">rc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Always reserve area for module percpu variables.  That's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * what the legacy allocator did.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#pcpu_embed_first_chunk\">pcpu_embed_first_chunk</a>(<a class=\"id\" href=\"#PERCPU_MODULE_RESERVE\">PERCPU_MODULE_RESERVE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#PERCPU_DYNAMIC_RESERVE\">PERCPU_DYNAMIC_RESERVE</a>, <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>, <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#pcpu_dfl_fc_alloc\">pcpu_dfl_fc_alloc</a>, <a class=\"id\" href=\"#pcpu_dfl_fc_free\">pcpu_dfl_fc_free</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"Failed to initialized percpu areas.\");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = (unsigned long)<a class=\"id\" href=\"#pcpu_base_addr\">pcpu_base_addr</a> - (unsigned long)<a class=\"id\" href=\"#__per_cpu_start\">__per_cpu_start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__per_cpu_offset\">__per_cpu_offset</a>[<a class=\"id\" href=\"#cpu\">cpu</a>] = <a class=\"id\" href=\"#delta\">delta</a> + <a class=\"id\" href=\"#pcpu_unit_offsets\">pcpu_unit_offsets</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_HAVE_SETUP_PER_CPU_AREA */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * First and reserved chunks are initialized with temporary allocation</span>", 
"<span class=\"comment\"> * map in initdata so that they can be used before slab is online.</span>", 
"<span class=\"comment\"> * This function is called after slab is brought up and replaces those</span>", 
"<span class=\"comment\"> * with properly allocated maps.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#percpu_init_late\">percpu_init_late</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a> *<a class=\"id\" href=\"#target_chunks\">target_chunks</a>[] =", 
"<span class=\"ts\"/><span class=\"ts\"/>{ <a class=\"id\" href=\"#pcpu_first_chunk\">pcpu_first_chunk</a>, <a class=\"id\" href=\"#pcpu_reserved_chunk\">pcpu_reserved_chunk</a>, <a class=\"id\" href=\"#NULL\">NULL</a> };", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pcpu_chunk\">pcpu_chunk</a> *<a class=\"id\" href=\"#chunk\">chunk</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; (<a class=\"id\" href=\"#chunk\">chunk</a> = <a class=\"id\" href=\"#target_chunks\">target_chunks</a>[<a class=\"id\" href=\"#i\">i</a>]); <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int *<a class=\"id\" href=\"#map\">map</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#PERCPU_DYNAMIC_EARLY_SLOTS\">PERCPU_DYNAMIC_EARLY_SLOTS</a> * sizeof(<a class=\"id\" href=\"#map\">map</a>[0]);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUILD_BUG_ON\">BUILD_BUG_ON</a>(<a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#pcpu_mem_alloc\">pcpu_mem_alloc</a>(<a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#map\">map</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#pcpu_lock\">pcpu_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#map\">map</a>, <a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#chunk\">chunk</a>-><a class=\"id\" href=\"#map\">map</a> = <a class=\"id\" href=\"#map\">map</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#pcpu_lock\">pcpu_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"}", 
];
xr_frag_insert('l/23/b978505f325d5f0b587505c086cb00d93f89fd.xr', __xr_tmp);
