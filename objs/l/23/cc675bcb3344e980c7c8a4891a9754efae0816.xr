var __xr_tmp = [
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hardirq\">hardirq</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#x86_init\">x86_init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#xen\">xen</a>/<a class=\"id\" href=\"#interface\">interface</a>/<a class=\"id\" href=\"#xen\">xen</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#xen\">xen</a>/<a class=\"id\" href=\"#interface\">interface</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#xen\">xen</a>/<a class=\"id\" href=\"#interface\">interface</a>/<a class=\"id\" href=\"#vcpu\">vcpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#xen\">xen</a>/<a class=\"id\" href=\"#hypercall\">hypercall</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#xen\">xen</a>/<a class=\"id\" href=\"#hypervisor\">hypervisor</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"xen-ops.h\"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Force a proper event-channel callback from Xen after clearing the</span>", 
"<span class=\"comment\"> * callback mask. We do this in a very simple manner, by making a call</span>", 
"<span class=\"comment\"> * down into Xen. The pending flag will be checked by Xen on return.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#xen_force_evtchn_callback\">xen_force_evtchn_callback</a>(void)", 
"{", 
"<span class=\"ts\"/>(void)<a class=\"id\" href=\"#HYPERVISOR_xen_version\">HYPERVISOR_xen_version</a>(0, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"static unsigned long <a class=\"id\" href=\"#xen_save_fl\">xen_save_fl</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vcpu_info\">vcpu_info</a> *<a class=\"id\" href=\"#vcpu\">vcpu</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vcpu\">vcpu</a> = <a class=\"id\" href=\"#percpu_read\">percpu_read</a>(<a class=\"id\" href=\"#xen_vcpu\">xen_vcpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* flag has opposite sense of mask */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> = !<a class=\"id\" href=\"#vcpu\">vcpu</a>-><a class=\"id\" href=\"#evtchn_upcall_mask\">evtchn_upcall_mask</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* convert to IF type flag</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   -0 -&gt; 0x00000000</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   -1 -&gt; 0xffffffff</span>", 
"<span class=\"comment\"><span class=\"ts\"/>*/</span>", 
"<span class=\"ts\"/>return (-<a class=\"id\" href=\"#flags\">flags</a>) &amp; <a class=\"id\" href=\"#X86_EFLAGS_IF\">X86_EFLAGS_IF</a>;", 
"}", 
"<a class=\"id\" href=\"#PV_CALLEE_SAVE_REGS_THUNK\">PV_CALLEE_SAVE_REGS_THUNK</a>(<a class=\"id\" href=\"#xen_save_fl\">xen_save_fl</a>);", 
"", 
"static void <a class=\"id\" href=\"#xen_restore_fl\">xen_restore_fl</a>(unsigned long <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vcpu_info\">vcpu_info</a> *<a class=\"id\" href=\"#vcpu\">vcpu</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* convert from IF type flag */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flags\">flags</a> = !(<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#X86_EFLAGS_IF\">X86_EFLAGS_IF</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* There's a one instruction preempt window here.  We need to</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   make sure we're don't switch CPUs between getting the vcpu</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   pointer and updating the mask. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vcpu\">vcpu</a> = <a class=\"id\" href=\"#percpu_read\">percpu_read</a>(<a class=\"id\" href=\"#xen_vcpu\">xen_vcpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vcpu\">vcpu</a>-><a class=\"id\" href=\"#evtchn_upcall_mask\">evtchn_upcall_mask</a> = <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable_no_resched\">preempt_enable_no_resched</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Doesn't matter if we get preempted here, because any</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   pending event will get dealt with anyway. */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_check_resched\">preempt_check_resched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>(); <span class=\"comment\">/* unmask then check (avoid races) */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#vcpu\">vcpu</a>-><a class=\"id\" href=\"#evtchn_upcall_pending\">evtchn_upcall_pending</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xen_force_evtchn_callback\">xen_force_evtchn_callback</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#PV_CALLEE_SAVE_REGS_THUNK\">PV_CALLEE_SAVE_REGS_THUNK</a>(<a class=\"id\" href=\"#xen_restore_fl\">xen_restore_fl</a>);", 
"", 
"static void <a class=\"id\" href=\"#xen_irq_disable\">xen_irq_disable</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* There's a one instruction preempt window here.  We need to</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   make sure we're don't switch CPUs between getting the vcpu</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   pointer and updating the mask. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#percpu_read\">percpu_read</a>(<a class=\"id\" href=\"#xen_vcpu\">xen_vcpu</a>)-><a class=\"id\" href=\"#evtchn_upcall_mask\">evtchn_upcall_mask</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable_no_resched\">preempt_enable_no_resched</a>();", 
"}", 
"<a class=\"id\" href=\"#PV_CALLEE_SAVE_REGS_THUNK\">PV_CALLEE_SAVE_REGS_THUNK</a>(<a class=\"id\" href=\"#xen_irq_disable\">xen_irq_disable</a>);", 
"", 
"static void <a class=\"id\" href=\"#xen_irq_enable\">xen_irq_enable</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vcpu_info\">vcpu_info</a> *<a class=\"id\" href=\"#vcpu\">vcpu</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We don't need to worry about being preempted here, since</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   either a) interrupts are disabled, so no preemption, or b)</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   the caller is confused and is trying to re-enable interrupts</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   on an indeterminate processor. */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vcpu\">vcpu</a> = <a class=\"id\" href=\"#percpu_read\">percpu_read</a>(<a class=\"id\" href=\"#xen_vcpu\">xen_vcpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#vcpu\">vcpu</a>-><a class=\"id\" href=\"#evtchn_upcall_mask\">evtchn_upcall_mask</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Doesn't matter if we get preempted here, because any</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   pending event will get dealt with anyway. */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>(); <span class=\"comment\">/* unmask then check (avoid races) */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#vcpu\">vcpu</a>-><a class=\"id\" href=\"#evtchn_upcall_pending\">evtchn_upcall_pending</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xen_force_evtchn_callback\">xen_force_evtchn_callback</a>();", 
"}", 
"<a class=\"id\" href=\"#PV_CALLEE_SAVE_REGS_THUNK\">PV_CALLEE_SAVE_REGS_THUNK</a>(<a class=\"id\" href=\"#xen_irq_enable\">xen_irq_enable</a>);", 
"", 
"static void <a class=\"id\" href=\"#xen_safe_halt\">xen_safe_halt</a>(void)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Blocking includes an implicit local_irq_enable(). */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#HYPERVISOR_sched_op\">HYPERVISOR_sched_op</a>(<a class=\"id\" href=\"#SCHEDOP_block\">SCHEDOP_block</a>, <a class=\"id\" href=\"#NULL\">NULL</a>) != 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG\">BUG</a>();", 
"}", 
"", 
"static void <a class=\"id\" href=\"#xen_halt\">xen_halt</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#HYPERVISOR_vcpu_op\">HYPERVISOR_vcpu_op</a>(<a class=\"id\" href=\"#VCPUOP_down\">VCPUOP_down</a>, <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>(), <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xen_safe_halt\">xen_safe_halt</a>();", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#pv_irq_ops\">pv_irq_ops</a> <a class=\"id\" href=\"#xen_irq_ops\">xen_irq_ops</a> <a class=\"id\" href=\"#__initdata\">__initdata</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#save_fl\">save_fl</a> = <a class=\"id\" href=\"#PV_CALLEE_SAVE\">PV_CALLEE_SAVE</a>(<a class=\"id\" href=\"#xen_save_fl\">xen_save_fl</a>),", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#restore_fl\">restore_fl</a> = <a class=\"id\" href=\"#PV_CALLEE_SAVE\">PV_CALLEE_SAVE</a>(<a class=\"id\" href=\"#xen_restore_fl\">xen_restore_fl</a>),", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#irq_disable\">irq_disable</a> = <a class=\"id\" href=\"#PV_CALLEE_SAVE\">PV_CALLEE_SAVE</a>(<a class=\"id\" href=\"#xen_irq_disable\">xen_irq_disable</a>),", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#irq_enable\">irq_enable</a> = <a class=\"id\" href=\"#PV_CALLEE_SAVE\">PV_CALLEE_SAVE</a>(<a class=\"id\" href=\"#xen_irq_enable\">xen_irq_enable</a>),", 
"", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#safe_halt\">safe_halt</a> = <a class=\"id\" href=\"#xen_safe_halt\">xen_safe_halt</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#halt\">halt</a> = <a class=\"id\" href=\"#xen_halt\">xen_halt</a>,", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_64\">CONFIG_X86_64</a>", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#adjust_exception_frame\">adjust_exception_frame</a> = <a class=\"id\" href=\"#xen_adjust_exception_frame\">xen_adjust_exception_frame</a>,", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#xen_init_irq_ops\">xen_init_irq_ops</a>()", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pv_irq_ops\">pv_irq_ops</a> = <a class=\"id\" href=\"#xen_irq_ops\">xen_irq_ops</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#x86_init\">x86_init</a>.<a class=\"id\" href=\"#irqs\">irqs</a>.<a class=\"id\" href=\"#intr_init\">intr_init</a> = <a class=\"id\" href=\"#xen_init_IRQ\">xen_init_IRQ</a>;", 
"}", 
];
xr_frag_insert('l/23/cc675bcb3344e980c7c8a4891a9754efae0816.xr', __xr_tmp);
