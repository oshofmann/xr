var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Sleepable Read-Copy Update mechanism for mutual exclusion</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> * it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> * the Free Software Foundation; either version 2 of the License, or</span>", 
"<span class=\"comment\"> * (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> * GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> * along with this program; if not, write to the Free Software</span>", 
"<span class=\"comment\"> * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) IBM Corporation, 2006</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Author: Paul McKenney &lt;paulmck@us.ibm.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For detailed explanation of Read-Copy Update mechanism see -</span>", 
"<span class=\"comment\"> * <span class=\"ts\"/><span class=\"ts\"/>Documentation/RCU/ *.txt</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_SRCU_H\">_LINUX_SRCU_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_SRCU_H\">_LINUX_SRCU_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#srcu_struct_array\">srcu_struct_array</a> {", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#c\">c</a>[2];", 
"};", 
"", 
"struct <a class=\"id\" href=\"#srcu_struct\">srcu_struct</a> {", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#completed\">completed</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#srcu_struct_array\">srcu_struct_array</a> <a class=\"id\" href=\"#__percpu\">__percpu</a> *<a class=\"id\" href=\"#per_cpu_ref\">per_cpu_ref</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#mutex\">mutex</a> <a class=\"id\" href=\"#mutex\">mutex</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_LOCK_ALLOC\">CONFIG_DEBUG_LOCK_ALLOC</a>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#lockdep_map\">lockdep_map</a> <a class=\"id\" href=\"#dep_map\">dep_map</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #ifdef CONFIG_DEBUG_LOCK_ALLOC */</span>", 
"};", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_PREEMPT\">CONFIG_PREEMPT</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#srcu_barrier\">srcu_barrier</a>() <a class=\"id\" href=\"#barrier\">barrier</a>()", 
"#else <span class=\"comment\">/* #ifndef CONFIG_PREEMPT */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#srcu_barrier\">srcu_barrier</a>()", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #else #ifndef CONFIG_PREEMPT */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_LOCK_ALLOC\">CONFIG_DEBUG_LOCK_ALLOC</a>", 
"", 
"int <a class=\"id\" href=\"#__init_srcu_struct\">__init_srcu_struct</a>(struct <a class=\"id\" href=\"#srcu_struct\">srcu_struct</a> *<a class=\"id\" href=\"#sp\">sp</a>, const char *<a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> *<a class=\"id\" href=\"#key\">key</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#init_srcu_struct\">init_srcu_struct</a>(<a class=\"id\" href=\"#sp\">sp</a>) \\", 
"({ \\", 
"<span class=\"ts\"/>static struct <a class=\"id\" href=\"#lock_class_key\">lock_class_key</a> <a class=\"id\" href=\"#__srcu_key\">__srcu_key</a>; \\", 
"<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__init_srcu_struct\">__init_srcu_struct</a>((<a class=\"id\" href=\"#sp\">sp</a>), #<a class=\"id\" href=\"#sp\">sp</a>, &amp;<a class=\"id\" href=\"#__srcu_key\">__srcu_key</a>); \\", 
"})", 
"", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#srcu_read_acquire\">srcu_read_acquire</a>(<a class=\"id\" href=\"#sp\">sp</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_acquire\">lock_acquire</a>(&amp;(<a class=\"id\" href=\"#sp\">sp</a>)-><a class=\"id\" href=\"#dep_map\">dep_map</a>, 0, 0, 2, 1, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#_THIS_IP_\">_THIS_IP_</a>)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#srcu_read_release\">srcu_read_release</a>(<a class=\"id\" href=\"#sp\">sp</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_release\">lock_release</a>(&amp;(<a class=\"id\" href=\"#sp\">sp</a>)-><a class=\"id\" href=\"#dep_map\">dep_map</a>, 1, <a class=\"id\" href=\"#_THIS_IP_\">_THIS_IP_</a>)", 
"", 
"#else <span class=\"comment\">/* #ifdef CONFIG_DEBUG_LOCK_ALLOC */</span>", 
"", 
"int <a class=\"id\" href=\"#init_srcu_struct\">init_srcu_struct</a>(struct <a class=\"id\" href=\"#srcu_struct\">srcu_struct</a> *<a class=\"id\" href=\"#sp\">sp</a>);", 
"", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#srcu_read_acquire\">srcu_read_acquire</a>(<a class=\"id\" href=\"#sp\">sp</a>)  do { } while (0)", 
"# <a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#srcu_read_release\">srcu_read_release</a>(<a class=\"id\" href=\"#sp\">sp</a>)  do { } while (0)", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #else #ifdef CONFIG_DEBUG_LOCK_ALLOC */</span>", 
"", 
"void <a class=\"id\" href=\"#cleanup_srcu_struct\">cleanup_srcu_struct</a>(struct <a class=\"id\" href=\"#srcu_struct\">srcu_struct</a> *<a class=\"id\" href=\"#sp\">sp</a>);", 
"int <a class=\"id\" href=\"#__srcu_read_lock\">__srcu_read_lock</a>(struct <a class=\"id\" href=\"#srcu_struct\">srcu_struct</a> *<a class=\"id\" href=\"#sp\">sp</a>) <a class=\"id\" href=\"#__acquires\">__acquires</a>(<a class=\"id\" href=\"#sp\">sp</a>);", 
"void <a class=\"id\" href=\"#__srcu_read_unlock\">__srcu_read_unlock</a>(struct <a class=\"id\" href=\"#srcu_struct\">srcu_struct</a> *<a class=\"id\" href=\"#sp\">sp</a>, int <a class=\"id\" href=\"#idx\">idx</a>) <a class=\"id\" href=\"#__releases\">__releases</a>(<a class=\"id\" href=\"#sp\">sp</a>);", 
"void <a class=\"id\" href=\"#synchronize_srcu\">synchronize_srcu</a>(struct <a class=\"id\" href=\"#srcu_struct\">srcu_struct</a> *<a class=\"id\" href=\"#sp\">sp</a>);", 
"void <a class=\"id\" href=\"#synchronize_srcu_expedited\">synchronize_srcu_expedited</a>(struct <a class=\"id\" href=\"#srcu_struct\">srcu_struct</a> *<a class=\"id\" href=\"#sp\">sp</a>);", 
"long <a class=\"id\" href=\"#srcu_batches_completed\">srcu_batches_completed</a>(struct <a class=\"id\" href=\"#srcu_struct\">srcu_struct</a> *<a class=\"id\" href=\"#sp\">sp</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_LOCK_ALLOC\">CONFIG_DEBUG_LOCK_ALLOC</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * srcu_read_lock_held - might we be in SRCU read-side critical section?</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If CONFIG_DEBUG_LOCK_ALLOC is selected, returns nonzero iff in an SRCU</span>", 
"<span class=\"comment\"> * read-side critical section.  In absence of CONFIG_DEBUG_LOCK_ALLOC,</span>", 
"<span class=\"comment\"> * this assumes we are in an SRCU read-side critical section unless it can</span>", 
"<span class=\"comment\"> * prove otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#srcu_read_lock_held\">srcu_read_lock_held</a>(struct <a class=\"id\" href=\"#srcu_struct\">srcu_struct</a> *<a class=\"id\" href=\"#sp\">sp</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#debug_locks\">debug_locks</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#lock_is_held\">lock_is_held</a>(&amp;<a class=\"id\" href=\"#sp\">sp</a>-><a class=\"id\" href=\"#dep_map\">dep_map</a>);", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"#else <span class=\"comment\">/* #ifdef CONFIG_DEBUG_LOCK_ALLOC */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#srcu_read_lock_held\">srcu_read_lock_held</a>(struct <a class=\"id\" href=\"#srcu_struct\">srcu_struct</a> *<a class=\"id\" href=\"#sp\">sp</a>)", 
"{", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #else #ifdef CONFIG_DEBUG_LOCK_ALLOC */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * srcu_dereference - fetch SRCU-protected pointer with checking</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Makes rcu_dereference_check() do the dirty work.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#srcu_dereference\">srcu_dereference</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#sp\">sp</a>) \\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rcu_dereference_check\">rcu_dereference_check</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#srcu_read_lock_held\">srcu_read_lock_held</a>(<a class=\"id\" href=\"#sp\">sp</a>))", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * srcu_read_lock - register a new reader for an SRCU-protected structure.</span>", 
"<span class=\"comment\"> * @sp: srcu_struct in which to register the new reader.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Enter an SRCU read-side critical section.  Note that SRCU read-side</span>", 
"<span class=\"comment\"> * critical sections may be nested.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#srcu_read_lock\">srcu_read_lock</a>(struct <a class=\"id\" href=\"#srcu_struct\">srcu_struct</a> *<a class=\"id\" href=\"#sp\">sp</a>) <a class=\"id\" href=\"#__acquires\">__acquires</a>(<a class=\"id\" href=\"#sp\">sp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#__srcu_read_lock\">__srcu_read_lock</a>(<a class=\"id\" href=\"#sp\">sp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#srcu_read_acquire\">srcu_read_acquire</a>(<a class=\"id\" href=\"#sp\">sp</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * srcu_read_unlock - unregister a old reader from an SRCU-protected structure.</span>", 
"<span class=\"comment\"> * @sp: srcu_struct in which to unregister the old reader.</span>", 
"<span class=\"comment\"> * @idx: return value from corresponding srcu_read_lock().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Exit an SRCU read-side critical section.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#srcu_read_unlock\">srcu_read_unlock</a>(struct <a class=\"id\" href=\"#srcu_struct\">srcu_struct</a> *<a class=\"id\" href=\"#sp\">sp</a>, int <a class=\"id\" href=\"#idx\">idx</a>)", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__releases\">__releases</a>(<a class=\"id\" href=\"#sp\">sp</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#srcu_read_release\">srcu_read_release</a>(<a class=\"id\" href=\"#sp\">sp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__srcu_read_unlock\">__srcu_read_unlock</a>(<a class=\"id\" href=\"#sp\">sp</a>, <a class=\"id\" href=\"#idx\">idx</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/23/eafe66c5376721925dcb0a19428701a64a37c8.xr', __xr_tmp);
