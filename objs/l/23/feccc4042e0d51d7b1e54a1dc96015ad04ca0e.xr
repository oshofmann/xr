var __xr_tmp = [
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bd_holder\">bd_holder</a> *<a class=\"id\" href=\"#bo\">bo</a>, *<a class=\"id\" href=\"#found\">found</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kobj\">kobj</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bo\">bo</a> = <a class=\"id\" href=\"#alloc_bd_holder\">alloc_bd_holder</a>(<a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bo\">bo</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_mutex\">bd_mutex</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#bd_claim\">bd_claim</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#holder\">holder</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#found\">found</a> = <a class=\"id\" href=\"#find_bd_holder\">find_bd_holder</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#bo\">bo</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#found\">found</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail\">fail</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#add_bd_holder\">add_bd_holder</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#bo\">bo</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd_release\">bd_release</a>(<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bo\">bo</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<a class=\"id\" href=\"#fail\">fail</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_mutex\">bd_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_bd_holder\">free_bd_holder</a>(<a class=\"id\" href=\"#bo\">bo</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bd_release_from_kobject - bd_release() with additional kobject signature</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @bdev:<span class=\"ts\"/>block device to be released</span>", 
"<span class=\"comment\"> * @kobj:<span class=\"ts\"/>holder's kobject</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Do bd_release() and remove sysfs symlinks created by bd_claim_by_kobject().</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#bd_release_from_kobject\">bd_release_from_kobject</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#kobj\">kobj</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_mutex\">bd_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bd_release\">bd_release</a>(<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_bd_holder\">free_bd_holder</a>(<a class=\"id\" href=\"#del_bd_holder\">del_bd_holder</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#kobj\">kobj</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_mutex\">bd_mutex</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bd_claim_by_disk - wrapper function for bd_claim_by_kobject()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @bdev:<span class=\"ts\"/>block device to be claimed</span>", 
"<span class=\"comment\"> * @holder:<span class=\"ts\"/>holder's signature</span>", 
"<span class=\"comment\"> * @disk:<span class=\"ts\"/>holder's gendisk</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Call bd_claim_by_kobject() with getting @disk-&gt;slave_dir.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#bd_claim_by_disk\">bd_claim_by_disk</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>, void *<a class=\"id\" href=\"#holder\">holder</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bd_claim_by_kobject\">bd_claim_by_kobject</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#holder\">holder</a>, <a class=\"id\" href=\"#kobject_get\">kobject_get</a>(<a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#slave_dir\">slave_dir</a>));", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#bd_claim_by_disk\">bd_claim_by_disk</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bd_release_from_disk - wrapper function for bd_release_from_kobject()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @bdev:<span class=\"ts\"/>block device to be claimed</span>", 
"<span class=\"comment\"> * @disk:<span class=\"ts\"/>holder's gendisk</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Call bd_release_from_kobject() and put @disk-&gt;slave_dir.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#bd_release_from_disk\">bd_release_from_disk</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>, struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bd_release_from_kobject\">bd_release_from_kobject</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#slave_dir\">slave_dir</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(<a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#slave_dir\">slave_dir</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#bd_release_from_disk\">bd_release_from_disk</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Tries to open block device by device number.  Use it ONLY if you</span>", 
"<span class=\"comment\"> * really do not have anything better - i.e. when you are behind a</span>", 
"<span class=\"comment\"> * truly sucky interface and all you are given is a device number.  _Never_</span>", 
"<span class=\"comment\"> * to be used for internal purposes.  If you ever need it - reconsider</span>", 
"<span class=\"comment\"> * your API.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#open_by_devnum\">open_by_devnum</a>(<a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#fmode_t\">fmode_t</a> <a class=\"id\" href=\"#mode\">mode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a> = <a class=\"id\" href=\"#bdget\">bdget</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bdev\">bdev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#blkdev_get\">blkdev_get</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#mode\">mode</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a> ? <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#err\">err</a>) : <a class=\"id\" href=\"#bdev\">bdev</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#open_by_devnum\">open_by_devnum</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * flush_disk - invalidates all buffer-cache entries on a disk</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @bdev:      struct block device to be flushed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Invalidates all buffer-cache entries on a disk. It should be called</span>", 
"<span class=\"comment\"> * when a disk has been changed -- either by a media change or online</span>", 
"<span class=\"comment\"> * resize.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#flush_disk\">flush_disk</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__invalidate_device\">__invalidate_device</a>(<a class=\"id\" href=\"#bdev\">bdev</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#name\">name</a>[<a class=\"id\" href=\"#BDEVNAME_SIZE\">BDEVNAME_SIZE</a>] = \"\";", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_disk\">bd_disk</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disk_name\">disk_name</a>(<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_disk\">bd_disk</a>, 0, <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"VFS: busy inodes on changed media or \"", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"resized disk %s\\n\", <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_disk\">bd_disk</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#disk_partitionable\">disk_partitionable</a>(<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_disk\">bd_disk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_invalidated\">bd_invalidated</a> = 1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * check_disk_size_change - checks for disk size change and adjusts bdev size.</span>", 
"<span class=\"comment\"> * @disk: struct gendisk to check</span>", 
"<span class=\"comment\"> * @bdev: struct bdev to adjust.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This routine checks to see if the bdev size does not match the disk size</span>", 
"<span class=\"comment\"> * and adjusts it if it differs.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#check_disk_size_change\">check_disk_size_change</a>(struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a>, struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#disk_size\">disk_size</a>, <a class=\"id\" href=\"#bdev_size\">bdev_size</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disk_size\">disk_size</a> = (<a class=\"id\" href=\"#loff_t\">loff_t</a>)<a class=\"id\" href=\"#get_capacity\">get_capacity</a>(<a class=\"id\" href=\"#disk\">disk</a>) << 9;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdev_size\">bdev_size</a> = <a class=\"id\" href=\"#i_size_read\">i_size_read</a>(<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_inode\">bd_inode</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#disk_size\">disk_size</a> != <a class=\"id\" href=\"#bdev_size\">bdev_size</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#name\">name</a>[<a class=\"id\" href=\"#BDEVNAME_SIZE\">BDEVNAME_SIZE</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#disk_name\">disk_name</a>(<a class=\"id\" href=\"#disk\">disk</a>, 0, <a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>       \"%s: detected capacity change from %lld to %lld\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#bdev_size\">bdev_size</a>, <a class=\"id\" href=\"#disk_size\">disk_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i_size_write\">i_size_write</a>(<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_inode\">bd_inode</a>, <a class=\"id\" href=\"#disk_size\">disk_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#flush_disk\">flush_disk</a>(<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#check_disk_size_change\">check_disk_size_change</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * revalidate_disk - wrapper for lower-level driver's revalidate_disk call-back</span>", 
"<span class=\"comment\"> * @disk: struct gendisk to be revalidated</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This routine is a wrapper for lower-level driver's revalidate_disk</span>", 
"<span class=\"comment\"> * call-backs.  It is used to do common pre and post operations needed</span>", 
"<span class=\"comment\"> * for all revalidate_disk operations.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#revalidate_disk\">revalidate_disk</a>(struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#fops\">fops</a>-><a class=\"id\" href=\"#revalidate_disk\">revalidate_disk</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#fops\">fops</a>-><a class=\"id\" href=\"#revalidate_disk\">revalidate_disk</a>(<a class=\"id\" href=\"#disk\">disk</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdev\">bdev</a> = <a class=\"id\" href=\"#bdget_disk\">bdget_disk</a>(<a class=\"id\" href=\"#disk\">disk</a>, 0);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bdev\">bdev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_mutex\">bd_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#check_disk_size_change\">check_disk_size_change</a>(<a class=\"id\" href=\"#disk\">disk</a>, <a class=\"id\" href=\"#bdev\">bdev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_mutex\">bd_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdput\">bdput</a>(<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#revalidate_disk\">revalidate_disk</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This routine checks whether a removable media has been changed,</span>", 
"<span class=\"comment\"> * and invalidates all buffer-cache-entries in that case. This</span>", 
"<span class=\"comment\"> * is a relatively slow routine, so we have to try to minimize using</span>", 
"<span class=\"comment\"> * it. Thus it is called only upon a 'mount' or 'open'. This</span>", 
"<span class=\"comment\"> * is the best way of combining speed and utility, I think.</span>", 
"<span class=\"comment\"> * People changing diskettes in the middle of an operation deserve</span>", 
"<span class=\"comment\"> * to lose :-)</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#check_disk_change\">check_disk_change</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a> = <a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_disk\">bd_disk</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#block_device_operations\">block_device_operations</a> *<a class=\"id\" href=\"#bdops\">bdops</a> = <a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#fops\">fops</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bdops\">bdops</a>-><a class=\"id\" href=\"#media_changed\">media_changed</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bdops\">bdops</a>-><a class=\"id\" href=\"#media_changed\">media_changed</a>(<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_disk\">bd_disk</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flush_disk\">flush_disk</a>(<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bdops\">bdops</a>-><a class=\"id\" href=\"#revalidate_disk\">revalidate_disk</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdops\">bdops</a>-><a class=\"id\" href=\"#revalidate_disk\">revalidate_disk</a>(<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_disk\">bd_disk</a>);", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#check_disk_change\">check_disk_change</a>);", 
"", 
"void <a class=\"id\" href=\"#bd_set_size\">bd_set_size</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#bsize\">bsize</a> = <a class=\"id\" href=\"#bdev_logical_block_size\">bdev_logical_block_size</a>(<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_inode\">bd_inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a> = <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#bsize\">bsize</a> &lt; <a class=\"id\" href=\"#PAGE_CACHE_SIZE\">PAGE_CACHE_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &amp; <a class=\"id\" href=\"#bsize\">bsize</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bsize\">bsize</a> <<= 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_block_size\">bd_block_size</a> = <a class=\"id\" href=\"#bsize\">bsize</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_inode\">bd_inode</a>-><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a> = <a class=\"id\" href=\"#blksize_bits\">blksize_bits</a>(<a class=\"id\" href=\"#bsize\">bsize</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bd_set_size\">bd_set_size</a>);", 
"", 
"static int <a class=\"id\" href=\"#__blkdev_put\">__blkdev_put</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#fmode_t\">fmode_t</a> <a class=\"id\" href=\"#mode\">mode</a>, int <a class=\"id\" href=\"#for_part\">for_part</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * bd_mutex locking:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  mutex_lock(part-&gt;bd_mutex)</span>", 
"<span class=\"comment\"> *    mutex_lock_nested(whole-&gt;bd_mutex, 1)</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#__blkdev_get\">__blkdev_get</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#fmode_t\">fmode_t</a> <a class=\"id\" href=\"#mode\">mode</a>, int <a class=\"id\" href=\"#for_part\">for_part</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#partno\">partno</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#perm\">perm</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#FMODE_READ\">FMODE_READ</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perm\">perm</a> |= <a class=\"id\" href=\"#MAY_READ\">MAY_READ</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#mode\">mode</a> &amp; <a class=\"id\" href=\"#FMODE_WRITE\">FMODE_WRITE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perm\">perm</a> |= <a class=\"id\" href=\"#MAY_WRITE\">MAY_WRITE</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * hooks: /n/, see \"layering violations\".</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#for_part\">for_part</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#devcgroup_inode_permission\">devcgroup_inode_permission</a>(<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_inode\">bd_inode</a>, <a class=\"id\" href=\"#perm\">perm</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdput\">bdput</a>(<a class=\"id\" href=\"#bdev\">bdev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
];
xr_frag_insert('l/23/feccc4042e0d51d7b1e54a1dc96015ad04ca0e.xr', __xr_tmp);
