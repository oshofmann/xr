var __xr_tmp = [
"struct <a class=\"id\" href=\"#bio_list\">bio_list</a>;", 
"struct <a class=\"id\" href=\"#fs_struct\">fs_struct</a>;", 
"struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * List of flags we want to share for kernel threads,</span>", 
"<span class=\"comment\"> * if only because they are not used by them anyway.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CLONE_KERNEL\">CLONE_KERNEL</a><span class=\"ts\"/>(<a class=\"id\" href=\"#CLONE_FS\">CLONE_FS</a> | <a class=\"id\" href=\"#CLONE_FILES\">CLONE_FILES</a> | <a class=\"id\" href=\"#CLONE_SIGHAND\">CLONE_SIGHAND</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * These are the constant used to fake the fixed-point load-average</span>", 
"<span class=\"comment\"> * counting. Some notes:</span>", 
"<span class=\"comment\"> *  - 11 bit fractions expand to 22 bits by the multiplies: this gives</span>", 
"<span class=\"comment\"> *    a load-average precision of 10 bits integer + 11 bits fractional</span>", 
"<span class=\"comment\"> *  - if you want to count load-averages more often, you need more</span>", 
"<span class=\"comment\"> *    precision, or rounding will get you. With 2-second counting freq,</span>", 
"<span class=\"comment\"> *    the EXP_n values would be 1981, 2034 and 2043 if still using only</span>", 
"<span class=\"comment\"> *    11 bit fractions.</span>", 
"<span class=\"comment\"> */</span>", 
"extern unsigned long <a class=\"id\" href=\"#avenrun\">avenrun</a>[];<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Load averages */</span>", 
"extern void <a class=\"id\" href=\"#get_avenrun\">get_avenrun</a>(unsigned long *<a class=\"id\" href=\"#loads\">loads</a>, unsigned long <a class=\"id\" href=\"#offset\">offset</a>, int <a class=\"id\" href=\"#shift\">shift</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FSHIFT\">FSHIFT</a><span class=\"ts\"/><span class=\"ts\"/>11<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* nr of bits of precision */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#FIXED_1\">FIXED_1</a><span class=\"ts\"/><span class=\"ts\"/>(1<<<a class=\"id\" href=\"#FSHIFT\">FSHIFT</a>)<span class=\"ts\"/><span class=\"comment\">/* 1.0 as fixed-point */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LOAD_FREQ\">LOAD_FREQ</a><span class=\"ts\"/>(5*<a class=\"id\" href=\"#HZ\">HZ</a>+1)<span class=\"ts\"/><span class=\"comment\">/* 5 sec intervals */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EXP_1\">EXP_1</a><span class=\"ts\"/><span class=\"ts\"/>1884<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 1/exp(5sec/1min) as fixed-point */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EXP_5\">EXP_5</a><span class=\"ts\"/><span class=\"ts\"/>2014<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 1/exp(5sec/5min) */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EXP_15\">EXP_15</a><span class=\"ts\"/><span class=\"ts\"/>2037<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 1/exp(5sec/15min) */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CALC_LOAD\">CALC_LOAD</a>(<a class=\"id\" href=\"#load\">load</a>,<a class=\"id\" href=\"#exp\">exp</a>,<a class=\"id\" href=\"#n\">n</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#load\">load</a> *= <a class=\"id\" href=\"#exp\">exp</a>; \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#load\">load</a> += <a class=\"id\" href=\"#n\">n</a>*(<a class=\"id\" href=\"#FIXED_1\">FIXED_1</a>-<a class=\"id\" href=\"#exp\">exp</a>); \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#load\">load</a> >>= <a class=\"id\" href=\"#FSHIFT\">FSHIFT</a>;", 
"", 
"extern unsigned long <a class=\"id\" href=\"#total_forks\">total_forks</a>;", 
"extern int <a class=\"id\" href=\"#nr_threads\">nr_threads</a>;", 
"<a class=\"id\" href=\"#DECLARE_PER_CPU\">DECLARE_PER_CPU</a>(unsigned long, <a class=\"id\" href=\"#process_counts\">process_counts</a>);", 
"extern int <a class=\"id\" href=\"#nr_processes\">nr_processes</a>(void);", 
"extern unsigned long <a class=\"id\" href=\"#nr_running\">nr_running</a>(void);", 
"extern unsigned long <a class=\"id\" href=\"#nr_uninterruptible\">nr_uninterruptible</a>(void);", 
"extern unsigned long <a class=\"id\" href=\"#nr_iowait\">nr_iowait</a>(void);", 
"extern unsigned long <a class=\"id\" href=\"#nr_iowait_cpu\">nr_iowait_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"extern unsigned long <a class=\"id\" href=\"#this_cpu_load\">this_cpu_load</a>(void);", 
"", 
"", 
"extern void <a class=\"id\" href=\"#calc_global_load\">calc_global_load</a>(void);", 
"", 
"extern unsigned long <a class=\"id\" href=\"#get_parent_ip\">get_parent_ip</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>);", 
"", 
"struct <a class=\"id\" href=\"#seq_file\">seq_file</a>;", 
"struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>;", 
"struct <a class=\"id\" href=\"#task_group\">task_group</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCHED_DEBUG\">CONFIG_SCHED_DEBUG</a>", 
"extern void <a class=\"id\" href=\"#proc_sched_show_task\">proc_sched_show_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>);", 
"extern void <a class=\"id\" href=\"#proc_sched_set_task\">proc_sched_set_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>);", 
"extern void", 
"<a class=\"id\" href=\"#print_cfs_rq\">print_cfs_rq</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>, struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#proc_sched_show_task\">proc_sched_show_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>)", 
"{", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#proc_sched_set_task\">proc_sched_set_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>)", 
"{", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void", 
"<a class=\"id\" href=\"#print_cfs_rq\">print_cfs_rq</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#m\">m</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>, struct <a class=\"id\" href=\"#cfs_rq\">cfs_rq</a> *<a class=\"id\" href=\"#cfs_rq\">cfs_rq</a>)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Task state bitmask. NOTE! These bits are also</span>", 
"<span class=\"comment\"> * encoded in fs/proc/array.c: get_task_state().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We have two separate sets of flags: task-&gt;state</span>", 
"<span class=\"comment\"> * is about runnability, while task-&gt;exit_state are</span>", 
"<span class=\"comment\"> * about the task exiting. Confusing, but this way</span>", 
"<span class=\"comment\"> * modifying one set can't modify the other one by</span>", 
"<span class=\"comment\"> * mistake.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a><span class=\"ts\"/><span class=\"ts\"/>0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a><span class=\"ts\"/>1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a><span class=\"ts\"/>2", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__TASK_STOPPED\">__TASK_STOPPED</a><span class=\"ts\"/><span class=\"ts\"/>4", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__TASK_TRACED\">__TASK_TRACED</a><span class=\"ts\"/><span class=\"ts\"/>8", 
"<span class=\"comment\">/* in tsk-&gt;exit_state */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EXIT_ZOMBIE\">EXIT_ZOMBIE</a><span class=\"ts\"/><span class=\"ts\"/>16", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#EXIT_DEAD\">EXIT_DEAD</a><span class=\"ts\"/><span class=\"ts\"/>32", 
"<span class=\"comment\">/* in tsk-&gt;state again */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TASK_DEAD\">TASK_DEAD</a><span class=\"ts\"/><span class=\"ts\"/>64", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TASK_WAKEKILL\">TASK_WAKEKILL</a><span class=\"ts\"/><span class=\"ts\"/>128", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TASK_WAKING\">TASK_WAKING</a><span class=\"ts\"/><span class=\"ts\"/>256", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TASK_STATE_MAX\">TASK_STATE_MAX</a><span class=\"ts\"/><span class=\"ts\"/>512", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TASK_STATE_TO_CHAR_STR\">TASK_STATE_TO_CHAR_STR</a> \"RSDTtZXxKW\"", 
"", 
"extern char <a class=\"id\" href=\"#___assert_task_state\">___assert_task_state</a>[1 - 2*!!(", 
"<span class=\"ts\"/><span class=\"ts\"/>sizeof(<a class=\"id\" href=\"#TASK_STATE_TO_CHAR_STR\">TASK_STATE_TO_CHAR_STR</a>)-1 != <a class=\"id\" href=\"#ilog2\">ilog2</a>(<a class=\"id\" href=\"#TASK_STATE_MAX\">TASK_STATE_MAX</a>)+1)];", 
"", 
"<span class=\"comment\">/* Convenience macros for the sake of set_task_state */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TASK_KILLABLE\">TASK_KILLABLE</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#TASK_WAKEKILL\">TASK_WAKEKILL</a> | <a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TASK_STOPPED\">TASK_STOPPED</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#TASK_WAKEKILL\">TASK_WAKEKILL</a> | <a class=\"id\" href=\"#__TASK_STOPPED\">__TASK_STOPPED</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TASK_TRACED\">TASK_TRACED</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#TASK_WAKEKILL\">TASK_WAKEKILL</a> | <a class=\"id\" href=\"#__TASK_TRACED\">__TASK_TRACED</a>)", 
"", 
"<span class=\"comment\">/* Convenience macros for the sake of wake_up */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TASK_NORMAL\">TASK_NORMAL</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a> | <a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TASK_ALL\">TASK_ALL</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#TASK_NORMAL\">TASK_NORMAL</a> | <a class=\"id\" href=\"#__TASK_STOPPED\">__TASK_STOPPED</a> | <a class=\"id\" href=\"#__TASK_TRACED\">__TASK_TRACED</a>)", 
"", 
"<span class=\"comment\">/* get_task_state() */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TASK_REPORT\">TASK_REPORT</a><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a> | <a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a> | <a class=\"id\" href=\"#__TASK_STOPPED\">__TASK_STOPPED</a> | \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#__TASK_TRACED\">__TASK_TRACED</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#task_is_traced\">task_is_traced</a>(<a class=\"id\" href=\"#task\">task</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#state\">state</a> &amp; <a class=\"id\" href=\"#__TASK_TRACED\">__TASK_TRACED</a>) != 0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#task_is_stopped\">task_is_stopped</a>(<a class=\"id\" href=\"#task\">task</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#state\">state</a> &amp; <a class=\"id\" href=\"#__TASK_STOPPED\">__TASK_STOPPED</a>) != 0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#task_is_dead\">task_is_dead</a>(<a class=\"id\" href=\"#task\">task</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#task\">task</a>)-><a class=\"id\" href=\"#exit_state\">exit_state</a> != 0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#task_is_stopped_or_traced\">task_is_stopped_or_traced</a>(<a class=\"id\" href=\"#task\">task</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#state\">state</a> &amp; (<a class=\"id\" href=\"#__TASK_STOPPED\">__TASK_STOPPED</a> | <a class=\"id\" href=\"#__TASK_TRACED\">__TASK_TRACED</a>)) != 0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#task_contributes_to_load\">task_contributes_to_load</a>(<a class=\"id\" href=\"#task\">task</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>((<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#state\">state</a> &amp; <a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>) != 0 && \\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> (<a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PF_FREEZING\">PF_FREEZING</a>) == 0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__set_task_state\">__set_task_state</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#state_value\">state_value</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do { (<a class=\"id\" href=\"#tsk\">tsk</a>)-><a class=\"id\" href=\"#state\">state</a> = (<a class=\"id\" href=\"#state_value\">state_value</a>); } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#set_task_state\">set_task_state</a>(<a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#state_value\">state_value</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_mb\">set_mb</a>((<a class=\"id\" href=\"#tsk\">tsk</a>)-><a class=\"id\" href=\"#state\">state</a>, (<a class=\"id\" href=\"#state_value\">state_value</a>))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * set_current_state() includes a barrier so that the write of current-&gt;state</span>", 
"<span class=\"comment\"> * is correctly serialised wrt the caller's subsequent test of whether to</span>", 
"<span class=\"comment\"> * actually sleep:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>set_current_state(TASK_UNINTERRUPTIBLE);</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>if (do_i_need_to_sleep())</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>schedule();</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the caller does not need such serialisation then use __set_current_state()</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#state_value\">state_value</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>do { <a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#state\">state</a> = (<a class=\"id\" href=\"#state_value\">state_value</a>); } while (0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#set_current_state\">set_current_state</a>(<a class=\"id\" href=\"#state_value\">state_value</a>)<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_mb\">set_mb</a>(<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#state\">state</a>, (<a class=\"id\" href=\"#state_value\">state_value</a>))", 
"", 
"<span class=\"comment\">/* Task command name length */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TASK_COMM_LEN\">TASK_COMM_LEN</a> 16", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This serializes \"schedule()\" and also protects</span>", 
"<span class=\"comment\"> * the run-queue from deletions/modifications (but</span>", 
"<span class=\"comment\"> * _adding_ to the beginning of the run-queue has</span>", 
"<span class=\"comment\"> * a separate lock).</span>", 
"<span class=\"comment\"> */</span>", 
"extern <a class=\"id\" href=\"#rwlock_t\">rwlock_t</a> <a class=\"id\" href=\"#tasklist_lock\">tasklist_lock</a>;", 
"extern <a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#mmlist_lock\">mmlist_lock</a>;", 
"", 
"struct <a class=\"id\" href=\"#task_struct\">task_struct</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROVE_RCU\">CONFIG_PROVE_RCU</a>", 
"extern int <a class=\"id\" href=\"#lockdep_tasklist_lock_is_held\">lockdep_tasklist_lock_is_held</a>(void);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* #ifdef CONFIG_PROVE_RCU */</span>", 
"", 
"extern void <a class=\"id\" href=\"#sched_init\">sched_init</a>(void);", 
"extern void <a class=\"id\" href=\"#sched_init_smp\">sched_init_smp</a>(void);", 
"extern <a class=\"id\" href=\"#asmlinkage\">asmlinkage</a> void <a class=\"id\" href=\"#schedule_tail\">schedule_tail</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#prev\">prev</a>);", 
"extern void <a class=\"id\" href=\"#init_idle\">init_idle</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#idle\">idle</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"extern void <a class=\"id\" href=\"#init_idle_bootup_task\">init_idle_bootup_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#idle\">idle</a>);", 
"", 
"extern int <a class=\"id\" href=\"#runqueue_is_locked\">runqueue_is_locked</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"extern <a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> <a class=\"id\" href=\"#nohz_cpu_mask\">nohz_cpu_mask</a>;", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>) && <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_NO_HZ\">CONFIG_NO_HZ</a>)", 
"extern void <a class=\"id\" href=\"#select_nohz_load_balancer\">select_nohz_load_balancer</a>(int <a class=\"id\" href=\"#stop_tick\">stop_tick</a>);", 
"extern int <a class=\"id\" href=\"#get_nohz_timer_target\">get_nohz_timer_target</a>(void);", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#select_nohz_load_balancer\">select_nohz_load_balancer</a>(int <a class=\"id\" href=\"#stop_tick\">stop_tick</a>) { }", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Only dump TASK_* tasks. (0 for all tasks)</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#show_state_filter\">show_state_filter</a>(unsigned long <a class=\"id\" href=\"#state_filter\">state_filter</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#show_state\">show_state</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#show_state_filter\">show_state_filter</a>(0);", 
"}", 
"", 
"extern void <a class=\"id\" href=\"#show_regs\">show_regs</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * TASK is a pointer to the task whose backtrace we want to see (or NULL for current</span>", 
"<span class=\"comment\"> * task), SP is the stack pointer of the first frame that should be shown in the back</span>", 
"<span class=\"comment\"> * trace (or NULL if the entire call-chain of the task should be shown).</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#show_stack\">show_stack</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>, unsigned long *<a class=\"id\" href=\"#sp\">sp</a>);", 
"", 
"void <a class=\"id\" href=\"#io_schedule\">io_schedule</a>(void);", 
"long <a class=\"id\" href=\"#io_schedule_timeout\">io_schedule_timeout</a>(long <a class=\"id\" href=\"#timeout\">timeout</a>);", 
"", 
"extern void <a class=\"id\" href=\"#cpu_init\">cpu_init</a> (void);", 
"extern void <a class=\"id\" href=\"#trap_init\">trap_init</a>(void);", 
"extern void <a class=\"id\" href=\"#update_process_times\">update_process_times</a>(int <a class=\"id\" href=\"#user\">user</a>);", 
"extern void <a class=\"id\" href=\"#scheduler_tick\">scheduler_tick</a>(void);", 
"", 
"extern void <a class=\"id\" href=\"#sched_show_task\">sched_show_task</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_LOCKUP_DETECTOR\">CONFIG_LOCKUP_DETECTOR</a>", 
"extern void <a class=\"id\" href=\"#touch_softlockup_watchdog\">touch_softlockup_watchdog</a>(void);", 
"extern void <a class=\"id\" href=\"#touch_softlockup_watchdog_sync\">touch_softlockup_watchdog_sync</a>(void);", 
"extern void <a class=\"id\" href=\"#touch_all_softlockup_watchdogs\">touch_all_softlockup_watchdogs</a>(void);", 
"extern int <a class=\"id\" href=\"#proc_dowatchdog_thresh\">proc_dowatchdog_thresh</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>);", 
"extern unsigned int  <a class=\"id\" href=\"#softlockup_panic\">softlockup_panic</a>;", 
"extern int <a class=\"id\" href=\"#softlockup_thresh\">softlockup_thresh</a>;", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#touch_softlockup_watchdog\">touch_softlockup_watchdog</a>(void)", 
"{", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#touch_softlockup_watchdog_sync\">touch_softlockup_watchdog_sync</a>(void)", 
"{", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#touch_all_softlockup_watchdogs\">touch_all_softlockup_watchdogs</a>(void)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DETECT_HUNG_TASK\">CONFIG_DETECT_HUNG_TASK</a>", 
"extern unsigned int  <a class=\"id\" href=\"#sysctl_hung_task_panic\">sysctl_hung_task_panic</a>;", 
"extern unsigned long <a class=\"id\" href=\"#sysctl_hung_task_check_count\">sysctl_hung_task_check_count</a>;", 
"extern unsigned long <a class=\"id\" href=\"#sysctl_hung_task_timeout_secs\">sysctl_hung_task_timeout_secs</a>;", 
"extern unsigned long <a class=\"id\" href=\"#sysctl_hung_task_warnings\">sysctl_hung_task_warnings</a>;", 
"extern int <a class=\"id\" href=\"#proc_dohung_task_timeout_secs\">proc_dohung_task_timeout_secs</a>(struct <a class=\"id\" href=\"#ctl_table\">ctl_table</a> *<a class=\"id\" href=\"#table\">table</a>, int <a class=\"id\" href=\"#write\">write</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> void <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#size_t\">size_t</a> *<a class=\"id\" href=\"#lenp\">lenp</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* Attach to any functions which should be ignored in wchan output. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__sched\">__sched</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#__section__\">__section__</a>(\".sched.text\")))", 
"", 
"<span class=\"comment\">/* Linker adds these: start and end of __sched functions */</span>", 
"extern char <a class=\"id\" href=\"#__sched_text_start\">__sched_text_start</a>[], <a class=\"id\" href=\"#__sched_text_end\">__sched_text_end</a>[];", 
"", 
"<span class=\"comment\">/* Is this address in the __sched functions? */</span>", 
"extern int <a class=\"id\" href=\"#in_sched_functions\">in_sched_functions</a>(unsigned long <a class=\"id\" href=\"#addr\">addr</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a><span class=\"ts\"/><a class=\"id\" href=\"#MAX_SCHEDULE_TIMEOUT\">MAX_SCHEDULE_TIMEOUT</a><span class=\"ts\"/><a class=\"id\" href=\"#LONG_MAX\">LONG_MAX</a>", 
"extern signed long <a class=\"id\" href=\"#schedule_timeout\">schedule_timeout</a>(signed long <a class=\"id\" href=\"#timeout\">timeout</a>);", 
"extern signed long <a class=\"id\" href=\"#schedule_timeout_interruptible\">schedule_timeout_interruptible</a>(signed long <a class=\"id\" href=\"#timeout\">timeout</a>);", 
"extern signed long <a class=\"id\" href=\"#schedule_timeout_killable\">schedule_timeout_killable</a>(signed long <a class=\"id\" href=\"#timeout\">timeout</a>);", 
"extern signed long <a class=\"id\" href=\"#schedule_timeout_uninterruptible\">schedule_timeout_uninterruptible</a>(signed long <a class=\"id\" href=\"#timeout\">timeout</a>);", 
"<a class=\"id\" href=\"#asmlinkage\">asmlinkage</a> void <a class=\"id\" href=\"#schedule\">schedule</a>(void);", 
"extern int <a class=\"id\" href=\"#mutex_spin_on_owner\">mutex_spin_on_owner</a>(struct <a class=\"id\" href=\"#mutex\">mutex</a> *<a class=\"id\" href=\"#lock\">lock</a>, struct <a class=\"id\" href=\"#thread_info\">thread_info</a> *<a class=\"id\" href=\"#owner\">owner</a>);", 
"", 
"struct <a class=\"id\" href=\"#nsproxy\">nsproxy</a>;", 
"struct <a class=\"id\" href=\"#user_namespace\">user_namespace</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Default maximum number of active map areas, this limits the number of vmas</span>", 
"<span class=\"comment\"> * per mm struct. Users can overwrite this number by sysctl but there is a</span>", 
"<span class=\"comment\"> * problem.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * When a program's coredump is generated as ELF format, a section is created</span>", 
"<span class=\"comment\"> * per a vma. In ELF, the number of sections is represented in unsigned short.</span>", 
"<span class=\"comment\"> * This means the number of sections should be smaller than 65535 at coredump.</span>", 
"<span class=\"comment\"> * Because the kernel adds some informative sections to a image of program at</span>", 
];
xr_frag_insert('l/24/236e81c0ca48f76aacd5e58b67f4ffd5e06798.xr', __xr_tmp);
