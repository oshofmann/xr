var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_ASM_X86_UACCESS_H\">_ASM_X86_UACCESS_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_ASM_X86_UACCESS_H\">_ASM_X86_UACCESS_H</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * User space memory access functions</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#compiler\">compiler</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#thread_info\">thread_info</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#prefetch\">prefetch</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#asm\">asm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#page\">page</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VERIFY_READ\">VERIFY_READ</a> 0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VERIFY_WRITE\">VERIFY_WRITE</a> 1", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The fs value determines whether argument validity checking should be</span>", 
"<span class=\"comment\"> * performed or not.  If get_fs() == USER_DS, checking is performed, with</span>", 
"<span class=\"comment\"> * get_fs() == KERNEL_DS, checking is bypassed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For historical reasons, these macros are grossly misnamed.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAKE_MM_SEG\">MAKE_MM_SEG</a>(<a class=\"id\" href=\"#s\">s</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#mm_segment_t\">mm_segment_t</a>) { (<a class=\"id\" href=\"#s\">s</a>) })", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#KERNEL_DS\">KERNEL_DS</a><span class=\"ts\"/><a class=\"id\" href=\"#MAKE_MM_SEG\">MAKE_MM_SEG</a>(-1UL)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#USER_DS\">USER_DS</a> <span class=\"ts\"/><a class=\"id\" href=\"#MAKE_MM_SEG\">MAKE_MM_SEG</a>(<a class=\"id\" href=\"#TASK_SIZE_MAX\">TASK_SIZE_MAX</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#get_ds\">get_ds</a>()<span class=\"ts\"/>(<a class=\"id\" href=\"#KERNEL_DS\">KERNEL_DS</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#get_fs\">get_fs</a>()<span class=\"ts\"/>(<a class=\"id\" href=\"#current_thread_info\">current_thread_info</a>()-><a class=\"id\" href=\"#addr_limit\">addr_limit</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#set_fs\">set_fs</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#current_thread_info\">current_thread_info</a>()-><a class=\"id\" href=\"#addr_limit\">addr_limit</a> = (<a class=\"id\" href=\"#x\">x</a>))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#segment_eq\">segment_eq</a>(<a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#a\">a</a>).<a class=\"id\" href=\"#seg\">seg</a> == (<a class=\"id\" href=\"#b\">b</a>).<a class=\"id\" href=\"#seg\">seg</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__addr_ok\">__addr_ok</a>(<a class=\"id\" href=\"#addr\">addr</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>((unsigned long <a class=\"id\" href=\"#__force\">__force</a>)(<a class=\"id\" href=\"#addr\">addr</a>) &lt;<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/> (<a class=\"id\" href=\"#current_thread_info\">current_thread_info</a>()-><a class=\"id\" href=\"#addr_limit\">addr_limit</a>.<a class=\"id\" href=\"#seg\">seg</a>))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Test whether a block of memory is a valid user space address.</span>", 
"<span class=\"comment\"> * Returns 0 if the range is valid, nonzero otherwise.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is equivalent to the following test:</span>", 
"<span class=\"comment\"> * (u33)addr + (u33)size &gt;= (u33)current-&gt;addr_limit.seg (u65 for x86_64)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This needs 33-bit (65-bit for x86_64) arithmetic. We have a carry...</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__range_not_ok\">__range_not_ok</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#size\">size</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flag\">flag</a>, <a class=\"id\" href=\"#roksum\">roksum</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__chk_user_ptr\">__chk_user_ptr</a>(<a class=\"id\" href=\"#addr\">addr</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a>(\"add %3,%1 ; sbb %0,%0 ; cmp %1,%4 ; sbb $0,%0\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>    : \"=&r\" (<a class=\"id\" href=\"#flag\">flag</a>), \"=r\" (<a class=\"id\" href=\"#roksum\">roksum</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>    : \"1\" (<a class=\"id\" href=\"#addr\">addr</a>), \"g\" ((long)(<a class=\"id\" href=\"#size\">size</a>)),<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>      \"rm\" (<a class=\"id\" href=\"#current_thread_info\">current_thread_info</a>()-><a class=\"id\" href=\"#addr_limit\">addr_limit</a>.<a class=\"id\" href=\"#seg\">seg</a>));<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#flag\">flag</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * access_ok: - Checks if a user space pointer is valid</span>", 
"<span class=\"comment\"> * @type: Type of access: %VERIFY_READ or %VERIFY_WRITE.  Note that</span>", 
"<span class=\"comment\"> *        %VERIFY_WRITE is a superset of %VERIFY_READ - if it is safe</span>", 
"<span class=\"comment\"> *        to write to a block, it is always safe to read from it.</span>", 
"<span class=\"comment\"> * @addr: User space pointer to start of block to check</span>", 
"<span class=\"comment\"> * @size: Size of block to check</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Context: User context only.  This function may sleep.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Checks if a pointer to a block of memory in user space is valid.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns true (nonzero) if the memory block may be valid, false (zero)</span>", 
"<span class=\"comment\"> * if it is definitely invalid.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note that, depending on architecture, this function probably just</span>", 
"<span class=\"comment\"> * checks that the pointer is in the user space range - after calling</span>", 
"<span class=\"comment\"> * this function, memory access functions may still return -EFAULT.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#access_ok\">access_ok</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#size\">size</a>) (<a class=\"id\" href=\"#likely\">likely</a>(<a class=\"id\" href=\"#__range_not_ok\">__range_not_ok</a>(<a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#size\">size</a>) == 0))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The exception table consists of pairs of addresses: the first is the</span>", 
"<span class=\"comment\"> * address of an instruction that is allowed to fault, and the second is</span>", 
"<span class=\"comment\"> * the address at which the program should continue.  No registers are</span>", 
"<span class=\"comment\"> * modified, so it is entirely up to the continuation code to figure out</span>", 
"<span class=\"comment\"> * what to do.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * All the routines below use bits of fixup code that are out of line</span>", 
"<span class=\"comment\"> * with the main instruction path.  This means when everything is well,</span>", 
"<span class=\"comment\"> * we don't even have to jump over them.  Further, they do not intrude</span>", 
"<span class=\"comment\"> * on our cache or tlb entries.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"struct <a class=\"id\" href=\"#exception_table_entry\">exception_table_entry</a> {", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#insn\">insn</a>, <a class=\"id\" href=\"#fixup\">fixup</a>;", 
"};", 
"", 
"extern int <a class=\"id\" href=\"#fixup_exception\">fixup_exception</a>(struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * These are the main single-value transfer routines.  They automatically</span>", 
"<span class=\"comment\"> * use the right size if we just have the right pointer type.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This gets kind of ugly. We want to return _two_ values in \"get_user()\"</span>", 
"<span class=\"comment\"> * and yet we don't want to do any pointers, because that is too much</span>", 
"<span class=\"comment\"> * of a performance impact. Thus we have a few rather ugly macros here,</span>", 
"<span class=\"comment\"> * and hide all the ugliness from the user.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The \"__xxx\" versions of the user access functions are versions that</span>", 
"<span class=\"comment\"> * do not verify the address space, that must have been done previously</span>", 
"<span class=\"comment\"> * with a separate \"access_ok()\" call (this is used when we do multiple</span>", 
"<span class=\"comment\"> * accesses to the same area of user memory).</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"extern int <a class=\"id\" href=\"#__get_user_1\">__get_user_1</a>(void);", 
"extern int <a class=\"id\" href=\"#__get_user_2\">__get_user_2</a>(void);", 
"extern int <a class=\"id\" href=\"#__get_user_4\">__get_user_4</a>(void);", 
"extern int <a class=\"id\" href=\"#__get_user_8\">__get_user_8</a>(void);", 
"extern int <a class=\"id\" href=\"#__get_user_bad\">__get_user_bad</a>(void);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__get_user_x\">__get_user_x</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#ptr\">ptr</a>)<span class=\"ts\"/><span class=\"ts\"/>      \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"call __get_user_\" #<a class=\"id\" href=\"#size\">size</a><span class=\"ts\"/>      \\", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"=a\" (<a class=\"id\" href=\"#ret\">ret</a>), \"=d\" (<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/>      \\", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"0\" (<a class=\"id\" href=\"#ptr\">ptr</a>))<span class=\"ts\"/><span class=\"ts\"/>      \\", 
"", 
"<span class=\"comment\">/* Careful: we have to cast the result to the type of the pointer</span>", 
"<span class=\"comment\"> * for sign reasons */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * get_user: - Get a simple variable from user space.</span>", 
"<span class=\"comment\"> * @x:   Variable to store result.</span>", 
"<span class=\"comment\"> * @ptr: Source address, in user space.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Context: User context only.  This function may sleep.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This macro copies a single simple variable from user space to kernel</span>", 
"<span class=\"comment\"> * space.  It supports simple types like char and int, but not larger</span>", 
"<span class=\"comment\"> * data types like structures or arrays.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @ptr must have pointer-to-simple-variable type, and the result of</span>", 
"<span class=\"comment\"> * dereferencing @ptr must be assignable to @x without a cast.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns zero on success, or -EFAULT on error.</span>", 
"<span class=\"comment\"> * On error, the variable @x is set to zero.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__get_user_8\">__get_user_8</a>(<a class=\"id\" href=\"#__ret_gu\">__ret_gu</a>, <a class=\"id\" href=\"#__val_gu\">__val_gu</a>, <a class=\"id\" href=\"#ptr\">ptr</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__get_user_x\">__get_user_x</a>(<a class=\"id\" href=\"#X\">X</a>, <a class=\"id\" href=\"#__ret_gu\">__ret_gu</a>, <a class=\"id\" href=\"#__val_gu\">__val_gu</a>, <a class=\"id\" href=\"#ptr\">ptr</a>)", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__get_user_8\">__get_user_8</a>(<a class=\"id\" href=\"#__ret_gu\">__ret_gu</a>, <a class=\"id\" href=\"#__val_gu\">__val_gu</a>, <a class=\"id\" href=\"#ptr\">ptr</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__get_user_x\">__get_user_x</a>(8, <a class=\"id\" href=\"#__ret_gu\">__ret_gu</a>, <a class=\"id\" href=\"#__val_gu\">__val_gu</a>, <a class=\"id\" href=\"#ptr\">ptr</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#ptr\">ptr</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#__ret_gu\">__ret_gu</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#__val_gu\">__val_gu</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__chk_user_ptr\">__chk_user_ptr</a>(<a class=\"id\" href=\"#ptr\">ptr</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_fault\">might_fault</a>();<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>switch (sizeof(*(<a class=\"id\" href=\"#ptr\">ptr</a>))) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>case 1:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__get_user_x\">__get_user_x</a>(1, <a class=\"id\" href=\"#__ret_gu\">__ret_gu</a>, <a class=\"id\" href=\"#__val_gu\">__val_gu</a>, <a class=\"id\" href=\"#ptr\">ptr</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>case 2:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__get_user_x\">__get_user_x</a>(2, <a class=\"id\" href=\"#__ret_gu\">__ret_gu</a>, <a class=\"id\" href=\"#__val_gu\">__val_gu</a>, <a class=\"id\" href=\"#ptr\">ptr</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>case 4:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__get_user_x\">__get_user_x</a>(4, <a class=\"id\" href=\"#__ret_gu\">__ret_gu</a>, <a class=\"id\" href=\"#__val_gu\">__val_gu</a>, <a class=\"id\" href=\"#ptr\">ptr</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>case 8:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__get_user_8\">__get_user_8</a>(<a class=\"id\" href=\"#__ret_gu\">__ret_gu</a>, <a class=\"id\" href=\"#__val_gu\">__val_gu</a>, <a class=\"id\" href=\"#ptr\">ptr</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>default:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__get_user_x\">__get_user_x</a>(<a class=\"id\" href=\"#X\">X</a>, <a class=\"id\" href=\"#__ret_gu\">__ret_gu</a>, <a class=\"id\" href=\"#__val_gu\">__val_gu</a>, <a class=\"id\" href=\"#ptr\">ptr</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#x\">x</a>) = (<a class=\"id\" href=\"#__typeof__\">__typeof__</a>(*(<a class=\"id\" href=\"#ptr\">ptr</a>)))<a class=\"id\" href=\"#__val_gu\">__val_gu</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ret_gu\">__ret_gu</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__put_user_x\">__put_user_x</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#__ret_pu\">__ret_pu</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"call __put_user_\" #<a class=\"id\" href=\"#size\">size</a> : \"=a\" (<a class=\"id\" href=\"#__ret_pu\">__ret_pu</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"0\" ((<a class=\"id\" href=\"#typeof\">typeof</a>(*(<a class=\"id\" href=\"#ptr\">ptr</a>)))(<a class=\"id\" href=\"#x\">x</a>)), \"c\" (<a class=\"id\" href=\"#ptr\">ptr</a>) : \"ebx\")", 
"", 
"", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__put_user_asm_u64\">__put_user_asm_u64</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#err\">err</a>, <a class=\"id\" href=\"#errret\">errret</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"1: movl %%eax,0(%2)\\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"2: movl %%edx,4(%2)\\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"3:\\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     \".section .fixup,\\\"ax\\\"\\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"4: movl %3,%0\\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     \" jmp 3b\\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     \".previous\\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#_ASM_EXTABLE\">_ASM_EXTABLE</a>(1<a class=\"id\" href=\"#b\">b</a>, 4<a class=\"id\" href=\"#b\">b</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#_ASM_EXTABLE\">_ASM_EXTABLE</a>(2<a class=\"id\" href=\"#b\">b</a>, 4<a class=\"id\" href=\"#b\">b</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"=r\" (<a class=\"id\" href=\"#err\">err</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"A\" (<a class=\"id\" href=\"#x\">x</a>), \"r\" (<a class=\"id\" href=\"#addr\">addr</a>), \"i\" (<a class=\"id\" href=\"#errret\">errret</a>), \"0\" (<a class=\"id\" href=\"#err\">err</a>))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__put_user_asm_ex_u64\">__put_user_asm_ex_u64</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#addr\">addr</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"1: movl %%eax,0(%1)\\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"2: movl %%edx,4(%1)\\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"3:\\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#_ASM_EXTABLE\">_ASM_EXTABLE</a>(1<a class=\"id\" href=\"#b\">b</a>, 2<a class=\"id\" href=\"#b\">b</a> - 1<a class=\"id\" href=\"#b\">b</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#_ASM_EXTABLE\">_ASM_EXTABLE</a>(2<a class=\"id\" href=\"#b\">b</a>, 3<a class=\"id\" href=\"#b\">b</a> - 2<a class=\"id\" href=\"#b\">b</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     : : \"A\" (<a class=\"id\" href=\"#x\">x</a>), \"r\" (<a class=\"id\" href=\"#addr\">addr</a>))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__put_user_x8\">__put_user_x8</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#__ret_pu\">__ret_pu</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"call __put_user_8\" : \"=a\" (<a class=\"id\" href=\"#__ret_pu\">__ret_pu</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"A\" ((<a class=\"id\" href=\"#typeof\">typeof</a>(*(<a class=\"id\" href=\"#ptr\">ptr</a>)))(<a class=\"id\" href=\"#x\">x</a>)), \"c\" (<a class=\"id\" href=\"#ptr\">ptr</a>) : \"ebx\")", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__put_user_asm_u64\">__put_user_asm_u64</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#retval\">retval</a>, <a class=\"id\" href=\"#errret\">errret</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__put_user_asm\">__put_user_asm</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#retval\">retval</a>, \"q\", \"\", \"er\", <a class=\"id\" href=\"#errret\">errret</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__put_user_asm_ex_u64\">__put_user_asm_ex_u64</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#addr\">addr</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__put_user_asm_ex\">__put_user_asm_ex</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#addr\">addr</a>, \"q\", \"\", \"er\")", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__put_user_x8\">__put_user_x8</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#__ret_pu\">__ret_pu</a>) <a class=\"id\" href=\"#__put_user_x\">__put_user_x</a>(8, <a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#__ret_pu\">__ret_pu</a>)", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"extern void <a class=\"id\" href=\"#__put_user_bad\">__put_user_bad</a>(void);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Strange magic calling convention: pointer in %ecx,</span>", 
"<span class=\"comment\"> * value in %eax(:%edx), return value in %eax. clobbers %rbx</span>", 
"<span class=\"comment\"> */</span>", 
"extern void <a class=\"id\" href=\"#__put_user_1\">__put_user_1</a>(void);", 
"extern void <a class=\"id\" href=\"#__put_user_2\">__put_user_2</a>(void);", 
"extern void <a class=\"id\" href=\"#__put_user_4\">__put_user_4</a>(void);", 
"extern void <a class=\"id\" href=\"#__put_user_8\">__put_user_8</a>(void);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_WP_WORKS_OK\">CONFIG_X86_WP_WORKS_OK</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * put_user: - Write a simple value into user space.</span>", 
"<span class=\"comment\"> * @x:   Value to copy to user space.</span>", 
"<span class=\"comment\"> * @ptr: Destination address, in user space.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Context: User context only.  This function may sleep.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This macro copies a single simple value from kernel space to user</span>", 
"<span class=\"comment\"> * space.  It supports simple types like char and int, but not larger</span>", 
"<span class=\"comment\"> * data types like structures or arrays.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @ptr must have pointer-to-simple-variable type, and @x must be assignable</span>", 
"<span class=\"comment\"> * to the result of dereferencing @ptr.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns zero on success, or -EFAULT on error.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#put_user\">put_user</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#ptr\">ptr</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#__ret_pu\">__ret_pu</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__typeof__\">__typeof__</a>(*(<a class=\"id\" href=\"#ptr\">ptr</a>)) <a class=\"id\" href=\"#__pu_val\">__pu_val</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__chk_user_ptr\">__chk_user_ptr</a>(<a class=\"id\" href=\"#ptr\">ptr</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_fault\">might_fault</a>();<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__pu_val\">__pu_val</a> = <a class=\"id\" href=\"#x\">x</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>switch (sizeof(*(<a class=\"id\" href=\"#ptr\">ptr</a>))) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>case 1:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__put_user_x\">__put_user_x</a>(1, <a class=\"id\" href=\"#__pu_val\">__pu_val</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#__ret_pu\">__ret_pu</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>case 2:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__put_user_x\">__put_user_x</a>(2, <a class=\"id\" href=\"#__pu_val\">__pu_val</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#__ret_pu\">__ret_pu</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>case 4:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__put_user_x\">__put_user_x</a>(4, <a class=\"id\" href=\"#__pu_val\">__pu_val</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#__ret_pu\">__ret_pu</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>case 8:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__put_user_x8\">__put_user_x8</a>(<a class=\"id\" href=\"#__pu_val\">__pu_val</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#__ret_pu\">__ret_pu</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>default:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__put_user_x\">__put_user_x</a>(<a class=\"id\" href=\"#X\">X</a>, <a class=\"id\" href=\"#__pu_val\">__pu_val</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#__ret_pu\">__ret_pu</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ret_pu\">__ret_pu</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__put_user_size\">__put_user_size</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#retval\">retval</a>, <a class=\"id\" href=\"#errret\">errret</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = 0;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__chk_user_ptr\">__chk_user_ptr</a>(<a class=\"id\" href=\"#ptr\">ptr</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#size\">size</a>) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>case 1:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__put_user_asm\">__put_user_asm</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#retval\">retval</a>, \"b\", \"b\", \"iq\", <a class=\"id\" href=\"#errret\">errret</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>case 2:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__put_user_asm\">__put_user_asm</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#retval\">retval</a>, \"w\", \"w\", \"ir\", <a class=\"id\" href=\"#errret\">errret</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>case 4:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__put_user_asm\">__put_user_asm</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#retval\">retval</a>, \"l\", \"k\", \"ir\", <a class=\"id\" href=\"#errret\">errret</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>case 8:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__put_user_asm_u64\">__put_user_asm_u64</a>((<a class=\"id\" href=\"#__typeof__\">__typeof__</a>(*<a class=\"id\" href=\"#ptr\">ptr</a>))(<a class=\"id\" href=\"#x\">x</a>), <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#retval\">retval</a>,<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#errret\">errret</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>default:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__put_user_bad\">__put_user_bad</a>();<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while (0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__put_user_size_ex\">__put_user_size_ex</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#size\">size</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__chk_user_ptr\">__chk_user_ptr</a>(<a class=\"id\" href=\"#ptr\">ptr</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#size\">size</a>) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>case 1:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__put_user_asm_ex\">__put_user_asm_ex</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, \"b\", \"b\", \"iq\");<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>case 2:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__put_user_asm_ex\">__put_user_asm_ex</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, \"w\", \"w\", \"ir\");<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>case 4:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__put_user_asm_ex\">__put_user_asm_ex</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, \"l\", \"k\", \"ir\");<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>case 8:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__put_user_asm_ex_u64\">__put_user_asm_ex_u64</a>((<a class=\"id\" href=\"#__typeof__\">__typeof__</a>(*<a class=\"id\" href=\"#ptr\">ptr</a>))(<a class=\"id\" href=\"#x\">x</a>), <a class=\"id\" href=\"#ptr\">ptr</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>default:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__put_user_bad\">__put_user_bad</a>();<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while (0)", 
"", 
"#else", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__put_user_size\">__put_user_size</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#retval\">retval</a>, <a class=\"id\" href=\"#errret\">errret</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__typeof__\">__typeof__</a>(*(<a class=\"id\" href=\"#ptr\">ptr</a>))<a class=\"id\" href=\"#__pus_tmp\">__pus_tmp</a> = <a class=\"id\" href=\"#x\">x</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = 0;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#__copy_to_user_ll\">__copy_to_user_ll</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, &amp;<a class=\"id\" href=\"#__pus_tmp\">__pus_tmp</a>, <a class=\"id\" href=\"#size\">size</a>) != 0))<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = <a class=\"id\" href=\"#errret\">errret</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while (0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#put_user\">put_user</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#ptr\">ptr</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#__ret_pu\">__ret_pu</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__typeof__\">__typeof__</a>(*(<a class=\"id\" href=\"#ptr\">ptr</a>))<a class=\"id\" href=\"#__pus_tmp\">__pus_tmp</a> = <a class=\"id\" href=\"#x\">x</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ret_pu\">__ret_pu</a> = 0;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#__copy_to_user_ll\">__copy_to_user_ll</a>(<a class=\"id\" href=\"#ptr\">ptr</a>, &amp;<a class=\"id\" href=\"#__pus_tmp\">__pus_tmp</a>,<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       sizeof(*(<a class=\"id\" href=\"#ptr\">ptr</a>))) != 0))<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__ret_pu\">__ret_pu</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ret_pu\">__ret_pu</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__get_user_asm_u64\">__get_user_asm_u64</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#retval\">retval</a>, <a class=\"id\" href=\"#errret\">errret</a>)<span class=\"ts\"/>(<a class=\"id\" href=\"#x\">x</a>) = <a class=\"id\" href=\"#__get_user_bad\">__get_user_bad</a>()", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__get_user_asm_ex_u64\">__get_user_asm_ex_u64</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#ptr\">ptr</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#x\">x</a>) = <a class=\"id\" href=\"#__get_user_bad\">__get_user_bad</a>()", 
"#else", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__get_user_asm_u64\">__get_user_asm_u64</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#retval\">retval</a>, <a class=\"id\" href=\"#errret\">errret</a>) \\", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#__get_user_asm\">__get_user_asm</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#retval\">retval</a>, \"q\", \"\", \"=r\", <a class=\"id\" href=\"#errret\">errret</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__get_user_asm_ex_u64\">__get_user_asm_ex_u64</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#ptr\">ptr</a>) \\", 
"<span class=\"ts\"/> <a class=\"id\" href=\"#__get_user_asm_ex\">__get_user_asm_ex</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, \"q\", \"\", \"=r\")", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__get_user_size\">__get_user_size</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#retval\">retval</a>, <a class=\"id\" href=\"#errret\">errret</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = 0;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__chk_user_ptr\">__chk_user_ptr</a>(<a class=\"id\" href=\"#ptr\">ptr</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#size\">size</a>) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>case 1:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__get_user_asm\">__get_user_asm</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#retval\">retval</a>, \"b\", \"b\", \"=q\", <a class=\"id\" href=\"#errret\">errret</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>case 2:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__get_user_asm\">__get_user_asm</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#retval\">retval</a>, \"w\", \"w\", \"=r\", <a class=\"id\" href=\"#errret\">errret</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>case 4:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__get_user_asm\">__get_user_asm</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#retval\">retval</a>, \"l\", \"k\", \"=r\", <a class=\"id\" href=\"#errret\">errret</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>case 8:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__get_user_asm_u64\">__get_user_asm_u64</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#retval\">retval</a>, <a class=\"id\" href=\"#errret\">errret</a>);<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>default:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#x\">x</a>) = <a class=\"id\" href=\"#__get_user_bad\">__get_user_bad</a>();<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while (0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__get_user_asm\">__get_user_asm</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#err\">err</a>, <a class=\"id\" href=\"#itype\">itype</a>, <a class=\"id\" href=\"#rtype\">rtype</a>, <a class=\"id\" href=\"#ltype\">ltype</a>, <a class=\"id\" href=\"#errret\">errret</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"1: mov\"<a class=\"id\" href=\"#itype\">itype</a>\" %2,%\"<a class=\"id\" href=\"#rtype\">rtype</a>\"1\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"2:\\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     \".section .fixup,\\\"ax\\\"\\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"3: mov %3,%0\\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     \" xor\"<a class=\"id\" href=\"#itype\">itype</a>\" %\"<a class=\"id\" href=\"#rtype\">rtype</a>\"1,%\"<a class=\"id\" href=\"#rtype\">rtype</a>\"1\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     \" jmp 2b\\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     \".previous\\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#_ASM_EXTABLE\">_ASM_EXTABLE</a>(1<a class=\"id\" href=\"#b\">b</a>, 3<a class=\"id\" href=\"#b\">b</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"=r\" (<a class=\"id\" href=\"#err\">err</a>), <a class=\"id\" href=\"#ltype\">ltype</a>(<a class=\"id\" href=\"#x\">x</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"m\" (<a class=\"id\" href=\"#__m\">__m</a>(<a class=\"id\" href=\"#addr\">addr</a>)), \"i\" (<a class=\"id\" href=\"#errret\">errret</a>), \"0\" (<a class=\"id\" href=\"#err\">err</a>))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__get_user_size_ex\">__get_user_size_ex</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#size\">size</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__chk_user_ptr\">__chk_user_ptr</a>(<a class=\"id\" href=\"#ptr\">ptr</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#size\">size</a>) {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>case 1:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__get_user_asm_ex\">__get_user_asm_ex</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, \"b\", \"b\", \"=q\");<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>case 2:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__get_user_asm_ex\">__get_user_asm_ex</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, \"w\", \"w\", \"=r\");<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>case 4:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__get_user_asm_ex\">__get_user_asm_ex</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, \"l\", \"k\", \"=r\");<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>case 8:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__get_user_asm_ex_u64\">__get_user_asm_ex_u64</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#ptr\">ptr</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>default:<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#x\">x</a>) = <a class=\"id\" href=\"#__get_user_bad\">__get_user_bad</a>();<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while (0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__get_user_asm_ex\">__get_user_asm_ex</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#itype\">itype</a>, <a class=\"id\" href=\"#rtype\">rtype</a>, <a class=\"id\" href=\"#ltype\">ltype</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"1: mov\"<a class=\"id\" href=\"#itype\">itype</a>\" %1,%\"<a class=\"id\" href=\"#rtype\">rtype</a>\"0\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"2:\\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#_ASM_EXTABLE\">_ASM_EXTABLE</a>(1<a class=\"id\" href=\"#b\">b</a>, 2<a class=\"id\" href=\"#b\">b</a> - 1<a class=\"id\" href=\"#b\">b</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     : <a class=\"id\" href=\"#ltype\">ltype</a>(<a class=\"id\" href=\"#x\">x</a>) : \"m\" (<a class=\"id\" href=\"#__m\">__m</a>(<a class=\"id\" href=\"#addr\">addr</a>)))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__put_user_nocheck\">__put_user_nocheck</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#size\">size</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#__pu_err\">__pu_err</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__put_user_size\">__put_user_size</a>((<a class=\"id\" href=\"#x\">x</a>), (<a class=\"id\" href=\"#ptr\">ptr</a>), (<a class=\"id\" href=\"#size\">size</a>), <a class=\"id\" href=\"#__pu_err\">__pu_err</a>, -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__pu_err\">__pu_err</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__get_user_nocheck\">__get_user_nocheck</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#ptr\">ptr</a>, <a class=\"id\" href=\"#size\">size</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"({<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#__gu_err\">__gu_err</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#__gu_val\">__gu_val</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__get_user_size\">__get_user_size</a>(<a class=\"id\" href=\"#__gu_val\">__gu_val</a>, (<a class=\"id\" href=\"#ptr\">ptr</a>), (<a class=\"id\" href=\"#size\">size</a>), <a class=\"id\" href=\"#__gu_err\">__gu_err</a>, -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>);<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#x\">x</a>) = (<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#__typeof__\">__typeof__</a>(*(<a class=\"id\" href=\"#ptr\">ptr</a>)))<a class=\"id\" href=\"#__gu_val\">__gu_val</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__gu_err\">__gu_err</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"})", 
"", 
"<span class=\"comment\">/* FIXME: this hack is definitely wrong -AK */</span>", 
"struct <a class=\"id\" href=\"#__large_struct\">__large_struct</a> { unsigned long <a class=\"id\" href=\"#buf\">buf</a>[100]; };", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__m\">__m</a>(<a class=\"id\" href=\"#x\">x</a>) (*(struct <a class=\"id\" href=\"#__large_struct\">__large_struct</a> <a class=\"id\" href=\"#__user\">__user</a> *)(<a class=\"id\" href=\"#x\">x</a>))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Tell gcc we read from memory instead of writing: this is because</span>", 
"<span class=\"comment\"> * we do not write to any memory gcc knows about, so there are no</span>", 
"<span class=\"comment\"> * aliasing issues.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__put_user_asm\">__put_user_asm</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#err\">err</a>, <a class=\"id\" href=\"#itype\">itype</a>, <a class=\"id\" href=\"#rtype\">rtype</a>, <a class=\"id\" href=\"#ltype\">ltype</a>, <a class=\"id\" href=\"#errret\">errret</a>)<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"1: mov\"<a class=\"id\" href=\"#itype\">itype</a>\" %\"<a class=\"id\" href=\"#rtype\">rtype</a>\"1,%2\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"2:\\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     \".section .fixup,\\\"ax\\\"\\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"3: mov %3,%0\\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     \" jmp 2b\\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     \".previous\\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#_ASM_EXTABLE\">_ASM_EXTABLE</a>(1<a class=\"id\" href=\"#b\">b</a>, 3<a class=\"id\" href=\"#b\">b</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     : \"=r\"(<a class=\"id\" href=\"#err\">err</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     : <a class=\"id\" href=\"#ltype\">ltype</a>(<a class=\"id\" href=\"#x\">x</a>), \"m\" (<a class=\"id\" href=\"#__m\">__m</a>(<a class=\"id\" href=\"#addr\">addr</a>)), \"i\" (<a class=\"id\" href=\"#errret\">errret</a>), \"0\" (<a class=\"id\" href=\"#err\">err</a>))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__put_user_asm_ex\">__put_user_asm_ex</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#itype\">itype</a>, <a class=\"id\" href=\"#rtype\">rtype</a>, <a class=\"id\" href=\"#ltype\">ltype</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"1: mov\"<a class=\"id\" href=\"#itype\">itype</a>\" %\"<a class=\"id\" href=\"#rtype\">rtype</a>\"0,%1\\n\"<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     \"2:\\n\"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#_ASM_EXTABLE\">_ASM_EXTABLE</a>(1<a class=\"id\" href=\"#b\">b</a>, 2<a class=\"id\" href=\"#b\">b</a> - 1<a class=\"id\" href=\"#b\">b</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/>     : : <a class=\"id\" href=\"#ltype\">ltype</a>(<a class=\"id\" href=\"#x\">x</a>), \"m\" (<a class=\"id\" href=\"#__m\">__m</a>(<a class=\"id\" href=\"#addr\">addr</a>)))", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * uaccess_try and catch</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#uaccess_try\">uaccess_try</a><span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#prev_err\">prev_err</a> = <a class=\"id\" href=\"#current_thread_info\">current_thread_info</a>()-><a class=\"id\" href=\"#uaccess_err\">uaccess_err</a>;<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current_thread_info\">current_thread_info</a>()-><a class=\"id\" href=\"#uaccess_err\">uaccess_err</a> = 0;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#barrier\">barrier</a>();", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#uaccess_catch\">uaccess_catch</a>(<a class=\"id\" href=\"#err\">err</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#err\">err</a>) |= <a class=\"id\" href=\"#current_thread_info\">current_thread_info</a>()-><a class=\"id\" href=\"#uaccess_err\">uaccess_err</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current_thread_info\">current_thread_info</a>()-><a class=\"id\" href=\"#uaccess_err\">uaccess_err</a> = <a class=\"id\" href=\"#prev_err\">prev_err</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while (0)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __get_user: - Get a simple variable from user space, with less checking.</span>", 
"<span class=\"comment\"> * @x:   Variable to store result.</span>", 
"<span class=\"comment\"> * @ptr: Source address, in user space.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Context: User context only.  This function may sleep.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This macro copies a single simple variable from user space to kernel</span>", 
"<span class=\"comment\"> * space.  It supports simple types like char and int, but not larger</span>", 
"<span class=\"comment\"> * data types like structures or arrays.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @ptr must have pointer-to-simple-variable type, and the result of</span>", 
"<span class=\"comment\"> * dereferencing @ptr must be assignable to @x without a cast.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Caller must check the pointer with access_ok() before calling this</span>", 
"<span class=\"comment\"> * function.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns zero on success, or -EFAULT on error.</span>", 
"<span class=\"comment\"> * On error, the variable @x is set to zero.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__get_user\">__get_user</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#ptr\">ptr</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__get_user_nocheck\">__get_user_nocheck</a>((<a class=\"id\" href=\"#x\">x</a>), (<a class=\"id\" href=\"#ptr\">ptr</a>), sizeof(*(<a class=\"id\" href=\"#ptr\">ptr</a>)))", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __put_user: - Write a simple value into user space, with less checking.</span>", 
"<span class=\"comment\"> * @x:   Value to copy to user space.</span>", 
"<span class=\"comment\"> * @ptr: Destination address, in user space.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Context: User context only.  This function may sleep.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This macro copies a single simple value from kernel space to user</span>", 
"<span class=\"comment\"> * space.  It supports simple types like char and int, but not larger</span>", 
"<span class=\"comment\"> * data types like structures or arrays.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @ptr must have pointer-to-simple-variable type, and @x must be assignable</span>", 
"<span class=\"comment\"> * to the result of dereferencing @ptr.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Caller must check the pointer with access_ok() before calling this</span>", 
"<span class=\"comment\"> * function.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns zero on success, or -EFAULT on error.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__put_user\">__put_user</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#ptr\">ptr</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__put_user_nocheck\">__put_user_nocheck</a>((<a class=\"id\" href=\"#__typeof__\">__typeof__</a>(*(<a class=\"id\" href=\"#ptr\">ptr</a>)))(<a class=\"id\" href=\"#x\">x</a>), (<a class=\"id\" href=\"#ptr\">ptr</a>), sizeof(*(<a class=\"id\" href=\"#ptr\">ptr</a>)))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__get_user_unaligned\">__get_user_unaligned</a> <a class=\"id\" href=\"#__get_user\">__get_user</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__put_user_unaligned\">__put_user_unaligned</a> <a class=\"id\" href=\"#__put_user\">__put_user</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * {get|put}_user_try and catch</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * get_user_try {</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>get_user_ex(...);</span>", 
"<span class=\"comment\"> * } get_user_catch(err)</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#get_user_try\">get_user_try</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uaccess_try\">uaccess_try</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#get_user_catch\">get_user_catch</a>(<a class=\"id\" href=\"#err\">err</a>)<span class=\"ts\"/><a class=\"id\" href=\"#uaccess_catch\">uaccess_catch</a>(<a class=\"id\" href=\"#err\">err</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#get_user_ex\">get_user_ex</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#ptr\">ptr</a>)<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#__gue_val\">__gue_val</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__get_user_size_ex\">__get_user_size_ex</a>((<a class=\"id\" href=\"#__gue_val\">__gue_val</a>), (<a class=\"id\" href=\"#ptr\">ptr</a>), (sizeof(*(<a class=\"id\" href=\"#ptr\">ptr</a>))));<span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#x\">x</a>) = (<a class=\"id\" href=\"#__force\">__force</a> <a class=\"id\" href=\"#__typeof__\">__typeof__</a>(*(<a class=\"id\" href=\"#ptr\">ptr</a>)))<a class=\"id\" href=\"#__gue_val\">__gue_val</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while (0)", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_WP_WORKS_OK\">CONFIG_X86_WP_WORKS_OK</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#put_user_try\">put_user_try</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uaccess_try\">uaccess_try</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#put_user_catch\">put_user_catch</a>(<a class=\"id\" href=\"#err\">err</a>)<span class=\"ts\"/><a class=\"id\" href=\"#uaccess_catch\">uaccess_catch</a>(<a class=\"id\" href=\"#err\">err</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#put_user_ex\">put_user_ex</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#ptr\">ptr</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__put_user_size_ex\">__put_user_size_ex</a>((<a class=\"id\" href=\"#__typeof__\">__typeof__</a>(*(<a class=\"id\" href=\"#ptr\">ptr</a>)))(<a class=\"id\" href=\"#x\">x</a>), (<a class=\"id\" href=\"#ptr\">ptr</a>), sizeof(*(<a class=\"id\" href=\"#ptr\">ptr</a>)))", 
"", 
"#else <span class=\"comment\">/* !CONFIG_X86_WP_WORKS_OK */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#put_user_try\">put_user_try</a><span class=\"ts\"/><span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#__uaccess_err\">__uaccess_err</a> = 0;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#put_user_catch\">put_user_catch</a>(<a class=\"id\" href=\"#err\">err</a>)<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#err\">err</a>) |= <a class=\"id\" href=\"#__uaccess_err\">__uaccess_err</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while (0)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#put_user_ex\">put_user_ex</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#ptr\">ptr</a>)<span class=\"ts\"/>do {<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__uaccess_err\">__uaccess_err</a> |= <a class=\"id\" href=\"#__put_user\">__put_user</a>(<a class=\"id\" href=\"#x\">x</a>, <a class=\"id\" href=\"#ptr\">ptr</a>);<span class=\"ts\"/>\\", 
"} while (0)", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_X86_WP_WORKS_OK */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * movsl can be slow when source and dest are not both 8-byte aligned</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_INTEL_USERCOPY\">CONFIG_X86_INTEL_USERCOPY</a>", 
"extern struct <a class=\"id\" href=\"#movsl_mask\">movsl_mask</a> {", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#mask\">mask</a>;", 
"} <a class=\"id\" href=\"#____cacheline_aligned_in_smp\">____cacheline_aligned_in_smp</a> <a class=\"id\" href=\"#movsl_mask\">movsl_mask</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ARCH_HAS_NOCACHE_UACCESS\">ARCH_HAS_NOCACHE_UACCESS</a> 1", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_X86_32\">CONFIG_X86_32</a>", 
"# <a class=\"id\" href=\"#include\">include</a> \"uaccess_32.h\"", 
"#else", 
"# <a class=\"id\" href=\"#include\">include</a> \"uaccess_64.h\"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _ASM_X86_UACCESS_H */</span>", 
"", 
];
xr_frag_insert('l/24/902789fc2aa212695a2a22f252869efb25a697.xr', __xr_tmp);
