var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  Copyright (C) 2008 Red Hat, Inc., Eric Paris &lt;eparis@redhat.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This program is free software; you can redistribute it and/or modify</span>", 
"<span class=\"comment\"> *  it under the terms of the GNU General Public License as published by</span>", 
"<span class=\"comment\"> *  the Free Software Foundation; either version 2, or (at your option)</span>", 
"<span class=\"comment\"> *  any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> *  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span>", 
"<span class=\"comment\"> *  GNU General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> *  along with this program; see the file COPYING.  If not, write to</span>", 
"<span class=\"comment\"> *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mutex\">mutex</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#srcu\">srcu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rculist\">rculist</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#wait\">wait</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fsnotify_backend\">fsnotify_backend</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"fsnotify.h\"", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#atomic\">atomic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Final freeing of a group</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#fsnotify_final_destroy_group\">fsnotify_final_destroy_group</a>(struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* clear the notification queue of all events */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_flush_notify\">fsnotify_flush_notify</a>(<a class=\"id\" href=\"#group\">group</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#free_group_priv\">free_group_priv</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#free_group_priv\">free_group_priv</a>(<a class=\"id\" href=\"#group\">group</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#group\">group</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Trying to get rid of a group.  We need to first get rid of any outstanding</span>", 
"<span class=\"comment\"> * allocations and then free the group.  Remember that fsnotify_clear_marks_by_group</span>", 
"<span class=\"comment\"> * could miss marks that are being freed by inode and those marks could still</span>", 
"<span class=\"comment\"> * hold a reference to this group (via group-&gt;num_marks)  If we get into that</span>", 
"<span class=\"comment\"> * situtation, the fsnotify_final_destroy_group will get called when that final</span>", 
"<span class=\"comment\"> * mark is freed.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#fsnotify_destroy_group\">fsnotify_destroy_group</a>(struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* clear all inode marks for this group */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_clear_marks_by_group\">fsnotify_clear_marks_by_group</a>(<a class=\"id\" href=\"#group\">group</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synchronize_srcu\">synchronize_srcu</a>(&amp;<a class=\"id\" href=\"#fsnotify_mark_srcu\">fsnotify_mark_srcu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* past the point of no return, matches the initial value of 1 */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#num_marks\">num_marks</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_final_destroy_group\">fsnotify_final_destroy_group</a>(<a class=\"id\" href=\"#group\">group</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Drop a reference to a group.  Free it if it's through.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#fsnotify_put_group\">fsnotify_put_group</a>(struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fsnotify_destroy_group\">fsnotify_destroy_group</a>(<a class=\"id\" href=\"#group\">group</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Create a new fsnotify_group and hold a reference for the group returned.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#fsnotify_alloc_group\">fsnotify_alloc_group</a>(const struct <a class=\"id\" href=\"#fsnotify_ops\">fsnotify_ops</a> *<a class=\"id\" href=\"#ops\">ops</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a> *<a class=\"id\" href=\"#group\">group</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(struct <a class=\"id\" href=\"#fsnotify_group\">fsnotify_group</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#group\">group</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* set to 0 when there a no external references to this group */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#refcnt\">refcnt</a>, 1);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * hits 0 when there are no external references AND no marks for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this group</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#num_marks\">num_marks</a>, 1);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#notification_mutex\">notification_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#notification_list\">notification_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_waitqueue_head\">init_waitqueue_head</a>(&amp;<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#notification_waitq\">notification_waitq</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#max_events\">max_events</a> = <a class=\"id\" href=\"#UINT_MAX\">UINT_MAX</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#mark_lock\">mark_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#marks_list\">marks_list</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#group\">group</a>-><a class=\"id\" href=\"#ops\">ops</a> = <a class=\"id\" href=\"#ops\">ops</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#group\">group</a>;", 
"}", 
];
xr_frag_insert('l/24/97b7710acfc7bb0f5afa994e96cf47b5fd63ff.xr', __xr_tmp);
