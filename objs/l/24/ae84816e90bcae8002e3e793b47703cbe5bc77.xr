var __xr_tmp = [
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Module Name: nsxfeval - Public interfaces to the ACPI subsystem</span>", 
"<span class=\"comment\"> *                         ACPI Object evaluation interfaces</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (C) 2000 - 2010, Intel Corp.</span>", 
"<span class=\"comment\"> * All rights reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Redistribution and use in source and binary forms, with or without</span>", 
"<span class=\"comment\"> * modification, are permitted provided that the following conditions</span>", 
"<span class=\"comment\"> * are met:</span>", 
"<span class=\"comment\"> * 1. Redistributions of source code must retain the above copyright</span>", 
"<span class=\"comment\"> *    notice, this list of conditions, and the following disclaimer,</span>", 
"<span class=\"comment\"> *    without modification.</span>", 
"<span class=\"comment\"> * 2. Redistributions in binary form must reproduce at minimum a disclaimer</span>", 
"<span class=\"comment\"> *    substantially similar to the \"NO WARRANTY\" disclaimer below</span>", 
"<span class=\"comment\"> *    (\"Disclaimer\") and any redistribution must be conditioned upon</span>", 
"<span class=\"comment\"> *    including a substantially similar Disclaimer requirement for further</span>", 
"<span class=\"comment\"> *    binary redistribution.</span>", 
"<span class=\"comment\"> * 3. Neither the names of the above-listed copyright holders nor the names</span>", 
"<span class=\"comment\"> *    of any contributors may be used to endorse or promote products derived</span>", 
"<span class=\"comment\"> *    from this software without specific prior written permission.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Alternatively, this software may be distributed under the terms of the</span>", 
"<span class=\"comment\"> * GNU General Public License (\"GPL\") version 2 as published by the Free</span>", 
"<span class=\"comment\"> * Software Foundation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NO WARRANTY</span>", 
"<span class=\"comment\"> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span>", 
"<span class=\"comment\"> * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span>", 
"<span class=\"comment\"> * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR</span>", 
"<span class=\"comment\"> * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span>", 
"<span class=\"comment\"> * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span>", 
"<span class=\"comment\"> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS</span>", 
"<span class=\"comment\"> * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</span>", 
"<span class=\"comment\"> * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,</span>", 
"<span class=\"comment\"> * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING</span>", 
"<span class=\"comment\"> * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE</span>", 
"<span class=\"comment\"> * POSSIBILITY OF SUCH DAMAGES.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#acpi\">acpi</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"accommon.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acnamesp.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acinterp.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_COMPONENT\">_COMPONENT</a>          <a class=\"id\" href=\"#ACPI_NAMESPACE\">ACPI_NAMESPACE</a>", 
"<a class=\"id\" href=\"#ACPI_MODULE_NAME\">ACPI_MODULE_NAME</a>(\"nsxfeval\")", 
"", 
"<span class=\"comment\">/* Local prototypes */</span>", 
"static void <a class=\"id\" href=\"#acpi_ns_resolve_references\">acpi_ns_resolve_references</a>(struct <a class=\"id\" href=\"#acpi_evaluate_info\">acpi_evaluate_info</a> *<a class=\"id\" href=\"#info\">info</a>);", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_evaluate_object_typed</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Handle              - Object handle (optional)</span>", 
"<span class=\"comment\"> *              Pathname            - Object pathname (optional)</span>", 
"<span class=\"comment\"> *              external_params     - List of parameters to pass to method,</span>", 
"<span class=\"comment\"> *                                    terminated by NULL.  May be NULL</span>", 
"<span class=\"comment\"> *                                    if no parameters are being passed.</span>", 
"<span class=\"comment\"> *              return_buffer       - Where to put method's return value (if</span>", 
"<span class=\"comment\"> *                                    any).  If NULL, no value is returned.</span>", 
"<span class=\"comment\"> *              return_type         - Expected type of return object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Find and evaluate the given object, passing the given</span>", 
"<span class=\"comment\"> *              parameters if necessary.  One of \"Handle\" or \"Pathname\" must</span>", 
"<span class=\"comment\"> *              be valid (non-null)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_evaluate_object_typed\">acpi_evaluate_object_typed</a>(<a class=\"id\" href=\"#acpi_handle\">acpi_handle</a> <a class=\"id\" href=\"#handle\">handle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#acpi_string\">acpi_string</a> <a class=\"id\" href=\"#pathname\">pathname</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#acpi_object_list\">acpi_object_list</a> *<a class=\"id\" href=\"#external_params\">external_params</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#acpi_buffer\">acpi_buffer</a> *<a class=\"id\" href=\"#return_buffer\">return_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#acpi_object_type\">acpi_object_type</a> <a class=\"id\" href=\"#return_type\">return_type</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#must_free\">must_free</a> = <a class=\"id\" href=\"#FALSE\">FALSE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#acpi_evaluate_object_typed\">acpi_evaluate_object_typed</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Return buffer must be valid */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#return_buffer\">return_buffer</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#return_buffer\">return_buffer</a>-><a class=\"id\" href=\"#length\">length</a> == <a class=\"id\" href=\"#ACPI_ALLOCATE_BUFFER\">ACPI_ALLOCATE_BUFFER</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#must_free\">must_free</a> = <a class=\"id\" href=\"#TRUE\">TRUE</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Evaluate the object */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_evaluate_object\">acpi_evaluate_object</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#pathname\">pathname</a>, <a class=\"id\" href=\"#external_params\">external_params</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#return_buffer\">return_buffer</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Type ANY means \"don't care\" */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#return_type\">return_type</a> == <a class=\"id\" href=\"#ACPI_TYPE_ANY\">ACPI_TYPE_ANY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#return_buffer\">return_buffer</a>-><a class=\"id\" href=\"#length\">length</a> == 0) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Error because caller specifically asked for a return value */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>, \"No return value\"));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_NULL_OBJECT\">AE_NULL_OBJECT</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Examine the object type returned from evaluate_object */</span>", 
"", 
"<span class=\"ts\"/>if (((union <a class=\"id\" href=\"#acpi_object\">acpi_object</a> *)<a class=\"id\" href=\"#return_buffer\">return_buffer</a>-><a class=\"id\" href=\"#pointer\">pointer</a>)-><a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#return_type\">return_type</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Return object type does not match requested type */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_ERROR\">ACPI_ERROR</a>((<a class=\"id\" href=\"#AE_INFO\">AE_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    \"Incorrect return type [%s] requested [%s]\",", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ut_get_type_name\">acpi_ut_get_type_name</a>(((union <a class=\"id\" href=\"#acpi_object\">acpi_object</a> *)<a class=\"id\" href=\"#return_buffer\">return_buffer</a>->", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#pointer\">pointer</a>)-><a class=\"id\" href=\"#type\">type</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ut_get_type_name\">acpi_ut_get_type_name</a>(<a class=\"id\" href=\"#return_type\">return_type</a>)));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#must_free\">must_free</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Caller used ACPI_ALLOCATE_BUFFER, free the return buffer */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FREE\">ACPI_FREE</a>(<a class=\"id\" href=\"#return_buffer\">return_buffer</a>-><a class=\"id\" href=\"#pointer\">pointer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_buffer\">return_buffer</a>-><a class=\"id\" href=\"#pointer\">pointer</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_buffer\">return_buffer</a>-><a class=\"id\" href=\"#length\">length</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_TYPE\">AE_TYPE</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#ACPI_EXPORT_SYMBOL\">ACPI_EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_evaluate_object_typed\">acpi_evaluate_object_typed</a>)", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_evaluate_object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Handle              - Object handle (optional)</span>", 
"<span class=\"comment\"> *              Pathname            - Object pathname (optional)</span>", 
"<span class=\"comment\"> *              external_params     - List of parameters to pass to method,</span>", 
"<span class=\"comment\"> *                                    terminated by NULL.  May be NULL</span>", 
"<span class=\"comment\"> *                                    if no parameters are being passed.</span>", 
"<span class=\"comment\"> *              return_buffer       - Where to put method's return value (if</span>", 
"<span class=\"comment\"> *                                    any).  If NULL, no value is returned.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Find and evaluate the given object, passing the given</span>", 
"<span class=\"comment\"> *              parameters if necessary.  One of \"Handle\" or \"Pathname\" must</span>", 
"<span class=\"comment\"> *              be valid (non-null)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_evaluate_object\">acpi_evaluate_object</a>(<a class=\"id\" href=\"#acpi_handle\">acpi_handle</a> <a class=\"id\" href=\"#handle\">handle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#acpi_string\">acpi_string</a> <a class=\"id\" href=\"#pathname\">pathname</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#acpi_object_list\">acpi_object_list</a> *<a class=\"id\" href=\"#external_params\">external_params</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#acpi_buffer\">acpi_buffer</a> *<a class=\"id\" href=\"#return_buffer\">return_buffer</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_evaluate_info\">acpi_evaluate_info</a> *<a class=\"id\" href=\"#info\">info</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_size\">acpi_size</a> <a class=\"id\" href=\"#buffer_space_needed\">buffer_space_needed</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_TRACE\">ACPI_FUNCTION_TRACE</a>(<a class=\"id\" href=\"#acpi_evaluate_object\">acpi_evaluate_object</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Allocate and initialize the evaluation information block */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a> = <a class=\"id\" href=\"#ACPI_ALLOCATE_ZEROED\">ACPI_ALLOCATE_ZEROED</a>(sizeof(struct <a class=\"id\" href=\"#acpi_evaluate_info\">acpi_evaluate_info</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#info\">info</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#AE_NO_MEMORY\">AE_NO_MEMORY</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#pathname\">pathname</a> = <a class=\"id\" href=\"#pathname\">pathname</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Convert and validate the device handle */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#prefix_node\">prefix_node</a> = <a class=\"id\" href=\"#acpi_ns_validate_handle\">acpi_ns_validate_handle</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#prefix_node\">prefix_node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup\">cleanup</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If there are parameters to be passed to a control method, the external</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * objects must all be converted to internal objects</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#external_params\">external_params</a> && <a class=\"id\" href=\"#external_params\">external_params</a>-><a class=\"id\" href=\"#count\">count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Allocate a new parameter block for the internal objects</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Add 1 to count to allow for null terminated internal list</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#parameters\">parameters</a> = <a class=\"id\" href=\"#ACPI_ALLOCATE_ZEROED\">ACPI_ALLOCATE_ZEROED</a>(((<a class=\"id\" href=\"#acpi_size\">acpi_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#external_params\">external_params</a>->", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#count\">count</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> 1) * sizeof(void *));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#parameters\">parameters</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_NO_MEMORY\">AE_NO_MEMORY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup\">cleanup</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Convert each external object in the list to an internal object */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#external_params\">external_params</a>-><a class=\"id\" href=\"#count\">count</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ut_copy_eobject_to_iobject\">acpi_ut_copy_eobject_to_iobject</a>(&amp;<a class=\"id\" href=\"#external_params\">external_params</a>->", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#pointer\">pointer</a>[<a class=\"id\" href=\"#i\">i</a>],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    &amp;<a class=\"id\" href=\"#info\">info</a>->", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#parameters\">parameters</a>[<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup\">cleanup</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#parameters\">parameters</a>[<a class=\"id\" href=\"#external_params\">external_params</a>-><a class=\"id\" href=\"#count\">count</a>] = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Three major cases:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 1) Fully qualified pathname</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 2) No handle, not fully qualified pathname (error)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 3) Valid handle</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#pathname\">pathname</a>) && (<a class=\"id\" href=\"#acpi_ns_valid_root_prefix\">acpi_ns_valid_root_prefix</a>(<a class=\"id\" href=\"#pathname\">pathname</a>[0]))) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* The path is fully qualified, just evaluate by name */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#prefix_node\">prefix_node</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ns_evaluate\">acpi_ns_evaluate</a>(<a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/>} else if (!<a class=\"id\" href=\"#handle\">handle</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * A handle is optional iff a fully qualified pathname is specified.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Since we've already handled fully qualified names above, this is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * an error</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pathname\">pathname</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_INFO\">ACPI_DB_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"Both Handle and Pathname are NULL\"));", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_INFO\">ACPI_DB_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"Null Handle with relative pathname [%s]\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#pathname\">pathname</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We have a namespace a node and a possible relative path */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ns_evaluate\">acpi_ns_evaluate</a>(<a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we are expecting a return value, and all went well above,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * copy the return value to an external object.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#return_buffer\">return_buffer</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#return_object\">return_object</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_buffer\">return_buffer</a>-><a class=\"id\" href=\"#length\">length</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_GET_DESCRIPTOR_TYPE\">ACPI_GET_DESCRIPTOR_TYPE</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#return_object\">return_object</a>) ==", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_DESC_TYPE_NAMED\">ACPI_DESC_TYPE_NAMED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If we received a NS Node as a return object, this means that</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the object we are evaluating has nothing interesting to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * return (such as a mutex, etc.)  We return an error because</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * these types are essentially unsupported by this interface.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We don't check up front because this makes it easier to add</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * support for various types at a later date if necessary.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_TYPE\">AE_TYPE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#return_object\">return_object</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;<span class=\"ts\"/><span class=\"comment\">/* No need to delete a NS Node */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#return_buffer\">return_buffer</a>-><a class=\"id\" href=\"#length\">length</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Dereference Index and ref_of references */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ns_resolve_references\">acpi_ns_resolve_references</a>(<a class=\"id\" href=\"#info\">info</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Get the size of the returned object */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ut_get_object_size\">acpi_ut_get_object_size</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#return_object\">return_object</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    &amp;<a class=\"id\" href=\"#buffer_space_needed\">buffer_space_needed</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Validate/Allocate/Clear caller buffer */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ut_initialize_buffer\">acpi_ut_initialize_buffer</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#return_buffer\">return_buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#buffer_space_needed\">buffer_space_needed</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Caller's buffer is too small or a new one can't</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * be allocated</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_INFO\">ACPI_DB_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"Needed buffer size %X, %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  (<a class=\"id\" href=\"#u32\">u32</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#buffer_space_needed\">buffer_space_needed</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#acpi_format_exception\">acpi_format_exception</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  (<a class=\"id\" href=\"#status\">status</a>)));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We have enough space for the object, build it */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ut_copy_iobject_to_eobject\">acpi_ut_copy_iobject_to_eobject</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#return_object\">return_object</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#return_buffer\">return_buffer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#return_object\">return_object</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Delete the internal return object. NOTE: Interpreter must be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * locked to avoid race condition.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ex_enter_interpreter\">acpi_ex_enter_interpreter</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Remove one reference on the return object (should delete it) */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ut_remove_reference\">acpi_ut_remove_reference</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#return_object\">return_object</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ex_exit_interpreter\">acpi_ex_exit_interpreter</a>();", 
"<span class=\"ts\"/>}", 
"", 
"      <a class=\"id\" href=\"#cleanup\">cleanup</a>:", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Free the input parameter list (if we created one) */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#parameters\">parameters</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Free the allocated parameter block */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ut_delete_internal_object_list\">acpi_ut_delete_internal_object_list</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#parameters\">parameters</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FREE\">ACPI_FREE</a>(<a class=\"id\" href=\"#info\">info</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#return_ACPI_STATUS\">return_ACPI_STATUS</a>(<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#ACPI_EXPORT_SYMBOL\">ACPI_EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_evaluate_object\">acpi_evaluate_object</a>)", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ns_resolve_references</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Info                    - Evaluation info block</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Info-&gt;return_object is replaced with the dereferenced object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Dereference certain reference objects. Called before an</span>", 
"<span class=\"comment\"> *              internal return object is converted to an external union acpi_object.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Performs an automatic dereference of Index and ref_of reference objects.</span>", 
"<span class=\"comment\"> * These reference objects are not supported by the union acpi_object, so this is a</span>", 
"<span class=\"comment\"> * last resort effort to return something useful. Also, provides compatibility</span>", 
"<span class=\"comment\"> * with other ACPI implementations.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NOTE: does not handle references within returned package objects or nested</span>", 
"<span class=\"comment\"> * references, but this support could be added later if found to be necessary.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"static void <a class=\"id\" href=\"#acpi_ns_resolve_references\">acpi_ns_resolve_references</a>(struct <a class=\"id\" href=\"#acpi_evaluate_info\">acpi_evaluate_info</a> *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#obj_desc\">obj_desc</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We are interested in reference objects only */</span>", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#return_object\">return_object</a>)-><a class=\"id\" href=\"#common\">common</a>.<a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#ACPI_TYPE_LOCAL_REFERENCE\">ACPI_TYPE_LOCAL_REFERENCE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Two types of references are supported - those created by Index and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ref_of operators. A name reference (AML_NAMEPATH_OP) can be converted</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to an union acpi_object, so it is not dereferenced here. A ddb_handle</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (AML_LOAD_OP) cannot be dereferenced, nor can it be converted to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * an union acpi_object.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#return_object\">return_object</a>-><a class=\"id\" href=\"#reference\">reference</a>.<a class=\"id\" href=\"#class\">class</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_REFCLASS_INDEX\">ACPI_REFCLASS_INDEX</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#obj_desc\">obj_desc</a> = *(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#return_object\">return_object</a>-><a class=\"id\" href=\"#reference\">reference</a>.<a class=\"id\" href=\"#where\">where</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_REFCLASS_REFOF\">ACPI_REFCLASS_REFOF</a>:", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#return_object\">return_object</a>-><a class=\"id\" href=\"#reference\">reference</a>.<a class=\"id\" href=\"#object\">object</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#node\">node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#obj_desc\">obj_desc</a> = <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#object\">object</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Replace the existing reference object */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#obj_desc\">obj_desc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ut_add_reference\">acpi_ut_add_reference</a>(<a class=\"id\" href=\"#obj_desc\">obj_desc</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_ut_remove_reference\">acpi_ut_remove_reference</a>(<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#return_object\">return_object</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#return_object\">return_object</a> = <a class=\"id\" href=\"#obj_desc\">obj_desc</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"<span class=\"comment\">/*******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_walk_namespace</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Type                - acpi_object_type to search for</span>", 
"<span class=\"comment\"> *              start_object        - Handle in namespace where search begins</span>", 
"<span class=\"comment\"> *              max_depth           - Depth to which search is to reach</span>", 
"<span class=\"comment\"> *              pre_order_visit     - Called during tree pre-order visit</span>", 
"<span class=\"comment\"> *                                    when an object of \"Type\" is found</span>", 
"<span class=\"comment\"> *              post_order_visit    - Called during tree post-order visit</span>", 
"<span class=\"comment\"> *                                    when an object of \"Type\" is found</span>", 
"<span class=\"comment\"> *              Context             - Passed to user function(s) above</span>", 
"<span class=\"comment\"> *              return_value        - Location where return value of</span>", 
"<span class=\"comment\"> *                                    user_function is put if terminated early</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS      Return value from the user_function if terminated early.</span>", 
"<span class=\"comment\"> *              Otherwise, returns NULL.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Performs a modified depth-first walk of the namespace tree,</span>", 
"<span class=\"comment\"> *              starting (and ending) at the object specified by start_handle.</span>", 
"<span class=\"comment\"> *              The callback function is called whenever an object that matches</span>", 
"<span class=\"comment\"> *              the type parameter is found. If the callback function returns</span>", 
"<span class=\"comment\"> *              a non-zero value, the search is terminated immediately and this</span>", 
"<span class=\"comment\"> *              value is returned to the caller.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *              The point of this procedure is to provide a generic namespace</span>", 
"<span class=\"comment\"> *              walk routine that can be called from multiple places to</span>", 
"<span class=\"comment\"> *              provide multiple services; the callback function(s) can be</span>", 
"<span class=\"comment\"> *              tailored to each task, whether it is a print function,</span>", 
"<span class=\"comment\"> *              a compare function, etc.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_walk_namespace\">acpi_walk_namespace</a>(<a class=\"id\" href=\"#acpi_object_type\">acpi_object_type</a> <a class=\"id\" href=\"#type\">type</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_handle\">acpi_handle</a> <a class=\"id\" href=\"#start_object\">start_object</a>,", 
];
xr_frag_insert('l/24/ae84816e90bcae8002e3e793b47703cbe5bc77.xr', __xr_tmp);
