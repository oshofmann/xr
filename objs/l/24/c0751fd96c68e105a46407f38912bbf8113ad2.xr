var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  libata-eh.c - libata error handling</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Maintained by:  Jeff Garzik &lt;jgarzik@pobox.com&gt;</span>", 
"<span class=\"comment\"> *    <span class=\"ts\"/><span class=\"ts\"/>    Please ALWAYS copy linux-ide@vger.kernel.org</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>    on emails.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright 2006 Tejun Heo &lt;htejun@gmail.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This program is free software; you can redistribute it and/or</span>", 
"<span class=\"comment\"> *  modify it under the terms of the GNU General Public License as</span>", 
"<span class=\"comment\"> *  published by the Free Software Foundation; either version 2, or</span>", 
"<span class=\"comment\"> *  (at your option) any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  This program is distributed in the hope that it will be useful,</span>", 
"<span class=\"comment\"> *  but WITHOUT ANY WARRANTY; without even the implied warranty of</span>", 
"<span class=\"comment\"> *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>", 
"<span class=\"comment\"> *  General Public License for more details.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  You should have received a copy of the GNU General Public License</span>", 
"<span class=\"comment\"> *  along with this program; see the file COPYING.  If not, write to</span>", 
"<span class=\"comment\"> *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139,</span>", 
"<span class=\"comment\"> *  USA.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  libata documentation is available via 'make {ps|pdf}docs',</span>", 
"<span class=\"comment\"> *  as Documentation/DocBook/libata.*</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Hardware documentation available from http://www.t13.org/ and</span>", 
"<span class=\"comment\"> *  http://www.sata-io.org/</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#blkdev\">blkdev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pci\">pci</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi\">scsi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_host\">scsi_host</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_eh\">scsi_eh</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_device\">scsi_device</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#scsi\">scsi</a>/<a class=\"id\" href=\"#scsi_dbg\">scsi_dbg</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"../scsi/scsi_transport_api.h\"", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#libata\">libata</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"libata.h\"", 
"", 
"enum {", 
"<span class=\"ts\"/><span class=\"comment\">/* speed down verdicts */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_EH_SPDN_NCQ_OFF\">ATA_EH_SPDN_NCQ_OFF</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 0),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_EH_SPDN_SPEED_DOWN\">ATA_EH_SPDN_SPEED_DOWN</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 1),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_EH_SPDN_FALLBACK_TO_PIO\">ATA_EH_SPDN_FALLBACK_TO_PIO</a><span class=\"ts\"/>= (1 << 2),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_EH_SPDN_KEEP_ERRORS\">ATA_EH_SPDN_KEEP_ERRORS</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 3),", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* error flags */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_EFLAG_IS_IO\">ATA_EFLAG_IS_IO</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= (1 << 0),", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_EFLAG_DUBIOUS_XFER\">ATA_EFLAG_DUBIOUS_XFER</a><span class=\"ts\"/><span class=\"ts\"/>= (1 << 1),", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* error categories */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_ECAT_NONE\">ATA_ECAT_NONE</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 0,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_ECAT_ATA_BUS\">ATA_ECAT_ATA_BUS</a><span class=\"ts\"/><span class=\"ts\"/>= 1,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_ECAT_TOUT_HSM\">ATA_ECAT_TOUT_HSM</a><span class=\"ts\"/><span class=\"ts\"/>= 2,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_ECAT_UNK_DEV\">ATA_ECAT_UNK_DEV</a><span class=\"ts\"/><span class=\"ts\"/>= 3,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_ECAT_DUBIOUS_NONE\">ATA_ECAT_DUBIOUS_NONE</a><span class=\"ts\"/><span class=\"ts\"/>= 4,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_ECAT_DUBIOUS_ATA_BUS\">ATA_ECAT_DUBIOUS_ATA_BUS</a><span class=\"ts\"/>= 5,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_ECAT_DUBIOUS_TOUT_HSM\">ATA_ECAT_DUBIOUS_TOUT_HSM</a><span class=\"ts\"/>= 6,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_ECAT_DUBIOUS_UNK_DEV\">ATA_ECAT_DUBIOUS_UNK_DEV</a><span class=\"ts\"/>= 7,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_ECAT_NR\">ATA_ECAT_NR</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 8,", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_EH_CMD_DFL_TIMEOUT\">ATA_EH_CMD_DFL_TIMEOUT</a><span class=\"ts\"/><span class=\"ts\"/>=  5000,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* always put at least this amount of time between resets */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_EH_RESET_COOL_DOWN\">ATA_EH_RESET_COOL_DOWN</a><span class=\"ts\"/><span class=\"ts\"/>=  5000,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Waiting in -&gt;prereset can never be reliable.  It's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * sometimes nice to wait there but it can't be depended upon;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * otherwise, we wouldn't be resetting.  Just give it enough</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * time for most drives to spin up.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_EH_PRERESET_TIMEOUT\">ATA_EH_PRERESET_TIMEOUT</a><span class=\"ts\"/><span class=\"ts\"/>= 10000,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_EH_FASTDRAIN_INTERVAL\">ATA_EH_FASTDRAIN_INTERVAL</a><span class=\"ts\"/>=  3000,", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_EH_UA_TRIES\">ATA_EH_UA_TRIES</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>= 5,", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* probe speed down parameters, see ata_eh_schedule_probe() */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_EH_PROBE_TRIAL_INTERVAL\">ATA_EH_PROBE_TRIAL_INTERVAL</a><span class=\"ts\"/>= 60000,<span class=\"ts\"/><span class=\"comment\">/* 1 min */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ATA_EH_PROBE_TRIALS\">ATA_EH_PROBE_TRIALS</a><span class=\"ts\"/><span class=\"ts\"/>= 2,", 
"};", 
"", 
"<span class=\"comment\">/* The following table determines how we sequence resets.  Each entry</span>", 
"<span class=\"comment\"> * represents timeout for that try.  The first try can be soft or</span>", 
"<span class=\"comment\"> * hardreset.  All others are hardreset if available.  In most cases</span>", 
"<span class=\"comment\"> * the first reset w/ 10sec timeout should succeed.  Following entries</span>", 
"<span class=\"comment\"> * are mostly for error handling, hotplug and retarded devices.</span>", 
"<span class=\"comment\"> */</span>", 
"static const unsigned long <a class=\"id\" href=\"#ata_eh_reset_timeouts\">ata_eh_reset_timeouts</a>[] = {", 
"<span class=\"ts\"/>10000,<span class=\"ts\"/><span class=\"comment\">/* most drives spin up by 10sec */</span>", 
"<span class=\"ts\"/>10000,<span class=\"ts\"/><span class=\"comment\">/* &gt; 99% working drives spin up before 20sec */</span>", 
"<span class=\"ts\"/>35000,<span class=\"ts\"/><span class=\"comment\">/* give &gt; 30 secs of idleness for retarded devices */</span>", 
"<span class=\"ts\"/> 5000,<span class=\"ts\"/><span class=\"comment\">/* and sweet one last chance */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ULONG_MAX\">ULONG_MAX</a>, <span class=\"comment\">/* &gt; 1 min has elapsed, give up */</span>", 
"};", 
"", 
"static const unsigned long <a class=\"id\" href=\"#ata_eh_identify_timeouts\">ata_eh_identify_timeouts</a>[] = {", 
"<span class=\"ts\"/> 5000,<span class=\"ts\"/><span class=\"comment\">/* covers &gt; 99% of successes and not too boring on failures */</span>", 
"<span class=\"ts\"/>10000,  <span class=\"comment\">/* combined time till here is enough even for media access */</span>", 
"<span class=\"ts\"/>30000,<span class=\"ts\"/><span class=\"comment\">/* for true idiots */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ULONG_MAX\">ULONG_MAX</a>,", 
"};", 
"", 
"static const unsigned long <a class=\"id\" href=\"#ata_eh_flush_timeouts\">ata_eh_flush_timeouts</a>[] = {", 
"<span class=\"ts\"/>15000,<span class=\"ts\"/><span class=\"comment\">/* be generous with flush */</span>", 
"<span class=\"ts\"/>15000,  <span class=\"comment\">/* ditto */</span>", 
"<span class=\"ts\"/>30000,<span class=\"ts\"/><span class=\"comment\">/* and even more generous */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ULONG_MAX\">ULONG_MAX</a>,", 
"};", 
"", 
"static const unsigned long <a class=\"id\" href=\"#ata_eh_other_timeouts\">ata_eh_other_timeouts</a>[] = {", 
"<span class=\"ts\"/> 5000,<span class=\"ts\"/><span class=\"comment\">/* same rationale as identify timeout */</span>", 
"<span class=\"ts\"/>10000,<span class=\"ts\"/><span class=\"comment\">/* ditto */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* but no merciful 30sec for other commands, it just isn't worth it */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ULONG_MAX\">ULONG_MAX</a>,", 
"};", 
"", 
"struct <a class=\"id\" href=\"#ata_eh_cmd_timeout_ent\">ata_eh_cmd_timeout_ent</a> {", 
"<span class=\"ts\"/>const <a class=\"id\" href=\"#u8\">u8</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#commands\">commands</a>;", 
"<span class=\"ts\"/>const unsigned long<span class=\"ts\"/>*<a class=\"id\" href=\"#timeouts\">timeouts</a>;", 
"};", 
"", 
"<span class=\"comment\">/* The following table determines timeouts to use for EH internal</span>", 
"<span class=\"comment\"> * commands.  Each table entry is a command class and matches the</span>", 
"<span class=\"comment\"> * commands the entry applies to and the timeout table to use.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * On the retry after a command timed out, the next timeout value from</span>", 
"<span class=\"comment\"> * the table is used.  If the table doesn't contain further entries,</span>", 
"<span class=\"comment\"> * the last value is used.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ehc-&gt;cmd_timeout_idx keeps track of which timeout to use per</span>", 
"<span class=\"comment\"> * command class, so if SET_FEATURES times out on the first try, the</span>", 
"<span class=\"comment\"> * next try will use the second timeout value only for that class.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CMDS\">CMDS</a>(<a class=\"id\" href=\"#cmds\">cmds</a>...)<span class=\"ts\"/>(const <a class=\"id\" href=\"#u8\">u8</a> []){ <a class=\"id\" href=\"#cmds\">cmds</a>, 0 }", 
"static const struct <a class=\"id\" href=\"#ata_eh_cmd_timeout_ent\">ata_eh_cmd_timeout_ent</a>", 
"<a class=\"id\" href=\"#ata_eh_cmd_timeout_table\">ata_eh_cmd_timeout_table</a>[<a class=\"id\" href=\"#ATA_EH_CMD_TIMEOUT_TABLE_SIZE\">ATA_EH_CMD_TIMEOUT_TABLE_SIZE</a>] = {", 
"<span class=\"ts\"/>{ .<a class=\"id\" href=\"#commands\">commands</a> = <a class=\"id\" href=\"#CMDS\">CMDS</a>(<a class=\"id\" href=\"#ATA_CMD_ID_ATA\">ATA_CMD_ID_ATA</a>, <a class=\"id\" href=\"#ATA_CMD_ID_ATAPI\">ATA_CMD_ID_ATAPI</a>),", 
"<span class=\"ts\"/>  .<a class=\"id\" href=\"#timeouts\">timeouts</a> = <a class=\"id\" href=\"#ata_eh_identify_timeouts\">ata_eh_identify_timeouts</a>, },", 
"<span class=\"ts\"/>{ .<a class=\"id\" href=\"#commands\">commands</a> = <a class=\"id\" href=\"#CMDS\">CMDS</a>(<a class=\"id\" href=\"#ATA_CMD_READ_NATIVE_MAX\">ATA_CMD_READ_NATIVE_MAX</a>, <a class=\"id\" href=\"#ATA_CMD_READ_NATIVE_MAX_EXT\">ATA_CMD_READ_NATIVE_MAX_EXT</a>),", 
"<span class=\"ts\"/>  .<a class=\"id\" href=\"#timeouts\">timeouts</a> = <a class=\"id\" href=\"#ata_eh_other_timeouts\">ata_eh_other_timeouts</a>, },", 
"<span class=\"ts\"/>{ .<a class=\"id\" href=\"#commands\">commands</a> = <a class=\"id\" href=\"#CMDS\">CMDS</a>(<a class=\"id\" href=\"#ATA_CMD_SET_MAX\">ATA_CMD_SET_MAX</a>, <a class=\"id\" href=\"#ATA_CMD_SET_MAX_EXT\">ATA_CMD_SET_MAX_EXT</a>),", 
"<span class=\"ts\"/>  .<a class=\"id\" href=\"#timeouts\">timeouts</a> = <a class=\"id\" href=\"#ata_eh_other_timeouts\">ata_eh_other_timeouts</a>, },", 
"<span class=\"ts\"/>{ .<a class=\"id\" href=\"#commands\">commands</a> = <a class=\"id\" href=\"#CMDS\">CMDS</a>(<a class=\"id\" href=\"#ATA_CMD_SET_FEATURES\">ATA_CMD_SET_FEATURES</a>),", 
"<span class=\"ts\"/>  .<a class=\"id\" href=\"#timeouts\">timeouts</a> = <a class=\"id\" href=\"#ata_eh_other_timeouts\">ata_eh_other_timeouts</a>, },", 
"<span class=\"ts\"/>{ .<a class=\"id\" href=\"#commands\">commands</a> = <a class=\"id\" href=\"#CMDS\">CMDS</a>(<a class=\"id\" href=\"#ATA_CMD_INIT_DEV_PARAMS\">ATA_CMD_INIT_DEV_PARAMS</a>),", 
"<span class=\"ts\"/>  .<a class=\"id\" href=\"#timeouts\">timeouts</a> = <a class=\"id\" href=\"#ata_eh_other_timeouts\">ata_eh_other_timeouts</a>, },", 
"<span class=\"ts\"/>{ .<a class=\"id\" href=\"#commands\">commands</a> = <a class=\"id\" href=\"#CMDS\">CMDS</a>(<a class=\"id\" href=\"#ATA_CMD_FLUSH\">ATA_CMD_FLUSH</a>, <a class=\"id\" href=\"#ATA_CMD_FLUSH_EXT\">ATA_CMD_FLUSH_EXT</a>),", 
"<span class=\"ts\"/>  .<a class=\"id\" href=\"#timeouts\">timeouts</a> = <a class=\"id\" href=\"#ata_eh_flush_timeouts\">ata_eh_flush_timeouts</a> },", 
"};", 
"#<a class=\"id\" href=\"#undef\">undef</a> <a class=\"id\" href=\"#CMDS\">CMDS</a>", 
"", 
"static void <a class=\"id\" href=\"#__ata_port_freeze\">__ata_port_freeze</a>(struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PM\">CONFIG_PM</a>", 
"static void <a class=\"id\" href=\"#ata_eh_handle_port_suspend\">ata_eh_handle_port_suspend</a>(struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>);", 
"static void <a class=\"id\" href=\"#ata_eh_handle_port_resume\">ata_eh_handle_port_resume</a>(struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>);", 
"#else <span class=\"comment\">/* CONFIG_PM */</span>", 
"static void <a class=\"id\" href=\"#ata_eh_handle_port_suspend\">ata_eh_handle_port_suspend</a>(struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>)", 
"{ }", 
"", 
"static void <a class=\"id\" href=\"#ata_eh_handle_port_resume\">ata_eh_handle_port_resume</a>(struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>)", 
"{ }", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PM */</span>", 
"", 
"static void <a class=\"id\" href=\"#__ata_ehi_pushv_desc\">__ata_ehi_pushv_desc</a>(struct <a class=\"id\" href=\"#ata_eh_info\">ata_eh_info</a> *<a class=\"id\" href=\"#ehi\">ehi</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ehi\">ehi</a>-><a class=\"id\" href=\"#desc_len\">desc_len</a> += <a class=\"id\" href=\"#vscnprintf\">vscnprintf</a>(<a class=\"id\" href=\"#ehi\">ehi</a>-><a class=\"id\" href=\"#desc\">desc</a> + <a class=\"id\" href=\"#ehi\">ehi</a>-><a class=\"id\" href=\"#desc_len\">desc_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#ATA_EH_DESC_LEN\">ATA_EH_DESC_LEN</a> - <a class=\"id\" href=\"#ehi\">ehi</a>-><a class=\"id\" href=\"#desc_len\">desc_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>__ata_ehi_push_desc - push error description without adding separator</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ehi: target EHI</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@fmt: printf format string</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Format string according to @fmt and append it to @ehi-&gt;desc.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>spin_lock_irqsave(host lock)</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__ata_ehi_push_desc\">__ata_ehi_push_desc</a>(struct <a class=\"id\" href=\"#ata_eh_info\">ata_eh_info</a> *<a class=\"id\" href=\"#ehi\">ehi</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>, ...)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_start\">va_start</a>(<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#fmt\">fmt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ata_ehi_pushv_desc\">__ata_ehi_pushv_desc</a>(<a class=\"id\" href=\"#ehi\">ehi</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a>(<a class=\"id\" href=\"#args\">args</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_ehi_push_desc - push error description with separator</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ehi: target EHI</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@fmt: printf format string</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Format string according to @fmt and append it to @ehi-&gt;desc.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If @ehi-&gt;desc is not empty, \", \" is added in-between.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>spin_lock_irqsave(host lock)</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ata_ehi_push_desc\">ata_ehi_push_desc</a>(struct <a class=\"id\" href=\"#ata_eh_info\">ata_eh_info</a> *<a class=\"id\" href=\"#ehi\">ehi</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>, ...)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ehi\">ehi</a>-><a class=\"id\" href=\"#desc_len\">desc_len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__ata_ehi_push_desc\">__ata_ehi_push_desc</a>(<a class=\"id\" href=\"#ehi\">ehi</a>, \", \");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_start\">va_start</a>(<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#fmt\">fmt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ata_ehi_pushv_desc\">__ata_ehi_pushv_desc</a>(<a class=\"id\" href=\"#ehi\">ehi</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a>(<a class=\"id\" href=\"#args\">args</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_ehi_clear_desc - clean error description</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ehi: target EHI</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Clear @ehi-&gt;desc.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>spin_lock_irqsave(host lock)</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ata_ehi_clear_desc\">ata_ehi_clear_desc</a>(struct <a class=\"id\" href=\"#ata_eh_info\">ata_eh_info</a> *<a class=\"id\" href=\"#ehi\">ehi</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ehi\">ehi</a>-><a class=\"id\" href=\"#desc\">desc</a>[0] = '\\0';", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ehi\">ehi</a>-><a class=\"id\" href=\"#desc_len\">desc_len</a> = 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_port_desc - append port description</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ap: target ATA port</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@fmt: printf format string</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Format string according to @fmt and append it to port</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>description.  If port description is not empty, \" \" is added</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>in-between.  This function is to be used while initializing</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_host.  The description is printed on host registration.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>None.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ata_port_desc\">ata_port_desc</a>(struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>, ...)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#pflags\">pflags</a> &amp; <a class=\"id\" href=\"#ATA_PFLAG_INITIALIZING\">ATA_PFLAG_INITIALIZING</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#link\">link</a>.<a class=\"id\" href=\"#eh_info\">eh_info</a>.<a class=\"id\" href=\"#desc_len\">desc_len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__ata_ehi_push_desc\">__ata_ehi_push_desc</a>(&amp;<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#link\">link</a>.<a class=\"id\" href=\"#eh_info\">eh_info</a>, \" \");", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_start\">va_start</a>(<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#fmt\">fmt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ata_ehi_pushv_desc\">__ata_ehi_pushv_desc</a>(&amp;<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#link\">link</a>.<a class=\"id\" href=\"#eh_info\">eh_info</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a>(<a class=\"id\" href=\"#args\">args</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PCI\">CONFIG_PCI</a>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_port_pbar_desc - append PCI BAR description</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ap: target ATA port</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@bar: target PCI BAR</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@offset: offset into PCI BAR</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@name: name of the area</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If @offset is negative, this function formats a string which</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>contains the name, address, size and type of the BAR and</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>appends it to the port description.  If @offset is zero or</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>positive, only name and offsetted address is appended.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>None.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ata_port_pbar_desc\">ata_port_pbar_desc</a>(struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>, int <a class=\"id\" href=\"#bar\">bar</a>, <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#offset\">offset</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pci_dev\">pci_dev</a> *<a class=\"id\" href=\"#pdev\">pdev</a> = <a class=\"id\" href=\"#to_pci_dev\">to_pci_dev</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#type\">type</a> = \"\";", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#len\">len</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pci_resource_flags\">pci_resource_flags</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#bar\">bar</a>) &amp; <a class=\"id\" href=\"#IORESOURCE_MEM\">IORESOURCE_MEM</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = \"m\";", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#pci_resource_flags\">pci_resource_flags</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#bar\">bar</a>) &amp; <a class=\"id\" href=\"#IORESOURCE_IO\">IORESOURCE_IO</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = \"i\";", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> = (unsigned long long)<a class=\"id\" href=\"#pci_resource_start\">pci_resource_start</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#bar\">bar</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = (unsigned long long)<a class=\"id\" href=\"#pci_resource_len\">pci_resource_len</a>(<a class=\"id\" href=\"#pdev\">pdev</a>, <a class=\"id\" href=\"#bar\">bar</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_port_desc\">ata_port_desc</a>(<a class=\"id\" href=\"#ap\">ap</a>, \"%s %s%llu@0x%llx\", <a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_port_desc\">ata_port_desc</a>(<a class=\"id\" href=\"#ap\">ap</a>, \"%s 0x%llx\", <a class=\"id\" href=\"#name\">name</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a> + (unsigned long long)<a class=\"id\" href=\"#offset\">offset</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PCI */</span>", 
"", 
"static int <a class=\"id\" href=\"#ata_lookup_timeout_table\">ata_lookup_timeout_table</a>(<a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#cmd\">cmd</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ATA_EH_CMD_TIMEOUT_TABLE_SIZE\">ATA_EH_CMD_TIMEOUT_TABLE_SIZE</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>const <a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#cur\">cur</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#cur\">cur</a> = <a class=\"id\" href=\"#ata_eh_cmd_timeout_table\">ata_eh_cmd_timeout_table</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#commands\">commands</a>; *<a class=\"id\" href=\"#cur\">cur</a>; <a class=\"id\" href=\"#cur\">cur</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#cur\">cur</a> == <a class=\"id\" href=\"#cmd\">cmd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return -1;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_internal_cmd_timeout - determine timeout for an internal command</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: target device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@cmd: internal command to be issued</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Determine timeout for internal command @cmd for @dev.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>EH context.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Determined timeout.</span>", 
"<span class=\"comment\"> */</span>", 
"unsigned long <a class=\"id\" href=\"#ata_internal_cmd_timeout\">ata_internal_cmd_timeout</a>(struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#cmd\">cmd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_eh_context\">ata_eh_context</a> *<a class=\"id\" href=\"#ehc\">ehc</a> = &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#eh_context\">eh_context</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ent\">ent</a> = <a class=\"id\" href=\"#ata_lookup_timeout_table\">ata_lookup_timeout_table</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#idx\">idx</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ent\">ent</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ATA_EH_CMD_DFL_TIMEOUT\">ATA_EH_CMD_DFL_TIMEOUT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#ehc\">ehc</a>-><a class=\"id\" href=\"#cmd_timeout_idx\">cmd_timeout_idx</a>[<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devno\">devno</a>][<a class=\"id\" href=\"#ent\">ent</a>];", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ata_eh_cmd_timeout_table\">ata_eh_cmd_timeout_table</a>[<a class=\"id\" href=\"#ent\">ent</a>].<a class=\"id\" href=\"#timeouts\">timeouts</a>[<a class=\"id\" href=\"#idx\">idx</a>];", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_internal_cmd_timed_out - notification for internal command timeout</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: target device</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@cmd: internal command which timed out</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Notify EH that internal command @cmd for @dev timed out.  This</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>function should be called only for commands whose timeouts are</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>determined using ata_internal_cmd_timeout().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>EH context.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ata_internal_cmd_timed_out\">ata_internal_cmd_timed_out</a>(struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#cmd\">cmd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_eh_context\">ata_eh_context</a> *<a class=\"id\" href=\"#ehc\">ehc</a> = &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#eh_context\">eh_context</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ent\">ent</a> = <a class=\"id\" href=\"#ata_lookup_timeout_table\">ata_lookup_timeout_table</a>(<a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#idx\">idx</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ent\">ent</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#ehc\">ehc</a>-><a class=\"id\" href=\"#cmd_timeout_idx\">cmd_timeout_idx</a>[<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devno\">devno</a>][<a class=\"id\" href=\"#ent\">ent</a>];", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_eh_cmd_timeout_table\">ata_eh_cmd_timeout_table</a>[<a class=\"id\" href=\"#ent\">ent</a>].<a class=\"id\" href=\"#timeouts\">timeouts</a>[<a class=\"id\" href=\"#idx\">idx</a> + 1] != <a class=\"id\" href=\"#ULONG_MAX\">ULONG_MAX</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ehc\">ehc</a>-><a class=\"id\" href=\"#cmd_timeout_idx\">cmd_timeout_idx</a>[<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devno\">devno</a>][<a class=\"id\" href=\"#ent\">ent</a>]++;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ata_ering_record\">ata_ering_record</a>(struct <a class=\"id\" href=\"#ata_ering\">ata_ering</a> *<a class=\"id\" href=\"#ering\">ering</a>, unsigned int <a class=\"id\" href=\"#eflags\">eflags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned int <a class=\"id\" href=\"#err_mask\">err_mask</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_ering_entry\">ata_ering_entry</a> *<a class=\"id\" href=\"#ent\">ent</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#err_mask\">err_mask</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ering\">ering</a>-><a class=\"id\" href=\"#cursor\">cursor</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ering\">ering</a>-><a class=\"id\" href=\"#cursor\">cursor</a> %= <a class=\"id\" href=\"#ATA_ERING_SIZE\">ATA_ERING_SIZE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ent\">ent</a> = &amp;<a class=\"id\" href=\"#ering\">ering</a>-><a class=\"id\" href=\"#ring\">ring</a>[<a class=\"id\" href=\"#ering\">ering</a>-><a class=\"id\" href=\"#cursor\">cursor</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#eflags\">eflags</a> = <a class=\"id\" href=\"#eflags\">eflags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#err_mask\">err_mask</a> = <a class=\"id\" href=\"#err_mask\">err_mask</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#timestamp\">timestamp</a> = <a class=\"id\" href=\"#get_jiffies_64\">get_jiffies_64</a>();", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#ata_ering_entry\">ata_ering_entry</a> *<a class=\"id\" href=\"#ata_ering_top\">ata_ering_top</a>(struct <a class=\"id\" href=\"#ata_ering\">ata_ering</a> *<a class=\"id\" href=\"#ering\">ering</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_ering_entry\">ata_ering_entry</a> *<a class=\"id\" href=\"#ent\">ent</a> = &amp;<a class=\"id\" href=\"#ering\">ering</a>-><a class=\"id\" href=\"#ring\">ring</a>[<a class=\"id\" href=\"#ering\">ering</a>-><a class=\"id\" href=\"#cursor\">cursor</a>];", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#err_mask\">err_mask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ent\">ent</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ata_ering_clear\">ata_ering_clear</a>(struct <a class=\"id\" href=\"#ata_ering\">ata_ering</a> *<a class=\"id\" href=\"#ering\">ering</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#ering\">ering</a>, 0, sizeof(*<a class=\"id\" href=\"#ering\">ering</a>));", 
"}", 
"", 
"static int <a class=\"id\" href=\"#ata_ering_map\">ata_ering_map</a>(struct <a class=\"id\" href=\"#ata_ering\">ata_ering</a> *<a class=\"id\" href=\"#ering\">ering</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int (*<a class=\"id\" href=\"#map_fn\">map_fn</a>)(struct <a class=\"id\" href=\"#ata_ering_entry\">ata_ering_entry</a> *, void *),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> void *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#rc\">rc</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_ering_entry\">ata_ering_entry</a> *<a class=\"id\" href=\"#ent\">ent</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#ering\">ering</a>-><a class=\"id\" href=\"#cursor\">cursor</a>;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ent\">ent</a> = &amp;<a class=\"id\" href=\"#ering\">ering</a>-><a class=\"id\" href=\"#ring\">ring</a>[<a class=\"id\" href=\"#idx\">idx</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#err_mask\">err_mask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rc\">rc</a> = <a class=\"id\" href=\"#map_fn\">map_fn</a>(<a class=\"id\" href=\"#ent\">ent</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#rc\">rc</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a> = (<a class=\"id\" href=\"#idx\">idx</a> - 1 + <a class=\"id\" href=\"#ATA_ERING_SIZE\">ATA_ERING_SIZE</a>) % <a class=\"id\" href=\"#ATA_ERING_SIZE\">ATA_ERING_SIZE</a>;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#idx\">idx</a> != <a class=\"id\" href=\"#ering\">ering</a>-><a class=\"id\" href=\"#cursor\">cursor</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#rc\">rc</a>;", 
"}", 
"", 
"static unsigned int <a class=\"id\" href=\"#ata_eh_dev_action\">ata_eh_dev_action</a>(struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_eh_context\">ata_eh_context</a> *<a class=\"id\" href=\"#ehc\">ehc</a> = &amp;<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#eh_context\">eh_context</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ehc\">ehc</a>-><a class=\"id\" href=\"#i\">i</a>.<a class=\"id\" href=\"#action\">action</a> | <a class=\"id\" href=\"#ehc\">ehc</a>-><a class=\"id\" href=\"#i\">i</a>.<a class=\"id\" href=\"#dev_action\">dev_action</a>[<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devno\">devno</a>];", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ata_eh_clear_action\">ata_eh_clear_action</a>(struct <a class=\"id\" href=\"#ata_link\">ata_link</a> *<a class=\"id\" href=\"#link\">link</a>, struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_eh_info\">ata_eh_info</a> *<a class=\"id\" href=\"#ehi\">ehi</a>, unsigned int <a class=\"id\" href=\"#action\">action</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#tdev\">tdev</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#dev\">dev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ehi\">ehi</a>-><a class=\"id\" href=\"#action\">action</a> &= ~<a class=\"id\" href=\"#action\">action</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_for_each_dev\">ata_for_each_dev</a>(<a class=\"id\" href=\"#tdev\">tdev</a>, <a class=\"id\" href=\"#link\">link</a>, <a class=\"id\" href=\"#ALL\">ALL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ehi\">ehi</a>-><a class=\"id\" href=\"#dev_action\">dev_action</a>[<a class=\"id\" href=\"#tdev\">tdev</a>-><a class=\"id\" href=\"#devno\">devno</a>] &= ~<a class=\"id\" href=\"#action\">action</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* doesn't make sense for port-wide EH actions */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!(<a class=\"id\" href=\"#action\">action</a> &amp; <a class=\"id\" href=\"#ATA_EH_PERDEV_MASK\">ATA_EH_PERDEV_MASK</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* break ehi-&gt;action into ehi-&gt;dev_action */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ehi\">ehi</a>-><a class=\"id\" href=\"#action\">action</a> &amp; <a class=\"id\" href=\"#action\">action</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_for_each_dev\">ata_for_each_dev</a>(<a class=\"id\" href=\"#tdev\">tdev</a>, <a class=\"id\" href=\"#link\">link</a>, <a class=\"id\" href=\"#ALL\">ALL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ehi\">ehi</a>-><a class=\"id\" href=\"#dev_action\">dev_action</a>[<a class=\"id\" href=\"#tdev\">tdev</a>-><a class=\"id\" href=\"#devno\">devno</a>] |=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ehi\">ehi</a>-><a class=\"id\" href=\"#action\">action</a> &amp; <a class=\"id\" href=\"#action\">action</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ehi\">ehi</a>-><a class=\"id\" href=\"#action\">action</a> &= ~<a class=\"id\" href=\"#action\">action</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* turn off the specified per-dev action */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ehi\">ehi</a>-><a class=\"id\" href=\"#dev_action\">dev_action</a>[<a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devno\">devno</a>] &= ~<a class=\"id\" href=\"#action\">action</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_scsi_timed_out - SCSI layer time out callback</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@cmd: timed out SCSI command</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Handles SCSI layer timeout.  We race with normal completion of</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the qc for @cmd.  If the qc is already gone, we lose and let</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the scsi command finish (EH_HANDLED).  Otherwise, the qc has</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>timed out and EH should be invoked.  Prevent ata_qc_complete()</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>from finishing it by setting EH_SCHEDULED and return</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>EH_NOT_HANDLED.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>TODO: kill this function once old EH is gone.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Called from timer context</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>EH_HANDLED or EH_NOT_HANDLED</span>", 
"<span class=\"comment\"> */</span>", 
"enum <a class=\"id\" href=\"#blk_eh_timer_return\">blk_eh_timer_return</a> <a class=\"id\" href=\"#ata_scsi_timed_out\">ata_scsi_timed_out</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#cmd\">cmd</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#host\">host</a> = <a class=\"id\" href=\"#cmd\">cmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#host\">host</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#ata_shost_to_port\">ata_shost_to_port</a>(<a class=\"id\" href=\"#host\">host</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#blk_eh_timer_return\">blk_eh_timer_return</a> <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(\"ENTER\\n\");", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#error_handler\">error_handler</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#BLK_EH_NOT_HANDLED\">BLK_EH_NOT_HANDLED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#BLK_EH_HANDLED\">BLK_EH_HANDLED</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a> = <a class=\"id\" href=\"#ata_qc_from_tag\">ata_qc_from_tag</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#link\">link</a>.<a class=\"id\" href=\"#active_tag\">active_tag</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#qc\">qc</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#scsicmd\">scsicmd</a> != <a class=\"id\" href=\"#cmd\">cmd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_QCFLAG_EH_SCHEDULED\">ATA_QCFLAG_EH_SCHEDULED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#err_mask\">err_mask</a> |= <a class=\"id\" href=\"#AC_ERR_TIMEOUT\">AC_ERR_TIMEOUT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#BLK_EH_NOT_HANDLED\">BLK_EH_NOT_HANDLED</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(\"EXIT, ret=%d\\n\", <a class=\"id\" href=\"#ret\">ret</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ata_eh_unload\">ata_eh_unload</a>(struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_link\">ata_link</a> *<a class=\"id\" href=\"#link\">link</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Restore SControl IPM and SPD for the next driver and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * disable attached devices.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_for_each_link\">ata_for_each_link</a>(<a class=\"id\" href=\"#link\">link</a>, <a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#PMP_FIRST\">PMP_FIRST</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sata_scr_write\">sata_scr_write</a>(<a class=\"id\" href=\"#link\">link</a>, <a class=\"id\" href=\"#SCR_CONTROL\">SCR_CONTROL</a>, <a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#saved_scontrol\">saved_scontrol</a> &amp; 0xff0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_for_each_dev\">ata_for_each_dev</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#link\">link</a>, <a class=\"id\" href=\"#ALL\">ALL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_dev_disable\">ata_dev_disable</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* freeze and set UNLOADED */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_port_freeze\">ata_port_freeze</a>(<a class=\"id\" href=\"#ap\">ap</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* won't be thawed */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#pflags\">pflags</a> &= ~<a class=\"id\" href=\"#ATA_PFLAG_EH_PENDING\">ATA_PFLAG_EH_PENDING</a>;<span class=\"ts\"/><span class=\"comment\">/* clear pending from freeze */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#pflags\">pflags</a> |= <a class=\"id\" href=\"#ATA_PFLAG_UNLOADED\">ATA_PFLAG_UNLOADED</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ata_scsi_error - SCSI layer error handler callback</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@host: SCSI host on which error occurred</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Handles SCSI-layer-thrown error events.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>LOCKING:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Inherited from SCSI layer (none, can sleep)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Zero.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ata_scsi_error\">ata_scsi_error</a>(struct <a class=\"id\" href=\"#Scsi_Host\">Scsi_Host</a> *<a class=\"id\" href=\"#host\">host</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_port\">ata_port</a> *<a class=\"id\" href=\"#ap\">ap</a> = <a class=\"id\" href=\"#ata_shost_to_port\">ata_shost_to_port</a>(<a class=\"id\" href=\"#host\">host</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DPRINTK\">DPRINTK</a>(\"ENTER\\n\");", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* make sure sff pio task is not running */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ata_sff_flush_pio_task\">ata_sff_flush_pio_task</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* synchronize with host lock and sort out timeouts */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* For new EH, all qcs are finished in one of three ways -</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * normal completion, error completion, and SCSI timeout.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Both completions can race against SCSI timeout.  When normal</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * completion wins, the qc never reaches EH.  When error</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * completion wins, the qc has ATA_QCFLAG_FAILED set.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * When SCSI timeout wins, things are a bit more complex.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Normal or error completion can occur after the timeout but</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * before this point.  In such cases, both types of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * completions are honored.  A scmd is determined to have</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * timed out iff its associated qc is active and not failed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#error_handler\">error_handler</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#scmd\">scmd</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#nr_timedout\">nr_timedout</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This must occur under the ap-&gt;lock as we don't want</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   a polled recovery to race the real interrupt handler</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   </span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   The lost_interrupt handler checks for any completed but</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   non-notified command and completes much like an IRQ handler.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   </span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   We then fall into the error recovery code which will treat</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/>   this as if normal completion won the race */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#lost_interrupt\">lost_interrupt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#lost_interrupt\">lost_interrupt</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#scmd\">scmd</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#eh_cmd_q\">eh_cmd_q</a>, <a class=\"id\" href=\"#eh_entry\">eh_entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_queued_cmd\">ata_queued_cmd</a> *<a class=\"id\" href=\"#qc\">qc</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ATA_MAX_QUEUE\">ATA_MAX_QUEUE</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a> = <a class=\"id\" href=\"#__ata_qc_from_tag\">__ata_qc_from_tag</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#i\">i</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_QCFLAG_ACTIVE\">ATA_QCFLAG_ACTIVE</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#scsicmd\">scsicmd</a> == <a class=\"id\" href=\"#scmd\">scmd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ATA_MAX_QUEUE\">ATA_MAX_QUEUE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* the scmd has an associated qc */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ATA_QCFLAG_FAILED\">ATA_QCFLAG_FAILED</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* which hasn't failed yet, timeout */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#err_mask\">err_mask</a> |= <a class=\"id\" href=\"#AC_ERR_TIMEOUT\">AC_ERR_TIMEOUT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#qc\">qc</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ATA_QCFLAG_FAILED\">ATA_QCFLAG_FAILED</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_timedout\">nr_timedout</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Normal completion occurred after</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * SCSI timeout but before this point.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Successfully complete it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#retries\">retries</a> = <a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#allowed\">allowed</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_eh_finish_cmd\">scsi_eh_finish_cmd</a>(<a class=\"id\" href=\"#scmd\">scmd</a>, &amp;<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#eh_done_q\">eh_done_q</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If we have timed out qcs.  They belong to EH from</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * this point but the state of the controller is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * unknown.  Freeze the port to make sure the IRQ</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * handler doesn't diddle with those qcs.  This must</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * be done atomically w.r.t. setting QCFLAG_FAILED.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_timedout\">nr_timedout</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__ata_port_freeze\">__ata_port_freeze</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* initialize eh_tries */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#eh_tries\">eh_tries</a> = <a class=\"id\" href=\"#ATA_EH_MAX_TRIES\">ATA_EH_MAX_TRIES</a>;", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_wait\">spin_unlock_wait</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>", 
"<span class=\"ts\"/><span class=\"comment\">/* If we timed raced normal completion and there is nothing to</span>", 
"<span class=\"comment\"><span class=\"ts\"/>   recover nr_timedout == 0 why exactly are we doing error recovery ? */</span>", 
"", 
" <a class=\"id\" href=\"#repeat\">repeat</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* invoke error handler */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#error_handler\">error_handler</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_link\">ata_link</a> *<a class=\"id\" href=\"#link\">link</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* kill fast drain timer */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#del_timer_sync\">del_timer_sync</a>(&amp;<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#fastdrain_timer\">fastdrain_timer</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* process port resume request */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_eh_handle_port_resume\">ata_eh_handle_port_resume</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fetch &amp; clear EH info */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_for_each_link\">ata_for_each_link</a>(<a class=\"id\" href=\"#link\">link</a>, <a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#HOST_FIRST\">HOST_FIRST</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_eh_context\">ata_eh_context</a> *<a class=\"id\" href=\"#ehc\">ehc</a> = &amp;<a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#eh_context\">eh_context</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ata_device\">ata_device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#eh_context\">eh_context</a>, 0, sizeof(<a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#eh_context\">eh_context</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#eh_context\">eh_context</a>.<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#eh_info\">eh_info</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#eh_info\">eh_info</a>, 0, sizeof(<a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#eh_info\">eh_info</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_for_each_dev\">ata_for_each_dev</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#link\">link</a>, <a class=\"id\" href=\"#ENABLED\">ENABLED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#devno\">devno</a> = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#devno\">devno</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ehc\">ehc</a>-><a class=\"id\" href=\"#saved_xfer_mode\">saved_xfer_mode</a>[<a class=\"id\" href=\"#devno\">devno</a>] = <a class=\"id\" href=\"#dev\">dev</a>-><a class=\"id\" href=\"#xfer_mode\">xfer_mode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ata_ncq_enabled\">ata_ncq_enabled</a>(<a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ehc\">ehc</a>-><a class=\"id\" href=\"#saved_ncq_enabled\">saved_ncq_enabled</a> |= 1 << <a class=\"id\" href=\"#devno\">devno</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#pflags\">pflags</a> |= <a class=\"id\" href=\"#ATA_PFLAG_EH_IN_PROGRESS\">ATA_PFLAG_EH_IN_PROGRESS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#pflags\">pflags</a> &= ~<a class=\"id\" href=\"#ATA_PFLAG_EH_PENDING\">ATA_PFLAG_EH_PENDING</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#excl_link\">excl_link</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;<span class=\"ts\"/><span class=\"comment\">/* don't maintain exclusion over EH */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* invoke EH, skip if unloading or suspended */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#pflags\">pflags</a> &amp; (<a class=\"id\" href=\"#ATA_PFLAG_UNLOADING\">ATA_PFLAG_UNLOADING</a> | <a class=\"id\" href=\"#ATA_PFLAG_SUSPENDED\">ATA_PFLAG_SUSPENDED</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#ops\">ops</a>-><a class=\"id\" href=\"#error_handler\">error_handler</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* if unloading, commence suicide */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#pflags\">pflags</a> &amp; <a class=\"id\" href=\"#ATA_PFLAG_UNLOADING\">ATA_PFLAG_UNLOADING</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    !(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#pflags\">pflags</a> &amp; <a class=\"id\" href=\"#ATA_PFLAG_UNLOADED\">ATA_PFLAG_UNLOADED</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_eh_unload\">ata_eh_unload</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_eh_finish\">ata_eh_finish</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* process port suspend request */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_eh_handle_port_suspend\">ata_eh_handle_port_suspend</a>(<a class=\"id\" href=\"#ap\">ap</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Exception might have happend after -&gt;error_handler</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * recovered the port but before this point.  Repeat</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * EH in such case.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#pflags\">pflags</a> &amp; <a class=\"id\" href=\"#ATA_PFLAG_EH_PENDING\">ATA_PFLAG_EH_PENDING</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (--<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#eh_tries\">eh_tries</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(<a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#repeat\">repeat</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_port_printk\">ata_port_printk</a>(<a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>, \"EH pending after %d \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"tries, giving up\\n\", <a class=\"id\" href=\"#ATA_EH_MAX_TRIES\">ATA_EH_MAX_TRIES</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ap\">ap</a>-><a class=\"id\" href=\"#pflags\">pflags</a> &= ~<a class=\"id\" href=\"#ATA_PFLAG_EH_PENDING\">ATA_PFLAG_EH_PENDING</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* this run is complete, make sure EH info is clear */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ata_for_each_link\">ata_for_each_link</a>(<a class=\"id\" href=\"#link\">link</a>, <a class=\"id\" href=\"#ap\">ap</a>, <a class=\"id\" href=\"#HOST_FIRST\">HOST_FIRST</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#eh_info\">eh_info</a>, 0, sizeof(<a class=\"id\" href=\"#link\">link</a>-><a class=\"id\" href=\"#eh_info\">eh_info</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Clear host_eh_scheduled while holding ap-&gt;lock such</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * that if exception occurs after this point but</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * before EH completion, SCSI midlayer will</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * re-initiate EH.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#host_eh_scheduled\">host_eh_scheduled</a> = 0;", 
"", 
];
xr_frag_insert('l/24/c0751fd96c68e105a46407f38912bbf8113ad2.xr', __xr_tmp);
