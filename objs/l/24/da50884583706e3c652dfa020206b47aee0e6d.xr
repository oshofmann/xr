var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/kernel/printk.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 1991, 1992  Linus Torvalds</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Modified to make sys_syslog() more flexible: added commands to</span>", 
"<span class=\"comment\"> * return the last 4k of kernel messages, regardless of whether</span>", 
"<span class=\"comment\"> * they've been read or not.  Added option to suppress kernel printk's</span>", 
"<span class=\"comment\"> * to the console.  Added hook for sending the console messages</span>", 
"<span class=\"comment\"> * elsewhere, in preparation for a serial line console (someday).</span>", 
"<span class=\"comment\"> * Ted Ts'o, 2/11/93.</span>", 
"<span class=\"comment\"> * Modified for sysctl support, 1/8/97, Chris Horn.</span>", 
"<span class=\"comment\"> * Fixed SMP synchronization, 08/08/99, Manfred Spraul</span>", 
"<span class=\"comment\"> *     manfred@colorfullife.com</span>", 
"<span class=\"comment\"> * Rewrote bits to get rid of console_lock</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>01Mar01 Andrew Morton</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#tty\">tty</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#tty_driver\">tty_driver</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#console\">console</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#jiffies\">jiffies</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#nmi\">nmi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#moduleparam\">moduleparam</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* For in_interrupt() */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#delay\">delay</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#smp\">smp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#security\">security</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bootmem\">bootmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#syscalls\">syscalls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kexec\">kexec</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kdb\">kdb</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ratelimit\">ratelimit</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kmsg_dump\">kmsg_dump</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#syslog\">syslog</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#notifier\">notifier</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_INK_PRINTK_CLOCK\">CONFIG_INK_PRINTK_CLOCK</a>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kvm_para\">kvm_para</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"static <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#ink_printk_clock\">ink_printk_clock</a> = 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * for_each_console() allows you to iterate on each console</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_console\">for_each_console</a>(<a class=\"id\" href=\"#con\">con</a>) \\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#con\">con</a> = <a class=\"id\" href=\"#console_drivers\">console_drivers</a>; <a class=\"id\" href=\"#con\">con</a> != <a class=\"id\" href=\"#NULL\">NULL</a>; <a class=\"id\" href=\"#con\">con</a> = <a class=\"id\" href=\"#con\">con</a>-><a class=\"id\" href=\"#next\">next</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Architectures can override it:</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#asmlinkage\">asmlinkage</a> <a class=\"id\" href=\"#__attribute__\">__attribute__</a>((<a class=\"id\" href=\"#weak\">weak</a>)) <a class=\"id\" href=\"#early_printk\">early_printk</a>(const char *<a class=\"id\" href=\"#fmt\">fmt</a>, ...)", 
"{", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__LOG_BUF_LEN\">__LOG_BUF_LEN</a><span class=\"ts\"/>(1 << <a class=\"id\" href=\"#CONFIG_LOG_BUF_SHIFT\">CONFIG_LOG_BUF_SHIFT</a>)", 
"", 
"<span class=\"comment\">/* printk's without a loglevel use this.. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEFAULT_MESSAGE_LOGLEVEL\">DEFAULT_MESSAGE_LOGLEVEL</a> 4 <span class=\"comment\">/* KERN_WARNING */</span>", 
"", 
"<span class=\"comment\">/* We show everything that is MORE important than this.. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MINIMUM_CONSOLE_LOGLEVEL\">MINIMUM_CONSOLE_LOGLEVEL</a> 1 <span class=\"comment\">/* Minimum loglevel we let people use */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DEFAULT_CONSOLE_LOGLEVEL\">DEFAULT_CONSOLE_LOGLEVEL</a> 7 <span class=\"comment\">/* anything MORE serious than KERN_DEBUG */</span>", 
"", 
"<a class=\"id\" href=\"#DECLARE_WAIT_QUEUE_HEAD\">DECLARE_WAIT_QUEUE_HEAD</a>(<a class=\"id\" href=\"#log_wait\">log_wait</a>);", 
"", 
"int <a class=\"id\" href=\"#console_printk\">console_printk</a>[4] = {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEFAULT_CONSOLE_LOGLEVEL\">DEFAULT_CONSOLE_LOGLEVEL</a>,<span class=\"ts\"/><span class=\"comment\">/* console_loglevel */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEFAULT_MESSAGE_LOGLEVEL\">DEFAULT_MESSAGE_LOGLEVEL</a>,<span class=\"ts\"/><span class=\"comment\">/* default_message_loglevel */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#MINIMUM_CONSOLE_LOGLEVEL\">MINIMUM_CONSOLE_LOGLEVEL</a>,<span class=\"ts\"/><span class=\"comment\">/* minimum_console_loglevel */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#DEFAULT_CONSOLE_LOGLEVEL\">DEFAULT_CONSOLE_LOGLEVEL</a>,<span class=\"ts\"/><span class=\"comment\">/* default_console_loglevel */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Low level drivers may need that to know if they can schedule in</span>", 
"<span class=\"comment\"> * their unblank() callback or not. So let's export it.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#oops_in_progress\">oops_in_progress</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#oops_in_progress\">oops_in_progress</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * console_sem protects the console_drivers list, and also</span>", 
"<span class=\"comment\"> * provides serialisation for access to the entire console</span>", 
"<span class=\"comment\"> * driver system.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#DECLARE_MUTEX\">DECLARE_MUTEX</a>(<a class=\"id\" href=\"#console_sem\">console_sem</a>);", 
"struct <a class=\"id\" href=\"#console\">console</a> *<a class=\"id\" href=\"#console_drivers\">console_drivers</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#console_drivers\">console_drivers</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is used for debugging the mess that is the VT code by</span>", 
"<span class=\"comment\"> * keeping track if we have the console semaphore held. It's</span>", 
"<span class=\"comment\"> * definitely not the perfect debug tool (we don't know if _WE_</span>", 
"<span class=\"comment\"> * hold it are racing, but it helps tracking those weird code</span>", 
"<span class=\"comment\"> * path in the console code where we end up in places I want</span>", 
"<span class=\"comment\"> * locked without the console sempahore held</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#console_locked\">console_locked</a>, <a class=\"id\" href=\"#console_suspended\">console_suspended</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * logbuf_lock protects log_buf, log_start, log_end, con_start and logged_chars</span>", 
"<span class=\"comment\"> * It is also used in interesting ways to provide interlocking in</span>", 
"<span class=\"comment\"> * release_console_sem().</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#logbuf_lock\">logbuf_lock</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LOG_BUF_MASK\">LOG_BUF_MASK</a> (<a class=\"id\" href=\"#log_buf_len\">log_buf_len</a>-1)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#LOG_BUF\">LOG_BUF</a>(<a class=\"id\" href=\"#idx\">idx</a>) (<a class=\"id\" href=\"#log_buf\">log_buf</a>[(<a class=\"id\" href=\"#idx\">idx</a>) &amp; <a class=\"id\" href=\"#LOG_BUF_MASK\">LOG_BUF_MASK</a>])", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The indices into log_buf are not constrained to log_buf_len - they</span>", 
"<span class=\"comment\"> * must be masked before subscripting</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned <a class=\"id\" href=\"#log_start\">log_start</a>;<span class=\"ts\"/><span class=\"comment\">/* Index into log_buf: next char to be read by syslog() */</span>", 
"static unsigned <a class=\"id\" href=\"#con_start\">con_start</a>;<span class=\"ts\"/><span class=\"comment\">/* Index into log_buf: next char to be sent to consoles */</span>", 
"static unsigned <a class=\"id\" href=\"#log_end\">log_end</a>;<span class=\"ts\"/><span class=\"comment\">/* Index into log_buf: most-recently-written-char + 1 */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Array of consoles built from command line options (console=)</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#console_cmdline\">console_cmdline</a>", 
"{", 
"<span class=\"ts\"/>char<span class=\"ts\"/><a class=\"id\" href=\"#name\">name</a>[8];<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Name of the driver<span class=\"ts\"/>    */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Minor dev. to use<span class=\"ts\"/>    */</span>", 
"<span class=\"ts\"/>char<span class=\"ts\"/>*<a class=\"id\" href=\"#options\">options</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Options for the driver   */</span>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_A11Y_BRAILLE_CONSOLE\">CONFIG_A11Y_BRAILLE_CONSOLE</a>", 
"<span class=\"ts\"/>char<span class=\"ts\"/>*<a class=\"id\" href=\"#brl_options\">brl_options</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Options for braille driver */</span>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_CMDLINECONSOLES\">MAX_CMDLINECONSOLES</a> 8", 
"", 
"static struct <a class=\"id\" href=\"#console_cmdline\">console_cmdline</a> <a class=\"id\" href=\"#console_cmdline\">console_cmdline</a>[<a class=\"id\" href=\"#MAX_CMDLINECONSOLES\">MAX_CMDLINECONSOLES</a>];", 
"static int <a class=\"id\" href=\"#selected_console\">selected_console</a> = -1;", 
"static int <a class=\"id\" href=\"#preferred_console\">preferred_console</a> = -1;", 
"int <a class=\"id\" href=\"#console_set_on_cmdline\">console_set_on_cmdline</a>;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#console_set_on_cmdline\">console_set_on_cmdline</a>);", 
"", 
"<span class=\"comment\">/* Flag: console code may call schedule() */</span>", 
"static int <a class=\"id\" href=\"#console_may_schedule\">console_may_schedule</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PRINTK\">CONFIG_PRINTK</a>", 
"", 
"static char <a class=\"id\" href=\"#__log_buf\">__log_buf</a>[<a class=\"id\" href=\"#__LOG_BUF_LEN\">__LOG_BUF_LEN</a>];", 
"static char *<a class=\"id\" href=\"#log_buf\">log_buf</a> = <a class=\"id\" href=\"#__log_buf\">__log_buf</a>;", 
"static int <a class=\"id\" href=\"#log_buf_len\">log_buf_len</a> = <a class=\"id\" href=\"#__LOG_BUF_LEN\">__LOG_BUF_LEN</a>;", 
"static unsigned <a class=\"id\" href=\"#logged_chars\">logged_chars</a>; <span class=\"comment\">/* Number of chars produced since last read+clear operation */</span>", 
"static int <a class=\"id\" href=\"#saved_console_loglevel\">saved_console_loglevel</a> = -1;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KEXEC\">CONFIG_KEXEC</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This appends the listed symbols to /proc/vmcoreinfo</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * /proc/vmcoreinfo is used by various utiilties, like crash and makedumpfile to</span>", 
"<span class=\"comment\"> * obtain access to symbols that are otherwise very difficult to locate.  These</span>", 
"<span class=\"comment\"> * symbols are specifically used so that utilities can access and extract the</span>", 
"<span class=\"comment\"> * dmesg log from a vmcore file after a crash.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#log_buf_kexec_setup\">log_buf_kexec_setup</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMCOREINFO_SYMBOL\">VMCOREINFO_SYMBOL</a>(<a class=\"id\" href=\"#log_buf\">log_buf</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMCOREINFO_SYMBOL\">VMCOREINFO_SYMBOL</a>(<a class=\"id\" href=\"#log_end\">log_end</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMCOREINFO_SYMBOL\">VMCOREINFO_SYMBOL</a>(<a class=\"id\" href=\"#log_buf_len\">log_buf_len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VMCOREINFO_SYMBOL\">VMCOREINFO_SYMBOL</a>(<a class=\"id\" href=\"#logged_chars\">logged_chars</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#log_buf_len_setup\">log_buf_len_setup</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#memparse\">memparse</a>(<a class=\"id\" href=\"#str\">str</a>, &amp;<a class=\"id\" href=\"#str\">str</a>);", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#roundup_pow_of_two\">roundup_pow_of_two</a>(<a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#size\">size</a> &gt; <a class=\"id\" href=\"#log_buf_len\">log_buf_len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#dest_idx\">dest_idx</a>, <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>char *<a class=\"id\" href=\"#new_log_buf\">new_log_buf</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_log_buf\">new_log_buf</a> = <a class=\"id\" href=\"#alloc_bootmem\">alloc_bootmem</a>(<a class=\"id\" href=\"#size\">size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#new_log_buf\">new_log_buf</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a> \"log_buf_len: allocation failed\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#logbuf_lock\">logbuf_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#log_buf_len\">log_buf_len</a> = <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#log_buf\">log_buf</a> = <a class=\"id\" href=\"#new_log_buf\">new_log_buf</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#con_start\">con_start</a>, <a class=\"id\" href=\"#log_start\">log_start</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dest_idx\">dest_idx</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#start\">start</a> != <a class=\"id\" href=\"#log_end\">log_end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#log_buf\">log_buf</a>[<a class=\"id\" href=\"#dest_idx\">dest_idx</a>] = <a class=\"id\" href=\"#__log_buf\">__log_buf</a>[<a class=\"id\" href=\"#start\">start</a> &amp; (<a class=\"id\" href=\"#__LOG_BUF_LEN\">__LOG_BUF_LEN</a> - 1)];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start\">start</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dest_idx\">dest_idx</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#log_start\">log_start</a> -= <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#con_start\">con_start</a> -= <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#log_end\">log_end</a> -= <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#logbuf_lock\">logbuf_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a> \"log_buf_len: %d\\n\", <a class=\"id\" href=\"#log_buf_len\">log_buf_len</a>);", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"log_buf_len=\", <a class=\"id\" href=\"#log_buf_len_setup\">log_buf_len_setup</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_BOOT_PRINTK_DELAY\">CONFIG_BOOT_PRINTK_DELAY</a>", 
"", 
"static unsigned int <a class=\"id\" href=\"#boot_delay\">boot_delay</a>; <span class=\"comment\">/* msecs delay after each printk during bootup */</span>", 
"static unsigned long long <a class=\"id\" href=\"#loops_per_msec\">loops_per_msec</a>;<span class=\"ts\"/><span class=\"comment\">/* based on boot_delay */</span>", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#boot_delay_setup\">boot_delay_setup</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#lpj\">lpj</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lpj\">lpj</a> = <a class=\"id\" href=\"#preset_lpj\">preset_lpj</a> ? <a class=\"id\" href=\"#preset_lpj\">preset_lpj</a> : 1000000;<span class=\"ts\"/><span class=\"comment\">/* some guess */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#loops_per_msec\">loops_per_msec</a> = (unsigned long long)<a class=\"id\" href=\"#lpj\">lpj</a> / 1000 * <a class=\"id\" href=\"#HZ\">HZ</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_option\">get_option</a>(&amp;<a class=\"id\" href=\"#str\">str</a>, &amp;<a class=\"id\" href=\"#boot_delay\">boot_delay</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#boot_delay\">boot_delay</a> &gt; 10 * 1000)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#boot_delay\">boot_delay</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_debug\">pr_debug</a>(\"boot_delay: %u, preset_lpj: %ld, lpj: %lu, \"", 
"<span class=\"ts\"/><span class=\"ts\"/>\"HZ: %d, loops_per_msec: %llu\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#boot_delay\">boot_delay</a>, <a class=\"id\" href=\"#preset_lpj\">preset_lpj</a>, <a class=\"id\" href=\"#lpj\">lpj</a>, <a class=\"id\" href=\"#HZ\">HZ</a>, <a class=\"id\" href=\"#loops_per_msec\">loops_per_msec</a>);", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"boot_delay=\", <a class=\"id\" href=\"#boot_delay_setup\">boot_delay_setup</a>);", 
"", 
"static void <a class=\"id\" href=\"#boot_delay_msec\">boot_delay_msec</a>(void)", 
"{", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#k\">k</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#timeout\">timeout</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#boot_delay\">boot_delay</a> == 0 || <a class=\"id\" href=\"#system_state\">system_state</a> != <a class=\"id\" href=\"#SYSTEM_BOOTING\">SYSTEM_BOOTING</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#k\">k</a> = (unsigned long long)<a class=\"id\" href=\"#loops_per_msec\">loops_per_msec</a> * <a class=\"id\" href=\"#boot_delay\">boot_delay</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#timeout\">timeout</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> + <a class=\"id\" href=\"#msecs_to_jiffies\">msecs_to_jiffies</a>(<a class=\"id\" href=\"#boot_delay\">boot_delay</a>);", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#k\">k</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#k\">k</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * use (volatile) jiffies to prevent</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * compiler reduction; loop termination via jiffies</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is secondary and may or may not happen.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#time_after\">time_after</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#timeout\">timeout</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#touch_nmi_watchdog\">touch_nmi_watchdog</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#boot_delay_msec\">boot_delay_msec</a>(void)", 
"{", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"int <a class=\"id\" href=\"#do_syslog\">do_syslog</a>(int <a class=\"id\" href=\"#type\">type</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#from_file\">from_file</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#j\">j</a>, <a class=\"id\" href=\"#limit\">limit</a>, <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#do_clear\">do_clear</a> = 0;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#security_syslog\">security_syslog</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#from_file\">from_file</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SYSLOG_ACTION_CLOSE\">SYSLOG_ACTION_CLOSE</a>:<span class=\"ts\"/><span class=\"comment\">/* Close log */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SYSLOG_ACTION_OPEN\">SYSLOG_ACTION_OPEN</a>:<span class=\"ts\"/><span class=\"comment\">/* Open log */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SYSLOG_ACTION_READ\">SYSLOG_ACTION_READ</a>:<span class=\"ts\"/><span class=\"comment\">/* Read from log */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buf\">buf</a> || <a class=\"id\" href=\"#len\">len</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#access_ok\">access_ok</a>(<a class=\"id\" href=\"#VERIFY_WRITE\">VERIFY_WRITE</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#len\">len</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#wait_event_interruptible\">wait_event_interruptible</a>(<a class=\"id\" href=\"#log_wait\">log_wait</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#log_start\">log_start</a> - <a class=\"id\" href=\"#log_end\">log_end</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#logbuf_lock\">logbuf_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>while (!<a class=\"id\" href=\"#error\">error</a> && (<a class=\"id\" href=\"#log_start\">log_start</a> != <a class=\"id\" href=\"#log_end\">log_end</a>) && <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#len\">len</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = <a class=\"id\" href=\"#LOG_BUF\">LOG_BUF</a>(<a class=\"id\" href=\"#log_start\">log_start</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#log_start\">log_start</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#logbuf_lock\">logbuf_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#__put_user\">__put_user</a>(<a class=\"id\" href=\"#c\">c</a>,<a class=\"id\" href=\"#buf\">buf</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#i\">i</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#logbuf_lock\">logbuf_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#logbuf_lock\">logbuf_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"comment\">/* Read/clear last kernel messages */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SYSLOG_ACTION_READ_CLEAR\">SYSLOG_ACTION_READ_CLEAR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_clear\">do_clear</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* FALL THRU */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* Read last kernel messages */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SYSLOG_ACTION_READ_ALL\">SYSLOG_ACTION_READ_ALL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#buf\">buf</a> || <a class=\"id\" href=\"#len\">len</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#access_ok\">access_ok</a>(<a class=\"id\" href=\"#VERIFY_WRITE\">VERIFY_WRITE</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#len\">len</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> &gt; <a class=\"id\" href=\"#log_buf_len\">log_buf_len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#log_buf_len\">log_buf_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#logbuf_lock\">logbuf_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> &gt; <a class=\"id\" href=\"#logged_chars\">logged_chars</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#logged_chars\">logged_chars</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#do_clear\">do_clear</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#logged_chars\">logged_chars</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#limit\">limit</a> = <a class=\"id\" href=\"#log_end\">log_end</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * __put_user() could sleep, and while we sleep</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * printk() could overwrite the messages</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we try to copy to user space. Therefore</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the messages are copied in reverse. &lt;manfreds&gt;</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#count\">count</a> && !<a class=\"id\" href=\"#error\">error</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#j\">j</a> = <a class=\"id\" href=\"#limit\">limit</a>-1-<a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#j\">j</a> + <a class=\"id\" href=\"#log_buf_len\">log_buf_len</a> &lt; <a class=\"id\" href=\"#log_end\">log_end</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = <a class=\"id\" href=\"#LOG_BUF\">LOG_BUF</a>(<a class=\"id\" href=\"#j\">j</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#logbuf_lock\">logbuf_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#__put_user\">__put_user</a>(<a class=\"id\" href=\"#c\">c</a>,&amp;<a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#count\">count</a>-1-<a class=\"id\" href=\"#i\">i</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#logbuf_lock\">logbuf_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#logbuf_lock\">logbuf_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> != <a class=\"id\" href=\"#count\">count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#count\">count</a>-<a class=\"id\" href=\"#error\">error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* buffer overflow during copy, correct user buffer. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#error\">error</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#__get_user\">__get_user</a>(<a class=\"id\" href=\"#c\">c</a>,&amp;<a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#i\">i</a>+<a class=\"id\" href=\"#offset\">offset</a>]) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#__put_user\">__put_user</a>(<a class=\"id\" href=\"#c\">c</a>,&amp;<a class=\"id\" href=\"#buf\">buf</a>[<a class=\"id\" href=\"#i\">i</a>])) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"comment\">/* Clear ring buffer */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SYSLOG_ACTION_CLEAR\">SYSLOG_ACTION_CLEAR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#logged_chars\">logged_chars</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"comment\">/* Disable logging to console */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SYSLOG_ACTION_CONSOLE_OFF\">SYSLOG_ACTION_CONSOLE_OFF</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#saved_console_loglevel\">saved_console_loglevel</a> == -1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#saved_console_loglevel\">saved_console_loglevel</a> = <a class=\"id\" href=\"#console_loglevel\">console_loglevel</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#console_loglevel\">console_loglevel</a> = <a class=\"id\" href=\"#minimum_console_loglevel\">minimum_console_loglevel</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"comment\">/* Enable logging to console */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SYSLOG_ACTION_CONSOLE_ON\">SYSLOG_ACTION_CONSOLE_ON</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#saved_console_loglevel\">saved_console_loglevel</a> != -1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#console_loglevel\">console_loglevel</a> = <a class=\"id\" href=\"#saved_console_loglevel\">saved_console_loglevel</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#saved_console_loglevel\">saved_console_loglevel</a> = -1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"comment\">/* Set level of messages printed to console */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SYSLOG_ACTION_CONSOLE_LEVEL\">SYSLOG_ACTION_CONSOLE_LEVEL</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &lt; 1 || <a class=\"id\" href=\"#len\">len</a> &gt; 8)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &lt; <a class=\"id\" href=\"#minimum_console_loglevel\">minimum_console_loglevel</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#minimum_console_loglevel\">minimum_console_loglevel</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#console_loglevel\">console_loglevel</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Implicitly re-enable logging to console */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#saved_console_loglevel\">saved_console_loglevel</a> = -1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"comment\">/* Number of chars in the log buffer */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SYSLOG_ACTION_SIZE_UNREAD\">SYSLOG_ACTION_SIZE_UNREAD</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#log_end\">log_end</a> - <a class=\"id\" href=\"#log_start\">log_start</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"comment\">/* Size of the log buffer */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#SYSLOG_ACTION_SIZE_BUFFER\">SYSLOG_ACTION_SIZE_BUFFER</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#log_buf_len\">log_buf_len</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#SYSCALL_DEFINE3\">SYSCALL_DEFINE3</a>(<a class=\"id\" href=\"#syslog\">syslog</a>, int, <a class=\"id\" href=\"#type\">type</a>, char <a class=\"id\" href=\"#__user\">__user</a> *, <a class=\"id\" href=\"#buf\">buf</a>, int, <a class=\"id\" href=\"#len\">len</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#do_syslog\">do_syslog</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#len\">len</a>, <a class=\"id\" href=\"#SYSLOG_FROM_CALL\">SYSLOG_FROM_CALL</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a><span class=\"ts\"/><a class=\"id\" href=\"#CONFIG_KGDB_KDB\">CONFIG_KGDB_KDB</a>", 
"<span class=\"comment\">/* kdb dmesg command needs access to the syslog buffer.  do_syslog()</span>", 
"<span class=\"comment\"> * uses locks so it cannot be used during debugging.  Just tell kdb</span>", 
"<span class=\"comment\"> * where the start and end of the physical and logical logs are.  This</span>", 
"<span class=\"comment\"> * is equivalent to do_syslog(3).</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#kdb_syslog_data\">kdb_syslog_data</a>(char *<a class=\"id\" href=\"#syslog_data\">syslog_data</a>[4])", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#syslog_data\">syslog_data</a>[0] = <a class=\"id\" href=\"#log_buf\">log_buf</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#syslog_data\">syslog_data</a>[1] = <a class=\"id\" href=\"#log_buf\">log_buf</a> + <a class=\"id\" href=\"#log_buf_len\">log_buf_len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#syslog_data\">syslog_data</a>[2] = <a class=\"id\" href=\"#log_buf\">log_buf</a> + <a class=\"id\" href=\"#log_end\">log_end</a> -", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#logged_chars\">logged_chars</a> &lt; <a class=\"id\" href=\"#log_buf_len\">log_buf_len</a> ? <a class=\"id\" href=\"#logged_chars\">logged_chars</a> : <a class=\"id\" href=\"#log_buf_len\">log_buf_len</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#syslog_data\">syslog_data</a>[3] = <a class=\"id\" href=\"#log_buf\">log_buf</a> + <a class=\"id\" href=\"#log_end\">log_end</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* CONFIG_KGDB_KDB */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Call the console drivers on a range of log_buf</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__call_console_drivers\">__call_console_drivers</a>(unsigned <a class=\"id\" href=\"#start\">start</a>, unsigned <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#console\">console</a> *<a class=\"id\" href=\"#con\">con</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_console\">for_each_console</a>(<a class=\"id\" href=\"#con\">con</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#con\">con</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CON_ENABLED\">CON_ENABLED</a>) && <a class=\"id\" href=\"#con\">con</a>-><a class=\"id\" href=\"#write\">write</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#cpu_online\">cpu_online</a>(<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>()) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#con\">con</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CON_ANYTIME\">CON_ANYTIME</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#con\">con</a>-><a class=\"id\" href=\"#write\">write</a>(<a class=\"id\" href=\"#con\">con</a>, &amp;<a class=\"id\" href=\"#LOG_BUF\">LOG_BUF</a>(<a class=\"id\" href=\"#start\">start</a>), <a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#start\">start</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> <a class=\"id\" href=\"#ignore_loglevel\">ignore_loglevel</a>;", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#ignore_loglevel_setup\">ignore_loglevel_setup</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ignore_loglevel\">ignore_loglevel</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"debug: ignoring loglevel setting.\\n\");", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<a class=\"id\" href=\"#early_param\">early_param</a>(\"ignore_loglevel\", <a class=\"id\" href=\"#ignore_loglevel_setup\">ignore_loglevel_setup</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Write out chars from start to end - 1 inclusive</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#_call_console_drivers\">_call_console_drivers</a>(unsigned <a class=\"id\" href=\"#start\">start</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#end\">end</a>, int <a class=\"id\" href=\"#msg_log_level\">msg_log_level</a>)", 
"{", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#msg_log_level\">msg_log_level</a> &lt; <a class=\"id\" href=\"#console_loglevel\">console_loglevel</a> || <a class=\"id\" href=\"#ignore_loglevel\">ignore_loglevel</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#console_drivers\">console_drivers</a> && <a class=\"id\" href=\"#start\">start</a> != <a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#start\">start</a> &amp; <a class=\"id\" href=\"#LOG_BUF_MASK\">LOG_BUF_MASK</a>) &gt; (<a class=\"id\" href=\"#end\">end</a> &amp; <a class=\"id\" href=\"#LOG_BUF_MASK\">LOG_BUF_MASK</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* wrapped write */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__call_console_drivers\">__call_console_drivers</a>(<a class=\"id\" href=\"#start\">start</a> &amp; <a class=\"id\" href=\"#LOG_BUF_MASK\">LOG_BUF_MASK</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#log_buf_len\">log_buf_len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__call_console_drivers\">__call_console_drivers</a>(0, <a class=\"id\" href=\"#end\">end</a> &amp; <a class=\"id\" href=\"#LOG_BUF_MASK\">LOG_BUF_MASK</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__call_console_drivers\">__call_console_drivers</a>(<a class=\"id\" href=\"#start\">start</a>, <a class=\"id\" href=\"#end\">end</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Call the console drivers, asking them to write out</span>", 
"<span class=\"comment\"> * log_buf[start] to log_buf[end - 1].</span>", 
"<span class=\"comment\"> * The console_sem must be held.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#call_console_drivers\">call_console_drivers</a>(unsigned <a class=\"id\" href=\"#start\">start</a>, unsigned <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#cur_index\">cur_index</a>, <a class=\"id\" href=\"#start_print\">start_print</a>;", 
"<span class=\"ts\"/>static int <a class=\"id\" href=\"#msg_level\">msg_level</a> = -1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(((int)(<a class=\"id\" href=\"#start\">start</a> - <a class=\"id\" href=\"#end\">end</a>)) &gt; 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cur_index\">cur_index</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#start_print\">start_print</a> = <a class=\"id\" href=\"#start\">start</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#cur_index\">cur_index</a> != <a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#msg_level\">msg_level</a> &lt; 0 && ((<a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#cur_index\">cur_index</a>) &gt; 2) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#LOG_BUF\">LOG_BUF</a>(<a class=\"id\" href=\"#cur_index\">cur_index</a> + 0) == '<' &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#LOG_BUF\">LOG_BUF</a>(<a class=\"id\" href=\"#cur_index\">cur_index</a> + 1) >= '0' &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#LOG_BUF\">LOG_BUF</a>(<a class=\"id\" href=\"#cur_index\">cur_index</a> + 1) <= '7' &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#LOG_BUF\">LOG_BUF</a>(<a class=\"id\" href=\"#cur_index\">cur_index</a> + 2) == '>') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msg_level\">msg_level</a> = <a class=\"id\" href=\"#LOG_BUF\">LOG_BUF</a>(<a class=\"id\" href=\"#cur_index\">cur_index</a> + 1) - '0';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur_index\">cur_index</a> += 3;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_print\">start_print</a> = <a class=\"id\" href=\"#cur_index\">cur_index</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#cur_index\">cur_index</a> != <a class=\"id\" href=\"#end\">end</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#c\">c</a> = <a class=\"id\" href=\"#LOG_BUF\">LOG_BUF</a>(<a class=\"id\" href=\"#cur_index\">cur_index</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cur_index\">cur_index</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a> == '\\n') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#msg_level\">msg_level</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * printk() has already given us loglevel tags in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the buffer.  This code is here in case the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * log buffer has wrapped right round and scribbled</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * on those tags</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msg_level\">msg_level</a> = <a class=\"id\" href=\"#default_message_loglevel\">default_message_loglevel</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#_call_console_drivers\">_call_console_drivers</a>(<a class=\"id\" href=\"#start_print\">start_print</a>, <a class=\"id\" href=\"#cur_index\">cur_index</a>, <a class=\"id\" href=\"#msg_level\">msg_level</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msg_level\">msg_level</a> = -1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_print\">start_print</a> = <a class=\"id\" href=\"#cur_index\">cur_index</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#_call_console_drivers\">_call_console_drivers</a>(<a class=\"id\" href=\"#start_print\">start_print</a>, <a class=\"id\" href=\"#end\">end</a>, <a class=\"id\" href=\"#msg_level\">msg_level</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#emit_log_char\">emit_log_char</a>(char <a class=\"id\" href=\"#c\">c</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#LOG_BUF\">LOG_BUF</a>(<a class=\"id\" href=\"#log_end\">log_end</a>) = <a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#log_end\">log_end</a>++;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#log_end\">log_end</a> - <a class=\"id\" href=\"#log_start\">log_start</a> &gt; <a class=\"id\" href=\"#log_buf_len\">log_buf_len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#log_start\">log_start</a> = <a class=\"id\" href=\"#log_end\">log_end</a> - <a class=\"id\" href=\"#log_buf_len\">log_buf_len</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#log_end\">log_end</a> - <a class=\"id\" href=\"#con_start\">con_start</a> &gt; <a class=\"id\" href=\"#log_buf_len\">log_buf_len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#con_start\">con_start</a> = <a class=\"id\" href=\"#log_end\">log_end</a> - <a class=\"id\" href=\"#log_buf_len\">log_buf_len</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#logged_chars\">logged_chars</a> &lt; <a class=\"id\" href=\"#log_buf_len\">log_buf_len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#logged_chars\">logged_chars</a>++;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Zap console related locks when oopsing. Only zap at most once</span>", 
"<span class=\"comment\"> * every 10 seconds, to leave time for slow consoles to print a</span>", 
"<span class=\"comment\"> * full oops.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#zap_locks\">zap_locks</a>(void)", 
"{", 
"<span class=\"ts\"/>static unsigned long <a class=\"id\" href=\"#oops_timestamp\">oops_timestamp</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#time_after_eq\">time_after_eq</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#oops_timestamp\">oops_timestamp</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>!<a class=\"id\" href=\"#time_after\">time_after</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#oops_timestamp\">oops_timestamp</a> + 30 * <a class=\"id\" href=\"#HZ\">HZ</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#oops_timestamp\">oops_timestamp</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If a crash is occurring, make sure we can't deadlock */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#logbuf_lock\">logbuf_lock</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* And make sure that we print immediately */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_MUTEX\">init_MUTEX</a>(&amp;<a class=\"id\" href=\"#console_sem\">console_sem</a>);", 
"}", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_PRINTK_TIME\">CONFIG_PRINTK_TIME</a>)", 
"static int <a class=\"id\" href=\"#printk_time\">printk_time</a> = 1;", 
"#else", 
"static int <a class=\"id\" href=\"#printk_time\">printk_time</a> = 0;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<a class=\"id\" href=\"#module_param_named\">module_param_named</a>(<a class=\"id\" href=\"#time\">time</a>, <a class=\"id\" href=\"#printk_time\">printk_time</a>, <a class=\"id\" href=\"#bool\">bool</a>, <a class=\"id\" href=\"#S_IRUGO\">S_IRUGO</a> | <a class=\"id\" href=\"#S_IWUSR\">S_IWUSR</a>);", 
"", 
"<span class=\"comment\">/* Check if we have any console registered that can be called early in boot. */</span>", 
"static int <a class=\"id\" href=\"#have_callable_console\">have_callable_console</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#console\">console</a> *<a class=\"id\" href=\"#con\">con</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_console\">for_each_console</a>(<a class=\"id\" href=\"#con\">con</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#con\">con</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CON_ANYTIME\">CON_ANYTIME</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * printk - print a kernel message</span>", 
"<span class=\"comment\"> * @fmt: format string</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is printk().  It can be called from any context.  We want it to work.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We try to grab the console_sem.  If we succeed, it's easy - we log the output and</span>", 
"<span class=\"comment\"> * call the console drivers.  If we fail to get the semaphore we place the output</span>", 
"<span class=\"comment\"> * into the log buffer and return.  The current holder of the console_sem will</span>", 
"<span class=\"comment\"> * notice the new output in release_console_sem() and will send it to the</span>", 
"<span class=\"comment\"> * consoles before releasing the semaphore.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * One effect of this deferred printing is that code which calls printk() and</span>", 
"<span class=\"comment\"> * then changes console_loglevel may break. This is because console_loglevel</span>", 
"<span class=\"comment\"> * is inspected when the actual printing occurs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * See also:</span>", 
"<span class=\"comment\"> * printf(3)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * See the vsnprintf() documentation for format string extensions over C99.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<a class=\"id\" href=\"#asmlinkage\">asmlinkage</a> int <a class=\"id\" href=\"#printk\">printk</a>(const char *<a class=\"id\" href=\"#fmt\">fmt</a>, ...)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#r\">r</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_KGDB_KDB\">CONFIG_KGDB_KDB</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#kdb_trap_printk\">kdb_trap_printk</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#va_start\">va_start</a>(<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#fmt\">fmt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#vkdb_printf\">vkdb_printf</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a>(<a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#r\">r</a>;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_start\">va_start</a>(<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#fmt\">fmt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = <a class=\"id\" href=\"#vprintk\">vprintk</a>(<a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a>(<a class=\"id\" href=\"#args\">args</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#r\">r</a>;", 
"}", 
"", 
"<span class=\"comment\">/* cpu currently holding logbuf_lock */</span>", 
"static volatile unsigned int <a class=\"id\" href=\"#printk_cpu\">printk_cpu</a> = <a class=\"id\" href=\"#UINT_MAX\">UINT_MAX</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Can we actually use the console at this time on this cpu?</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Console drivers may assume that per-cpu resources have</span>", 
"<span class=\"comment\"> * been allocated. So unless they're explicitly marked as</span>", 
"<span class=\"comment\"> * being able to cope (CON_ANYTIME) don't call them until</span>", 
"<span class=\"comment\"> * this CPU is officially up.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#can_use_console\">can_use_console</a>(unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cpu_online\">cpu_online</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) || <a class=\"id\" href=\"#have_callable_console\">have_callable_console</a>();", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Try to get console ownership to actually show the kernel</span>", 
"<span class=\"comment\"> * messages from a 'printk'. Return true (and with the</span>", 
"<span class=\"comment\"> * console_semaphore held, and 'console_locked' set) if it</span>", 
"<span class=\"comment\"> * is successful, false otherwise.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This gets called with the 'logbuf_lock' spinlock held and</span>", 
"<span class=\"comment\"> * interrupts disabled. It should return with 'lockbuf_lock'</span>", 
"<span class=\"comment\"> * released but interrupts still disabled.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#acquire_console_semaphore_for_printk\">acquire_console_semaphore_for_printk</a>(unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retval\">retval</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#try_acquire_console_sem\">try_acquire_console_sem</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If we can't use the console, we need to release</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the console semaphore by hand to avoid flushing</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the buffer. We need to hold the console semaphore</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * in order to do this test safely.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#can_use_console\">can_use_console</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#console_locked\">console_locked</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>(&amp;<a class=\"id\" href=\"#console_sem\">console_sem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retval\">retval</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk_cpu\">printk_cpu</a> = <a class=\"id\" href=\"#UINT_MAX\">UINT_MAX</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#logbuf_lock\">logbuf_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retval\">retval</a>;", 
"}", 
"static const char <a class=\"id\" href=\"#recursion_bug_msg\">recursion_bug_msg</a> [] =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#KERN_CRIT\">KERN_CRIT</a> \"BUG: recent printk recursion!\\n\";", 
"static int <a class=\"id\" href=\"#recursion_bug\">recursion_bug</a>;", 
"static int <a class=\"id\" href=\"#new_text_line\">new_text_line</a> = 1;", 
"static char <a class=\"id\" href=\"#printk_buf\">printk_buf</a>[1024];", 
"", 
"int <a class=\"id\" href=\"#printk_delay_msec\">printk_delay_msec</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#printk_delay\">printk_delay</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#printk_delay_msec\">printk_delay_msec</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#m\">m</a> = <a class=\"id\" href=\"#printk_delay_msec\">printk_delay_msec</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#m\">m</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mdelay\">mdelay</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#touch_nmi_watchdog\">touch_nmi_watchdog</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<a class=\"id\" href=\"#asmlinkage\">asmlinkage</a> int <a class=\"id\" href=\"#vprintk\">vprintk</a>(const char *<a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#printed_len\">printed_len</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#current_log_level\">current_log_level</a> = <a class=\"id\" href=\"#default_message_loglevel\">default_message_loglevel</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#this_cpu\">this_cpu</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#boot_delay_msec\">boot_delay_msec</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk_delay\">printk_delay</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/* This stops the holder of console_sem just where we want him */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_local_irq_save\">raw_local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#this_cpu\">this_cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Ouch, printk recursed into itself!</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#printk_cpu\">printk_cpu</a> == <a class=\"id\" href=\"#this_cpu\">this_cpu</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If a crash is occurring during printk() on this CPU,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * then try to get the crash message out but make sure</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * we can't deadlock. Otherwise just return to avoid the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * recursion and return - but flag the recursion so that</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it can be printed at the next appropriate moment:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#oops_in_progress\">oops_in_progress</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#recursion_bug\">recursion_bug</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_restore_irqs\">out_restore_irqs</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zap_locks\">zap_locks</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lockdep_off\">lockdep_off</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#logbuf_lock\">logbuf_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk_cpu\">printk_cpu</a> = <a class=\"id\" href=\"#this_cpu\">this_cpu</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#recursion_bug\">recursion_bug</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#recursion_bug\">recursion_bug</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#printk_buf\">printk_buf</a>, <a class=\"id\" href=\"#recursion_bug_msg\">recursion_bug_msg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printed_len\">printed_len</a> = <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#recursion_bug_msg\">recursion_bug_msg</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* Emit the output into the temporary buffer */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printed_len\">printed_len</a> += <a class=\"id\" href=\"#vscnprintf\">vscnprintf</a>(<a class=\"id\" href=\"#printk_buf\">printk_buf</a> + <a class=\"id\" href=\"#printed_len\">printed_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  sizeof(<a class=\"id\" href=\"#printk_buf\">printk_buf</a>) - <a class=\"id\" href=\"#printed_len\">printed_len</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_INK_PRINTK_CLOCK\">CONFIG_INK_PRINTK_CLOCK</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#printed_len\">printed_len</a> &lt; sizeof(<a class=\"id\" href=\"#printk_buf\">printk_buf</a>) && <a class=\"id\" href=\"#printed_len\">printed_len</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#last\">last</a> = <a class=\"id\" href=\"#printk_buf\">printk_buf</a>[<a class=\"id\" href=\"#printed_len\">printed_len</a> - 1];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#last\">last</a> == '\\n') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#_output\">_output</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printed_len\">printed_len</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printed_len\">printed_len</a> += <a class=\"id\" href=\"#scnprintf\">scnprintf</a>(<a class=\"id\" href=\"#printk_buf\">printk_buf</a> + <a class=\"id\" href=\"#printed_len\">printed_len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(<a class=\"id\" href=\"#printk_buf\">printk_buf</a>) - <a class=\"id\" href=\"#printed_len\">printed_len</a>, \" (%llx)\", <a class=\"id\" href=\"#ink_printk_clock\">ink_printk_clock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#asm\">asm</a> volatile(\"vmcall\" :", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"=a\"(<a class=\"id\" href=\"#_output\">_output</a>) :", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"a\"(<a class=\"id\" href=\"#KVM_HC_PRINTK_CLOCK\">KVM_HC_PRINTK_CLOCK</a>), \"b\"(<a class=\"id\" href=\"#ink_printk_clock\">ink_printk_clock</a>) :", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"memory\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ink_printk_clock\">ink_printk_clock</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#last\">last</a> && <a class=\"id\" href=\"#printed_len\">printed_len</a> &lt; sizeof(<a class=\"id\" href=\"#printk_buf\">printk_buf</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk_buf\">printk_buf</a>[<a class=\"id\" href=\"#printed_len\">printed_len</a>++] = <a class=\"id\" href=\"#last\">last</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#printed_len\">printed_len</a> &lt; sizeof(<a class=\"id\" href=\"#printk_buf\">printk_buf</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk_buf\">printk_buf</a>[<a class=\"id\" href=\"#printed_len\">printed_len</a>] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#printk_buf\">printk_buf</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Do we have a loglevel in the string? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a>[0] == '<') {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#c\">c</a> = <a class=\"id\" href=\"#p\">p</a>[1];", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#c\">c</a> && <a class=\"id\" href=\"#p\">p</a>[2] == '>') {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#c\">c</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case '0' ... '7': <span class=\"comment\">/* loglevel */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current_log_level\">current_log_level</a> = <a class=\"id\" href=\"#c\">c</a> - '0';", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Fallthrough - make sure we're on a new line */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case 'd': <span class=\"comment\">/* KERN_DEFAULT */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#new_text_line\">new_text_line</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#emit_log_char\">emit_log_char</a>('\\n');", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_text_line\">new_text_line</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Fallthrough - skip the loglevel */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case 'c': <span class=\"comment\">/* KERN_CONT */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> += 3;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Copy the output into log_buf.  If the caller didn't provide</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * appropriate log level tags, we insert them here</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for ( ; *<a class=\"id\" href=\"#p\">p</a>; <a class=\"id\" href=\"#p\">p</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#new_text_line\">new_text_line</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Always output the token */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#emit_log_char\">emit_log_char</a>('<');", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#emit_log_char\">emit_log_char</a>(<a class=\"id\" href=\"#current_log_level\">current_log_level</a> + '0');", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#emit_log_char\">emit_log_char</a>('>');", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printed_len\">printed_len</a> += 3;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_text_line\">new_text_line</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#printk_time\">printk_time</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Follow the token with the time */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#tbuf\">tbuf</a>[50], *<a class=\"id\" href=\"#tp\">tp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned <a class=\"id\" href=\"#tlen\">tlen</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#t\">t</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nanosec_rem\">nanosec_rem</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#cpu_clock\">cpu_clock</a>(<a class=\"id\" href=\"#printk_cpu\">printk_cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nanosec_rem\">nanosec_rem</a> = <a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#t\">t</a>, 1000000000);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tlen\">tlen</a> = <a class=\"id\" href=\"#sprintf\">sprintf</a>(<a class=\"id\" href=\"#tbuf\">tbuf</a>, \"[%5lu.%06lu] \",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long) <a class=\"id\" href=\"#t\">t</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nanosec_rem\">nanosec_rem</a> / 1000);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tbuf\">tbuf</a>; <a class=\"id\" href=\"#tp\">tp</a> &lt; <a class=\"id\" href=\"#tbuf\">tbuf</a> + <a class=\"id\" href=\"#tlen\">tlen</a>; <a class=\"id\" href=\"#tp\">tp</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#emit_log_char\">emit_log_char</a>(*<a class=\"id\" href=\"#tp\">tp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printed_len\">printed_len</a> += <a class=\"id\" href=\"#tlen\">tlen</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!*<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#emit_log_char\">emit_log_char</a>(*<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#p\">p</a> == '\\n')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_text_line\">new_text_line</a> = 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Try to acquire and then immediately release the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * console semaphore. The release will do all the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * actual magic (print out buffers, wake up klogd,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * etc). </span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The acquire_console_semaphore_for_printk() function</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will release 'logbuf_lock' regardless of whether it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * actually gets the semaphore or not.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acquire_console_semaphore_for_printk\">acquire_console_semaphore_for_printk</a>(<a class=\"id\" href=\"#this_cpu\">this_cpu</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#release_console_sem\">release_console_sem</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lockdep_on\">lockdep_on</a>();", 
"<a class=\"id\" href=\"#out_restore_irqs\">out_restore_irqs</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_local_irq_restore\">raw_local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#printed_len\">printed_len</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#printk\">printk</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#vprintk\">vprintk</a>);", 
"", 
"#else", 
"", 
"static void <a class=\"id\" href=\"#call_console_drivers\">call_console_drivers</a>(unsigned <a class=\"id\" href=\"#start\">start</a>, unsigned <a class=\"id\" href=\"#end\">end</a>)", 
"{", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static int <a class=\"id\" href=\"#__add_preferred_console\">__add_preferred_console</a>(char *<a class=\"id\" href=\"#name\">name</a>, int <a class=\"id\" href=\"#idx\">idx</a>, char *<a class=\"id\" href=\"#options\">options</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   char *<a class=\"id\" href=\"#brl_options\">brl_options</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#console_cmdline\">console_cmdline</a> *<a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>See if this tty is not yet registered, and</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *<span class=\"ts\"/>if we have a slot free.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAX_CMDLINECONSOLES\">MAX_CMDLINECONSOLES</a> && <a class=\"id\" href=\"#console_cmdline\">console_cmdline</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>[0]; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#console_cmdline\">console_cmdline</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#name\">name</a>) == 0 &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#console_cmdline\">console_cmdline</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#index\">index</a> == <a class=\"id\" href=\"#idx\">idx</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#brl_options\">brl_options</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#selected_console\">selected_console</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i\">i</a> == <a class=\"id\" href=\"#MAX_CMDLINECONSOLES\">MAX_CMDLINECONSOLES</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#E2BIG\">E2BIG</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#brl_options\">brl_options</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#selected_console\">selected_console</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = &amp;<a class=\"id\" href=\"#console_cmdline\">console_cmdline</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strlcpy\">strlcpy</a>(<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#name\">name</a>, sizeof(<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#name\">name</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#options\">options</a> = <a class=\"id\" href=\"#options\">options</a>;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_A11Y_BRAILLE_CONSOLE\">CONFIG_A11Y_BRAILLE_CONSOLE</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#brl_options\">brl_options</a> = <a class=\"id\" href=\"#brl_options\">brl_options</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#idx\">idx</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Set up a list of consoles.  Called from init/main.c</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#console_setup\">console_setup</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#buf\">buf</a>[sizeof(<a class=\"id\" href=\"#console_cmdline\">console_cmdline</a>[0].<a class=\"id\" href=\"#name\">name</a>) + 4]; <span class=\"comment\">/* 4 for index */</span>", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#s\">s</a>, *<a class=\"id\" href=\"#options\">options</a>, *<a class=\"id\" href=\"#brl_options\">brl_options</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#idx\">idx</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_A11Y_BRAILLE_CONSOLE\">CONFIG_A11Y_BRAILLE_CONSOLE</a>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#memcmp\">memcmp</a>(<a class=\"id\" href=\"#str\">str</a>, \"brl,\", 4)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brl_options\">brl_options</a> = \"\";", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#str\">str</a> += 4;", 
"<span class=\"ts\"/>} else if (!<a class=\"id\" href=\"#memcmp\">memcmp</a>(<a class=\"id\" href=\"#str\">str</a>, \"brl=\", 4)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#brl_options\">brl_options</a> = <a class=\"id\" href=\"#str\">str</a> + 4;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#str\">str</a> = <a class=\"id\" href=\"#strchr\">strchr</a>(<a class=\"id\" href=\"#brl_options\">brl_options</a>, ',');", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#str\">str</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"need port name after brl=\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>*(<a class=\"id\" href=\"#str\">str</a>++) = 0;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Decode str into name, index, options.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#str\">str</a>[0] >= '0' && <a class=\"id\" href=\"#str\">str</a>[0] <= '9') {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"ttyS\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strncpy\">strncpy</a>(<a class=\"id\" href=\"#buf\">buf</a> + 4, <a class=\"id\" href=\"#str\">str</a>, sizeof(<a class=\"id\" href=\"#buf\">buf</a>) - 5);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strncpy\">strncpy</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#str\">str</a>, sizeof(<a class=\"id\" href=\"#buf\">buf</a>) - 1);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf\">buf</a>[sizeof(<a class=\"id\" href=\"#buf\">buf</a>) - 1] = 0;", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#options\">options</a> = <a class=\"id\" href=\"#strchr\">strchr</a>(<a class=\"id\" href=\"#str\">str</a>, ',')) != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*(<a class=\"id\" href=\"#options\">options</a>++) = 0;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#__sparc__\">__sparc__</a>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#str\">str</a>, \"ttya\"))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"ttyS0\");", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#str\">str</a>, \"ttyb\"))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcpy\">strcpy</a>(<a class=\"id\" href=\"#buf\">buf</a>, \"ttyS1\");", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#s\">s</a> = <a class=\"id\" href=\"#buf\">buf</a>; *<a class=\"id\" href=\"#s\">s</a>; <a class=\"id\" href=\"#s\">s</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((*<a class=\"id\" href=\"#s\">s</a> >= '0' && *<a class=\"id\" href=\"#s\">s</a> <= '9') || *<a class=\"id\" href=\"#s\">s</a> == ',')", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#idx\">idx</a> = <a class=\"id\" href=\"#simple_strtoul\">simple_strtoul</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 10);", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#s\">s</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__add_preferred_console\">__add_preferred_console</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#options\">options</a>, <a class=\"id\" href=\"#brl_options\">brl_options</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#console_set_on_cmdline\">console_set_on_cmdline</a> = 1;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"console=\", <a class=\"id\" href=\"#console_setup\">console_setup</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * add_preferred_console - add a device to the list of preferred consoles.</span>", 
"<span class=\"comment\"> * @name: device name</span>", 
"<span class=\"comment\"> * @idx: device index</span>", 
"<span class=\"comment\"> * @options: options for this console</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The last preferred console added will be used for kernel messages</span>", 
"<span class=\"comment\"> * and stdin/out/err for init.  Normally this is used by console_setup</span>", 
"<span class=\"comment\"> * above to handle user-supplied console arguments; however it can also</span>", 
"<span class=\"comment\"> * be used by arch-specific code either to override the user or more</span>", 
"<span class=\"comment\"> * commonly to provide a default console (ie from PROM variables) when</span>", 
"<span class=\"comment\"> * the user has not supplied one.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#add_preferred_console\">add_preferred_console</a>(char *<a class=\"id\" href=\"#name\">name</a>, int <a class=\"id\" href=\"#idx\">idx</a>, char *<a class=\"id\" href=\"#options\">options</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#__add_preferred_console\">__add_preferred_console</a>(<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#idx\">idx</a>, <a class=\"id\" href=\"#options\">options</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#update_console_cmdline\">update_console_cmdline</a>(char *<a class=\"id\" href=\"#name\">name</a>, int <a class=\"id\" href=\"#idx\">idx</a>, char *<a class=\"id\" href=\"#name_new\">name_new</a>, int <a class=\"id\" href=\"#idx_new\">idx_new</a>, char *<a class=\"id\" href=\"#options\">options</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#console_cmdline\">console_cmdline</a> *<a class=\"id\" href=\"#c\">c</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#MAX_CMDLINECONSOLES\">MAX_CMDLINECONSOLES</a> && <a class=\"id\" href=\"#console_cmdline\">console_cmdline</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>[0]; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#console_cmdline\">console_cmdline</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#name\">name</a>) == 0 &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#console_cmdline\">console_cmdline</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#index\">index</a> == <a class=\"id\" href=\"#idx\">idx</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a> = &amp;<a class=\"id\" href=\"#console_cmdline\">console_cmdline</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strlcpy\">strlcpy</a>(<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#name_new\">name_new</a>, sizeof(<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#name\">name</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#name\">name</a>[sizeof(<a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#name\">name</a>) - 1] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#options\">options</a> = <a class=\"id\" href=\"#options\">options</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#c\">c</a>-><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#idx_new\">idx_new</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* not found */</span>", 
"<span class=\"ts\"/>return -1;", 
"}", 
"", 
"int <a class=\"id\" href=\"#console_suspend_enabled\">console_suspend_enabled</a> = 1;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#console_suspend_enabled\">console_suspend_enabled</a>);", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#console_suspend_disable\">console_suspend_disable</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#console_suspend_enabled\">console_suspend_enabled</a> = 0;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"no_console_suspend\", <a class=\"id\" href=\"#console_suspend_disable\">console_suspend_disable</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * suspend_console - suspend the console subsystem</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This disables printk() while we go into suspend states</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#suspend_console\">suspend_console</a>(void)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#console_suspend_enabled\">console_suspend_enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"Suspending console(s) (use no_console_suspend to debug)\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acquire_console_sem\">acquire_console_sem</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#console_suspended\">console_suspended</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>(&amp;<a class=\"id\" href=\"#console_sem\">console_sem</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#resume_console\">resume_console</a>(void)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#console_suspend_enabled\">console_suspend_enabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down\">down</a>(&amp;<a class=\"id\" href=\"#console_sem\">console_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#console_suspended\">console_suspended</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#release_console_sem\">release_console_sem</a>();", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * console_cpu_notify - print deferred console messages after CPU hotplug</span>", 
"<span class=\"comment\"> * @self: notifier struct</span>", 
"<span class=\"comment\"> * @action: CPU hotplug event</span>", 
"<span class=\"comment\"> * @hcpu: unused</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If printk() is called from a CPU that is not online yet, the messages</span>", 
"<span class=\"comment\"> * will be spooled but will not show up on the console.  This function is</span>", 
"<span class=\"comment\"> * called when a new CPU comes online (or fails to come up), and ensures</span>", 
"<span class=\"comment\"> * that any such output gets printed.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#console_cpu_notify\">console_cpu_notify</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#self\">self</a>,", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#action\">action</a>, void *<a class=\"id\" href=\"#hcpu\">hcpu</a>)", 
"{", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#action\">action</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_ONLINE\">CPU_ONLINE</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_DEAD\">CPU_DEAD</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_DYING\">CPU_DYING</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_DOWN_FAILED\">CPU_DOWN_FAILED</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_UP_CANCELED\">CPU_UP_CANCELED</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acquire_console_sem\">acquire_console_sem</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#release_console_sem\">release_console_sem</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_OK\">NOTIFY_OK</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * acquire_console_sem - lock the console system for exclusive use.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Acquires a semaphore which guarantees that the caller has</span>", 
"<span class=\"comment\"> * exclusive access to the console system and the console_drivers list.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Can sleep, returns nothing.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#acquire_console_sem\">acquire_console_sem</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#in_interrupt\">in_interrupt</a>());", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down\">down</a>(&amp;<a class=\"id\" href=\"#console_sem\">console_sem</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#console_suspended\">console_suspended</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#console_locked\">console_locked</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#console_may_schedule\">console_may_schedule</a> = 1;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acquire_console_sem\">acquire_console_sem</a>);", 
"", 
"int <a class=\"id\" href=\"#try_acquire_console_sem\">try_acquire_console_sem</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#down_trylock\">down_trylock</a>(&amp;<a class=\"id\" href=\"#console_sem\">console_sem</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#console_suspended\">console_suspended</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up\">up</a>(&amp;<a class=\"id\" href=\"#console_sem\">console_sem</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#console_locked\">console_locked</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#console_may_schedule\">console_may_schedule</a> = 0;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#try_acquire_console_sem\">try_acquire_console_sem</a>);", 
"", 
"int <a class=\"id\" href=\"#is_console_locked\">is_console_locked</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#console_locked\">console_locked</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(int, <a class=\"id\" href=\"#printk_pending\">printk_pending</a>);", 
"", 
"void <a class=\"id\" href=\"#printk_tick\">printk_tick</a>(void)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#printk_pending\">printk_pending</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#printk_pending\">printk_pending</a>) = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_interruptible\">wake_up_interruptible</a>(&amp;<a class=\"id\" href=\"#log_wait\">log_wait</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"int <a class=\"id\" href=\"#printk_needs_cpu\">printk_needs_cpu</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#printk_pending\">printk_pending</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#wake_up_klogd\">wake_up_klogd</a>(void)", 
];
xr_frag_insert('l/24/da50884583706e3c652dfa020206b47aee0e6d.xr', __xr_tmp);
