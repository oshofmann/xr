var __xr_tmp = [
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Module Name: nsxfname - Public interfaces to the ACPI subsystem</span>", 
"<span class=\"comment\"> *                         ACPI Namespace oriented interfaces</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *****************************************************************************/</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copyright (C) 2000 - 2010, Intel Corp.</span>", 
"<span class=\"comment\"> * All rights reserved.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Redistribution and use in source and binary forms, with or without</span>", 
"<span class=\"comment\"> * modification, are permitted provided that the following conditions</span>", 
"<span class=\"comment\"> * are met:</span>", 
"<span class=\"comment\"> * 1. Redistributions of source code must retain the above copyright</span>", 
"<span class=\"comment\"> *    notice, this list of conditions, and the following disclaimer,</span>", 
"<span class=\"comment\"> *    without modification.</span>", 
"<span class=\"comment\"> * 2. Redistributions in binary form must reproduce at minimum a disclaimer</span>", 
"<span class=\"comment\"> *    substantially similar to the \"NO WARRANTY\" disclaimer below</span>", 
"<span class=\"comment\"> *    (\"Disclaimer\") and any redistribution must be conditioned upon</span>", 
"<span class=\"comment\"> *    including a substantially similar Disclaimer requirement for further</span>", 
"<span class=\"comment\"> *    binary redistribution.</span>", 
"<span class=\"comment\"> * 3. Neither the names of the above-listed copyright holders nor the names</span>", 
"<span class=\"comment\"> *    of any contributors may be used to endorse or promote products derived</span>", 
"<span class=\"comment\"> *    from this software without specific prior written permission.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Alternatively, this software may be distributed under the terms of the</span>", 
"<span class=\"comment\"> * GNU General Public License (\"GPL\") version 2 as published by the Free</span>", 
"<span class=\"comment\"> * Software Foundation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * NO WARRANTY</span>", 
"<span class=\"comment\"> * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span>", 
"<span class=\"comment\"> * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span>", 
"<span class=\"comment\"> * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR</span>", 
"<span class=\"comment\"> * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span>", 
"<span class=\"comment\"> * HOLDERS OR CONTRIBUTORS BE LIABLE FOR SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span>", 
"<span class=\"comment\"> * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS</span>", 
"<span class=\"comment\"> * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)</span>", 
"<span class=\"comment\"> * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,</span>", 
"<span class=\"comment\"> * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING</span>", 
"<span class=\"comment\"> * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE</span>", 
"<span class=\"comment\"> * POSSIBILITY OF SUCH DAMAGES.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#acpi\">acpi</a>/<a class=\"id\" href=\"#acpi\">acpi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"accommon.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acnamesp.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acparser.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"amlcode.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_COMPONENT\">_COMPONENT</a>          <a class=\"id\" href=\"#ACPI_NAMESPACE\">ACPI_NAMESPACE</a>", 
"<a class=\"id\" href=\"#ACPI_MODULE_NAME\">ACPI_MODULE_NAME</a>(\"nsxfname\")", 
"", 
"<span class=\"comment\">/* Local prototypes */</span>", 
"static char *<a class=\"id\" href=\"#acpi_ns_copy_device_id\">acpi_ns_copy_device_id</a>(struct <a class=\"id\" href=\"#acpica_device_id\">acpica_device_id</a> *<a class=\"id\" href=\"#dest\">dest</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#acpica_device_id\">acpica_device_id</a> *<a class=\"id\" href=\"#source\">source</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    char *<a class=\"id\" href=\"#string_area\">string_area</a>);", 
"", 
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_get_handle</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Parent          - Object to search under (search scope).</span>", 
"<span class=\"comment\"> *              Pathname        - Pointer to an asciiz string containing the</span>", 
"<span class=\"comment\"> *                                name</span>", 
"<span class=\"comment\"> *              ret_handle      - Where the return handle is returned</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: This routine will search for a caller specified name in the</span>", 
"<span class=\"comment\"> *              name space.  The caller can restrict the search region by</span>", 
"<span class=\"comment\"> *              specifying a non NULL parent.  The parent value is itself a</span>", 
"<span class=\"comment\"> *              namespace handle.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_get_handle\">acpi_get_handle</a>(<a class=\"id\" href=\"#acpi_handle\">acpi_handle</a> <a class=\"id\" href=\"#parent\">parent</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_string\">acpi_string</a> <a class=\"id\" href=\"#pathname\">pathname</a>, <a class=\"id\" href=\"#acpi_handle\">acpi_handle</a> * <a class=\"id\" href=\"#ret_handle\">ret_handle</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> *<a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> *<a class=\"id\" href=\"#prefix_node\">prefix_node</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FUNCTION_ENTRY\">ACPI_FUNCTION_ENTRY</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Parameter Validation */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret_handle\">ret_handle</a> || !<a class=\"id\" href=\"#pathname\">pathname</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Convert a parent handle to a prefix node */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#parent\">parent</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prefix_node\">prefix_node</a> = <a class=\"id\" href=\"#acpi_ns_validate_handle\">acpi_ns_validate_handle</a>(<a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#prefix_node\">prefix_node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Valid cases are:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 1) Fully qualified pathname</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 2) Parent + Relative pathname</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Error for &lt;null Parent + relative path&gt;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_ns_valid_root_prefix\">acpi_ns_valid_root_prefix</a>(<a class=\"id\" href=\"#pathname\">pathname</a>[0])) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Pathname is fully qualified (starts with '\\') */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Special case for root-only, since we can't search for it */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ACPI_STRCMP\">ACPI_STRCMP</a>(<a class=\"id\" href=\"#pathname\">pathname</a>, <a class=\"id\" href=\"#ACPI_NS_ROOT_PATH\">ACPI_NS_ROOT_PATH</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ret_handle\">ret_handle</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_CAST_PTR\">ACPI_CAST_PTR</a>(<a class=\"id\" href=\"#acpi_handle\">acpi_handle</a>, <a class=\"id\" href=\"#acpi_gbl_root_node\">acpi_gbl_root_node</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_OK\">AE_OK</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else if (!<a class=\"id\" href=\"#prefix_node\">prefix_node</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Relative path with null prefix is disallowed */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Find the Node and convert to a handle */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ns_get_node\">acpi_ns_get_node</a>(<a class=\"id\" href=\"#prefix_node\">prefix_node</a>, <a class=\"id\" href=\"#pathname\">pathname</a>, <a class=\"id\" href=\"#ACPI_NS_NO_UPSEARCH\">ACPI_NS_NO_UPSEARCH</a>, &amp;<a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ret_handle\">ret_handle</a> = <a class=\"id\" href=\"#ACPI_CAST_PTR\">ACPI_CAST_PTR</a>(<a class=\"id\" href=\"#acpi_handle\">acpi_handle</a>, <a class=\"id\" href=\"#node\">node</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#ACPI_EXPORT_SYMBOL\">ACPI_EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_get_handle\">acpi_get_handle</a>)", 
"", 
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_get_name</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Handle          - Handle to be converted to a pathname</span>", 
"<span class=\"comment\"> *              name_type       - Full pathname or single segment</span>", 
"<span class=\"comment\"> *              Buffer          - Buffer for returned path</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Pointer to a string containing the fully qualified Name.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: This routine returns the fully qualified name associated with</span>", 
"<span class=\"comment\"> *              the Handle parameter.  This and the acpi_pathname_to_handle are</span>", 
"<span class=\"comment\"> *              complementary functions.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_get_name\">acpi_get_name</a>(<a class=\"id\" href=\"#acpi_handle\">acpi_handle</a> <a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#name_type\">name_type</a>, struct <a class=\"id\" href=\"#acpi_buffer\">acpi_buffer</a> * <a class=\"id\" href=\"#buffer\">buffer</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Parameter validation */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#name_type\">name_type</a> &gt; <a class=\"id\" href=\"#ACPI_NAME_TYPE_MAX\">ACPI_NAME_TYPE_MAX</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ut_validate_buffer\">acpi_ut_validate_buffer</a>(<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#name_type\">name_type</a> == <a class=\"id\" href=\"#ACPI_FULL_PATHNAME\">ACPI_FULL_PATHNAME</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Get the full pathname (From the namespace root) */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ns_handle_to_pathname\">acpi_ns_handle_to_pathname</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#buffer\">buffer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Wants the single segment ACPI name.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Validate handle and convert to a namespace Node</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ut_acquire_mutex\">acpi_ut_acquire_mutex</a>(<a class=\"id\" href=\"#ACPI_MTX_NAMESPACE\">ACPI_MTX_NAMESPACE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#acpi_ns_validate_handle\">acpi_ns_validate_handle</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#node\">node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock_and_exit\">unlock_and_exit</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Validate/Allocate/Clear caller buffer */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ut_initialize_buffer\">acpi_ut_initialize_buffer</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#ACPI_PATH_SEGMENT_LENGTH\">ACPI_PATH_SEGMENT_LENGTH</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock_and_exit\">unlock_and_exit</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Just copy the ACPI name from the Node and zero terminate it */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_STRNCPY\">ACPI_STRNCPY</a>(<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#pointer\">pointer</a>, <a class=\"id\" href=\"#acpi_ut_get_node_name\">acpi_ut_get_node_name</a>(<a class=\"id\" href=\"#node\">node</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#ACPI_NAME_SIZE\">ACPI_NAME_SIZE</a>);", 
"<span class=\"ts\"/>((char *)<a class=\"id\" href=\"#buffer\">buffer</a>-><a class=\"id\" href=\"#pointer\">pointer</a>)[<a class=\"id\" href=\"#ACPI_NAME_SIZE\">ACPI_NAME_SIZE</a>] = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_OK\">AE_OK</a>;", 
"", 
"      <a class=\"id\" href=\"#unlock_and_exit\">unlock_and_exit</a>:", 
"", 
"<span class=\"ts\"/>(void)<a class=\"id\" href=\"#acpi_ut_release_mutex\">acpi_ut_release_mutex</a>(<a class=\"id\" href=\"#ACPI_MTX_NAMESPACE\">ACPI_MTX_NAMESPACE</a>);", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#ACPI_EXPORT_SYMBOL\">ACPI_EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_get_name\">acpi_get_name</a>)", 
"", 
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_ns_copy_device_id</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Dest                - Pointer to the destination DEVICE_ID</span>", 
"<span class=\"comment\"> *              Source              - Pointer to the source DEVICE_ID</span>", 
"<span class=\"comment\"> *              string_area         - Pointer to where to copy the dest string</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Pointer to the next string area</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Copy a single DEVICE_ID, including the string data.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"static char *<a class=\"id\" href=\"#acpi_ns_copy_device_id\">acpi_ns_copy_device_id</a>(struct <a class=\"id\" href=\"#acpica_device_id\">acpica_device_id</a> *<a class=\"id\" href=\"#dest\">dest</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#acpica_device_id\">acpica_device_id</a> *<a class=\"id\" href=\"#source\">source</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    char *<a class=\"id\" href=\"#string_area\">string_area</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Create the destination DEVICE_ID */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dest\">dest</a>-><a class=\"id\" href=\"#string\">string</a> = <a class=\"id\" href=\"#string_area\">string_area</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dest\">dest</a>-><a class=\"id\" href=\"#length\">length</a> = <a class=\"id\" href=\"#source\">source</a>-><a class=\"id\" href=\"#length\">length</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Copy actual string and return a pointer to the next string area */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_MEMCPY\">ACPI_MEMCPY</a>(<a class=\"id\" href=\"#string_area\">string_area</a>, <a class=\"id\" href=\"#source\">source</a>-><a class=\"id\" href=\"#string\">string</a>, <a class=\"id\" href=\"#source\">source</a>-><a class=\"id\" href=\"#length\">length</a>);", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#string_area\">string_area</a> + <a class=\"id\" href=\"#source\">source</a>-><a class=\"id\" href=\"#length\">length</a>);", 
"}", 
"", 
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_get_object_info</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Handle              - Object Handle</span>", 
"<span class=\"comment\"> *              return_buffer       - Where the info is returned</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Returns information about an object as gleaned from the</span>", 
"<span class=\"comment\"> *              namespace node and possibly by running several standard</span>", 
"<span class=\"comment\"> *              control methods (Such as in the case of a device.)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For Device and Processor objects, run the Device _HID, _UID, _CID, _STA,</span>", 
"<span class=\"comment\"> * _ADR, _sx_w, and _sx_d methods.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Note: Allocates the return buffer, must be freed by the caller.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a>", 
"<a class=\"id\" href=\"#acpi_get_object_info\">acpi_get_object_info</a>(<a class=\"id\" href=\"#acpi_handle\">acpi_handle</a> <a class=\"id\" href=\"#handle\">handle</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#acpi_device_info\">acpi_device_info</a> **<a class=\"id\" href=\"#return_buffer\">return_buffer</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_device_info\">acpi_device_info</a> *<a class=\"id\" href=\"#info\">info</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpica_device_id_list\">acpica_device_id_list</a> *<a class=\"id\" href=\"#cid_list\">cid_list</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpica_device_id\">acpica_device_id</a> *<a class=\"id\" href=\"#hid\">hid</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpica_device_id\">acpica_device_id</a> *<a class=\"id\" href=\"#uid\">uid</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#next_id_string\">next_id_string</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_object_type\">acpi_object_type</a> <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_name\">acpi_name</a> <a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#param_count\">param_count</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#valid\">valid</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#info_size\">info_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Parameter validation */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#handle\">handle</a> || !<a class=\"id\" href=\"#return_buffer\">return_buffer</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ut_acquire_mutex\">acpi_ut_acquire_mutex</a>(<a class=\"id\" href=\"#ACPI_MTX_NAMESPACE\">ACPI_MTX_NAMESPACE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup\">cleanup</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a> = <a class=\"id\" href=\"#acpi_ns_validate_handle\">acpi_ns_validate_handle</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#node\">node</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>(void)<a class=\"id\" href=\"#acpi_ut_release_mutex\">acpi_ut_release_mutex</a>(<a class=\"id\" href=\"#ACPI_MTX_NAMESPACE\">ACPI_MTX_NAMESPACE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Get the namespace node data while the namespace is locked */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info_size\">info_size</a> = sizeof(struct <a class=\"id\" href=\"#acpi_device_info\">acpi_device_info</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#name\">name</a>.<a class=\"id\" href=\"#integer\">integer</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#ACPI_TYPE_METHOD\">ACPI_TYPE_METHOD</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#param_count\">param_count</a> = <a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#object\">object</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#param_count\">param_count</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ut_release_mutex\">acpi_ut_release_mutex</a>(<a class=\"id\" href=\"#ACPI_MTX_NAMESPACE\">ACPI_MTX_NAMESPACE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#ACPI_TYPE_DEVICE\">ACPI_TYPE_DEVICE</a>) || (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#ACPI_TYPE_PROCESSOR\">ACPI_TYPE_PROCESSOR</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Get extra info for ACPI Device/Processor objects only:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Run the Device _HID, _UID, and _CID methods.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Note: none of these methods are required, so they may or may</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * not be present for this device. The Info-&gt;Valid bitfield is used</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to indicate which methods were found and run successfully.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Execute the Device._HID method */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ut_execute_HID\">acpi_ut_execute_HID</a>(<a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#hid\">hid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info_size\">info_size</a> += <a class=\"id\" href=\"#hid\">hid</a>-><a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#valid\">valid</a> |= <a class=\"id\" href=\"#ACPI_VALID_HID\">ACPI_VALID_HID</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Execute the Device._UID method */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ut_execute_UID\">acpi_ut_execute_UID</a>(<a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#uid\">uid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info_size\">info_size</a> += <a class=\"id\" href=\"#uid\">uid</a>-><a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#valid\">valid</a> |= <a class=\"id\" href=\"#ACPI_VALID_UID\">ACPI_VALID_UID</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Execute the Device._CID method */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ut_execute_CID\">acpi_ut_execute_CID</a>(<a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#cid_list\">cid_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Add size of CID strings and CID pointer array */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info_size\">info_size</a> +=", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#cid_list\">cid_list</a>-><a class=\"id\" href=\"#list_size\">list_size</a> -", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     sizeof(struct <a class=\"id\" href=\"#acpica_device_id_list\">acpica_device_id_list</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#valid\">valid</a> |= <a class=\"id\" href=\"#ACPI_VALID_CID\">ACPI_VALID_CID</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now that we have the variable-length data, we can allocate the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * return buffer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a> = <a class=\"id\" href=\"#ACPI_ALLOCATE_ZEROED\">ACPI_ALLOCATE_ZEROED</a>(<a class=\"id\" href=\"#info_size\">info_size</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#info\">info</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_NO_MEMORY\">AE_NO_MEMORY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup\">cleanup</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Get the fixed-length data */</span>", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#ACPI_TYPE_DEVICE\">ACPI_TYPE_DEVICE</a>) || (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#ACPI_TYPE_PROCESSOR\">ACPI_TYPE_PROCESSOR</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Get extra info for ACPI Device/Processor objects only:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Run the _STA, _ADR and, sx_w, and _sx_d methods.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Note: none of these methods are required, so they may or may</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * not be present for this device. The Info-&gt;Valid bitfield is used</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to indicate which methods were found and run successfully.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Execute the Device._STA method */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ut_execute_STA\">acpi_ut_execute_STA</a>(<a class=\"id\" href=\"#node\">node</a>, &amp;<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#current_status\">current_status</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#valid\">valid</a> |= <a class=\"id\" href=\"#ACPI_VALID_STA\">ACPI_VALID_STA</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Execute the Device._ADR method */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ut_evaluate_numeric_object\">acpi_ut_evaluate_numeric_object</a>(<a class=\"id\" href=\"#METHOD_NAME__ADR\">METHOD_NAME__ADR</a>, <a class=\"id\" href=\"#node\">node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> &amp;<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#address\">address</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#valid\">valid</a> |= <a class=\"id\" href=\"#ACPI_VALID_ADR\">ACPI_VALID_ADR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Execute the Device._sx_w methods */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ut_execute_power_methods\">acpi_ut_execute_power_methods</a>(<a class=\"id\" href=\"#node\">node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#acpi_gbl_lowest_dstate_names\">acpi_gbl_lowest_dstate_names</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#ACPI_NUM_sx_w_METHODS\">ACPI_NUM_sx_w_METHODS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#lowest_dstates\">lowest_dstates</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#valid\">valid</a> |= <a class=\"id\" href=\"#ACPI_VALID_SXWS\">ACPI_VALID_SXWS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Execute the Device._sx_d methods */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ut_execute_power_methods\">acpi_ut_execute_power_methods</a>(<a class=\"id\" href=\"#node\">node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#acpi_gbl_highest_dstate_names\">acpi_gbl_highest_dstate_names</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#ACPI_NUM_sx_d_METHODS\">ACPI_NUM_sx_d_METHODS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#highest_dstates\">highest_dstates</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_SUCCESS\">ACPI_SUCCESS</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#valid\">valid</a> |= <a class=\"id\" href=\"#ACPI_VALID_SXDS\">ACPI_VALID_SXDS</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Create a pointer to the string area of the return buffer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Point to the end of the base struct acpi_device_info structure.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next_id_string\">next_id_string</a> = <a class=\"id\" href=\"#ACPI_CAST_PTR\">ACPI_CAST_PTR</a>(char, <a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#compatible_id_list\">compatible_id_list</a>.<a class=\"id\" href=\"#ids\">ids</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cid_list\">cid_list</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Point past the CID DEVICE_ID array */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_id_string\">next_id_string</a> +=", 
"<span class=\"ts\"/><span class=\"ts\"/>    ((<a class=\"id\" href=\"#acpi_size\">acpi_size</a>) <a class=\"id\" href=\"#cid_list\">cid_list</a>-><a class=\"id\" href=\"#count\">count</a> *", 
"<span class=\"ts\"/><span class=\"ts\"/>     sizeof(struct <a class=\"id\" href=\"#acpica_device_id\">acpica_device_id</a>));", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Copy the HID, UID, and CIDs to the return buffer. The variable-length</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * strings are copied to the reserved area at the end of the buffer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * For HID and CID, check if the ID is a PCI Root Bridge.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hid\">hid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_id_string\">next_id_string</a> = <a class=\"id\" href=\"#acpi_ns_copy_device_id\">acpi_ns_copy_device_id</a>(&amp;<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#hardware_id\">hardware_id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hid\">hid</a>, <a class=\"id\" href=\"#next_id_string\">next_id_string</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_ut_is_pci_root_bridge\">acpi_ut_is_pci_root_bridge</a>(<a class=\"id\" href=\"#hid\">hid</a>-><a class=\"id\" href=\"#string\">string</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ACPI_PCI_ROOT_BRIDGE\">ACPI_PCI_ROOT_BRIDGE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#uid\">uid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_id_string\">next_id_string</a> = <a class=\"id\" href=\"#acpi_ns_copy_device_id\">acpi_ns_copy_device_id</a>(&amp;<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#unique_id\">unique_id</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uid\">uid</a>, <a class=\"id\" href=\"#next_id_string\">next_id_string</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cid_list\">cid_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#compatible_id_list\">compatible_id_list</a>.<a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#cid_list\">cid_list</a>-><a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#compatible_id_list\">compatible_id_list</a>.<a class=\"id\" href=\"#list_size\">list_size</a> = <a class=\"id\" href=\"#cid_list\">cid_list</a>-><a class=\"id\" href=\"#list_size\">list_size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Copy each CID */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#cid_list\">cid_list</a>-><a class=\"id\" href=\"#count\">count</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_id_string\">next_id_string</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ns_copy_device_id\">acpi_ns_copy_device_id</a>(&amp;<a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#compatible_id_list\">compatible_id_list</a>.", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#ids\">ids</a>[<a class=\"id\" href=\"#i\">i</a>], &amp;<a class=\"id\" href=\"#cid_list\">cid_list</a>-><a class=\"id\" href=\"#ids\">ids</a>[<a class=\"id\" href=\"#i\">i</a>],", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#next_id_string\">next_id_string</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#acpi_ut_is_pci_root_bridge\">acpi_ut_is_pci_root_bridge</a>(<a class=\"id\" href=\"#cid_list\">cid_list</a>-><a class=\"id\" href=\"#ids\">ids</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#string\">string</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ACPI_PCI_ROOT_BRIDGE\">ACPI_PCI_ROOT_BRIDGE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Copy the fixed-length data */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#info_size\">info_size</a> = <a class=\"id\" href=\"#info_size\">info_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#name\">name</a> = <a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#param_count\">param_count</a> = <a class=\"id\" href=\"#param_count\">param_count</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#info\">info</a>-><a class=\"id\" href=\"#valid\">valid</a> = <a class=\"id\" href=\"#valid\">valid</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#return_buffer\">return_buffer</a> = <a class=\"id\" href=\"#info\">info</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_OK\">AE_OK</a>;", 
"", 
"      <a class=\"id\" href=\"#cleanup\">cleanup</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#hid\">hid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FREE\">ACPI_FREE</a>(<a class=\"id\" href=\"#hid\">hid</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#uid\">uid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FREE\">ACPI_FREE</a>(<a class=\"id\" href=\"#uid\">uid</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cid_list\">cid_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FREE\">ACPI_FREE</a>(<a class=\"id\" href=\"#cid_list\">cid_list</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#status\">status</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#ACPI_EXPORT_SYMBOL\">ACPI_EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_get_object_info\">acpi_get_object_info</a>)", 
"", 
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * FUNCTION:    acpi_install_method</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * PARAMETERS:  Buffer         - An ACPI table containing one control method</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURN:      Status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * DESCRIPTION: Install a control method into the namespace. If the method</span>", 
"<span class=\"comment\"> *              name already exists in the namespace, it is overwritten. The</span>", 
"<span class=\"comment\"> *              input buffer must contain a valid DSDT or SSDT containing a</span>", 
"<span class=\"comment\"> *              single control method.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> ******************************************************************************/</span>", 
"<a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#acpi_install_method\">acpi_install_method</a>(<a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_table_header\">acpi_table_header</a> *<a class=\"id\" href=\"#table\">table</a> =", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#ACPI_CAST_PTR\">ACPI_CAST_PTR</a>(struct <a class=\"id\" href=\"#acpi_table_header\">acpi_table_header</a>, <a class=\"id\" href=\"#buffer\">buffer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#aml_buffer\">aml_buffer</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> *<a class=\"id\" href=\"#aml_start\">aml_start</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#path\">path</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_namespace_node\">acpi_namespace_node</a> *<a class=\"id\" href=\"#node\">node</a>;", 
"<span class=\"ts\"/>union <a class=\"id\" href=\"#acpi_operand_object\">acpi_operand_object</a> *<a class=\"id\" href=\"#method_obj\">method_obj</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_parse_state\">acpi_parse_state</a> <a class=\"id\" href=\"#parser_state\">parser_state</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#aml_length\">aml_length</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#opcode\">opcode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#method_flags\">method_flags</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_status\">acpi_status</a> <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Parameter validation */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer\">buffer</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Table must be a DSDT or SSDT */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ACPI_COMPARE_NAME\">ACPI_COMPARE_NAME</a>(<a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#signature\">signature</a>, <a class=\"id\" href=\"#ACPI_SIG_DSDT\">ACPI_SIG_DSDT</a>) &&", 
"<span class=\"ts\"/>    !<a class=\"id\" href=\"#ACPI_COMPARE_NAME\">ACPI_COMPARE_NAME</a>(<a class=\"id\" href=\"#table\">table</a>-><a class=\"id\" href=\"#signature\">signature</a>, <a class=\"id\" href=\"#ACPI_SIG_SSDT\">ACPI_SIG_SSDT</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#AE_BAD_HEADER\">AE_BAD_HEADER</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* First AML opcode in the table must be a control method */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parser_state\">parser_state</a>.<a class=\"id\" href=\"#aml\">aml</a> = <a class=\"id\" href=\"#buffer\">buffer</a> + sizeof(struct <a class=\"id\" href=\"#acpi_table_header\">acpi_table_header</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#opcode\">opcode</a> = <a class=\"id\" href=\"#acpi_ps_peek_opcode\">acpi_ps_peek_opcode</a>(&amp;<a class=\"id\" href=\"#parser_state\">parser_state</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#opcode\">opcode</a> != <a class=\"id\" href=\"#AML_METHOD_OP\">AML_METHOD_OP</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#AE_BAD_PARAMETER\">AE_BAD_PARAMETER</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Extract method information from the raw AML */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parser_state\">parser_state</a>.<a class=\"id\" href=\"#aml\">aml</a> += <a class=\"id\" href=\"#acpi_ps_get_opcode_size\">acpi_ps_get_opcode_size</a>(<a class=\"id\" href=\"#opcode\">opcode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parser_state\">parser_state</a>.<a class=\"id\" href=\"#pkg_end\">pkg_end</a> = <a class=\"id\" href=\"#acpi_ps_get_next_package_end\">acpi_ps_get_next_package_end</a>(&amp;<a class=\"id\" href=\"#parser_state\">parser_state</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#path\">path</a> = <a class=\"id\" href=\"#acpi_ps_get_next_namestring\">acpi_ps_get_next_namestring</a>(&amp;<a class=\"id\" href=\"#parser_state\">parser_state</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#method_flags\">method_flags</a> = *<a class=\"id\" href=\"#parser_state\">parser_state</a>.<a class=\"id\" href=\"#aml\">aml</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#aml_start\">aml_start</a> = <a class=\"id\" href=\"#parser_state\">parser_state</a>.<a class=\"id\" href=\"#aml\">aml</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#aml_length\">aml_length</a> = <a class=\"id\" href=\"#ACPI_PTR_DIFF\">ACPI_PTR_DIFF</a>(<a class=\"id\" href=\"#parser_state\">parser_state</a>.<a class=\"id\" href=\"#pkg_end\">pkg_end</a>, <a class=\"id\" href=\"#aml_start\">aml_start</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Allocate resources up-front. We don't want to have to delete a new</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * node from the namespace if we cannot allocate memory.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#aml_buffer\">aml_buffer</a> = <a class=\"id\" href=\"#ACPI_ALLOCATE\">ACPI_ALLOCATE</a>(<a class=\"id\" href=\"#aml_length\">aml_length</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#aml_buffer\">aml_buffer</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#AE_NO_MEMORY\">AE_NO_MEMORY</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#method_obj\">method_obj</a> = <a class=\"id\" href=\"#acpi_ut_create_internal_object\">acpi_ut_create_internal_object</a>(<a class=\"id\" href=\"#ACPI_TYPE_METHOD\">ACPI_TYPE_METHOD</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#method_obj\">method_obj</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FREE\">ACPI_FREE</a>(<a class=\"id\" href=\"#aml_buffer\">aml_buffer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#AE_NO_MEMORY\">AE_NO_MEMORY</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Lock namespace for acpi_ns_lookup, we may be creating a new node */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ut_acquire_mutex\">acpi_ut_acquire_mutex</a>(<a class=\"id\" href=\"#ACPI_MTX_NAMESPACE\">ACPI_MTX_NAMESPACE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_exit\">error_exit</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The lookup either returns an existing node or creates a new one */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> =", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#acpi_ns_lookup\">acpi_ns_lookup</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#path\">path</a>, <a class=\"id\" href=\"#ACPI_TYPE_METHOD\">ACPI_TYPE_METHOD</a>, <a class=\"id\" href=\"#ACPI_IMODE_LOAD_PASS1\">ACPI_IMODE_LOAD_PASS1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#ACPI_NS_DONT_OPEN_SCOPE\">ACPI_NS_DONT_OPEN_SCOPE</a> | <a class=\"id\" href=\"#ACPI_NS_ERROR_IF_FOUND\">ACPI_NS_ERROR_IF_FOUND</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#NULL\">NULL</a>, &amp;<a class=\"id\" href=\"#node\">node</a>);", 
"", 
"<span class=\"ts\"/>(void)<a class=\"id\" href=\"#acpi_ut_release_mutex\">acpi_ut_release_mutex</a>(<a class=\"id\" href=\"#ACPI_MTX_NAMESPACE\">ACPI_MTX_NAMESPACE</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ACPI_FAILURE\">ACPI_FAILURE</a>(<a class=\"id\" href=\"#status\">status</a>)) {<span class=\"ts\"/><span class=\"comment\">/* ns_lookup */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#status\">status</a> != <a class=\"id\" href=\"#AE_ALREADY_EXISTS\">AE_ALREADY_EXISTS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_exit\">error_exit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Node existed previously, make sure it is a method node */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#ACPI_TYPE_METHOD\">ACPI_TYPE_METHOD</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#AE_TYPE\">AE_TYPE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#error_exit\">error_exit</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Copy the method AML to the local buffer */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_MEMCPY\">ACPI_MEMCPY</a>(<a class=\"id\" href=\"#aml_buffer\">aml_buffer</a>, <a class=\"id\" href=\"#aml_start\">aml_start</a>, <a class=\"id\" href=\"#aml_length\">aml_length</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Initialize the method object with the new method's information */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#method_obj\">method_obj</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#aml_start\">aml_start</a> = <a class=\"id\" href=\"#aml_buffer\">aml_buffer</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#method_obj\">method_obj</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#aml_length\">aml_length</a> = <a class=\"id\" href=\"#aml_length\">aml_length</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#method_obj\">method_obj</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#param_count\">param_count</a> = (<a class=\"id\" href=\"#u8\">u8</a>)", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#method_flags\">method_flags</a> &amp; <a class=\"id\" href=\"#AML_METHOD_ARG_COUNT\">AML_METHOD_ARG_COUNT</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#method_obj\">method_obj</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#method_flags\">method_flags</a> = (<a class=\"id\" href=\"#u8\">u8</a>)", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#method_flags\">method_flags</a> &amp; ~<a class=\"id\" href=\"#AML_METHOD_ARG_COUNT\">AML_METHOD_ARG_COUNT</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#method_flags\">method_flags</a> &amp; <a class=\"id\" href=\"#AML_METHOD_SERIALIZED\">AML_METHOD_SERIALIZED</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#method_obj\">method_obj</a>-><a class=\"id\" href=\"#method\">method</a>.<a class=\"id\" href=\"#sync_level\">sync_level</a> = (<a class=\"id\" href=\"#u8\">u8</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>    ((<a class=\"id\" href=\"#method_flags\">method_flags</a> &amp; <a class=\"id\" href=\"#AML_METHOD_SYNC_LEVEL\">AML_METHOD_SYNC_LEVEL</a>) >> 4);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Now that it is complete, we can attach the new method object to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the method Node (detaches/deletes any existing object)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = <a class=\"id\" href=\"#acpi_ns_attach_object\">acpi_ns_attach_object</a>(<a class=\"id\" href=\"#node\">node</a>, <a class=\"id\" href=\"#method_obj\">method_obj</a>, <a class=\"id\" href=\"#ACPI_TYPE_METHOD\">ACPI_TYPE_METHOD</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Flag indicates AML buffer is dynamic, must be deleted later.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Must be set only after attach above.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#ANOBJ_ALLOCATED_BUFFER\">ANOBJ_ALLOCATED_BUFFER</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Remove local reference to the method object */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_ut_remove_reference\">acpi_ut_remove_reference</a>(<a class=\"id\" href=\"#method_obj\">method_obj</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#status\">status</a>;", 
"", 
"<a class=\"id\" href=\"#error_exit\">error_exit</a>:", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FREE\">ACPI_FREE</a>(<a class=\"id\" href=\"#aml_buffer\">aml_buffer</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ACPI_FREE\">ACPI_FREE</a>(<a class=\"id\" href=\"#method_obj\">method_obj</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#status\">status</a>;", 
"}", 
"<a class=\"id\" href=\"#ACPI_EXPORT_SYMBOL\">ACPI_EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#acpi_install_method\">acpi_install_method</a>)", 
];
xr_frag_insert('l/25/24a47e0e2984ed87793d8add609105c9861124.xr', __xr_tmp);
