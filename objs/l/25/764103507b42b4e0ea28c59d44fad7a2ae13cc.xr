var __xr_tmp = [
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_bufflen\">scsi_bufflen</a>(<a class=\"id\" href=\"#scmd\">scmd</a>) <= <a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#sector_size\">sector_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#sector_size\">sector_size</a> &lt; 512) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* only legitimate sector_size here is 256 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_lba\">start_lba</a> <<= 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#end_lba\">end_lba</a> <<= 1;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* be careful ... don't want any overflows */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#factor\">factor</a> = <a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#sector_size\">sector_size</a> / 512;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#start_lba\">start_lba</a>, <a class=\"id\" href=\"#factor\">factor</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#end_lba\">end_lba</a>, <a class=\"id\" href=\"#factor\">factor</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The bad lba was reported incorrectly, we have no idea where</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the error is.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bad_lba\">bad_lba</a> &lt; <a class=\"id\" href=\"#start_lba\">start_lba</a>  || <a class=\"id\" href=\"#bad_lba\">bad_lba</a> >= <a class=\"id\" href=\"#end_lba\">end_lba</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* This computation should always be done in terms of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the resolution of the device's medium.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#bad_lba\">bad_lba</a> - <a class=\"id\" href=\"#start_lba\">start_lba</a>) * <a class=\"id\" href=\"#scmd\">scmd</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#sector_size\">sector_size</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sd_done - bottom half handler: called when the lower level</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>driver has completed (successfully or otherwise) a scsi command.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@SCpnt: mid-level's per command structure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Note: potentially run from within an ISR. Must not block.</span>", 
"<span class=\"comment\"> **/</span>", 
"static int <a class=\"id\" href=\"#sd_done\">sd_done</a>(struct <a class=\"id\" href=\"#scsi_cmnd\">scsi_cmnd</a> *<a class=\"id\" href=\"#SCpnt\">SCpnt</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#SCpnt\">SCpnt</a>-><a class=\"id\" href=\"#result\">result</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#good_bytes\">good_bytes</a> = <a class=\"id\" href=\"#result\">result</a> ? 0 : <a class=\"id\" href=\"#scsi_bufflen\">scsi_bufflen</a>(<a class=\"id\" href=\"#SCpnt\">SCpnt</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_sense_hdr\">scsi_sense_hdr</a> <a class=\"id\" href=\"#sshdr\">sshdr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_disk\">scsi_disk</a> *<a class=\"id\" href=\"#sdkp\">sdkp</a> = <a class=\"id\" href=\"#scsi_disk\">scsi_disk</a>(<a class=\"id\" href=\"#SCpnt\">SCpnt</a>-><a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#rq_disk\">rq_disk</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#sense_valid\">sense_valid</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#sense_deferred\">sense_deferred</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#SCpnt\">SCpnt</a>-><a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#cmd_flags\">cmd_flags</a> &amp; <a class=\"id\" href=\"#REQ_DISCARD\">REQ_DISCARD</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#result\">result</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_set_resid\">scsi_set_resid</a>(<a class=\"id\" href=\"#SCpnt\">SCpnt</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#good_bytes\">good_bytes</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sense_valid\">sense_valid</a> = <a class=\"id\" href=\"#scsi_command_normalize_sense\">scsi_command_normalize_sense</a>(<a class=\"id\" href=\"#SCpnt\">SCpnt</a>, &amp;<a class=\"id\" href=\"#sshdr\">sshdr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sense_valid\">sense_valid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sense_deferred\">sense_deferred</a> = <a class=\"id\" href=\"#scsi_sense_is_deferred\">scsi_sense_is_deferred</a>(&amp;<a class=\"id\" href=\"#sshdr\">sshdr</a>);", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SCSI_LOGGING\">CONFIG_SCSI_LOGGING</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_HLCOMPLETE\">SCSI_LOG_HLCOMPLETE</a>(1, <a class=\"id\" href=\"#scsi_print_result\">scsi_print_result</a>(<a class=\"id\" href=\"#SCpnt\">SCpnt</a>));", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sense_valid\">sense_valid</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_HLCOMPLETE\">SCSI_LOG_HLCOMPLETE</a>(1, <a class=\"id\" href=\"#scmd_printk\">scmd_printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>, <a class=\"id\" href=\"#SCpnt\">SCpnt</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"sd_done: sb[respc,sk,asc,\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   \"ascq]=%x,%x,%x,%x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#response_code\">response_code</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#sense_key\">sense_key</a>, <a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#asc\">asc</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#ascq\">ascq</a>));", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#driver_byte\">driver_byte</a>(<a class=\"id\" href=\"#result\">result</a>) != <a class=\"id\" href=\"#DRIVER_SENSE\">DRIVER_SENSE</a> &&", 
"<span class=\"ts\"/>    (!<a class=\"id\" href=\"#sense_valid\">sense_valid</a> || <a class=\"id\" href=\"#sense_deferred\">sense_deferred</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#sense_key\">sense_key</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#HARDWARE_ERROR\">HARDWARE_ERROR</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#MEDIUM_ERROR\">MEDIUM_ERROR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#good_bytes\">good_bytes</a> = <a class=\"id\" href=\"#sd_completed_bytes\">sd_completed_bytes</a>(<a class=\"id\" href=\"#SCpnt\">SCpnt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#RECOVERED_ERROR\">RECOVERED_ERROR</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#good_bytes\">good_bytes</a> = <a class=\"id\" href=\"#scsi_bufflen\">scsi_bufflen</a>(<a class=\"id\" href=\"#SCpnt\">SCpnt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#NO_SENSE\">NO_SENSE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* This indicates a false check condition, so ignore it.  An</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * unknown amount of data was transferred so treat it as an</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * error.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_print_sense\">scsi_print_sense</a>(\"sd\", <a class=\"id\" href=\"#SCpnt\">SCpnt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SCpnt\">SCpnt</a>-><a class=\"id\" href=\"#result\">result</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#SCpnt\">SCpnt</a>-><a class=\"id\" href=\"#sense_buffer\">sense_buffer</a>, 0, <a class=\"id\" href=\"#SCSI_SENSE_BUFFERSIZE\">SCSI_SENSE_BUFFERSIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ABORTED_COMMAND\">ABORTED_COMMAND</a>: <span class=\"comment\">/* DIF: Target detected corruption */</span>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#ILLEGAL_REQUEST\">ILLEGAL_REQUEST</a>: <span class=\"comment\">/* DIX: Host detected corruption */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#asc\">asc</a> == 0x10)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#good_bytes\">good_bytes</a> = <a class=\"id\" href=\"#sd_completed_bytes\">sd_completed_bytes</a>(<a class=\"id\" href=\"#SCpnt\">SCpnt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rq_data_dir\">rq_data_dir</a>(<a class=\"id\" href=\"#SCpnt\">SCpnt</a>-><a class=\"id\" href=\"#request\">request</a>) == <a class=\"id\" href=\"#READ\">READ</a> && <a class=\"id\" href=\"#scsi_prot_sg_count\">scsi_prot_sg_count</a>(<a class=\"id\" href=\"#SCpnt\">SCpnt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_dif_complete\">sd_dif_complete</a>(<a class=\"id\" href=\"#SCpnt\">SCpnt</a>, <a class=\"id\" href=\"#good_bytes\">good_bytes</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_host_dif_capable\">scsi_host_dif_capable</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#host\">host</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#protection_type\">protection_type</a>)", 
"<span class=\"ts\"/>    == <a class=\"id\" href=\"#SD_DIF_TYPE2_PROTECTION\">SD_DIF_TYPE2_PROTECTION</a> && <a class=\"id\" href=\"#SCpnt\">SCpnt</a>-><a class=\"id\" href=\"#cmnd\">cmnd</a> != <a class=\"id\" href=\"#SCpnt\">SCpnt</a>-><a class=\"id\" href=\"#request\">request</a>-><a class=\"id\" href=\"#cmd\">cmd</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We have to print a failed command here as the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * extended CDB gets freed before scsi_io_completion()</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * is called.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_print_command\">scsi_print_command</a>(<a class=\"id\" href=\"#SCpnt\">SCpnt</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mempool_free\">mempool_free</a>(<a class=\"id\" href=\"#SCpnt\">SCpnt</a>-><a class=\"id\" href=\"#cmnd\">cmnd</a>, <a class=\"id\" href=\"#sd_cdb_pool\">sd_cdb_pool</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SCpnt\">SCpnt</a>-><a class=\"id\" href=\"#cmnd\">cmnd</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SCpnt\">SCpnt</a>-><a class=\"id\" href=\"#cmd_len\">cmd_len</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#good_bytes\">good_bytes</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#media_not_present\">media_not_present</a>(struct <a class=\"id\" href=\"#scsi_disk\">scsi_disk</a> *<a class=\"id\" href=\"#sdkp\">sdkp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#scsi_sense_hdr\">scsi_sense_hdr</a> *<a class=\"id\" href=\"#sshdr\">sshdr</a>)", 
"{", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#scsi_sense_valid\">scsi_sense_valid</a>(<a class=\"id\" href=\"#sshdr\">sshdr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"comment\">/* not invoked for commands that could return deferred errors */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sshdr\">sshdr</a>-><a class=\"id\" href=\"#sense_key\">sense_key</a> != <a class=\"id\" href=\"#NOT_READY\">NOT_READY</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#sshdr\">sshdr</a>-><a class=\"id\" href=\"#sense_key\">sense_key</a> != <a class=\"id\" href=\"#UNIT_ATTENTION\">UNIT_ATTENTION</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sshdr\">sshdr</a>-><a class=\"id\" href=\"#asc\">asc</a> != 0x3A) <span class=\"comment\">/* medium not present */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_media_not_present\">set_media_not_present</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>);", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * spinup disk - called only in sd_revalidate_disk()</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#sd_spinup_disk\">sd_spinup_disk</a>(struct <a class=\"id\" href=\"#scsi_disk\">scsi_disk</a> *<a class=\"id\" href=\"#sdkp\">sdkp</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#cmd\">cmd</a>[10];", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#spintime_expire\">spintime_expire</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retries\">retries</a>, <a class=\"id\" href=\"#spintime\">spintime</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#the_result\">the_result</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_sense_hdr\">scsi_sense_hdr</a> <a class=\"id\" href=\"#sshdr\">sshdr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#sense_valid\">sense_valid</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spintime\">spintime</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Spin up drives, as required.  Only do this at boot time */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* Spinup needs to be done for module loads too. */</span>", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retries\">retries</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>[0] = <a class=\"id\" href=\"#TEST_UNIT_READY\">TEST_UNIT_READY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>((void *) &amp;<a class=\"id\" href=\"#cmd\">cmd</a>[1], 0, 9);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#the_result\">the_result</a> = <a class=\"id\" href=\"#scsi_execute_req\">scsi_execute_req</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#device\">device</a>, <a class=\"id\" href=\"#cmd\">cmd</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#DMA_NONE\">DMA_NONE</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      &amp;<a class=\"id\" href=\"#sshdr\">sshdr</a>, <a class=\"id\" href=\"#SD_TIMEOUT\">SD_TIMEOUT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#SD_MAX_RETRIES\">SD_MAX_RETRIES</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * If the drive has indicated to us that it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * doesn't have any media in it, don't bother</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * with any more polling.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#media_not_present\">media_not_present</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>, &amp;<a class=\"id\" href=\"#sshdr\">sshdr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#the_result\">the_result</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sense_valid\">sense_valid</a> = <a class=\"id\" href=\"#scsi_sense_valid\">scsi_sense_valid</a>(&amp;<a class=\"id\" href=\"#sshdr\">sshdr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retries\">retries</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>} while (<a class=\"id\" href=\"#retries\">retries</a> &lt; 3 && ", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> (!<a class=\"id\" href=\"#scsi_status_is_good\">scsi_status_is_good</a>(<a class=\"id\" href=\"#the_result\">the_result</a>) ||", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  ((<a class=\"id\" href=\"#driver_byte\">driver_byte</a>(<a class=\"id\" href=\"#the_result\">the_result</a>) &amp; <a class=\"id\" href=\"#DRIVER_SENSE\">DRIVER_SENSE</a>) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#sense_valid\">sense_valid</a> && <a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#sense_key\">sense_key</a> == <a class=\"id\" href=\"#UNIT_ATTENTION\">UNIT_ATTENTION</a>)));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#driver_byte\">driver_byte</a>(<a class=\"id\" href=\"#the_result\">the_result</a>) &amp; <a class=\"id\" href=\"#DRIVER_SENSE\">DRIVER_SENSE</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* no sense, TUR either succeeded or failed</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * with a status error */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if(!<a class=\"id\" href=\"#spintime\">spintime</a> && !<a class=\"id\" href=\"#scsi_status_is_good\">scsi_status_is_good</a>(<a class=\"id\" href=\"#the_result\">the_result</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>, \"Unit Not Ready\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_print_result\">sd_print_result</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>, <a class=\"id\" href=\"#the_result\">the_result</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The device does not want the automatic start to be issued.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#no_start_on_add\">no_start_on_add</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sense_valid\">sense_valid</a> && <a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#sense_key\">sense_key</a> == <a class=\"id\" href=\"#NOT_READY\">NOT_READY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#asc\">asc</a> == 4 && <a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#ascq\">ascq</a> == 3)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"comment\">/* manual intervention required */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#asc\">asc</a> == 4 && <a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#ascq\">ascq</a> == 0xb)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"comment\">/* standby */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#asc\">asc</a> == 4 && <a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#ascq\">ascq</a> == 0xc)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;<span class=\"ts\"/><span class=\"comment\">/* unavailable */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Issue command to spin up drive when not ready</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#spintime\">spintime</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>, \"Spinning up disk...\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>[0] = <a class=\"id\" href=\"#START_STOP\">START_STOP</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>[1] = 1;<span class=\"ts\"/><span class=\"comment\">/* Return immediately */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>((void *) &amp;<a class=\"id\" href=\"#cmd\">cmd</a>[2], 0, 8);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>[4] = 1;<span class=\"ts\"/><span class=\"comment\">/* Start spin cycle */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#start_stop_pwr_cond\">start_stop_pwr_cond</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>[4] |= 1 << 4;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#scsi_execute_req\">scsi_execute_req</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#device\">device</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#DMA_NONE\">DMA_NONE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#NULL\">NULL</a>, 0, &amp;<a class=\"id\" href=\"#sshdr\">sshdr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#SD_TIMEOUT\">SD_TIMEOUT</a>, <a class=\"id\" href=\"#SD_MAX_RETRIES\">SD_MAX_RETRIES</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spintime_expire\">spintime_expire</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> + 100 * <a class=\"id\" href=\"#HZ\">HZ</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spintime\">spintime</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Wait 1 second for next try */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>(1000);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\".\");", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Wait for USB flash devices with slow firmware.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Yes, this sense key/ASC combination shouldn't</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * occur here.  It's characteristic of these devices.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>} else if (<a class=\"id\" href=\"#sense_valid\">sense_valid</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#sense_key\">sense_key</a> == <a class=\"id\" href=\"#UNIT_ATTENTION\">UNIT_ATTENTION</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#asc\">asc</a> == 0x28) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#spintime\">spintime</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spintime_expire\">spintime_expire</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> + 5 * <a class=\"id\" href=\"#HZ\">HZ</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spintime\">spintime</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Wait 1 second for next try */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#msleep\">msleep</a>(1000);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* we don't understand the sense code, so it's</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * probably pointless to loop */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if(!<a class=\"id\" href=\"#spintime\">spintime</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>, \"Unit Not Ready\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_print_sense_hdr\">sd_print_sense_hdr</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>, &amp;<a class=\"id\" href=\"#sshdr\">sshdr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#spintime\">spintime</a> && <a class=\"id\" href=\"#time_before_eq\">time_before_eq</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#spintime_expire\">spintime_expire</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#spintime\">spintime</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_status_is_good\">scsi_status_is_good</a>(<a class=\"id\" href=\"#the_result\">the_result</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"ready\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(\"not responding...\\n\");", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Determine whether disk supports Data Integrity Field.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#sd_read_protection_type\">sd_read_protection_type</a>(struct <a class=\"id\" href=\"#scsi_disk\">scsi_disk</a> *<a class=\"id\" href=\"#sdkp\">sdkp</a>, unsigned char *<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdp\">sdp</a> = <a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#device\">device</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u8\">u8</a> <a class=\"id\" href=\"#type\">type</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_device_protection\">scsi_device_protection</a>(<a class=\"id\" href=\"#sdp\">sdp</a>) == 0 || (<a class=\"id\" href=\"#buffer\">buffer</a>[12] &amp; 1) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = ((<a class=\"id\" href=\"#buffer\">buffer</a>[12] >> 1) &amp; 7) + 1; <span class=\"comment\">/* P_TYPE 0 = Type 1 */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#protection_type\">protection_type</a> || !<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#first_scan\">first_scan</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#protection_type\">protection_type</a> = <a class=\"id\" href=\"#type\">type</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> &gt; <a class=\"id\" href=\"#SD_DIF_TYPE3_PROTECTION\">SD_DIF_TYPE3_PROTECTION</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>, \"formatted with unsupported \"<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"protection type %u. Disabling disk!\\n\", <a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#capacity\">capacity</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_host_dif_capable\">scsi_host_dif_capable</a>(<a class=\"id\" href=\"#sdp\">sdp</a>-><a class=\"id\" href=\"#host\">host</a>, <a class=\"id\" href=\"#type\">type</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"Enabling DIF Type %u protection\\n\", <a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"Disabling DIF Type %u protection\\n\", <a class=\"id\" href=\"#type\">type</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#read_capacity_error\">read_capacity_error</a>(struct <a class=\"id\" href=\"#scsi_disk\">scsi_disk</a> *<a class=\"id\" href=\"#sdkp\">sdkp</a>, struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdp\">sdp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_sense_hdr\">scsi_sense_hdr</a> *<a class=\"id\" href=\"#sshdr\">sshdr</a>, int <a class=\"id\" href=\"#sense_valid\">sense_valid</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#the_result\">the_result</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd_print_result\">sd_print_result</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>, <a class=\"id\" href=\"#the_result\">the_result</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#driver_byte\">driver_byte</a>(<a class=\"id\" href=\"#the_result\">the_result</a>) &amp; <a class=\"id\" href=\"#DRIVER_SENSE\">DRIVER_SENSE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_print_sense_hdr\">sd_print_sense_hdr</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>, <a class=\"id\" href=\"#sshdr\">sshdr</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>, \"Sense not available.\\n\");", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Set dirty bit for removable devices if not ready -</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * sometimes drives will not report this properly.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdp\">sdp</a>-><a class=\"id\" href=\"#removable\">removable</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#sense_valid\">sense_valid</a> && <a class=\"id\" href=\"#sshdr\">sshdr</a>-><a class=\"id\" href=\"#sense_key\">sense_key</a> == <a class=\"id\" href=\"#NOT_READY\">NOT_READY</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdp\">sdp</a>-><a class=\"id\" href=\"#changed\">changed</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We used to set media_present to 0 here to indicate no media</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in the drive, but some drives fail read capacity even with</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * media present, so we can't do that.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#capacity\">capacity</a> = 0; <span class=\"comment\">/* unknown mapped to zero - as usual */</span>", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#RC16_LEN\">RC16_LEN</a> 32", 
"#if <a class=\"id\" href=\"#RC16_LEN\">RC16_LEN</a> &gt; <a class=\"id\" href=\"#SD_BUF_SIZE\">SD_BUF_SIZE</a>", 
"#<a class=\"id\" href=\"#error\">error</a> <a class=\"id\" href=\"#RC16_LEN\">RC16_LEN</a> <a class=\"id\" href=\"#must\">must</a> <a class=\"id\" href=\"#not\">not</a> <a class=\"id\" href=\"#be\">be</a> <a class=\"id\" href=\"#more\">more</a> <a class=\"id\" href=\"#than\">than</a> <a class=\"id\" href=\"#SD_BUF_SIZE\">SD_BUF_SIZE</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#READ_CAPACITY_RETRIES_ON_RESET\">READ_CAPACITY_RETRIES_ON_RESET</a><span class=\"ts\"/>10", 
"", 
"static int <a class=\"id\" href=\"#read_capacity_16\">read_capacity_16</a>(struct <a class=\"id\" href=\"#scsi_disk\">scsi_disk</a> *<a class=\"id\" href=\"#sdkp\">sdkp</a>, struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdp\">sdp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#cmd\">cmd</a>[16];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_sense_hdr\">scsi_sense_hdr</a> <a class=\"id\" href=\"#sshdr\">sshdr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#sense_valid\">sense_valid</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#the_result\">the_result</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retries\">retries</a> = 3, <a class=\"id\" href=\"#reset_retries\">reset_retries</a> = <a class=\"id\" href=\"#READ_CAPACITY_RETRIES_ON_RESET\">READ_CAPACITY_RETRIES_ON_RESET</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#alignment\">alignment</a>;", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#lba\">lba</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#sector_size\">sector_size</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#cmd\">cmd</a>, 0, 16);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>[0] = <a class=\"id\" href=\"#SERVICE_ACTION_IN\">SERVICE_ACTION_IN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>[1] = <a class=\"id\" href=\"#SAI_READ_CAPACITY_16\">SAI_READ_CAPACITY_16</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>[13] = <a class=\"id\" href=\"#RC16_LEN\">RC16_LEN</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, 0, <a class=\"id\" href=\"#RC16_LEN\">RC16_LEN</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#the_result\">the_result</a> = <a class=\"id\" href=\"#scsi_execute_req\">scsi_execute_req</a>(<a class=\"id\" href=\"#sdp\">sdp</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#DMA_FROM_DEVICE\">DMA_FROM_DEVICE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#RC16_LEN\">RC16_LEN</a>, &amp;<a class=\"id\" href=\"#sshdr\">sshdr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SD_TIMEOUT\">SD_TIMEOUT</a>, <a class=\"id\" href=\"#SD_MAX_RETRIES\">SD_MAX_RETRIES</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#media_not_present\">media_not_present</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>, &amp;<a class=\"id\" href=\"#sshdr\">sshdr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#the_result\">the_result</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sense_valid\">sense_valid</a> = <a class=\"id\" href=\"#scsi_sense_valid\">scsi_sense_valid</a>(&amp;<a class=\"id\" href=\"#sshdr\">sshdr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sense_valid\">sense_valid</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#sense_key\">sense_key</a> == <a class=\"id\" href=\"#ILLEGAL_REQUEST\">ILLEGAL_REQUEST</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#asc\">asc</a> == 0x20 || <a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#asc\">asc</a> == 0x24) &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#ascq\">ascq</a> == 0x00)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Invalid Command Operation Code or</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * Invalid Field in CDB, just retry</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * silently with RC10 */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sense_valid\">sense_valid</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#sense_key\">sense_key</a> == <a class=\"id\" href=\"#UNIT_ATTENTION\">UNIT_ATTENTION</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#asc\">asc</a> == 0x29 && <a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#ascq\">ascq</a> == 0x00)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Device reset might occur several times,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * give it one more chance */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (--<a class=\"id\" href=\"#reset_retries\">reset_retries</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retries\">retries</a>--;", 
"", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#the_result\">the_result</a> && <a class=\"id\" href=\"#retries\">retries</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#the_result\">the_result</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>, \"READ CAPACITY(16) failed\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_capacity_error\">read_capacity_error</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>, <a class=\"id\" href=\"#sdp\">sdp</a>, &amp;<a class=\"id\" href=\"#sshdr\">sshdr</a>, <a class=\"id\" href=\"#sense_valid\">sense_valid</a>, <a class=\"id\" href=\"#the_result\">the_result</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_size\">sector_size</a> = <a class=\"id\" href=\"#get_unaligned_be32\">get_unaligned_be32</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>[8]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lba\">lba</a> = <a class=\"id\" href=\"#get_unaligned_be64\">get_unaligned_be64</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>[0]);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd_read_protection_type\">sd_read_protection_type</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>, <a class=\"id\" href=\"#buffer\">buffer</a>);", 
"", 
"<span class=\"ts\"/>if ((sizeof(<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#capacity\">capacity</a>) == 4) && (<a class=\"id\" href=\"#lba\">lba</a> >= 0xffffffffULL)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>, \"Too big for this kernel. Use a \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"kernel compiled with support for large block \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"devices.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#capacity\">capacity</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EOVERFLOW\">EOVERFLOW</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Logical blocks per physical block exponent */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#hw_sector_size\">hw_sector_size</a> = (1 << (<a class=\"id\" href=\"#buffer\">buffer</a>[13] &amp; 0xf)) * <a class=\"id\" href=\"#sector_size\">sector_size</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Lowest aligned logical block */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#alignment\">alignment</a> = ((<a class=\"id\" href=\"#buffer\">buffer</a>[14] &amp; 0x3f) << 8 | <a class=\"id\" href=\"#buffer\">buffer</a>[15]) * <a class=\"id\" href=\"#sector_size\">sector_size</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_alignment_offset\">blk_queue_alignment_offset</a>(<a class=\"id\" href=\"#sdp\">sdp</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>, <a class=\"id\" href=\"#alignment\">alignment</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#alignment\">alignment</a> && <a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#first_scan\">first_scan</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"physical block alignment offset: %u\\n\", <a class=\"id\" href=\"#alignment\">alignment</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer\">buffer</a>[14] &amp; 0x80) { <span class=\"comment\">/* TPE */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#sdp\">sdp</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#thin_provisioning\">thin_provisioning</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#limits\">limits</a>.<a class=\"id\" href=\"#discard_granularity\">discard_granularity</a> = <a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#hw_sector_size\">hw_sector_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#limits\">limits</a>.<a class=\"id\" href=\"#max_discard_sectors\">max_discard_sectors</a> = 0xffffffff;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer\">buffer</a>[14] &amp; 0x40) <span class=\"comment\">/* TPRZ */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#limits\">limits</a>.<a class=\"id\" href=\"#discard_zeroes_data\">discard_zeroes_data</a> = 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#queue_flag_set_unlocked\">queue_flag_set_unlocked</a>(<a class=\"id\" href=\"#QUEUE_FLAG_DISCARD\">QUEUE_FLAG_DISCARD</a>, <a class=\"id\" href=\"#q\">q</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#capacity\">capacity</a> = <a class=\"id\" href=\"#lba\">lba</a> + 1;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sector_size\">sector_size</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#read_capacity_10\">read_capacity_10</a>(struct <a class=\"id\" href=\"#scsi_disk\">scsi_disk</a> *<a class=\"id\" href=\"#sdkp\">sdkp</a>, struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdp\">sdp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#cmd\">cmd</a>[16];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_sense_hdr\">scsi_sense_hdr</a> <a class=\"id\" href=\"#sshdr\">sshdr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#sense_valid\">sense_valid</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#the_result\">the_result</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retries\">retries</a> = 3, <a class=\"id\" href=\"#reset_retries\">reset_retries</a> = <a class=\"id\" href=\"#READ_CAPACITY_RETRIES_ON_RESET\">READ_CAPACITY_RETRIES_ON_RESET</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#lba\">lba</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#sector_size\">sector_size</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>[0] = <a class=\"id\" href=\"#READ_CAPACITY\">READ_CAPACITY</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#cmd\">cmd</a>[1], 0, 9);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, 0, 8);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#the_result\">the_result</a> = <a class=\"id\" href=\"#scsi_execute_req\">scsi_execute_req</a>(<a class=\"id\" href=\"#sdp\">sdp</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#DMA_FROM_DEVICE\">DMA_FROM_DEVICE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a>, 8, &amp;<a class=\"id\" href=\"#sshdr\">sshdr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SD_TIMEOUT\">SD_TIMEOUT</a>, <a class=\"id\" href=\"#SD_MAX_RETRIES\">SD_MAX_RETRIES</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#media_not_present\">media_not_present</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>, &amp;<a class=\"id\" href=\"#sshdr\">sshdr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#the_result\">the_result</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sense_valid\">sense_valid</a> = <a class=\"id\" href=\"#scsi_sense_valid\">scsi_sense_valid</a>(&amp;<a class=\"id\" href=\"#sshdr\">sshdr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sense_valid\">sense_valid</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#sense_key\">sense_key</a> == <a class=\"id\" href=\"#UNIT_ATTENTION\">UNIT_ATTENTION</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#asc\">asc</a> == 0x29 && <a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#ascq\">ascq</a> == 0x00)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Device reset might occur several times,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * give it one more chance */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (--<a class=\"id\" href=\"#reset_retries\">reset_retries</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retries\">retries</a>--;", 
"", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#the_result\">the_result</a> && <a class=\"id\" href=\"#retries\">retries</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#the_result\">the_result</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>, \"READ CAPACITY failed\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read_capacity_error\">read_capacity_error</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>, <a class=\"id\" href=\"#sdp\">sdp</a>, &amp;<a class=\"id\" href=\"#sshdr\">sshdr</a>, <a class=\"id\" href=\"#sense_valid\">sense_valid</a>, <a class=\"id\" href=\"#the_result\">the_result</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_size\">sector_size</a> = <a class=\"id\" href=\"#get_unaligned_be32\">get_unaligned_be32</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>[4]);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lba\">lba</a> = <a class=\"id\" href=\"#get_unaligned_be32\">get_unaligned_be32</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>[0]);", 
"", 
"<span class=\"ts\"/>if ((sizeof(<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#capacity\">capacity</a>) == 4) && (<a class=\"id\" href=\"#lba\">lba</a> == 0xffffffff)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>, \"Too big for this kernel. Use a \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"kernel compiled with support for large block \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"devices.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#capacity\">capacity</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EOVERFLOW\">EOVERFLOW</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#capacity\">capacity</a> = <a class=\"id\" href=\"#lba\">lba</a> + 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#hw_sector_size\">hw_sector_size</a> = <a class=\"id\" href=\"#sector_size\">sector_size</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sector_size\">sector_size</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#sd_try_rc16_first\">sd_try_rc16_first</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdp\">sdp</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdp\">sdp</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#max_cmd_len\">max_cmd_len</a> &lt; 16)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdp\">sdp</a>-><a class=\"id\" href=\"#scsi_level\">scsi_level</a> &gt; <a class=\"id\" href=\"#SCSI_SPC_2\">SCSI_SPC_2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_device_protection\">scsi_device_protection</a>(<a class=\"id\" href=\"#sdp\">sdp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * read disk capacity</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#sd_read_capacity\">sd_read_capacity</a>(struct <a class=\"id\" href=\"#scsi_disk\">scsi_disk</a> *<a class=\"id\" href=\"#sdkp\">sdkp</a>, unsigned char *<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#sector_size\">sector_size</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdp\">sdp</a> = <a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#device\">device</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sector_t\">sector_t</a> <a class=\"id\" href=\"#old_capacity\">old_capacity</a> = <a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#capacity\">capacity</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sd_try_rc16_first\">sd_try_rc16_first</a>(<a class=\"id\" href=\"#sdp\">sdp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sector_size\">sector_size</a> = <a class=\"id\" href=\"#read_capacity_16\">read_capacity_16</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>, <a class=\"id\" href=\"#sdp\">sdp</a>, <a class=\"id\" href=\"#buffer\">buffer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sector_size\">sector_size</a> == -<a class=\"id\" href=\"#EOVERFLOW\">EOVERFLOW</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#got_data\">got_data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sector_size\">sector_size</a> == -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sector_size\">sector_size</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sector_size\">sector_size</a> = <a class=\"id\" href=\"#read_capacity_10\">read_capacity_10</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>, <a class=\"id\" href=\"#sdp\">sdp</a>, <a class=\"id\" href=\"#buffer\">buffer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sector_size\">sector_size</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sector_size\">sector_size</a> = <a class=\"id\" href=\"#read_capacity_10\">read_capacity_10</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>, <a class=\"id\" href=\"#sdp\">sdp</a>, <a class=\"id\" href=\"#buffer\">buffer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sector_size\">sector_size</a> == -<a class=\"id\" href=\"#EOVERFLOW\">EOVERFLOW</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#got_data\">got_data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sector_size\">sector_size</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((sizeof(<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#capacity\">capacity</a>) &gt; 4) &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    (<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#capacity\">capacity</a> &gt; 0xffffffffULL)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#old_sector_size\">old_sector_size</a> = <a class=\"id\" href=\"#sector_size\">sector_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>, \"Very big device. \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Trying to use READ CAPACITY(16).\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sector_size\">sector_size</a> = <a class=\"id\" href=\"#read_capacity_16\">read_capacity_16</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>, <a class=\"id\" href=\"#sdp\">sdp</a>, <a class=\"id\" href=\"#buffer\">buffer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sector_size\">sector_size</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Using 0xffffffff as device size\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#capacity\">capacity</a> = 1 + (<a class=\"id\" href=\"#sector_t\">sector_t</a>) 0xffffffff;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sector_size\">sector_size</a> = <a class=\"id\" href=\"#old_sector_size\">old_sector_size</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#got_data\">got_data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Some devices are known to return the total number of blocks,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not the highest block number.  Some devices have versions</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * which do this and others which do not.  Some devices we might</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * suspect of doing this but we don't know for certain.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we know the reported capacity is wrong, decrement it.  If</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we can only guess, then assume the number of blocks is even</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (usually true but not always) and err on the side of lowering</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the capacity.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdp\">sdp</a>-><a class=\"id\" href=\"#fix_capacity\">fix_capacity</a> ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#sdp\">sdp</a>-><a class=\"id\" href=\"#guess_capacity\">guess_capacity</a> && (<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#capacity\">capacity</a> &amp; 0x01))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>, \"Adjusting the sector count \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"from its reported value: %llu\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(unsigned long long) <a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#capacity\">capacity</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>--<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#capacity\">capacity</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#got_data\">got_data</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sector_size\">sector_size</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sector_size\">sector_size</a> = 512;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>, \"Sector size 0 reported, \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"assuming 512.\\n\");", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sector_size\">sector_size</a> != 512 &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#sector_size\">sector_size</a> != 1024 &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#sector_size\">sector_size</a> != 2048 &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#sector_size\">sector_size</a> != 4096 &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#sector_size\">sector_size</a> != 256) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>, \"Unsupported sector size %d.\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#sector_size\">sector_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * The user might want to re-format the drive with</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * a supported sectorsize.  Once this happens, it</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * would be relatively trivial to set the thing up.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * For this reason, we leave the thing in the table.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#capacity\">capacity</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * set a bogus sector size so the normal read/write</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * logic in the block layer will eventually refuse any</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * request on this device without tripping over power</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * of two sector size assumptions</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sector_size\">sector_size</a> = 512;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_logical_block_size\">blk_queue_logical_block_size</a>(<a class=\"id\" href=\"#sdp\">sdp</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>, <a class=\"id\" href=\"#sector_size\">sector_size</a>);", 
"", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#cap_str_2\">cap_str_2</a>[10], <a class=\"id\" href=\"#cap_str_10\">cap_str_10</a>[10];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#sz\">sz</a> = (<a class=\"id\" href=\"#u64\">u64</a>)<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#capacity\">capacity</a> << <a class=\"id\" href=\"#ilog2\">ilog2</a>(<a class=\"id\" href=\"#sector_size\">sector_size</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#string_get_size\">string_get_size</a>(<a class=\"id\" href=\"#sz\">sz</a>, <a class=\"id\" href=\"#STRING_UNITS_2\">STRING_UNITS_2</a>, <a class=\"id\" href=\"#cap_str_2\">cap_str_2</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(<a class=\"id\" href=\"#cap_str_2\">cap_str_2</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#string_get_size\">string_get_size</a>(<a class=\"id\" href=\"#sz\">sz</a>, <a class=\"id\" href=\"#STRING_UNITS_10\">STRING_UNITS_10</a>, <a class=\"id\" href=\"#cap_str_10\">cap_str_10</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>sizeof(<a class=\"id\" href=\"#cap_str_10\">cap_str_10</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#first_scan\">first_scan</a> || <a class=\"id\" href=\"#old_capacity\">old_capacity</a> != <a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#capacity\">capacity</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"%llu %d-byte logical blocks: (%s/%s)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  (unsigned long long)<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#capacity\">capacity</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#sector_size\">sector_size</a>, <a class=\"id\" href=\"#cap_str_10\">cap_str_10</a>, <a class=\"id\" href=\"#cap_str_2\">cap_str_2</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#hw_sector_size\">hw_sector_size</a> != <a class=\"id\" href=\"#sector_size\">sector_size</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"%u-byte physical blocks\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#hw_sector_size\">hw_sector_size</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Rescale capacity to 512-byte units */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sector_size\">sector_size</a> == 4096)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#capacity\">capacity</a> <<= 3;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#sector_size\">sector_size</a> == 2048)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#capacity\">capacity</a> <<= 2;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#sector_size\">sector_size</a> == 1024)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#capacity\">capacity</a> <<= 1;", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#sector_size\">sector_size</a> == 256)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#capacity\">capacity</a> >>= 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_physical_block_size\">blk_queue_physical_block_size</a>(<a class=\"id\" href=\"#sdp\">sdp</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#hw_sector_size\">hw_sector_size</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#sector_size\">sector_size</a> = <a class=\"id\" href=\"#sector_size\">sector_size</a>;", 
"}", 
"", 
"<span class=\"comment\">/* called with buffer of length 512 */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#sd_do_mode_sense\">sd_do_mode_sense</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdp\">sdp</a>, int <a class=\"id\" href=\"#dbd\">dbd</a>, int <a class=\"id\" href=\"#modepage\">modepage</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> unsigned char *<a class=\"id\" href=\"#buffer\">buffer</a>, int <a class=\"id\" href=\"#len\">len</a>, struct <a class=\"id\" href=\"#scsi_mode_data\">scsi_mode_data</a> *<a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#scsi_sense_hdr\">scsi_sense_hdr</a> *<a class=\"id\" href=\"#sshdr\">sshdr</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#scsi_mode_sense\">scsi_mode_sense</a>(<a class=\"id\" href=\"#sdp\">sdp</a>, <a class=\"id\" href=\"#dbd\">dbd</a>, <a class=\"id\" href=\"#modepage\">modepage</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#SD_TIMEOUT\">SD_TIMEOUT</a>, <a class=\"id\" href=\"#SD_MAX_RETRIES\">SD_MAX_RETRIES</a>, <a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#sshdr\">sshdr</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * read write protect setting, if possible - called only in sd_revalidate_disk()</span>", 
"<span class=\"comment\"> * called with buffer of length SD_BUF_SIZE</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#sd_read_write_protect_flag\">sd_read_write_protect_flag</a>(struct <a class=\"id\" href=\"#scsi_disk\">scsi_disk</a> *<a class=\"id\" href=\"#sdkp\">sdkp</a>, unsigned char *<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdp\">sdp</a> = <a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#device\">device</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_mode_data\">scsi_mode_data</a> <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#old_wp\">old_wp</a> = <a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#write_prot\">write_prot</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_disk_ro\">set_disk_ro</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#disk\">disk</a>, 0);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdp\">sdp</a>-><a class=\"id\" href=\"#skip_ms_page_3f\">skip_ms_page_3f</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>, \"Assuming Write Enabled\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdp\">sdp</a>-><a class=\"id\" href=\"#use_192_bytes_for_3f\">use_192_bytes_for_3f</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#sd_do_mode_sense\">sd_do_mode_sense</a>(<a class=\"id\" href=\"#sdp\">sdp</a>, 0, 0x3F, <a class=\"id\" href=\"#buffer\">buffer</a>, 192, &amp;<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * First attempt: ask for all pages (0x3F), but only 4 bytes.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We have to start carefully: some devices hang if we ask</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * for more than is available.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#sd_do_mode_sense\">sd_do_mode_sense</a>(<a class=\"id\" href=\"#sdp\">sdp</a>, 0, 0x3F, <a class=\"id\" href=\"#buffer\">buffer</a>, 4, &amp;<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Second attempt: ask for page 0 When only page 0 is</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * implemented, a request for page 3F may return Sense Key</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * 5: Illegal Request, Sense Code 24: Invalid field in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * CDB.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#scsi_status_is_good\">scsi_status_is_good</a>(<a class=\"id\" href=\"#res\">res</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#sd_do_mode_sense\">sd_do_mode_sense</a>(<a class=\"id\" href=\"#sdp\">sdp</a>, 0, 0, <a class=\"id\" href=\"#buffer\">buffer</a>, 4, &amp;<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Third attempt: ask 255 bytes, as we did earlier.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#scsi_status_is_good\">scsi_status_is_good</a>(<a class=\"id\" href=\"#res\">res</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#sd_do_mode_sense\">sd_do_mode_sense</a>(<a class=\"id\" href=\"#sdp\">sdp</a>, 0, 0x3F, <a class=\"id\" href=\"#buffer\">buffer</a>, 255,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#scsi_status_is_good\">scsi_status_is_good</a>(<a class=\"id\" href=\"#res\">res</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"Test WP failed, assume Write Enabled\\n\");", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#write_prot\">write_prot</a> = ((<a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#device_specific\">device_specific</a> &amp; 0x80) != 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_disk_ro\">set_disk_ro</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#disk\">disk</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#write_prot\">write_prot</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#first_scan\">first_scan</a> || <a class=\"id\" href=\"#old_wp\">old_wp</a> != <a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#write_prot\">write_prot</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>, \"Write Protect is %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#write_prot\">write_prot</a> ? \"on\" : \"off\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_DEBUG\">KERN_DEBUG</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"Mode Sense: %02x %02x %02x %02x\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#buffer\">buffer</a>[0], <a class=\"id\" href=\"#buffer\">buffer</a>[1], <a class=\"id\" href=\"#buffer\">buffer</a>[2], <a class=\"id\" href=\"#buffer\">buffer</a>[3]);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * sd_read_cache_type - called only from sd_revalidate_disk()</span>", 
"<span class=\"comment\"> * called with buffer of length SD_BUF_SIZE</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#sd_read_cache_type\">sd_read_cache_type</a>(struct <a class=\"id\" href=\"#scsi_disk\">scsi_disk</a> *<a class=\"id\" href=\"#sdkp\">sdkp</a>, unsigned char *<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a> = 0, <a class=\"id\" href=\"#res\">res</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdp\">sdp</a> = <a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#device\">device</a>;", 
"", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#dbd\">dbd</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#modepage\">modepage</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_mode_data\">scsi_mode_data</a> <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_sense_hdr\">scsi_sense_hdr</a> <a class=\"id\" href=\"#sshdr\">sshdr</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#old_wce\">old_wce</a> = <a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#WCE\">WCE</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#old_rcd\">old_rcd</a> = <a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#RCD\">RCD</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#old_dpofua\">old_dpofua</a> = <a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#DPOFUA\">DPOFUA</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdp\">sdp</a>-><a class=\"id\" href=\"#skip_ms_page_8\">skip_ms_page_8</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#defaults\">defaults</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdp\">sdp</a>-><a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#TYPE_RBC\">TYPE_RBC</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#modepage\">modepage</a> = 6;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dbd\">dbd</a> = 8;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#modepage\">modepage</a> = 8;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dbd\">dbd</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* cautiously ask */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#sd_do_mode_sense\">sd_do_mode_sense</a>(<a class=\"id\" href=\"#sdp\">sdp</a>, <a class=\"id\" href=\"#dbd\">dbd</a>, <a class=\"id\" href=\"#modepage\">modepage</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, 4, &amp;<a class=\"id\" href=\"#data\">data</a>, &amp;<a class=\"id\" href=\"#sshdr\">sshdr</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#scsi_status_is_good\">scsi_status_is_good</a>(<a class=\"id\" href=\"#res\">res</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_sense\">bad_sense</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#header_length\">header_length</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#modepage\">modepage</a> = 6;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>, \"Missing header in MODE_SENSE response\\n\");", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* that went OK, now ask for the proper length */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#length\">length</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We're only interested in the first three bytes, actually.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * But the data cache page is defined for the first 20.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &lt; 3)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_sense\">bad_sense</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &gt; 20)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = 20;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Take headers and block descriptors into account */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> += <a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#header_length\">header_length</a> + <a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#block_descriptor_length\">block_descriptor_length</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#SD_BUF_SIZE\">SD_BUF_SIZE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#bad_sense\">bad_sense</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Get the data */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#sd_do_mode_sense\">sd_do_mode_sense</a>(<a class=\"id\" href=\"#sdp\">sdp</a>, <a class=\"id\" href=\"#dbd\">dbd</a>, <a class=\"id\" href=\"#modepage\">modepage</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#len\">len</a>, &amp;<a class=\"id\" href=\"#data\">data</a>, &amp;<a class=\"id\" href=\"#sshdr\">sshdr</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_status_is_good\">scsi_status_is_good</a>(<a class=\"id\" href=\"#res\">res</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#header_length\">header_length</a> + <a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#block_descriptor_length\">block_descriptor_length</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#offset\">offset</a> >= <a class=\"id\" href=\"#SD_BUF_SIZE\">SD_BUF_SIZE</a> - 2) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>, \"Malformed MODE SENSE response\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#defaults\">defaults</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#buffer\">buffer</a>[<a class=\"id\" href=\"#offset\">offset</a>] &amp; 0x3f) != <a class=\"id\" href=\"#modepage\">modepage</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>, \"Got wrong page\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#defaults\">defaults</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#modepage\">modepage</a> == 8) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#WCE\">WCE</a> = ((<a class=\"id\" href=\"#buffer\">buffer</a>[<a class=\"id\" href=\"#offset\">offset</a> + 2] &amp; 0x04) != 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#RCD\">RCD</a> = ((<a class=\"id\" href=\"#buffer\">buffer</a>[<a class=\"id\" href=\"#offset\">offset</a> + 2] &amp; 0x01) != 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#WCE\">WCE</a> = ((<a class=\"id\" href=\"#buffer\">buffer</a>[<a class=\"id\" href=\"#offset\">offset</a> + 2] &amp; 0x01) == 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#RCD\">RCD</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#DPOFUA\">DPOFUA</a> = (<a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#device_specific\">device_specific</a> &amp; 0x10) != 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#DPOFUA\">DPOFUA</a> && !<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#use_10_for_rw\">use_10_for_rw</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"Uses READ/WRITE(6), disabling FUA\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#DPOFUA\">DPOFUA</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#first_scan\">first_scan</a> || <a class=\"id\" href=\"#old_wce\">old_wce</a> != <a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#WCE\">WCE</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#old_rcd\">old_rcd</a> != <a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#RCD\">RCD</a> || <a class=\"id\" href=\"#old_dpofua\">old_dpofua</a> != <a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#DPOFUA\">DPOFUA</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"Write cache: %s, read cache: %s, %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#WCE\">WCE</a> ? \"enabled\" : \"disabled\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#RCD\">RCD</a> ? \"disabled\" : \"enabled\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#DPOFUA\">DPOFUA</a> ? \"supports DPO and FUA\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  : \"doesn't support DPO or FUA\");", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#bad_sense\">bad_sense</a>:", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_sense_valid\">scsi_sense_valid</a>(&amp;<a class=\"id\" href=\"#sshdr\">sshdr</a>) &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#sense_key\">sense_key</a> == <a class=\"id\" href=\"#ILLEGAL_REQUEST\">ILLEGAL_REQUEST</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#asc\">asc</a> == 0x24 && <a class=\"id\" href=\"#sshdr\">sshdr</a>.<a class=\"id\" href=\"#ascq\">ascq</a> == 0x0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Invalid field in CDB */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>, \"Cache data unavailable\\n\");", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>, \"Asking for cache data failed\\n\");", 
"", 
"<a class=\"id\" href=\"#defaults\">defaults</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>, \"Assuming drive cache: write through\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#WCE\">WCE</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#RCD\">RCD</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#DPOFUA\">DPOFUA</a> = 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The ATO bit indicates whether the DIF application tag is available</span>", 
"<span class=\"comment\"> * for use by the operating system.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#sd_read_app_tag_own\">sd_read_app_tag_own</a>(struct <a class=\"id\" href=\"#scsi_disk\">scsi_disk</a> *<a class=\"id\" href=\"#sdkp\">sdkp</a>, unsigned char *<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a>, <a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdp\">sdp</a> = <a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#device\">device</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_mode_data\">scsi_mode_data</a> <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_sense_hdr\">scsi_sense_hdr</a> <a class=\"id\" href=\"#sshdr\">sshdr</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdp\">sdp</a>-><a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#TYPE_DISK\">TYPE_DISK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#protection_type\">protection_type</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#scsi_mode_sense\">scsi_mode_sense</a>(<a class=\"id\" href=\"#sdp\">sdp</a>, 1, 0x0a, <a class=\"id\" href=\"#buffer\">buffer</a>, 36, <a class=\"id\" href=\"#SD_TIMEOUT\">SD_TIMEOUT</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#SD_MAX_RETRIES\">SD_MAX_RETRIES</a>, &amp;<a class=\"id\" href=\"#data\">data</a>, &amp;<a class=\"id\" href=\"#sshdr\">sshdr</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#scsi_status_is_good\">scsi_status_is_good</a>(<a class=\"id\" href=\"#res\">res</a>) || !<a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#header_length\">header_length</a> ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#length\">length</a> &lt; 6) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"getting Control mode page failed, assume no ATO\\n\");", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#scsi_sense_valid\">scsi_sense_valid</a>(&amp;<a class=\"id\" href=\"#sshdr\">sshdr</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_print_sense_hdr\">sd_print_sense_hdr</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>, &amp;<a class=\"id\" href=\"#sshdr\">sshdr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#offset\">offset</a> = <a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#header_length\">header_length</a> + <a class=\"id\" href=\"#data\">data</a>.<a class=\"id\" href=\"#block_descriptor_length\">block_descriptor_length</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#buffer\">buffer</a>[<a class=\"id\" href=\"#offset\">offset</a>] &amp; 0x3f) != 0x0a) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>, \"ATO Got wrong page\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#buffer\">buffer</a>[<a class=\"id\" href=\"#offset\">offset</a> + 5] &amp; 0x80) == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#ATO\">ATO</a> = 1;", 
"", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sd_read_block_limits - Query disk device for preferred I/O sizes.</span>", 
"<span class=\"comment\"> * @disk: disk to query</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#sd_read_block_limits\">sd_read_block_limits</a>(struct <a class=\"id\" href=\"#scsi_disk\">scsi_disk</a> *<a class=\"id\" href=\"#sdkp\">sdkp</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#request_queue\">request_queue</a> *<a class=\"id\" href=\"#q\">q</a> = <a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#queue\">queue</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#sector_sz\">sector_sz</a> = <a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#sector_size\">sector_size</a>;", 
"<span class=\"ts\"/>const int <a class=\"id\" href=\"#vpd_len\">vpd_len</a> = 64;", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#vpd_len\">vpd_len</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer\">buffer</a> ||", 
"<span class=\"ts\"/>    <span class=\"comment\">/* Block Limits VPD */</span>", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#scsi_get_vpd_page\">scsi_get_vpd_page</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#device\">device</a>, 0xb0, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#vpd_len\">vpd_len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_io_min\">blk_queue_io_min</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#queue\">queue</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#get_unaligned_be16\">get_unaligned_be16</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>[6]) * <a class=\"id\" href=\"#sector_sz\">sector_sz</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_io_opt\">blk_queue_io_opt</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#queue\">queue</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#get_unaligned_be32\">get_unaligned_be32</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>[12]) * <a class=\"id\" href=\"#sector_sz\">sector_sz</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Thin provisioning enabled and page length indicates TP support */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#thin_provisioning\">thin_provisioning</a> && <a class=\"id\" href=\"#buffer\">buffer</a>[3] == 0x3c) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#lba_count\">lba_count</a>, <a class=\"id\" href=\"#desc_count\">desc_count</a>, <a class=\"id\" href=\"#granularity\">granularity</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lba_count\">lba_count</a> = <a class=\"id\" href=\"#get_unaligned_be32\">get_unaligned_be32</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>[20]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#desc_count\">desc_count</a> = <a class=\"id\" href=\"#get_unaligned_be32\">get_unaligned_be32</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>[24]);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#lba_count\">lba_count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#limits\">limits</a>.<a class=\"id\" href=\"#max_discard_sectors\">max_discard_sectors</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lba_count\">lba_count</a> * <a class=\"id\" href=\"#sector_sz\">sector_sz</a> >> 9;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#desc_count\">desc_count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#unmap\">unmap</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#granularity\">granularity</a> = <a class=\"id\" href=\"#get_unaligned_be32\">get_unaligned_be32</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>[28]);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#granularity\">granularity</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#limits\">limits</a>.<a class=\"id\" href=\"#discard_granularity\">discard_granularity</a> = <a class=\"id\" href=\"#granularity\">granularity</a> * <a class=\"id\" href=\"#sector_sz\">sector_sz</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer\">buffer</a>[32] &amp; 0x80)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#q\">q</a>-><a class=\"id\" href=\"#limits\">limits</a>.<a class=\"id\" href=\"#discard_alignment\">discard_alignment</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_unaligned_be32\">get_unaligned_be32</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>[32]) &amp; ~(1 << 31);", 
"<span class=\"ts\"/>}", 
"", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * sd_read_block_characteristics - Query block dev. characteristics</span>", 
"<span class=\"comment\"> * @disk: disk to query</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#sd_read_block_characteristics\">sd_read_block_characteristics</a>(struct <a class=\"id\" href=\"#scsi_disk\">scsi_disk</a> *<a class=\"id\" href=\"#sdkp\">sdkp</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u16\">u16</a> <a class=\"id\" href=\"#rot\">rot</a>;", 
"<span class=\"ts\"/>const int <a class=\"id\" href=\"#vpd_len\">vpd_len</a> = 64;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#vpd_len\">vpd_len</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer\">buffer</a> ||", 
"<span class=\"ts\"/>    <span class=\"comment\">/* Block Device Characteristics VPD */</span>", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#scsi_get_vpd_page\">scsi_get_vpd_page</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#device\">device</a>, 0xb1, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#vpd_len\">vpd_len</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rot\">rot</a> = <a class=\"id\" href=\"#get_unaligned_be16\">get_unaligned_be16</a>(&amp;<a class=\"id\" href=\"#buffer\">buffer</a>[4]);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#rot\">rot</a> == 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#queue_flag_set_unlocked\">queue_flag_set_unlocked</a>(<a class=\"id\" href=\"#QUEUE_FLAG_NONROT\">QUEUE_FLAG_NONROT</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#queue\">queue</a>);", 
"", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#sd_try_extended_inquiry\">sd_try_extended_inquiry</a>(struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdp\">sdp</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Although VPD inquiries can go to SCSI-2 type devices,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * some USB ones crash on receiving them, and the pages</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we currently ask for are for SPC-3 and beyond</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdp\">sdp</a>-><a class=\"id\" href=\"#scsi_level\">scsi_level</a> &gt; <a class=\"id\" href=\"#SCSI_SPC_2\">SCSI_SPC_2</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sd_revalidate_disk - called the first time a new disk is seen,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>performs disk spin up, read_capacity, etc.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@disk: struct gendisk we care about</span>", 
"<span class=\"comment\"> **/</span>", 
"static int <a class=\"id\" href=\"#sd_revalidate_disk\">sd_revalidate_disk</a>(struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_disk\">scsi_disk</a> *<a class=\"id\" href=\"#sdkp\">sdkp</a> = <a class=\"id\" href=\"#scsi_disk\">scsi_disk</a>(<a class=\"id\" href=\"#disk\">disk</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdp\">sdp</a> = <a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#device\">device</a>;", 
"<span class=\"ts\"/>unsigned char *<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#ordered\">ordered</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_HLQUEUE\">SCSI_LOG_HLQUEUE</a>(3, <a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"sd_revalidate_disk\\n\"));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the device is offline, don't try and read capacity or any</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of the other niceties.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#scsi_device_online\">scsi_device_online</a>(<a class=\"id\" href=\"#sdp\">sdp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#SD_BUF_SIZE\">SD_BUF_SIZE</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#buffer\">buffer</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>, \"sd_revalidate_disk: Memory \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"allocation failure.\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd_spinup_disk\">sd_spinup_disk</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Without media there is no reason to ask; moreover, some devices</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * react badly if we do.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#media_present\">media_present</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_read_capacity\">sd_read_capacity</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>, <a class=\"id\" href=\"#buffer\">buffer</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sd_try_extended_inquiry\">sd_try_extended_inquiry</a>(<a class=\"id\" href=\"#sdp\">sdp</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_read_block_limits\">sd_read_block_limits</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_read_block_characteristics\">sd_read_block_characteristics</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_read_write_protect_flag\">sd_read_write_protect_flag</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>, <a class=\"id\" href=\"#buffer\">buffer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_read_cache_type\">sd_read_cache_type</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>, <a class=\"id\" href=\"#buffer\">buffer</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_read_app_tag_own\">sd_read_app_tag_own</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>, <a class=\"id\" href=\"#buffer\">buffer</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#first_scan\">first_scan</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We now have all cache related info, determine how we deal</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * with ordered requests.  Note that as the current SCSI</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * dispatch function can alter request order, we cannot use</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * QUEUE_ORDERED_TAG_* even when ordered tag is supported.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#WCE\">WCE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ordered\">ordered</a> = <a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#DPOFUA\">DPOFUA</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>? <a class=\"id\" href=\"#QUEUE_ORDERED_DRAIN_FUA\">QUEUE_ORDERED_DRAIN_FUA</a> : <a class=\"id\" href=\"#QUEUE_ORDERED_DRAIN_FLUSH\">QUEUE_ORDERED_DRAIN_FLUSH</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ordered\">ordered</a> = <a class=\"id\" href=\"#QUEUE_ORDERED_DRAIN\">QUEUE_ORDERED_DRAIN</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_ordered\">blk_queue_ordered</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#queue\">queue</a>, <a class=\"id\" href=\"#ordered\">ordered</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_capacity\">set_capacity</a>(<a class=\"id\" href=\"#disk\">disk</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#capacity\">capacity</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sd_unlock_native_capacity - unlock native capacity</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@disk: struct gendisk to set capacity for</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Block layer calls this function if it detects that partitions</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>on @disk reach beyond the end of the device.  If the SCSI host</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>implements -&gt;unlock_native_capacity() method, it's invoked to</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>give it a chance to adjust the device capacity.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>CONTEXT:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Defined by block layer.  Might sleep.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#sd_unlock_native_capacity\">sd_unlock_native_capacity</a>(struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdev\">sdev</a> = <a class=\"id\" href=\"#scsi_disk\">scsi_disk</a>(<a class=\"id\" href=\"#disk\">disk</a>)-><a class=\"id\" href=\"#device\">device</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#hostt\">hostt</a>-><a class=\"id\" href=\"#unlock_native_capacity\">unlock_native_capacity</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sdev\">sdev</a>-><a class=\"id\" href=\"#host\">host</a>-><a class=\"id\" href=\"#hostt\">hostt</a>-><a class=\"id\" href=\"#unlock_native_capacity\">unlock_native_capacity</a>(<a class=\"id\" href=\"#sdev\">sdev</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sd_format_disk_name - format disk name</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@prefix: name prefix - ie. \"sd\" for SCSI disks</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@index: index of the disk to format name for</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@buf: output buffer</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@buflen: length of the output buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>SCSI disk names starts at sda.  The 26th device is sdz and the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>27th is sdaa.  The last one for two lettered suffix is sdzz</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>which is followed by sdaaa.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This is basically 26 base counting with one extra 'nil' entry</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>at the beginning from the second digit on and can be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>determined using similar method as 26 base conversion with the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>index shifted -1 after each digit is computed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>CONTEXT:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Don't care.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>RETURNS:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>0 on success, -errno on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#sd_format_disk_name\">sd_format_disk_name</a>(char *<a class=\"id\" href=\"#prefix\">prefix</a>, int <a class=\"id\" href=\"#index\">index</a>, char *<a class=\"id\" href=\"#buf\">buf</a>, int <a class=\"id\" href=\"#buflen\">buflen</a>)", 
"{", 
"<span class=\"ts\"/>const int <a class=\"id\" href=\"#base\">base</a> = 'z' - 'a' + 1;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#begin\">begin</a> = <a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#prefix\">prefix</a>);", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#end\">end</a> = <a class=\"id\" href=\"#buf\">buf</a> + <a class=\"id\" href=\"#buflen\">buflen</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#unit\">unit</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#end\">end</a> - 1;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a> = '\\0';", 
"<span class=\"ts\"/><a class=\"id\" href=\"#unit\">unit</a> = <a class=\"id\" href=\"#base\">base</a>;", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#p\">p</a> == <a class=\"id\" href=\"#begin\">begin</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>*--<a class=\"id\" href=\"#p\">p</a> = 'a' + (<a class=\"id\" href=\"#index\">index</a> % <a class=\"id\" href=\"#unit\">unit</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = (<a class=\"id\" href=\"#index\">index</a> / <a class=\"id\" href=\"#unit\">unit</a>) - 1;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#index\">index</a> >= 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memmove\">memmove</a>(<a class=\"id\" href=\"#begin\">begin</a>, <a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#end\">end</a> - <a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#prefix\">prefix</a>, <a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#prefix\">prefix</a>));", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The asynchronous part of sd_probe</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#sd_probe_async\">sd_probe_async</a>(void *<a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#async_cookie_t\">async_cookie_t</a> <a class=\"id\" href=\"#cookie\">cookie</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_disk\">scsi_disk</a> *<a class=\"id\" href=\"#sdkp\">sdkp</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdp\">sdp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#gd\">gd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdp\">sdp</a> = <a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#device\">device</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gd\">gd</a> = <a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#disk\">disk</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev\">dev</a> = &amp;<a class=\"id\" href=\"#sdp\">sdp</a>-><a class=\"id\" href=\"#sdev_gendev\">sdev_gendev</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#index\">index</a> &lt; <a class=\"id\" href=\"#SD_MAX_DISKS\">SD_MAX_DISKS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gd\">gd</a>-><a class=\"id\" href=\"#major\">major</a> = <a class=\"id\" href=\"#sd_major\">sd_major</a>((<a class=\"id\" href=\"#index\">index</a> &amp; 0xf0) >> 4);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gd\">gd</a>-><a class=\"id\" href=\"#first_minor\">first_minor</a> = ((<a class=\"id\" href=\"#index\">index</a> &amp; 0xf) << 4) | (<a class=\"id\" href=\"#index\">index</a> &amp; 0xfff00);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gd\">gd</a>-><a class=\"id\" href=\"#minors\">minors</a> = <a class=\"id\" href=\"#SD_MINORS\">SD_MINORS</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gd\">gd</a>-><a class=\"id\" href=\"#fops\">fops</a> = &amp;<a class=\"id\" href=\"#sd_fops\">sd_fops</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gd\">gd</a>-><a class=\"id\" href=\"#private_data\">private_data</a> = &amp;<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#driver\">driver</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gd\">gd</a>-><a class=\"id\" href=\"#queue\">queue</a> = <a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* defaults, until the device tells us otherwise */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdp\">sdp</a>-><a class=\"id\" href=\"#sector_size\">sector_size</a> = 512;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#capacity\">capacity</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#media_present\">media_present</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#write_prot\">write_prot</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#WCE\">WCE</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#RCD\">RCD</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#ATO\">ATO</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#first_scan\">first_scan</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd_revalidate_disk\">sd_revalidate_disk</a>(<a class=\"id\" href=\"#gd\">gd</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_prep_rq\">blk_queue_prep_rq</a>(<a class=\"id\" href=\"#sdp\">sdp</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>, <a class=\"id\" href=\"#sd_prep_fn\">sd_prep_fn</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_unprep_rq\">blk_queue_unprep_rq</a>(<a class=\"id\" href=\"#sdp\">sdp</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>, <a class=\"id\" href=\"#sd_unprep_fn\">sd_unprep_fn</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gd\">gd</a>-><a class=\"id\" href=\"#driverfs_dev\">driverfs_dev</a> = &amp;<a class=\"id\" href=\"#sdp\">sdp</a>-><a class=\"id\" href=\"#sdev_gendev\">sdev_gendev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gd\">gd</a>-><a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#GENHD_FL_EXT_DEVT\">GENHD_FL_EXT_DEVT</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdp\">sdp</a>-><a class=\"id\" href=\"#removable\">removable</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#gd\">gd</a>-><a class=\"id\" href=\"#flags\">flags</a> |= <a class=\"id\" href=\"#GENHD_FL_REMOVABLE\">GENHD_FL_REMOVABLE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#add_disk\">add_disk</a>(<a class=\"id\" href=\"#gd\">gd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd_dif_config_host\">sd_dif_config_host</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd_revalidate_disk\">sd_revalidate_disk</a>(<a class=\"id\" href=\"#gd\">gd</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>, \"Attached SCSI %sdisk\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#sdp\">sdp</a>-><a class=\"id\" href=\"#removable\">removable</a> ? \"removable \" : \"\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_autopm_put_device\">scsi_autopm_put_device</a>(<a class=\"id\" href=\"#sdp\">sdp</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_device\">put_device</a>(&amp;<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sd_probe - called during driver initialization and whenever a</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>new scsi device is attached to the system. It is called once</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>for each scsi device (not just disks) present.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: pointer to device object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Returns 0 if successful (or not interested in this scsi device </span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(e.g. scanner)); 1 when there is an error.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Note: this function is invoked from the scsi mid-level.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function sets up the mapping between a given </span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>&lt;host,channel,id,lun&gt; (found in sdp) and new device name </span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(e.g. /dev/sda). More precisely it is the block device major </span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and minor number that is chosen here.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Assume sd_attach is not re-entrant (for time being)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Also think about sd_attach() and sd_remove() running coincidentally.</span>", 
"<span class=\"comment\"> **/</span>", 
"static int <a class=\"id\" href=\"#sd_probe\">sd_probe</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdp\">sdp</a> = <a class=\"id\" href=\"#to_scsi_device\">to_scsi_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_disk\">scsi_disk</a> *<a class=\"id\" href=\"#sdkp\">sdkp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#gd\">gd</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#error\">error</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdp\">sdp</a>-><a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#TYPE_DISK\">TYPE_DISK</a> && <a class=\"id\" href=\"#sdp\">sdp</a>-><a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#TYPE_MOD\">TYPE_MOD</a> && <a class=\"id\" href=\"#sdp\">sdp</a>-><a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#TYPE_RBC\">TYPE_RBC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_HLQUEUE\">SCSI_LOG_HLQUEUE</a>(3, <a class=\"id\" href=\"#sdev_printk\">sdev_printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>, <a class=\"id\" href=\"#sdp\">sdp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"sd_attach\\n\"));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#sdkp\">sdkp</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sdkp\">sdkp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gd\">gd</a> = <a class=\"id\" href=\"#alloc_disk\">alloc_disk</a>(<a class=\"id\" href=\"#SD_MINORS\">SD_MINORS</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#gd\">gd</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free\">out_free</a>;", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ida_pre_get\">ida_pre_get</a>(&amp;<a class=\"id\" href=\"#sd_index_ida\">sd_index_ida</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_put\">out_put</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#sd_index_lock\">sd_index_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#ida_get_new\">ida_get_new</a>(&amp;<a class=\"id\" href=\"#sd_index_ida\">sd_index_ida</a>, &amp;<a class=\"id\" href=\"#index\">index</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sd_index_lock\">sd_index_lock</a>);", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#error\">error</a> == -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_put\">out_put</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#error\">error</a> = <a class=\"id\" href=\"#sd_format_disk_name\">sd_format_disk_name</a>(\"sd\", <a class=\"id\" href=\"#index\">index</a>, <a class=\"id\" href=\"#gd\">gd</a>-><a class=\"id\" href=\"#disk_name\">disk_name</a>, <a class=\"id\" href=\"#DISK_NAME_LEN\">DISK_NAME_LEN</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#error\">error</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_index\">out_free_index</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#device\">device</a> = <a class=\"id\" href=\"#sdp\">sdp</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#driver\">driver</a> = &amp;<a class=\"id\" href=\"#sd_template\">sd_template</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#disk\">disk</a> = <a class=\"id\" href=\"#gd\">gd</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#index\">index</a> = <a class=\"id\" href=\"#index\">index</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#openers\">openers</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#previous_state\">previous_state</a> = 1;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sdp\">sdp</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>-><a class=\"id\" href=\"#rq_timeout\">rq_timeout</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sdp\">sdp</a>-><a class=\"id\" href=\"#type\">type</a> != <a class=\"id\" href=\"#TYPE_MOD\">TYPE_MOD</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_rq_timeout\">blk_queue_rq_timeout</a>(<a class=\"id\" href=\"#sdp\">sdp</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>, <a class=\"id\" href=\"#SD_TIMEOUT\">SD_TIMEOUT</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_rq_timeout\">blk_queue_rq_timeout</a>(<a class=\"id\" href=\"#sdp\">sdp</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#SD_MOD_TIMEOUT\">SD_MOD_TIMEOUT</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#device_initialize\">device_initialize</a>(&amp;<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#class\">class</a> = &amp;<a class=\"id\" href=\"#sd_disk_class\">sd_disk_class</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_set_name\">dev_set_name</a>(&amp;<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#dev_name\">dev_name</a>(<a class=\"id\" href=\"#dev\">dev</a>));", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#device_add\">device_add</a>(&amp;<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#dev\">dev</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_free_index\">out_free_index</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_device\">get_device</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_set_drvdata\">dev_set_drvdata</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_device\">get_device</a>(&amp;<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#dev\">dev</a>);<span class=\"ts\"/><span class=\"comment\">/* prevent release before async_schedule */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#async_schedule\">async_schedule</a>(<a class=\"id\" href=\"#sd_probe_async\">sd_probe_async</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
" <a class=\"id\" href=\"#out_free_index\">out_free_index</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#sd_index_lock\">sd_index_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ida_remove\">ida_remove</a>(&amp;<a class=\"id\" href=\"#sd_index_ida\">sd_index_ida</a>, <a class=\"id\" href=\"#index\">index</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sd_index_lock\">sd_index_lock</a>);", 
" <a class=\"id\" href=\"#out_put\">out_put</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_disk\">put_disk</a>(<a class=\"id\" href=\"#gd\">gd</a>);", 
" <a class=\"id\" href=\"#out_free\">out_free</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>);", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#error\">error</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sd_remove - called whenever a scsi disk (previously recognized by</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sd_probe) is detached from the system. It is called (potentially</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>multiple times) during sd module unload.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@sdp: pointer to mid level scsi device object</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Note: this function is invoked from the scsi mid-level.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function potentially frees up a device name (e.g. /dev/sdc)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>that could be re-used by a subsequent sd_probe().</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function is not called when the built-in sd driver is \"exit-ed\".</span>", 
"<span class=\"comment\"> **/</span>", 
"static int <a class=\"id\" href=\"#sd_remove\">sd_remove</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_disk\">scsi_disk</a> *<a class=\"id\" href=\"#sdkp\">sdkp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sdkp\">sdkp</a> = <a class=\"id\" href=\"#dev_get_drvdata\">dev_get_drvdata</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_autopm_get_device\">scsi_autopm_get_device</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#device\">device</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#async_synchronize_full\">async_synchronize_full</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_prep_rq\">blk_queue_prep_rq</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>, <a class=\"id\" href=\"#scsi_prep_fn\">scsi_prep_fn</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_queue_unprep_rq\">blk_queue_unprep_rq</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#request_queue\">request_queue</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#device_del\">device_del</a>(&amp;<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#del_gendisk\">del_gendisk</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#disk\">disk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd_shutdown\">sd_shutdown</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#sd_ref_mutex\">sd_ref_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dev_set_drvdata\">dev_set_drvdata</a>(<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_device\">put_device</a>(&amp;<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#sd_ref_mutex\">sd_ref_mutex</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>scsi_disk_release - Called to free the scsi_disk structure</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@dev: pointer to embedded class device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sd_ref_mutex must be held entering this routine.  Because it is</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>called on last put, you should always use the scsi_disk_get()</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>scsi_disk_put() helpers which manipulate the semaphore directly</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>and never do a direct put_device.</span>", 
"<span class=\"comment\"> **/</span>", 
"static void <a class=\"id\" href=\"#scsi_disk_release\">scsi_disk_release</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_disk\">scsi_disk</a> *<a class=\"id\" href=\"#sdkp\">sdkp</a> = <a class=\"id\" href=\"#to_scsi_disk\">to_scsi_disk</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a> = <a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#disk\">disk</a>;", 
"<span class=\"ts\"/>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#sd_index_lock\">sd_index_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ida_remove\">ida_remove</a>(&amp;<a class=\"id\" href=\"#sd_index_ida\">sd_index_ida</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#index\">index</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#sd_index_lock\">sd_index_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#private_data\">private_data</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_disk\">put_disk</a>(<a class=\"id\" href=\"#disk\">disk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_device\">put_device</a>(&amp;<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#sdev_gendev\">sdev_gendev</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#sd_start_stop_device\">sd_start_stop_device</a>(struct <a class=\"id\" href=\"#scsi_disk\">scsi_disk</a> *<a class=\"id\" href=\"#sdkp\">sdkp</a>, int <a class=\"id\" href=\"#start\">start</a>)", 
"{", 
"<span class=\"ts\"/>unsigned char <a class=\"id\" href=\"#cmd\">cmd</a>[6] = { <a class=\"id\" href=\"#START_STOP\">START_STOP</a> };<span class=\"ts\"/><span class=\"comment\">/* START_VALID */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_sense_hdr\">scsi_sense_hdr</a> <a class=\"id\" href=\"#sshdr\">sshdr</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_device\">scsi_device</a> *<a class=\"id\" href=\"#sdp\">sdp</a> = <a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#device\">device</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>[4] |= 1;<span class=\"ts\"/><span class=\"comment\">/* START */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdp\">sdp</a>-><a class=\"id\" href=\"#start_stop_pwr_cond\">start_stop_pwr_cond</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cmd\">cmd</a>[4] |= <a class=\"id\" href=\"#start\">start</a> ? 1 << 4 : 3 << 4;<span class=\"ts\"/><span class=\"comment\">/* Active or Standby */</span>", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#scsi_device_online\">scsi_device_online</a>(<a class=\"id\" href=\"#sdp\">sdp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#scsi_execute_req\">scsi_execute_req</a>(<a class=\"id\" href=\"#sdp\">sdp</a>, <a class=\"id\" href=\"#cmd\">cmd</a>, <a class=\"id\" href=\"#DMA_NONE\">DMA_NONE</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, 0, &amp;<a class=\"id\" href=\"#sshdr\">sshdr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#SD_TIMEOUT\">SD_TIMEOUT</a>, <a class=\"id\" href=\"#SD_MAX_RETRIES\">SD_MAX_RETRIES</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_WARNING\">KERN_WARNING</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>, \"START_STOP FAILED\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_print_result\">sd_print_result</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>, <a class=\"id\" href=\"#res\">res</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#driver_byte\">driver_byte</a>(<a class=\"id\" href=\"#res\">res</a>) &amp; <a class=\"id\" href=\"#DRIVER_SENSE\">DRIVER_SENSE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_print_sense_hdr\">sd_print_sense_hdr</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>, &amp;<a class=\"id\" href=\"#sshdr\">sshdr</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Send a SYNCHRONIZE CACHE instruction down to the device through</span>", 
"<span class=\"comment\"> * the normal SCSI command structure.  Wait for the command to</span>", 
"<span class=\"comment\"> * complete.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#sd_shutdown\">sd_shutdown</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_disk\">scsi_disk</a> *<a class=\"id\" href=\"#sdkp\">sdkp</a> = <a class=\"id\" href=\"#scsi_disk_get_from_dev\">scsi_disk_get_from_dev</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sdkp\">sdkp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;         <span class=\"comment\">/* this can happen */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#WCE\">WCE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>, \"Synchronizing SCSI cache\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_sync_cache\">sd_sync_cache</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#system_state\">system_state</a> != <a class=\"id\" href=\"#SYSTEM_RESTART\">SYSTEM_RESTART</a> && <a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#manage_start_stop\">manage_start_stop</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>, \"Stopping disk\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_start_stop_device\">sd_start_stop_device</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>, 0);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_disk_put\">scsi_disk_put</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#sd_suspend\">sd_suspend</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>, <a class=\"id\" href=\"#pm_message_t\">pm_message_t</a> <a class=\"id\" href=\"#mesg\">mesg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_disk\">scsi_disk</a> *<a class=\"id\" href=\"#sdkp\">sdkp</a> = <a class=\"id\" href=\"#scsi_disk_get_from_dev\">scsi_disk_get_from_dev</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sdkp\">sdkp</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;<span class=\"ts\"/><span class=\"comment\">/* this can happen */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#WCE\">WCE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>, \"Synchronizing SCSI cache\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#sd_sync_cache\">sd_sync_cache</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#mesg\">mesg</a>.<a class=\"id\" href=\"#event\">event</a> &amp; <a class=\"id\" href=\"#PM_EVENT_SLEEP\">PM_EVENT_SLEEP</a>) && <a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#manage_start_stop\">manage_start_stop</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>, \"Stopping disk\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#sd_start_stop_device\">sd_start_stop_device</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>, 0);", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#done\">done</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_disk_put\">scsi_disk_put</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#sd_resume\">sd_resume</a>(struct <a class=\"id\" href=\"#device\">device</a> *<a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#scsi_disk\">scsi_disk</a> *<a class=\"id\" href=\"#sdkp\">sdkp</a> = <a class=\"id\" href=\"#scsi_disk_get_from_dev\">scsi_disk_get_from_dev</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sdkp\">sdkp</a>-><a class=\"id\" href=\"#device\">device</a>-><a class=\"id\" href=\"#manage_start_stop\">manage_start_stop</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#done\">done</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_NOTICE\">KERN_NOTICE</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>, \"Starting disk\\n\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#sd_start_stop_device\">sd_start_stop_device</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>, 1);", 
"", 
"<a class=\"id\" href=\"#done\">done</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_disk_put\">scsi_disk_put</a>(<a class=\"id\" href=\"#sdkp\">sdkp</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>init_sd - entry point for this driver (both when built in or when</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>a module).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Note: this function registers this driver with the scsi mid-level.</span>", 
"<span class=\"comment\"> **/</span>", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#init_sd\">init_sd</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#majors\">majors</a> = 0, <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_HLQUEUE\">SCSI_LOG_HLQUEUE</a>(3, <a class=\"id\" href=\"#printk\">printk</a>(\"init_sd: sd driver entry point\\n\"));", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#SD_MAJORS\">SD_MAJORS</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#register_blkdev\">register_blkdev</a>(<a class=\"id\" href=\"#sd_major\">sd_major</a>(<a class=\"id\" href=\"#i\">i</a>), \"sd\") == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#majors\">majors</a>++;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#majors\">majors</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#class_register\">class_register</a>(&amp;<a class=\"id\" href=\"#sd_disk_class\">sd_disk_class</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#scsi_register_driver\">scsi_register_driver</a>(&amp;<a class=\"id\" href=\"#sd_template\">sd_template</a>.<a class=\"id\" href=\"#gendrv\">gendrv</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out_class\">err_out_class</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd_cdb_cache\">sd_cdb_cache</a> = <a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(\"sd_ext_cdb\", <a class=\"id\" href=\"#SD_EXT_CDB_SIZE\">SD_EXT_CDB_SIZE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> 0, 0, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sd_cdb_cache\">sd_cdb_cache</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"sd: can't init extended cdb cache\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out_class\">err_out_class</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd_cdb_pool\">sd_cdb_pool</a> = <a class=\"id\" href=\"#mempool_create_slab_pool\">mempool_create_slab_pool</a>(<a class=\"id\" href=\"#SD_MEMPOOL_SIZE\">SD_MEMPOOL_SIZE</a>, <a class=\"id\" href=\"#sd_cdb_cache\">sd_cdb_cache</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sd_cdb_pool\">sd_cdb_pool</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a> \"sd: can't init extended cdb pool\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out_cache\">err_out_cache</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#err_out_cache\">err_out_cache</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_destroy\">kmem_cache_destroy</a>(<a class=\"id\" href=\"#sd_cdb_cache\">sd_cdb_cache</a>);", 
"", 
"<a class=\"id\" href=\"#err_out_class\">err_out_class</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#class_unregister\">class_unregister</a>(&amp;<a class=\"id\" href=\"#sd_disk_class\">sd_disk_class</a>);", 
"<a class=\"id\" href=\"#err_out\">err_out</a>:", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#SD_MAJORS\">SD_MAJORS</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unregister_blkdev\">unregister_blkdev</a>(<a class=\"id\" href=\"#sd_major\">sd_major</a>(<a class=\"id\" href=\"#i\">i</a>), \"sd\");", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>exit_sd - exit point for this driver (when it is a module).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Note: this function unregisters this driver from the scsi mid-level.</span>", 
"<span class=\"comment\"> **/</span>", 
"static void <a class=\"id\" href=\"#__exit\">__exit</a> <a class=\"id\" href=\"#exit_sd\">exit_sd</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#SCSI_LOG_HLQUEUE\">SCSI_LOG_HLQUEUE</a>(3, <a class=\"id\" href=\"#printk\">printk</a>(\"exit_sd: exiting sd driver\\n\"));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mempool_destroy\">mempool_destroy</a>(<a class=\"id\" href=\"#sd_cdb_pool\">sd_cdb_pool</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_destroy\">kmem_cache_destroy</a>(<a class=\"id\" href=\"#sd_cdb_cache\">sd_cdb_cache</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_unregister_driver\">scsi_unregister_driver</a>(&amp;<a class=\"id\" href=\"#sd_template\">sd_template</a>.<a class=\"id\" href=\"#gendrv\">gendrv</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#class_unregister\">class_unregister</a>(&amp;<a class=\"id\" href=\"#sd_disk_class\">sd_disk_class</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#SD_MAJORS\">SD_MAJORS</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unregister_blkdev\">unregister_blkdev</a>(<a class=\"id\" href=\"#sd_major\">sd_major</a>(<a class=\"id\" href=\"#i\">i</a>), \"sd\");", 
"}", 
"", 
"<a class=\"id\" href=\"#module_init\">module_init</a>(<a class=\"id\" href=\"#init_sd\">init_sd</a>);", 
"<a class=\"id\" href=\"#module_exit\">module_exit</a>(<a class=\"id\" href=\"#exit_sd\">exit_sd</a>);", 
"", 
"static void <a class=\"id\" href=\"#sd_print_sense_hdr\">sd_print_sense_hdr</a>(struct <a class=\"id\" href=\"#scsi_disk\">scsi_disk</a> *<a class=\"id\" href=\"#sdkp\">sdkp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#scsi_sense_hdr\">scsi_sense_hdr</a> *<a class=\"id\" href=\"#sshdr\">sshdr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>, \" \");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_show_sense_hdr\">scsi_show_sense_hdr</a>(<a class=\"id\" href=\"#sshdr\">sshdr</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>, \" \");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_show_extd_sense\">scsi_show_extd_sense</a>(<a class=\"id\" href=\"#sshdr\">sshdr</a>-><a class=\"id\" href=\"#asc\">asc</a>, <a class=\"id\" href=\"#sshdr\">sshdr</a>-><a class=\"id\" href=\"#ascq\">ascq</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#sd_print_result\">sd_print_result</a>(struct <a class=\"id\" href=\"#scsi_disk\">scsi_disk</a> *<a class=\"id\" href=\"#sdkp\">sdkp</a>, int <a class=\"id\" href=\"#result\">result</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sd_printk\">sd_printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a>, <a class=\"id\" href=\"#sdkp\">sdkp</a>, \" \");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#scsi_show_result\">scsi_show_result</a>(<a class=\"id\" href=\"#result\">result</a>);", 
"}", 
"", 
];
xr_frag_insert('l/25/764103507b42b4e0ea28c59d44fad7a2ae13cc.xr', __xr_tmp);
