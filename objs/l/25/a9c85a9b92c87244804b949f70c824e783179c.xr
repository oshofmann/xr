var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Cryptographic scatter and gather helpers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (c) 2002 James Morris &lt;jmorris@intercode.com.au&gt;</span>", 
"<span class=\"comment\"> * Copyright (c) 2002 Adam J. Richter &lt;adam@yggdrasil.com&gt;</span>", 
"<span class=\"comment\"> * Copyright (c) 2004 Jean-Luc Cooke &lt;jlcooke@certainkey.com&gt;</span>", 
"<span class=\"comment\"> * Copyright (c) 2007 Herbert Xu &lt;herbert@gondor.apana.org.au&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or modify it</span>", 
"<span class=\"comment\"> * under the terms of the GNU General Public License as published by the Free</span>", 
"<span class=\"comment\"> * Software Foundation; either version 2 of the License, or (at your option)</span>", 
"<span class=\"comment\"> * any later version.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_CRYPTO_SCATTERWALK_H\">_CRYPTO_SCATTERWALK_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_CRYPTO_SCATTERWALK_H\">_CRYPTO_SCATTERWALK_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#kmap_types\">kmap_types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#crypto\">crypto</a>/<a class=\"id\" href=\"#algapi\">algapi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hardirq\">hardirq</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#highmem\">highmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#scatterlist\">scatterlist</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> enum <a class=\"id\" href=\"#km_type\">km_type</a> <a class=\"id\" href=\"#crypto_kmap_type\">crypto_kmap_type</a>(int <a class=\"id\" href=\"#out\">out</a>)", 
"{", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#km_type\">km_type</a> <a class=\"id\" href=\"#type\">type</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#in_softirq\">in_softirq</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#out\">out</a> * (<a class=\"id\" href=\"#KM_SOFTIRQ1\">KM_SOFTIRQ1</a> - <a class=\"id\" href=\"#KM_SOFTIRQ0\">KM_SOFTIRQ0</a>) + <a class=\"id\" href=\"#KM_SOFTIRQ0\">KM_SOFTIRQ0</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a> = <a class=\"id\" href=\"#out\">out</a> * (<a class=\"id\" href=\"#KM_USER1\">KM_USER1</a> - <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>) + <a class=\"id\" href=\"#KM_USER0\">KM_USER0</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#type\">type</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *<a class=\"id\" href=\"#crypto_kmap\">crypto_kmap</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#out\">out</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#kmap_atomic\">kmap_atomic</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#crypto_kmap_type\">crypto_kmap_type</a>(<a class=\"id\" href=\"#out\">out</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#crypto_kunmap\">crypto_kunmap</a>(void *<a class=\"id\" href=\"#vaddr\">vaddr</a>, int <a class=\"id\" href=\"#out\">out</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kunmap_atomic\">kunmap_atomic</a>(<a class=\"id\" href=\"#vaddr\">vaddr</a>, <a class=\"id\" href=\"#crypto_kmap_type\">crypto_kmap_type</a>(<a class=\"id\" href=\"#out\">out</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#crypto_yield\">crypto_yield</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#CRYPTO_TFM_REQ_MAY_SLEEP\">CRYPTO_TFM_REQ_MAY_SLEEP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cond_resched\">cond_resched</a>();", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#scatterwalk_sg_chain\">scatterwalk_sg_chain</a>(struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sg1\">sg1</a>, int <a class=\"id\" href=\"#num\">num</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sg2\">sg2</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sg_set_page\">sg_set_page</a>(&amp;<a class=\"id\" href=\"#sg1\">sg1</a>[<a class=\"id\" href=\"#num\">num</a> - 1], (void *)<a class=\"id\" href=\"#sg2\">sg2</a>, 0, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sg1\">sg1</a>[<a class=\"id\" href=\"#num\">num</a> - 1].<a class=\"id\" href=\"#page_link\">page_link</a> &= ~0x02;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#scatterwalk_sg_next\">scatterwalk_sg_next</a>(struct <a class=\"id\" href=\"#scatterlist\">scatterlist</a> *<a class=\"id\" href=\"#sg\">sg</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sg_is_last\">sg_is_last</a>(<a class=\"id\" href=\"#sg\">sg</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>return (++<a class=\"id\" href=\"#sg\">sg</a>)-><a class=\"id\" href=\"#length\">length</a> ? <a class=\"id\" href=\"#sg\">sg</a> : (void *)<a class=\"id\" href=\"#sg_page\">sg_page</a>(<a class=\"id\" href=\"#sg\">sg</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#scatterwalk_samebuf\">scatterwalk_samebuf</a>(struct <a class=\"id\" href=\"#scatter_walk\">scatter_walk</a> *<a class=\"id\" href=\"#walk_in\">walk_in</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#scatter_walk\">scatter_walk</a> *<a class=\"id\" href=\"#walk_out\">walk_out</a>)", 
"{", 
"<span class=\"ts\"/>return !(((<a class=\"id\" href=\"#sg_page\">sg_page</a>(<a class=\"id\" href=\"#walk_in\">walk_in</a>-><a class=\"id\" href=\"#sg\">sg</a>) - <a class=\"id\" href=\"#sg_page\">sg_page</a>(<a class=\"id\" href=\"#walk_out\">walk_out</a>-><a class=\"id\" href=\"#sg\">sg</a>)) << <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>) +", 
"<span class=\"ts\"/><span class=\"ts\"/> (int)(<a class=\"id\" href=\"#walk_in\">walk_in</a>-><a class=\"id\" href=\"#offset\">offset</a> - <a class=\"id\" href=\"#walk_out\">walk_out</a>-><a class=\"id\" href=\"#offset\">offset</a>));", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#scatterwalk_pagelen\">scatterwalk_pagelen</a>(struct <a class=\"id\" href=\"#scatter_walk\">scatter_walk</a> *<a class=\"id\" href=\"#walk\">walk</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#walk\">walk</a>-><a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#offset\">offset</a> + <a class=\"id\" href=\"#walk\">walk</a>-><a class=\"id\" href=\"#sg\">sg</a>-><a class=\"id\" href=\"#length\">length</a> - <a class=\"id\" href=\"#walk\">walk</a>-><a class=\"id\" href=\"#offset\">offset</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#len_this_page\">len_this_page</a> = <a class=\"id\" href=\"#offset_in_page\">offset_in_page</a>(~<a class=\"id\" href=\"#walk\">walk</a>-><a class=\"id\" href=\"#offset\">offset</a>) + 1;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#len_this_page\">len_this_page</a> &gt; <a class=\"id\" href=\"#len\">len</a> ? <a class=\"id\" href=\"#len\">len</a> : <a class=\"id\" href=\"#len_this_page\">len_this_page</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#scatterwalk_clamp\">scatterwalk_clamp</a>(struct <a class=\"id\" href=\"#scatter_walk\">scatter_walk</a> *<a class=\"id\" href=\"#walk\">walk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     unsigned int <a class=\"id\" href=\"#nbytes\">nbytes</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#len_this_page\">len_this_page</a> = <a class=\"id\" href=\"#scatterwalk_pagelen\">scatterwalk_pagelen</a>(<a class=\"id\" href=\"#walk\">walk</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nbytes\">nbytes</a> &gt; <a class=\"id\" href=\"#len_this_page\">len_this_page</a> ? <a class=\"id\" href=\"#len_this_page\">len_this_page</a> : <a class=\"id\" href=\"#nbytes\">nbytes</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#scatterwalk_advance\">scatterwalk_advance</a>(struct <a class=\"id\" href=\"#scatter_walk\">scatter_walk</a> *<a class=\"id\" href=\"#walk\">walk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned int <a class=\"id\" href=\"#nbytes\">nbytes</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#walk\">walk</a>-><a class=\"id\" href=\"#offset\">offset</a> += <a class=\"id\" href=\"#nbytes\">nbytes</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned int <a class=\"id\" href=\"#scatterwalk_aligned\">scatterwalk_aligned</a>(struct <a class=\"id\" href=\"#scatter_walk\">scatter_walk</a> *<a class=\"id\" href=\"#walk\">walk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       unsigned int <a class=\"id\" href=\"#alignmask\">alignmask</a>)", 
"{", 
"<span class=\"ts\"/>return !(<a class=\"id\" href=\"#walk\">walk</a>-><a class=\"id\" href=\"#offset\">offset</a> &amp; <a class=\"id\" href=\"#alignmask\">alignmask</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#scatterwalk_page\">scatterwalk_page</a>(struct <a class=\"id\" href=\"#scatter_walk\">scatter_walk</a> *<a class=\"id\" href=\"#walk\">walk</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sg_page\">sg_page</a>(<a class=\"id\" href=\"#walk\">walk</a>-><a class=\"id\" href=\"#sg\">sg</a>) + (<a class=\"id\" href=\"#walk\">walk</a>-><a class=\"id\" href=\"#offset\">offset</a> >> <a class=\"id\" href=\"#PAGE_SHIFT\">PAGE_SHIFT</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#scatterwalk_unmap\">scatterwalk_unmap</a>(void *<a class=\"id\" href=\"#vaddr\">vaddr</a>, int <a class=\"id\" href=\"#out\">out</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#crypto_kunmap\">crypto_kunmap</a>(<a class=\"id\" href=\"#vaddr\">vaddr</a>, <a class=\"id\" href=\"#out\">out</a>);", 
"}", 
];
xr_frag_insert('l/25/a9c85a9b92c87244804b949f70c824e783179c.xr', __xr_tmp);
