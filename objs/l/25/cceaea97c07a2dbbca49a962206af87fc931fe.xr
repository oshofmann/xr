var __xr_tmp = [
"<span class=\"comment\">/* Case of a leaf function on its call entry */</span>", 
"static enum <a class=\"id\" href=\"#print_line_t\">print_line_t</a>", 
"<a class=\"id\" href=\"#print_graph_entry_leaf\">print_graph_entry_leaf</a>(struct <a class=\"id\" href=\"#trace_iterator\">trace_iterator</a> *<a class=\"id\" href=\"#iter\">iter</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_graph_ent_entry\">ftrace_graph_ent_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_graph_ret_entry\">ftrace_graph_ret_entry</a> *<a class=\"id\" href=\"#ret_entry\">ret_entry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_seq\">trace_seq</a> *<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fgraph_data\">fgraph_data</a> *<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_graph_ret\">ftrace_graph_ret</a> *<a class=\"id\" href=\"#graph_ret\">graph_ret</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_graph_ent\">ftrace_graph_ent</a> *<a class=\"id\" href=\"#call\">call</a>;", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#duration\">duration</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#graph_ret\">graph_ret</a> = &amp;<a class=\"id\" href=\"#ret_entry\">ret_entry</a>-><a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#call\">call</a> = &amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#graph_ent\">graph_ent</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#duration\">duration</a> = <a class=\"id\" href=\"#graph_ret\">graph_ret</a>-><a class=\"id\" href=\"#rettime\">rettime</a> - <a class=\"id\" href=\"#graph_ret\">graph_ret</a>-><a class=\"id\" href=\"#calltime\">calltime</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#data\">data</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#fgraph_cpu_data\">fgraph_cpu_data</a> *<a class=\"id\" href=\"#cpu_data\">cpu_data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_data\">cpu_data</a> = <a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#cpu_data\">cpu_data</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Comments display at + 1 to depth. Since</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * this is a leaf function, keep the comments</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * equal to this depth.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_data\">cpu_data</a>-><a class=\"id\" href=\"#depth\">depth</a> = <a class=\"id\" href=\"#call\">call</a>-><a class=\"id\" href=\"#depth\">depth</a> - 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* No need to keep this function around for this depth */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#call\">call</a>-><a class=\"id\" href=\"#depth\">depth</a> &lt; <a class=\"id\" href=\"#FTRACE_RETFUNC_DEPTH\">FTRACE_RETFUNC_DEPTH</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_data\">cpu_data</a>-><a class=\"id\" href=\"#enter_funcs\">enter_funcs</a>[<a class=\"id\" href=\"#call\">call</a>-><a class=\"id\" href=\"#depth\">depth</a>] = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Overhead */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#print_graph_overhead\">print_graph_overhead</a>(<a class=\"id\" href=\"#duration\">duration</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Duration */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#TRACE_GRAPH_PRINT_DURATION\">TRACE_GRAPH_PRINT_DURATION</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#print_graph_duration\">print_graph_duration</a>(<a class=\"id\" href=\"#duration\">duration</a>, <a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Function */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#call\">call</a>-><a class=\"id\" href=\"#depth\">depth</a> * <a class=\"id\" href=\"#TRACE_GRAPH_INDENT\">TRACE_GRAPH_INDENT</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \" \");", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"%ps();\\n\", (void *)<a class=\"id\" href=\"#call\">call</a>-><a class=\"id\" href=\"#func\">func</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_HANDLED\">TRACE_TYPE_HANDLED</a>;", 
"}", 
"", 
"static enum <a class=\"id\" href=\"#print_line_t\">print_line_t</a>", 
"<a class=\"id\" href=\"#print_graph_entry_nested\">print_graph_entry_nested</a>(struct <a class=\"id\" href=\"#trace_iterator\">trace_iterator</a> *<a class=\"id\" href=\"#iter\">iter</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#ftrace_graph_ent_entry\">ftrace_graph_ent_entry</a> *<a class=\"id\" href=\"#entry\">entry</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#trace_seq\">trace_seq</a> *<a class=\"id\" href=\"#s\">s</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_graph_ent\">ftrace_graph_ent</a> *<a class=\"id\" href=\"#call\">call</a> = &amp;<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#graph_ent\">graph_ent</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fgraph_data\">fgraph_data</a> *<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#data\">data</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#fgraph_cpu_data\">fgraph_cpu_data</a> *<a class=\"id\" href=\"#cpu_data\">cpu_data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_data\">cpu_data</a> = <a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#cpu_data\">cpu_data</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_data\">cpu_data</a>-><a class=\"id\" href=\"#depth\">depth</a> = <a class=\"id\" href=\"#call\">call</a>-><a class=\"id\" href=\"#depth\">depth</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Save this function pointer to see if the exit matches */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#call\">call</a>-><a class=\"id\" href=\"#depth\">depth</a> &lt; <a class=\"id\" href=\"#FTRACE_RETFUNC_DEPTH\">FTRACE_RETFUNC_DEPTH</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_data\">cpu_data</a>-><a class=\"id\" href=\"#enter_funcs\">enter_funcs</a>[<a class=\"id\" href=\"#call\">call</a>-><a class=\"id\" href=\"#depth\">depth</a>] = <a class=\"id\" href=\"#call\">call</a>-><a class=\"id\" href=\"#func\">func</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* No overhead */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#print_graph_overhead\">print_graph_overhead</a>(-1, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* No time */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#TRACE_GRAPH_PRINT_DURATION\">TRACE_GRAPH_PRINT_DURATION</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"            |  \");", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Function */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#call\">call</a>-><a class=\"id\" href=\"#depth\">depth</a> * <a class=\"id\" href=\"#TRACE_GRAPH_INDENT\">TRACE_GRAPH_INDENT</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \" \");", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"%ps() {\\n\", (void *)<a class=\"id\" href=\"#call\">call</a>-><a class=\"id\" href=\"#func\">func</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we already consumed the current entry to check the next one</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and see if this is a leaf.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_NO_CONSUME\">TRACE_TYPE_NO_CONSUME</a>;", 
"}", 
"", 
"static enum <a class=\"id\" href=\"#print_line_t\">print_line_t</a>", 
"<a class=\"id\" href=\"#print_graph_prologue\">print_graph_prologue</a>(struct <a class=\"id\" href=\"#trace_iterator\">trace_iterator</a> *<a class=\"id\" href=\"#iter\">iter</a>, struct <a class=\"id\" href=\"#trace_seq\">trace_seq</a> *<a class=\"id\" href=\"#s\">s</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#type\">type</a>, unsigned long <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fgraph_data\">fgraph_data</a> *<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_entry\">trace_entry</a> *<a class=\"id\" href=\"#ent\">ent</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#ent\">ent</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Pid */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#verif_pid\">verif_pid</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#data\">data</a>) == <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Interrupt */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#print_graph_irq\">print_graph_irq</a>(<a class=\"id\" href=\"#iter\">iter</a>, <a class=\"id\" href=\"#addr\">addr</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Absolute time */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#TRACE_GRAPH_PRINT_ABS_TIME\">TRACE_GRAPH_PRINT_ABS_TIME</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#print_graph_abs_time\">print_graph_abs_time</a>(<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#ts\">ts</a>, <a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Cpu */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#TRACE_GRAPH_PRINT_CPU\">TRACE_GRAPH_PRINT_CPU</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#print_graph_cpu\">print_graph_cpu</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Proc */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#TRACE_GRAPH_PRINT_PROC\">TRACE_GRAPH_PRINT_PROC</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#print_graph_proc\">print_graph_proc</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#pid\">pid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \" | \");", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Latency format */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#trace_flags\">trace_flags</a> &amp; <a class=\"id\" href=\"#TRACE_ITER_LATENCY_FMT\">TRACE_ITER_LATENCY_FMT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#print_graph_lat_fmt\">print_graph_lat_fmt</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#ent\">ent</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static enum <a class=\"id\" href=\"#print_line_t\">print_line_t</a>", 
"<a class=\"id\" href=\"#print_graph_entry\">print_graph_entry</a>(struct <a class=\"id\" href=\"#ftrace_graph_ent_entry\">ftrace_graph_ent_entry</a> *<a class=\"id\" href=\"#field\">field</a>, struct <a class=\"id\" href=\"#trace_seq\">trace_seq</a> *<a class=\"id\" href=\"#s\">s</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_iterator\">trace_iterator</a> *<a class=\"id\" href=\"#iter\">iter</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fgraph_data\">fgraph_data</a> *<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_graph_ent\">ftrace_graph_ent</a> *<a class=\"id\" href=\"#call\">call</a> = &amp;<a class=\"id\" href=\"#field\">field</a>-><a class=\"id\" href=\"#graph_ent\">graph_ent</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_graph_ret_entry\">ftrace_graph_ret_entry</a> *<a class=\"id\" href=\"#leaf_ret\">leaf_ret</a>;", 
"<span class=\"ts\"/>static enum <a class=\"id\" href=\"#print_line_t\">print_line_t</a> <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#print_graph_prologue\">print_graph_prologue</a>(<a class=\"id\" href=\"#iter\">iter</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#TRACE_GRAPH_ENT\">TRACE_GRAPH_ENT</a>, <a class=\"id\" href=\"#call\">call</a>-><a class=\"id\" href=\"#func\">func</a>, <a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#leaf_ret\">leaf_ret</a> = <a class=\"id\" href=\"#get_return_for_leaf\">get_return_for_leaf</a>(<a class=\"id\" href=\"#iter\">iter</a>, <a class=\"id\" href=\"#field\">field</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#leaf_ret\">leaf_ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#print_graph_entry_leaf\">print_graph_entry_leaf</a>(<a class=\"id\" href=\"#iter\">iter</a>, <a class=\"id\" href=\"#field\">field</a>, <a class=\"id\" href=\"#leaf_ret\">leaf_ret</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#print_graph_entry_nested\">print_graph_entry_nested</a>(<a class=\"id\" href=\"#iter\">iter</a>, <a class=\"id\" href=\"#field\">field</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#data\">data</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If we failed to write our output, then we need to make</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * note of it. Because we already consumed our entry.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#full\">full</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#failed\">failed</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#failed\">failed</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static enum <a class=\"id\" href=\"#print_line_t\">print_line_t</a>", 
"<a class=\"id\" href=\"#print_graph_return\">print_graph_return</a>(struct <a class=\"id\" href=\"#ftrace_graph_ret\">ftrace_graph_ret</a> *<a class=\"id\" href=\"#trace\">trace</a>, struct <a class=\"id\" href=\"#trace_seq\">trace_seq</a> *<a class=\"id\" href=\"#s\">s</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#trace_entry\">trace_entry</a> *<a class=\"id\" href=\"#ent\">ent</a>, struct <a class=\"id\" href=\"#trace_iterator\">trace_iterator</a> *<a class=\"id\" href=\"#iter\">iter</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long long <a class=\"id\" href=\"#duration\">duration</a> = <a class=\"id\" href=\"#trace\">trace</a>-><a class=\"id\" href=\"#rettime\">rettime</a> - <a class=\"id\" href=\"#trace\">trace</a>-><a class=\"id\" href=\"#calltime\">calltime</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fgraph_data\">fgraph_data</a> *<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pid_t\">pid_t</a> <a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#func_match\">func_match</a> = 1;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#data\">data</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#fgraph_cpu_data\">fgraph_cpu_data</a> *<a class=\"id\" href=\"#cpu_data\">cpu_data</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_data\">cpu_data</a> = <a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#cpu_data\">cpu_data</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Comments display at + 1 to depth. This is the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * return from a function, we now want the comments</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * to display at the same level of the bracket.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_data\">cpu_data</a>-><a class=\"id\" href=\"#depth\">depth</a> = <a class=\"id\" href=\"#trace\">trace</a>-><a class=\"id\" href=\"#depth\">depth</a> - 1;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#trace\">trace</a>-><a class=\"id\" href=\"#depth\">depth</a> &lt; <a class=\"id\" href=\"#FTRACE_RETFUNC_DEPTH\">FTRACE_RETFUNC_DEPTH</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu_data\">cpu_data</a>-><a class=\"id\" href=\"#enter_funcs\">enter_funcs</a>[<a class=\"id\" href=\"#trace\">trace</a>-><a class=\"id\" href=\"#depth\">depth</a>] != <a class=\"id\" href=\"#trace\">trace</a>-><a class=\"id\" href=\"#func\">func</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#func_match\">func_match</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_data\">cpu_data</a>-><a class=\"id\" href=\"#enter_funcs\">enter_funcs</a>[<a class=\"id\" href=\"#trace\">trace</a>-><a class=\"id\" href=\"#depth\">depth</a>] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#print_graph_prologue\">print_graph_prologue</a>(<a class=\"id\" href=\"#iter\">iter</a>, <a class=\"id\" href=\"#s\">s</a>, 0, 0, <a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Overhead */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#print_graph_overhead\">print_graph_overhead</a>(<a class=\"id\" href=\"#duration\">duration</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Duration */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#TRACE_GRAPH_PRINT_DURATION\">TRACE_GRAPH_PRINT_DURATION</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#print_graph_duration\">print_graph_duration</a>(<a class=\"id\" href=\"#duration\">duration</a>, <a class=\"id\" href=\"#s\">s</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Closing brace */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#trace\">trace</a>-><a class=\"id\" href=\"#depth\">depth</a> * <a class=\"id\" href=\"#TRACE_GRAPH_INDENT\">TRACE_GRAPH_INDENT</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \" \");", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the return function does not have a matching entry,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * then the entry was lost. Instead of just printing</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the '}' and letting the user guess what function this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * belongs to, write out the function name.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#func_match\">func_match</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"}\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"} /* %ps */\\n\", (void *)<a class=\"id\" href=\"#trace\">trace</a>-><a class=\"id\" href=\"#func\">func</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Overrun */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#TRACE_GRAPH_PRINT_OVERRUN\">TRACE_GRAPH_PRINT_OVERRUN</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \" (Overruns: %lu)\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace\">trace</a>-><a class=\"id\" href=\"#overrun\">overrun</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#print_graph_irq\">print_graph_irq</a>(<a class=\"id\" href=\"#iter\">iter</a>, <a class=\"id\" href=\"#trace\">trace</a>-><a class=\"id\" href=\"#func\">func</a>, <a class=\"id\" href=\"#TRACE_GRAPH_RET\">TRACE_GRAPH_RET</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#pid\">pid</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_HANDLED\">TRACE_TYPE_HANDLED</a>;", 
"}", 
"", 
"static enum <a class=\"id\" href=\"#print_line_t\">print_line_t</a>", 
"<a class=\"id\" href=\"#print_graph_comment\">print_graph_comment</a>(struct <a class=\"id\" href=\"#trace_seq\">trace_seq</a> *<a class=\"id\" href=\"#s\">s</a>, struct <a class=\"id\" href=\"#trace_entry\">trace_entry</a> *<a class=\"id\" href=\"#ent\">ent</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#trace_iterator\">trace_iterator</a> *<a class=\"id\" href=\"#iter\">iter</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#sym_flags\">sym_flags</a> = (<a class=\"id\" href=\"#trace_flags\">trace_flags</a> &amp; <a class=\"id\" href=\"#TRACE_ITER_SYM_MASK\">TRACE_ITER_SYM_MASK</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fgraph_data\">fgraph_data</a> *<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_event\">trace_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#depth\">depth</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#data\">data</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#depth\">depth</a> = <a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#cpu_data\">cpu_data</a>, <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cpu\">cpu</a>)-><a class=\"id\" href=\"#depth\">depth</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#print_graph_prologue\">print_graph_prologue</a>(<a class=\"id\" href=\"#iter\">iter</a>, <a class=\"id\" href=\"#s\">s</a>, 0, 0, <a class=\"id\" href=\"#flags\">flags</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* No overhead */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#print_graph_overhead\">print_graph_overhead</a>(-1, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* No time */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#TRACE_GRAPH_PRINT_DURATION\">TRACE_GRAPH_PRINT_DURATION</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"            |  \");", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Indentation */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#depth\">depth</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; (<a class=\"id\" href=\"#depth\">depth</a> + 1) * <a class=\"id\" href=\"#TRACE_GRAPH_INDENT\">TRACE_GRAPH_INDENT</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \" \");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* The comment */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"/* \");", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#TRACE_BPRINT\">TRACE_BPRINT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_print_bprintk_msg_only\">trace_print_bprintk_msg_only</a>(<a class=\"id\" href=\"#iter\">iter</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> != <a class=\"id\" href=\"#TRACE_TYPE_HANDLED\">TRACE_TYPE_HANDLED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#TRACE_PRINT\">TRACE_PRINT</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_print_printk_msg_only\">trace_print_printk_msg_only</a>(<a class=\"id\" href=\"#iter\">iter</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> != <a class=\"id\" href=\"#TRACE_TYPE_HANDLED\">TRACE_TYPE_HANDLED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#ftrace_find_event\">ftrace_find_event</a>(<a class=\"id\" href=\"#ent\">ent</a>-><a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#event\">event</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_UNHANDLED\">TRACE_TYPE_UNHANDLED</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#funcs\">funcs</a>-><a class=\"id\" href=\"#trace\">trace</a>(<a class=\"id\" href=\"#iter\">iter</a>, <a class=\"id\" href=\"#sym_flags\">sym_flags</a>, <a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> != <a class=\"id\" href=\"#TRACE_TYPE_HANDLED\">TRACE_TYPE_HANDLED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Strip ending newline */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#buffer\">buffer</a>[<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#len\">len</a> - 1] == '\\n') {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#buffer\">buffer</a>[<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#len\">len</a> - 1] = '\\0';", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#len\">len</a>--;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#trace_seq_printf\">trace_seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \" */\\n\");", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_PARTIAL_LINE\">TRACE_TYPE_PARTIAL_LINE</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_HANDLED\">TRACE_TYPE_HANDLED</a>;", 
"}", 
"", 
"", 
"enum <a class=\"id\" href=\"#print_line_t\">print_line_t</a>", 
"<a class=\"id\" href=\"#print_graph_function_flags\">print_graph_function_flags</a>(struct <a class=\"id\" href=\"#trace_iterator\">trace_iterator</a> *<a class=\"id\" href=\"#iter\">iter</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_graph_ent_entry\">ftrace_graph_ent_entry</a> *<a class=\"id\" href=\"#field\">field</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fgraph_data\">fgraph_data</a> *<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_entry\">trace_entry</a> *<a class=\"id\" href=\"#entry\">entry</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#ent\">ent</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_seq\">trace_seq</a> *<a class=\"id\" href=\"#s\">s</a> = &amp;<a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#seq\">seq</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#data\">data</a> && <a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#cpu_data\">cpu_data</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)-><a class=\"id\" href=\"#ignore\">ignore</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#cpu_data\">cpu_data</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)-><a class=\"id\" href=\"#ignore\">ignore</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_HANDLED\">TRACE_TYPE_HANDLED</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the last output failed, there's a possibility we need</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to print out the missing entry which would never go out.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#data\">data</a> && <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#failed\">failed</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#field\">field</a> = &amp;<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#ent\">ent</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#print_graph_entry\">print_graph_entry</a>(<a class=\"id\" href=\"#field\">field</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#iter\">iter</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == <a class=\"id\" href=\"#TRACE_TYPE_HANDLED\">TRACE_TYPE_HANDLED</a> && <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cpu\">cpu</a> != <a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#cpu_data\">cpu_data</a>, <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cpu\">cpu</a>)-><a class=\"id\" href=\"#ignore\">ignore</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#TRACE_TYPE_NO_CONSUME\">TRACE_TYPE_NO_CONSUME</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#entry\">entry</a>-><a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#TRACE_GRAPH_ENT\">TRACE_GRAPH_ENT</a>: {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * print_graph_entry() may consume the current event,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * thus @field may become invalid, so we need to save it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * sizeof(struct ftrace_graph_ent_entry) is very small,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * it can be safely saved at the stack.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_graph_ent_entry\">ftrace_graph_ent_entry</a> <a class=\"id\" href=\"#saved\">saved</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_assign_type\">trace_assign_type</a>(<a class=\"id\" href=\"#field\">field</a>, <a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#saved\">saved</a> = *<a class=\"id\" href=\"#field\">field</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#print_graph_entry\">print_graph_entry</a>(&amp;<a class=\"id\" href=\"#saved\">saved</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#iter\">iter</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#TRACE_GRAPH_RET\">TRACE_GRAPH_RET</a>: {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#ftrace_graph_ret_entry\">ftrace_graph_ret_entry</a> *<a class=\"id\" href=\"#field\">field</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_assign_type\">trace_assign_type</a>(<a class=\"id\" href=\"#field\">field</a>, <a class=\"id\" href=\"#entry\">entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#print_graph_return\">print_graph_return</a>(&amp;<a class=\"id\" href=\"#field\">field</a>-><a class=\"id\" href=\"#ret\">ret</a>, <a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#iter\">iter</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#TRACE_STACK\">TRACE_STACK</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#TRACE_FN\">TRACE_FN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* dont trace stack and functions as comments */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_UNHANDLED\">TRACE_TYPE_UNHANDLED</a>;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#print_graph_comment\">print_graph_comment</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#entry\">entry</a>, <a class=\"id\" href=\"#iter\">iter</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#TRACE_TYPE_HANDLED\">TRACE_TYPE_HANDLED</a>;", 
"}", 
"", 
"static enum <a class=\"id\" href=\"#print_line_t\">print_line_t</a>", 
"<a class=\"id\" href=\"#print_graph_function\">print_graph_function</a>(struct <a class=\"id\" href=\"#trace_iterator\">trace_iterator</a> *<a class=\"id\" href=\"#iter\">iter</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#print_graph_function_flags\">print_graph_function_flags</a>(<a class=\"id\" href=\"#iter\">iter</a>, <a class=\"id\" href=\"#tracer_flags\">tracer_flags</a>.<a class=\"id\" href=\"#val\">val</a>);", 
"}", 
"", 
"static enum <a class=\"id\" href=\"#print_line_t\">print_line_t</a>", 
"<a class=\"id\" href=\"#print_graph_function_event\">print_graph_function_event</a>(struct <a class=\"id\" href=\"#trace_iterator\">trace_iterator</a> *<a class=\"id\" href=\"#iter\">iter</a>, int <a class=\"id\" href=\"#flags\">flags</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#trace_event\">trace_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#print_graph_function\">print_graph_function</a>(<a class=\"id\" href=\"#iter\">iter</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#print_lat_header\">print_lat_header</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>static const char <a class=\"id\" href=\"#spaces\">spaces</a>[] = \"                \"<span class=\"ts\"/><span class=\"comment\">/* 16 spaces */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>\"    \"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 4 spaces */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>\"                 \";<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* 17 spaces */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#size\">size</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#TRACE_GRAPH_PRINT_ABS_TIME\">TRACE_GRAPH_PRINT_ABS_TIME</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> += 16;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#TRACE_GRAPH_PRINT_CPU\">TRACE_GRAPH_PRINT_CPU</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> += 4;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#TRACE_GRAPH_PRINT_PROC\">TRACE_GRAPH_PRINT_PROC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> += 17;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"#%.*s  _-----=> irqs-off        \\n\", <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#spaces\">spaces</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"#%.*s / _----=> need-resched    \\n\", <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#spaces\">spaces</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"#%.*s| / _---=> hardirq/softirq \\n\", <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#spaces\">spaces</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"#%.*s|| / _--=> preempt-depth   \\n\", <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#spaces\">spaces</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"#%.*s||| / _-=> lock-depth      \\n\", <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#spaces\">spaces</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"#%.*s|||| /                     \\n\", <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#spaces\">spaces</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#print_graph_headers_flags\">print_graph_headers_flags</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#lat\">lat</a> = <a class=\"id\" href=\"#trace_flags\">trace_flags</a> &amp; <a class=\"id\" href=\"#TRACE_ITER_LATENCY_FMT\">TRACE_ITER_LATENCY_FMT</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#lat\">lat</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#print_lat_header\">print_lat_header</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* 1st line */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"#\");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#TRACE_GRAPH_PRINT_ABS_TIME\">TRACE_GRAPH_PRINT_ABS_TIME</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"     TIME       \");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#TRACE_GRAPH_PRINT_CPU\">TRACE_GRAPH_PRINT_CPU</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \" CPU\");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#TRACE_GRAPH_PRINT_PROC\">TRACE_GRAPH_PRINT_PROC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"  TASK/PID       \");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#lat\">lat</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"|||||\");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#TRACE_GRAPH_PRINT_DURATION\">TRACE_GRAPH_PRINT_DURATION</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"  DURATION   \");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"               FUNCTION CALLS\\n\");", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* 2nd line */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"#\");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#TRACE_GRAPH_PRINT_ABS_TIME\">TRACE_GRAPH_PRINT_ABS_TIME</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"      |         \");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#TRACE_GRAPH_PRINT_CPU\">TRACE_GRAPH_PRINT_CPU</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \" |  \");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#TRACE_GRAPH_PRINT_PROC\">TRACE_GRAPH_PRINT_PROC</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"   |    |        \");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#lat\">lat</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"|||||\");", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#TRACE_GRAPH_PRINT_DURATION\">TRACE_GRAPH_PRINT_DURATION</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"   |   |      \");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#seq_printf\">seq_printf</a>(<a class=\"id\" href=\"#s\">s</a>, \"               |   |   |   |\\n\");", 
"}", 
"", 
"void <a class=\"id\" href=\"#print_graph_headers\">print_graph_headers</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#s\">s</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#print_graph_headers_flags\">print_graph_headers_flags</a>(<a class=\"id\" href=\"#s\">s</a>, <a class=\"id\" href=\"#tracer_flags\">tracer_flags</a>.<a class=\"id\" href=\"#val\">val</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#graph_trace_open\">graph_trace_open</a>(struct <a class=\"id\" href=\"#trace_iterator\">trace_iterator</a> *<a class=\"id\" href=\"#iter\">iter</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* pid and depth on the last trace processed */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fgraph_data\">fgraph_data</a> *<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#data\">data</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#data\">data</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_err\">out_err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#cpu_data\">cpu_data</a> = <a class=\"id\" href=\"#alloc_percpu\">alloc_percpu</a>(struct <a class=\"id\" href=\"#fgraph_cpu_data\">fgraph_cpu_data</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#cpu_data\">cpu_data</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_err_free\">out_err_free</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pid_t\">pid_t</a> *<a class=\"id\" href=\"#pid\">pid</a> = &amp;(<a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#cpu_data\">cpu_data</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)-><a class=\"id\" href=\"#last_pid\">last_pid</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>int *<a class=\"id\" href=\"#depth\">depth</a> = &amp;(<a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#cpu_data\">cpu_data</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)-><a class=\"id\" href=\"#depth\">depth</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>int *<a class=\"id\" href=\"#ignore\">ignore</a> = &amp;(<a class=\"id\" href=\"#per_cpu_ptr\">per_cpu_ptr</a>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#cpu_data\">cpu_data</a>, <a class=\"id\" href=\"#cpu\">cpu</a>)-><a class=\"id\" href=\"#ignore\">ignore</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#pid\">pid</a> = -1;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#depth\">depth</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ignore\">ignore</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#private\">private</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/>return;", 
"", 
" <a class=\"id\" href=\"#out_err_free\">out_err_free</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#data\">data</a>);", 
" <a class=\"id\" href=\"#out_err\">out_err</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"function graph tracer: not enough memory\\n\");", 
"}", 
"", 
"void <a class=\"id\" href=\"#graph_trace_close\">graph_trace_close</a>(struct <a class=\"id\" href=\"#trace_iterator\">trace_iterator</a> *<a class=\"id\" href=\"#iter\">iter</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fgraph_data\">fgraph_data</a> *<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#iter\">iter</a>-><a class=\"id\" href=\"#private\">private</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#data\">data</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_percpu\">free_percpu</a>(<a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#cpu_data\">cpu_data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#trace_event_functions\">trace_event_functions</a> <a class=\"id\" href=\"#graph_functions\">graph_functions</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#trace\">trace</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#print_graph_function_event\">print_graph_function_event</a>,", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#trace_event\">trace_event</a> <a class=\"id\" href=\"#graph_trace_entry_event\">graph_trace_entry_event</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#type\">type</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#TRACE_GRAPH_ENT\">TRACE_GRAPH_ENT</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#funcs\">funcs</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#graph_functions\">graph_functions</a>,", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#trace_event\">trace_event</a> <a class=\"id\" href=\"#graph_trace_ret_event\">graph_trace_ret_event</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#type\">type</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#TRACE_GRAPH_RET\">TRACE_GRAPH_RET</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#funcs\">funcs</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#graph_functions\">graph_functions</a>", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#tracer\">tracer</a> <a class=\"id\" href=\"#graph_trace\">graph_trace</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>= \"function_graph\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#open\">open</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#graph_trace_open\">graph_trace_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#pipe_open\">pipe_open</a><span class=\"ts\"/>= <a class=\"id\" href=\"#graph_trace_open\">graph_trace_open</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#close\">close</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#graph_trace_close\">graph_trace_close</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#pipe_close\">pipe_close</a><span class=\"ts\"/>= <a class=\"id\" href=\"#graph_trace_close\">graph_trace_close</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#wait_pipe\">wait_pipe</a><span class=\"ts\"/>= <a class=\"id\" href=\"#poll_wait_pipe\">poll_wait_pipe</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#init\">init</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#graph_trace_init\">graph_trace_init</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#reset\">reset</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#graph_trace_reset\">graph_trace_reset</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#print_line\">print_line</a><span class=\"ts\"/>= <a class=\"id\" href=\"#print_graph_function\">print_graph_function</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#print_header\">print_header</a><span class=\"ts\"/>= <a class=\"id\" href=\"#print_graph_headers\">print_graph_headers</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#flags\">flags</a><span class=\"ts\"/><span class=\"ts\"/>= &amp;<a class=\"id\" href=\"#tracer_flags\">tracer_flags</a>,", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FTRACE_SELFTEST\">CONFIG_FTRACE_SELFTEST</a>", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#selftest\">selftest</a><span class=\"ts\"/>= <a class=\"id\" href=\"#trace_selftest_startup_function_graph\">trace_selftest_startup_function_graph</a>,", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"static <a class=\"id\" href=\"#__init\">__init</a> int <a class=\"id\" href=\"#init_graph_trace\">init_graph_trace</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_bytes_for_cpu\">max_bytes_for_cpu</a> = <a class=\"id\" href=\"#snprintf\">snprintf</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, 0, \"%d\", <a class=\"id\" href=\"#nr_cpu_ids\">nr_cpu_ids</a> - 1);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#register_ftrace_event\">register_ftrace_event</a>(&amp;<a class=\"id\" href=\"#graph_trace_entry_event\">graph_trace_entry_event</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"Warning: could not register graph trace events\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#register_ftrace_event\">register_ftrace_event</a>(&amp;<a class=\"id\" href=\"#graph_trace_ret_event\">graph_trace_ret_event</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_warning\">pr_warning</a>(\"Warning: could not register graph trace events\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#register_tracer\">register_tracer</a>(&amp;<a class=\"id\" href=\"#graph_trace\">graph_trace</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#device_initcall\">device_initcall</a>(<a class=\"id\" href=\"#init_graph_trace\">init_graph_trace</a>);", 
];
xr_frag_insert('l/25/cceaea97c07a2dbbca49a962206af87fc931fe.xr', __xr_tmp);
