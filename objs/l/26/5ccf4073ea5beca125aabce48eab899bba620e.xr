var __xr_tmp = [
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#current_count\">current_count</a> &lt; 2)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#status\">status</a> = -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"      <a class=\"id\" href=\"#end\">end</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#buffer\">buffer</a>.<a class=\"id\" href=\"#pointer\">pointer</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#status\">status</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#acpi_processor_power_verify_c3\">acpi_processor_power_verify_c3</a>(struct <a class=\"id\" href=\"#acpi_processor\">acpi_processor</a> *<a class=\"id\" href=\"#pr\">pr</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#acpi_processor_cx\">acpi_processor_cx</a> *<a class=\"id\" href=\"#cx\">cx</a>)", 
"{", 
"<span class=\"ts\"/>static int <a class=\"id\" href=\"#bm_check_flag\">bm_check_flag</a> = -1;", 
"<span class=\"ts\"/>static int <a class=\"id\" href=\"#bm_control_flag\">bm_control_flag</a> = -1;", 
"", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#address\">address</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * PIIX4 Erratum #18: We don't support C3 when Type-F (fast)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * DMA transfers are used by any ISA device to avoid livelock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note that we could disable Type-F DMA (as recommended by</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the erratum), but this is known to disrupt certain ISA</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * devices thus we take the conservative approach.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#errata\">errata</a>.<a class=\"id\" href=\"#piix4\">piix4</a>.<a class=\"id\" href=\"#fdma\">fdma</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_INFO\">ACPI_DB_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"C3 not supported on PIIX4 with Type-F DMA\\n\"));", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* All the logic here assumes flags.bm_check is same across all CPUs */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bm_check_flag\">bm_check_flag</a> == -1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Determine whether bm_check is needed based on CPU  */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_processor_power_init_bm_check\">acpi_processor_power_init_bm_check</a>(&amp;(<a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#flags\">flags</a>), <a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#id\">id</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bm_check_flag\">bm_check_flag</a> = <a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#flags\">flags</a>.<a class=\"id\" href=\"#bm_check\">bm_check</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bm_control_flag\">bm_control_flag</a> = <a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#flags\">flags</a>.<a class=\"id\" href=\"#bm_control\">bm_control</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#flags\">flags</a>.<a class=\"id\" href=\"#bm_check\">bm_check</a> = <a class=\"id\" href=\"#bm_check_flag\">bm_check_flag</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#flags\">flags</a>.<a class=\"id\" href=\"#bm_control\">bm_control</a> = <a class=\"id\" href=\"#bm_control_flag\">bm_control_flag</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#flags\">flags</a>.<a class=\"id\" href=\"#bm_check\">bm_check</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#flags\">flags</a>.<a class=\"id\" href=\"#bm_control\">bm_control</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#flags\">flags</a>.<a class=\"id\" href=\"#has_cst\">has_cst</a> != 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* bus mastering control is necessary */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_INFO\">ACPI_DB_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"C3 support requires BM control\\n\"));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Here we enter C3 without bus mastering */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_INFO\">ACPI_DB_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"C3 support without BM control\\n\"));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * WBINVD should be set in fadt, for C3 state to be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * supported on when bm_check is not required.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!(<a class=\"id\" href=\"#acpi_gbl_FADT\">acpi_gbl_FADT</a>.<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#ACPI_FADT_WBINVD\">ACPI_FADT_WBINVD</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ACPI_DEBUG_PRINT\">ACPI_DEBUG_PRINT</a>((<a class=\"id\" href=\"#ACPI_DB_INFO\">ACPI_DB_INFO</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"Cache invalidation should work properly\"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \" for C3 to be enabled on SMP systems\\n\"));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Otherwise we've met all of our C3 requirements.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Normalize the C3 latency to expidite policy.  Enable</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * checking of bus mastering status (bm_check) so we can</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * use this in our C3 policy</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#valid\">valid</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#latency_ticks\">latency_ticks</a> = <a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#latency\">latency</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * On older chipsets, BM_RLD needs to be set</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in order for Bus Master activity to wake the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * system from C3.  Newer chipsets handle DMA</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * during C3 automatically and BM_RLD is a NOP.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In either case, the proper way to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * handle BM_RLD is to set it and leave it set.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_write_bit_register\">acpi_write_bit_register</a>(<a class=\"id\" href=\"#ACPI_BITREG_BUS_MASTER_RLD\">ACPI_BITREG_BUS_MASTER_RLD</a>, 1);", 
"", 
"<span class=\"ts\"/>return;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#acpi_processor_power_verify\">acpi_processor_power_verify</a>(struct <a class=\"id\" href=\"#acpi_processor\">acpi_processor</a> *<a class=\"id\" href=\"#pr\">pr</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#working\">working</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#power\">power</a>.<a class=\"id\" href=\"#timer_broadcast_on_state\">timer_broadcast_on_state</a> = <a class=\"id\" href=\"#INT_MAX\">INT_MAX</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#ACPI_PROCESSOR_MAX_POWER\">ACPI_PROCESSOR_MAX_POWER</a> && <a class=\"id\" href=\"#i\">i</a> <= <a class=\"id\" href=\"#max_cstate\">max_cstate</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#acpi_processor_cx\">acpi_processor_cx</a> *<a class=\"id\" href=\"#cx\">cx</a> = &amp;<a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#power\">power</a>.<a class=\"id\" href=\"#states\">states</a>[<a class=\"id\" href=\"#i\">i</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#type\">type</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_STATE_C1\">ACPI_STATE_C1</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#valid\">valid</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_STATE_C2\">ACPI_STATE_C2</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#address\">address</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#valid\">valid</a> = 1; ", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#latency_ticks\">latency_ticks</a> = <a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#latency\">latency</a>; <span class=\"comment\">/* Normalize latency */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#ACPI_STATE_C3\">ACPI_STATE_C3</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#acpi_processor_power_verify_c3\">acpi_processor_power_verify_c3</a>(<a class=\"id\" href=\"#pr\">pr</a>, <a class=\"id\" href=\"#cx\">cx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#valid\">valid</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lapic_timer_check_state\">lapic_timer_check_state</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#pr\">pr</a>, <a class=\"id\" href=\"#cx\">cx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tsc_check_state\">tsc_check_state</a>(<a class=\"id\" href=\"#cx\">cx</a>-><a class=\"id\" href=\"#type\">type</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#working\">working</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#lapic_timer_propagate_broadcast\">lapic_timer_propagate_broadcast</a>(<a class=\"id\" href=\"#pr\">pr</a>);", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#working\">working</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#acpi_processor_get_power_info\">acpi_processor_get_power_info</a>(struct <a class=\"id\" href=\"#acpi_processor\">acpi_processor</a> *<a class=\"id\" href=\"#pr\">pr</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#result\">result</a>;", 
"", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* NOTE: the idle thread may not be running while calling</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this function */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Zero initialize all the C-states info. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#power\">power</a>.<a class=\"id\" href=\"#states\">states</a>, 0, sizeof(<a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#power\">power</a>.<a class=\"id\" href=\"#states\">states</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#acpi_processor_get_power_info_cst\">acpi_processor_get_power_info_cst</a>(<a class=\"id\" href=\"#pr\">pr</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a> == -<a class=\"id\" href=\"#ENODEV\">ENODEV</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#acpi_processor_get_power_info_fadt\">acpi_processor_get_power_info_fadt</a>(<a class=\"id\" href=\"#pr\">pr</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#result\">result</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#acpi_processor_get_power_info_default\">acpi_processor_get_power_info_default</a>(<a class=\"id\" href=\"#pr\">pr</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr\">pr</a>-><a class=\"id\" href=\"#power\">power</a>.<a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#acpi_processor_power_verify\">acpi_processor_power_verify</a>(<a class=\"id\" href=\"#pr\">pr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
];
xr_frag_insert('l/26/5ccf4073ea5beca125aabce48eab899bba620e.xr', __xr_tmp);
