var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/mm/page_alloc.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Manages the free list, the system allocates free pages here.</span>", 
"<span class=\"comment\"> *  Note that kmalloc() lives in slab.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 1991, 1992, 1993, 1994  Linus Torvalds</span>", 
"<span class=\"comment\"> *  Swap reorganised 29.12.95, Stephen Tweedie</span>", 
"<span class=\"comment\"> *  Support of BIGMEM added by Gerhard Wichert, Siemens AG, July 1999</span>", 
"<span class=\"comment\"> *  Reshaped it to be a zoned allocator, Ingo Molnar, Red Hat, 1999</span>", 
"<span class=\"comment\"> *  Discontiguous memory support, Kanoj Sarcar, SGI, Nov 1999</span>", 
"<span class=\"comment\"> *  Zone balancing, Kanoj Sarcar, SGI, Jan 2000</span>", 
"<span class=\"comment\"> *  Per cpu hot/cold page lists, bulk allocation, Martin J. Bligh, Sept 2002</span>", 
"<span class=\"comment\"> *          (lots of bits borrowed from Ingo Molnar &amp; Andrew Morton)</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stddef\">stddef</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#swap\">swap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pagemap\">pagemap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#jiffies\">jiffies</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bootmem\">bootmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#compiler\">compiler</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kmemcheck\">kmemcheck</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#suspend\">suspend</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pagevec\">pagevec</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#blkdev\">blkdev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#oom\">oom</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#notifier\">notifier</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#topology\">topology</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sysctl\">sysctl</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpuset\">cpuset</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#memory_hotplug\">memory_hotplug</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#nodemask\">nodemask</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#vmalloc\">vmalloc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mempolicy\">mempolicy</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stop_machine\">stop_machine</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sort\">sort</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pfn\">pfn</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#backing\">backing</a>-<a class=\"id\" href=\"#dev\">dev</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fault\">fault</a>-<a class=\"id\" href=\"#inject\">inject</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#page\">page</a>-<a class=\"id\" href=\"#isolation\">isolation</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#page_cgroup\">page_cgroup</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#debugobjects\">debugobjects</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kmemleak\">kmemleak</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#memory\">memory</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#compaction\">compaction</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#trace\">trace</a>/<a class=\"id\" href=\"#events\">events</a>/<a class=\"id\" href=\"#kmem\">kmem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ftrace_event\">ftrace_event</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#tlbflush\">tlbflush</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#div64\">div64</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"internal.h\"", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_USE_PERCPU_NUMA_NODE_ID\">CONFIG_USE_PERCPU_NUMA_NODE_ID</a>", 
"<a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(int, <a class=\"id\" href=\"#numa_node\">numa_node</a>);", 
"<a class=\"id\" href=\"#EXPORT_PER_CPU_SYMBOL\">EXPORT_PER_CPU_SYMBOL</a>(<a class=\"id\" href=\"#numa_node\">numa_node</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HAVE_MEMORYLESS_NODES\">CONFIG_HAVE_MEMORYLESS_NODES</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * N.B., Do NOT reference the '_numa_mem_' per cpu variable directly.</span>", 
"<span class=\"comment\"> * It will not be defined when CONFIG_HAVE_MEMORYLESS_NODES is not defined.</span>", 
"<span class=\"comment\"> * Use the accessor functions set_numa_mem(), numa_mem_id() and cpu_to_mem()</span>", 
"<span class=\"comment\"> * defined in &lt;linux/topology.h&gt;.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(int, <a class=\"id\" href=\"#_numa_mem_\">_numa_mem_</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Kernel \"local memory\" node */</span>", 
"<a class=\"id\" href=\"#EXPORT_PER_CPU_SYMBOL\">EXPORT_PER_CPU_SYMBOL</a>(<a class=\"id\" href=\"#_numa_mem_\">_numa_mem_</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Array of node states.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#nodemask_t\">nodemask_t</a> <a class=\"id\" href=\"#node_states\">node_states</a>[<a class=\"id\" href=\"#NR_NODE_STATES\">NR_NODE_STATES</a>] <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = {", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#N_POSSIBLE\">N_POSSIBLE</a>] = <a class=\"id\" href=\"#NODE_MASK_ALL\">NODE_MASK_ALL</a>,", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#N_ONLINE\">N_ONLINE</a>] = { { [0] = 1UL } },", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_NUMA\">CONFIG_NUMA</a>", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#N_NORMAL_MEMORY\">N_NORMAL_MEMORY</a>] = { { [0] = 1UL } },", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HIGHMEM\">CONFIG_HIGHMEM</a>", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#N_HIGH_MEMORY\">N_HIGH_MEMORY</a>] = { { [0] = 1UL } },", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#N_CPU\">N_CPU</a>] = { { [0] = 1UL } },", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* NUMA */</span>", 
"};", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#node_states\">node_states</a>);", 
"", 
"unsigned long <a class=\"id\" href=\"#totalram_pages\">totalram_pages</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"unsigned long <a class=\"id\" href=\"#totalreserve_pages\">totalreserve_pages</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"int <a class=\"id\" href=\"#percpu_pagelist_fraction\">percpu_pagelist_fraction</a>;", 
"<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_allowed_mask\">gfp_allowed_mask</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = <a class=\"id\" href=\"#GFP_BOOT_MASK\">GFP_BOOT_MASK</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PM_SLEEP\">CONFIG_PM_SLEEP</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The following functions are used by the suspend/hibernate code to temporarily</span>", 
"<span class=\"comment\"> * change gfp_allowed_mask in order to avoid using I/O during memory allocations</span>", 
"<span class=\"comment\"> * while devices are suspended.  To avoid races with the suspend/hibernate code,</span>", 
"<span class=\"comment\"> * they should always be called with pm_mutex held (gfp_allowed_mask also should</span>", 
"<span class=\"comment\"> * only be modified with pm_mutex held, unless the suspend/hibernate code is</span>", 
"<span class=\"comment\"> * guaranteed not to run in parallel with that modification).</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#set_gfp_allowed_mask\">set_gfp_allowed_mask</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#mutex_is_locked\">mutex_is_locked</a>(&amp;<a class=\"id\" href=\"#pm_mutex\">pm_mutex</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gfp_allowed_mask\">gfp_allowed_mask</a> = <a class=\"id\" href=\"#mask\">mask</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#clear_gfp_allowed_mask\">clear_gfp_allowed_mask</a>(<a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#mask\">mask</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#gfp_allowed_mask\">gfp_allowed_mask</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(!<a class=\"id\" href=\"#mutex_is_locked\">mutex_is_locked</a>(&amp;<a class=\"id\" href=\"#pm_mutex\">pm_mutex</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#gfp_allowed_mask\">gfp_allowed_mask</a> &= ~<a class=\"id\" href=\"#mask\">mask</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_PM_SLEEP */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HUGETLB_PAGE_SIZE_VARIABLE\">CONFIG_HUGETLB_PAGE_SIZE_VARIABLE</a>", 
"int <a class=\"id\" href=\"#pageblock_order\">pageblock_order</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static void <a class=\"id\" href=\"#__free_pages_ok\">__free_pages_ok</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, unsigned int <a class=\"id\" href=\"#order\">order</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * results with 256, 32 in the lowmem_reserve sysctl:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>1G machine -&gt; (16M dma, 800M-16M normal, 1G-800M high)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>1G machine -&gt; (16M dma, 784M normal, 224M high)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>NORMAL allocation will leave 784M/256 of ram reserved in the ZONE_DMA</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>HIGHMEM allocation will leave 224M/32 of ram reserved in ZONE_NORMAL</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>HIGHMEM allocation will (224M+784M)/256 of ram reserved in ZONE_DMA</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * TBD: should special case ZONE_DMA32 machines here - in those we normally</span>", 
"<span class=\"comment\"> * don't need any ZONE_NORMAL reservation</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#sysctl_lowmem_reserve_ratio\">sysctl_lowmem_reserve_ratio</a>[<a class=\"id\" href=\"#MAX_NR_ZONES\">MAX_NR_ZONES</a>-1] = {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_ZONE_DMA\">CONFIG_ZONE_DMA</a>", 
"<span class=\"ts\"/> 256,", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_ZONE_DMA32\">CONFIG_ZONE_DMA32</a>", 
"<span class=\"ts\"/> 256,", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HIGHMEM\">CONFIG_HIGHMEM</a>", 
"<span class=\"ts\"/> 32,", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/> 32,", 
"};", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#totalram_pages\">totalram_pages</a>);", 
"", 
"static char * const <a class=\"id\" href=\"#zone_names\">zone_names</a>[<a class=\"id\" href=\"#MAX_NR_ZONES\">MAX_NR_ZONES</a>] = {", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_ZONE_DMA\">CONFIG_ZONE_DMA</a>", 
"<span class=\"ts\"/> \"DMA\",", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_ZONE_DMA32\">CONFIG_ZONE_DMA32</a>", 
"<span class=\"ts\"/> \"DMA32\",", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/> \"Normal\",", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HIGHMEM\">CONFIG_HIGHMEM</a>", 
"<span class=\"ts\"/> \"HighMem\",", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/> \"Movable\",", 
"};", 
"", 
"int <a class=\"id\" href=\"#min_free_kbytes\">min_free_kbytes</a> = 1024;", 
"", 
"static unsigned long <a class=\"id\" href=\"#__meminitdata\">__meminitdata</a> <a class=\"id\" href=\"#nr_kernel_pages\">nr_kernel_pages</a>;", 
"static unsigned long <a class=\"id\" href=\"#__meminitdata\">__meminitdata</a> <a class=\"id\" href=\"#nr_all_pages\">nr_all_pages</a>;", 
"static unsigned long <a class=\"id\" href=\"#__meminitdata\">__meminitdata</a> <a class=\"id\" href=\"#dma_reserve\">dma_reserve</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_ARCH_POPULATES_NODE_MAP\">CONFIG_ARCH_POPULATES_NODE_MAP</a>", 
"  <span class=\"comment\">/*</span>", 
"<span class=\"comment\">   * MAX_ACTIVE_REGIONS determines the maximum number of distinct</span>", 
"<span class=\"comment\">   * ranges of memory (RAM) that may be registered with add_active_range().</span>", 
"<span class=\"comment\">   * Ranges passed to add_active_range() will be merged if possible</span>", 
"<span class=\"comment\">   * so the number of times add_active_range() can be called is</span>", 
"<span class=\"comment\">   * related to the number of nodes and the number of holes</span>", 
"<span class=\"comment\">   */</span>", 
"  #<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MAX_ACTIVE_REGIONS\">CONFIG_MAX_ACTIVE_REGIONS</a>", 
"    <span class=\"comment\">/* Allow an architecture to set MAX_ACTIVE_REGIONS to save memory */</span>", 
"    #<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_ACTIVE_REGIONS\">MAX_ACTIVE_REGIONS</a> <a class=\"id\" href=\"#CONFIG_MAX_ACTIVE_REGIONS\">CONFIG_MAX_ACTIVE_REGIONS</a>", 
"  #else", 
"    #if <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a> >= 32", 
"      <span class=\"comment\">/* If there can be many nodes, allow up to 50 holes per node */</span>", 
"      #<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_ACTIVE_REGIONS\">MAX_ACTIVE_REGIONS</a> (<a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>*50)", 
"    #else", 
"      <span class=\"comment\">/* By default, allow up to 256 distinct regions */</span>", 
"      #<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_ACTIVE_REGIONS\">MAX_ACTIVE_REGIONS</a> 256", 
"    #<a class=\"id\" href=\"#endif\">endif</a>", 
"  #<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"  static struct <a class=\"id\" href=\"#node_active_region\">node_active_region</a> <a class=\"id\" href=\"#__meminitdata\">__meminitdata</a> <a class=\"id\" href=\"#early_node_map\">early_node_map</a>[<a class=\"id\" href=\"#MAX_ACTIVE_REGIONS\">MAX_ACTIVE_REGIONS</a>];", 
"  static int <a class=\"id\" href=\"#__meminitdata\">__meminitdata</a> <a class=\"id\" href=\"#nr_nodemap_entries\">nr_nodemap_entries</a>;", 
"  static unsigned long <a class=\"id\" href=\"#__meminitdata\">__meminitdata</a> <a class=\"id\" href=\"#arch_zone_lowest_possible_pfn\">arch_zone_lowest_possible_pfn</a>[<a class=\"id\" href=\"#MAX_NR_ZONES\">MAX_NR_ZONES</a>];", 
"  static unsigned long <a class=\"id\" href=\"#__meminitdata\">__meminitdata</a> <a class=\"id\" href=\"#arch_zone_highest_possible_pfn\">arch_zone_highest_possible_pfn</a>[<a class=\"id\" href=\"#MAX_NR_ZONES\">MAX_NR_ZONES</a>];", 
"  static unsigned long <a class=\"id\" href=\"#__initdata\">__initdata</a> <a class=\"id\" href=\"#required_kernelcore\">required_kernelcore</a>;", 
"  static unsigned long <a class=\"id\" href=\"#__initdata\">__initdata</a> <a class=\"id\" href=\"#required_movablecore\">required_movablecore</a>;", 
"  static unsigned long <a class=\"id\" href=\"#__meminitdata\">__meminitdata</a> <a class=\"id\" href=\"#zone_movable_pfn\">zone_movable_pfn</a>[<a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>];", 
"", 
"  <span class=\"comment\">/* movable_zone is the \"real\" zone pages in ZONE_MOVABLE are taken from */</span>", 
"  int <a class=\"id\" href=\"#movable_zone\">movable_zone</a>;", 
"  <a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#movable_zone\">movable_zone</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_ARCH_POPULATES_NODE_MAP */</span>", 
"", 
"#if <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a> &gt; 1", 
"int <a class=\"id\" href=\"#nr_node_ids\">nr_node_ids</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = <a class=\"id\" href=\"#MAX_NUMNODES\">MAX_NUMNODES</a>;", 
"int <a class=\"id\" href=\"#nr_online_nodes\">nr_online_nodes</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = 1;", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#nr_node_ids\">nr_node_ids</a>);", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#nr_online_nodes\">nr_online_nodes</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"int <a class=\"id\" href=\"#page_group_by_mobility_disabled\">page_group_by_mobility_disabled</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"static void <a class=\"id\" href=\"#set_pageblock_migratetype\">set_pageblock_migratetype</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#migratetype\">migratetype</a>)", 
"{", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#page_group_by_mobility_disabled\">page_group_by_mobility_disabled</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#migratetype\">migratetype</a> = <a class=\"id\" href=\"#MIGRATE_UNMOVABLE\">MIGRATE_UNMOVABLE</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_pageblock_flags_group\">set_pageblock_flags_group</a>(<a class=\"id\" href=\"#page\">page</a>, (unsigned long)<a class=\"id\" href=\"#migratetype\">migratetype</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#PB_migrate\">PB_migrate</a>, <a class=\"id\" href=\"#PB_migrate_end\">PB_migrate_end</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#oom_killer_disabled\">oom_killer_disabled</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_DEBUG_VM\">CONFIG_DEBUG_VM</a>", 
"static int <a class=\"id\" href=\"#page_outside_zone_boundaries\">page_outside_zone_boundaries</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/>unsigned <a class=\"id\" href=\"#seq\">seq</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pfn\">pfn</a> = <a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#seq\">seq</a> = <a class=\"id\" href=\"#zone_span_seqbegin\">zone_span_seqbegin</a>(<a class=\"id\" href=\"#zone\">zone</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#pfn\">pfn</a> >= <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a> + <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#spanned_pages\">spanned_pages</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>else if (<a class=\"id\" href=\"#pfn\">pfn</a> &lt; <a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#zone_start_pfn\">zone_start_pfn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = 1;", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#zone_span_seqretry\">zone_span_seqretry</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#seq\">seq</a>));", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#page_is_consistent\">page_is_consistent</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pfn_valid_within\">pfn_valid_within</a>(<a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#page\">page</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#zone\">zone</a> != <a class=\"id\" href=\"#page_zone\">page_zone</a>(<a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Temporary debugging check for pages not lying within a given zone.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#bad_range\">bad_range</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page_outside_zone_boundaries\">page_outside_zone_boundaries</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#page_is_consistent\">page_is_consistent</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#page\">page</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#else", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#bad_range\">bad_range</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"static void <a class=\"id\" href=\"#bad_page\">bad_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>static unsigned long <a class=\"id\" href=\"#resume\">resume</a>;", 
"<span class=\"ts\"/>static unsigned long <a class=\"id\" href=\"#nr_shown\">nr_shown</a>;", 
"<span class=\"ts\"/>static unsigned long <a class=\"id\" href=\"#nr_unshown\">nr_unshown</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Don't complain about poisoned pages */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageHWPoison\">PageHWPoison</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__ClearPageBuddy\">__ClearPageBuddy</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Allow a burst of 60 reports, then keep quiet for that minute;</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * or allow a steady drip of one report per second.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_shown\">nr_shown</a> == 60) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#time_before\">time_before</a>(<a class=\"id\" href=\"#jiffies\">jiffies</a>, <a class=\"id\" href=\"#resume\">resume</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_unshown\">nr_unshown</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_unshown\">nr_unshown</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ALERT\">KERN_ALERT</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      \"BUG: Bad page state: %lu messages suppressed\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_unshown\">nr_unshown</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_unshown\">nr_unshown</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_shown\">nr_shown</a> = 0;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#nr_shown\">nr_shown</a>++ == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#resume\">resume</a> = <a class=\"id\" href=\"#jiffies\">jiffies</a> + 60 * <a class=\"id\" href=\"#HZ\">HZ</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ALERT\">KERN_ALERT</a> \"BUG: Bad page state in process %s  pfn:%05lx\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dump_page\">dump_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#dump_stack\">dump_stack</a>();", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* Leave bad fields for debug, except PageBuddy could make trouble */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ClearPageBuddy\">__ClearPageBuddy</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#add_taint\">add_taint</a>(<a class=\"id\" href=\"#TAINT_BAD_PAGE\">TAINT_BAD_PAGE</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Higher-order pages are called \"compound pages\".  They are structured thusly:</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The first PAGE_SIZE page is called the \"head page\".</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The remaining PAGE_SIZE pages are called \"tail pages\".</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * All pages have PG_compound set.  All pages have their -&gt;private pointing at</span>", 
"<span class=\"comment\"> * the head page (even the head page has this).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The first tail page's -&gt;lru.next holds the address of the compound page's</span>", 
"<span class=\"comment\"> * put_page() function.  Its -&gt;lru.prev holds the order of allocation.</span>", 
"<span class=\"comment\"> * This usage means that zero-order pages may not be compound.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static void <a class=\"id\" href=\"#free_compound_page\">free_compound_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__free_pages_ok\">__free_pages_ok</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#compound_order\">compound_order</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"}", 
"", 
"void <a class=\"id\" href=\"#prep_compound_page\">prep_compound_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, unsigned long <a class=\"id\" href=\"#order\">order</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_pages\">nr_pages</a> = 1 << <a class=\"id\" href=\"#order\">order</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_compound_page_dtor\">set_compound_page_dtor</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#free_compound_page\">free_compound_page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_compound_order\">set_compound_order</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__SetPageHead\">__SetPageHead</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_pages\">nr_pages</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#page\">page</a> + <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__SetPageTail\">__SetPageTail</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#first_page\">first_page</a> = <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static int <a class=\"id\" href=\"#destroy_compound_page\">destroy_compound_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, unsigned long <a class=\"id\" href=\"#order\">order</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#nr_pages\">nr_pages</a> = 1 << <a class=\"id\" href=\"#order\">order</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#bad\">bad</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#compound_order\">compound_order</a>(<a class=\"id\" href=\"#page\">page</a>) != <a class=\"id\" href=\"#order\">order</a>) ||", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#PageHead\">PageHead</a>(<a class=\"id\" href=\"#page\">page</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bad_page\">bad_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bad\">bad</a>++;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ClearPageHead\">__ClearPageHead</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#nr_pages\">nr_pages</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#page\">page</a> + <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#PageTail\">PageTail</a>(<a class=\"id\" href=\"#p\">p</a>) || (<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#first_page\">first_page</a> != <a class=\"id\" href=\"#page\">page</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bad_page\">bad_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bad\">bad</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__ClearPageTail\">__ClearPageTail</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bad\">bad</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#prep_zero_page\">prep_zero_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_flags\">gfp_flags</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * clear_highpage() will use KM_USER0, so it's a bug to use __GFP_ZERO</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and __GFP_HIGHMEM from hard or soft interrupt context.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>((<a class=\"id\" href=\"#gfp_flags\">gfp_flags</a> &amp; <a class=\"id\" href=\"#__GFP_HIGHMEM\">__GFP_HIGHMEM</a>) && <a class=\"id\" href=\"#in_interrupt\">in_interrupt</a>());", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; (1 << <a class=\"id\" href=\"#order\">order</a>); <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#clear_highpage\">clear_highpage</a>(<a class=\"id\" href=\"#page\">page</a> + <a class=\"id\" href=\"#i\">i</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#set_page_order\">set_page_order</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#order\">order</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_page_private\">set_page_private</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__SetPageBuddy\">__SetPageBuddy</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#rmv_page_order\">rmv_page_order</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ClearPageBuddy\">__ClearPageBuddy</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_page_private\">set_page_private</a>(<a class=\"id\" href=\"#page\">page</a>, 0);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Locate the struct page for both the matching buddy in our</span>", 
"<span class=\"comment\"> * pair (buddy1) and the combined O(n+1) page they form (page).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 1) Any buddy B1 will have an order O twin B2 which satisfies</span>", 
"<span class=\"comment\"> * the following equation:</span>", 
"<span class=\"comment\"> *     B2 = B1 ^ (1 &lt;&lt; O)</span>", 
"<span class=\"comment\"> * For example, if the starting buddy (buddy2) is #8 its order</span>", 
"<span class=\"comment\"> * 1 buddy is #10:</span>", 
"<span class=\"comment\"> *     B2 = 8 ^ (1 &lt;&lt; 1) = 8 ^ 2 = 10</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * 2) Any buddy B will have an order O+1 parent P which</span>", 
"<span class=\"comment\"> * satisfies the following equation:</span>", 
"<span class=\"comment\"> *     P = B &amp; ~(1 &lt;&lt; O)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Assumption: *_mem_map is contiguous at least up to MAX_ORDER</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#page\">page</a> *", 
"<a class=\"id\" href=\"#__page_find_buddy\">__page_find_buddy</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, unsigned long <a class=\"id\" href=\"#page_idx\">page_idx</a>, unsigned int <a class=\"id\" href=\"#order\">order</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#buddy_idx\">buddy_idx</a> = <a class=\"id\" href=\"#page_idx\">page_idx</a> ^ (1 << <a class=\"id\" href=\"#order\">order</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a> + (<a class=\"id\" href=\"#buddy_idx\">buddy_idx</a> - <a class=\"id\" href=\"#page_idx\">page_idx</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long", 
"<a class=\"id\" href=\"#__find_combined_index\">__find_combined_index</a>(unsigned long <a class=\"id\" href=\"#page_idx\">page_idx</a>, unsigned int <a class=\"id\" href=\"#order\">order</a>)", 
"{", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#page_idx\">page_idx</a> &amp; ~(1 << <a class=\"id\" href=\"#order\">order</a>));", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This function checks whether a page is free &amp;&amp; is the buddy</span>", 
"<span class=\"comment\"> * we can do coalesce a page and its buddy if</span>", 
"<span class=\"comment\"> * (a) the buddy is not in a hole &amp;&amp;</span>", 
"<span class=\"comment\"> * (b) the buddy is in the buddy system &amp;&amp;</span>", 
"<span class=\"comment\"> * (c) a page and its buddy have the same order &amp;&amp;</span>", 
"<span class=\"comment\"> * (d) a page and its buddy are in the same zone.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For recording whether a page is in the buddy system, we use PG_buddy.</span>", 
"<span class=\"comment\"> * Setting, clearing, and testing PG_buddy is serialized by zone-&gt;lock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For recording page's order, we use page_private(page).</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#page_is_buddy\">page_is_buddy</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#buddy\">buddy</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#order\">order</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#pfn_valid_within\">pfn_valid_within</a>(<a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#buddy\">buddy</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page_zone_id\">page_zone_id</a>(<a class=\"id\" href=\"#page\">page</a>) != <a class=\"id\" href=\"#page_zone_id\">page_zone_id</a>(<a class=\"id\" href=\"#buddy\">buddy</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#PageBuddy\">PageBuddy</a>(<a class=\"id\" href=\"#buddy\">buddy</a>) && <a class=\"id\" href=\"#page_order\">page_order</a>(<a class=\"id\" href=\"#buddy\">buddy</a>) == <a class=\"id\" href=\"#order\">order</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#page_count\">page_count</a>(<a class=\"id\" href=\"#buddy\">buddy</a>) != 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Freeing function for a buddy system allocator.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The concept of a buddy system is to maintain direct-mapped table</span>", 
"<span class=\"comment\"> * (containing bit values) for memory blocks of various \"orders\".</span>", 
"<span class=\"comment\"> * The bottom level table contains the map for the smallest allocatable</span>", 
"<span class=\"comment\"> * units of memory (here, pages), and each level above it describes</span>", 
"<span class=\"comment\"> * pairs of units from the levels below, hence, \"buddies\".</span>", 
"<span class=\"comment\"> * At a high level, all that happens here is marking the table entry</span>", 
"<span class=\"comment\"> * at the bottom level available, and propagating the changes upward</span>", 
"<span class=\"comment\"> * as necessary, plus some accounting needed to play nicely with other</span>", 
"<span class=\"comment\"> * parts of the VM system.</span>", 
"<span class=\"comment\"> * At each level, we keep a list of pages, which are heads of continuous</span>", 
"<span class=\"comment\"> * free pages of length of (1 &lt;&lt; order) and marked with PG_buddy. Page's</span>", 
"<span class=\"comment\"> * order is recorded in page_private(page) field.</span>", 
"<span class=\"comment\"> * So when we are allocating or freeing one, we can derive the state of the</span>", 
"<span class=\"comment\"> * other.  That is, if we allocate a small block, and both were   </span>", 
"<span class=\"comment\"> * free, the remainder of the region must be split into blocks.   </span>", 
"<span class=\"comment\"> * If a block is freed, and its buddy is also free, then this</span>", 
"<span class=\"comment\"> * triggers coalescing into a block of larger size.            </span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * -- wli</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__free_one_page\">__free_one_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, unsigned int <a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#migratetype\">migratetype</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#page_idx\">page_idx</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#combined_idx\">combined_idx</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#buddy\">buddy</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#PageCompound\">PageCompound</a>(<a class=\"id\" href=\"#page\">page</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#destroy_compound_page\">destroy_compound_page</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#order\">order</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#migratetype\">migratetype</a> == -1);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#page_idx\">page_idx</a> = <a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#page\">page</a>) &amp; ((1 << <a class=\"id\" href=\"#MAX_ORDER\">MAX_ORDER</a>) - 1);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#page_idx\">page_idx</a> &amp; ((1 << <a class=\"id\" href=\"#order\">order</a>) - 1));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#bad_range\">bad_range</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#page\">page</a>));", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#order\">order</a> &lt; <a class=\"id\" href=\"#MAX_ORDER\">MAX_ORDER</a>-1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#buddy\">buddy</a> = <a class=\"id\" href=\"#__page_find_buddy\">__page_find_buddy</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#page_idx\">page_idx</a>, <a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#page_is_buddy\">page_is_buddy</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#buddy\">buddy</a>, <a class=\"id\" href=\"#order\">order</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Our buddy is free, merge with it and move up one order. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#buddy\">buddy</a>-><a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#free_area\">free_area</a>[<a class=\"id\" href=\"#order\">order</a>].<a class=\"id\" href=\"#nr_free\">nr_free</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rmv_page_order\">rmv_page_order</a>(<a class=\"id\" href=\"#buddy\">buddy</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#combined_idx\">combined_idx</a> = <a class=\"id\" href=\"#__find_combined_index\">__find_combined_index</a>(<a class=\"id\" href=\"#page_idx\">page_idx</a>, <a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#page\">page</a> + (<a class=\"id\" href=\"#combined_idx\">combined_idx</a> - <a class=\"id\" href=\"#page_idx\">page_idx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page_idx\">page_idx</a> = <a class=\"id\" href=\"#combined_idx\">combined_idx</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#order\">order</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_page_order\">set_page_order</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#order\">order</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this is not the largest possible page, check if the buddy</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of the next-highest order is free. If it is, it's possible</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that pages are being freed that will coalesce soon. In case,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that is happening, add the free page to the tail of the list</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * so it's less likely to be used soon and more likely to be merged</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * as a higher order page</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#order\">order</a> &lt; <a class=\"id\" href=\"#MAX_ORDER\">MAX_ORDER</a>-1) && <a class=\"id\" href=\"#pfn_valid_within\">pfn_valid_within</a>(<a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#buddy\">buddy</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#higher_page\">higher_page</a>, *<a class=\"id\" href=\"#higher_buddy\">higher_buddy</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#combined_idx\">combined_idx</a> = <a class=\"id\" href=\"#__find_combined_index\">__find_combined_index</a>(<a class=\"id\" href=\"#page_idx\">page_idx</a>, <a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#higher_page\">higher_page</a> = <a class=\"id\" href=\"#page\">page</a> + <a class=\"id\" href=\"#combined_idx\">combined_idx</a> - <a class=\"id\" href=\"#page_idx\">page_idx</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#higher_buddy\">higher_buddy</a> = <a class=\"id\" href=\"#__page_find_buddy\">__page_find_buddy</a>(<a class=\"id\" href=\"#higher_page\">higher_page</a>, <a class=\"id\" href=\"#combined_idx\">combined_idx</a>, <a class=\"id\" href=\"#order\">order</a> + 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#page_is_buddy\">page_is_buddy</a>(<a class=\"id\" href=\"#higher_page\">higher_page</a>, <a class=\"id\" href=\"#higher_buddy\">higher_buddy</a>, <a class=\"id\" href=\"#order\">order</a> + 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#free_area\">free_area</a>[<a class=\"id\" href=\"#order\">order</a>].<a class=\"id\" href=\"#free_list\">free_list</a>[<a class=\"id\" href=\"#migratetype\">migratetype</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>, &amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#free_area\">free_area</a>[<a class=\"id\" href=\"#order\">order</a>].<a class=\"id\" href=\"#free_list\">free_list</a>[<a class=\"id\" href=\"#migratetype\">migratetype</a>]);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#free_area\">free_area</a>[<a class=\"id\" href=\"#order\">order</a>].<a class=\"id\" href=\"#nr_free\">nr_free</a>++;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * free_page_mlock() -- clean up attempts to free and mlocked() page.</span>", 
"<span class=\"comment\"> * Page should not be on lru, so no need to fix that up.</span>", 
"<span class=\"comment\"> * free_pages_check() will verify...</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#free_page_mlock\">free_page_mlock</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__dec_zone_page_state\">__dec_zone_page_state</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#NR_MLOCK\">NR_MLOCK</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__count_vm_event\">__count_vm_event</a>(<a class=\"id\" href=\"#UNEVICTABLE_MLOCKFREED\">UNEVICTABLE_MLOCKFREED</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#free_pages_check\">free_pages_check</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#page_mapcount\">page_mapcount</a>(<a class=\"id\" href=\"#page\">page</a>) |", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)  |", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#_count\">_count</a>) != 0) |", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PAGE_FLAGS_CHECK_AT_FREE\">PAGE_FLAGS_CHECK_AT_FREE</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bad_page\">bad_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PAGE_FLAGS_CHECK_AT_PREP\">PAGE_FLAGS_CHECK_AT_PREP</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#flags\">flags</a> &= ~<a class=\"id\" href=\"#PAGE_FLAGS_CHECK_AT_PREP\">PAGE_FLAGS_CHECK_AT_PREP</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Frees a number of pages from the PCP lists</span>", 
"<span class=\"comment\"> * Assumes all pages on list are in same zone, and of same order.</span>", 
"<span class=\"comment\"> * count is the number of pages to free.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the zone was previously in an \"all pages pinned\" state then look to</span>", 
"<span class=\"comment\"> * see if this freeing clears that state.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * And clear the zone's pages_scanned counter, to hold off the \"all pages are</span>", 
"<span class=\"comment\"> * pinned\" detection logic.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#free_pcppages_bulk\">free_pcppages_bulk</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, int <a class=\"id\" href=\"#count\">count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#per_cpu_pages\">per_cpu_pages</a> *<a class=\"id\" href=\"#pcp\">pcp</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#migratetype\">migratetype</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#batch_free\">batch_free</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#to_free\">to_free</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#all_unreclaimable\">all_unreclaimable</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#pages_scanned\">pages_scanned</a> = 0;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#to_free\">to_free</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Remove pages from lists in a round-robin fashion. A</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * batch_free count is maintained that is incremented when an</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * empty list is encountered.  This is so more pages are freed</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * off fuller lists instead of spinning excessively around empty</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * lists</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#batch_free\">batch_free</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (++<a class=\"id\" href=\"#migratetype\">migratetype</a> == <a class=\"id\" href=\"#MIGRATE_PCPTYPES\">MIGRATE_PCPTYPES</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#migratetype\">migratetype</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = &amp;<a class=\"id\" href=\"#pcp\">pcp</a>-><a class=\"id\" href=\"#lists\">lists</a>[<a class=\"id\" href=\"#migratetype\">migratetype</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/>} while (<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#list\">list</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#list\">list</a>-><a class=\"id\" href=\"#prev\">prev</a>, struct <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* must delete as __free_one_page list manipulates */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* MIGRATE_MOVABLE list may include MIGRATE_RESERVEs */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_one_page\">__free_one_page</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#zone\">zone</a>, 0, <a class=\"id\" href=\"#page_private\">page_private</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_mm_page_pcpu_drain\">trace_mm_page_pcpu_drain</a>(<a class=\"id\" href=\"#page\">page</a>, 0, <a class=\"id\" href=\"#page_private\">page_private</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>} while (--<a class=\"id\" href=\"#to_free\">to_free</a> && --<a class=\"id\" href=\"#batch_free\">batch_free</a> && !<a class=\"id\" href=\"#list_empty\">list_empty</a>(<a class=\"id\" href=\"#list\">list</a>));", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mod_zone_page_state\">__mod_zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_FREE_PAGES\">NR_FREE_PAGES</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#free_one_page\">free_one_page</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#migratetype\">migratetype</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#all_unreclaimable\">all_unreclaimable</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#pages_scanned\">pages_scanned</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__free_one_page\">__free_one_page</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#migratetype\">migratetype</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__mod_zone_page_state\">__mod_zone_page_state</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#NR_FREE_PAGES\">NR_FREE_PAGES</a>, 1 << <a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#free_pages_prepare\">free_pages_prepare</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, unsigned int <a class=\"id\" href=\"#order\">order</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#bad\">bad</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_mm_page_free_direct\">trace_mm_page_free_direct</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmemcheck_free_shadow\">kmemcheck_free_shadow</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#order\">order</a>);", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; (1 << <a class=\"id\" href=\"#order\">order</a>); <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#pg\">pg</a> = <a class=\"id\" href=\"#page\">page</a> + <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#PageAnon\">PageAnon</a>(<a class=\"id\" href=\"#pg\">pg</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pg\">pg</a>-><a class=\"id\" href=\"#mapping\">mapping</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bad\">bad</a> += <a class=\"id\" href=\"#free_pages_check\">free_pages_check</a>(<a class=\"id\" href=\"#pg\">pg</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bad\">bad</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#PageHighMem\">PageHighMem</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debug_check_no_locks_freed\">debug_check_no_locks_freed</a>(<a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>),<a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a><<<a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#debug_check_no_obj_freed\">debug_check_no_obj_freed</a>(<a class=\"id\" href=\"#page_address\">page_address</a>(<a class=\"id\" href=\"#page\">page</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#PAGE_SIZE\">PAGE_SIZE</a> << <a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_free_page\">arch_free_page</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kernel_map_pages\">kernel_map_pages</a>(<a class=\"id\" href=\"#page\">page</a>, 1 << <a class=\"id\" href=\"#order\">order</a>, 0);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__free_pages_ok\">__free_pages_ok</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, unsigned int <a class=\"id\" href=\"#order\">order</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#wasMlocked\">wasMlocked</a> = <a class=\"id\" href=\"#__TestClearPageMlocked\">__TestClearPageMlocked</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#free_pages_prepare\">free_pages_prepare</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#order\">order</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_save\">local_irq_save</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#wasMlocked\">wasMlocked</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#free_page_mlock\">free_page_mlock</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__count_vm_events\">__count_vm_events</a>(<a class=\"id\" href=\"#PGFREE\">PGFREE</a>, 1 << <a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_one_page\">free_one_page</a>(<a class=\"id\" href=\"#page_zone\">page_zone</a>(<a class=\"id\" href=\"#page\">page</a>), <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_pageblock_migratetype\">get_pageblock_migratetype</a>(<a class=\"id\" href=\"#page\">page</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_restore\">local_irq_restore</a>(<a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * permit the bootmem allocator to evade page validation on high-order frees</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#__meminit\">__meminit</a> <a class=\"id\" href=\"#__free_pages_bootmem\">__free_pages_bootmem</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, unsigned int <a class=\"id\" href=\"#order\">order</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#order\">order</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__ClearPageReserved\">__ClearPageReserved</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_page_count\">set_page_count</a>(<a class=\"id\" href=\"#page\">page</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_page_refcounted\">set_page_refcounted</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_page\">__free_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#loop\">loop</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prefetchw\">prefetchw</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#loop\">loop</a> = 0; <a class=\"id\" href=\"#loop\">loop</a> &lt; <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>; <a class=\"id\" href=\"#loop\">loop</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#p\">p</a> = &amp;<a class=\"id\" href=\"#page\">page</a>[<a class=\"id\" href=\"#loop\">loop</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#loop\">loop</a> + 1 &lt; <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prefetchw\">prefetchw</a>(<a class=\"id\" href=\"#p\">p</a> + 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__ClearPageReserved\">__ClearPageReserved</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_page_count\">set_page_count</a>(<a class=\"id\" href=\"#p\">p</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_page_refcounted\">set_page_refcounted</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_pages\">__free_pages</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The order of subdivision here is critical for the IO subsystem.</span>", 
"<span class=\"comment\"> * Please do not alter this order without good reasons and regression</span>", 
"<span class=\"comment\"> * testing. Specifically, as large blocks of memory are subdivided,</span>", 
"<span class=\"comment\"> * the order in which smaller blocks are delivered depends on the order</span>", 
"<span class=\"comment\"> * they're subdivided in this function. This is the primary factor</span>", 
"<span class=\"comment\"> * influencing the order in which pages are delivered to the IO</span>", 
"<span class=\"comment\"> * subsystem according to empirical testing, and this is also justified</span>", 
"<span class=\"comment\"> * by considering the behavior of a buddy system containing a single</span>", 
"<span class=\"comment\"> * large block of memory acted on by a series of small allocations.</span>", 
"<span class=\"comment\"> * This behavior is a critical factor in sglist merging's success.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * -- wli</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#expand\">expand</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#low\">low</a>, int <a class=\"id\" href=\"#high\">high</a>, struct <a class=\"id\" href=\"#free_area\">free_area</a> *<a class=\"id\" href=\"#area\">area</a>,", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#migratetype\">migratetype</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#size\">size</a> = 1 << <a class=\"id\" href=\"#high\">high</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#high\">high</a> &gt; <a class=\"id\" href=\"#low\">low</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#area\">area</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#high\">high</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#size\">size</a> >>= 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#bad_range\">bad_range</a>(<a class=\"id\" href=\"#zone\">zone</a>, &amp;<a class=\"id\" href=\"#page\">page</a>[<a class=\"id\" href=\"#size\">size</a>]));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#page\">page</a>[<a class=\"id\" href=\"#size\">size</a>].<a class=\"id\" href=\"#lru\">lru</a>, &amp;<a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#free_list\">free_list</a>[<a class=\"id\" href=\"#migratetype\">migratetype</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#nr_free\">nr_free</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_page_order\">set_page_order</a>(&amp;<a class=\"id\" href=\"#page\">page</a>[<a class=\"id\" href=\"#size\">size</a>], <a class=\"id\" href=\"#high\">high</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This page is about to be returned from the page allocator</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#check_new_page\">check_new_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#page_mapcount\">page_mapcount</a>(<a class=\"id\" href=\"#page\">page</a>) |", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#mapping\">mapping</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)  |", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#_count\">_count</a>) != 0)  |", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#PAGE_FLAGS_CHECK_AT_PREP\">PAGE_FLAGS_CHECK_AT_PREP</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bad_page\">bad_page</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#prep_new_page\">prep_new_page</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, int <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_flags\">gfp_flags</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; (1 << <a class=\"id\" href=\"#order\">order</a>); <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#page\">page</a> + <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#check_new_page\">check_new_page</a>(<a class=\"id\" href=\"#p\">p</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_page_private\">set_page_private</a>(<a class=\"id\" href=\"#page\">page</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_page_refcounted\">set_page_refcounted</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_alloc_page\">arch_alloc_page</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#order\">order</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kernel_map_pages\">kernel_map_pages</a>(<a class=\"id\" href=\"#page\">page</a>, 1 << <a class=\"id\" href=\"#order\">order</a>, 1);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#gfp_flags\">gfp_flags</a> &amp; <a class=\"id\" href=\"#__GFP_ZERO\">__GFP_ZERO</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prep_zero_page\">prep_zero_page</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#gfp_flags\">gfp_flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#order\">order</a> && (<a class=\"id\" href=\"#gfp_flags\">gfp_flags</a> &amp; <a class=\"id\" href=\"#__GFP_COMP\">__GFP_COMP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prep_compound_page\">prep_compound_page</a>(<a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#order\">order</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Go through the free lists for the given migratetype and remove</span>", 
"<span class=\"comment\"> * the smallest available page from the freelists</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a>", 
"struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#__rmqueue_smallest\">__rmqueue_smallest</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, unsigned int <a class=\"id\" href=\"#order\">order</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#migratetype\">migratetype</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#current_order\">current_order</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#free_area\">free_area</a> * <a class=\"id\" href=\"#area\">area</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Find a page of the appropriate size in the preferred list */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#current_order\">current_order</a> = <a class=\"id\" href=\"#order\">order</a>; <a class=\"id\" href=\"#current_order\">current_order</a> &lt; <a class=\"id\" href=\"#MAX_ORDER\">MAX_ORDER</a>; ++<a class=\"id\" href=\"#current_order\">current_order</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#area\">area</a> = &amp;(<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#free_area\">free_area</a>[<a class=\"id\" href=\"#current_order\">current_order</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#free_list\">free_list</a>[<a class=\"id\" href=\"#migratetype\">migratetype</a>]))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#free_list\">free_list</a>[<a class=\"id\" href=\"#migratetype\">migratetype</a>].<a class=\"id\" href=\"#next\">next</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rmv_page_order\">rmv_page_order</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#area\">area</a>-><a class=\"id\" href=\"#nr_free\">nr_free</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#expand\">expand</a>(<a class=\"id\" href=\"#zone\">zone</a>, <a class=\"id\" href=\"#page\">page</a>, <a class=\"id\" href=\"#order\">order</a>, <a class=\"id\" href=\"#current_order\">current_order</a>, <a class=\"id\" href=\"#area\">area</a>, <a class=\"id\" href=\"#migratetype\">migratetype</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This array describes the order lists are fallen back to when</span>", 
"<span class=\"comment\"> * the free lists for the desirable migrate type are depleted</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#fallbacks\">fallbacks</a>[<a class=\"id\" href=\"#MIGRATE_TYPES\">MIGRATE_TYPES</a>][<a class=\"id\" href=\"#MIGRATE_TYPES\">MIGRATE_TYPES</a>-1] = {", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#MIGRATE_UNMOVABLE\">MIGRATE_UNMOVABLE</a>]   = { <a class=\"id\" href=\"#MIGRATE_RECLAIMABLE\">MIGRATE_RECLAIMABLE</a>, <a class=\"id\" href=\"#MIGRATE_MOVABLE\">MIGRATE_MOVABLE</a>,   <a class=\"id\" href=\"#MIGRATE_RESERVE\">MIGRATE_RESERVE</a> },", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#MIGRATE_RECLAIMABLE\">MIGRATE_RECLAIMABLE</a>] = { <a class=\"id\" href=\"#MIGRATE_UNMOVABLE\">MIGRATE_UNMOVABLE</a>,   <a class=\"id\" href=\"#MIGRATE_MOVABLE\">MIGRATE_MOVABLE</a>,   <a class=\"id\" href=\"#MIGRATE_RESERVE\">MIGRATE_RESERVE</a> },", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#MIGRATE_MOVABLE\">MIGRATE_MOVABLE</a>]     = { <a class=\"id\" href=\"#MIGRATE_RECLAIMABLE\">MIGRATE_RECLAIMABLE</a>, <a class=\"id\" href=\"#MIGRATE_UNMOVABLE\">MIGRATE_UNMOVABLE</a>, <a class=\"id\" href=\"#MIGRATE_RESERVE\">MIGRATE_RESERVE</a> },", 
"<span class=\"ts\"/>[<a class=\"id\" href=\"#MIGRATE_RESERVE\">MIGRATE_RESERVE</a>]     = { <a class=\"id\" href=\"#MIGRATE_RESERVE\">MIGRATE_RESERVE</a>,     <a class=\"id\" href=\"#MIGRATE_RESERVE\">MIGRATE_RESERVE</a>,   <a class=\"id\" href=\"#MIGRATE_RESERVE\">MIGRATE_RESERVE</a> }, <span class=\"comment\">/* Never used */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Move the free pages in a range to the free lists of the requested type.</span>", 
"<span class=\"comment\"> * Note that start_page and end_pages are not aligned on a pageblock</span>", 
"<span class=\"comment\"> * boundary. If alignment is required, use move_freepages_block()</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#move_freepages\">move_freepages</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#start_page\">start_page</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#end_page\">end_page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  int <a class=\"id\" href=\"#migratetype\">migratetype</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#order\">order</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#pages_moved\">pages_moved</a> = 0;", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#CONFIG_HOLES_IN_ZONE\">CONFIG_HOLES_IN_ZONE</a>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * page_zone is not safe to call in this context when</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * CONFIG_HOLES_IN_ZONE is set. This bug check is probably redundant</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * anyway as we check zone boundaries in move_freepages_block().</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Remove at a later date when no bug reports exist related to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * grouping pages by mobility</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#page_zone\">page_zone</a>(<a class=\"id\" href=\"#start_page\">start_page</a>) != <a class=\"id\" href=\"#page_zone\">page_zone</a>(<a class=\"id\" href=\"#end_page\">end_page</a>));", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#page\">page</a> = <a class=\"id\" href=\"#start_page\">start_page</a>; <a class=\"id\" href=\"#page\">page</a> <= <a class=\"id\" href=\"#end_page\">end_page</a>;) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Make sure we are not inadvertently changing nodes */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#VM_BUG_ON\">VM_BUG_ON</a>(<a class=\"id\" href=\"#page_to_nid\">page_to_nid</a>(<a class=\"id\" href=\"#page\">page</a>) != <a class=\"id\" href=\"#zone_to_nid\">zone_to_nid</a>(<a class=\"id\" href=\"#zone\">zone</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#pfn_valid_within\">pfn_valid_within</a>(<a class=\"id\" href=\"#page_to_pfn\">page_to_pfn</a>(<a class=\"id\" href=\"#page\">page</a>))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#PageBuddy\">PageBuddy</a>(<a class=\"id\" href=\"#page\">page</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#order\">order</a> = <a class=\"id\" href=\"#page_order\">page_order</a>(<a class=\"id\" href=\"#page\">page</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#page\">page</a>-><a class=\"id\" href=\"#lru\">lru</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#zone\">zone</a>-><a class=\"id\" href=\"#free_area\">free_area</a>[<a class=\"id\" href=\"#order\">order</a>].<a class=\"id\" href=\"#free_list\">free_list</a>[<a class=\"id\" href=\"#migratetype\">migratetype</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#page\">page</a> += 1 << <a class=\"id\" href=\"#order\">order</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pages_moved\">pages_moved</a> += 1 << <a class=\"id\" href=\"#order\">order</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#pages_moved\">pages_moved</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#move_freepages_block\">move_freepages_block</a>(struct <a class=\"id\" href=\"#zone\">zone</a> *<a class=\"id\" href=\"#zone\">zone</a>, struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#migratetype\">migratetype</a>)", 
"{", 
];
xr_frag_insert('l/26/8afb8892a68769b0f8feebfd90d34cd6f954c4.xr', __xr_tmp);
