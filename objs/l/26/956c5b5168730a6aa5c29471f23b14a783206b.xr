var __xr_tmp = [
"<span class=\"comment\">/******************************************************************************</span>", 
"<span class=\"comment\"> * xen.h</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Guest OS interface to Xen.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (c) 2004, K A Fraser</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__XEN_PUBLIC_XEN_H__\">__XEN_PUBLIC_XEN_H__</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__XEN_PUBLIC_XEN_H__\">__XEN_PUBLIC_XEN_H__</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#xen\">xen</a>/<a class=\"id\" href=\"#interface\">interface</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#pvclock\">pvclock</a>-<a class=\"id\" href=\"#abi\">abi</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * XEN \"SYSTEM CALLS\" (a.k.a. HYPERCALLS).</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * x86_32: EAX = vector; EBX, ECX, EDX, ESI, EDI = args 1, 2, 3, 4, 5.</span>", 
"<span class=\"comment\"> *         EAX = return value</span>", 
"<span class=\"comment\"> *         (argument registers may be clobbered on return)</span>", 
"<span class=\"comment\"> * x86_64: RAX = vector; RDI, RSI, RDX, R10, R8, R9 = args 1, 2, 3, 4, 5, 6.</span>", 
"<span class=\"comment\"> *         RAX = return value</span>", 
"<span class=\"comment\"> *         (argument registers not clobbered on return; RCX, R11 are)</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HYPERVISOR_set_trap_table\">__HYPERVISOR_set_trap_table</a>        0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HYPERVISOR_mmu_update\">__HYPERVISOR_mmu_update</a>            1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HYPERVISOR_set_gdt\">__HYPERVISOR_set_gdt</a>               2", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HYPERVISOR_stack_switch\">__HYPERVISOR_stack_switch</a>          3", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HYPERVISOR_set_callbacks\">__HYPERVISOR_set_callbacks</a>         4", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HYPERVISOR_fpu_taskswitch\">__HYPERVISOR_fpu_taskswitch</a>        5", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HYPERVISOR_sched_op\">__HYPERVISOR_sched_op</a>              6", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HYPERVISOR_dom0_op\">__HYPERVISOR_dom0_op</a>               7", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HYPERVISOR_set_debugreg\">__HYPERVISOR_set_debugreg</a>          8", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HYPERVISOR_get_debugreg\">__HYPERVISOR_get_debugreg</a>          9", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HYPERVISOR_update_descriptor\">__HYPERVISOR_update_descriptor</a>    10", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HYPERVISOR_memory_op\">__HYPERVISOR_memory_op</a>            12", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HYPERVISOR_multicall\">__HYPERVISOR_multicall</a>            13", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HYPERVISOR_update_va_mapping\">__HYPERVISOR_update_va_mapping</a>    14", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HYPERVISOR_set_timer_op\">__HYPERVISOR_set_timer_op</a>         15", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HYPERVISOR_event_channel_op_compat\">__HYPERVISOR_event_channel_op_compat</a> 16", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HYPERVISOR_xen_version\">__HYPERVISOR_xen_version</a>          17", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HYPERVISOR_console_io\">__HYPERVISOR_console_io</a>           18", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HYPERVISOR_physdev_op_compat\">__HYPERVISOR_physdev_op_compat</a>    19", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HYPERVISOR_grant_table_op\">__HYPERVISOR_grant_table_op</a>       20", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HYPERVISOR_vm_assist\">__HYPERVISOR_vm_assist</a>            21", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HYPERVISOR_update_va_mapping_otherdomain\">__HYPERVISOR_update_va_mapping_otherdomain</a> 22", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HYPERVISOR_iret\">__HYPERVISOR_iret</a>                 23 <span class=\"comment\">/* x86 only */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HYPERVISOR_vcpu_op\">__HYPERVISOR_vcpu_op</a>              24", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HYPERVISOR_set_segment_base\">__HYPERVISOR_set_segment_base</a>     25 <span class=\"comment\">/* x86/64 only */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HYPERVISOR_mmuext_op\">__HYPERVISOR_mmuext_op</a>            26", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HYPERVISOR_acm_op\">__HYPERVISOR_acm_op</a>               27", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HYPERVISOR_nmi_op\">__HYPERVISOR_nmi_op</a>               28", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HYPERVISOR_sched_op_new\">__HYPERVISOR_sched_op_new</a>         29", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HYPERVISOR_callback_op\">__HYPERVISOR_callback_op</a>          30", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HYPERVISOR_xenoprof_op\">__HYPERVISOR_xenoprof_op</a>          31", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HYPERVISOR_event_channel_op\">__HYPERVISOR_event_channel_op</a>     32", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HYPERVISOR_physdev_op\">__HYPERVISOR_physdev_op</a>           33", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HYPERVISOR_hvm_op\">__HYPERVISOR_hvm_op</a>               34", 
"", 
"<span class=\"comment\">/* Architecture-specific hypercall definitions. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HYPERVISOR_arch_0\">__HYPERVISOR_arch_0</a>               48", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HYPERVISOR_arch_1\">__HYPERVISOR_arch_1</a>               49", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HYPERVISOR_arch_2\">__HYPERVISOR_arch_2</a>               50", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HYPERVISOR_arch_3\">__HYPERVISOR_arch_3</a>               51", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HYPERVISOR_arch_4\">__HYPERVISOR_arch_4</a>               52", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HYPERVISOR_arch_5\">__HYPERVISOR_arch_5</a>               53", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HYPERVISOR_arch_6\">__HYPERVISOR_arch_6</a>               54", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__HYPERVISOR_arch_7\">__HYPERVISOR_arch_7</a>               55", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * VIRTUAL INTERRUPTS</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Virtual interrupts that a guest OS may receive from Xen.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VIRQ_TIMER\">VIRQ_TIMER</a>      0  <span class=\"comment\">/* Timebase update, and/or requested timeout.  */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VIRQ_DEBUG\">VIRQ_DEBUG</a>      1  <span class=\"comment\">/* Request guest to dump debug info.           */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VIRQ_CONSOLE\">VIRQ_CONSOLE</a>    2  <span class=\"comment\">/* (DOM0) Bytes received on emergency console. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VIRQ_DOM_EXC\">VIRQ_DOM_EXC</a>    3  <span class=\"comment\">/* (DOM0) Exceptional event for some domain.   */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VIRQ_DEBUGGER\">VIRQ_DEBUGGER</a>   6  <span class=\"comment\">/* (DOM0) A domain has paused for debugging.   */</span>", 
"", 
"<span class=\"comment\">/* Architecture-specific VIRQ definitions. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VIRQ_ARCH_0\">VIRQ_ARCH_0</a>    16", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VIRQ_ARCH_1\">VIRQ_ARCH_1</a>    17", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VIRQ_ARCH_2\">VIRQ_ARCH_2</a>    18", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VIRQ_ARCH_3\">VIRQ_ARCH_3</a>    19", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VIRQ_ARCH_4\">VIRQ_ARCH_4</a>    20", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VIRQ_ARCH_5\">VIRQ_ARCH_5</a>    21", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VIRQ_ARCH_6\">VIRQ_ARCH_6</a>    22", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VIRQ_ARCH_7\">VIRQ_ARCH_7</a>    23", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NR_VIRQS\">NR_VIRQS</a>       24", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * MMU-UPDATE REQUESTS</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * HYPERVISOR_mmu_update() accepts a list of (ptr, val) pairs.</span>", 
"<span class=\"comment\"> * A foreigndom (FD) can be specified (or DOMID_SELF for none).</span>", 
"<span class=\"comment\"> * Where the FD has some effect, it is described below.</span>", 
"<span class=\"comment\"> * ptr[1:0] specifies the appropriate MMU_* command.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ptr[1:0] == MMU_NORMAL_PT_UPDATE:</span>", 
"<span class=\"comment\"> * Updates an entry in a page table. If updating an L1 table, and the new</span>", 
"<span class=\"comment\"> * table entry is valid/present, the mapped frame must belong to the FD, if</span>", 
"<span class=\"comment\"> * an FD has been specified. If attempting to map an I/O page then the</span>", 
"<span class=\"comment\"> * caller assumes the privilege of the FD.</span>", 
"<span class=\"comment\"> * FD == DOMID_IO: Permit /only/ I/O mappings, at the priv level of the caller.</span>", 
"<span class=\"comment\"> * FD == DOMID_XEN: Map restricted areas of Xen's heap space.</span>", 
"<span class=\"comment\"> * ptr[:2]  -- Machine address of the page-table entry to modify.</span>", 
"<span class=\"comment\"> * val      -- Value to write.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ptr[1:0] == MMU_MACHPHYS_UPDATE:</span>", 
"<span class=\"comment\"> * Updates an entry in the machine-&gt;pseudo-physical mapping table.</span>", 
"<span class=\"comment\"> * ptr[:2]  -- Machine address within the frame whose mapping to modify.</span>", 
"<span class=\"comment\"> *             The frame must belong to the FD, if one is specified.</span>", 
"<span class=\"comment\"> * val      -- Value to write into the mapping entry.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ptr[1:0] == MMU_PT_UPDATE_PRESERVE_AD:</span>", 
"<span class=\"comment\"> * As MMU_NORMAL_PT_UPDATE above, but A/D bits currently in the PTE are ORed</span>", 
"<span class=\"comment\"> * with those in @val.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MMU_NORMAL_PT_UPDATE\">MMU_NORMAL_PT_UPDATE</a>      0 <span class=\"comment\">/* checked '*ptr = val'. ptr is MA.       */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MMU_MACHPHYS_UPDATE\">MMU_MACHPHYS_UPDATE</a>       1 <span class=\"comment\">/* ptr = MA of frame to modify entry for  */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MMU_PT_UPDATE_PRESERVE_AD\">MMU_PT_UPDATE_PRESERVE_AD</a> 2 <span class=\"comment\">/* atomically: *ptr = val | (*ptr&amp;(A|D)) */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * MMU EXTENDED OPERATIONS</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * HYPERVISOR_mmuext_op() accepts a list of mmuext_op structures.</span>", 
"<span class=\"comment\"> * A foreigndom (FD) can be specified (or DOMID_SELF for none).</span>", 
"<span class=\"comment\"> * Where the FD has some effect, it is described below.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * cmd: MMUEXT_(UN)PIN_*_TABLE</span>", 
"<span class=\"comment\"> * mfn: Machine frame number to be (un)pinned as a p.t. page.</span>", 
"<span class=\"comment\"> *      The frame must belong to the FD, if one is specified.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * cmd: MMUEXT_NEW_BASEPTR</span>", 
"<span class=\"comment\"> * mfn: Machine frame number of new page-table base to install in MMU.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * cmd: MMUEXT_NEW_USER_BASEPTR [x86/64 only]</span>", 
"<span class=\"comment\"> * mfn: Machine frame number of new page-table base to install in MMU</span>", 
"<span class=\"comment\"> *      when in user space.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * cmd: MMUEXT_TLB_FLUSH_LOCAL</span>", 
"<span class=\"comment\"> * No additional arguments. Flushes local TLB.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * cmd: MMUEXT_INVLPG_LOCAL</span>", 
"<span class=\"comment\"> * linear_addr: Linear address to be flushed from the local TLB.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * cmd: MMUEXT_TLB_FLUSH_MULTI</span>", 
"<span class=\"comment\"> * vcpumask: Pointer to bitmap of VCPUs to be flushed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * cmd: MMUEXT_INVLPG_MULTI</span>", 
"<span class=\"comment\"> * linear_addr: Linear address to be flushed.</span>", 
"<span class=\"comment\"> * vcpumask: Pointer to bitmap of VCPUs to be flushed.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * cmd: MMUEXT_TLB_FLUSH_ALL</span>", 
"<span class=\"comment\"> * No additional arguments. Flushes all VCPUs' TLBs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * cmd: MMUEXT_INVLPG_ALL</span>", 
"<span class=\"comment\"> * linear_addr: Linear address to be flushed from all VCPUs' TLBs.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * cmd: MMUEXT_FLUSH_CACHE</span>", 
"<span class=\"comment\"> * No additional arguments. Writes back and flushes cache contents.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * cmd: MMUEXT_SET_LDT</span>", 
"<span class=\"comment\"> * linear_addr: Linear address of LDT base (NB. must be page-aligned).</span>", 
"<span class=\"comment\"> * nr_ents: Number of entries in LDT.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MMUEXT_PIN_L1_TABLE\">MMUEXT_PIN_L1_TABLE</a>      0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MMUEXT_PIN_L2_TABLE\">MMUEXT_PIN_L2_TABLE</a>      1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MMUEXT_PIN_L3_TABLE\">MMUEXT_PIN_L3_TABLE</a>      2", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MMUEXT_PIN_L4_TABLE\">MMUEXT_PIN_L4_TABLE</a>      3", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MMUEXT_UNPIN_TABLE\">MMUEXT_UNPIN_TABLE</a>       4", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MMUEXT_NEW_BASEPTR\">MMUEXT_NEW_BASEPTR</a>       5", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MMUEXT_TLB_FLUSH_LOCAL\">MMUEXT_TLB_FLUSH_LOCAL</a>   6", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MMUEXT_INVLPG_LOCAL\">MMUEXT_INVLPG_LOCAL</a>      7", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MMUEXT_TLB_FLUSH_MULTI\">MMUEXT_TLB_FLUSH_MULTI</a>   8", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MMUEXT_INVLPG_MULTI\">MMUEXT_INVLPG_MULTI</a>      9", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MMUEXT_TLB_FLUSH_ALL\">MMUEXT_TLB_FLUSH_ALL</a>    10", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MMUEXT_INVLPG_ALL\">MMUEXT_INVLPG_ALL</a>       11", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MMUEXT_FLUSH_CACHE\">MMUEXT_FLUSH_CACHE</a>      12", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MMUEXT_SET_LDT\">MMUEXT_SET_LDT</a>          13", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MMUEXT_NEW_USER_BASEPTR\">MMUEXT_NEW_USER_BASEPTR</a> 15", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__ASSEMBLY__\">__ASSEMBLY__</a>", 
"struct <a class=\"id\" href=\"#mmuext_op\">mmuext_op</a> {", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cmd\">cmd</a>;", 
"<span class=\"ts\"/>union {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* [UN]PIN_TABLE, NEW_BASEPTR, NEW_USER_BASEPTR */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mfn\">mfn</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* INVLPG_LOCAL, INVLPG_ALL, SET_LDT */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#linear_addr\">linear_addr</a>;", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#arg1\">arg1</a>;", 
"<span class=\"ts\"/>union {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* SET_LDT */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#nr_ents\">nr_ents</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* TLB_FLUSH_MULTI, INVLPG_MULTI */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#vcpumask\">vcpumask</a>;", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#arg2\">arg2</a>;", 
"};", 
"<a class=\"id\" href=\"#DEFINE_GUEST_HANDLE_STRUCT\">DEFINE_GUEST_HANDLE_STRUCT</a>(<a class=\"id\" href=\"#mmuext_op\">mmuext_op</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* These are passed as 'flags' to update_va_mapping. They can be ORed. */</span>", 
"<span class=\"comment\">/* When specifying UVMF_MULTI, also OR in a pointer to a CPU bitmap.   */</span>", 
"<span class=\"comment\">/* UVMF_LOCAL is merely UVMF_MULTI with a NULL bitmap pointer.         */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#UVMF_NONE\">UVMF_NONE</a>               (0UL<<0) <span class=\"comment\">/* No flushing at all.   */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#UVMF_TLB_FLUSH\">UVMF_TLB_FLUSH</a>          (1UL<<0) <span class=\"comment\">/* Flush entire TLB(s).  */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#UVMF_INVLPG\">UVMF_INVLPG</a>             (2UL<<0) <span class=\"comment\">/* Flush only one entry. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#UVMF_FLUSHTYPE_MASK\">UVMF_FLUSHTYPE_MASK</a>     (3UL<<0)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#UVMF_MULTI\">UVMF_MULTI</a>              (0UL<<2) <span class=\"comment\">/* Flush subset of TLBs. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#UVMF_LOCAL\">UVMF_LOCAL</a>              (0UL<<2) <span class=\"comment\">/* Flush local TLB.      */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#UVMF_ALL\">UVMF_ALL</a>                (1UL<<2) <span class=\"comment\">/* Flush all TLBs.       */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Commands to HYPERVISOR_console_io().</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CONSOLEIO_write\">CONSOLEIO_write</a>         0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#CONSOLEIO_read\">CONSOLEIO_read</a>          1", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Commands to HYPERVISOR_vm_assist().</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VMASST_CMD_enable\">VMASST_CMD_enable</a>                0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VMASST_CMD_disable\">VMASST_CMD_disable</a>               1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VMASST_TYPE_4gb_segments\">VMASST_TYPE_4gb_segments</a>         0", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VMASST_TYPE_4gb_segments_notify\">VMASST_TYPE_4gb_segments_notify</a>  1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VMASST_TYPE_writable_pagetables\">VMASST_TYPE_writable_pagetables</a>  2", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#VMASST_TYPE_pae_extended_cr3\">VMASST_TYPE_pae_extended_cr3</a>     3", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_VMASST_TYPE\">MAX_VMASST_TYPE</a> 3", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__ASSEMBLY__\">__ASSEMBLY__</a>", 
"", 
"typedef <a class=\"id\" href=\"#uint16_t\">uint16_t</a> <a class=\"id\" href=\"#domid_t\">domid_t</a>;", 
"", 
"<span class=\"comment\">/* Domain ids &gt;= DOMID_FIRST_RESERVED cannot be used for ordinary domains. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DOMID_FIRST_RESERVED\">DOMID_FIRST_RESERVED</a> (0x7FF0U)", 
"", 
"<span class=\"comment\">/* DOMID_SELF is used in certain contexts to refer to oneself. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DOMID_SELF\">DOMID_SELF</a> (0x7FF0U)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * DOMID_IO is used to restrict page-table updates to mapping I/O memory.</span>", 
"<span class=\"comment\"> * Although no Foreign Domain need be specified to map I/O pages, DOMID_IO</span>", 
"<span class=\"comment\"> * is useful to ensure that no mappings to the OS's own heap are accidentally</span>", 
"<span class=\"comment\"> * installed. (e.g., in Linux this could cause havoc as reference counts</span>", 
"<span class=\"comment\"> * aren't adjusted on the I/O-mapping code path).</span>", 
"<span class=\"comment\"> * This only makes sense in MMUEXT_SET_FOREIGNDOM, but in that context can</span>", 
"<span class=\"comment\"> * be specified by any calling domain.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DOMID_IO\">DOMID_IO</a>   (0x7FF1U)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * DOMID_XEN is used to allow privileged domains to map restricted parts of</span>", 
"<span class=\"comment\"> * Xen's heap space (e.g., the machine_to_phys table).</span>", 
"<span class=\"comment\"> * This only makes sense in MMUEXT_SET_FOREIGNDOM, and is only permitted if</span>", 
"<span class=\"comment\"> * the caller is privileged.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#DOMID_XEN\">DOMID_XEN</a>  (0x7FF2U)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Send an array of these to HYPERVISOR_mmu_update().</span>", 
"<span class=\"comment\"> * NB. The fields are natural pointer/address size for this architecture.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#mmu_update\">mmu_update</a> {", 
"    <a class=\"id\" href=\"#uint64_t\">uint64_t</a> <a class=\"id\" href=\"#ptr\">ptr</a>;       <span class=\"comment\">/* Machine address of PTE. */</span>", 
"    <a class=\"id\" href=\"#uint64_t\">uint64_t</a> <a class=\"id\" href=\"#val\">val</a>;       <span class=\"comment\">/* New contents of PTE.    */</span>", 
"};", 
"<a class=\"id\" href=\"#DEFINE_GUEST_HANDLE_STRUCT\">DEFINE_GUEST_HANDLE_STRUCT</a>(<a class=\"id\" href=\"#mmu_update\">mmu_update</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Send an array of these to HYPERVISOR_multicall().</span>", 
"<span class=\"comment\"> * NB. The fields are natural register size for this architecture.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#multicall_entry\">multicall_entry</a> {", 
"    unsigned long <a class=\"id\" href=\"#op\">op</a>;", 
"    long <a class=\"id\" href=\"#result\">result</a>;", 
"    unsigned long <a class=\"id\" href=\"#args\">args</a>[6];", 
"};", 
"<a class=\"id\" href=\"#DEFINE_GUEST_HANDLE_STRUCT\">DEFINE_GUEST_HANDLE_STRUCT</a>(<a class=\"id\" href=\"#multicall_entry\">multicall_entry</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Event channel endpoints per domain:</span>", 
"<span class=\"comment\"> *  1024 if a long is 32 bits; 4096 if a long is 64 bits.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NR_EVENT_CHANNELS\">NR_EVENT_CHANNELS</a> (sizeof(unsigned long) * sizeof(unsigned long) * 64)", 
"", 
"struct <a class=\"id\" href=\"#vcpu_time_info\">vcpu_time_info</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Updates to the following values are preceded and followed</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * by an increment of 'version'. The guest can therefore</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * detect updates by looking for changes to 'version'. If the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * least-significant bit of the version number is set then an</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * update is in progress and the guest must wait to read a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * consistent set of values.  The correct way to interact with</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the version number is similar to Linux's seqlock: see the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * implementations of read_seqbegin/read_seqretry.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#version\">version</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#pad0\">pad0</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint64_t\">uint64_t</a> <a class=\"id\" href=\"#tsc_timestamp\">tsc_timestamp</a>;   <span class=\"comment\">/* TSC at last update of time vals.  */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint64_t\">uint64_t</a> <a class=\"id\" href=\"#system_time\">system_time</a>;     <span class=\"comment\">/* Time, in nanosecs, since boot.    */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Current system time:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   system_time + ((tsc - tsc_timestamp) &lt;&lt; tsc_shift) * tsc_to_system_mul</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * CPU frequency (Hz):</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *   ((10^9 &lt;&lt; 32) / tsc_to_system_mul) &gt;&gt; tsc_shift</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#tsc_to_system_mul\">tsc_to_system_mul</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#int8_t\">int8_t</a>   <a class=\"id\" href=\"#tsc_shift\">tsc_shift</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#int8_t\">int8_t</a>   <a class=\"id\" href=\"#pad1\">pad1</a>[3];", 
"}; <span class=\"comment\">/* 32 bytes */</span>", 
"", 
"struct <a class=\"id\" href=\"#vcpu_info\">vcpu_info</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 'evtchn_upcall_pending' is written non-zero by Xen to indicate</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a pending notification for a particular VCPU. It is then cleared</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * by the guest OS /before/ checking for pending work, thus avoiding</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a set-and-check race. Note that the mask is only accessed by Xen</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * on the CPU that is currently hosting the VCPU. This means that the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * pending and mask flags can be updated by the guest without special</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * synchronisation (i.e., no need for the x86 LOCK prefix).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This may seem suboptimal because if the pending flag is set by</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * a different CPU then an IPI may be scheduled even when the mask</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is set. However, note:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  1. The task of 'interrupt holdoff' is covered by the per-event-</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *     channel mask bits. A 'noisy' event that is continually being</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *     triggered can be masked at source at this very precise</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *     granularity.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  2. The main purpose of the per-VCPU mask is therefore to restrict</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *     reentrant execution: whether for concurrency control, or to</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *     prevent unbounded stack usage. Whatever the purpose, we expect</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *     that the mask will be asserted only for short periods at a time,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *     and so the likelihood of a 'spurious' IPI is suitably small.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The mask is read before making an event upcall to the guest: a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * non-zero mask therefore guarantees that the VCPU will not receive</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * an upcall activation. The mask is cleared when the VCPU requests</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to block: this avoids wakeup-waiting races.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint8_t\">uint8_t</a> <a class=\"id\" href=\"#evtchn_upcall_pending\">evtchn_upcall_pending</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint8_t\">uint8_t</a> <a class=\"id\" href=\"#evtchn_upcall_mask\">evtchn_upcall_mask</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#evtchn_pending_sel\">evtchn_pending_sel</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#arch_vcpu_info\">arch_vcpu_info</a> <a class=\"id\" href=\"#arch\">arch</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pvclock_vcpu_time_info\">pvclock_vcpu_time_info</a> <a class=\"id\" href=\"#time\">time</a>;", 
"}; <span class=\"comment\">/* 64 bytes (x86) */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Xen/kernel shared data -- pointer provided in start_info.</span>", 
"<span class=\"comment\"> * NB. We expect that this struct is smaller than a page.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#shared_info\">shared_info</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vcpu_info\">vcpu_info</a> <a class=\"id\" href=\"#vcpu_info\">vcpu_info</a>[<a class=\"id\" href=\"#MAX_VIRT_CPUS\">MAX_VIRT_CPUS</a>];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * A domain can create \"event channels\" on which it can send and receive</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * asynchronous event notifications. There are three classes of event that</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * are delivered by this mechanism:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  1. Bi-directional inter- and intra-domain connections. Domains must</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *     arrange out-of-band to set up a connection (usually by allocating</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *     an unbound 'listener' port and avertising that via a storage service</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *     such as xenstore).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  2. Physical interrupts. A domain with suitable hardware-access</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *     privileges can bind an event-channel port to a physical interrupt</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *     source.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  3. Virtual interrupts ('events'). A domain can bind an event-channel</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *     port to a virtual interrupt source, such as the virtual-timer</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *     device or the emergency console.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Event channels are addressed by a \"port index\". Each channel is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * associated with two bits of information:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  1. PENDING -- notifies the domain that there is a pending notification</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *     to be processed. This bit is cleared by the guest.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *  2. MASK -- if this bit is clear then a 0-&gt;1 transition of PENDING</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *     will cause an asynchronous upcall to be scheduled. This bit is only</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *     updated by the guest. It is read-only within Xen. If a channel</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *     becomes pending while the channel is masked then the 'edge' is lost</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *     (i.e., when the channel is unmasked, the guest must manually handle</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *     pending notifications as no upcall will be scheduled by Xen).</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * To expedite scanning of pending notifications, any 0-&gt;1 pending</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * transition on an unmasked channel causes a corresponding bit in a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * per-vcpu selector word to be set. Each bit in the selector covers a</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * 'C long' in the PENDING bitfield array.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#evtchn_pending\">evtchn_pending</a>[sizeof(unsigned long) * 8];", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#evtchn_mask\">evtchn_mask</a>[sizeof(unsigned long) * 8];", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Wallclock time: updated only by control software. Guests should base</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * their gettimeofday() syscall on this wallclock-base value.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#pvclock_wall_clock\">pvclock_wall_clock</a> <a class=\"id\" href=\"#wc\">wc</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#arch_shared_info\">arch_shared_info</a> <a class=\"id\" href=\"#arch\">arch</a>;", 
"", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Start-of-day memory layout for the initial domain (DOM0):</span>", 
"<span class=\"comment\"> *  1. The domain is started within contiguous virtual-memory region.</span>", 
"<span class=\"comment\"> *  2. The contiguous region begins and ends on an aligned 4MB boundary.</span>", 
"<span class=\"comment\"> *  3. The region start corresponds to the load address of the OS image.</span>", 
"<span class=\"comment\"> *     If the load address is not 4MB aligned then the address is rounded down.</span>", 
"<span class=\"comment\"> *  4. This the order of bootstrap elements in the initial virtual region:</span>", 
"<span class=\"comment\"> *      a. relocated kernel image</span>", 
"<span class=\"comment\"> *      b. initial ram disk              [mod_start, mod_len]</span>", 
"<span class=\"comment\"> *      c. list of allocated page frames [mfn_list, nr_pages]</span>", 
"<span class=\"comment\"> *      d. start_info_t structure        [register ESI (x86)]</span>", 
"<span class=\"comment\"> *      e. bootstrap page tables         [pt_base, CR3 (x86)]</span>", 
"<span class=\"comment\"> *      f. bootstrap stack               [register ESP (x86)]</span>", 
"<span class=\"comment\"> *  5. Bootstrap elements are packed together, but each is 4kB-aligned.</span>", 
"<span class=\"comment\"> *  6. The initial ram disk may be omitted.</span>", 
"<span class=\"comment\"> *  7. The list of page frames forms a contiguous 'pseudo-physical' memory</span>", 
"<span class=\"comment\"> *     layout for the domain. In particular, the bootstrap virtual-memory</span>", 
"<span class=\"comment\"> *     region is a 1:1 mapping to the first section of the pseudo-physical map.</span>", 
"<span class=\"comment\"> *  8. All bootstrap elements are mapped read-writable for the guest OS. The</span>", 
"<span class=\"comment\"> *     only exception is the bootstrap page table, which is mapped read-only.</span>", 
"<span class=\"comment\"> *  9. There is guaranteed to be at least 512kB padding after the final</span>", 
"<span class=\"comment\"> *     bootstrap element. If necessary, the bootstrap virtual region is</span>", 
"<span class=\"comment\"> *     extended by an extra 4MB to ensure this.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_GUEST_CMDLINE\">MAX_GUEST_CMDLINE</a> 1024", 
"struct <a class=\"id\" href=\"#start_info\">start_info</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* THE FOLLOWING ARE FILLED IN BOTH ON INITIAL BOOT AND ON RESUME.    */</span>", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#magic\">magic</a>[32];             <span class=\"comment\">/* \"xen-&lt;version&gt;-&lt;platform&gt;\".            */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_pages\">nr_pages</a>;     <span class=\"comment\">/* Total pages allocated to this domain.  */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#shared_info\">shared_info</a>;  <span class=\"comment\">/* MACHINE address of shared info struct. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#flags\">flags</a>;             <span class=\"comment\">/* SIF_xxx flags.                         */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#store_mfn\">store_mfn</a>;    <span class=\"comment\">/* MACHINE page number of shared page.    */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#store_evtchn\">store_evtchn</a>;      <span class=\"comment\">/* Event channel for store communication. */</span>", 
"<span class=\"ts\"/>union {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mfn\">mfn</a>;  <span class=\"comment\">/* MACHINE page number of console page.   */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uint32_t\">uint32_t</a>  <a class=\"id\" href=\"#evtchn\">evtchn</a>;   <span class=\"comment\">/* Event channel for console page.        */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>} <a class=\"id\" href=\"#domU\">domU</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#info_off\">info_off</a>;  <span class=\"comment\">/* Offset of console_info struct.         */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#uint32_t\">uint32_t</a> <a class=\"id\" href=\"#info_size\">info_size</a>; <span class=\"comment\">/* Size of console_info struct from start.*/</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>} <a class=\"id\" href=\"#dom0\">dom0</a>;", 
"<span class=\"ts\"/>} <a class=\"id\" href=\"#console\">console</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* THE FOLLOWING ARE ONLY FILLED IN ON INITIAL BOOT (NOT RESUME).     */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#pt_base\">pt_base</a>;      <span class=\"comment\">/* VIRTUAL address of page directory.     */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#nr_pt_frames\">nr_pt_frames</a>; <span class=\"comment\">/* Number of bootstrap p.t. frames.       */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mfn_list\">mfn_list</a>;     <span class=\"comment\">/* VIRTUAL address of page-frame list.    */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mod_start\">mod_start</a>;    <span class=\"comment\">/* VIRTUAL address of pre-loaded module.  */</span>", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#mod_len\">mod_len</a>;      <span class=\"comment\">/* Size (bytes) of pre-loaded module.     */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#int8_t\">int8_t</a> <a class=\"id\" href=\"#cmd_line\">cmd_line</a>[<a class=\"id\" href=\"#MAX_GUEST_CMDLINE\">MAX_GUEST_CMDLINE</a>];", 
"};", 
"", 
"<span class=\"comment\">/* These flags are passed in the 'flags' field of start_info_t. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SIF_PRIVILEGED\">SIF_PRIVILEGED</a>    (1<<0)  <span class=\"comment\">/* Is the domain privileged? */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SIF_INITDOMAIN\">SIF_INITDOMAIN</a>    (1<<1)  <span class=\"comment\">/* Is this the initial control domain? */</span>", 
"", 
"typedef <a class=\"id\" href=\"#uint64_t\">uint64_t</a> <a class=\"id\" href=\"#cpumap_t\">cpumap_t</a>;", 
"", 
"typedef <a class=\"id\" href=\"#uint8_t\">uint8_t</a> <a class=\"id\" href=\"#xen_domain_handle_t\">xen_domain_handle_t</a>[16];", 
"", 
"<span class=\"comment\">/* Turn a plain number into a C unsigned long constant. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__mk_unsigned_long\">__mk_unsigned_long</a>(<a class=\"id\" href=\"#x\">x</a>) <a class=\"id\" href=\"#x\">x</a> ## <a class=\"id\" href=\"#UL\">UL</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#mk_unsigned_long\">mk_unsigned_long</a>(<a class=\"id\" href=\"#x\">x</a>) <a class=\"id\" href=\"#__mk_unsigned_long\">__mk_unsigned_long</a>(<a class=\"id\" href=\"#x\">x</a>)", 
"", 
"#else <span class=\"comment\">/* __ASSEMBLY__ */</span>", 
"", 
"<span class=\"comment\">/* In assembly code we cannot use C numeric constant suffixes. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#mk_unsigned_long\">mk_unsigned_long</a>(<a class=\"id\" href=\"#x\">x</a>) <a class=\"id\" href=\"#x\">x</a>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* !__ASSEMBLY__ */</span>", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* __XEN_PUBLIC_XEN_H__ */</span>", 
];
xr_frag_insert('l/26/956c5b5168730a6aa5c29471f23b14a783206b.xr', __xr_tmp);
