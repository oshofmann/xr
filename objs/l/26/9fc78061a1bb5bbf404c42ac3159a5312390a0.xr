var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_PRIO_HEAP_H\">_LINUX_PRIO_HEAP_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_PRIO_HEAP_H\">_LINUX_PRIO_HEAP_H</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Simple insertion-only static-sized priority heap containing</span>", 
"<span class=\"comment\"> * pointers, based on CLR, chapter 7</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#gfp\">gfp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * struct ptr_heap - simple static-sized priority heap</span>", 
"<span class=\"comment\"> * @ptrs - pointer to data area</span>", 
"<span class=\"comment\"> * @max - max number of elements that can be stored in @ptrs</span>", 
"<span class=\"comment\"> * @size - current number of valid elements in @ptrs (in the range 0..@size-1</span>", 
"<span class=\"comment\"> * @gt: comparison operator, which should implement \"greater than\"</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#ptr_heap\">ptr_heap</a> {", 
"<span class=\"ts\"/>void **<a class=\"id\" href=\"#ptrs\">ptrs</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#max\">max</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>int (*<a class=\"id\" href=\"#gt\">gt</a>)(void *, void *);", 
"};", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * heap_init - initialize an empty heap with a given memory size</span>", 
"<span class=\"comment\"> * @heap: the heap structure to be initialized</span>", 
"<span class=\"comment\"> * @size: amount of memory to use in bytes</span>", 
"<span class=\"comment\"> * @gfp_mask: mask to pass to kmalloc()</span>", 
"<span class=\"comment\"> * @gt: comparison operator, which should implement \"greater than\"</span>", 
"<span class=\"comment\"> */</span>", 
"extern int <a class=\"id\" href=\"#heap_init\">heap_init</a>(struct <a class=\"id\" href=\"#ptr_heap\">ptr_heap</a> *<a class=\"id\" href=\"#heap\">heap</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#gfp_t\">gfp_t</a> <a class=\"id\" href=\"#gfp_mask\">gfp_mask</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>     int (*<a class=\"id\" href=\"#gt\">gt</a>)(void *, void *));", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * heap_free - release a heap's storage</span>", 
"<span class=\"comment\"> * @heap: the heap structure whose data should be released</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#heap_free\">heap_free</a>(struct <a class=\"id\" href=\"#ptr_heap\">ptr_heap</a> *<a class=\"id\" href=\"#heap\">heap</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * heap_insert - insert a value into the heap and return any overflowed value</span>", 
"<span class=\"comment\"> * @heap: the heap to be operated on</span>", 
"<span class=\"comment\"> * @p: the pointer to be inserted</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Attempts to insert the given value into the priority heap. If the</span>", 
"<span class=\"comment\"> * heap is full prior to the insertion, then the resulting heap will</span>", 
"<span class=\"comment\"> * consist of the smallest @max elements of the original heap and the</span>", 
"<span class=\"comment\"> * new element; the greatest element will be removed from the heap and</span>", 
"<span class=\"comment\"> * returned. Note that the returned element will be the new element</span>", 
"<span class=\"comment\"> * (i.e. no change to the heap) if the new element is greater than all</span>", 
"<span class=\"comment\"> * elements currently in the heap.</span>", 
"<span class=\"comment\"> */</span>", 
"extern void *<a class=\"id\" href=\"#heap_insert\">heap_insert</a>(struct <a class=\"id\" href=\"#ptr_heap\">ptr_heap</a> *<a class=\"id\" href=\"#heap\">heap</a>, void *<a class=\"id\" href=\"#p\">p</a>);", 
"", 
"", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* _LINUX_PRIO_HEAP_H */</span>", 
];
xr_frag_insert('l/26/9fc78061a1bb5bbf404c42ac3159a5312390a0.xr', __xr_tmp);
