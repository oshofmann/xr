var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * kernel/stop_machine.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2008, 2005<span class=\"ts\"/>IBM Corporation.</span>", 
"<span class=\"comment\"> * Copyright (C) 2008, 2005<span class=\"ts\"/>Rusty Russell rusty@rustcorp.com.au</span>", 
"<span class=\"comment\"> * Copyright (C) 2010<span class=\"ts\"/><span class=\"ts\"/>SUSE Linux Products GmbH</span>", 
"<span class=\"comment\"> * Copyright (C) 2010<span class=\"ts\"/><span class=\"ts\"/>Tejun Heo &lt;tj@kernel.org&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This file is released under the GPLv2 and any later version.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#completion\">completion</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#cpu\">cpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kthread\">kthread</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#percpu\">percpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stop_machine\">stop_machine</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kallsyms\">kallsyms</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#atomic\">atomic</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Structure to determine completion condition and record errors.  May</span>", 
"<span class=\"comment\"> * be shared by works on different cpus.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#cpu_stop_done\">cpu_stop_done</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr_todo\">nr_todo</a>;<span class=\"ts\"/><span class=\"comment\">/* nr left to execute */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#executed\">executed</a>;<span class=\"ts\"/><span class=\"comment\">/* actually executed? */</span>", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* collected return value */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#completion\">completion</a><span class=\"ts\"/><a class=\"id\" href=\"#completion\">completion</a>;<span class=\"ts\"/><span class=\"comment\">/* fired if nr_todo reaches 0 */</span>", 
"};", 
"", 
"<span class=\"comment\">/* the actual stopper, one per every possible cpu, enabled on online cpus */</span>", 
"struct <a class=\"id\" href=\"#cpu_stopper\">cpu_stopper</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock\">lock</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#enabled\">enabled</a>;<span class=\"ts\"/><span class=\"comment\">/* is this stopper enabled? */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#works\">works</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* list of pending works */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a><span class=\"ts\"/>*<a class=\"id\" href=\"#thread\">thread</a>;<span class=\"ts\"/><span class=\"comment\">/* stopper thread */</span>", 
"};", 
"", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#cpu_stopper\">cpu_stopper</a>, <a class=\"id\" href=\"#cpu_stopper\">cpu_stopper</a>);", 
"", 
"static void <a class=\"id\" href=\"#cpu_stop_init_done\">cpu_stop_init_done</a>(struct <a class=\"id\" href=\"#cpu_stop_done\">cpu_stop_done</a> *<a class=\"id\" href=\"#done\">done</a>, unsigned int <a class=\"id\" href=\"#nr_todo\">nr_todo</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#done\">done</a>, 0, sizeof(*<a class=\"id\" href=\"#done\">done</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#done\">done</a>-><a class=\"id\" href=\"#nr_todo\">nr_todo</a>, <a class=\"id\" href=\"#nr_todo\">nr_todo</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#init_completion\">init_completion</a>(&amp;<a class=\"id\" href=\"#done\">done</a>-><a class=\"id\" href=\"#completion\">completion</a>);", 
"}", 
"", 
"<span class=\"comment\">/* signal completion unless @done is NULL */</span>", 
"static void <a class=\"id\" href=\"#cpu_stop_signal_done\">cpu_stop_signal_done</a>(struct <a class=\"id\" href=\"#cpu_stop_done\">cpu_stop_done</a> *<a class=\"id\" href=\"#done\">done</a>, <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#executed\">executed</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#done\">done</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#executed\">executed</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#done\">done</a>-><a class=\"id\" href=\"#executed\">executed</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#done\">done</a>-><a class=\"id\" href=\"#nr_todo\">nr_todo</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#complete\">complete</a>(&amp;<a class=\"id\" href=\"#done\">done</a>-><a class=\"id\" href=\"#completion\">completion</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* queue @work to @stopper.  if offline, @work is completed immediately */</span>", 
"static void <a class=\"id\" href=\"#cpu_stop_queue_work\">cpu_stop_queue_work</a>(struct <a class=\"id\" href=\"#cpu_stopper\">cpu_stopper</a> *<a class=\"id\" href=\"#stopper\">stopper</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_stop_work\">cpu_stop_work</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#stopper\">stopper</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#stopper\">stopper</a>-><a class=\"id\" href=\"#enabled\">enabled</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#stopper\">stopper</a>-><a class=\"id\" href=\"#works\">works</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_process\">wake_up_process</a>(<a class=\"id\" href=\"#stopper\">stopper</a>-><a class=\"id\" href=\"#thread\">thread</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_stop_signal_done\">cpu_stop_signal_done</a>(<a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#done\">done</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#stopper\">stopper</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * stop_one_cpu - stop a cpu</span>", 
"<span class=\"comment\"> * @cpu: cpu to stop</span>", 
"<span class=\"comment\"> * @fn: function to execute</span>", 
"<span class=\"comment\"> * @arg: argument to @fn</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Execute @fn(@arg) on @cpu.  @fn is run in a process context with</span>", 
"<span class=\"comment\"> * the highest priority preempting any task on the cpu and</span>", 
"<span class=\"comment\"> * monopolizing it.  This function returns after the execution is</span>", 
"<span class=\"comment\"> * complete.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function doesn't guarantee @cpu stays online till @fn</span>", 
"<span class=\"comment\"> * completes.  If @cpu goes down in the middle, execution may happen</span>", 
"<span class=\"comment\"> * partially or fully on different cpus.  @fn should either be ready</span>", 
"<span class=\"comment\"> * for that or the caller should ensure that @cpu stays online until</span>", 
"<span class=\"comment\"> * this function completes.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * Might sleep.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * -ENOENT if @fn(@arg) was not executed because @cpu was offline;</span>", 
"<span class=\"comment\"> * otherwise, the return value of @fn.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#stop_one_cpu\">stop_one_cpu</a>(unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#cpu_stop_fn_t\">cpu_stop_fn_t</a> <a class=\"id\" href=\"#fn\">fn</a>, void *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_stop_done\">cpu_stop_done</a> <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_stop_work\">cpu_stop_work</a> <a class=\"id\" href=\"#work\">work</a> = { .<a class=\"id\" href=\"#fn\">fn</a> = <a class=\"id\" href=\"#fn\">fn</a>, .<a class=\"id\" href=\"#arg\">arg</a> = <a class=\"id\" href=\"#arg\">arg</a>, .<a class=\"id\" href=\"#done\">done</a> = &amp;<a class=\"id\" href=\"#done\">done</a> };", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_stop_init_done\">cpu_stop_init_done</a>(&amp;<a class=\"id\" href=\"#done\">done</a>, 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_stop_queue_work\">cpu_stop_queue_work</a>(&amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_stopper\">cpu_stopper</a>, <a class=\"id\" href=\"#cpu\">cpu</a>), &amp;<a class=\"id\" href=\"#work\">work</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_for_completion\">wait_for_completion</a>(&amp;<a class=\"id\" href=\"#done\">done</a>.<a class=\"id\" href=\"#completion\">completion</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#done\">done</a>.<a class=\"id\" href=\"#executed\">executed</a> ? <a class=\"id\" href=\"#done\">done</a>.<a class=\"id\" href=\"#ret\">ret</a> : -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * stop_one_cpu_nowait - stop a cpu but don't wait for completion</span>", 
"<span class=\"comment\"> * @cpu: cpu to stop</span>", 
"<span class=\"comment\"> * @fn: function to execute</span>", 
"<span class=\"comment\"> * @arg: argument to @fn</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Similar to stop_one_cpu() but doesn't wait for completion.  The</span>", 
"<span class=\"comment\"> * caller is responsible for ensuring @work_buf is currently unused</span>", 
"<span class=\"comment\"> * and will remain untouched until stopper starts executing @fn.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * Don't care.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#stop_one_cpu_nowait\">stop_one_cpu_nowait</a>(unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#cpu_stop_fn_t\">cpu_stop_fn_t</a> <a class=\"id\" href=\"#fn\">fn</a>, void *<a class=\"id\" href=\"#arg\">arg</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_stop_work\">cpu_stop_work</a> *<a class=\"id\" href=\"#work_buf\">work_buf</a>)", 
"{", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#work_buf\">work_buf</a> = (struct <a class=\"id\" href=\"#cpu_stop_work\">cpu_stop_work</a>){ .<a class=\"id\" href=\"#fn\">fn</a> = <a class=\"id\" href=\"#fn\">fn</a>, .<a class=\"id\" href=\"#arg\">arg</a> = <a class=\"id\" href=\"#arg\">arg</a>, };", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_stop_queue_work\">cpu_stop_queue_work</a>(&amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_stopper\">cpu_stopper</a>, <a class=\"id\" href=\"#cpu\">cpu</a>), <a class=\"id\" href=\"#work_buf\">work_buf</a>);", 
"}", 
"", 
"<span class=\"comment\">/* static data for stop_cpus */</span>", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#stop_cpus_mutex\">stop_cpus_mutex</a>);", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#cpu_stop_work\">cpu_stop_work</a>, <a class=\"id\" href=\"#stop_cpus_work\">stop_cpus_work</a>);", 
"", 
"int <a class=\"id\" href=\"#__stop_cpus\">__stop_cpus</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpumask\">cpumask</a>, <a class=\"id\" href=\"#cpu_stop_fn_t\">cpu_stop_fn_t</a> <a class=\"id\" href=\"#fn\">fn</a>, void *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_stop_work\">cpu_stop_work</a> *<a class=\"id\" href=\"#work\">work</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_stop_done\">cpu_stop_done</a> <a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* initialize works and done */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#cpumask\">cpumask</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#work\">work</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#stop_cpus_work\">stop_cpus_work</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#fn\">fn</a> = <a class=\"id\" href=\"#fn\">fn</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#arg\">arg</a> = <a class=\"id\" href=\"#arg\">arg</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#done\">done</a> = &amp;<a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_stop_init_done\">cpu_stop_init_done</a>(&amp;<a class=\"id\" href=\"#done\">done</a>, <a class=\"id\" href=\"#cpumask_weight\">cpumask_weight</a>(<a class=\"id\" href=\"#cpumask\">cpumask</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Disable preemption while queueing to avoid getting</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * preempted by a stopper which might wait for other stoppers</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to enter @fn which can lead to deadlock.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_cpu\">for_each_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#cpumask\">cpumask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_stop_queue_work\">cpu_stop_queue_work</a>(&amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_stopper\">cpu_stopper</a>, <a class=\"id\" href=\"#cpu\">cpu</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#stop_cpus_work\">stop_cpus_work</a>, <a class=\"id\" href=\"#cpu\">cpu</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_for_completion\">wait_for_completion</a>(&amp;<a class=\"id\" href=\"#done\">done</a>.<a class=\"id\" href=\"#completion\">completion</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#done\">done</a>.<a class=\"id\" href=\"#executed\">executed</a> ? <a class=\"id\" href=\"#done\">done</a>.<a class=\"id\" href=\"#ret\">ret</a> : -<a class=\"id\" href=\"#ENOENT\">ENOENT</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * stop_cpus - stop multiple cpus</span>", 
"<span class=\"comment\"> * @cpumask: cpus to stop</span>", 
"<span class=\"comment\"> * @fn: function to execute</span>", 
"<span class=\"comment\"> * @arg: argument to @fn</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Execute @fn(@arg) on online cpus in @cpumask.  On each target cpu,</span>", 
"<span class=\"comment\"> * @fn is run in a process context with the highest priority</span>", 
"<span class=\"comment\"> * preempting any task on the cpu and monopolizing it.  This function</span>", 
"<span class=\"comment\"> * returns after all executions are complete.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function doesn't guarantee the cpus in @cpumask stay online</span>", 
"<span class=\"comment\"> * till @fn completes.  If some cpus go down in the middle, execution</span>", 
"<span class=\"comment\"> * on the cpu may happen partially or fully on different cpus.  @fn</span>", 
"<span class=\"comment\"> * should either be ready for that or the caller should ensure that</span>", 
"<span class=\"comment\"> * the cpus stay online until this function completes.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * All stop_cpus() calls are serialized making it safe for @fn to wait</span>", 
"<span class=\"comment\"> * for all cpus to start executing it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * Might sleep.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * -ENOENT if @fn(@arg) was not executed at all because all cpus in</span>", 
"<span class=\"comment\"> * @cpumask were offline; otherwise, 0 if all executions of @fn</span>", 
"<span class=\"comment\"> * returned 0, any non zero return value if any returned non zero.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#stop_cpus\">stop_cpus</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpumask\">cpumask</a>, <a class=\"id\" href=\"#cpu_stop_fn_t\">cpu_stop_fn_t</a> <a class=\"id\" href=\"#fn\">fn</a>, void *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* static works are used, process one request at a time */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#stop_cpus_mutex\">stop_cpus_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__stop_cpus\">__stop_cpus</a>(<a class=\"id\" href=\"#cpumask\">cpumask</a>, <a class=\"id\" href=\"#fn\">fn</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#stop_cpus_mutex\">stop_cpus_mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * try_stop_cpus - try to stop multiple cpus</span>", 
"<span class=\"comment\"> * @cpumask: cpus to stop</span>", 
"<span class=\"comment\"> * @fn: function to execute</span>", 
"<span class=\"comment\"> * @arg: argument to @fn</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Identical to stop_cpus() except that it fails with -EAGAIN if</span>", 
"<span class=\"comment\"> * someone else is already using the facility.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * Might sleep.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * -EAGAIN if someone else is already stopping cpus, -ENOENT if</span>", 
"<span class=\"comment\"> * @fn(@arg) was not executed at all because all cpus in @cpumask were</span>", 
"<span class=\"comment\"> * offline; otherwise, 0 if all executions of @fn returned 0, any non</span>", 
"<span class=\"comment\"> * zero return value if any returned non zero.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#try_stop_cpus\">try_stop_cpus</a>(const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpumask\">cpumask</a>, <a class=\"id\" href=\"#cpu_stop_fn_t\">cpu_stop_fn_t</a> <a class=\"id\" href=\"#fn\">fn</a>, void *<a class=\"id\" href=\"#arg\">arg</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* static works are used, process one request at a time */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#mutex_trylock\">mutex_trylock</a>(&amp;<a class=\"id\" href=\"#stop_cpus_mutex\">stop_cpus_mutex</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__stop_cpus\">__stop_cpus</a>(<a class=\"id\" href=\"#cpumask\">cpumask</a>, <a class=\"id\" href=\"#fn\">fn</a>, <a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#stop_cpus_mutex\">stop_cpus_mutex</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#cpu_stopper_thread\">cpu_stopper_thread</a>(void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_stopper\">cpu_stopper</a> *<a class=\"id\" href=\"#stopper\">stopper</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_stop_work\">cpu_stop_work</a> *<a class=\"id\" href=\"#work\">work</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<a class=\"id\" href=\"#repeat\">repeat</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_current_state\">set_current_state</a>(<a class=\"id\" href=\"#TASK_INTERRUPTIBLE\">TASK_INTERRUPTIBLE</a>);<span class=\"ts\"/><span class=\"comment\">/* mb paired w/ kthread_stop */</span>", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#kthread_should_stop\">kthread_should_stop</a>()) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#work\">work</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#stopper\">stopper</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#stopper\">stopper</a>-><a class=\"id\" href=\"#works\">works</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#work\">work</a> = <a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(&amp;<a class=\"id\" href=\"#stopper\">stopper</a>-><a class=\"id\" href=\"#works\">works</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_stop_work\">cpu_stop_work</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#stopper\">stopper</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#work\">work</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_stop_fn_t\">cpu_stop_fn_t</a> <a class=\"id\" href=\"#fn\">fn</a> = <a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#fn\">fn</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#arg\">arg</a> = <a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#arg\">arg</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_stop_done\">cpu_stop_done</a> *<a class=\"id\" href=\"#done\">done</a> = <a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#done\">done</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>char <a class=\"id\" href=\"#ksym_buf\">ksym_buf</a>[<a class=\"id\" href=\"#KSYM_NAME_LEN\">KSYM_NAME_LEN</a>];", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_current_state\">__set_current_state</a>(<a class=\"id\" href=\"#TASK_RUNNING\">TASK_RUNNING</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* cpu stop callbacks are not allowed to sleep */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#fn\">fn</a>(<a class=\"id\" href=\"#arg\">arg</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#done\">done</a>-><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* restore preemption and check it's still balanced */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ONCE\">WARN_ONCE</a>(<a class=\"id\" href=\"#preempt_count\">preempt_count</a>(),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  \"cpu_stop: %s(%p) leaked preempt count\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#kallsyms_lookup\">kallsyms_lookup</a>((unsigned long)<a class=\"id\" href=\"#fn\">fn</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#ksym_buf\">ksym_buf</a>), <a class=\"id\" href=\"#arg\">arg</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_stop_signal_done\">cpu_stop_signal_done</a>(<a class=\"id\" href=\"#done\">done</a>, <a class=\"id\" href=\"#true\">true</a>);", 
"<span class=\"ts\"/>} else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#repeat\">repeat</a>;", 
"}", 
"", 
"<span class=\"comment\">/* manage stopper for a cpu, mostly lifted from sched migration thread mgmt */</span>", 
"static int <a class=\"id\" href=\"#__cpuinit\">__cpuinit</a> <a class=\"id\" href=\"#cpu_stop_cpu_callback\">cpu_stop_cpu_callback</a>(struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> *<a class=\"id\" href=\"#nfb\">nfb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   unsigned long <a class=\"id\" href=\"#action\">action</a>, void *<a class=\"id\" href=\"#hcpu\">hcpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#sched_param\">sched_param</a> <a class=\"id\" href=\"#param\">param</a> = { .<a class=\"id\" href=\"#sched_priority\">sched_priority</a> = <a class=\"id\" href=\"#MAX_RT_PRIO\">MAX_RT_PRIO</a> - 1 };", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a> = (unsigned long)<a class=\"id\" href=\"#hcpu\">hcpu</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_stopper\">cpu_stopper</a> *<a class=\"id\" href=\"#stopper\">stopper</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_stopper\">cpu_stopper</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#action\">action</a> &amp; ~<a class=\"id\" href=\"#CPU_TASKS_FROZEN\">CPU_TASKS_FROZEN</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_UP_PREPARE\">CPU_UP_PREPARE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#stopper\">stopper</a>-><a class=\"id\" href=\"#thread\">thread</a> || <a class=\"id\" href=\"#stopper\">stopper</a>-><a class=\"id\" href=\"#enabled\">enabled</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>       !<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#stopper\">stopper</a>-><a class=\"id\" href=\"#works\">works</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#kthread_create\">kthread_create</a>(<a class=\"id\" href=\"#cpu_stopper_thread\">cpu_stopper_thread</a>, <a class=\"id\" href=\"#stopper\">stopper</a>, \"migration/%d\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#p\">p</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_BAD\">NOTIFY_BAD</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sched_setscheduler_nocheck\">sched_setscheduler_nocheck</a>(<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#SCHED_FIFO\">SCHED_FIFO</a>, &amp;<a class=\"id\" href=\"#param\">param</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#get_task_struct\">get_task_struct</a>(<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stopper\">stopper</a>-><a class=\"id\" href=\"#thread\">thread</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_ONLINE\">CPU_ONLINE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kthread_bind\">kthread_bind</a>(<a class=\"id\" href=\"#stopper\">stopper</a>-><a class=\"id\" href=\"#thread\">thread</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* strictly unnecessary, as first user will wake it */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up_process\">wake_up_process</a>(<a class=\"id\" href=\"#stopper\">stopper</a>-><a class=\"id\" href=\"#thread\">thread</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* mark enabled */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#stopper\">stopper</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stopper\">stopper</a>-><a class=\"id\" href=\"#enabled\">enabled</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#stopper\">stopper</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_HOTPLUG_CPU\">CONFIG_HOTPLUG_CPU</a>", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_UP_CANCELED\">CPU_UP_CANCELED</a>:", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#CPU_POST_DEAD\">CPU_POST_DEAD</a>:", 
"<span class=\"ts\"/>{", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_stop_work\">cpu_stop_work</a> *<a class=\"id\" href=\"#work\">work</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* kill the stopper */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kthread_stop\">kthread_stop</a>(<a class=\"id\" href=\"#stopper\">stopper</a>-><a class=\"id\" href=\"#thread\">thread</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* drain remaining works */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irq\">spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#stopper\">stopper</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#work\">work</a>, &amp;<a class=\"id\" href=\"#stopper\">stopper</a>-><a class=\"id\" href=\"#works\">works</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_stop_signal_done\">cpu_stop_signal_done</a>(<a class=\"id\" href=\"#work\">work</a>-><a class=\"id\" href=\"#done\">done</a>, <a class=\"id\" href=\"#false\">false</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stopper\">stopper</a>-><a class=\"id\" href=\"#enabled\">enabled</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irq\">spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#stopper\">stopper</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* release the stopper */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_task_struct\">put_task_struct</a>(<a class=\"id\" href=\"#stopper\">stopper</a>-><a class=\"id\" href=\"#thread\">thread</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stopper\">stopper</a>-><a class=\"id\" href=\"#thread\">thread</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NOTIFY_OK\">NOTIFY_OK</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Give it a higher priority so that cpu stopper is available to other</span>", 
"<span class=\"comment\"> * cpu notifiers.  It currently shares the same priority as sched</span>", 
"<span class=\"comment\"> * migration_notifier.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#notifier_block\">notifier_block</a> <a class=\"id\" href=\"#__cpuinitdata\">__cpuinitdata</a> <a class=\"id\" href=\"#cpu_stop_cpu_notifier\">cpu_stop_cpu_notifier</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#notifier_call\">notifier_call</a><span class=\"ts\"/>= <a class=\"id\" href=\"#cpu_stop_cpu_callback\">cpu_stop_cpu_callback</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#priority\">priority</a><span class=\"ts\"/>= 10,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#cpu_stop_init\">cpu_stop_init</a>(void)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#bcpu\">bcpu</a> = (void *)(long)<a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#cpu_stopper\">cpu_stopper</a> *<a class=\"id\" href=\"#stopper\">stopper</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_stopper\">cpu_stopper</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_init\">spin_lock_init</a>(&amp;<a class=\"id\" href=\"#stopper\">stopper</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#stopper\">stopper</a>-><a class=\"id\" href=\"#works\">works</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* start one for the boot cpu */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#cpu_stop_cpu_callback\">cpu_stop_cpu_callback</a>(&amp;<a class=\"id\" href=\"#cpu_stop_cpu_notifier\">cpu_stop_cpu_notifier</a>, <a class=\"id\" href=\"#CPU_UP_PREPARE\">CPU_UP_PREPARE</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#bcpu\">bcpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#err\">err</a> == <a class=\"id\" href=\"#NOTIFY_BAD\">NOTIFY_BAD</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_stop_cpu_callback\">cpu_stop_cpu_callback</a>(&amp;<a class=\"id\" href=\"#cpu_stop_cpu_notifier\">cpu_stop_cpu_notifier</a>, <a class=\"id\" href=\"#CPU_ONLINE\">CPU_ONLINE</a>, <a class=\"id\" href=\"#bcpu\">bcpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#register_cpu_notifier\">register_cpu_notifier</a>(&amp;<a class=\"id\" href=\"#cpu_stop_cpu_notifier\">cpu_stop_cpu_notifier</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"<a class=\"id\" href=\"#early_initcall\">early_initcall</a>(<a class=\"id\" href=\"#cpu_stop_init\">cpu_stop_init</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_STOP_MACHINE\">CONFIG_STOP_MACHINE</a>", 
"", 
"<span class=\"comment\">/* This controls the threads on each CPU. */</span>", 
"enum <a class=\"id\" href=\"#stopmachine_state\">stopmachine_state</a> {", 
"<span class=\"ts\"/><span class=\"comment\">/* Dummy starting state for thread. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#STOPMACHINE_NONE\">STOPMACHINE_NONE</a>,", 
"<span class=\"ts\"/><span class=\"comment\">/* Awaiting everyone to be scheduled. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#STOPMACHINE_PREPARE\">STOPMACHINE_PREPARE</a>,", 
"<span class=\"ts\"/><span class=\"comment\">/* Disable interrupts. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#STOPMACHINE_DISABLE_IRQ\">STOPMACHINE_DISABLE_IRQ</a>,", 
"<span class=\"ts\"/><span class=\"comment\">/* Run the function */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#STOPMACHINE_RUN\">STOPMACHINE_RUN</a>,", 
"<span class=\"ts\"/><span class=\"comment\">/* Exit */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#STOPMACHINE_EXIT\">STOPMACHINE_EXIT</a>,", 
"};", 
"", 
"struct <a class=\"id\" href=\"#stop_machine_data\">stop_machine_data</a> {", 
"<span class=\"ts\"/>int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(*<a class=\"id\" href=\"#fn\">fn</a>)(void *);", 
"<span class=\"ts\"/>void<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Like num_online_cpus(), but hotplug cpu uses us, so we need this. */</span>", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#num_threads\">num_threads</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#cpumask\">cpumask</a><span class=\"ts\"/>*<a class=\"id\" href=\"#active_cpus\">active_cpus</a>;", 
"", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#stopmachine_state\">stopmachine_state</a><span class=\"ts\"/><a class=\"id\" href=\"#state\">state</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_t\">atomic_t</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#thread_ack\">thread_ack</a>;", 
"};", 
"", 
"static void <a class=\"id\" href=\"#set_state\">set_state</a>(struct <a class=\"id\" href=\"#stop_machine_data\">stop_machine_data</a> *<a class=\"id\" href=\"#smdata\">smdata</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      enum <a class=\"id\" href=\"#stopmachine_state\">stopmachine_state</a> <a class=\"id\" href=\"#newstate\">newstate</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Reset ack counter. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_set\">atomic_set</a>(&amp;<a class=\"id\" href=\"#smdata\">smdata</a>-><a class=\"id\" href=\"#thread_ack\">thread_ack</a>, <a class=\"id\" href=\"#smdata\">smdata</a>-><a class=\"id\" href=\"#num_threads\">num_threads</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smdata\">smdata</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#newstate\">newstate</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Last one to ack a state moves to the next state. */</span>", 
"static void <a class=\"id\" href=\"#ack_state\">ack_state</a>(struct <a class=\"id\" href=\"#stop_machine_data\">stop_machine_data</a> *<a class=\"id\" href=\"#smdata\">smdata</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_dec_and_test\">atomic_dec_and_test</a>(&amp;<a class=\"id\" href=\"#smdata\">smdata</a>-><a class=\"id\" href=\"#thread_ack\">thread_ack</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_state\">set_state</a>(<a class=\"id\" href=\"#smdata\">smdata</a>, <a class=\"id\" href=\"#smdata\">smdata</a>-><a class=\"id\" href=\"#state\">state</a> + 1);", 
"}", 
"", 
"<span class=\"comment\">/* This is the cpu_stop function which stops the CPU. */</span>", 
"static int <a class=\"id\" href=\"#stop_machine_cpu_stop\">stop_machine_cpu_stop</a>(void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#stop_machine_data\">stop_machine_data</a> *<a class=\"id\" href=\"#smdata\">smdata</a> = <a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>enum <a class=\"id\" href=\"#stopmachine_state\">stopmachine_state</a> <a class=\"id\" href=\"#curstate\">curstate</a> = <a class=\"id\" href=\"#STOPMACHINE_NONE\">STOPMACHINE_NONE</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>(), <a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#is_active\">is_active</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#smdata\">smdata</a>-><a class=\"id\" href=\"#active_cpus\">active_cpus</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#is_active\">is_active</a> = <a class=\"id\" href=\"#cpu\">cpu</a> == <a class=\"id\" href=\"#cpumask_first\">cpumask_first</a>(<a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#is_active\">is_active</a> = <a class=\"id\" href=\"#cpumask_test_cpu\">cpumask_test_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#smdata\">smdata</a>-><a class=\"id\" href=\"#active_cpus\">active_cpus</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Simple state machine */</span>", 
"<span class=\"ts\"/>do {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Chill out and ensure we re-read stopmachine_state. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpu_relax\">cpu_relax</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#smdata\">smdata</a>-><a class=\"id\" href=\"#state\">state</a> != <a class=\"id\" href=\"#curstate\">curstate</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#curstate\">curstate</a> = <a class=\"id\" href=\"#smdata\">smdata</a>-><a class=\"id\" href=\"#state\">state</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>switch (<a class=\"id\" href=\"#curstate\">curstate</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#STOPMACHINE_DISABLE_IRQ\">STOPMACHINE_DISABLE_IRQ</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local_irq_disable\">local_irq_disable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hard_irq_disable\">hard_irq_disable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>case <a class=\"id\" href=\"#STOPMACHINE_RUN\">STOPMACHINE_RUN</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#is_active\">is_active</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#smdata\">smdata</a>-><a class=\"id\" href=\"#fn\">fn</a>(<a class=\"id\" href=\"#smdata\">smdata</a>-><a class=\"id\" href=\"#data\">data</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ack_state\">ack_state</a>(<a class=\"id\" href=\"#smdata\">smdata</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>} while (<a class=\"id\" href=\"#curstate\">curstate</a> != <a class=\"id\" href=\"#STOPMACHINE_EXIT\">STOPMACHINE_EXIT</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local_irq_enable\">local_irq_enable</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"int <a class=\"id\" href=\"#__stop_machine\">__stop_machine</a>(int (*<a class=\"id\" href=\"#fn\">fn</a>)(void *), void *<a class=\"id\" href=\"#data\">data</a>, const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpus\">cpus</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#stop_machine_data\">stop_machine_data</a> <a class=\"id\" href=\"#smdata\">smdata</a> = { .<a class=\"id\" href=\"#fn\">fn</a> = <a class=\"id\" href=\"#fn\">fn</a>, .<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#data\">data</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    .<a class=\"id\" href=\"#num_threads\">num_threads</a> = <a class=\"id\" href=\"#num_online_cpus\">num_online_cpus</a>(),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    .<a class=\"id\" href=\"#active_cpus\">active_cpus</a> = <a class=\"id\" href=\"#cpus\">cpus</a> };", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Set the initial state and stop all online cpus. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_state\">set_state</a>(&amp;<a class=\"id\" href=\"#smdata\">smdata</a>, <a class=\"id\" href=\"#STOPMACHINE_PREPARE\">STOPMACHINE_PREPARE</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#stop_cpus\">stop_cpus</a>(<a class=\"id\" href=\"#cpu_online_mask\">cpu_online_mask</a>, <a class=\"id\" href=\"#stop_machine_cpu_stop\">stop_machine_cpu_stop</a>, &amp;<a class=\"id\" href=\"#smdata\">smdata</a>);", 
"}", 
"", 
"int <a class=\"id\" href=\"#stop_machine\">stop_machine</a>(int (*<a class=\"id\" href=\"#fn\">fn</a>)(void *), void *<a class=\"id\" href=\"#data\">data</a>, const struct <a class=\"id\" href=\"#cpumask\">cpumask</a> *<a class=\"id\" href=\"#cpus\">cpus</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* No CPUs can come up or down during this. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#get_online_cpus\">get_online_cpus</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#__stop_machine\">__stop_machine</a>(<a class=\"id\" href=\"#fn\">fn</a>, <a class=\"id\" href=\"#data\">data</a>, <a class=\"id\" href=\"#cpus\">cpus</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_online_cpus\">put_online_cpus</a>();", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#stop_machine\">stop_machine</a>);", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a><span class=\"ts\"/><span class=\"comment\">/* CONFIG_STOP_MACHINE */</span>", 
];
xr_frag_insert('l/26/a690cb301e57072c239cd5f4f1cf23aad85733.xr', __xr_tmp);
