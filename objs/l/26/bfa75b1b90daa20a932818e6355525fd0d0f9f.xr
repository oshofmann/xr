var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#_LINUX_OF_H\">_LINUX_OF_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#_LINUX_OF_H\">_LINUX_OF_H</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Definitions for talking to the Open Firmware PROM on</span>", 
"<span class=\"comment\"> * Power Macintosh and other computers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 1996-2005 Paul Mackerras.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Updates for PPC64 by Peter Bergner &amp; David Engebretsen, IBM Corp.</span>", 
"<span class=\"comment\"> * Updates for SPARC64 by David S. Miller</span>", 
"<span class=\"comment\"> * Derived from PowerPC and Sparc prom.h files by Stephen Rothwell, IBM Corp.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This program is free software; you can redistribute it and/or</span>", 
"<span class=\"comment\"> * modify it under the terms of the GNU General Public License</span>", 
"<span class=\"comment\"> * as published by the Free Software Foundation; either version</span>", 
"<span class=\"comment\"> * 2 of the License, or (at your option) any later version.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bitops\">bitops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kref\">kref</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mod_devicetable\">mod_devicetable</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#byteorder\">byteorder</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_OF\">CONFIG_OF</a>", 
"", 
"typedef <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#phandle\">phandle</a>;", 
"typedef <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#ihandle\">ihandle</a>;", 
"", 
"struct <a class=\"id\" href=\"#property\">property</a> {", 
"<span class=\"ts\"/>char<span class=\"ts\"/>*<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>int<span class=\"ts\"/><a class=\"id\" href=\"#length\">length</a>;", 
"<span class=\"ts\"/>void<span class=\"ts\"/>*<a class=\"id\" href=\"#value\">value</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#property\">property</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#_flags\">_flags</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#unique_id\">unique_id</a>;", 
"};", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SPARC\">CONFIG_SPARC</a>)", 
"struct <a class=\"id\" href=\"#of_irq_controller\">of_irq_controller</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"struct <a class=\"id\" href=\"#device_node\">device_node</a> {", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a>;", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#phandle\">phandle</a> <a class=\"id\" href=\"#phandle\">phandle</a>;", 
"<span class=\"ts\"/>char<span class=\"ts\"/>*<a class=\"id\" href=\"#full_name\">full_name</a>;", 
"", 
"<span class=\"ts\"/>struct<span class=\"ts\"/><a class=\"id\" href=\"#property\">property</a> *<a class=\"id\" href=\"#properties\">properties</a>;", 
"<span class=\"ts\"/>struct<span class=\"ts\"/><a class=\"id\" href=\"#property\">property</a> *<a class=\"id\" href=\"#deadprops\">deadprops</a>;<span class=\"ts\"/><span class=\"comment\">/* removed properties */</span>", 
"<span class=\"ts\"/>struct<span class=\"ts\"/><a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>struct<span class=\"ts\"/><a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#child\">child</a>;", 
"<span class=\"ts\"/>struct<span class=\"ts\"/><a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#sibling\">sibling</a>;", 
"<span class=\"ts\"/>struct<span class=\"ts\"/><a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#next\">next</a>;<span class=\"ts\"/><span class=\"comment\">/* next device of same type */</span>", 
"<span class=\"ts\"/>struct<span class=\"ts\"/><a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#allnext\">allnext</a>;<span class=\"ts\"/><span class=\"comment\">/* next in list of all nodes */</span>", 
"<span class=\"ts\"/>struct<span class=\"ts\"/><a class=\"id\" href=\"#proc_dir_entry\">proc_dir_entry</a> *<a class=\"id\" href=\"#pde\">pde</a>;<span class=\"ts\"/><span class=\"comment\">/* this node's proc directory */</span>", 
"<span class=\"ts\"/>struct<span class=\"ts\"/><a class=\"id\" href=\"#kref\">kref</a> <a class=\"id\" href=\"#kref\">kref</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#_flags\">_flags</a>;", 
"<span class=\"ts\"/>void<span class=\"ts\"/>*<a class=\"id\" href=\"#data\">data</a>;", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SPARC\">CONFIG_SPARC</a>)", 
"<span class=\"ts\"/>char<span class=\"ts\"/>*<a class=\"id\" href=\"#path_component_name\">path_component_name</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#unique_id\">unique_id</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#of_irq_controller\">of_irq_controller</a> *<a class=\"id\" href=\"#irq_trans\">irq_trans</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"};", 
"", 
"<span class=\"comment\">/* Pointer for first entry in chain of all nodes. */</span>", 
"extern struct <a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#allnodes\">allnodes</a>;", 
"extern struct <a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#of_chosen\">of_chosen</a>;", 
"extern <a class=\"id\" href=\"#rwlock_t\">rwlock_t</a> <a class=\"id\" href=\"#devtree_lock\">devtree_lock</a>;", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#of_node_is_root\">of_node_is_root</a>(const struct <a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#node\">node</a> && (<a class=\"id\" href=\"#node\">node</a>-><a class=\"id\" href=\"#parent\">parent</a> == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#of_node_check_flag\">of_node_check_flag</a>(struct <a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#n\">n</a>, unsigned long <a class=\"id\" href=\"#flag\">flag</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#flag\">flag</a>, &amp;<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#_flags\">_flags</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#of_node_set_flag\">of_node_set_flag</a>(struct <a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#n\">n</a>, unsigned long <a class=\"id\" href=\"#flag\">flag</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#flag\">flag</a>, &amp;<a class=\"id\" href=\"#n\">n</a>-><a class=\"id\" href=\"#_flags\">_flags</a>);", 
"}", 
"", 
"extern struct <a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#of_find_all_nodes\">of_find_all_nodes</a>(struct <a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#prev\">prev</a>);", 
"", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_SPARC\">CONFIG_SPARC</a>)", 
"<span class=\"comment\">/* Dummy ref counting routines - to be implemented later */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> struct <a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#of_node_get\">of_node_get</a>(struct <a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#node\">node</a>;", 
"}", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#of_node_put\">of_node_put</a>(struct <a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#node\">node</a>)", 
"{", 
"}", 
"", 
"#else", 
"extern struct <a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#of_node_get\">of_node_get</a>(struct <a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#node\">node</a>);", 
"extern void <a class=\"id\" href=\"#of_node_put\">of_node_put</a>(struct <a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#node\">node</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * OF address retreival &amp; translation</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* Helper to read a big number; size is in cells (not bytes) */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#of_read_number\">of_read_number</a>(const <a class=\"id\" href=\"#__be32\">__be32</a> *<a class=\"id\" href=\"#cell\">cell</a>, int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#r\">r</a> = 0;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#size\">size</a>--)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#r\">r</a> = (<a class=\"id\" href=\"#r\">r</a> << 32) | <a class=\"id\" href=\"#be32_to_cpu\">be32_to_cpu</a>(*(<a class=\"id\" href=\"#cell\">cell</a>++));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#r\">r</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Like of_read_number, but we want an unsigned long result */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#of_read_ulong\">of_read_ulong</a>(const <a class=\"id\" href=\"#__be32\">__be32</a> *<a class=\"id\" href=\"#cell\">cell</a>, int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* toss away upper bits if unsigned long is smaller than u64 */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#of_read_number\">of_read_number</a>(<a class=\"id\" href=\"#cell\">cell</a>, <a class=\"id\" href=\"#size\">size</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#prom\">prom</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/* Default #address and #size cells.  Allow arch asm/prom.h to override */</span>", 
"#if !<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#OF_ROOT_NODE_ADDR_CELLS_DEFAULT\">OF_ROOT_NODE_ADDR_CELLS_DEFAULT</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#OF_ROOT_NODE_ADDR_CELLS_DEFAULT\">OF_ROOT_NODE_ADDR_CELLS_DEFAULT</a> 1", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#OF_ROOT_NODE_SIZE_CELLS_DEFAULT\">OF_ROOT_NODE_SIZE_CELLS_DEFAULT</a> 1", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* Default string compare functions, Allow arch asm/prom.h to override */</span>", 
"#if !<a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#of_compat_cmp\">of_compat_cmp</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#of_compat_cmp\">of_compat_cmp</a>(<a class=\"id\" href=\"#s1\">s1</a>, <a class=\"id\" href=\"#s2\">s2</a>, <a class=\"id\" href=\"#l\">l</a>)<span class=\"ts\"/><a class=\"id\" href=\"#strcasecmp\">strcasecmp</a>((<a class=\"id\" href=\"#s1\">s1</a>), (<a class=\"id\" href=\"#s2\">s2</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#of_prop_cmp\">of_prop_cmp</a>(<a class=\"id\" href=\"#s1\">s1</a>, <a class=\"id\" href=\"#s2\">s2</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcmp\">strcmp</a>((<a class=\"id\" href=\"#s1\">s1</a>), (<a class=\"id\" href=\"#s2\">s2</a>))", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#of_node_cmp\">of_node_cmp</a>(<a class=\"id\" href=\"#s1\">s1</a>, <a class=\"id\" href=\"#s2\">s2</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#strcasecmp\">strcasecmp</a>((<a class=\"id\" href=\"#s1\">s1</a>), (<a class=\"id\" href=\"#s2\">s2</a>))", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* flag descriptions */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#OF_DYNAMIC\">OF_DYNAMIC</a><span class=\"ts\"/>1 <span class=\"comment\">/* node and properties were allocated via kmalloc */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#OF_DETACHED\">OF_DETACHED</a><span class=\"ts\"/>2 <span class=\"comment\">/* node has been detached from the device tree */</span>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#OF_IS_DYNAMIC\">OF_IS_DYNAMIC</a>(<a class=\"id\" href=\"#x\">x</a>) <a class=\"id\" href=\"#test_bit\">test_bit</a>(<a class=\"id\" href=\"#OF_DYNAMIC\">OF_DYNAMIC</a>, &amp;<a class=\"id\" href=\"#x\">x</a>-><a class=\"id\" href=\"#_flags\">_flags</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#OF_MARK_DYNAMIC\">OF_MARK_DYNAMIC</a>(<a class=\"id\" href=\"#x\">x</a>) <a class=\"id\" href=\"#set_bit\">set_bit</a>(<a class=\"id\" href=\"#OF_DYNAMIC\">OF_DYNAMIC</a>, &amp;<a class=\"id\" href=\"#x\">x</a>-><a class=\"id\" href=\"#_flags\">_flags</a>)", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#OF_BAD_ADDR\">OF_BAD_ADDR</a><span class=\"ts\"/>((<a class=\"id\" href=\"#u64\">u64</a>)-1)", 
"", 
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#of_node_to_nid\">of_node_to_nid</a>", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#of_node_to_nid\">of_node_to_nid</a>(struct <a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#np\">np</a>) { return -1; }", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#of_node_to_nid\">of_node_to_nid</a> <a class=\"id\" href=\"#of_node_to_nid\">of_node_to_nid</a>", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"extern struct <a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#of_find_node_by_name\">of_find_node_by_name</a>(struct <a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#from\">from</a>,", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_node_by_name\">for_each_node_by_name</a>(<a class=\"id\" href=\"#dn\">dn</a>, <a class=\"id\" href=\"#name\">name</a>) \\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#dn\">dn</a> = <a class=\"id\" href=\"#of_find_node_by_name\">of_find_node_by_name</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#name\">name</a>); <a class=\"id\" href=\"#dn\">dn</a>; \\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#dn\">dn</a> = <a class=\"id\" href=\"#of_find_node_by_name\">of_find_node_by_name</a>(<a class=\"id\" href=\"#dn\">dn</a>, <a class=\"id\" href=\"#name\">name</a>))", 
"extern struct <a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#of_find_node_by_type\">of_find_node_by_type</a>(struct <a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#from\">from</a>,", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#type\">type</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_node_by_type\">for_each_node_by_type</a>(<a class=\"id\" href=\"#dn\">dn</a>, <a class=\"id\" href=\"#type\">type</a>) \\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#dn\">dn</a> = <a class=\"id\" href=\"#of_find_node_by_type\">of_find_node_by_type</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#type\">type</a>); <a class=\"id\" href=\"#dn\">dn</a>; \\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#dn\">dn</a> = <a class=\"id\" href=\"#of_find_node_by_type\">of_find_node_by_type</a>(<a class=\"id\" href=\"#dn\">dn</a>, <a class=\"id\" href=\"#type\">type</a>))", 
"extern struct <a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#of_find_compatible_node\">of_find_compatible_node</a>(struct <a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#from\">from</a>,", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#type\">type</a>, const char *<a class=\"id\" href=\"#compat\">compat</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_compatible_node\">for_each_compatible_node</a>(<a class=\"id\" href=\"#dn\">dn</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#compatible\">compatible</a>) \\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#dn\">dn</a> = <a class=\"id\" href=\"#of_find_compatible_node\">of_find_compatible_node</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#compatible\">compatible</a>); <a class=\"id\" href=\"#dn\">dn</a>; \\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#dn\">dn</a> = <a class=\"id\" href=\"#of_find_compatible_node\">of_find_compatible_node</a>(<a class=\"id\" href=\"#dn\">dn</a>, <a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#compatible\">compatible</a>))", 
"extern struct <a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#of_find_matching_node\">of_find_matching_node</a>(struct <a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#from\">from</a>,", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#of_device_id\">of_device_id</a> *<a class=\"id\" href=\"#matches\">matches</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_matching_node\">for_each_matching_node</a>(<a class=\"id\" href=\"#dn\">dn</a>, <a class=\"id\" href=\"#matches\">matches</a>) \\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#dn\">dn</a> = <a class=\"id\" href=\"#of_find_matching_node\">of_find_matching_node</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#matches\">matches</a>); <a class=\"id\" href=\"#dn\">dn</a>; \\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#dn\">dn</a> = <a class=\"id\" href=\"#of_find_matching_node\">of_find_matching_node</a>(<a class=\"id\" href=\"#dn\">dn</a>, <a class=\"id\" href=\"#matches\">matches</a>))", 
"extern struct <a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#of_find_node_by_path\">of_find_node_by_path</a>(const char *<a class=\"id\" href=\"#path\">path</a>);", 
"extern struct <a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#of_find_node_by_phandle\">of_find_node_by_phandle</a>(<a class=\"id\" href=\"#phandle\">phandle</a> <a class=\"id\" href=\"#handle\">handle</a>);", 
"extern struct <a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#of_get_parent\">of_get_parent</a>(const struct <a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#node\">node</a>);", 
"extern struct <a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#of_get_next_parent\">of_get_next_parent</a>(struct <a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#node\">node</a>);", 
"extern struct <a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#of_get_next_child\">of_get_next_child</a>(const struct <a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#node\">node</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#prev\">prev</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_child_of_node\">for_each_child_of_node</a>(<a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#child\">child</a>) \\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#child\">child</a> = <a class=\"id\" href=\"#of_get_next_child\">of_get_next_child</a>(<a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#NULL\">NULL</a>); <a class=\"id\" href=\"#child\">child</a> != <a class=\"id\" href=\"#NULL\">NULL</a>; \\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#child\">child</a> = <a class=\"id\" href=\"#of_get_next_child\">of_get_next_child</a>(<a class=\"id\" href=\"#parent\">parent</a>, <a class=\"id\" href=\"#child\">child</a>))", 
"", 
"extern struct <a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#of_find_node_with_property\">of_find_node_with_property</a>(", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#from\">from</a>, const char *<a class=\"id\" href=\"#prop_name\">prop_name</a>);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#for_each_node_with_property\">for_each_node_with_property</a>(<a class=\"id\" href=\"#dn\">dn</a>, <a class=\"id\" href=\"#prop_name\">prop_name</a>) \\", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#dn\">dn</a> = <a class=\"id\" href=\"#of_find_node_with_property\">of_find_node_with_property</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#prop_name\">prop_name</a>); <a class=\"id\" href=\"#dn\">dn</a>; \\", 
"<span class=\"ts\"/>     <a class=\"id\" href=\"#dn\">dn</a> = <a class=\"id\" href=\"#of_find_node_with_property\">of_find_node_with_property</a>(<a class=\"id\" href=\"#dn\">dn</a>, <a class=\"id\" href=\"#prop_name\">prop_name</a>))", 
"", 
"extern struct <a class=\"id\" href=\"#property\">property</a> *<a class=\"id\" href=\"#of_find_property\">of_find_property</a>(const struct <a class=\"id\" href=\"#device_node\">device_node</a> *<a class=\"id\" href=\"#np\">np</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> const char *<a class=\"id\" href=\"#name\">name</a>,", 
];
xr_frag_insert('l/26/bfa75b1b90daa20a932818e6355525fd0d0f9f.xr', __xr_tmp);
