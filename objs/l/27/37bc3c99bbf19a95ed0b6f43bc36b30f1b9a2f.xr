var __xr_tmp = [
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a> == <a class=\"id\" href=\"#event\">event</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#group_entry\">group_entry</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_group_times\">update_group_times</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If event was in error state, then keep it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * that way, otherwise bogus counts will be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * returned on read(). The only way to get out</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of error state is by explicit re-enabling</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * of the event</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#state\">state</a> &gt; <a class=\"id\" href=\"#PERF_EVENT_STATE_OFF\">PERF_EVENT_STATE_OFF</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#PERF_EVENT_STATE_OFF\">PERF_EVENT_STATE_OFF</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#perf_group_detach\">perf_group_detach</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#sibling\">sibling</a>, *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#list\">list</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We can have double detach due to exit/hot-unplug + close.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attach_state\">attach_state</a> &amp; <a class=\"id\" href=\"#PERF_ATTACH_GROUP\">PERF_ATTACH_GROUP</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attach_state\">attach_state</a> &= ~<a class=\"id\" href=\"#PERF_ATTACH_GROUP\">PERF_ATTACH_GROUP</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this is a sibling, remove it from its group.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a> != <a class=\"id\" href=\"#event\">event</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#group_entry\">group_entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a>-><a class=\"id\" href=\"#nr_siblings\">nr_siblings</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#group_entry\">group_entry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list\">list</a> = &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#group_entry\">group_entry</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this was a group event with sibling events then</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * upgrade the siblings to singleton events by adding them</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to whatever list we are on.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_safe\">list_for_each_entry_safe</a>(<a class=\"id\" href=\"#sibling\">sibling</a>, <a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#sibling_list\">sibling_list</a>, <a class=\"id\" href=\"#group_entry\">group_entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_move_tail\">list_move_tail</a>(&amp;<a class=\"id\" href=\"#sibling\">sibling</a>-><a class=\"id\" href=\"#group_entry\">group_entry</a>, <a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sibling\">sibling</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a> = <a class=\"id\" href=\"#sibling\">sibling</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Inherit group flags from the previous leader */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sibling\">sibling</a>-><a class=\"id\" href=\"#group_flags\">group_flags</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#group_flags\">group_flags</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int", 
"<a class=\"id\" href=\"#event_filter_match\">event_filter_match</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#cpu\">cpu</a> == -1 || <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#cpu\">cpu</a> == <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#event_sched_out\">event_sched_out</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a> *<a class=\"id\" href=\"#cpuctx\">cpuctx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#delta\">delta</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * An event which could not be activated because of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * filter mismatch still needs to have its timings</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * maintained, otherwise bogus information is return</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * via read() for time_enabled, time_running:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#PERF_EVENT_STATE_INACTIVE\">PERF_EVENT_STATE_INACTIVE</a>", 
"<span class=\"ts\"/>    && !<a class=\"id\" href=\"#event_filter_match\">event_filter_match</a>(<a class=\"id\" href=\"#event\">event</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#time\">time</a> - <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#tstamp_stopped\">tstamp_stopped</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#tstamp_running\">tstamp_running</a> += <a class=\"id\" href=\"#delta\">delta</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#tstamp_stopped\">tstamp_stopped</a> = <a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#time\">time</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#state\">state</a> != <a class=\"id\" href=\"#PERF_EVENT_STATE_ACTIVE\">PERF_EVENT_STATE_ACTIVE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#PERF_EVENT_STATE_INACTIVE\">PERF_EVENT_STATE_INACTIVE</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#pending_disable\">pending_disable</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#pending_disable\">pending_disable</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#PERF_EVENT_STATE_OFF\">PERF_EVENT_STATE_OFF</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#tstamp_stopped\">tstamp_stopped</a> = <a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#time\">time</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#pmu\">pmu</a>-><a class=\"id\" href=\"#disable\">disable</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#oncpu\">oncpu</a> = -1;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_software_event\">is_software_event</a>(<a class=\"id\" href=\"#event\">event</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#active_oncpu\">active_oncpu</a>--;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#nr_active\">nr_active</a>--;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#exclusive\">exclusive</a> || !<a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#active_oncpu\">active_oncpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#exclusive\">exclusive</a> = 0;", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#group_sched_out\">group_sched_out</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#group_event\">group_event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a> *<a class=\"id\" href=\"#cpuctx\">cpuctx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#group_event\">group_event</a>-><a class=\"id\" href=\"#state\">state</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event_sched_out\">event_sched_out</a>(<a class=\"id\" href=\"#group_event\">group_event</a>, <a class=\"id\" href=\"#cpuctx\">cpuctx</a>, <a class=\"id\" href=\"#ctx\">ctx</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Schedule out siblings (if any):</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#event\">event</a>, &amp;<a class=\"id\" href=\"#group_event\">group_event</a>-><a class=\"id\" href=\"#sibling_list\">sibling_list</a>, <a class=\"id\" href=\"#group_entry\">group_entry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event_sched_out\">event_sched_out</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#cpuctx\">cpuctx</a>, <a class=\"id\" href=\"#ctx\">ctx</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#PERF_EVENT_STATE_ACTIVE\">PERF_EVENT_STATE_ACTIVE</a> && <a class=\"id\" href=\"#group_event\">group_event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#exclusive\">exclusive</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#exclusive\">exclusive</a> = 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Cross CPU call to remove a performance event</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We disable the event on the hardware level first. After that we</span>", 
"<span class=\"comment\"> * remove it from the context list.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__perf_event_remove_from_context\">__perf_event_remove_from_context</a>(void *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a> *<a class=\"id\" href=\"#cpuctx\">cpuctx</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#info\">info</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#ctx\">ctx</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this is a task context, we need to check whether it is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the current task context of this cpu. If not it has been</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * scheduled out before the smp call arrived.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#task\">task</a> && <a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#task_ctx\">task_ctx</a> != <a class=\"id\" href=\"#ctx\">ctx</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Protect the list operation against NMI by disabling the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * events on a global level.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_disable\">perf_disable</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event_sched_out\">event_sched_out</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#cpuctx\">cpuctx</a>, <a class=\"id\" href=\"#ctx\">ctx</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_event\">list_del_event</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#ctx\">ctx</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#task\">task</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Allow more per task events with respect to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * reservation:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#max_pertask\">max_pertask</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#perf_max_events\">perf_max_events</a> - <a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#nr_events\">nr_events</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#perf_max_events\">perf_max_events</a> - <a class=\"id\" href=\"#perf_reserved_percpu\">perf_reserved_percpu</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_enable\">perf_enable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Remove the event from a task's (or a CPU's) list of events.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Must be called with ctx-&gt;mutex held.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CPU events are removed with a smp call. For task events we only</span>", 
"<span class=\"comment\"> * call when the task is on a CPU.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If event-&gt;ctx is a cloned context, callers must make sure that</span>", 
"<span class=\"comment\"> * every task struct that event-&gt;ctx-&gt;task could possibly point to</span>", 
"<span class=\"comment\"> * remains valid.  This is OK when called from perf_release since</span>", 
"<span class=\"comment\"> * that only calls us on the top-level context, which can't be a clone.</span>", 
"<span class=\"comment\"> * When called from perf_event_exit_task, it's OK because the</span>", 
"<span class=\"comment\"> * context has been detached from its task.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#perf_event_remove_from_context\">perf_event_remove_from_context</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#ctx\">ctx</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#task\">task</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#task\">task</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Per cpu events are removed via an smp call and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the removal is always successful.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_call_function_single\">smp_call_function_single</a>(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#cpu\">cpu</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#__perf_event_remove_from_context\">__perf_event_remove_from_context</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#event\">event</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_oncpu_function_call\">task_oncpu_function_call</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#__perf_event_remove_from_context\">__perf_event_remove_from_context</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irq\">raw_spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the context is active we need to retry the smp call.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#nr_active\">nr_active</a> && !<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#group_entry\">group_entry</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irq\">raw_spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The lock prevents that this context is scheduled in so we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * can remove the event safely, if the call above did not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * succeed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#group_entry\">group_entry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del_event\">list_del_event</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irq\">raw_spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Cross CPU call to disable a performance event</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__perf_event_disable\">__perf_event_disable</a>(void *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#info\">info</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a> *<a class=\"id\" href=\"#cpuctx\">cpuctx</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#ctx\">ctx</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this is a per-task event, need to check whether this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * event's task is the current task on this cpu.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#task\">task</a> && <a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#task_ctx\">task_ctx</a> != <a class=\"id\" href=\"#ctx\">ctx</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the event is on, turn it off.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If it is in error state, leave it in error state.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#state\">state</a> >= <a class=\"id\" href=\"#PERF_EVENT_STATE_INACTIVE\">PERF_EVENT_STATE_INACTIVE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_context_time\">update_context_time</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_group_times\">update_group_times</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a> == <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group_sched_out\">group_sched_out</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#cpuctx\">cpuctx</a>, <a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event_sched_out\">event_sched_out</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#cpuctx\">cpuctx</a>, <a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#PERF_EVENT_STATE_OFF\">PERF_EVENT_STATE_OFF</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Disable a event.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If event-&gt;ctx is a cloned context, callers must make sure that</span>", 
"<span class=\"comment\"> * every task struct that event-&gt;ctx-&gt;task could possibly point to</span>", 
"<span class=\"comment\"> * remains valid.  This condition is satisifed when called through</span>", 
"<span class=\"comment\"> * perf_event_for_each_child or perf_event_for_each because they</span>", 
"<span class=\"comment\"> * hold the top-level event's child_mutex, so any descendant that</span>", 
"<span class=\"comment\"> * goes to exit will block in sync_child_event.</span>", 
"<span class=\"comment\"> * When called from perf_pending_event it's OK because event-&gt;ctx</span>", 
"<span class=\"comment\"> * is the current context on this CPU and preemption is disabled,</span>", 
"<span class=\"comment\"> * hence we can't get into perf_event_task_sched_out for this context.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#perf_event_disable\">perf_event_disable</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#ctx\">ctx</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#task\">task</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#task\">task</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Disable the event on the cpu that it's on</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_call_function_single\">smp_call_function_single</a>(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#__perf_event_disable\">__perf_event_disable</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#event\">event</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
" <a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_oncpu_function_call\">task_oncpu_function_call</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#__perf_event_disable\">__perf_event_disable</a>, <a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irq\">raw_spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the event is still active, we need to retry the cross-call.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#PERF_EVENT_STATE_ACTIVE\">PERF_EVENT_STATE_ACTIVE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irq\">raw_spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Since we have the lock this context can't be scheduled</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in, so we can change the state safely.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#PERF_EVENT_STATE_INACTIVE\">PERF_EVENT_STATE_INACTIVE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_group_times\">update_group_times</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#PERF_EVENT_STATE_OFF\">PERF_EVENT_STATE_OFF</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irq\">raw_spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#event_sched_in\">event_sched_in</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a> *<a class=\"id\" href=\"#cpuctx\">cpuctx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#state\">state</a> <= <a class=\"id\" href=\"#PERF_EVENT_STATE_OFF\">PERF_EVENT_STATE_OFF</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#PERF_EVENT_STATE_ACTIVE\">PERF_EVENT_STATE_ACTIVE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#oncpu\">oncpu</a> = <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>();", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The new state must be visible before we turn it on in the hardware:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#smp_wmb\">smp_wmb</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#pmu\">pmu</a>-><a class=\"id\" href=\"#enable\">enable</a>(<a class=\"id\" href=\"#event\">event</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#PERF_EVENT_STATE_INACTIVE\">PERF_EVENT_STATE_INACTIVE</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#oncpu\">oncpu</a> = -1;", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#tstamp_running\">tstamp_running</a> += <a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#time\">time</a> - <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#tstamp_stopped\">tstamp_stopped</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_software_event\">is_software_event</a>(<a class=\"id\" href=\"#event\">event</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#active_oncpu\">active_oncpu</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#nr_active\">nr_active</a>++;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#exclusive\">exclusive</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#exclusive\">exclusive</a> = 1;", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static int", 
"<a class=\"id\" href=\"#group_sched_in\">group_sched_in</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#group_event\">group_event</a>,", 
"<span class=\"ts\"/>       struct <a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a> *<a class=\"id\" href=\"#cpuctx\">cpuctx</a>,", 
"<span class=\"ts\"/>       struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>, *<a class=\"id\" href=\"#partial_group\">partial_group</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>const struct <a class=\"id\" href=\"#pmu\">pmu</a> *<a class=\"id\" href=\"#pmu\">pmu</a> = <a class=\"id\" href=\"#group_event\">group_event</a>-><a class=\"id\" href=\"#pmu\">pmu</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#txn\">txn</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#group_event\">group_event</a>-><a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#PERF_EVENT_STATE_OFF\">PERF_EVENT_STATE_OFF</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Check if group transaction availabe */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#pmu\">pmu</a>-><a class=\"id\" href=\"#start_txn\">start_txn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#txn\">txn</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#txn\">txn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pmu\">pmu</a>-><a class=\"id\" href=\"#start_txn\">start_txn</a>(<a class=\"id\" href=\"#pmu\">pmu</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event_sched_in\">event_sched_in</a>(<a class=\"id\" href=\"#group_event\">group_event</a>, <a class=\"id\" href=\"#cpuctx\">cpuctx</a>, <a class=\"id\" href=\"#ctx\">ctx</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#txn\">txn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pmu\">pmu</a>-><a class=\"id\" href=\"#cancel_txn\">cancel_txn</a>(<a class=\"id\" href=\"#pmu\">pmu</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Schedule in siblings as one group (if any):</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#event\">event</a>, &amp;<a class=\"id\" href=\"#group_event\">group_event</a>-><a class=\"id\" href=\"#sibling_list\">sibling_list</a>, <a class=\"id\" href=\"#group_entry\">group_entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#event_sched_in\">event_sched_in</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#cpuctx\">cpuctx</a>, <a class=\"id\" href=\"#ctx\">ctx</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#partial_group\">partial_group</a> = <a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#group_error\">group_error</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#txn\">txn</a> || !<a class=\"id\" href=\"#pmu\">pmu</a>-><a class=\"id\" href=\"#commit_txn\">commit_txn</a>(<a class=\"id\" href=\"#pmu\">pmu</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<a class=\"id\" href=\"#group_error\">group_error</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Groups can be scheduled in as one unit only, so undo any</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * partial group before returning:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#event\">event</a>, &amp;<a class=\"id\" href=\"#group_event\">group_event</a>-><a class=\"id\" href=\"#sibling_list\">sibling_list</a>, <a class=\"id\" href=\"#group_entry\">group_entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a> == <a class=\"id\" href=\"#partial_group\">partial_group</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event_sched_out\">event_sched_out</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#cpuctx\">cpuctx</a>, <a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event_sched_out\">event_sched_out</a>(<a class=\"id\" href=\"#group_event\">group_event</a>, <a class=\"id\" href=\"#cpuctx\">cpuctx</a>, <a class=\"id\" href=\"#ctx\">ctx</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#txn\">txn</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pmu\">pmu</a>-><a class=\"id\" href=\"#cancel_txn\">cancel_txn</a>(<a class=\"id\" href=\"#pmu\">pmu</a>);", 
"", 
"<span class=\"ts\"/>return -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Work out whether we can put this event group on the CPU now.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#group_can_go_on\">group_can_go_on</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a> *<a class=\"id\" href=\"#cpuctx\">cpuctx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   int <a class=\"id\" href=\"#can_add_hw\">can_add_hw</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Groups consisting entirely of software events can always go on.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#group_flags\">group_flags</a> &amp; <a class=\"id\" href=\"#PERF_GROUP_SOFTWARE\">PERF_GROUP_SOFTWARE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If an exclusive group is already on, no other hardware</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * events can go on.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#exclusive\">exclusive</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this group is exclusive and there are already</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * events on the CPU, it can't go on.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#exclusive\">exclusive</a> && <a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#active_oncpu\">active_oncpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Otherwise, try to add it if all previous groups were able</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to go on.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#can_add_hw\">can_add_hw</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#add_event_to_ctx\">add_event_to_ctx</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_event\">list_add_event</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_group_attach\">perf_group_attach</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#tstamp_enabled\">tstamp_enabled</a> = <a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#time\">time</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#tstamp_running\">tstamp_running</a> = <a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#time\">time</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#tstamp_stopped\">tstamp_stopped</a> = <a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#time\">time</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Cross CPU call to install and enable a performance event</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Must be called with ctx-&gt;mutex held</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__perf_install_in_context\">__perf_install_in_context</a>(void *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a> *<a class=\"id\" href=\"#cpuctx\">cpuctx</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#info\">info</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#ctx\">ctx</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#leader\">leader</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this is a task context, we need to check whether it is</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the current task context of this cpu. If not it has been</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * scheduled out before the smp call arrived.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Or possibly this is the right context but it isn't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * on this cpu because it had no events.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#task\">task</a> && <a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#task_ctx\">task_ctx</a> != <a class=\"id\" href=\"#ctx\">ctx</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#task_ctx\">task_ctx</a> || <a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#task\">task</a> != <a class=\"id\" href=\"#current\">current</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#task_ctx\">task_ctx</a> = <a class=\"id\" href=\"#ctx\">ctx</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#is_active\">is_active</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_context_time\">update_context_time</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Protect the list operation against NMI by disabling the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * events on a global level. NOP for non NMI based events.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_disable\">perf_disable</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#add_event_to_ctx\">add_event_to_ctx</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#ctx\">ctx</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#cpu\">cpu</a> != -1 && <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#cpu\">cpu</a> != <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Don't put the event on if it is disabled or if</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * it is in a group and the group isn't on.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#state\">state</a> != <a class=\"id\" href=\"#PERF_EVENT_STATE_INACTIVE\">PERF_EVENT_STATE_INACTIVE</a> ||", 
"<span class=\"ts\"/>    (<a class=\"id\" href=\"#leader\">leader</a> != <a class=\"id\" href=\"#event\">event</a> && <a class=\"id\" href=\"#leader\">leader</a>-><a class=\"id\" href=\"#state\">state</a> != <a class=\"id\" href=\"#PERF_EVENT_STATE_ACTIVE\">PERF_EVENT_STATE_ACTIVE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * An exclusive event can't go on if there are already active</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * hardware events, and no hardware event can go on if there</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * is already an exclusive event on.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#group_can_go_on\">group_can_go_on</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#cpuctx\">cpuctx</a>, 1))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EEXIST\">EEXIST</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#event_sched_in\">event_sched_in</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#cpuctx\">cpuctx</a>, <a class=\"id\" href=\"#ctx\">ctx</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This event couldn't go on.  If it is in a group</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * then we have to pull the whole group off.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If the event group is pinned then put it in error state.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#leader\">leader</a> != <a class=\"id\" href=\"#event\">event</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group_sched_out\">group_sched_out</a>(<a class=\"id\" href=\"#leader\">leader</a>, <a class=\"id\" href=\"#cpuctx\">cpuctx</a>, <a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#leader\">leader</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#pinned\">pinned</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_group_times\">update_group_times</a>(<a class=\"id\" href=\"#leader\">leader</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#leader\">leader</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#PERF_EVENT_STATE_ERROR\">PERF_EVENT_STATE_ERROR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#err\">err</a> && !<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#task\">task</a> && <a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#max_pertask\">max_pertask</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#max_pertask\">max_pertask</a>--;", 
"", 
" <a class=\"id\" href=\"#unlock\">unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_enable\">perf_enable</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Attach a performance event to a context</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * First we add the event to the list with the hardware enable bit</span>", 
"<span class=\"comment\"> * in event-&gt;hw_config cleared.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If the event is attached to a task which is on a CPU we use a smp</span>", 
"<span class=\"comment\"> * call to enable it in the task context. The task might have been</span>", 
"<span class=\"comment\"> * scheduled away, but we check this in the smp call again.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Must be called with ctx-&gt;mutex held.</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#perf_install_in_context\">perf_install_in_context</a>(struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#task\">task</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#task\">task</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Per cpu events are installed via an smp call and</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the install is always successful.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_call_function_single\">smp_call_function_single</a>(<a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#__perf_install_in_context\">__perf_install_in_context</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#event\">event</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_oncpu_function_call\">task_oncpu_function_call</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#__perf_install_in_context\">__perf_install_in_context</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irq\">raw_spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we need to retry the smp call.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#is_active\">is_active</a> && <a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#group_entry\">group_entry</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irq\">raw_spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The lock prevents that this context is scheduled in so we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * can add the event safely, if it the call above did not</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * succeed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#list_empty\">list_empty</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#group_entry\">group_entry</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_event_to_ctx\">add_event_to_ctx</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irq\">raw_spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Put a event into inactive state and update time fields.</span>", 
"<span class=\"comment\"> * Enabling the leader of a group effectively enables all</span>", 
"<span class=\"comment\"> * the group members that aren't explicitly disabled, so we</span>", 
"<span class=\"comment\"> * have to update their -&gt;tstamp_enabled also.</span>", 
"<span class=\"comment\"> * Note: this works for group members as well as group leaders</span>", 
"<span class=\"comment\"> * since the non-leader members' sibling_lists will be empty.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__perf_event_mark_enabled\">__perf_event_mark_enabled</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#sub\">sub</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#PERF_EVENT_STATE_INACTIVE\">PERF_EVENT_STATE_INACTIVE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#tstamp_enabled\">tstamp_enabled</a> = <a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#time\">time</a> - <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#total_time_enabled\">total_time_enabled</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#sub\">sub</a>, &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#sibling_list\">sibling_list</a>, <a class=\"id\" href=\"#group_entry\">group_entry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#sub\">sub</a>-><a class=\"id\" href=\"#state\">state</a> >= <a class=\"id\" href=\"#PERF_EVENT_STATE_INACTIVE\">PERF_EVENT_STATE_INACTIVE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sub\">sub</a>-><a class=\"id\" href=\"#tstamp_enabled\">tstamp_enabled</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#time\">time</a> - <a class=\"id\" href=\"#sub\">sub</a>-><a class=\"id\" href=\"#total_time_enabled\">total_time_enabled</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Cross CPU call to enable a performance event</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__perf_event_enable\">__perf_event_enable</a>(void *<a class=\"id\" href=\"#info\">info</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#info\">info</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a> *<a class=\"id\" href=\"#cpuctx\">cpuctx</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#ctx\">ctx</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#leader\">leader</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#group_leader\">group_leader</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If this is a per-task event, need to check whether this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * event's task is the current task on this cpu.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#task\">task</a> && <a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#task_ctx\">task_ctx</a> != <a class=\"id\" href=\"#ctx\">ctx</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#task_ctx\">task_ctx</a> || <a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#task\">task</a> != <a class=\"id\" href=\"#current\">current</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#task_ctx\">task_ctx</a> = <a class=\"id\" href=\"#ctx\">ctx</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#is_active\">is_active</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_context_time\">update_context_time</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#state\">state</a> >= <a class=\"id\" href=\"#PERF_EVENT_STATE_INACTIVE\">PERF_EVENT_STATE_INACTIVE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__perf_event_mark_enabled\">__perf_event_mark_enabled</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#ctx\">ctx</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#cpu\">cpu</a> != -1 && <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#cpu\">cpu</a> != <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the event is in a group and isn't the group leader,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * then don't put it on unless the group is on.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#leader\">leader</a> != <a class=\"id\" href=\"#event\">event</a> && <a class=\"id\" href=\"#leader\">leader</a>-><a class=\"id\" href=\"#state\">state</a> != <a class=\"id\" href=\"#PERF_EVENT_STATE_ACTIVE\">PERF_EVENT_STATE_ACTIVE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#unlock\">unlock</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#group_can_go_on\">group_can_go_on</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#cpuctx\">cpuctx</a>, 1)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EEXIST\">EEXIST</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_disable\">perf_disable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a> == <a class=\"id\" href=\"#leader\">leader</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#group_sched_in\">group_sched_in</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#cpuctx\">cpuctx</a>, <a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#event_sched_in\">event_sched_in</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#cpuctx\">cpuctx</a>, <a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_enable\">perf_enable</a>();", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If this event can't go on and it's part of a</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * group, then the whole group has to come off.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#leader\">leader</a> != <a class=\"id\" href=\"#event\">event</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group_sched_out\">group_sched_out</a>(<a class=\"id\" href=\"#leader\">leader</a>, <a class=\"id\" href=\"#cpuctx\">cpuctx</a>, <a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#leader\">leader</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#pinned\">pinned</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_group_times\">update_group_times</a>(<a class=\"id\" href=\"#leader\">leader</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#leader\">leader</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#PERF_EVENT_STATE_ERROR\">PERF_EVENT_STATE_ERROR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
" <a class=\"id\" href=\"#unlock\">unlock</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Enable a event.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If event-&gt;ctx is a cloned context, callers must make sure that</span>", 
"<span class=\"comment\"> * every task struct that event-&gt;ctx-&gt;task could possibly point to</span>", 
"<span class=\"comment\"> * remains valid.  This condition is satisfied when called through</span>", 
"<span class=\"comment\"> * perf_event_for_each_child or perf_event_for_each as described</span>", 
"<span class=\"comment\"> * for perf_event_disable.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#perf_event_enable\">perf_event_enable</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#ctx\">ctx</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#task\">task</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#task\">task</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Enable the event on the cpu that it's on</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#smp_call_function_single\">smp_call_function_single</a>(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#cpu\">cpu</a>, <a class=\"id\" href=\"#__perf_event_enable\">__perf_event_enable</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#event\">event</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irq\">raw_spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#state\">state</a> >= <a class=\"id\" href=\"#PERF_EVENT_STATE_INACTIVE\">PERF_EVENT_STATE_INACTIVE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the event is in error state, clear that first.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * That way, if we see the event in error state below, we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * know that it has gone back into error state, as distinct</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * from the task having been scheduled away before the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cross-call arrived.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#PERF_EVENT_STATE_ERROR\">PERF_EVENT_STATE_ERROR</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#PERF_EVENT_STATE_OFF\">PERF_EVENT_STATE_OFF</a>;", 
"", 
" <a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irq\">raw_spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_oncpu_function_call\">task_oncpu_function_call</a>(<a class=\"id\" href=\"#task\">task</a>, <a class=\"id\" href=\"#__perf_event_enable\">__perf_event_enable</a>, <a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_irq\">raw_spin_lock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If the context is active and the event is still off,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we need to retry the cross-call.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#is_active\">is_active</a> && <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#PERF_EVENT_STATE_OFF\">PERF_EVENT_STATE_OFF</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Since we have the lock this context can't be scheduled</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in, so we can change the state safely.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#PERF_EVENT_STATE_OFF\">PERF_EVENT_STATE_OFF</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__perf_event_mark_enabled\">__perf_event_mark_enabled</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#ctx\">ctx</a>);", 
"", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock_irq\">raw_spin_unlock_irq</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#perf_event_refresh\">perf_event_refresh</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>, int <a class=\"id\" href=\"#refresh\">refresh</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * not supported on inherited events</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#inherit\">inherit</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_add\">atomic_add</a>(<a class=\"id\" href=\"#refresh\">refresh</a>, &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#event_limit\">event_limit</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_event_enable\">perf_event_enable</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"enum <a class=\"id\" href=\"#event_type_t\">event_type_t</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#EVENT_FLEXIBLE\">EVENT_FLEXIBLE</a> = 0x1,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#EVENT_PINNED\">EVENT_PINNED</a> = 0x2,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#EVENT_ALL\">EVENT_ALL</a> = <a class=\"id\" href=\"#EVENT_FLEXIBLE\">EVENT_FLEXIBLE</a> | <a class=\"id\" href=\"#EVENT_PINNED\">EVENT_PINNED</a>,", 
"};", 
"", 
"static void <a class=\"id\" href=\"#ctx_sched_out\">ctx_sched_out</a>(struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  struct <a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a> *<a class=\"id\" href=\"#cpuctx\">cpuctx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  enum <a class=\"id\" href=\"#event_type_t\">event_type_t</a> <a class=\"id\" href=\"#event_type\">event_type</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#is_active\">is_active</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#nr_events\">nr_events</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_context_time\">update_context_time</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_disable\">perf_disable</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#nr_active\">nr_active</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_enable\">out_enable</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event_type\">event_type</a> &amp; <a class=\"id\" href=\"#EVENT_PINNED\">EVENT_PINNED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#event\">event</a>, &amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#pinned_groups\">pinned_groups</a>, <a class=\"id\" href=\"#group_entry\">group_entry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group_sched_out\">group_sched_out</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#cpuctx\">cpuctx</a>, <a class=\"id\" href=\"#ctx\">ctx</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event_type\">event_type</a> &amp; <a class=\"id\" href=\"#EVENT_FLEXIBLE\">EVENT_FLEXIBLE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#event\">event</a>, &amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#flexible_groups\">flexible_groups</a>, <a class=\"id\" href=\"#group_entry\">group_entry</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group_sched_out\">group_sched_out</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#cpuctx\">cpuctx</a>, <a class=\"id\" href=\"#ctx\">ctx</a>);", 
"", 
" <a class=\"id\" href=\"#out_enable\">out_enable</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_enable\">perf_enable</a>();", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Test whether two contexts are equivalent, i.e. whether they</span>", 
"<span class=\"comment\"> * have both been cloned from the same version of the same context</span>", 
"<span class=\"comment\"> * and they both have the same number of enabled events.</span>", 
"<span class=\"comment\"> * If the number of enabled events is the same, then the set</span>", 
"<span class=\"comment\"> * of enabled events should be the same, because these are both</span>", 
"<span class=\"comment\"> * inherited contexts, therefore we can't access individual events</span>", 
"<span class=\"comment\"> * in them directly with an fd; we can only enable/disable all</span>", 
"<span class=\"comment\"> * events via prctl, or enable/disable all events in a family</span>", 
"<span class=\"comment\"> * via ioctl, which will have the same effect on both contexts.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#context_equiv\">context_equiv</a>(struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx1\">ctx1</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx2\">ctx2</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ctx1\">ctx1</a>-><a class=\"id\" href=\"#parent_ctx\">parent_ctx</a> && <a class=\"id\" href=\"#ctx1\">ctx1</a>-><a class=\"id\" href=\"#parent_ctx\">parent_ctx</a> == <a class=\"id\" href=\"#ctx2\">ctx2</a>-><a class=\"id\" href=\"#parent_ctx\">parent_ctx</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>&& <a class=\"id\" href=\"#ctx1\">ctx1</a>-><a class=\"id\" href=\"#parent_gen\">parent_gen</a> == <a class=\"id\" href=\"#ctx2\">ctx2</a>-><a class=\"id\" href=\"#parent_gen\">parent_gen</a>", 
"<span class=\"ts\"/><span class=\"ts\"/>&& !<a class=\"id\" href=\"#ctx1\">ctx1</a>-><a class=\"id\" href=\"#pin_count\">pin_count</a> && !<a class=\"id\" href=\"#ctx2\">ctx2</a>-><a class=\"id\" href=\"#pin_count\">pin_count</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__perf_event_sync_stat\">__perf_event_sync_stat</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#next_event\">next_event</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#value\">value</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#inherit_stat\">inherit_stat</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Update the event value, we cannot use perf_event_read()</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * because we're in the middle of a context switch and have IRQs</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * disabled, which upsets smp_call_function_single(), however</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * we know the event must be on the current CPU, therefore we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * don't need to use it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>switch (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#state\">state</a>) {", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PERF_EVENT_STATE_ACTIVE\">PERF_EVENT_STATE_ACTIVE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#pmu\">pmu</a>-><a class=\"id\" href=\"#read\">read</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* fall-through */</span>", 
"", 
"<span class=\"ts\"/>case <a class=\"id\" href=\"#PERF_EVENT_STATE_INACTIVE\">PERF_EVENT_STATE_INACTIVE</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_event_times\">update_event_times</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"", 
"<span class=\"ts\"/>default:", 
"<span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * In order to keep per-task stats reliable we need to flip the event</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * values when we flip the contexts.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#local64_read\">local64_read</a>(&amp;<a class=\"id\" href=\"#next_event\">next_event</a>-><a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#value\">value</a> = <a class=\"id\" href=\"#local64_xchg\">local64_xchg</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#local64_set\">local64_set</a>(&amp;<a class=\"id\" href=\"#next_event\">next_event</a>-><a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#value\">value</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swap\">swap</a>(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#total_time_enabled\">total_time_enabled</a>, <a class=\"id\" href=\"#next_event\">next_event</a>-><a class=\"id\" href=\"#total_time_enabled\">total_time_enabled</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#swap\">swap</a>(<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#total_time_running\">total_time_running</a>, <a class=\"id\" href=\"#next_event\">next_event</a>-><a class=\"id\" href=\"#total_time_running\">total_time_running</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Since we swizzled the values, update the user visible data too.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_event_update_userpage\">perf_event_update_userpage</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_event_update_userpage\">perf_event_update_userpage</a>(<a class=\"id\" href=\"#next_event\">next_event</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#list_next_entry\">list_next_entry</a>(<a class=\"id\" href=\"#pos\">pos</a>, <a class=\"id\" href=\"#member\">member</a>) \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#pos\">pos</a>-><a class=\"id\" href=\"#member\">member</a>.<a class=\"id\" href=\"#next\">next</a>, <a class=\"id\" href=\"#typeof\">typeof</a>(*<a class=\"id\" href=\"#pos\">pos</a>), <a class=\"id\" href=\"#member\">member</a>)", 
"", 
"static void <a class=\"id\" href=\"#perf_event_sync_stat\">perf_event_sync_stat</a>(struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#next_ctx\">next_ctx</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>, *<a class=\"id\" href=\"#next_event\">next_event</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#nr_stat\">nr_stat</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#update_context_time\">update_context_time</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#event_list\">event_list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   struct <a class=\"id\" href=\"#perf_event\">perf_event</a>, <a class=\"id\" href=\"#event_entry\">event_entry</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next_event\">next_event</a> = <a class=\"id\" href=\"#list_first_entry\">list_first_entry</a>(&amp;<a class=\"id\" href=\"#next_ctx\">next_ctx</a>-><a class=\"id\" href=\"#event_list\">event_list</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a>, <a class=\"id\" href=\"#event_entry\">event_entry</a>);", 
"", 
"<span class=\"ts\"/>while (&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#event_entry\">event_entry</a> != &amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#event_list\">event_list</a> &&", 
"<span class=\"ts\"/>       &amp;<a class=\"id\" href=\"#next_event\">next_event</a>-><a class=\"id\" href=\"#event_entry\">event_entry</a> != &amp;<a class=\"id\" href=\"#next_ctx\">next_ctx</a>-><a class=\"id\" href=\"#event_list\">event_list</a>) {", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__perf_event_sync_stat\">__perf_event_sync_stat</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#next_event\">next_event</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a> = <a class=\"id\" href=\"#list_next_entry\">list_next_entry</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#event_entry\">event_entry</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_event\">next_event</a> = <a class=\"id\" href=\"#list_next_entry\">list_next_entry</a>(<a class=\"id\" href=\"#next_event\">next_event</a>, <a class=\"id\" href=\"#event_entry\">event_entry</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called from scheduler to remove the events of the current task,</span>", 
"<span class=\"comment\"> * with interrupts disabled.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We stop each event and update the event value in event-&gt;count.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This does not protect us against NMI, but disable()</span>", 
"<span class=\"comment\"> * sets the disabled bit in the control field of event _before_</span>", 
"<span class=\"comment\"> * accessing the event control register. If a NMI hits, then it will</span>", 
"<span class=\"comment\"> * not restart the event.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#perf_event_task_sched_out\">perf_event_task_sched_out</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#next\">next</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a> *<a class=\"id\" href=\"#cpuctx\">cpuctx</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#perf_event_ctxp\">perf_event_ctxp</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#next_ctx\">next_ctx</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#parent\">parent</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#do_switch\">do_switch</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_sw_event\">perf_sw_event</a>(<a class=\"id\" href=\"#PERF_COUNT_SW_CONTEXT_SWITCHES\">PERF_COUNT_SW_CONTEXT_SWITCHES</a>, 1, 1, <a class=\"id\" href=\"#NULL\">NULL</a>, 0);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#ctx\">ctx</a> || !<a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#task_ctx\">task_ctx</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_lock\">rcu_read_lock</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parent\">parent</a> = <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#parent_ctx\">parent_ctx</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#next_ctx\">next_ctx</a> = <a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#perf_event_ctxp\">perf_event_ctxp</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#parent\">parent</a> && <a class=\"id\" href=\"#next_ctx\">next_ctx</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#rcu_dereference\">rcu_dereference</a>(<a class=\"id\" href=\"#next_ctx\">next_ctx</a>-><a class=\"id\" href=\"#parent_ctx\">parent_ctx</a>) == <a class=\"id\" href=\"#parent\">parent</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Looks like the two contexts are clones, so we might be</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * able to optimize the context switch.  We lock both</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * contexts and check that they are clones under the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * lock (including re-checking that neither has been</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * uncloned in the meantime).  It doesn't matter which</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * order we take the locks because no other cpu could</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * be trying to lock both of these tasks.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock_nested\">raw_spin_lock_nested</a>(&amp;<a class=\"id\" href=\"#next_ctx\">next_ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>, <a class=\"id\" href=\"#SINGLE_DEPTH_NESTING\">SINGLE_DEPTH_NESTING</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#context_equiv\">context_equiv</a>(<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#next_ctx\">next_ctx</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * XXX do we need a memory barrier of sorts</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * wrt to rcu_dereference() of perf_event_ctxp</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#perf_event_ctxp\">perf_event_ctxp</a> = <a class=\"id\" href=\"#next_ctx\">next_ctx</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next\">next</a>-><a class=\"id\" href=\"#perf_event_ctxp\">perf_event_ctxp</a> = <a class=\"id\" href=\"#ctx\">ctx</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#next_ctx\">next_ctx</a>-><a class=\"id\" href=\"#task\">task</a> = <a class=\"id\" href=\"#task\">task</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_switch\">do_switch</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_event_sync_stat\">perf_event_sync_stat</a>(<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#next_ctx\">next_ctx</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#next_ctx\">next_ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rcu_read_unlock\">rcu_read_unlock</a>();", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#do_switch\">do_switch</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctx_sched_out\">ctx_sched_out</a>(<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#cpuctx\">cpuctx</a>, <a class=\"id\" href=\"#EVENT_ALL\">EVENT_ALL</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#task_ctx\">task_ctx</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#task_ctx_sched_out\">task_ctx_sched_out</a>(struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       enum <a class=\"id\" href=\"#event_type_t\">event_type_t</a> <a class=\"id\" href=\"#event_type\">event_type</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a> *<a class=\"id\" href=\"#cpuctx\">cpuctx</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#task_ctx\">task_ctx</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#ctx\">ctx</a> != <a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#task_ctx\">task_ctx</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx_sched_out\">ctx_sched_out</a>(<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#cpuctx\">cpuctx</a>, <a class=\"id\" href=\"#event_type\">event_type</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#task_ctx\">task_ctx</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called with IRQs disabled</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#__perf_event_task_sched_out\">__perf_event_task_sched_out</a>(struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#task_ctx_sched_out\">task_ctx_sched_out</a>(<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#EVENT_ALL\">EVENT_ALL</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called with IRQs disabled</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#cpu_ctx_sched_out\">cpu_ctx_sched_out</a>(struct <a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a> *<a class=\"id\" href=\"#cpuctx\">cpuctx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      enum <a class=\"id\" href=\"#event_type_t\">event_type_t</a> <a class=\"id\" href=\"#event_type\">event_type</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx_sched_out\">ctx_sched_out</a>(&amp;<a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#cpuctx\">cpuctx</a>, <a class=\"id\" href=\"#event_type\">event_type</a>);", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#ctx_pinned_sched_in\">ctx_pinned_sched_in</a>(struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>    struct <a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a> *<a class=\"id\" href=\"#cpuctx\">cpuctx</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#event\">event</a>, &amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#pinned_groups\">pinned_groups</a>, <a class=\"id\" href=\"#group_entry\">group_entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#state\">state</a> <= <a class=\"id\" href=\"#PERF_EVENT_STATE_OFF\">PERF_EVENT_STATE_OFF</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#cpu\">cpu</a> != -1 && <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#cpu\">cpu</a> != <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#group_can_go_on\">group_can_go_on</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#cpuctx\">cpuctx</a>, 1))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#group_sched_in\">group_sched_in</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#cpuctx\">cpuctx</a>, <a class=\"id\" href=\"#ctx\">ctx</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If this pinned group hasn't been scheduled,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * put it in error state.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#state\">state</a> == <a class=\"id\" href=\"#PERF_EVENT_STATE_INACTIVE\">PERF_EVENT_STATE_INACTIVE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#update_group_times\">update_group_times</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#state\">state</a> = <a class=\"id\" href=\"#PERF_EVENT_STATE_ERROR\">PERF_EVENT_STATE_ERROR</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#ctx_flexible_sched_in\">ctx_flexible_sched_in</a>(struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>      struct <a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a> *<a class=\"id\" href=\"#cpuctx\">cpuctx</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#can_add_hw\">can_add_hw</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#event\">event</a>, &amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#flexible_groups\">flexible_groups</a>, <a class=\"id\" href=\"#group_entry\">group_entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Ignore events in OFF or ERROR state */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#state\">state</a> <= <a class=\"id\" href=\"#PERF_EVENT_STATE_OFF\">PERF_EVENT_STATE_OFF</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Listen to the 'cpu' scheduling filter constraint</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * of events:</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#cpu\">cpu</a> != -1 && <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#cpu\">cpu</a> != <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#group_can_go_on\">group_can_go_on</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#cpuctx\">cpuctx</a>, <a class=\"id\" href=\"#can_add_hw\">can_add_hw</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#group_sched_in\">group_sched_in</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#cpuctx\">cpuctx</a>, <a class=\"id\" href=\"#ctx\">ctx</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#can_add_hw\">can_add_hw</a> = 0;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void", 
"<a class=\"id\" href=\"#ctx_sched_in\">ctx_sched_in</a>(struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>,", 
"<span class=\"ts\"/>     struct <a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a> *<a class=\"id\" href=\"#cpuctx\">cpuctx</a>,", 
"<span class=\"ts\"/>     enum <a class=\"id\" href=\"#event_type_t\">event_type_t</a> <a class=\"id\" href=\"#event_type\">event_type</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#is_active\">is_active</a> = 1;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#nr_events\">nr_events</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#timestamp\">timestamp</a> = <a class=\"id\" href=\"#perf_clock\">perf_clock</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_disable\">perf_disable</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * First go through the list and put on any pinned groups</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * in order to give them the best chance of going on.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event_type\">event_type</a> &amp; <a class=\"id\" href=\"#EVENT_PINNED\">EVENT_PINNED</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctx_pinned_sched_in\">ctx_pinned_sched_in</a>(<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#cpuctx\">cpuctx</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Then walk through the lower prio flexible groups */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event_type\">event_type</a> &amp; <a class=\"id\" href=\"#EVENT_FLEXIBLE\">EVENT_FLEXIBLE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ctx_flexible_sched_in\">ctx_flexible_sched_in</a>(<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#cpuctx\">cpuctx</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_enable\">perf_enable</a>();", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#cpu_ctx_sched_in\">cpu_ctx_sched_in</a>(struct <a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a> *<a class=\"id\" href=\"#cpuctx\">cpuctx</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     enum <a class=\"id\" href=\"#event_type_t\">event_type_t</a> <a class=\"id\" href=\"#event_type\">event_type</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a> = &amp;<a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#ctx\">ctx</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx_sched_in\">ctx_sched_in</a>(<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#cpuctx\">cpuctx</a>, <a class=\"id\" href=\"#event_type\">event_type</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#task_ctx_sched_in\">task_ctx_sched_in</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      enum <a class=\"id\" href=\"#event_type_t\">event_type_t</a> <a class=\"id\" href=\"#event_type\">event_type</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a> *<a class=\"id\" href=\"#cpuctx\">cpuctx</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#perf_event_ctxp\">perf_event_ctxp</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#ctx\">ctx</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#task_ctx\">task_ctx</a> == <a class=\"id\" href=\"#ctx\">ctx</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx_sched_in\">ctx_sched_in</a>(<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#cpuctx\">cpuctx</a>, <a class=\"id\" href=\"#event_type\">event_type</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#task_ctx\">task_ctx</a> = <a class=\"id\" href=\"#ctx\">ctx</a>;", 
"}", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called from scheduler to add the events of the current task</span>", 
"<span class=\"comment\"> * with interrupts disabled.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * We restore the event value and then enable it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This does not protect us against NMI, but enable()</span>", 
"<span class=\"comment\"> * sets the enabled bit in the control field of event _before_</span>", 
"<span class=\"comment\"> * accessing the event control register. If a NMI hits, then it will</span>", 
"<span class=\"comment\"> * keep the event running.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#perf_event_task_sched_in\">perf_event_task_sched_in</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a> *<a class=\"id\" href=\"#cpuctx\">cpuctx</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#task\">task</a>-><a class=\"id\" href=\"#perf_event_ctxp\">perf_event_ctxp</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#likely\">likely</a>(!<a class=\"id\" href=\"#ctx\">ctx</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#task_ctx\">task_ctx</a> == <a class=\"id\" href=\"#ctx\">ctx</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_disable\">perf_disable</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We want to keep the following priority order:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cpu pinned (that don't need to move), task pinned,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * cpu flexible, task flexible.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_ctx_sched_out\">cpu_ctx_sched_out</a>(<a class=\"id\" href=\"#cpuctx\">cpuctx</a>, <a class=\"id\" href=\"#EVENT_FLEXIBLE\">EVENT_FLEXIBLE</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx_sched_in\">ctx_sched_in</a>(<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#cpuctx\">cpuctx</a>, <a class=\"id\" href=\"#EVENT_PINNED\">EVENT_PINNED</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_ctx_sched_in\">cpu_ctx_sched_in</a>(<a class=\"id\" href=\"#cpuctx\">cpuctx</a>, <a class=\"id\" href=\"#EVENT_FLEXIBLE\">EVENT_FLEXIBLE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx_sched_in\">ctx_sched_in</a>(<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#cpuctx\">cpuctx</a>, <a class=\"id\" href=\"#EVENT_FLEXIBLE\">EVENT_FLEXIBLE</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#task_ctx\">task_ctx</a> = <a class=\"id\" href=\"#ctx\">ctx</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_enable\">perf_enable</a>();", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_INTERRUPTS\">MAX_INTERRUPTS</a> (~0ULL)", 
"", 
"static void <a class=\"id\" href=\"#perf_log_throttle\">perf_log_throttle</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>, int <a class=\"id\" href=\"#enable\">enable</a>);", 
"", 
"static <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#perf_calculate_period\">perf_calculate_period</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#nsec\">nsec</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#frequency\">frequency</a> = <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#sample_freq\">sample_freq</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#sec\">sec</a> = <a class=\"id\" href=\"#NSEC_PER_SEC\">NSEC_PER_SEC</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#divisor\">divisor</a>, <a class=\"id\" href=\"#dividend\">dividend</a>;", 
"", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count_fls\">count_fls</a>, <a class=\"id\" href=\"#nsec_fls\">nsec_fls</a>, <a class=\"id\" href=\"#frequency_fls\">frequency_fls</a>, <a class=\"id\" href=\"#sec_fls\">sec_fls</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count_fls\">count_fls</a> = <a class=\"id\" href=\"#fls64\">fls64</a>(<a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nsec_fls\">nsec_fls</a> = <a class=\"id\" href=\"#fls64\">fls64</a>(<a class=\"id\" href=\"#nsec\">nsec</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#frequency_fls\">frequency_fls</a> = <a class=\"id\" href=\"#fls64\">fls64</a>(<a class=\"id\" href=\"#frequency\">frequency</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sec_fls\">sec_fls</a> = 30;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We got @count in @nsec, with a target of sample_freq HZ</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the target period becomes:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *             @count * 10^9</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * period = -------------------</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *          @nsec * sample_freq</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Reduce accuracy by one bit such that @a and @b converge</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to a similar magnitude.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#REDUCE_FLS\">REDUCE_FLS</a>(<a class=\"id\" href=\"#a\">a</a>, <a class=\"id\" href=\"#b\">b</a>) <span class=\"ts\"/><span class=\"ts\"/>\\", 
"do {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#a\">a</a>##<a class=\"id\" href=\"#_fls\">_fls</a> &gt; <a class=\"id\" href=\"#b\">b</a>##<a class=\"id\" href=\"#_fls\">_fls</a>) {<span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#a\">a</a> >>= 1;<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#a\">a</a>##<a class=\"id\" href=\"#_fls\">_fls</a>--;<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>} else {<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b\">b</a> >>= 1;<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#b\">b</a>##<a class=\"id\" href=\"#_fls\">_fls</a>--;<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/>}<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"} while (0)", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Reduce accuracy until either term fits in a u64, then proceed with</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the other, so that finally we can do a u64/u64 division.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#count_fls\">count_fls</a> + <a class=\"id\" href=\"#sec_fls\">sec_fls</a> &gt; 64 && <a class=\"id\" href=\"#nsec_fls\">nsec_fls</a> + <a class=\"id\" href=\"#frequency_fls\">frequency_fls</a> &gt; 64) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#REDUCE_FLS\">REDUCE_FLS</a>(<a class=\"id\" href=\"#nsec\">nsec</a>, <a class=\"id\" href=\"#frequency\">frequency</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#REDUCE_FLS\">REDUCE_FLS</a>(<a class=\"id\" href=\"#sec\">sec</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#count_fls\">count_fls</a> + <a class=\"id\" href=\"#sec_fls\">sec_fls</a> &gt; 64) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#divisor\">divisor</a> = <a class=\"id\" href=\"#nsec\">nsec</a> * <a class=\"id\" href=\"#frequency\">frequency</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#count_fls\">count_fls</a> + <a class=\"id\" href=\"#sec_fls\">sec_fls</a> &gt; 64) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#REDUCE_FLS\">REDUCE_FLS</a>(<a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#sec\">sec</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#divisor\">divisor</a> >>= 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dividend\">dividend</a> = <a class=\"id\" href=\"#count\">count</a> * <a class=\"id\" href=\"#sec\">sec</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dividend\">dividend</a> = <a class=\"id\" href=\"#count\">count</a> * <a class=\"id\" href=\"#sec\">sec</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#nsec_fls\">nsec_fls</a> + <a class=\"id\" href=\"#frequency_fls\">frequency_fls</a> &gt; 64) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#REDUCE_FLS\">REDUCE_FLS</a>(<a class=\"id\" href=\"#nsec\">nsec</a>, <a class=\"id\" href=\"#frequency\">frequency</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dividend\">dividend</a> >>= 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#divisor\">divisor</a> = <a class=\"id\" href=\"#nsec\">nsec</a> * <a class=\"id\" href=\"#frequency\">frequency</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#divisor\">divisor</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#dividend\">dividend</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#div64_u64\">div64_u64</a>(<a class=\"id\" href=\"#dividend\">dividend</a>, <a class=\"id\" href=\"#divisor\">divisor</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#perf_event_stop\">perf_event_stop</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#pmu\">pmu</a>-><a class=\"id\" href=\"#stop\">stop</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#pmu\">pmu</a>-><a class=\"id\" href=\"#disable\">disable</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#pmu\">pmu</a>-><a class=\"id\" href=\"#stop\">stop</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#perf_event_start\">perf_event_start</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#pmu\">pmu</a>-><a class=\"id\" href=\"#start\">start</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#pmu\">pmu</a>-><a class=\"id\" href=\"#enable\">enable</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#pmu\">pmu</a>-><a class=\"id\" href=\"#start\">start</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#perf_adjust_period\">perf_adjust_period</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#nsec\">nsec</a>, <a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#count\">count</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hw_perf_event\">hw_perf_event</a> *<a class=\"id\" href=\"#hwc\">hwc</a> = &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#period\">period</a>, <a class=\"id\" href=\"#sample_period\">sample_period</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#delta\">delta</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#period\">period</a> = <a class=\"id\" href=\"#perf_calculate_period\">perf_calculate_period</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#nsec\">nsec</a>, <a class=\"id\" href=\"#count\">count</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = (<a class=\"id\" href=\"#s64\">s64</a>)(<a class=\"id\" href=\"#period\">period</a> - <a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#sample_period\">sample_period</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = (<a class=\"id\" href=\"#delta\">delta</a> + 7) / 8; <span class=\"comment\">/* low pass filter */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sample_period\">sample_period</a> = <a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#sample_period\">sample_period</a> + <a class=\"id\" href=\"#delta\">delta</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#sample_period\">sample_period</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#sample_period\">sample_period</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#sample_period\">sample_period</a> = <a class=\"id\" href=\"#sample_period\">sample_period</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#local64_read\">local64_read</a>(&amp;<a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#period_left\">period_left</a>) &gt; 8*<a class=\"id\" href=\"#sample_period\">sample_period</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_disable\">perf_disable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_event_stop\">perf_event_stop</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#local64_set\">local64_set</a>(&amp;<a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#period_left\">period_left</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_event_start\">perf_event_start</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_enable\">perf_enable</a>();", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static void <a class=\"id\" href=\"#perf_ctx_adjust_freq\">perf_ctx_adjust_freq</a>(struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hw_perf_event\">hw_perf_event</a> *<a class=\"id\" href=\"#hwc\">hwc</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#interrupts\">interrupts</a>, <a class=\"id\" href=\"#now\">now</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s64\">s64</a> <a class=\"id\" href=\"#delta\">delta</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry_rcu\">list_for_each_entry_rcu</a>(<a class=\"id\" href=\"#event\">event</a>, &amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#event_list\">event_list</a>, <a class=\"id\" href=\"#event_entry\">event_entry</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#state\">state</a> != <a class=\"id\" href=\"#PERF_EVENT_STATE_ACTIVE\">PERF_EVENT_STATE_ACTIVE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#cpu\">cpu</a> != -1 && <a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#cpu\">cpu</a> != <a class=\"id\" href=\"#smp_processor_id\">smp_processor_id</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwc\">hwc</a> = &amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#hw\">hw</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#interrupts\">interrupts</a> = <a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#interrupts\">interrupts</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#interrupts\">interrupts</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * unthrottle events on the tick</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#interrupts\">interrupts</a> == <a class=\"id\" href=\"#MAX_INTERRUPTS\">MAX_INTERRUPTS</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_log_throttle\">perf_log_throttle</a>(<a class=\"id\" href=\"#event\">event</a>, 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_disable\">perf_disable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#pmu\">pmu</a>-><a class=\"id\" href=\"#unthrottle\">unthrottle</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_enable\">perf_enable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#freq\">freq</a> || !<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#sample_freq\">sample_freq</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>continue;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_disable\">perf_disable</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#pmu\">pmu</a>-><a class=\"id\" href=\"#read\">read</a>(<a class=\"id\" href=\"#event\">event</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#now\">now</a> = <a class=\"id\" href=\"#local64_read\">local64_read</a>(&amp;<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#count\">count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#delta\">delta</a> = <a class=\"id\" href=\"#now\">now</a> - <a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#freq_count_stamp\">freq_count_stamp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hwc\">hwc</a>-><a class=\"id\" href=\"#freq_count_stamp\">freq_count_stamp</a> = <a class=\"id\" href=\"#now\">now</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#delta\">delta</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_adjust_period\">perf_adjust_period</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#TICK_NSEC\">TICK_NSEC</a>, <a class=\"id\" href=\"#delta\">delta</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_enable\">perf_enable</a>();", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Round-robin a context's events:</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#rotate_ctx\">rotate_ctx</a>(struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_lock\">raw_spin_lock</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Rotate the first entry last of non-pinned groups */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_rotate_left\">list_rotate_left</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#flexible_groups\">flexible_groups</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#raw_spin_unlock\">raw_spin_unlock</a>(&amp;<a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#perf_event_task_tick\">perf_event_task_tick</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#curr\">curr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a> *<a class=\"id\" href=\"#cpuctx\">cpuctx</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#rotate\">rotate</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#nr_events\">nr_events</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpuctx\">cpuctx</a> = &amp;<a class=\"id\" href=\"#__get_cpu_var\">__get_cpu_var</a>(<a class=\"id\" href=\"#perf_cpu_context\">perf_cpu_context</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#ctx\">ctx</a>.<a class=\"id\" href=\"#nr_events\">nr_events</a> &&", 
"<span class=\"ts\"/>    <a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#ctx\">ctx</a>.<a class=\"id\" href=\"#nr_events\">nr_events</a> != <a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#ctx\">ctx</a>.<a class=\"id\" href=\"#nr_active\">nr_active</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rotate\">rotate</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ctx\">ctx</a> = <a class=\"id\" href=\"#curr\">curr</a>-><a class=\"id\" href=\"#perf_event_ctxp\">perf_event_ctxp</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ctx\">ctx</a> && <a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#nr_events\">nr_events</a> && <a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#nr_events\">nr_events</a> != <a class=\"id\" href=\"#ctx\">ctx</a>-><a class=\"id\" href=\"#nr_active\">nr_active</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rotate\">rotate</a> = 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_ctx_adjust_freq\">perf_ctx_adjust_freq</a>(&amp;<a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ctx\">ctx</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#perf_ctx_adjust_freq\">perf_ctx_adjust_freq</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#rotate\">rotate</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_disable\">perf_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_ctx_sched_out\">cpu_ctx_sched_out</a>(<a class=\"id\" href=\"#cpuctx\">cpuctx</a>, <a class=\"id\" href=\"#EVENT_FLEXIBLE\">EVENT_FLEXIBLE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ctx\">ctx</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_ctx_sched_out\">task_ctx_sched_out</a>(<a class=\"id\" href=\"#ctx\">ctx</a>, <a class=\"id\" href=\"#EVENT_FLEXIBLE\">EVENT_FLEXIBLE</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#rotate_ctx\">rotate_ctx</a>(&amp;<a class=\"id\" href=\"#cpuctx\">cpuctx</a>-><a class=\"id\" href=\"#ctx\">ctx</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ctx\">ctx</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#rotate_ctx\">rotate_ctx</a>(<a class=\"id\" href=\"#ctx\">ctx</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu_ctx_sched_in\">cpu_ctx_sched_in</a>(<a class=\"id\" href=\"#cpuctx\">cpuctx</a>, <a class=\"id\" href=\"#EVENT_FLEXIBLE\">EVENT_FLEXIBLE</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ctx\">ctx</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#task_ctx_sched_in\">task_ctx_sched_in</a>(<a class=\"id\" href=\"#curr\">curr</a>, <a class=\"id\" href=\"#EVENT_FLEXIBLE\">EVENT_FLEXIBLE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#perf_enable\">perf_enable</a>();", 
"}", 
"", 
"static int <a class=\"id\" href=\"#event_enable_on_exec\">event_enable_on_exec</a>(struct <a class=\"id\" href=\"#perf_event\">perf_event</a> *<a class=\"id\" href=\"#event\">event</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#enable_on_exec\">enable_on_exec</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#attr\">attr</a>.<a class=\"id\" href=\"#enable_on_exec\">enable_on_exec</a> = 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#event\">event</a>-><a class=\"id\" href=\"#state\">state</a> >= <a class=\"id\" href=\"#PERF_EVENT_STATE_INACTIVE\">PERF_EVENT_STATE_INACTIVE</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__perf_event_mark_enabled\">__perf_event_mark_enabled</a>(<a class=\"id\" href=\"#event\">event</a>, <a class=\"id\" href=\"#ctx\">ctx</a>);", 
"", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Enable all of a task's events that have been marked enable-on-exec.</span>", 
"<span class=\"comment\"> * This expects task == current.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#perf_event_enable_on_exec\">perf_event_enable_on_exec</a>(struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#task\">task</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#perf_event_context\">perf_event_context</a> *<a class=\"id\" href=\"#ctx\">ctx</a>;", 
];
xr_frag_insert('l/27/37bc3c99bbf19a95ed0b6f43bc36b30f1b9a2f.xr', __xr_tmp);
