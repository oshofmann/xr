var __xr_tmp = [
"static void <a class=\"id\" href=\"#bdev_destroy_inode\">bdev_destroy_inode</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bdev_inode\">bdev_inode</a> *<a class=\"id\" href=\"#bdi\">bdi</a> = <a class=\"id\" href=\"#BDEV_I\">BDEV_I</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#bdev_cachep\">bdev_cachep</a>, <a class=\"id\" href=\"#bdi\">bdi</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#init_once\">init_once</a>(void *<a class=\"id\" href=\"#foo\">foo</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bdev_inode\">bdev_inode</a> *<a class=\"id\" href=\"#ei\">ei</a> = (struct <a class=\"id\" href=\"#bdev_inode\">bdev_inode</a> *) <a class=\"id\" href=\"#foo\">foo</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a> = &amp;<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#bdev\">bdev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, 0, sizeof(*<a class=\"id\" href=\"#bdev\">bdev</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_mutex\">bd_mutex</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_inodes\">bd_inodes</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_list\">bd_list</a>);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SYSFS\">CONFIG_SYSFS</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#INIT_LIST_HEAD\">INIT_LIST_HEAD</a>(&amp;<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_holder_list\">bd_holder_list</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode_init_once\">inode_init_once</a>(&amp;<a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#vfs_inode\">vfs_inode</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Initialize mutex for freeze. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_fsfreeze_mutex\">bd_fsfreeze_mutex</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#__bd_forget\">__bd_forget</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_devices\">i_devices</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_bdev\">i_bdev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a> = &amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_data\">i_data</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#bdev_evict_inode\">bdev_evict_inode</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a> = &amp;<a class=\"id\" href=\"#BDEV_I\">BDEV_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#bdev\">bdev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#truncate_inode_pages\">truncate_inode_pages</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_data\">i_data</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#invalidate_inode_buffers\">invalidate_inode_buffers</a>(<a class=\"id\" href=\"#inode\">inode</a>); <span class=\"comment\">/* is it needed here? */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#end_writeback\">end_writeback</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#bdev_lock\">bdev_lock</a>);", 
"<span class=\"ts\"/>while ( (<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_inodes\">bd_inodes</a>.<a class=\"id\" href=\"#next\">next</a>) != &amp;<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_inodes\">bd_inodes</a> ) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__bd_forget\">__bd_forget</a>(<a class=\"id\" href=\"#list_entry\">list_entry</a>(<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#i_devices\">i_devices</a>));", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_del_init\">list_del_init</a>(&amp;<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_list\">bd_list</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#bdev_lock\">bdev_lock</a>);", 
"}", 
"", 
"static const struct <a class=\"id\" href=\"#super_operations\">super_operations</a> <a class=\"id\" href=\"#bdev_sops\">bdev_sops</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#statfs\">statfs</a> = <a class=\"id\" href=\"#simple_statfs\">simple_statfs</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#alloc_inode\">alloc_inode</a> = <a class=\"id\" href=\"#bdev_alloc_inode\">bdev_alloc_inode</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#destroy_inode\">destroy_inode</a> = <a class=\"id\" href=\"#bdev_destroy_inode\">bdev_destroy_inode</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#drop_inode\">drop_inode</a> = <a class=\"id\" href=\"#generic_delete_inode\">generic_delete_inode</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#evict_inode\">evict_inode</a> = <a class=\"id\" href=\"#bdev_evict_inode\">bdev_evict_inode</a>,", 
"};", 
"", 
"static int <a class=\"id\" href=\"#bd_get_sb\">bd_get_sb</a>(struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a> *<a class=\"id\" href=\"#fs_type\">fs_type</a>,", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#flags\">flags</a>, const char *<a class=\"id\" href=\"#dev_name\">dev_name</a>, void *<a class=\"id\" href=\"#data\">data</a>, struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#mnt\">mnt</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#get_sb_pseudo\">get_sb_pseudo</a>(<a class=\"id\" href=\"#fs_type\">fs_type</a>, \"bdev:\", &amp;<a class=\"id\" href=\"#bdev_sops\">bdev_sops</a>, 0x62646576, <a class=\"id\" href=\"#mnt\">mnt</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#file_system_type\">file_system_type</a> <a class=\"id\" href=\"#bd_type\">bd_type</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#name\">name</a><span class=\"ts\"/><span class=\"ts\"/>= \"bdev\",", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#get_sb\">get_sb</a><span class=\"ts\"/><span class=\"ts\"/>= <a class=\"id\" href=\"#bd_get_sb\">bd_get_sb</a>,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#kill_sb\">kill_sb</a><span class=\"ts\"/>= <a class=\"id\" href=\"#kill_anon_super\">kill_anon_super</a>,", 
"};", 
"", 
"struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#blockdev_superblock\">blockdev_superblock</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"void <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#bdev_cache_init\">bdev_cache_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#vfsmount\">vfsmount</a> *<a class=\"id\" href=\"#bd_mnt\">bd_mnt</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdev_cachep\">bdev_cachep</a> = <a class=\"id\" href=\"#kmem_cache_create\">kmem_cache_create</a>(\"bdev_cache\", sizeof(struct <a class=\"id\" href=\"#bdev_inode\">bdev_inode</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>0, (<a class=\"id\" href=\"#SLAB_HWCACHE_ALIGN\">SLAB_HWCACHE_ALIGN</a>|<a class=\"id\" href=\"#SLAB_RECLAIM_ACCOUNT\">SLAB_RECLAIM_ACCOUNT</a>|", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#SLAB_MEM_SPREAD\">SLAB_MEM_SPREAD</a>|<a class=\"id\" href=\"#SLAB_PANIC\">SLAB_PANIC</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#init_once\">init_once</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#register_filesystem\">register_filesystem</a>(&amp;<a class=\"id\" href=\"#bd_type\">bd_type</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"Cannot register bdev pseudo-fs\");", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bd_mnt\">bd_mnt</a> = <a class=\"id\" href=\"#kern_mount\">kern_mount</a>(&amp;<a class=\"id\" href=\"#bd_type\">bd_type</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#bd_mnt\">bd_mnt</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#panic\">panic</a>(\"Cannot create bdev pseudo-fs\");", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * This vfsmount structure is only used to obtain the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * blockdev_superblock, so tell kmemleak not to report it.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kmemleak_not_leak\">kmemleak_not_leak</a>(<a class=\"id\" href=\"#bd_mnt\">bd_mnt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blockdev_superblock\">blockdev_superblock</a> = <a class=\"id\" href=\"#bd_mnt\">bd_mnt</a>-><a class=\"id\" href=\"#mnt_sb\">mnt_sb</a>;<span class=\"ts\"/><span class=\"comment\">/* For writeback */</span>", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Most likely _very_ bad one - but then it's hardly critical for small</span>", 
"<span class=\"comment\"> * /dev and can be fixed when somebody will need really large one.</span>", 
"<span class=\"comment\"> * Keep in mind that it will be fed through icache hash function too.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#inline\">inline</a> unsigned long <a class=\"id\" href=\"#hash\">hash</a>(<a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#MAJOR\">MAJOR</a>(<a class=\"id\" href=\"#dev\">dev</a>)+<a class=\"id\" href=\"#MINOR\">MINOR</a>(<a class=\"id\" href=\"#dev\">dev</a>);", 
"}", 
"", 
"static int <a class=\"id\" href=\"#bdev_test\">bdev_test</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#BDEV_I\">BDEV_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#bdev\">bdev</a>.<a class=\"id\" href=\"#bd_dev\">bd_dev</a> == *(<a class=\"id\" href=\"#dev_t\">dev_t</a> *)<a class=\"id\" href=\"#data\">data</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#bdev_set\">bdev_set</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, void *<a class=\"id\" href=\"#data\">data</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BDEV_I\">BDEV_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#bdev\">bdev</a>.<a class=\"id\" href=\"#bd_dev\">bd_dev</a> = *(<a class=\"id\" href=\"#dev_t\">dev_t</a> *)<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"static <a class=\"id\" href=\"#LIST_HEAD\">LIST_HEAD</a>(<a class=\"id\" href=\"#all_bdevs\">all_bdevs</a>);", 
"", 
"struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdget\">bdget</a>(<a class=\"id\" href=\"#dev_t\">dev_t</a> <a class=\"id\" href=\"#dev\">dev</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#iget5_locked\">iget5_locked</a>(<a class=\"id\" href=\"#blockdev_superblock\">blockdev_superblock</a>, <a class=\"id\" href=\"#hash\">hash</a>(<a class=\"id\" href=\"#dev\">dev</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdev_test\">bdev_test</a>, <a class=\"id\" href=\"#bdev_set\">bdev_set</a>, &amp;<a class=\"id\" href=\"#dev\">dev</a>);", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#inode\">inode</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdev\">bdev</a> = &amp;<a class=\"id\" href=\"#BDEV_I\">BDEV_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#bdev\">bdev</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_state\">i_state</a> &amp; <a class=\"id\" href=\"#I_NEW\">I_NEW</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_contains\">bd_contains</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_inode\">bd_inode</a> = <a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_block_size\">bd_block_size</a> = (1 << <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blkbits\">i_blkbits</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_part_count\">bd_part_count</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_invalidated\">bd_invalidated</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a> = <a class=\"id\" href=\"#S_IFBLK\">S_IFBLK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_rdev\">i_rdev</a> = <a class=\"id\" href=\"#dev\">dev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_bdev\">i_bdev</a> = <a class=\"id\" href=\"#bdev\">bdev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_data\">i_data</a>.<a class=\"id\" href=\"#a_ops\">a_ops</a> = &amp;<a class=\"id\" href=\"#def_blk_aops\">def_blk_aops</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mapping_set_gfp_mask\">mapping_set_gfp_mask</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_data\">i_data</a>, <a class=\"id\" href=\"#GFP_USER\">GFP_USER</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_data\">i_data</a>.<a class=\"id\" href=\"#backing_dev_info\">backing_dev_info</a> = &amp;<a class=\"id\" href=\"#default_backing_dev_info\">default_backing_dev_info</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#bdev_lock\">bdev_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_list\">bd_list</a>, &amp;<a class=\"id\" href=\"#all_bdevs\">all_bdevs</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#bdev_lock\">bdev_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_new_inode\">unlock_new_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bdev\">bdev</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bdget\">bdget</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bdgrab -- Grab a reference to an already referenced block device</span>", 
"<span class=\"comment\"> * @bdev:<span class=\"ts\"/>Block device to grab a reference to.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdgrab\">bdgrab</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_inode\">bd_inode</a>-><a class=\"id\" href=\"#i_count\">i_count</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bdev\">bdev</a>;", 
"}", 
"", 
"long <a class=\"id\" href=\"#nr_blockdev_pages\">nr_blockdev_pages</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>;", 
"<span class=\"ts\"/>long <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#bdev_lock\">bdev_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, &amp;<a class=\"id\" href=\"#all_bdevs\">all_bdevs</a>, <a class=\"id\" href=\"#bd_list\">bd_list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> += <a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_inode\">bd_inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>-><a class=\"id\" href=\"#nrpages\">nrpages</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#bdev_lock\">bdev_lock</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#bdput\">bdput</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#iput\">iput</a>(<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_inode\">bd_inode</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bdput\">bdput</a>);", 
" ", 
"static struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bd_acquire\">bd_acquire</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#bdev_lock\">bdev_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdev\">bdev</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_bdev\">i_bdev</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bdev\">bdev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_inode\">bd_inode</a>-><a class=\"id\" href=\"#i_count\">i_count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#bdev_lock\">bdev_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#bdev\">bdev</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#bdev_lock\">bdev_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdev\">bdev</a> = <a class=\"id\" href=\"#bdget\">bdget</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_rdev\">i_rdev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bdev\">bdev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#bdev_lock\">bdev_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_bdev\">i_bdev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * We take an additional bd_inode-&gt;i_count for inode,</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * and it's released in clear_inode() of inode.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * So, we can access it via -&gt;i_mapping always</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * without igrab().</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_inode\">bd_inode</a>-><a class=\"id\" href=\"#i_count\">i_count</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_bdev\">i_bdev</a> = <a class=\"id\" href=\"#bdev\">bdev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a> = <a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_inode\">bd_inode</a>-><a class=\"id\" href=\"#i_mapping\">i_mapping</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_add\">list_add</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_devices\">i_devices</a>, &amp;<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_inodes\">bd_inodes</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#bdev_lock\">bdev_lock</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bdev\">bdev</a>;", 
"}", 
"", 
"<span class=\"comment\">/* Call when you free inode */</span>", 
"", 
"void <a class=\"id\" href=\"#bd_forget\">bd_forget</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#bdev_lock\">bdev_lock</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_bdev\">i_bdev</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#sb_is_blkdev_sb\">sb_is_blkdev_sb</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdev\">bdev</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_bdev\">i_bdev</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__bd_forget\">__bd_forget</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#bdev_lock\">bdev_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bdev\">bdev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#iput\">iput</a>(<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_inode\">bd_inode</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bd_may_claim - test whether a block device can be claimed</span>", 
"<span class=\"comment\"> * @bdev: block device of interest</span>", 
"<span class=\"comment\"> * @whole: whole block device containing @bdev, may equal @bdev</span>", 
"<span class=\"comment\"> * @holder: holder trying to claim @bdev</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Test whther @bdev can be claimed by @holder.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * spin_lock(&amp;bdev_lock).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * %true if @bdev can be claimed, %false otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#bd_may_claim\">bd_may_claim</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>, struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#whole\">whole</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> void *<a class=\"id\" href=\"#holder\">holder</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_holder\">bd_holder</a> == <a class=\"id\" href=\"#holder\">holder</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;<span class=\"ts\"/> <span class=\"comment\">/* already a holder */</span>", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_holder\">bd_holder</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>; <span class=\"ts\"/> <span class=\"comment\">/* held by someone else */</span>", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_contains\">bd_contains</a> == <a class=\"id\" href=\"#bdev\">bdev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;  <span class=\"ts\"/> <span class=\"comment\">/* is a whole device which isn't held */</span>", 
"", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#whole\">whole</a>-><a class=\"id\" href=\"#bd_holder\">bd_holder</a> == <a class=\"id\" href=\"#bd_claim\">bd_claim</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>; <span class=\"ts\"/> <span class=\"comment\">/* is a partition of a device that is being partitioned */</span>", 
"<span class=\"ts\"/>else if (<a class=\"id\" href=\"#whole\">whole</a>-><a class=\"id\" href=\"#bd_holder\">bd_holder</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;<span class=\"ts\"/> <span class=\"comment\">/* is a partition of a held device */</span>", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#true\">true</a>;<span class=\"ts\"/> <span class=\"comment\">/* is a partition of an un-held device */</span>", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bd_prepare_to_claim - prepare to claim a block device</span>", 
"<span class=\"comment\"> * @bdev: block device of interest</span>", 
"<span class=\"comment\"> * @whole: the whole device containing @bdev, may equal @bdev</span>", 
"<span class=\"comment\"> * @holder: holder trying to claim @bdev</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Prepare to claim @bdev.  This function fails if @bdev is already</span>", 
"<span class=\"comment\"> * claimed by another holder and waits if another claiming is in</span>", 
"<span class=\"comment\"> * progress.  This function doesn't actually claim.  On successful</span>", 
"<span class=\"comment\"> * return, the caller has ownership of bd_claiming and bd_holder[s].</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * spin_lock(&amp;bdev_lock).  Might release bdev_lock, sleep and regrab</span>", 
"<span class=\"comment\"> * it multiple times.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * 0 if @bdev can be claimed, -EBUSY otherwise.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#bd_prepare_to_claim\">bd_prepare_to_claim</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#whole\">whole</a>, void *<a class=\"id\" href=\"#holder\">holder</a>)", 
"{", 
"<a class=\"id\" href=\"#retry\">retry</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* if someone else claimed, fail */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bd_may_claim\">bd_may_claim</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#whole\">whole</a>, <a class=\"id\" href=\"#holder\">holder</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* if claiming is already in progress, wait for it to finish */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#whole\">whole</a>-><a class=\"id\" href=\"#bd_claiming\">bd_claiming</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a> *<a class=\"id\" href=\"#wq\">wq</a> = <a class=\"id\" href=\"#bit_waitqueue\">bit_waitqueue</a>(&amp;<a class=\"id\" href=\"#whole\">whole</a>-><a class=\"id\" href=\"#bd_claiming\">bd_claiming</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#DEFINE_WAIT\">DEFINE_WAIT</a>(<a class=\"id\" href=\"#wait\">wait</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#prepare_to_wait\">prepare_to_wait</a>(<a class=\"id\" href=\"#wq\">wq</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#TASK_UNINTERRUPTIBLE\">TASK_UNINTERRUPTIBLE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#bdev_lock\">bdev_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule\">schedule</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#finish_wait\">finish_wait</a>(<a class=\"id\" href=\"#wq\">wq</a>, &amp;<a class=\"id\" href=\"#wait\">wait</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#bdev_lock\">bdev_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#retry\">retry</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* yay, all mine */</span>", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bd_start_claiming - start claiming a block device</span>", 
"<span class=\"comment\"> * @bdev: block device of interest</span>", 
"<span class=\"comment\"> * @holder: holder trying to claim @bdev</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @bdev is about to be opened exclusively.  Check @bdev can be opened</span>", 
"<span class=\"comment\"> * exclusively and mark that an exclusive open is in progress.  Each</span>", 
"<span class=\"comment\"> * successful call to this function must be matched with a call to</span>", 
"<span class=\"comment\"> * either bd_finish_claiming() or bd_abort_claiming() (which do not</span>", 
"<span class=\"comment\"> * fail).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is used to gain exclusive access to the block device</span>", 
"<span class=\"comment\"> * without actually causing other exclusive open attempts to fail. It</span>", 
"<span class=\"comment\"> * should be used when the open sequence itself requires exclusive</span>", 
"<span class=\"comment\"> * access but may subsequently fail.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * Might sleep.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * Pointer to the block device containing @bdev on success, ERR_PTR()</span>", 
"<span class=\"comment\"> * value on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bd_start_claiming\">bd_start_claiming</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      void *<a class=\"id\" href=\"#holder\">holder</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#gendisk\">gendisk</a> *<a class=\"id\" href=\"#disk\">disk</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#whole\">whole</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#partno\">partno</a>, <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * @bdev might not have been initialized properly yet, look up</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and grab the outer block device the hard way.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#disk\">disk</a> = <a class=\"id\" href=\"#get_gendisk\">get_gendisk</a>(<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_dev\">bd_dev</a>, &amp;<a class=\"id\" href=\"#partno\">partno</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#disk\">disk</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENXIO\">ENXIO</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#whole\">whole</a> = <a class=\"id\" href=\"#bdget_disk\">bdget_disk</a>(<a class=\"id\" href=\"#disk\">disk</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#module_put\">module_put</a>(<a class=\"id\" href=\"#disk\">disk</a>-><a class=\"id\" href=\"#fops\">fops</a>-><a class=\"id\" href=\"#owner\">owner</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_disk\">put_disk</a>(<a class=\"id\" href=\"#disk\">disk</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#whole\">whole</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(-<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* prepare to claim, if successful, mark claiming in progress */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#bdev_lock\">bdev_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#bd_prepare_to_claim\">bd_prepare_to_claim</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#whole\">whole</a>, <a class=\"id\" href=\"#holder\">holder</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#whole\">whole</a>-><a class=\"id\" href=\"#bd_claiming\">bd_claiming</a> = <a class=\"id\" href=\"#holder\">holder</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#bdev_lock\">bdev_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#whole\">whole</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#bdev_lock\">bdev_lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdput\">bdput</a>(<a class=\"id\" href=\"#whole\">whole</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ERR_PTR\">ERR_PTR</a>(<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* releases bdev_lock */</span>", 
"static void <a class=\"id\" href=\"#__bd_abort_claiming\">__bd_abort_claiming</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#whole\">whole</a>, void *<a class=\"id\" href=\"#holder\">holder</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#whole\">whole</a>-><a class=\"id\" href=\"#bd_claiming\">bd_claiming</a> != <a class=\"id\" href=\"#holder\">holder</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#whole\">whole</a>-><a class=\"id\" href=\"#bd_claiming\">bd_claiming</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wake_up_bit\">wake_up_bit</a>(&amp;<a class=\"id\" href=\"#whole\">whole</a>-><a class=\"id\" href=\"#bd_claiming\">bd_claiming</a>, 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#bdev_lock\">bdev_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdput\">bdput</a>(<a class=\"id\" href=\"#whole\">whole</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bd_abort_claiming - abort claiming a block device</span>", 
"<span class=\"comment\"> * @whole: whole block device returned by bd_start_claiming()</span>", 
"<span class=\"comment\"> * @holder: holder trying to claim @bdev</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Abort a claiming block started by bd_start_claiming().  Note that</span>", 
"<span class=\"comment\"> * @whole is not the block device to be claimed but the whole device</span>", 
"<span class=\"comment\"> * returned by bd_start_claiming().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * Grabs and releases bdev_lock.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#bd_abort_claiming\">bd_abort_claiming</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#whole\">whole</a>, void *<a class=\"id\" href=\"#holder\">holder</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#bdev_lock\">bdev_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__bd_abort_claiming\">__bd_abort_claiming</a>(<a class=\"id\" href=\"#whole\">whole</a>, <a class=\"id\" href=\"#holder\">holder</a>);<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* releases bdev_lock */</span>", 
"}", 
"", 
"<span class=\"comment\">/* increment holders when we have a legitimate claim. requires bdev_lock */</span>", 
"static void <a class=\"id\" href=\"#__bd_claim\">__bd_claim</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>, struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#whole\">whole</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>void *<a class=\"id\" href=\"#holder\">holder</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* note that for a whole device bd_holders</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will be incremented twice, and bd_holder will</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * be set to bd_claim before being set to holder</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#whole\">whole</a>-><a class=\"id\" href=\"#bd_holders\">bd_holders</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#whole\">whole</a>-><a class=\"id\" href=\"#bd_holder\">bd_holder</a> = <a class=\"id\" href=\"#bd_claim\">bd_claim</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_holders\">bd_holders</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_holder\">bd_holder</a> = <a class=\"id\" href=\"#holder\">holder</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bd_finish_claiming - finish claiming a block device</span>", 
"<span class=\"comment\"> * @bdev: block device of interest (passed to bd_start_claiming())</span>", 
"<span class=\"comment\"> * @whole: whole block device returned by bd_start_claiming()</span>", 
"<span class=\"comment\"> * @holder: holder trying to claim @bdev</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Finish a claiming block started by bd_start_claiming().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * Grabs and releases bdev_lock.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#bd_finish_claiming\">bd_finish_claiming</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#whole\">whole</a>, void *<a class=\"id\" href=\"#holder\">holder</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#bdev_lock\">bdev_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#bd_may_claim\">bd_may_claim</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#whole\">whole</a>, <a class=\"id\" href=\"#holder\">holder</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__bd_claim\">__bd_claim</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#whole\">whole</a>, <a class=\"id\" href=\"#holder\">holder</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__bd_abort_claiming\">__bd_abort_claiming</a>(<a class=\"id\" href=\"#whole\">whole</a>, <a class=\"id\" href=\"#holder\">holder</a>); <span class=\"comment\">/* not actually an abort */</span>", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bd_claim - claim a block device</span>", 
"<span class=\"comment\"> * @bdev: block device to claim</span>", 
"<span class=\"comment\"> * @holder: holder trying to claim @bdev</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Try to claim @bdev which must have been opened successfully.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * CONTEXT:</span>", 
"<span class=\"comment\"> * Might sleep.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * RETURNS:</span>", 
"<span class=\"comment\"> * 0 if successful, -EBUSY if @bdev is already claimed.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#bd_claim\">bd_claim</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>, void *<a class=\"id\" href=\"#holder\">holder</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#whole\">whole</a> = <a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_contains\">bd_contains</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#res\">res</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#might_sleep\">might_sleep</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#bdev_lock\">bdev_lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#res\">res</a> = <a class=\"id\" href=\"#bd_prepare_to_claim\">bd_prepare_to_claim</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#whole\">whole</a>, <a class=\"id\" href=\"#holder\">holder</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#res\">res</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__bd_claim\">__bd_claim</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#whole\">whole</a>, <a class=\"id\" href=\"#holder\">holder</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#bdev_lock\">bdev_lock</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#res\">res</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bd_claim\">bd_claim</a>);", 
"", 
"void <a class=\"id\" href=\"#bd_release\">bd_release</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#bdev_lock\">bdev_lock</a>);", 
"<span class=\"ts\"/>if (!--<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_contains\">bd_contains</a>-><a class=\"id\" href=\"#bd_holders\">bd_holders</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_contains\">bd_contains</a>-><a class=\"id\" href=\"#bd_holder\">bd_holder</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/>if (!--<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_holders\">bd_holders</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_holder\">bd_holder</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#bdev_lock\">bdev_lock</a>);", 
"}", 
"", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#bd_release\">bd_release</a>);", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SYSFS\">CONFIG_SYSFS</a>", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Functions for bd_claim_by_kobject / bd_release_from_kobject</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *     If a kobject is passed to bd_claim_by_kobject()</span>", 
"<span class=\"comment\"> *     and the kobject has a parent directory,</span>", 
"<span class=\"comment\"> *     following symlinks are created:</span>", 
"<span class=\"comment\"> *        o from the kobject to the claimed bdev</span>", 
"<span class=\"comment\"> *        o from \"holders\" directory of the bdev to the parent of the kobject</span>", 
"<span class=\"comment\"> *     bd_release_from_kobject() removes these symlinks.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *     Example:</span>", 
"<span class=\"comment\"> *        If /dev/dm-0 maps to /dev/sda, kobject corresponding to</span>", 
"<span class=\"comment\"> *        /sys/block/dm-0/slaves is passed to bd_claim_by_kobject(), then:</span>", 
"<span class=\"comment\"> *           /sys/block/dm-0/slaves/sda --&gt; /sys/block/sda</span>", 
"<span class=\"comment\"> *           /sys/block/sda/holders/dm-0 --&gt; /sys/block/dm-0</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#add_symlink\">add_symlink</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#from\">from</a>, struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#to\">to</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#from\">from</a> || !<a class=\"id\" href=\"#to\">to</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#sysfs_create_link\">sysfs_create_link</a>(<a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#to\">to</a>, <a class=\"id\" href=\"#kobject_name\">kobject_name</a>(<a class=\"id\" href=\"#to\">to</a>));", 
"}", 
"", 
"static void <a class=\"id\" href=\"#del_symlink\">del_symlink</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#from\">from</a>, struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#to\">to</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#from\">from</a> || !<a class=\"id\" href=\"#to\">to</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sysfs_remove_link\">sysfs_remove_link</a>(<a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#kobject_name\">kobject_name</a>(<a class=\"id\" href=\"#to\">to</a>));", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * 'struct bd_holder' contains pointers to kobjects symlinked by</span>", 
"<span class=\"comment\"> * bd_claim_by_kobject.</span>", 
"<span class=\"comment\"> * It's connected to bd_holder_list which is protected by bdev-&gt;bd_sem.</span>", 
"<span class=\"comment\"> */</span>", 
"struct <a class=\"id\" href=\"#bd_holder\">bd_holder</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a> <a class=\"id\" href=\"#list\">list</a>;<span class=\"ts\"/><span class=\"comment\">/* chain of holders of the bdev */</span>", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a>;<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* references from the holder */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#sdir\">sdir</a>;<span class=\"ts\"/><span class=\"comment\">/* holder object, e.g. \"/block/dm-0/slaves\" */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#hdev\">hdev</a>;<span class=\"ts\"/><span class=\"comment\">/* e.g. \"/block/dm-0\" */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#hdir\">hdir</a>;<span class=\"ts\"/><span class=\"comment\">/* e.g. \"/block/sda/holders\" */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#sdev\">sdev</a>;<span class=\"ts\"/><span class=\"comment\">/* e.g. \"/block/sda\" */</span>", 
"};", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Get references of related kobjects at once.</span>", 
"<span class=\"comment\"> * Returns 1 on success. 0 on failure.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Should call bd_holder_release_dirs() after successful use.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#bd_holder_grab_dirs\">bd_holder_grab_dirs</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#bd_holder\">bd_holder</a> *<a class=\"id\" href=\"#bo\">bo</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bdev\">bdev</a> || !<a class=\"id\" href=\"#bo\">bo</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bo\">bo</a>-><a class=\"id\" href=\"#sdir\">sdir</a> = <a class=\"id\" href=\"#kobject_get\">kobject_get</a>(<a class=\"id\" href=\"#bo\">bo</a>-><a class=\"id\" href=\"#sdir\">sdir</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bo\">bo</a>-><a class=\"id\" href=\"#sdir\">sdir</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bo\">bo</a>-><a class=\"id\" href=\"#hdev\">hdev</a> = <a class=\"id\" href=\"#kobject_get\">kobject_get</a>(<a class=\"id\" href=\"#bo\">bo</a>-><a class=\"id\" href=\"#sdir\">sdir</a>-><a class=\"id\" href=\"#parent\">parent</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bo\">bo</a>-><a class=\"id\" href=\"#hdev\">hdev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_put_sdir\">fail_put_sdir</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bo\">bo</a>-><a class=\"id\" href=\"#sdev\">sdev</a> = <a class=\"id\" href=\"#kobject_get\">kobject_get</a>(&amp;<a class=\"id\" href=\"#part_to_dev\">part_to_dev</a>(<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_part\">bd_part</a>)-><a class=\"id\" href=\"#kobj\">kobj</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bo\">bo</a>-><a class=\"id\" href=\"#sdev\">sdev</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_put_hdev\">fail_put_hdev</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bo\">bo</a>-><a class=\"id\" href=\"#hdir\">hdir</a> = <a class=\"id\" href=\"#kobject_get\">kobject_get</a>(<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_part\">bd_part</a>-><a class=\"id\" href=\"#holder_dir\">holder_dir</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bo\">bo</a>-><a class=\"id\" href=\"#hdir\">hdir</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#fail_put_sdev\">fail_put_sdev</a>;", 
"", 
"<span class=\"ts\"/>return 1;", 
"", 
"<a class=\"id\" href=\"#fail_put_sdev\">fail_put_sdev</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(<a class=\"id\" href=\"#bo\">bo</a>-><a class=\"id\" href=\"#sdev\">sdev</a>);", 
"<a class=\"id\" href=\"#fail_put_hdev\">fail_put_hdev</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(<a class=\"id\" href=\"#bo\">bo</a>-><a class=\"id\" href=\"#hdev\">hdev</a>);", 
"<a class=\"id\" href=\"#fail_put_sdir\">fail_put_sdir</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(<a class=\"id\" href=\"#bo\">bo</a>-><a class=\"id\" href=\"#sdir\">sdir</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Put references of related kobjects at once. */</span>", 
"static void <a class=\"id\" href=\"#bd_holder_release_dirs\">bd_holder_release_dirs</a>(struct <a class=\"id\" href=\"#bd_holder\">bd_holder</a> *<a class=\"id\" href=\"#bo\">bo</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(<a class=\"id\" href=\"#bo\">bo</a>-><a class=\"id\" href=\"#hdir\">hdir</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(<a class=\"id\" href=\"#bo\">bo</a>-><a class=\"id\" href=\"#sdev\">sdev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(<a class=\"id\" href=\"#bo\">bo</a>-><a class=\"id\" href=\"#hdev\">hdev</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kobject_put\">kobject_put</a>(<a class=\"id\" href=\"#bo\">bo</a>-><a class=\"id\" href=\"#sdir\">sdir</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#bd_holder\">bd_holder</a> *<a class=\"id\" href=\"#alloc_bd_holder\">alloc_bd_holder</a>(struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bd_holder\">bd_holder</a> *<a class=\"id\" href=\"#bo\">bo</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bo\">bo</a> = <a class=\"id\" href=\"#kzalloc\">kzalloc</a>(sizeof(*<a class=\"id\" href=\"#bo\">bo</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bo\">bo</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bo\">bo</a>-><a class=\"id\" href=\"#count\">count</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bo\">bo</a>-><a class=\"id\" href=\"#sdir\">sdir</a> = <a class=\"id\" href=\"#kobj\">kobj</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bo\">bo</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#free_bd_holder\">free_bd_holder</a>(struct <a class=\"id\" href=\"#bd_holder\">bd_holder</a> *<a class=\"id\" href=\"#bo\">bo</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#bo\">bo</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * find_bd_holder - find matching struct bd_holder from the block device</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @bdev:<span class=\"ts\"/>struct block device to be searched</span>", 
"<span class=\"comment\"> * @bo:<span class=\"ts\"/><span class=\"ts\"/>target struct bd_holder</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns matching entry with @bo in @bdev-&gt;bd_holder_list.</span>", 
"<span class=\"comment\"> * If found, increment the reference count and return the pointer.</span>", 
"<span class=\"comment\"> * If not found, returns NULL.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#bd_holder\">bd_holder</a> *<a class=\"id\" href=\"#find_bd_holder\">find_bd_holder</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#bd_holder\">bd_holder</a> *<a class=\"id\" href=\"#bo\">bo</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bd_holder\">bd_holder</a> *<a class=\"id\" href=\"#tmp\">tmp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#tmp\">tmp</a>, &amp;<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_holder_list\">bd_holder_list</a>, <a class=\"id\" href=\"#list\">list</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#sdir\">sdir</a> == <a class=\"id\" href=\"#bo\">bo</a>-><a class=\"id\" href=\"#sdir\">sdir</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tmp\">tmp</a>-><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#tmp\">tmp</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * add_bd_holder - create sysfs symlinks for bd_claim() relationship</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @bdev:<span class=\"ts\"/>block device to be bd_claimed</span>", 
"<span class=\"comment\"> * @bo:<span class=\"ts\"/><span class=\"ts\"/>preallocated and initialized by alloc_bd_holder()</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Add @bo to @bdev-&gt;bd_holder_list, create symlinks.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if symlinks are created.</span>", 
"<span class=\"comment\"> * Returns -ve if something fails.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#add_bd_holder\">add_bd_holder</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>, struct <a class=\"id\" href=\"#bd_holder\">bd_holder</a> *<a class=\"id\" href=\"#bo\">bo</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bo\">bo</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#bd_holder_grab_dirs\">bd_holder_grab_dirs</a>(<a class=\"id\" href=\"#bdev\">bdev</a>, <a class=\"id\" href=\"#bo\">bo</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#add_symlink\">add_symlink</a>(<a class=\"id\" href=\"#bo\">bo</a>-><a class=\"id\" href=\"#sdir\">sdir</a>, <a class=\"id\" href=\"#bo\">bo</a>-><a class=\"id\" href=\"#sdev\">sdev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#add_symlink\">add_symlink</a>(<a class=\"id\" href=\"#bo\">bo</a>-><a class=\"id\" href=\"#hdir\">hdir</a>, <a class=\"id\" href=\"#bo\">bo</a>-><a class=\"id\" href=\"#hdev\">hdev</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#del_symlink\">del_symlink</a>(<a class=\"id\" href=\"#bo\">bo</a>-><a class=\"id\" href=\"#sdir\">sdir</a>, <a class=\"id\" href=\"#bo\">bo</a>-><a class=\"id\" href=\"#sdev\">sdev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_add_tail\">list_add_tail</a>(&amp;<a class=\"id\" href=\"#bo\">bo</a>-><a class=\"id\" href=\"#list\">list</a>, &amp;<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_holder_list\">bd_holder_list</a>);", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * del_bd_holder - delete sysfs symlinks for bd_claim() relationship</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @bdev:<span class=\"ts\"/>block device to be bd_claimed</span>", 
"<span class=\"comment\"> * @kobj:<span class=\"ts\"/>holder's kobject</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If there is matching entry with @kobj in @bdev-&gt;bd_holder_list</span>", 
"<span class=\"comment\"> * and no other bd_claim() from the same kobject,</span>", 
"<span class=\"comment\"> * remove the struct bd_holder from the list, delete symlinks for it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns a pointer to the struct bd_holder when it's removed from the list</span>", 
"<span class=\"comment\"> * and ready to be freed.</span>", 
"<span class=\"comment\"> * Returns NULL if matching claim isn't found or there is other bd_claim()</span>", 
"<span class=\"comment\"> * by the same kobject.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#bd_holder\">bd_holder</a> *<a class=\"id\" href=\"#del_bd_holder\">del_bd_holder</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#kobject\">kobject</a> *<a class=\"id\" href=\"#kobj\">kobj</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#bd_holder\">bd_holder</a> *<a class=\"id\" href=\"#bo\">bo</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#list_for_each_entry\">list_for_each_entry</a>(<a class=\"id\" href=\"#bo\">bo</a>, &amp;<a class=\"id\" href=\"#bdev\">bdev</a>-><a class=\"id\" href=\"#bd_holder_list\">bd_holder_list</a>, <a class=\"id\" href=\"#list\">list</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bo\">bo</a>-><a class=\"id\" href=\"#sdir\">sdir</a> == <a class=\"id\" href=\"#kobj\">kobj</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bo\">bo</a>-><a class=\"id\" href=\"#count\">count</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#bo\">bo</a>-><a class=\"id\" href=\"#count\">count</a> &lt; 0);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bo\">bo</a>-><a class=\"id\" href=\"#count\">count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#list_del\">list_del</a>(&amp;<a class=\"id\" href=\"#bo\">bo</a>-><a class=\"id\" href=\"#list\">list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#del_symlink\">del_symlink</a>(<a class=\"id\" href=\"#bo\">bo</a>-><a class=\"id\" href=\"#sdir\">sdir</a>, <a class=\"id\" href=\"#bo\">bo</a>-><a class=\"id\" href=\"#sdev\">sdev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#del_symlink\">del_symlink</a>(<a class=\"id\" href=\"#bo\">bo</a>-><a class=\"id\" href=\"#hdir\">hdir</a>, <a class=\"id\" href=\"#bo\">bo</a>-><a class=\"id\" href=\"#hdev\">hdev</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bd_holder_release_dirs\">bd_holder_release_dirs</a>(<a class=\"id\" href=\"#bo\">bo</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#bo\">bo</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * bd_claim_by_kobject - bd_claim() with additional kobject signature</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * @bdev:<span class=\"ts\"/>block device to be claimed</span>", 
"<span class=\"comment\"> * @holder:<span class=\"ts\"/>holder's signature</span>", 
"<span class=\"comment\"> * @kobj:<span class=\"ts\"/>holder's kobject</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Do bd_claim() and if it succeeds, create sysfs symlinks between</span>", 
"<span class=\"comment\"> * the bdev and the holder's kobject.</span>", 
"<span class=\"comment\"> * Use bd_release_from_kobject() when relesing the claimed bdev.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 on success. (same as bd_claim())</span>", 
"<span class=\"comment\"> * Returns errno on failure.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#bd_claim_by_kobject\">bd_claim_by_kobject</a>(struct <a class=\"id\" href=\"#block_device\">block_device</a> *<a class=\"id\" href=\"#bdev\">bdev</a>, void *<a class=\"id\" href=\"#holder\">holder</a>,", 
];
xr_frag_insert('l/28/151951e63e5c52c14a2dae62ee376d0a0e13fd.xr', __xr_tmp);
