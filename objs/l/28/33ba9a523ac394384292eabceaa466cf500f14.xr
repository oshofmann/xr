var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This contains the io-permission bitmap code - written by obz, with changes</span>", 
"<span class=\"comment\"> * by Linus. 32/64 bits code unification by Miguel Bot√≥n.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#capability\">capability</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#errno\">errno</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#types\">types</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ioport\">ioport</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#smp\">smp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stddef\">stddef</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#thread_info\">thread_info</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#syscalls\">syscalls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#syscalls\">syscalls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"<span class=\"comment\">/* Set EXTENT bits starting at BASE in BITMAP to value TURN_ON. */</span>", 
"static void <a class=\"id\" href=\"#set_bitmap\">set_bitmap</a>(unsigned long *<a class=\"id\" href=\"#bitmap\">bitmap</a>, unsigned int <a class=\"id\" href=\"#base\">base</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/>       unsigned int <a class=\"id\" href=\"#extent\">extent</a>, int <a class=\"id\" href=\"#new_value\">new_value</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#base\">base</a>; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#base\">base</a> + <a class=\"id\" href=\"#extent\">extent</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#new_value\">new_value</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__set_bit\">__set_bit</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#bitmap\">bitmap</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__clear_bit\">__clear_bit</a>(<a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#bitmap\">bitmap</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * this changes the io permissions bitmap in the current task.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#asmlinkage\">asmlinkage</a> long <a class=\"id\" href=\"#sys_ioperm\">sys_ioperm</a>(unsigned long <a class=\"id\" href=\"#from\">from</a>, unsigned long <a class=\"id\" href=\"#num\">num</a>, int <a class=\"id\" href=\"#turn_on\">turn_on</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#thread_struct\">thread_struct</a> *<a class=\"id\" href=\"#t\">t</a> = &amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#thread\">thread</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tss_struct\">tss_struct</a> *<a class=\"id\" href=\"#tss\">tss</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#max_long\">max_long</a>, <a class=\"id\" href=\"#bytes\">bytes</a>, <a class=\"id\" href=\"#bytes_updated\">bytes_updated</a>;", 
"", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#from\">from</a> + <a class=\"id\" href=\"#num\">num</a> <= <a class=\"id\" href=\"#from\">from</a>) || (<a class=\"id\" href=\"#from\">from</a> + <a class=\"id\" href=\"#num\">num</a> &gt; <a class=\"id\" href=\"#IO_BITMAP_BITS\">IO_BITMAP_BITS</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#turn_on\">turn_on</a> && !<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_RAWIO\">CAP_SYS_RAWIO</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If it's the first ioperm() call in this thread's lifetime, set the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * IO bitmap up. ioperm() is much less timing critical than clone(),</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * this is why we delay this operation until now:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#io_bitmap_ptr\">io_bitmap_ptr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>unsigned long *<a class=\"id\" href=\"#bitmap\">bitmap</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#IO_BITMAP_BYTES\">IO_BITMAP_BYTES</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bitmap\">bitmap</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#bitmap\">bitmap</a>, 0xff, <a class=\"id\" href=\"#IO_BITMAP_BYTES\">IO_BITMAP_BYTES</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#io_bitmap_ptr\">io_bitmap_ptr</a> = <a class=\"id\" href=\"#bitmap\">bitmap</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_thread_flag\">set_thread_flag</a>(<a class=\"id\" href=\"#TIF_IO_BITMAP\">TIF_IO_BITMAP</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * do it in the per-thread copy and in the TSS ...</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Disable preemption via get_cpu() - we must not switch away</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * because the -&gt;io_bitmap_max value must match the bitmap</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * contents:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tss\">tss</a> = &amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#init_tss\">init_tss</a>, <a class=\"id\" href=\"#get_cpu\">get_cpu</a>());", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_bitmap\">set_bitmap</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#io_bitmap_ptr\">io_bitmap_ptr</a>, <a class=\"id\" href=\"#from\">from</a>, <a class=\"id\" href=\"#num\">num</a>, !<a class=\"id\" href=\"#turn_on\">turn_on</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Search for a (possibly new) maximum. This is simple and stupid,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * to keep it obviously correct:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_long\">max_long</a> = 0;", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#IO_BITMAP_LONGS\">IO_BITMAP_LONGS</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#io_bitmap_ptr\">io_bitmap_ptr</a>[<a class=\"id\" href=\"#i\">i</a>] != ~0UL)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#max_long\">max_long</a> = <a class=\"id\" href=\"#i\">i</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bytes\">bytes</a> = (<a class=\"id\" href=\"#max_long\">max_long</a> + 1) * sizeof(unsigned long);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bytes_updated\">bytes_updated</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#bytes\">bytes</a>, <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#io_bitmap_max\">io_bitmap_max</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#io_bitmap_max\">io_bitmap_max</a> = <a class=\"id\" href=\"#bytes\">bytes</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Update the TSS: */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#tss\">tss</a>-><a class=\"id\" href=\"#io_bitmap\">io_bitmap</a>, <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#io_bitmap_ptr\">io_bitmap_ptr</a>, <a class=\"id\" href=\"#bytes_updated\">bytes_updated</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu\">put_cpu</a>();", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * sys_iopl has to be used when you want to access the IO ports</span>", 
"<span class=\"comment\"> * beyond the 0x3ff range: to get the full 65536 ports bitmapped</span>", 
"<span class=\"comment\"> * you'd need 8kB of bitmaps/process, which is a bit excessive.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Here we just change the flags value on the stack: we allow</span>", 
"<span class=\"comment\"> * only the super-user to do it. This depends on the stack-layout</span>", 
"<span class=\"comment\"> * on system-call entry - see also fork() and the signal handling</span>", 
"<span class=\"comment\"> * code.</span>", 
"<span class=\"comment\"> */</span>", 
"long <a class=\"id\" href=\"#sys_iopl\">sys_iopl</a>(unsigned int <a class=\"id\" href=\"#level\">level</a>, struct <a class=\"id\" href=\"#pt_regs\">pt_regs</a> *<a class=\"id\" href=\"#regs\">regs</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#old\">old</a> = (<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#flags\">flags</a> >> 12) &amp; 3;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#thread_struct\">thread_struct</a> *<a class=\"id\" href=\"#t\">t</a> = &amp;<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#thread\">thread</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#level\">level</a> &gt; 3)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Trying to gain more privileges? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#level\">level</a> &gt; <a class=\"id\" href=\"#old\">old</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#capable\">capable</a>(<a class=\"id\" href=\"#CAP_SYS_RAWIO\">CAP_SYS_RAWIO</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EPERM\">EPERM</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#flags\">flags</a> = (<a class=\"id\" href=\"#regs\">regs</a>-><a class=\"id\" href=\"#flags\">flags</a> &amp; ~<a class=\"id\" href=\"#X86_EFLAGS_IOPL\">X86_EFLAGS_IOPL</a>) | (<a class=\"id\" href=\"#level\">level</a> << 12);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#iopl\">iopl</a> = <a class=\"id\" href=\"#level\">level</a> << 12;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set_iopl_mask\">set_iopl_mask</a>(<a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#iopl\">iopl</a>);", 
"", 
"<span class=\"ts\"/>return 0;", 
"}", 
];
xr_frag_insert('l/28/33ba9a523ac394384292eabceaa466cf500f14.xr', __xr_tmp);
