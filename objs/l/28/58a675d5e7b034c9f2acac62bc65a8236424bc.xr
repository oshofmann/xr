var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/fs/file.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 1998-1999, Stephen Tweedie and Bill Hawes</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Manage the dynamic fd arrays in the process files_struct.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mm\">mm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#time\">time</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#vmalloc\">vmalloc</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fdtable\">fdtable</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bitops\">bitops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#interrupt\">interrupt</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rcupdate\">rcupdate</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#workqueue\">workqueue</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#fdtable_defer\">fdtable_defer</a> {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spinlock_t\">spinlock_t</a> <a class=\"id\" href=\"#lock\">lock</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a> <a class=\"id\" href=\"#wq\">wq</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fdtable\">fdtable</a> *<a class=\"id\" href=\"#next\">next</a>;", 
"};", 
"", 
"int <a class=\"id\" href=\"#sysctl_nr_open\">sysctl_nr_open</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = 1024*1024;", 
"int <a class=\"id\" href=\"#sysctl_nr_open_min\">sysctl_nr_open_min</a> = <a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a>;", 
"int <a class=\"id\" href=\"#sysctl_nr_open_max\">sysctl_nr_open_max</a> = 1024 * 1024; <span class=\"comment\">/* raised later */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We use this list to defer free fdtables that have vmalloced</span>", 
"<span class=\"comment\"> * sets/arrays. By keeping a per-cpu list, we avoid having to embed</span>", 
"<span class=\"comment\"> * the work_struct in fdtable itself which avoids a 64 byte (i386) increase in</span>", 
"<span class=\"comment\"> * this per-task structure.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#fdtable_defer\">fdtable_defer</a>, <a class=\"id\" href=\"#fdtable_defer_list\">fdtable_defer_list</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void *<a class=\"id\" href=\"#alloc_fdmem\">alloc_fdmem</a>(unsigned int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>|<a class=\"id\" href=\"#__GFP_NOWARN\">__GFP_NOWARN</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#data\">data</a> != <a class=\"id\" href=\"#NULL\">NULL</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#vmalloc\">vmalloc</a>(<a class=\"id\" href=\"#size\">size</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#free_fdmem\">free_fdmem</a>(void *<a class=\"id\" href=\"#ptr\">ptr</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#is_vmalloc_addr\">is_vmalloc_addr</a>(<a class=\"id\" href=\"#ptr\">ptr</a>) ? <a class=\"id\" href=\"#vfree\">vfree</a>(<a class=\"id\" href=\"#ptr\">ptr</a>) : <a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#ptr\">ptr</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__free_fdtable\">__free_fdtable</a>(struct <a class=\"id\" href=\"#fdtable\">fdtable</a> *<a class=\"id\" href=\"#fdt\">fdt</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_fdmem\">free_fdmem</a>(<a class=\"id\" href=\"#fdt\">fdt</a>-><a class=\"id\" href=\"#fd\">fd</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_fdmem\">free_fdmem</a>(<a class=\"id\" href=\"#fdt\">fdt</a>-><a class=\"id\" href=\"#open_fds\">open_fds</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#fdt\">fdt</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#free_fdtable_work\">free_fdtable_work</a>(struct <a class=\"id\" href=\"#work_struct\">work_struct</a> *<a class=\"id\" href=\"#work\">work</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fdtable_defer\">fdtable_defer</a> *<a class=\"id\" href=\"#f\">f</a> =", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#work\">work</a>, struct <a class=\"id\" href=\"#fdtable_defer\">fdtable_defer</a>, <a class=\"id\" href=\"#wq\">wq</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fdtable\">fdtable</a> *<a class=\"id\" href=\"#fdt\">fdt</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_bh\">spin_lock_bh</a>(&amp;<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fdt\">fdt</a> = <a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_bh\">spin_unlock_bh</a>(&amp;<a class=\"id\" href=\"#f\">f</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/>while(<a class=\"id\" href=\"#fdt\">fdt</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#fdtable\">fdtable</a> *<a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#fdt\">fdt</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__free_fdtable\">__free_fdtable</a>(<a class=\"id\" href=\"#fdt\">fdt</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fdt\">fdt</a> = <a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"void <a class=\"id\" href=\"#free_fdtable_rcu\">free_fdtable_rcu</a>(struct <a class=\"id\" href=\"#rcu_head\">rcu_head</a> *<a class=\"id\" href=\"#rcu\">rcu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fdtable\">fdtable</a> *<a class=\"id\" href=\"#fdt\">fdt</a> = <a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#rcu\">rcu</a>, struct <a class=\"id\" href=\"#fdtable\">fdtable</a>, <a class=\"id\" href=\"#rcu\">rcu</a>);", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fdtable_defer\">fdtable_defer</a> *<a class=\"id\" href=\"#fddef\">fddef</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(!<a class=\"id\" href=\"#fdt\">fdt</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#fdt\">fdt</a>-><a class=\"id\" href=\"#max_fds\">max_fds</a> <= <a class=\"id\" href=\"#NR_OPEN_DEFAULT\">NR_OPEN_DEFAULT</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * This fdtable is embedded in the files structure and that</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * structure itself is getting destroyed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kmem_cache_free\">kmem_cache_free</a>(<a class=\"id\" href=\"#files_cachep\">files_cachep</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#container_of\">container_of</a>(<a class=\"id\" href=\"#fdt\">fdt</a>, struct <a class=\"id\" href=\"#files_struct\">files_struct</a>, <a class=\"id\" href=\"#fdtab\">fdtab</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_vmalloc_addr\">is_vmalloc_addr</a>(<a class=\"id\" href=\"#fdt\">fdt</a>-><a class=\"id\" href=\"#fd\">fd</a>) && !<a class=\"id\" href=\"#is_vmalloc_addr\">is_vmalloc_addr</a>(<a class=\"id\" href=\"#fdt\">fdt</a>-><a class=\"id\" href=\"#open_fds\">open_fds</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#fdt\">fdt</a>-><a class=\"id\" href=\"#fd\">fd</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#fdt\">fdt</a>-><a class=\"id\" href=\"#open_fds\">open_fds</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#fdt\">fdt</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fddef\">fddef</a> = &amp;<a class=\"id\" href=\"#get_cpu_var\">get_cpu_var</a>(<a class=\"id\" href=\"#fdtable_defer_list\">fdtable_defer_list</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_lock\">spin_lock</a>(&amp;<a class=\"id\" href=\"#fddef\">fddef</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fdt\">fdt</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#fddef\">fddef</a>-><a class=\"id\" href=\"#next\">next</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#fddef\">fddef</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#fdt\">fdt</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* vmallocs are handled from the workqueue context */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#schedule_work\">schedule_work</a>(&amp;<a class=\"id\" href=\"#fddef\">fddef</a>-><a class=\"id\" href=\"#wq\">wq</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock\">spin_unlock</a>(&amp;<a class=\"id\" href=\"#fddef\">fddef</a>-><a class=\"id\" href=\"#lock\">lock</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_cpu_var\">put_cpu_var</a>(<a class=\"id\" href=\"#fdtable_defer_list\">fdtable_defer_list</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Expand the fdset in the files_struct.  Called with the files spinlock</span>", 
"<span class=\"comment\"> * held for write.</span>", 
"<span class=\"comment\"> */</span>", 
"static void <a class=\"id\" href=\"#copy_fdtable\">copy_fdtable</a>(struct <a class=\"id\" href=\"#fdtable\">fdtable</a> *<a class=\"id\" href=\"#nfdt\">nfdt</a>, struct <a class=\"id\" href=\"#fdtable\">fdtable</a> *<a class=\"id\" href=\"#ofdt\">ofdt</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#cpy\">cpy</a>, <a class=\"id\" href=\"#set\">set</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#nfdt\">nfdt</a>-><a class=\"id\" href=\"#max_fds\">max_fds</a> &lt; <a class=\"id\" href=\"#ofdt\">ofdt</a>-><a class=\"id\" href=\"#max_fds\">max_fds</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpy\">cpy</a> = <a class=\"id\" href=\"#ofdt\">ofdt</a>-><a class=\"id\" href=\"#max_fds\">max_fds</a> * sizeof(struct <a class=\"id\" href=\"#file\">file</a> *);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set\">set</a> = (<a class=\"id\" href=\"#nfdt\">nfdt</a>-><a class=\"id\" href=\"#max_fds\">max_fds</a> - <a class=\"id\" href=\"#ofdt\">ofdt</a>-><a class=\"id\" href=\"#max_fds\">max_fds</a>) * sizeof(struct <a class=\"id\" href=\"#file\">file</a> *);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#nfdt\">nfdt</a>-><a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#ofdt\">ofdt</a>-><a class=\"id\" href=\"#fd\">fd</a>, <a class=\"id\" href=\"#cpy\">cpy</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>((char *)(<a class=\"id\" href=\"#nfdt\">nfdt</a>-><a class=\"id\" href=\"#fd\">fd</a>) + <a class=\"id\" href=\"#cpy\">cpy</a>, 0, <a class=\"id\" href=\"#set\">set</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpy\">cpy</a> = <a class=\"id\" href=\"#ofdt\">ofdt</a>-><a class=\"id\" href=\"#max_fds\">max_fds</a> / <a class=\"id\" href=\"#BITS_PER_BYTE\">BITS_PER_BYTE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#set\">set</a> = (<a class=\"id\" href=\"#nfdt\">nfdt</a>-><a class=\"id\" href=\"#max_fds\">max_fds</a> - <a class=\"id\" href=\"#ofdt\">ofdt</a>-><a class=\"id\" href=\"#max_fds\">max_fds</a>) / <a class=\"id\" href=\"#BITS_PER_BYTE\">BITS_PER_BYTE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#nfdt\">nfdt</a>-><a class=\"id\" href=\"#open_fds\">open_fds</a>, <a class=\"id\" href=\"#ofdt\">ofdt</a>-><a class=\"id\" href=\"#open_fds\">open_fds</a>, <a class=\"id\" href=\"#cpy\">cpy</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>((char *)(<a class=\"id\" href=\"#nfdt\">nfdt</a>-><a class=\"id\" href=\"#open_fds\">open_fds</a>) + <a class=\"id\" href=\"#cpy\">cpy</a>, 0, <a class=\"id\" href=\"#set\">set</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#nfdt\">nfdt</a>-><a class=\"id\" href=\"#close_on_exec\">close_on_exec</a>, <a class=\"id\" href=\"#ofdt\">ofdt</a>-><a class=\"id\" href=\"#close_on_exec\">close_on_exec</a>, <a class=\"id\" href=\"#cpy\">cpy</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>((char *)(<a class=\"id\" href=\"#nfdt\">nfdt</a>-><a class=\"id\" href=\"#close_on_exec\">close_on_exec</a>) + <a class=\"id\" href=\"#cpy\">cpy</a>, 0, <a class=\"id\" href=\"#set\">set</a>);", 
"}", 
"", 
"static struct <a class=\"id\" href=\"#fdtable\">fdtable</a> * <a class=\"id\" href=\"#alloc_fdtable\">alloc_fdtable</a>(unsigned int <a class=\"id\" href=\"#nr\">nr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#fdtable\">fdtable</a> *<a class=\"id\" href=\"#fdt\">fdt</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#data\">data</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Figure out how many fds we actually want to support in this fdtable.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Allocation steps are keyed to the size of the fdarray, since it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * grows far faster than any of the other dynamic data. We try to fit</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the fdarray into comfortable page-tuned chunks: starting at 1024B</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and growing in powers of two from there on.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> /= (1024 / sizeof(struct <a class=\"id\" href=\"#file\">file</a> *));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = <a class=\"id\" href=\"#roundup_pow_of_two\">roundup_pow_of_two</a>(<a class=\"id\" href=\"#nr\">nr</a> + 1);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> *= (1024 / sizeof(struct <a class=\"id\" href=\"#file\">file</a> *));", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note that this can drive nr *below* what we had passed if sysctl_nr_open</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * had been set lower between the check in expand_files() and here.  Deal</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * with that in caller, it's cheaper that way.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * We make sure that nr remains a multiple of BITS_PER_LONG - otherwise</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * bitmaps handling below becomes unpleasant, to put it mildly...</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#nr\">nr</a> &gt; <a class=\"id\" href=\"#sysctl_nr_open\">sysctl_nr_open</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#nr\">nr</a> = ((<a class=\"id\" href=\"#sysctl_nr_open\">sysctl_nr_open</a> - 1) | (<a class=\"id\" href=\"#BITS_PER_LONG\">BITS_PER_LONG</a> - 1)) + 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fdt\">fdt</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(sizeof(struct <a class=\"id\" href=\"#fdtable\">fdtable</a>), <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#fdt\">fdt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fdt\">fdt</a>-><a class=\"id\" href=\"#max_fds\">max_fds</a> = <a class=\"id\" href=\"#nr\">nr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#alloc_fdmem\">alloc_fdmem</a>(<a class=\"id\" href=\"#nr\">nr</a> * sizeof(struct <a class=\"id\" href=\"#file\">file</a> *));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#data\">data</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_fdt\">out_fdt</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fdt\">fdt</a>-><a class=\"id\" href=\"#fd\">fd</a> = (struct <a class=\"id\" href=\"#file\">file</a> **)<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#alloc_fdmem\">alloc_fdmem</a>(<a class=\"id\" href=\"#max_t\">max_t</a>(unsigned int,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> 2 * <a class=\"id\" href=\"#nr\">nr</a> / <a class=\"id\" href=\"#BITS_PER_BYTE\">BITS_PER_BYTE</a>, <a class=\"id\" href=\"#L1_CACHE_BYTES\">L1_CACHE_BYTES</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#data\">data</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_arr\">out_arr</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fdt\">fdt</a>-><a class=\"id\" href=\"#open_fds\">open_fds</a> = (<a class=\"id\" href=\"#fd_set\">fd_set</a> *)<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#data\">data</a> += <a class=\"id\" href=\"#nr\">nr</a> / <a class=\"id\" href=\"#BITS_PER_BYTE\">BITS_PER_BYTE</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fdt\">fdt</a>-><a class=\"id\" href=\"#close_on_exec\">close_on_exec</a> = (<a class=\"id\" href=\"#fd_set\">fd_set</a> *)<a class=\"id\" href=\"#data\">data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#fdt\">fdt</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#fdt\">fdt</a>;", 
"", 
"<a class=\"id\" href=\"#out_arr\">out_arr</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#free_fdmem\">free_fdmem</a>(<a class=\"id\" href=\"#fdt\">fdt</a>-><a class=\"id\" href=\"#fd\">fd</a>);", 
"<a class=\"id\" href=\"#out_fdt\">out_fdt</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#fdt\">fdt</a>);", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"}", 
"", 
];
xr_frag_insert('l/28/58a675d5e7b034c9f2acac62bc65a8236424bc.xr', __xr_tmp);
