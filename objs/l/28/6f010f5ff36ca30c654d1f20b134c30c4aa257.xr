var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/>kmod, the new module loader (replaces kerneld)</span>", 
"<span class=\"comment\"><span class=\"ts\"/>Kirk Petersen</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"><span class=\"ts\"/>Reorganized not to be a daemon by Adam Richter, with guidance</span>", 
"<span class=\"comment\"><span class=\"ts\"/>from Greg Zornetzer.</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"><span class=\"ts\"/>Modified to avoid chroot and file sharing problems.</span>", 
"<span class=\"comment\"><span class=\"ts\"/>Mikael Pettersson</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"><span class=\"ts\"/>Limit the concurrent number of kmod modprobes to catch loops from</span>", 
"<span class=\"comment\"><span class=\"ts\"/>\"modprobe needs a service that is in a module\".</span>", 
"<span class=\"comment\"><span class=\"ts\"/>Keith Owens &lt;kaos@ocs.com.au&gt; December 1999</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"><span class=\"ts\"/>Unblock all signals when we exec a usermode process.</span>", 
"<span class=\"comment\"><span class=\"ts\"/>Shuu Yamaguchi &lt;shuu@wondernetworkresources.com&gt; December 2000</span>", 
"<span class=\"comment\"></span>", 
"<span class=\"comment\"><span class=\"ts\"/>call_usermodehelper wait flag, and remove exec_usermodehelper.</span>", 
"<span class=\"comment\"><span class=\"ts\"/>Rusty Russell &lt;rusty@rustcorp.com.au&gt;  Jan 2003</span>", 
"<span class=\"comment\">*/</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#sched\">sched</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#syscalls\">syscalls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#unistd\">unistd</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kmod\">kmod</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#completion\">completion</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#file\">file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fdtable\">fdtable</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#workqueue\">workqueue</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#security\">security</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mount\">mount</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#resource\">resource</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#notifier\">notifier</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#suspend\">suspend</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#trace\">trace</a>/<a class=\"id\" href=\"#events\">events</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"extern int <a class=\"id\" href=\"#max_threads\">max_threads</a>;", 
"", 
"static struct <a class=\"id\" href=\"#workqueue_struct\">workqueue_struct</a> *<a class=\"id\" href=\"#khelper_wq\">khelper_wq</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_MODULES\">CONFIG_MODULES</a>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/>modprobe_path is set via /proc/sys.</span>", 
"<span class=\"comment\">*/</span>", 
"char <a class=\"id\" href=\"#modprobe_path\">modprobe_path</a>[<a class=\"id\" href=\"#KMOD_PATH_LEN\">KMOD_PATH_LEN</a>] = \"/sbin/modprobe\";", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * __request_module - try to load a kernel module</span>", 
"<span class=\"comment\"> * @wait: wait (or not) for the operation to complete</span>", 
"<span class=\"comment\"> * @fmt: printf style format string for the name of the module</span>", 
"<span class=\"comment\"> * @...: arguments as specified in the format string</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Load a module using the user mode module loader. The function returns</span>", 
"<span class=\"comment\"> * zero on success or a negative errno code on failure. Note that a</span>", 
"<span class=\"comment\"> * successful module load does not mean the module did not then unload</span>", 
"<span class=\"comment\"> * and exit on an error of its own. Callers must check that the service</span>", 
"<span class=\"comment\"> * they requested is now available not blindly invoke it.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If module auto-loading support is disabled then this function</span>", 
"<span class=\"comment\"> * becomes a no-operation.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#__request_module\">__request_module</a>(<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#wait\">wait</a>, const char *<a class=\"id\" href=\"#fmt\">fmt</a>, ...)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_list\">va_list</a> <a class=\"id\" href=\"#args\">args</a>;", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#module_name\">module_name</a>[<a class=\"id\" href=\"#MODULE_NAME_LEN\">MODULE_NAME_LEN</a>];", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#max_modprobes\">max_modprobes</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"<span class=\"ts\"/>char *<a class=\"id\" href=\"#argv\">argv</a>[] = { <a class=\"id\" href=\"#modprobe_path\">modprobe_path</a>, \"-q\", \"--\", <a class=\"id\" href=\"#module_name\">module_name</a>, <a class=\"id\" href=\"#NULL\">NULL</a> };", 
"<span class=\"ts\"/>static char *<a class=\"id\" href=\"#envp\">envp</a>[] = { \"HOME=/\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"TERM=linux\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"PATH=/sbin:/usr/sbin:/bin:/usr/bin\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a> };", 
"<span class=\"ts\"/>static <a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#kmod_concurrent\">kmod_concurrent</a> = <a class=\"id\" href=\"#ATOMIC_INIT\">ATOMIC_INIT</a>(0);", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_KMOD_CONCURRENT\">MAX_KMOD_CONCURRENT</a> 50<span class=\"ts\"/><span class=\"comment\">/* Completely arbitrary value - KAO */</span>", 
"<span class=\"ts\"/>static int <a class=\"id\" href=\"#kmod_loop_msg\">kmod_loop_msg</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_start\">va_start</a>(<a class=\"id\" href=\"#args\">args</a>, <a class=\"id\" href=\"#fmt\">fmt</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#vsnprintf\">vsnprintf</a>(<a class=\"id\" href=\"#module_name\">module_name</a>, <a class=\"id\" href=\"#MODULE_NAME_LEN\">MODULE_NAME_LEN</a>, <a class=\"id\" href=\"#fmt\">fmt</a>, <a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#va_end\">va_end</a>(<a class=\"id\" href=\"#args\">args</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> >= <a class=\"id\" href=\"#MODULE_NAME_LEN\">MODULE_NAME_LEN</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENAMETOOLONG\">ENAMETOOLONG</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#security_kernel_module_request\">security_kernel_module_request</a>(<a class=\"id\" href=\"#module_name\">module_name</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If modprobe needs a service that is in a module, we get a recursive</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * loop.  Limit the number of running kmod threads to max_threads/2 or</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * MAX_KMOD_CONCURRENT, whichever is the smaller.  A cleaner method</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * would be to run the parents of this process, counting how many times</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * kmod was invoked.  That would mean accessing the internals of the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * process tables to get the command line, proc_pid_cmdline is static</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * and it is not worth changing the proc code just to handle this case. </span>", 
"<span class=\"comment\"><span class=\"ts\"/> * KAO.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * \"trace the ppid\" is simple, but will fail if someone's</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * parent exits.  I think this is as good as it gets. --RR</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_modprobes\">max_modprobes</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#max_threads\">max_threads</a>/2, <a class=\"id\" href=\"#MAX_KMOD_CONCURRENT\">MAX_KMOD_CONCURRENT</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_inc\">atomic_inc</a>(&amp;<a class=\"id\" href=\"#kmod_concurrent\">kmod_concurrent</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#atomic_read\">atomic_read</a>(&amp;<a class=\"id\" href=\"#kmod_concurrent\">kmod_concurrent</a>) &gt; <a class=\"id\" href=\"#max_modprobes\">max_modprobes</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* We may be blaming an innocent here, but unlikely */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#kmod_loop_msg\">kmod_loop_msg</a>++ &lt; 5)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_ERR\">KERN_ERR</a>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       \"request_module: runaway loop modprobe %s\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       <a class=\"id\" href=\"#module_name\">module_name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#kmod_concurrent\">kmod_concurrent</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#ENOMEM\">ENOMEM</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_module_request\">trace_module_request</a>(<a class=\"id\" href=\"#module_name\">module_name</a>, <a class=\"id\" href=\"#wait\">wait</a>, <a class=\"id\" href=\"#_RET_IP_\">_RET_IP_</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#call_usermodehelper_fns\">call_usermodehelper_fns</a>(<a class=\"id\" href=\"#modprobe_path\">modprobe_path</a>, <a class=\"id\" href=\"#argv\">argv</a>, <a class=\"id\" href=\"#envp\">envp</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wait\">wait</a> ? <a class=\"id\" href=\"#UMH_WAIT_PROC\">UMH_WAIT_PROC</a> : <a class=\"id\" href=\"#UMH_WAIT_EXEC\">UMH_WAIT_EXEC</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#atomic_dec\">atomic_dec</a>(&amp;<a class=\"id\" href=\"#kmod_concurrent\">kmod_concurrent</a>);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#__request_module\">__request_module</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_MODULES */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * This is the task which runs the usermode application</span>", 
];
xr_frag_insert('l/28/6f010f5ff36ca30c654d1f20b134c30c4aa257.xr', __xr_tmp);
