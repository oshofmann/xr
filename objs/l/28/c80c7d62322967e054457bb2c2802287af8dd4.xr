var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * INET<span class=\"ts\"/><span class=\"ts\"/>An implementation of the TCP/IP protocol suite for the LINUX</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>operating system.  INET is implemented using the  BSD Socket</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>interface as the means of communication with the user level.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Implementation of the Transmission Control Protocol(TCP).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Authors:<span class=\"ts\"/>Ross Biro</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Fred N. van Kempen, &lt;waltje@uWalt.NL.Mugnet.ORG&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Mark Evans, &lt;evansmp@uhura.aston.ac.uk&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Corey Minyard &lt;wf-rch!minyard@relay.EU.net&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Florian La Roche, &lt;flla@stud.uni-sb.de&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Charles Hedrick, &lt;hedrick@klinzhai.rutgers.edu&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Linus Torvalds, &lt;torvalds@cs.helsinki.fi&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Alan Cox, &lt;gw4pts@gw4pts.ampr.org&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Matthew Dillon, &lt;dillon@apollo.west.oic.com&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Arnt Gulbrandsen, &lt;agulbra@nvg.unit.no&gt;</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>Jorge Cwik, &lt;jorge@laser.satlink.net&gt;</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#gfp\">gfp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#tcp\">tcp</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"int <a class=\"id\" href=\"#sysctl_tcp_syn_retries\">sysctl_tcp_syn_retries</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = <a class=\"id\" href=\"#TCP_SYN_RETRIES\">TCP_SYN_RETRIES</a>;", 
"int <a class=\"id\" href=\"#sysctl_tcp_synack_retries\">sysctl_tcp_synack_retries</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = <a class=\"id\" href=\"#TCP_SYNACK_RETRIES\">TCP_SYNACK_RETRIES</a>;", 
"int <a class=\"id\" href=\"#sysctl_tcp_keepalive_time\">sysctl_tcp_keepalive_time</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = <a class=\"id\" href=\"#TCP_KEEPALIVE_TIME\">TCP_KEEPALIVE_TIME</a>;", 
"int <a class=\"id\" href=\"#sysctl_tcp_keepalive_probes\">sysctl_tcp_keepalive_probes</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = <a class=\"id\" href=\"#TCP_KEEPALIVE_PROBES\">TCP_KEEPALIVE_PROBES</a>;", 
"int <a class=\"id\" href=\"#sysctl_tcp_keepalive_intvl\">sysctl_tcp_keepalive_intvl</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = <a class=\"id\" href=\"#TCP_KEEPALIVE_INTVL\">TCP_KEEPALIVE_INTVL</a>;", 
"int <a class=\"id\" href=\"#sysctl_tcp_retries1\">sysctl_tcp_retries1</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = <a class=\"id\" href=\"#TCP_RETR1\">TCP_RETR1</a>;", 
"int <a class=\"id\" href=\"#sysctl_tcp_retries2\">sysctl_tcp_retries2</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> = <a class=\"id\" href=\"#TCP_RETR2\">TCP_RETR2</a>;", 
"int <a class=\"id\" href=\"#sysctl_tcp_orphan_retries\">sysctl_tcp_orphan_retries</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"int <a class=\"id\" href=\"#sysctl_tcp_thin_linear_timeouts\">sysctl_tcp_thin_linear_timeouts</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"static void <a class=\"id\" href=\"#tcp_write_timer\">tcp_write_timer</a>(unsigned long);", 
"static void <a class=\"id\" href=\"#tcp_delack_timer\">tcp_delack_timer</a>(unsigned long);", 
"static void <a class=\"id\" href=\"#tcp_keepalive_timer\">tcp_keepalive_timer</a> (unsigned long <a class=\"id\" href=\"#data\">data</a>);", 
"", 
"void <a class=\"id\" href=\"#tcp_init_xmit_timers\">tcp_init_xmit_timers</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inet_csk_init_xmit_timers\">inet_csk_init_xmit_timers</a>(<a class=\"id\" href=\"#sk\">sk</a>, &amp;<a class=\"id\" href=\"#tcp_write_timer\">tcp_write_timer</a>, &amp;<a class=\"id\" href=\"#tcp_delack_timer\">tcp_delack_timer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  &amp;<a class=\"id\" href=\"#tcp_keepalive_timer\">tcp_keepalive_timer</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL\">EXPORT_SYMBOL</a>(<a class=\"id\" href=\"#tcp_init_xmit_timers\">tcp_init_xmit_timers</a>);", 
"", 
"static void <a class=\"id\" href=\"#tcp_write_err\">tcp_write_err</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_err\">sk_err</a> = <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_err_soft\">sk_err_soft</a> ? : <a class=\"id\" href=\"#ETIMEDOUT\">ETIMEDOUT</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_error_report\">sk_error_report</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tcp_done\">tcp_done</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NET_INC_STATS_BH\">NET_INC_STATS_BH</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#LINUX_MIB_TCPABORTONTIMEOUT\">LINUX_MIB_TCPABORTONTIMEOUT</a>);", 
"}", 
"", 
"<span class=\"comment\">/* Do not allow orphaned sockets to eat all our resources.</span>", 
"<span class=\"comment\"> * This is direct violation of TCP specs, but it is required</span>", 
"<span class=\"comment\"> * to prevent DoS attacks. It is called when a retransmission timeout</span>", 
"<span class=\"comment\"> * or zero probe timeout occurs on orphaned socket.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Criteria is still not confirmed experimentally and may change.</span>", 
"<span class=\"comment\"> * We kill the socket, if:</span>", 
"<span class=\"comment\"> * 1. If number of orphaned sockets exceeds an administratively configured</span>", 
"<span class=\"comment\"> *    limit.</span>", 
"<span class=\"comment\"> * 2. If we have strong memory pressure.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#tcp_out_of_resources\">tcp_out_of_resources</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#do_reset\">do_reset</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#shift\">shift</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If peer does not open window for long time, or did not transmit</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * anything for long time, penalize it. */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#s32\">s32</a>)(<a class=\"id\" href=\"#tcp_time_stamp\">tcp_time_stamp</a> - <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#lsndtime\">lsndtime</a>) &gt; 2*<a class=\"id\" href=\"#TCP_RTO_MAX\">TCP_RTO_MAX</a> || !<a class=\"id\" href=\"#do_reset\">do_reset</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shift\">shift</a>++;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* If some dubious ICMP arrived, penalize even more. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_err_soft\">sk_err_soft</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#shift\">shift</a>++;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tcp_too_many_orphans\">tcp_too_many_orphans</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#shift\">shift</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#net_ratelimit\">net_ratelimit</a>())", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Out of socket memory\\n\");", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Catch exceptional cases, when connection requires reset.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> *      1. Last segment was sent recently. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if ((<a class=\"id\" href=\"#s32\">s32</a>)(<a class=\"id\" href=\"#tcp_time_stamp\">tcp_time_stamp</a> - <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#lsndtime\">lsndtime</a>) <= <a class=\"id\" href=\"#TCP_TIMEWAIT_LEN\">TCP_TIMEWAIT_LEN</a> ||", 
"<span class=\"ts\"/><span class=\"ts\"/>    <span class=\"comment\">/*  2. Window is closed. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>    (!<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#snd_wnd\">snd_wnd</a> && !<a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#packets_out\">packets_out</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#do_reset\">do_reset</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#do_reset\">do_reset</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_send_active_reset\">tcp_send_active_reset</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#GFP_ATOMIC\">GFP_ATOMIC</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_done\">tcp_done</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#NET_INC_STATS_BH\">NET_INC_STATS_BH</a>(<a class=\"id\" href=\"#sock_net\">sock_net</a>(<a class=\"id\" href=\"#sk\">sk</a>), <a class=\"id\" href=\"#LINUX_MIB_TCPABORTONMEMORY\">LINUX_MIB_TCPABORTONMEMORY</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/* Calculate maximal number or retries on an orphaned socket. */</span>", 
"static int <a class=\"id\" href=\"#tcp_orphan_retries\">tcp_orphan_retries</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>, int <a class=\"id\" href=\"#alive\">alive</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retries\">retries</a> = <a class=\"id\" href=\"#sysctl_tcp_orphan_retries\">sysctl_tcp_orphan_retries</a>; <span class=\"comment\">/* May be zero. */</span>", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We know from an ICMP that something is wrong. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_err_soft\">sk_err_soft</a> && !<a class=\"id\" href=\"#alive\">alive</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retries\">retries</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* However, if socket sent something recently, select some safe</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * number of retries. 8 corresponds to &gt;100 seconds with minimal</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * RTO of 200msec. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#retries\">retries</a> == 0 && <a class=\"id\" href=\"#alive\">alive</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#retries\">retries</a> = 8;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#retries\">retries</a>;", 
"}", 
"", 
"static void <a class=\"id\" href=\"#tcp_mtu_probing\">tcp_mtu_probing</a>(struct <a class=\"id\" href=\"#inet_connection_sock\">inet_connection_sock</a> *<a class=\"id\" href=\"#icsk\">icsk</a>, struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/><span class=\"comment\">/* Black hole detection */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#sysctl_tcp_mtu_probing\">sysctl_tcp_mtu_probing</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_mtup\">icsk_mtup</a>.<a class=\"id\" href=\"#enabled\">enabled</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_mtup\">icsk_mtup</a>.<a class=\"id\" href=\"#enabled\">enabled</a> = 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_sync_mss\">tcp_sync_mss</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_pmtu_cookie\">icsk_pmtu_cookie</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#tcp_sock\">tcp_sock</a> *<a class=\"id\" href=\"#tp\">tp</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>int <a class=\"id\" href=\"#mss\">mss</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mss\">mss</a> = <a class=\"id\" href=\"#tcp_mtu_to_mss\">tcp_mtu_to_mss</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_mtup\">icsk_mtup</a>.<a class=\"id\" href=\"#search_low\">search_low</a>) >> 1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mss\">mss</a> = <a class=\"id\" href=\"#min\">min</a>(<a class=\"id\" href=\"#sysctl_tcp_base_mss\">sysctl_tcp_base_mss</a>, <a class=\"id\" href=\"#mss\">mss</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mss\">mss</a> = <a class=\"id\" href=\"#max\">max</a>(<a class=\"id\" href=\"#mss\">mss</a>, 68 - <a class=\"id\" href=\"#tp\">tp</a>-><a class=\"id\" href=\"#tcp_header_len\">tcp_header_len</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_mtup\">icsk_mtup</a>.<a class=\"id\" href=\"#search_low\">search_low</a> = <a class=\"id\" href=\"#tcp_mss_to_mtu\">tcp_mss_to_mtu</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#mss\">mss</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tcp_sync_mss\">tcp_sync_mss</a>(<a class=\"id\" href=\"#sk\">sk</a>, <a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_pmtu_cookie\">icsk_pmtu_cookie</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"<span class=\"comment\">/* This function calculates a \"timeout\" which is equivalent to the timeout of a</span>", 
"<span class=\"comment\"> * TCP connection after \"boundary\" unsuccessful, exponentially backed-off</span>", 
"<span class=\"comment\"> * retransmissions with an initial RTO of TCP_RTO_MIN or TCP_TIMEOUT_INIT if</span>", 
"<span class=\"comment\"> * syn_set flag is set.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#retransmits_timed_out\">retransmits_timed_out</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  unsigned int <a class=\"id\" href=\"#boundary\">boundary</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#syn_set\">syn_set</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#timeout\">timeout</a>, <a class=\"id\" href=\"#linear_backoff_thresh\">linear_backoff_thresh</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#start_ts\">start_ts</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#rto_base\">rto_base</a> = <a class=\"id\" href=\"#syn_set\">syn_set</a> ? <a class=\"id\" href=\"#TCP_TIMEOUT_INIT\">TCP_TIMEOUT_INIT</a> : <a class=\"id\" href=\"#TCP_RTO_MIN\">TCP_RTO_MIN</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#icsk_retransmits\">icsk_retransmits</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#false\">false</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#retrans_stamp\">retrans_stamp</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_ts\">start_ts</a> = <a class=\"id\" href=\"#TCP_SKB_CB\">TCP_SKB_CB</a>(<a class=\"id\" href=\"#tcp_write_queue_head\">tcp_write_queue_head</a>(<a class=\"id\" href=\"#sk\">sk</a>))-><a class=\"id\" href=\"#when\">when</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#start_ts\">start_ts</a> = <a class=\"id\" href=\"#tcp_sk\">tcp_sk</a>(<a class=\"id\" href=\"#sk\">sk</a>)-><a class=\"id\" href=\"#retrans_stamp\">retrans_stamp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#linear_backoff_thresh\">linear_backoff_thresh</a> = <a class=\"id\" href=\"#ilog2\">ilog2</a>(<a class=\"id\" href=\"#TCP_RTO_MAX\">TCP_RTO_MAX</a>/<a class=\"id\" href=\"#rto_base\">rto_base</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#boundary\">boundary</a> <= <a class=\"id\" href=\"#linear_backoff_thresh\">linear_backoff_thresh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timeout\">timeout</a> = ((2 << <a class=\"id\" href=\"#boundary\">boundary</a>) - 1) * <a class=\"id\" href=\"#rto_base\">rto_base</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#timeout\">timeout</a> = ((2 << <a class=\"id\" href=\"#linear_backoff_thresh\">linear_backoff_thresh</a>) - 1) * <a class=\"id\" href=\"#rto_base\">rto_base</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>  (<a class=\"id\" href=\"#boundary\">boundary</a> - <a class=\"id\" href=\"#linear_backoff_thresh\">linear_backoff_thresh</a>) * <a class=\"id\" href=\"#TCP_RTO_MAX\">TCP_RTO_MAX</a>;", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#tcp_time_stamp\">tcp_time_stamp</a> - <a class=\"id\" href=\"#start_ts\">start_ts</a>) >= <a class=\"id\" href=\"#timeout\">timeout</a>;", 
"}", 
"", 
"<span class=\"comment\">/* A write timeout has occurred. Process the after effects. */</span>", 
"static int <a class=\"id\" href=\"#tcp_write_timeout\">tcp_write_timeout</a>(struct <a class=\"id\" href=\"#sock\">sock</a> *<a class=\"id\" href=\"#sk\">sk</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#inet_connection_sock\">inet_connection_sock</a> *<a class=\"id\" href=\"#icsk\">icsk</a> = <a class=\"id\" href=\"#inet_csk\">inet_csk</a>(<a class=\"id\" href=\"#sk\">sk</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#retry_until\">retry_until</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#do_reset\">do_reset</a>, <a class=\"id\" href=\"#syn_set\">syn_set</a> = 0;", 
"", 
"<span class=\"ts\"/>if ((1 << <a class=\"id\" href=\"#sk\">sk</a>-><a class=\"id\" href=\"#sk_state\">sk_state</a>) &amp; (<a class=\"id\" href=\"#TCPF_SYN_SENT\">TCPF_SYN_SENT</a> | <a class=\"id\" href=\"#TCPF_SYN_RECV\">TCPF_SYN_RECV</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#icsk\">icsk</a>-><a class=\"id\" href=\"#icsk_retransmits\">icsk_retransmits</a>)", 
];
xr_frag_insert('l/28/c80c7d62322967e054457bb2c2802287af8dd4.xr', __xr_tmp);
