var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> *  linux/fs/ext4/inode.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 1992, 1993, 1994, 1995</span>", 
"<span class=\"comment\"> * Remy Card (card@masi.ibp.fr)</span>", 
"<span class=\"comment\"> * Laboratoire MASI - Institut Blaise Pascal</span>", 
"<span class=\"comment\"> * Universite Pierre et Marie Curie (Paris VI)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  from</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  linux/fs/minix/inode.c</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Copyright (C) 1991, 1992  Linus Torvalds</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Goal-directed block allocation by Stephen Tweedie</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(sct@redhat.com), 1993, 1998</span>", 
"<span class=\"comment\"> *  Big-endian to little-endian byte-swapping/bitmaps by</span>", 
"<span class=\"comment\"> *        David S. Miller (davem@caip.rutgers.edu), 1995</span>", 
"<span class=\"comment\"> *  64-bit file support on 64-bit platforms by Jakub Jelinek</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(jj@sunsite.ms.mff.cuni.cz)</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *  Assorted race fixes, rewrite of ext4_get_block() by Al Viro, 2000</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#time\">time</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#jbd2\">jbd2</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#highuid\">highuid</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pagemap\">pagemap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#quotaops\">quotaops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#buffer_head\">buffer_head</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#writeback\">writeback</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pagevec\">pagevec</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#mpage\">mpage</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#namei\">namei</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#uio\">uio</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#bio\">bio</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#workqueue\">workqueue</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kernel\">kernel</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"ext4_jbd2.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"xattr.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"acl.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"ext4_extents.h\"", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#trace\">trace</a>/<a class=\"id\" href=\"#events\">events</a>/<a class=\"id\" href=\"#ext4\">ext4</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MPAGE_DA_EXTENT_TAIL\">MPAGE_DA_EXTENT_TAIL</a> 0x01", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> int <a class=\"id\" href=\"#ext4_begin_ordered_truncate\">ext4_begin_ordered_truncate</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#loff_t\">loff_t</a> <a class=\"id\" href=\"#new_size\">new_size</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#jbd2_journal_begin_ordered_truncate\">jbd2_journal_begin_ordered_truncate</a>(", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>)-><a class=\"id\" href=\"#s_journal\">s_journal</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>&amp;<a class=\"id\" href=\"#EXT4_I\">EXT4_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#jinode\">jinode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_size\">new_size</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#ext4_invalidatepage\">ext4_invalidatepage</a>(struct <a class=\"id\" href=\"#page\">page</a> *<a class=\"id\" href=\"#page\">page</a>, unsigned long <a class=\"id\" href=\"#offset\">offset</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Test whether an inode is a fast symlink.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ext4_inode_is_fast_symlink\">ext4_inode_is_fast_symlink</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ea_blocks\">ea_blocks</a> = <a class=\"id\" href=\"#EXT4_I\">EXT4_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_file_acl\">i_file_acl</a> ?", 
"<span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a> >> 9) : 0;", 
"", 
"<span class=\"ts\"/>return (<a class=\"id\" href=\"#S_ISLNK\">S_ISLNK</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>) && <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blocks\">i_blocks</a> - <a class=\"id\" href=\"#ea_blocks\">ea_blocks</a> == 0);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Work out how many blocks we need to proceed with the next chunk of a</span>", 
"<span class=\"comment\"> * truncate transaction.</span>", 
"<span class=\"comment\"> */</span>", 
"static unsigned long <a class=\"id\" href=\"#blocks_for_truncate\">blocks_for_truncate</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_lblk_t\">ext4_lblk_t</a> <a class=\"id\" href=\"#needed\">needed</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#needed\">needed</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blocks\">i_blocks</a> >> (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_blocksize_bits\">s_blocksize_bits</a> - 9);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Give ourselves just enough room to cope with inodes in which</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * i_blocks is corrupt: we've seen disk corruptions in the past</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * which resulted in random data in an inode which looked enough</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * like a regular file for ext4 to try to delete it.  Things</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * will go a bit crazy if that happens, but at least we should</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * try not to panic the whole kernel. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#needed\">needed</a> &lt; 2)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#needed\">needed</a> = 2;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* But we need to bound the transaction so we don't overflow the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * journal. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#needed\">needed</a> &gt; <a class=\"id\" href=\"#EXT4_MAX_TRANS_DATA\">EXT4_MAX_TRANS_DATA</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#needed\">needed</a> = <a class=\"id\" href=\"#EXT4_MAX_TRANS_DATA\">EXT4_MAX_TRANS_DATA</a>;", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#EXT4_DATA_TRANS_BLOCKS\">EXT4_DATA_TRANS_BLOCKS</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>) + <a class=\"id\" href=\"#needed\">needed</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Truncate transactions can be complex and absolutely huge.  So we need to</span>", 
"<span class=\"comment\"> * be able to restart the transaction at a conventient checkpoint to make</span>", 
"<span class=\"comment\"> * sure we don't overflow the journal.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * start_transaction gets us a new handle for a truncate transaction,</span>", 
"<span class=\"comment\"> * and extend_transaction tries to extend the existing one a bit.  If</span>", 
"<span class=\"comment\"> * extend fails, we need to propagate the failure up and restart the</span>", 
"<span class=\"comment\"> * transaction in the top-level truncate loop. --sct</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#start_transaction\">start_transaction</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#result\">result</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#result\">result</a> = <a class=\"id\" href=\"#ext4_journal_start\">ext4_journal_start</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#blocks_for_truncate\">blocks_for_truncate</a>(<a class=\"id\" href=\"#inode\">inode</a>));", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#result\">result</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_std_error\">ext4_std_error</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#result\">result</a>));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#result\">result</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Try to extend this transaction for the purposes of truncation.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns 0 if we managed to create more room.  If we can't create more</span>", 
"<span class=\"comment\"> * room, and the transaction must be restarted we return 1.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#try_to_extend_transaction\">try_to_extend_transaction</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ext4_handle_valid\">ext4_handle_valid</a>(<a class=\"id\" href=\"#handle\">handle</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ext4_handle_has_enough_credits\">ext4_handle_has_enough_credits</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#EXT4_RESERVE_TRANS_BLOCKS\">EXT4_RESERVE_TRANS_BLOCKS</a>+1))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ext4_journal_extend\">ext4_journal_extend</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#blocks_for_truncate\">blocks_for_truncate</a>(<a class=\"id\" href=\"#inode\">inode</a>)))", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Restart the transaction associated with *handle.  This does a commit,</span>", 
"<span class=\"comment\"> * so before we call here everything must be consistently dirtied against</span>", 
"<span class=\"comment\"> * this transaction.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ext4_truncate_restart_trans\">ext4_truncate_restart_trans</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#nblocks\">nblocks</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Drop i_data_sem to avoid deadlock with ext4_map_blocks.  At this</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * moment, get_block can be called only for blocks inside i_size since</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * page cache has been already dropped and writes are blocked by</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * i_mutex. So we can safely drop the i_data_sem here.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#BUG_ON\">BUG_ON</a>(<a class=\"id\" href=\"#EXT4_JOURNAL\">EXT4_JOURNAL</a>(<a class=\"id\" href=\"#inode\">inode</a>) == <a class=\"id\" href=\"#NULL\">NULL</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#jbd_debug\">jbd_debug</a>(2, \"restarting handle %p\\n\", <a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#EXT4_I\">EXT4_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_data_sem\">i_data_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ext4_journal_restart\">ext4_journal_restart</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#blocks_for_truncate\">blocks_for_truncate</a>(<a class=\"id\" href=\"#inode\">inode</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#EXT4_I\">EXT4_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_data_sem\">i_data_sem</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_discard_preallocations\">ext4_discard_preallocations</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Called at the last iput() if i_nlink is zero.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ext4_evict_inode\">ext4_evict_inode</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_nlink\">i_nlink</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#truncate_inode_pages\">truncate_inode_pages</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_data\">i_data</a>, 0);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_delete\">no_delete</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#is_bad_inode\">is_bad_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#dquot_initialize\">dquot_initialize</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ext4_should_order_data\">ext4_should_order_data</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_begin_ordered_truncate\">ext4_begin_ordered_truncate</a>(<a class=\"id\" href=\"#inode\">inode</a>, 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#truncate_inode_pages\">truncate_inode_pages</a>(&amp;<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_data\">i_data</a>, 0);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#is_bad_inode\">is_bad_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_delete\">no_delete</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#handle\">handle</a> = <a class=\"id\" href=\"#ext4_journal_start\">ext4_journal_start</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#blocks_for_truncate\">blocks_for_truncate</a>(<a class=\"id\" href=\"#inode\">inode</a>)+3);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_ERR\">IS_ERR</a>(<a class=\"id\" href=\"#handle\">handle</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_std_error\">ext4_std_error</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#PTR_ERR\">PTR_ERR</a>(<a class=\"id\" href=\"#handle\">handle</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If we're going to skip the normal cleanup, we still need to</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * make sure that the in-core orphan linked list is properly</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * cleaned up.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_orphan_del\">ext4_orphan_del</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_delete\">no_delete</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#IS_SYNC\">IS_SYNC</a>(<a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_handle_sync\">ext4_handle_sync</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_size\">i_size</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext4_mark_inode_dirty\">ext4_mark_inode_dirty</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_warning\">ext4_warning</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     \"couldn't mark inode dirty (err %d)\", <a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#stop_handle\">stop_handle</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_blocks\">i_blocks</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_truncate\">ext4_truncate</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * ext4_ext_truncate() doesn't reserve any slop when it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * restarts journal transactions; therefore there may not be</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * enough credits left in the handle to remove the inode from</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the orphan list and set the dtime field.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ext4_handle_has_enough_credits\">ext4_handle_has_enough_credits</a>(<a class=\"id\" href=\"#handle\">handle</a>, 3)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext4_journal_extend\">ext4_journal_extend</a>(<a class=\"id\" href=\"#handle\">handle</a>, 3);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> &gt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext4_journal_restart\">ext4_journal_restart</a>(<a class=\"id\" href=\"#handle\">handle</a>, 3);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a> != 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_warning\">ext4_warning</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     \"couldn't extend journal (err %d)\", <a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#stop_handle\">stop_handle</a>:", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_journal_stop\">ext4_journal_stop</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_orphan_del\">ext4_orphan_del</a>(<a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_delete\">no_delete</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Kill off the orphan record which ext4_truncate created.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * AKPM: I think this can be inside the above `if'.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Note that ext4_orphan_del() has to be able to cope with the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * deletion of a non-existent orphan - this is because we don't</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * know if ext4_truncate() actually created an orphan record.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (Well, we could do this if we need to, but heck - it works)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_orphan_del\">ext4_orphan_del</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#EXT4_I\">EXT4_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_dtime\">i_dtime</a><span class=\"ts\"/>= <a class=\"id\" href=\"#get_seconds\">get_seconds</a>();", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * One subtle ordering requirement: if anything has gone wrong</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * (transaction abort, IO errors, whatever), then we can still</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * do these next steps (the fs will already have been marked as</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * having errors), but we can't free the inode if the mark_dirty</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * fails.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ext4_mark_inode_dirty\">ext4_mark_inode_dirty</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* If that failed, just do the required in-core inode clear. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_clear_inode\">ext4_clear_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_free_inode\">ext4_free_inode</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_journal_stop\">ext4_journal_stop</a>(<a class=\"id\" href=\"#handle\">handle</a>);", 
"<span class=\"ts\"/>return;", 
"<a class=\"id\" href=\"#no_delete\">no_delete</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_clear_inode\">ext4_clear_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>);<span class=\"ts\"/><span class=\"comment\">/* We must guarantee clearing of inode... */</span>", 
"}", 
"", 
"typedef struct {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a><span class=\"ts\"/>*<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a><span class=\"ts\"/><a class=\"id\" href=\"#key\">key</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>;", 
"} <a class=\"id\" href=\"#Indirect\">Indirect</a>;", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#add_chain\">add_chain</a>(<a class=\"id\" href=\"#Indirect\">Indirect</a> *<a class=\"id\" href=\"#p\">p</a>, struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>, <a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#v\">v</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#key\">key</a> = *(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#v\">v</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#bh\">bh</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ext4_block_to_path - parse the block number into array of offsets</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@inode: inode in question (we are only interested in its superblock)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@i_block: block number to be parsed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@offsets: array to store the offsets in</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@boundary: set this non-zero if the referred-to block is likely to be</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>       followed (on disk) by an indirect block.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>To store the locations of file's data ext4 uses a data structure common</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>for UNIX filesystems - tree of pointers anchored in the inode, with</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>data blocks at leaves and indirect blocks in intermediate nodes.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function translates the block number into path in that tree -</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>return value is the path length and @offsets[n] is the offset of</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>pointer to (n+1)th node in the nth one. If @block is out of range</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(negative or too large) warning is printed and zero returned.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Note: function doesn't find node addresses, so no IO is needed. All</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>we need to know is the capacity of indirect blocks (taken from the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>inode-&gt;i_sb).</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Portability note: the last comparison (check that we fit into triple</span>", 
"<span class=\"comment\"> * indirect block) is spelled differently, because otherwise on an</span>", 
"<span class=\"comment\"> * architecture with 32-bit longs and 8Kb pages we might get into trouble</span>", 
"<span class=\"comment\"> * if our filesystem had 8Kb blocks. We might use long long, but that would</span>", 
"<span class=\"comment\"> * kill us on x86. Oh, well, at least the sign propagation does not matter -</span>", 
"<span class=\"comment\"> * i_block would have to be negative in the very beginning, so we would not</span>", 
"<span class=\"comment\"> * get there at all.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"static int <a class=\"id\" href=\"#ext4_block_to_path\">ext4_block_to_path</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#ext4_lblk_t\">ext4_lblk_t</a> <a class=\"id\" href=\"#i_block\">i_block</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#ext4_lblk_t\">ext4_lblk_t</a> <a class=\"id\" href=\"#offsets\">offsets</a>[4], int *<a class=\"id\" href=\"#boundary\">boundary</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ptrs\">ptrs</a> = <a class=\"id\" href=\"#EXT4_ADDR_PER_BLOCK\">EXT4_ADDR_PER_BLOCK</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>);", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ptrs_bits\">ptrs_bits</a> = <a class=\"id\" href=\"#EXT4_ADDR_PER_BLOCK_BITS\">EXT4_ADDR_PER_BLOCK_BITS</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>);", 
"<span class=\"ts\"/>const long <a class=\"id\" href=\"#direct_blocks\">direct_blocks</a> = <a class=\"id\" href=\"#EXT4_NDIR_BLOCKS\">EXT4_NDIR_BLOCKS</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#indirect_blocks\">indirect_blocks</a> = <a class=\"id\" href=\"#ptrs\">ptrs</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#double_blocks\">double_blocks</a> = (1 << (<a class=\"id\" href=\"#ptrs_bits\">ptrs_bits</a> * 2));", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#n\">n</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#final\">final</a> = 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#i_block\">i_block</a> &lt; <a class=\"id\" href=\"#direct_blocks\">direct_blocks</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offsets\">offsets</a>[<a class=\"id\" href=\"#n\">n</a>++] = <a class=\"id\" href=\"#i_block\">i_block</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#final\">final</a> = <a class=\"id\" href=\"#direct_blocks\">direct_blocks</a>;", 
"<span class=\"ts\"/>} else if ((<a class=\"id\" href=\"#i_block\">i_block</a> -= <a class=\"id\" href=\"#direct_blocks\">direct_blocks</a>) &lt; <a class=\"id\" href=\"#indirect_blocks\">indirect_blocks</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offsets\">offsets</a>[<a class=\"id\" href=\"#n\">n</a>++] = <a class=\"id\" href=\"#EXT4_IND_BLOCK\">EXT4_IND_BLOCK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offsets\">offsets</a>[<a class=\"id\" href=\"#n\">n</a>++] = <a class=\"id\" href=\"#i_block\">i_block</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#final\">final</a> = <a class=\"id\" href=\"#ptrs\">ptrs</a>;", 
"<span class=\"ts\"/>} else if ((<a class=\"id\" href=\"#i_block\">i_block</a> -= <a class=\"id\" href=\"#indirect_blocks\">indirect_blocks</a>) &lt; <a class=\"id\" href=\"#double_blocks\">double_blocks</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offsets\">offsets</a>[<a class=\"id\" href=\"#n\">n</a>++] = <a class=\"id\" href=\"#EXT4_DIND_BLOCK\">EXT4_DIND_BLOCK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offsets\">offsets</a>[<a class=\"id\" href=\"#n\">n</a>++] = <a class=\"id\" href=\"#i_block\">i_block</a> >> <a class=\"id\" href=\"#ptrs_bits\">ptrs_bits</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offsets\">offsets</a>[<a class=\"id\" href=\"#n\">n</a>++] = <a class=\"id\" href=\"#i_block\">i_block</a> &amp; (<a class=\"id\" href=\"#ptrs\">ptrs</a> - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#final\">final</a> = <a class=\"id\" href=\"#ptrs\">ptrs</a>;", 
"<span class=\"ts\"/>} else if (((<a class=\"id\" href=\"#i_block\">i_block</a> -= <a class=\"id\" href=\"#double_blocks\">double_blocks</a>) >> (<a class=\"id\" href=\"#ptrs_bits\">ptrs_bits</a> * 2)) &lt; <a class=\"id\" href=\"#ptrs\">ptrs</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offsets\">offsets</a>[<a class=\"id\" href=\"#n\">n</a>++] = <a class=\"id\" href=\"#EXT4_TIND_BLOCK\">EXT4_TIND_BLOCK</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offsets\">offsets</a>[<a class=\"id\" href=\"#n\">n</a>++] = <a class=\"id\" href=\"#i_block\">i_block</a> >> (<a class=\"id\" href=\"#ptrs_bits\">ptrs_bits</a> * 2);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offsets\">offsets</a>[<a class=\"id\" href=\"#n\">n</a>++] = (<a class=\"id\" href=\"#i_block\">i_block</a> >> <a class=\"id\" href=\"#ptrs_bits\">ptrs_bits</a>) &amp; (<a class=\"id\" href=\"#ptrs\">ptrs</a> - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#offsets\">offsets</a>[<a class=\"id\" href=\"#n\">n</a>++] = <a class=\"id\" href=\"#i_block\">i_block</a> &amp; (<a class=\"id\" href=\"#ptrs\">ptrs</a> - 1);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#final\">final</a> = <a class=\"id\" href=\"#ptrs\">ptrs</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_warning\">ext4_warning</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, \"block %lu > max in inode %lu\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#i_block\">i_block</a> + <a class=\"id\" href=\"#direct_blocks\">direct_blocks</a> +", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#indirect_blocks\">indirect_blocks</a> + <a class=\"id\" href=\"#double_blocks\">double_blocks</a>, <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_ino\">i_ino</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#boundary\">boundary</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#boundary\">boundary</a> = <a class=\"id\" href=\"#final\">final</a> - 1 - (<a class=\"id\" href=\"#i_block\">i_block</a> &amp; (<a class=\"id\" href=\"#ptrs\">ptrs</a> - 1));", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#n\">n</a>;", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__ext4_check_blockref\">__ext4_check_blockref</a>(const char *<a class=\"id\" href=\"#function\">function</a>, unsigned int <a class=\"id\" href=\"#line\">line</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#p\">p</a>, unsigned int <a class=\"id\" href=\"#max\">max</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_super_block\">ext4_super_block</a> *<a class=\"id\" href=\"#es\">es</a> = <a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>)-><a class=\"id\" href=\"#s_es\">s_es</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#bref\">bref</a> = <a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#blk\">blk</a>;", 
"", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#bref\">bref</a> &lt; <a class=\"id\" href=\"#p\">p</a>+<a class=\"id\" href=\"#max\">max</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk\">blk</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(*<a class=\"id\" href=\"#bref\">bref</a>++);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#blk\">blk</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#ext4_data_block_valid\">ext4_data_block_valid</a>(<a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>    <a class=\"id\" href=\"#blk\">blk</a>, 1))) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#es\">es</a>-><a class=\"id\" href=\"#s_last_error_block\">s_last_error_block</a> = <a class=\"id\" href=\"#cpu_to_le64\">cpu_to_le64</a>(<a class=\"id\" href=\"#blk\">blk</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_error_inode\">ext4_error_inode</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#function\">function</a>, <a class=\"id\" href=\"#line\">line</a>, <a class=\"id\" href=\"#blk\">blk</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"invalid block\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ext4_check_indirect_blockref\">ext4_check_indirect_blockref</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#bh\">bh</a>)                         \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ext4_check_blockref\">__ext4_check_blockref</a>(<a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#__LINE__\">__LINE__</a>, <a class=\"id\" href=\"#inode\">inode</a>,<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      (<a class=\"id\" href=\"#__le32\">__le32</a> *)(<a class=\"id\" href=\"#bh\">bh</a>)-><a class=\"id\" href=\"#b_data\">b_data</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#EXT4_ADDR_PER_BLOCK\">EXT4_ADDR_PER_BLOCK</a>((<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_sb\">i_sb</a>))", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ext4_check_inode_blockref\">ext4_check_inode_blockref</a>(<a class=\"id\" href=\"#inode\">inode</a>)                                \\", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__ext4_check_blockref\">__ext4_check_blockref</a>(<a class=\"id\" href=\"#__func__\">__func__</a>, <a class=\"id\" href=\"#__LINE__\">__LINE__</a>, <a class=\"id\" href=\"#inode\">inode</a>,<span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#EXT4_I\">EXT4_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_data\">i_data</a>,<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\\", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#EXT4_NDIR_BLOCKS\">EXT4_NDIR_BLOCKS</a>)", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ext4_get_branch - read the chain of indirect blocks leading to data</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@inode: inode in question</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@depth: depth of the chain (1 - direct pointer, etc.)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@offsets: offsets of pointers in inode/indirect blocks</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@chain: place to store the result</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@err: here we store the error value</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Function fills the array of triples &lt;key, p, bh&gt; and returns %NULL</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>if everything went OK or the pointer to the last filled triple</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>(incomplete one) otherwise. Upon the return chain[i].key contains</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the number of (i+1)-th block in the chain (as it is stored in memory,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>i.e. little-endian 32-bit), chain[i].p contains the address of that</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>number (it points into struct inode for i==0 and into the bh-&gt;b_data</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>for i&gt;0) and chain[i].bh points to the buffer_head of i-th indirect</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>block for i&gt;0 and NULL for i==0. In other words, it holds the block</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>numbers of the chain, addresses they were taken from (and where we can</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>verify that chain did not change) and buffer_heads hosting these</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>numbers.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Function stops when it stumbles upon zero pointer (absent block)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>(pointer to last triple returned, *@err == 0)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>or when it gets an IO error reading an indirect block</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>(ditto, *@err == -EIO)</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>or when it reads all @depth-1 indirect blocks successfully and finds</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the whole chain, all way to the data (returns %NULL, *err == 0).</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *      Need to be called with</span>", 
"<span class=\"comment\"> *      down_read(&amp;EXT4_I(inode)-&gt;i_data_sem)</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#Indirect\">Indirect</a> *<a class=\"id\" href=\"#ext4_get_branch\">ext4_get_branch</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, int <a class=\"id\" href=\"#depth\">depth</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#ext4_lblk_t\">ext4_lblk_t</a>  *<a class=\"id\" href=\"#offsets\">offsets</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#Indirect\">Indirect</a> <a class=\"id\" href=\"#chain\">chain</a>[4], int *<a class=\"id\" href=\"#err\">err</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#super_block\">super_block</a> *<a class=\"id\" href=\"#sb\">sb</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Indirect\">Indirect</a> *<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#chain\">chain</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>;", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><span class=\"comment\">/* i_data is not going away, no lock needed */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#add_chain\">add_chain</a>(<a class=\"id\" href=\"#chain\">chain</a>, <a class=\"id\" href=\"#NULL\">NULL</a>, <a class=\"id\" href=\"#EXT4_I\">EXT4_I</a>(<a class=\"id\" href=\"#inode\">inode</a>)-><a class=\"id\" href=\"#i_data\">i_data</a> + *<a class=\"id\" href=\"#offsets\">offsets</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#key\">key</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_block\">no_block</a>;", 
"<span class=\"ts\"/>while (--<a class=\"id\" href=\"#depth\">depth</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#sb_getblk\">sb_getblk</a>(<a class=\"id\" href=\"#sb\">sb</a>, <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#key\">key</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(!<a class=\"id\" href=\"#bh\">bh</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#failure\">failure</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#bh_uptodate_or_lock\">bh_uptodate_or_lock</a>(<a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#bh_submit_read\">bh_submit_read</a>(<a class=\"id\" href=\"#bh\">bh</a>) &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_bh\">put_bh</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#failure\">failure</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* validate block references */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ext4_check_indirect_blockref\">ext4_check_indirect_blockref</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#bh\">bh</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#put_bh\">put_bh</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#failure\">failure</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#add_chain\">add_chain</a>(++<a class=\"id\" href=\"#p\">p</a>, <a class=\"id\" href=\"#bh\">bh</a>, (<a class=\"id\" href=\"#__le32\">__le32</a> *)<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a> + *++<a class=\"id\" href=\"#offsets\">offsets</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Reader: end */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#p\">p</a>-><a class=\"id\" href=\"#key\">key</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#no_block\">no_block</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"", 
"<a class=\"id\" href=\"#failure\">failure</a>:", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<a class=\"id\" href=\"#no_block\">no_block</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#p\">p</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ext4_find_near - find a place for allocation with sufficient locality</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@inode: owner</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@ind: descriptor of indirect block.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function returns the preferred place for block allocation.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>It is used when heuristic for sequential allocation fails.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Rules are:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>  + if there is a block to the left of our position - allocate near it.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>  + if pointer will live in indirect block - allocate near that block.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>  + if pointer will live in inode - allocate in the same</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>    cylinder group.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * In the latter case we colour the starting block by the callers PID to</span>", 
"<span class=\"comment\"> * prevent it from clashing with concurrent allocations for a different inode</span>", 
"<span class=\"comment\"> * in the same block group.   The PID is used here so that functionally related</span>", 
"<span class=\"comment\"> * files will be close-by on-disk.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Caller must make sure that @ind is valid and will stay that way.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#ext4_find_near\">ext4_find_near</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#Indirect\">Indirect</a> *<a class=\"id\" href=\"#ind\">ind</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_inode_info\">ext4_inode_info</a> *<a class=\"id\" href=\"#ei\">ei</a> = <a class=\"id\" href=\"#EXT4_I\">EXT4_I</a>(<a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#start\">start</a> = <a class=\"id\" href=\"#ind\">ind</a>-><a class=\"id\" href=\"#bh\">bh</a> ? (<a class=\"id\" href=\"#__le32\">__le32</a> *) <a class=\"id\" href=\"#ind\">ind</a>-><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a> : <a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_data\">i_data</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__le32\">__le32</a> *<a class=\"id\" href=\"#p\">p</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#bg_start\">bg_start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#last_block\">last_block</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_grpblk_t\">ext4_grpblk_t</a> <a class=\"id\" href=\"#colour\">colour</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_group_t\">ext4_group_t</a> <a class=\"id\" href=\"#block_group\">block_group</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#flex_size\">flex_size</a> = <a class=\"id\" href=\"#ext4_flex_bg_size\">ext4_flex_bg_size</a>(<a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>));", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Try to find previous block */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#ind\">ind</a>-><a class=\"id\" href=\"#p\">p</a> - 1; <a class=\"id\" href=\"#p\">p</a> >= <a class=\"id\" href=\"#start\">start</a>; <a class=\"id\" href=\"#p\">p</a>--) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#p\">p</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(*<a class=\"id\" href=\"#p\">p</a>);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* No such thing, so let's try location of indirect block */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ind\">ind</a>-><a class=\"id\" href=\"#bh\">bh</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#ind\">ind</a>-><a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_blocknr\">b_blocknr</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * It is going to be referred to from the inode itself? OK, just put it</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * into the same cylinder group then.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#block_group\">block_group</a> = <a class=\"id\" href=\"#ei\">ei</a>-><a class=\"id\" href=\"#i_block_group\">i_block_group</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#flex_size\">flex_size</a> >= <a class=\"id\" href=\"#EXT4_FLEX_SIZE_DIR_ALLOC_SCHEME\">EXT4_FLEX_SIZE_DIR_ALLOC_SCHEME</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_group\">block_group</a> &= ~(<a class=\"id\" href=\"#flex_size\">flex_size</a>-1);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISREG\">S_ISREG</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#block_group\">block_group</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#bg_start\">bg_start</a> = <a class=\"id\" href=\"#ext4_group_first_block_no\">ext4_group_first_block_no</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#block_group\">block_group</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#last_block\">last_block</a> = <a class=\"id\" href=\"#ext4_blocks_count\">ext4_blocks_count</a>(<a class=\"id\" href=\"#EXT4_SB\">EXT4_SB</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>)-><a class=\"id\" href=\"#s_es\">s_es</a>) - 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we are doing delayed allocation, we don't need take</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * colour into account.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#test_opt\">test_opt</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#DELALLOC\">DELALLOC</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#bg_start\">bg_start</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#bg_start\">bg_start</a> + <a class=\"id\" href=\"#EXT4_BLOCKS_PER_GROUP\">EXT4_BLOCKS_PER_GROUP</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>) <= <a class=\"id\" href=\"#last_block\">last_block</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#colour\">colour</a> = (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pid\">pid</a> % 16) *", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>(<a class=\"id\" href=\"#EXT4_BLOCKS_PER_GROUP\">EXT4_BLOCKS_PER_GROUP</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>) / 16);", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#colour\">colour</a> = (<a class=\"id\" href=\"#current\">current</a>-><a class=\"id\" href=\"#pid\">pid</a> % 16) * ((<a class=\"id\" href=\"#last_block\">last_block</a> - <a class=\"id\" href=\"#bg_start\">bg_start</a>) / 16);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#bg_start\">bg_start</a> + <a class=\"id\" href=\"#colour\">colour</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ext4_find_goal - find a preferred place for allocation.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@inode: owner</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@block:  block we want</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@partial: pointer to the last triple within a chain</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Normally this function find the preferred place for block allocation,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>returns it.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>Because this is only used for non-extent files, we limit the block nr</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>to 32 bits.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#ext4_find_goal\">ext4_find_goal</a>(struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#ext4_lblk_t\">ext4_lblk_t</a> <a class=\"id\" href=\"#block\">block</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   <a class=\"id\" href=\"#Indirect\">Indirect</a> *<a class=\"id\" href=\"#partial\">partial</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#goal\">goal</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * XXX need to get goal block from mballoc's data structures</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#goal\">goal</a> = <a class=\"id\" href=\"#ext4_find_near\">ext4_find_near</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#partial\">partial</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#goal\">goal</a> = <a class=\"id\" href=\"#goal\">goal</a> &amp; <a class=\"id\" href=\"#EXT4_MAX_BLOCK_FILE_PHYS\">EXT4_MAX_BLOCK_FILE_PHYS</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#goal\">goal</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ext4_blks_to_allocate: Look up the block map and count the number</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>of direct blocks need to be allocated for the given branch.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@branch: chain of indirect blocks</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@k: number of blocks need for indirect blocks</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@blks: number of data blocks to be mapped.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@blocks_to_boundary:  the offset in the indirect block</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>return the total number of blocks to be allocate, including the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>direct and indirect blocks.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ext4_blks_to_allocate\">ext4_blks_to_allocate</a>(<a class=\"id\" href=\"#Indirect\">Indirect</a> *<a class=\"id\" href=\"#branch\">branch</a>, int <a class=\"id\" href=\"#k\">k</a>, unsigned int <a class=\"id\" href=\"#blks\">blks</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> int <a class=\"id\" href=\"#blocks_to_boundary\">blocks_to_boundary</a>)", 
"{", 
"<span class=\"ts\"/>unsigned int <a class=\"id\" href=\"#count\">count</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Simple case, [t,d]Indirect block(s) has not allocated yet</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * then it's clear blocks on that path have not allocated</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#k\">k</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* right now we don't handle cross boundary allocation */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#blks\">blks</a> &lt; <a class=\"id\" href=\"#blocks_to_boundary\">blocks_to_boundary</a> + 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> += <a class=\"id\" href=\"#blks\">blks</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> += <a class=\"id\" href=\"#blocks_to_boundary\">blocks_to_boundary</a> + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#count\">count</a> &lt; <a class=\"id\" href=\"#blks\">blks</a> && <a class=\"id\" href=\"#count\">count</a> <= <a class=\"id\" href=\"#blocks_to_boundary\">blocks_to_boundary</a> &&", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(*(<a class=\"id\" href=\"#branch\">branch</a>[0].<a class=\"id\" href=\"#p\">p</a> + <a class=\"id\" href=\"#count\">count</a>)) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#count\">count</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ext4_alloc_blocks: multiple allocate blocks needed for a branch</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@indirect_blks: the number of blocks need to allocate for indirect</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>blocks</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@new_blocks: on return it will store the new block numbers for</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the indirect blocks(if needed) and the first direct block,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@blks:<span class=\"ts\"/>on return it will store the total number of allocated</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/><span class=\"ts\"/>direct blocks</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ext4_alloc_blocks\">ext4_alloc_blocks</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#ext4_lblk_t\">ext4_lblk_t</a> <a class=\"id\" href=\"#iblock\">iblock</a>, <a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#goal\">goal</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int <a class=\"id\" href=\"#indirect_blks\">indirect_blks</a>, int <a class=\"id\" href=\"#blks\">blks</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#new_blocks\">new_blocks</a>[4], int *<a class=\"id\" href=\"#err\">err</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ext4_allocation_request\">ext4_allocation_request</a> <a class=\"id\" href=\"#ar\">ar</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#target\">target</a>, <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#count\">count</a> = 0, <a class=\"id\" href=\"#blk_allocated\">blk_allocated</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#index\">index</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#current_block\">current_block</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Here we try to allocate the requested multiple blocks at once,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * on a best-effort basis.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * To build a branch, we should allocate blocks for</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the indirect blocks(if not allocated yet), and at least</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * the first direct block of this branch.  That's the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * minimum number of blocks need to allocate(required)</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* first we try to allocate the indirect blocks */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#target\">target</a> = <a class=\"id\" href=\"#indirect_blks\">indirect_blks</a>;", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#target\">target</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#target\">target</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* allocating blocks for indirect blocks and direct blocks */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current_block\">current_block</a> = <a class=\"id\" href=\"#ext4_new_meta_blocks\">ext4_new_meta_blocks</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#goal\">goal</a>, &amp;<a class=\"id\" href=\"#count\">count</a>, <a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#failed_out\">failed_out</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#current_block\">current_block</a> + <a class=\"id\" href=\"#count\">count</a> &gt; <a class=\"id\" href=\"#EXT4_MAX_BLOCK_FILE_PHYS\">EXT4_MAX_BLOCK_FILE_PHYS</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT4_ERROR_INODE\">EXT4_ERROR_INODE</a>(<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"current_block %llu + count %lu > %d!\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#current_block\">current_block</a>, <a class=\"id\" href=\"#count\">count</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#EXT4_MAX_BLOCK_FILE_PHYS\">EXT4_MAX_BLOCK_FILE_PHYS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#failed_out\">failed_out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#target\">target</a> -= <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* allocate blocks for indirect blocks */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#index\">index</a> &lt; <a class=\"id\" href=\"#indirect_blks\">indirect_blks</a> && <a class=\"id\" href=\"#count\">count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_blocks\">new_blocks</a>[<a class=\"id\" href=\"#index\">index</a>++] = <a class=\"id\" href=\"#current_block\">current_block</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#count\">count</a> &gt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * save the new block number</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * for the first direct block</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_blocks\">new_blocks</a>[<a class=\"id\" href=\"#index\">index</a>] = <a class=\"id\" href=\"#current_block\">current_block</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"%s returned more blocks than \"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"requested\\n\", <a class=\"id\" href=\"#__func__\">__func__</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON\">WARN_ON</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#target\">target</a> = <a class=\"id\" href=\"#blks\">blks</a> - <a class=\"id\" href=\"#count\">count</a> ;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#blk_allocated\">blk_allocated</a> = <a class=\"id\" href=\"#count\">count</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#target\">target</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#allocated\">allocated</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* Now allocate data blocks */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#ar\">ar</a>, 0, sizeof(<a class=\"id\" href=\"#ar\">ar</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ar\">ar</a>.<a class=\"id\" href=\"#inode\">inode</a> = <a class=\"id\" href=\"#inode\">inode</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ar\">ar</a>.<a class=\"id\" href=\"#goal\">goal</a> = <a class=\"id\" href=\"#goal\">goal</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ar\">ar</a>.<a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#target\">target</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ar\">ar</a>.<a class=\"id\" href=\"#logical\">logical</a> = <a class=\"id\" href=\"#iblock\">iblock</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#S_ISREG\">S_ISREG</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_mode\">i_mode</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* enable in-core preallocation only for regular files */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ar\">ar</a>.<a class=\"id\" href=\"#flags\">flags</a> = <a class=\"id\" href=\"#EXT4_MB_HINT_DATA\">EXT4_MB_HINT_DATA</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#current_block\">current_block</a> = <a class=\"id\" href=\"#ext4_mb_new_blocks\">ext4_mb_new_blocks</a>(<a class=\"id\" href=\"#handle\">handle</a>, &amp;<a class=\"id\" href=\"#ar\">ar</a>, <a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#unlikely\">unlikely</a>(<a class=\"id\" href=\"#current_block\">current_block</a> + <a class=\"id\" href=\"#ar\">ar</a>.<a class=\"id\" href=\"#len\">len</a> &gt; <a class=\"id\" href=\"#EXT4_MAX_BLOCK_FILE_PHYS\">EXT4_MAX_BLOCK_FILE_PHYS</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#EXT4_ERROR_INODE\">EXT4_ERROR_INODE</a>(<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> \"current_block %llu + ar.len %d > %d!\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#current_block\">current_block</a>, <a class=\"id\" href=\"#ar\">ar</a>.<a class=\"id\" href=\"#len\">len</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#EXT4_MAX_BLOCK_FILE_PHYS\">EXT4_MAX_BLOCK_FILE_PHYS</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#failed_out\">failed_out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#err\">err</a> && (<a class=\"id\" href=\"#target\">target</a> == <a class=\"id\" href=\"#blks\">blks</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * if the allocation failed and we didn't allocate</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * any blocks before</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#failed_out\">failed_out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>if (!*<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#target\">target</a> == <a class=\"id\" href=\"#blks\">blks</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * save the new block number</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * for the first direct block</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#new_blocks\">new_blocks</a>[<a class=\"id\" href=\"#index\">index</a>] = <a class=\"id\" href=\"#current_block\">current_block</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk_allocated\">blk_allocated</a> += <a class=\"id\" href=\"#ar\">ar</a>.<a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#allocated\">allocated</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* total number of blocks allocated for direct blocks */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#blk_allocated\">blk_allocated</a>;", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"<a class=\"id\" href=\"#failed_out\">failed_out</a>:", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 0; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#index\">index</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_free_blocks\">ext4_free_blocks</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, 0, <a class=\"id\" href=\"#new_blocks\">new_blocks</a>[<a class=\"id\" href=\"#i\">i</a>], 1, 0);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ext4_alloc_branch - allocate and set up a chain of blocks.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@inode: owner</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@indirect_blks: number of allocated indirect blocks</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@blks: number of allocated direct blocks</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@offsets: offsets (in the blocks) to store the pointers to next.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>@branch: place to store the chain in.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>This function allocates blocks, zeroes out all but the last one,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>links them into chain and (if we are synchronous) writes them to disk.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>In other words, it prepares a branch that can be spliced onto the</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>inode. It stores the information about that chain in the branch[], in</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>the same format as ext4_get_branch() would do. We are calling it after</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>we had read the existing part of chain and partial points to the last</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>triple of that (one with zero -&gt;key). Upon the exit we have the same</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>picture as after the successful ext4_get_block(), except that in one</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>place chain is disconnected - *branch-&gt;p is still zero (we did not</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>set the last link), but branch-&gt;key contains the number that should</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>be placed into *branch-&gt;p to fill that gap.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>If allocation fails we free all blocks we've allocated (and forget</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>their buffer_heads) and return the error value the from failed</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ext4_alloc_block() (normally -ENOSPC). Otherwise we set the chain</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>as described above and return 0.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ext4_alloc_branch\">ext4_alloc_branch</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#ext4_lblk_t\">ext4_lblk_t</a> <a class=\"id\" href=\"#iblock\">iblock</a>, int <a class=\"id\" href=\"#indirect_blks\">indirect_blks</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     int *<a class=\"id\" href=\"#blks\">blks</a>, <a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#goal\">goal</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>     <a class=\"id\" href=\"#ext4_lblk_t\">ext4_lblk_t</a> *<a class=\"id\" href=\"#offsets\">offsets</a>, <a class=\"id\" href=\"#Indirect\">Indirect</a> *<a class=\"id\" href=\"#branch\">branch</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#blocksize\">blocksize</a> = <a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>-><a class=\"id\" href=\"#s_blocksize\">s_blocksize</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>, <a class=\"id\" href=\"#n\">n</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#buffer_head\">buffer_head</a> *<a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#new_blocks\">new_blocks</a>[4];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#current_block\">current_block</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#num\">num</a> = <a class=\"id\" href=\"#ext4_alloc_blocks\">ext4_alloc_blocks</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#iblock\">iblock</a>, <a class=\"id\" href=\"#goal\">goal</a>, <a class=\"id\" href=\"#indirect_blks\">indirect_blks</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#blks\">blks</a>, <a class=\"id\" href=\"#new_blocks\">new_blocks</a>, &amp;<a class=\"id\" href=\"#err\">err</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#branch\">branch</a>[0].<a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#cpu_to_le32\">cpu_to_le32</a>(<a class=\"id\" href=\"#new_blocks\">new_blocks</a>[0]);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * metadata blocks and data blocks are allocated.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#n\">n</a> = 1; <a class=\"id\" href=\"#n\">n</a> <= <a class=\"id\" href=\"#indirect_blks\">indirect_blks</a>;  <a class=\"id\" href=\"#n\">n</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Get buffer_head for parent block, zero it out</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and set the pointer to new one, then send</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * parent to disk.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#sb_getblk\">sb_getblk</a>(<a class=\"id\" href=\"#inode\">inode</a>-><a class=\"id\" href=\"#i_sb\">i_sb</a>, <a class=\"id\" href=\"#new_blocks\">new_blocks</a>[<a class=\"id\" href=\"#n\">n</a>-1]);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#branch\">branch</a>[<a class=\"id\" href=\"#n\">n</a>].<a class=\"id\" href=\"#bh\">bh</a> = <a class=\"id\" href=\"#bh\">bh</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#lock_buffer\">lock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh\">bh</a>, \"call get_create_access\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext4_journal_get_create_access\">ext4_journal_get_create_access</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Don't brelse(bh) here; it's done in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * ext4_journal_forget() below */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_buffer\">unlock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#failed\">failed</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a>, 0, <a class=\"id\" href=\"#blocksize\">blocksize</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#branch\">branch</a>[<a class=\"id\" href=\"#n\">n</a>].<a class=\"id\" href=\"#p\">p</a> = (<a class=\"id\" href=\"#__le32\">__le32</a> *) <a class=\"id\" href=\"#bh\">bh</a>-><a class=\"id\" href=\"#b_data\">b_data</a> + <a class=\"id\" href=\"#offsets\">offsets</a>[<a class=\"id\" href=\"#n\">n</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#branch\">branch</a>[<a class=\"id\" href=\"#n\">n</a>].<a class=\"id\" href=\"#key\">key</a> = <a class=\"id\" href=\"#cpu_to_le32\">cpu_to_le32</a>(<a class=\"id\" href=\"#new_blocks\">new_blocks</a>[<a class=\"id\" href=\"#n\">n</a>]);", 
"<span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#branch\">branch</a>[<a class=\"id\" href=\"#n\">n</a>].<a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#branch\">branch</a>[<a class=\"id\" href=\"#n\">n</a>].<a class=\"id\" href=\"#key\">key</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#n\">n</a> == <a class=\"id\" href=\"#indirect_blks\">indirect_blks</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current_block\">current_block</a> = <a class=\"id\" href=\"#new_blocks\">new_blocks</a>[<a class=\"id\" href=\"#n\">n</a>];", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * End of chain, update the last new metablock of</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * the chain to point to the new allocated</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> * data blocks numbers</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#num\">num</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*(<a class=\"id\" href=\"#branch\">branch</a>[<a class=\"id\" href=\"#n\">n</a>].<a class=\"id\" href=\"#p\">p</a> + <a class=\"id\" href=\"#i\">i</a>) = <a class=\"id\" href=\"#cpu_to_le32\">cpu_to_le32</a>(++<a class=\"id\" href=\"#current_block\">current_block</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh\">bh</a>, \"marking uptodate\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#set_buffer_uptodate\">set_buffer_uptodate</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#unlock_buffer\">unlock_buffer</a>(<a class=\"id\" href=\"#bh\">bh</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#bh\">bh</a>, \"call ext4_handle_dirty_metadata\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext4_handle_dirty_metadata\">ext4_handle_dirty_metadata</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#failed\">failed</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#blks\">blks</a> = <a class=\"id\" href=\"#num\">num</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"<a class=\"id\" href=\"#failed\">failed</a>:", 
"<span class=\"ts\"/><span class=\"comment\">/* Allocation failed, free what we already allocated */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_free_blocks\">ext4_free_blocks</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, 0, <a class=\"id\" href=\"#new_blocks\">new_blocks</a>[0], 1, 0);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> <= <a class=\"id\" href=\"#n\">n</a> ; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * branch[i].bh is newly allocated, so there is no</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * need to revoke the block, which is why we don't</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * need to set EXT4_FREE_BLOCKS_METADATA.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_free_blocks\">ext4_free_blocks</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, 0, <a class=\"id\" href=\"#new_blocks\">new_blocks</a>[<a class=\"id\" href=\"#i\">i</a>], 1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#EXT4_FREE_BLOCKS_FORGET\">EXT4_FREE_BLOCKS_FORGET</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = <a class=\"id\" href=\"#n\">n</a>+1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#indirect_blks\">indirect_blks</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_free_blocks\">ext4_free_blocks</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, 0, <a class=\"id\" href=\"#new_blocks\">new_blocks</a>[<a class=\"id\" href=\"#i\">i</a>], 1, 0);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_free_blocks\">ext4_free_blocks</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, 0, <a class=\"id\" href=\"#new_blocks\">new_blocks</a>[<a class=\"id\" href=\"#i\">i</a>], <a class=\"id\" href=\"#num\">num</a>, 0);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ext4_splice_branch - splice the allocated branch onto inode.</span>", 
"<span class=\"comment\"> * @inode: owner</span>", 
"<span class=\"comment\"> * @block: (logical) number of block we are adding</span>", 
"<span class=\"comment\"> * @chain: chain of indirect blocks (with a missing link - see</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>ext4_alloc_branch)</span>", 
"<span class=\"comment\"> * @where: location of missing link</span>", 
"<span class=\"comment\"> * @num:   number of indirect blocks we are adding</span>", 
"<span class=\"comment\"> * @blks:  number of direct blocks we are adding</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function fills the missing link and does all housekeeping needed in</span>", 
"<span class=\"comment\"> * inode (-&gt;i_blocks, etc.). In case of success we end up with the full</span>", 
"<span class=\"comment\"> * chain to new block and return 0.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ext4_splice_branch\">ext4_splice_branch</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#ext4_lblk_t\">ext4_lblk_t</a> <a class=\"id\" href=\"#block\">block</a>, <a class=\"id\" href=\"#Indirect\">Indirect</a> *<a class=\"id\" href=\"#where\">where</a>, int <a class=\"id\" href=\"#num\">num</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      int <a class=\"id\" href=\"#blks\">blks</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#i\">i</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#current_block\">current_block</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * If we're splicing into a [td]indirect block (as opposed to the</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * inode) then we need to get write access to the [td]indirect block</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * before the splice.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#where\">where</a>-><a class=\"id\" href=\"#bh\">bh</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#where\">where</a>-><a class=\"id\" href=\"#bh\">bh</a>, \"get_write_access\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext4_journal_get_write_access\">ext4_journal_get_write_access</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#where\">where</a>-><a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"comment\">/* That's it */</span>", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#where\">where</a>-><a class=\"id\" href=\"#p\">p</a> = <a class=\"id\" href=\"#where\">where</a>-><a class=\"id\" href=\"#key\">key</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Update the host buffer_head or inode to point to more just allocated</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * direct blocks blocks</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#num\">num</a> == 0 && <a class=\"id\" href=\"#blks\">blks</a> &gt; 1) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current_block\">current_block</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#where\">where</a>-><a class=\"id\" href=\"#key\">key</a>) + 1;", 
"<span class=\"ts\"/><span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> &lt; <a class=\"id\" href=\"#blks\">blks</a>; <a class=\"id\" href=\"#i\">i</a>++)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*(<a class=\"id\" href=\"#where\">where</a>-><a class=\"id\" href=\"#p\">p</a> + <a class=\"id\" href=\"#i\">i</a>) = <a class=\"id\" href=\"#cpu_to_le32\">cpu_to_le32</a>(<a class=\"id\" href=\"#current_block\">current_block</a>++);", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We are done with atomic stuff, now do the rest of housekeeping */</span>", 
"<span class=\"ts\"/><span class=\"comment\">/* had we spliced it onto indirect block? */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#where\">where</a>-><a class=\"id\" href=\"#bh\">bh</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If we spliced it onto an indirect block, we haven't</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * altered the inode.  Note however that if it is being spliced</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * onto an indirect block at the very end of the file (the</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * file is growing) then we *will* alter the inode to reflect</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the new i_size.  But that is not done here - it is done in</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * generic_commit_write-&gt;__mark_inode_dirty-&gt;ext4_dirty_inode.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_debug\">jbd_debug</a>(5, \"splicing indirect only\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#BUFFER_TRACE\">BUFFER_TRACE</a>(<a class=\"id\" href=\"#where\">where</a>-><a class=\"id\" href=\"#bh\">bh</a>, \"call ext4_handle_dirty_metadata\");", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#err\">err</a> = <a class=\"id\" href=\"#ext4_handle_dirty_metadata\">ext4_handle_dirty_metadata</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#where\">where</a>-><a class=\"id\" href=\"#bh\">bh</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#err\">err</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#err_out\">err_out</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * OK, we spliced it into the inode itself on a direct block.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_mark_inode_dirty\">ext4_mark_inode_dirty</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#jbd_debug\">jbd_debug</a>(5, \"splicing direct\\n\");", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"", 
"<a class=\"id\" href=\"#err_out\">err_out</a>:", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#i\">i</a> = 1; <a class=\"id\" href=\"#i\">i</a> <= <a class=\"id\" href=\"#num\">num</a>; <a class=\"id\" href=\"#i\">i</a>++) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * branch[i].bh is newly allocated, so there is no</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * need to revoke the block, which is why we don't</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * need to set EXT4_FREE_BLOCKS_METADATA.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_free_blocks\">ext4_free_blocks</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#where\">where</a>[<a class=\"id\" href=\"#i\">i</a>].<a class=\"id\" href=\"#bh\">bh</a>, 0, 1,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#EXT4_FREE_BLOCKS_FORGET\">EXT4_FREE_BLOCKS_FORGET</a>);", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_free_blocks\">ext4_free_blocks</a>(<a class=\"id\" href=\"#handle\">handle</a>, <a class=\"id\" href=\"#inode\">inode</a>, 0, <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#where\">where</a>[<a class=\"id\" href=\"#num\">num</a>].<a class=\"id\" href=\"#key\">key</a>),", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> <a class=\"id\" href=\"#blks\">blks</a>, 0);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#err\">err</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The ext4_ind_map_blocks() function handles non-extents inodes</span>", 
"<span class=\"comment\"> * (i.e., using the traditional indirect/double-indirect i_blocks</span>", 
"<span class=\"comment\"> * scheme) for ext4_map_blocks().</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Allocation strategy is simple: if we have to allocate something, we will</span>", 
"<span class=\"comment\"> * have to go the whole way to leaf. So let's do it before attaching anything</span>", 
"<span class=\"comment\"> * to tree, set linkage between the newborn blocks, write them if sync is</span>", 
"<span class=\"comment\"> * required, recheck the path, free and repeat if check fails, otherwise</span>", 
"<span class=\"comment\"> * set the last missing link (that will protect us from any truncate-generated</span>", 
"<span class=\"comment\"> * removals - all blocks on the path are immune now) and possibly force the</span>", 
"<span class=\"comment\"> * write on the parent block.</span>", 
"<span class=\"comment\"> * That has a nice additional property: no special recovery from the failed</span>", 
"<span class=\"comment\"> * allocations is needed - we simply release blocks and do not touch anything</span>", 
"<span class=\"comment\"> * reachable from inode.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * `handle' can be NULL if create == 0.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * return &gt; 0, # of blocks mapped or allocated.</span>", 
"<span class=\"comment\"> * return = 0, if plain lookup failed.</span>", 
"<span class=\"comment\"> * return &lt; 0, error case.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The ext4_ind_get_blocks() function should be called with</span>", 
"<span class=\"comment\"> * down_write(&amp;EXT4_I(inode)-&gt;i_data_sem) if allocating filesystem</span>", 
"<span class=\"comment\"> * blocks (i.e., flags has EXT4_GET_BLOCKS_CREATE set) or</span>", 
"<span class=\"comment\"> * down_read(&amp;EXT4_I(inode)-&gt;i_data_sem) if not allocating file system</span>", 
"<span class=\"comment\"> * blocks.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#ext4_ind_map_blocks\">ext4_ind_map_blocks</a>(<a class=\"id\" href=\"#handle_t\">handle_t</a> *<a class=\"id\" href=\"#handle\">handle</a>, struct <a class=\"id\" href=\"#inode\">inode</a> *<a class=\"id\" href=\"#inode\">inode</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       struct <a class=\"id\" href=\"#ext4_map_blocks\">ext4_map_blocks</a> *<a class=\"id\" href=\"#map\">map</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>       int <a class=\"id\" href=\"#flags\">flags</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#err\">err</a> = -<a class=\"id\" href=\"#EIO\">EIO</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_lblk_t\">ext4_lblk_t</a> <a class=\"id\" href=\"#offsets\">offsets</a>[4];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Indirect\">Indirect</a> <a class=\"id\" href=\"#chain\">chain</a>[4];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#Indirect\">Indirect</a> *<a class=\"id\" href=\"#partial\">partial</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#goal\">goal</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#indirect_blks\">indirect_blks</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#blocks_to_boundary\">blocks_to_boundary</a> = 0;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#depth\">depth</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#count\">count</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#first_block\">first_block</a> = 0;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT\">J_ASSERT</a>(!(<a class=\"id\" href=\"#ext4_test_inode_flag\">ext4_test_inode_flag</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#EXT4_INODE_EXTENTS\">EXT4_INODE_EXTENTS</a>)));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#J_ASSERT\">J_ASSERT</a>(<a class=\"id\" href=\"#handle\">handle</a> != <a class=\"id\" href=\"#NULL\">NULL</a> || (<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#EXT4_GET_BLOCKS_CREATE\">EXT4_GET_BLOCKS_CREATE</a>) == 0);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#depth\">depth</a> = <a class=\"id\" href=\"#ext4_block_to_path\">ext4_block_to_path</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#m_lblk\">m_lblk</a>, <a class=\"id\" href=\"#offsets\">offsets</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>   &amp;<a class=\"id\" href=\"#blocks_to_boundary\">blocks_to_boundary</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#depth\">depth</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#partial\">partial</a> = <a class=\"id\" href=\"#ext4_get_branch\">ext4_get_branch</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#depth\">depth</a>, <a class=\"id\" href=\"#offsets\">offsets</a>, <a class=\"id\" href=\"#chain\">chain</a>, &amp;<a class=\"id\" href=\"#err\">err</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Simplest case - block found, no allocation needed */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#partial\">partial</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#first_block\">first_block</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(<a class=\"id\" href=\"#chain\">chain</a>[<a class=\"id\" href=\"#depth\">depth</a> - 1].<a class=\"id\" href=\"#key\">key</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*map more blocks*/</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#count\">count</a> &lt; <a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#m_len\">m_len</a> && <a class=\"id\" href=\"#count\">count</a> <= <a class=\"id\" href=\"#blocks_to_boundary\">blocks_to_boundary</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ext4_fsblk_t\">ext4_fsblk_t</a> <a class=\"id\" href=\"#blk\">blk</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#blk\">blk</a> = <a class=\"id\" href=\"#le32_to_cpu\">le32_to_cpu</a>(*(<a class=\"id\" href=\"#chain\">chain</a>[<a class=\"id\" href=\"#depth\">depth</a>-1].<a class=\"id\" href=\"#p\">p</a> + <a class=\"id\" href=\"#count\">count</a>));", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#blk\">blk</a> == <a class=\"id\" href=\"#first_block\">first_block</a> + <a class=\"id\" href=\"#count\">count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>break;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#got_it\">got_it</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Next simple case - plain lookup or failed read of indirect block */</span>", 
"<span class=\"ts\"/>if ((<a class=\"id\" href=\"#flags\">flags</a> &amp; <a class=\"id\" href=\"#EXT4_GET_BLOCKS_CREATE\">EXT4_GET_BLOCKS_CREATE</a>) == 0 || <a class=\"id\" href=\"#err\">err</a> == -<a class=\"id\" href=\"#EIO\">EIO</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#cleanup\">cleanup</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Okay, we need to do block allocation.</span>", 
"<span class=\"comment\"><span class=\"ts\"/>*/</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#goal\">goal</a> = <a class=\"id\" href=\"#ext4_find_goal\">ext4_find_goal</a>(<a class=\"id\" href=\"#inode\">inode</a>, <a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#m_lblk\">m_lblk</a>, <a class=\"id\" href=\"#partial\">partial</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* the number of blocks need to allocate for [d,t]indirect blocks */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#indirect_blks\">indirect_blks</a> = (<a class=\"id\" href=\"#chain\">chain</a> + <a class=\"id\" href=\"#depth\">depth</a>) - <a class=\"id\" href=\"#partial\">partial</a> - 1;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Next look up the indirect map to count the totoal number of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * direct blocks to allocate for this branch.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#count\">count</a> = <a class=\"id\" href=\"#ext4_blks_to_allocate\">ext4_blks_to_allocate</a>(<a class=\"id\" href=\"#partial\">partial</a>, <a class=\"id\" href=\"#indirect_blks\">indirect_blks</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>      <a class=\"id\" href=\"#map\">map</a>-><a class=\"id\" href=\"#m_len\">m_len</a>, <a class=\"id\" href=\"#blocks_to_boundary\">blocks_to_boundary</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Block out ext4_truncate while we alter the tree</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
];
xr_frag_insert('l/29/1755b3f837bd2e4237a9de6ade6b596a2edee7.xr', __xr_tmp);
