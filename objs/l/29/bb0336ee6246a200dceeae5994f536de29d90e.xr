var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ring buffer based function tracer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Copyright (C) 2007-2008 Steven Rostedt &lt;srostedt@redhat.com&gt;</span>", 
"<span class=\"comment\"> * Copyright (C) 2008 Ingo Molnar &lt;mingo@redhat.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Originally taken from the RT patch by:</span>", 
"<span class=\"comment\"> *    Arnaldo Carvalho de Melo &lt;acme@redhat.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Based on code from the latency_tracer, that is:</span>", 
"<span class=\"comment\"> *  Copyright (C) 2004-2006 Ingo Molnar</span>", 
"<span class=\"comment\"> *  Copyright (C) 2004 William Lee Irwin III</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ring_buffer\">ring_buffer</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#generated\">generated</a>/<a class=\"id\" href=\"#utsrelease\">utsrelease</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#stacktrace\">stacktrace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#writeback\">writeback</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kallsyms\">kallsyms</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#seq_file\">seq_file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#smp_lock\">smp_lock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#notifier\">notifier</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#irqflags\">irqflags</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#debugfs\">debugfs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#pagemap\">pagemap</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#hardirq\">hardirq</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#linkage\">linkage</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kprobes\">kprobes</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ftrace\">ftrace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#module\">module</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#percpu\">percpu</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#splice\">splice</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#kdebug\">kdebug</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#string\">string</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rwsem\">rwsem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ctype\">ctype</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#poll\">poll</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#fs\">fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> \"trace.h\"", 
"#<a class=\"id\" href=\"#include\">include</a> \"trace_output.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TRACE_BUFFER_FLAGS\">TRACE_BUFFER_FLAGS</a><span class=\"ts\"/>(<a class=\"id\" href=\"#RB_FL_OVERWRITE\">RB_FL_OVERWRITE</a>)", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * On boot up, the ring buffer is set to the minimum size, so that</span>", 
"<span class=\"comment\"> * we do not waste memory on systems that are not using tracing.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#ring_buffer_expanded\">ring_buffer_expanded</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * We need to change this state when a selftest is running.</span>", 
"<span class=\"comment\"> * A selftest will lurk into the ring-buffer to count the</span>", 
"<span class=\"comment\"> * entries inserted during the selftest although some concurrent</span>", 
"<span class=\"comment\"> * insertions into the ring-buffer such as trace_printk could occurred</span>", 
"<span class=\"comment\"> * at the same time, giving false positive or negative results.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> <a class=\"id\" href=\"#tracing_selftest_running\">tracing_selftest_running</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * If a tracer is running, we do not want to run SELFTEST.</span>", 
"<span class=\"comment\"> */</span>", 
"<a class=\"id\" href=\"#bool\">bool</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a> <a class=\"id\" href=\"#tracing_selftest_disabled\">tracing_selftest_disabled</a>;", 
"", 
"<span class=\"comment\">/* For tracers that don't implement custom flags */</span>", 
"static struct <a class=\"id\" href=\"#tracer_opt\">tracer_opt</a> <a class=\"id\" href=\"#dummy_tracer_opt\">dummy_tracer_opt</a>[] = {", 
"<span class=\"ts\"/>{ }", 
"};", 
"", 
"static struct <a class=\"id\" href=\"#tracer_flags\">tracer_flags</a> <a class=\"id\" href=\"#dummy_tracer_flags\">dummy_tracer_flags</a> = {", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#val\">val</a> = 0,", 
"<span class=\"ts\"/>.<a class=\"id\" href=\"#opts\">opts</a> = <a class=\"id\" href=\"#dummy_tracer_opt\">dummy_tracer_opt</a>", 
"};", 
"", 
"static int <a class=\"id\" href=\"#dummy_set_flag\">dummy_set_flag</a>(<a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#old_flags\">old_flags</a>, <a class=\"id\" href=\"#u32\">u32</a> <a class=\"id\" href=\"#bit\">bit</a>, int <a class=\"id\" href=\"#set\">set</a>)", 
"{", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Kill all tracing for good (never come back).</span>", 
"<span class=\"comment\"> * It is initialized to 1 but will turn to zero if the initialization</span>", 
"<span class=\"comment\"> * of the tracer is successful. But that is the only place that sets</span>", 
"<span class=\"comment\"> * this back to zero.</span>", 
"<span class=\"comment\"> */</span>", 
"static int <a class=\"id\" href=\"#tracing_disabled\">tracing_disabled</a> = 1;", 
"", 
"<a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(int, <a class=\"id\" href=\"#ftrace_cpu_disabled\">ftrace_cpu_disabled</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ftrace_disable_cpu\">ftrace_disable_cpu</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_disable\">preempt_disable</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__this_cpu_inc\">__this_cpu_inc</a>(<a class=\"id\" href=\"#ftrace_cpu_disabled\">ftrace_cpu_disabled</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#ftrace_enable_cpu\">ftrace_enable_cpu</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__this_cpu_dec\">__this_cpu_dec</a>(<a class=\"id\" href=\"#ftrace_cpu_disabled\">ftrace_cpu_disabled</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#preempt_enable\">preempt_enable</a>();", 
"}", 
"", 
"<a class=\"id\" href=\"#cpumask_var_t\">cpumask_var_t</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a><span class=\"ts\"/><a class=\"id\" href=\"#tracing_buffer_mask\">tracing_buffer_mask</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ftrace_dump_on_oops - variable to dump ftrace buffer on oops</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If there is an oops (or kernel panic) and the ftrace_dump_on_oops</span>", 
"<span class=\"comment\"> * is set, then ftrace_dump is called. This will output the contents</span>", 
"<span class=\"comment\"> * of the ftrace buffers to the console.  This is very useful for</span>", 
"<span class=\"comment\"> * capturing traces that lead to crashes and outputing it to a</span>", 
"<span class=\"comment\"> * serial console.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It is default off, but you can enable it with either specifying</span>", 
"<span class=\"comment\"> * \"ftrace_dump_on_oops\" in the kernel command line, or setting</span>", 
"<span class=\"comment\"> * /proc/sys/kernel/ftrace_dump_on_oops</span>", 
"<span class=\"comment\"> * Set 1 if you want to dump buffers of all CPUs</span>", 
"<span class=\"comment\"> * Set 2 if you want to dump the buffer of the CPU that triggered oops</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"enum <a class=\"id\" href=\"#ftrace_dump_mode\">ftrace_dump_mode</a> <a class=\"id\" href=\"#ftrace_dump_on_oops\">ftrace_dump_on_oops</a>;", 
"", 
"static int <a class=\"id\" href=\"#tracing_set_tracer\">tracing_set_tracer</a>(const char *<a class=\"id\" href=\"#buf\">buf</a>);", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAX_TRACER_SIZE\">MAX_TRACER_SIZE</a><span class=\"ts\"/><span class=\"ts\"/>100", 
"static char <a class=\"id\" href=\"#bootup_tracer_buf\">bootup_tracer_buf</a>[<a class=\"id\" href=\"#MAX_TRACER_SIZE\">MAX_TRACER_SIZE</a>] <a class=\"id\" href=\"#__initdata\">__initdata</a>;", 
"static char *<a class=\"id\" href=\"#default_bootup_tracer\">default_bootup_tracer</a>;", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#set_cmdline_ftrace\">set_cmdline_ftrace</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#strncpy\">strncpy</a>(<a class=\"id\" href=\"#bootup_tracer_buf\">bootup_tracer_buf</a>, <a class=\"id\" href=\"#str\">str</a>, <a class=\"id\" href=\"#MAX_TRACER_SIZE\">MAX_TRACER_SIZE</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#default_bootup_tracer\">default_bootup_tracer</a> = <a class=\"id\" href=\"#bootup_tracer_buf\">bootup_tracer_buf</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* We are using ftrace early, expand it */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ring_buffer_expanded\">ring_buffer_expanded</a> = 1;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"ftrace=\", <a class=\"id\" href=\"#set_cmdline_ftrace\">set_cmdline_ftrace</a>);", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#set_ftrace_dump_on_oops\">set_ftrace_dump_on_oops</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/>if (*<a class=\"id\" href=\"#str\">str</a>++ != '=' || !*<a class=\"id\" href=\"#str\">str</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_dump_on_oops\">ftrace_dump_on_oops</a> = <a class=\"id\" href=\"#DUMP_ALL\">DUMP_ALL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#strcmp\">strcmp</a>(\"orig_cpu\", <a class=\"id\" href=\"#str\">str</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ftrace_dump_on_oops\">ftrace_dump_on_oops</a> = <a class=\"id\" href=\"#DUMP_ORIG\">DUMP_ORIG</a>;", 
"                return 1;", 
"        }", 
"", 
"        return 0;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"ftrace_dump_on_oops\", <a class=\"id\" href=\"#set_ftrace_dump_on_oops\">set_ftrace_dump_on_oops</a>);", 
"", 
"unsigned long long <a class=\"id\" href=\"#ns2usecs\">ns2usecs</a>(<a class=\"id\" href=\"#cycle_t\">cycle_t</a> <a class=\"id\" href=\"#nsec\">nsec</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#nsec\">nsec</a> += 500;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#do_div\">do_div</a>(<a class=\"id\" href=\"#nsec\">nsec</a>, 1000);", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nsec\">nsec</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The global_trace is the descriptor that holds the tracing</span>", 
"<span class=\"comment\"> * buffers for the live tracing. For each CPU, it contains</span>", 
"<span class=\"comment\"> * a link list of pages that will store trace entries. The</span>", 
"<span class=\"comment\"> * page descriptor of the pages in the memory is used to hold</span>", 
"<span class=\"comment\"> * the link list by linking the lru item in the page descriptor</span>", 
"<span class=\"comment\"> * to each of the pages in the buffer per CPU.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For each active CPU there is a data field that holds the</span>", 
"<span class=\"comment\"> * pages for the buffer for that CPU. Each CPU has the same number</span>", 
"<span class=\"comment\"> * of pages allocated for its buffer.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#trace_array\">trace_array</a><span class=\"ts\"/><a class=\"id\" href=\"#global_trace\">global_trace</a>;", 
"", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#trace_array_cpu\">trace_array_cpu</a>, <a class=\"id\" href=\"#global_trace_cpu\">global_trace_cpu</a>);", 
"", 
"int <a class=\"id\" href=\"#filter_current_check_discard\">filter_current_check_discard</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#ftrace_event_call\">ftrace_event_call</a> *<a class=\"id\" href=\"#call\">call</a>, void *<a class=\"id\" href=\"#rec\">rec</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/> struct <a class=\"id\" href=\"#ring_buffer_event\">ring_buffer_event</a> *<a class=\"id\" href=\"#event\">event</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#filter_check_discard\">filter_check_discard</a>(<a class=\"id\" href=\"#call\">call</a>, <a class=\"id\" href=\"#rec\">rec</a>, <a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#event\">event</a>);", 
"}", 
"<a class=\"id\" href=\"#EXPORT_SYMBOL_GPL\">EXPORT_SYMBOL_GPL</a>(<a class=\"id\" href=\"#filter_current_check_discard\">filter_current_check_discard</a>);", 
"", 
"<a class=\"id\" href=\"#cycle_t\">cycle_t</a> <a class=\"id\" href=\"#ftrace_now\">ftrace_now</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> <a class=\"id\" href=\"#ts\">ts</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Early boot up does not have a buffer yet */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#global_trace\">global_trace</a>.<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return <a class=\"id\" href=\"#trace_clock_local\">trace_clock_local</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ts\">ts</a> = <a class=\"id\" href=\"#ring_buffer_time_stamp\">ring_buffer_time_stamp</a>(<a class=\"id\" href=\"#global_trace\">global_trace</a>.<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ring_buffer_normalize_time_stamp\">ring_buffer_normalize_time_stamp</a>(<a class=\"id\" href=\"#global_trace\">global_trace</a>.<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#cpu\">cpu</a>, &amp;<a class=\"id\" href=\"#ts\">ts</a>);", 
"", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ts\">ts</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * The max_tr is used to snapshot the global_trace when a maximum</span>", 
"<span class=\"comment\"> * latency is reached. Some tracers will use this to store a maximum</span>", 
"<span class=\"comment\"> * trace while it continues examining live traces.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The buffers for the max_tr are set up the same as the global_trace.</span>", 
"<span class=\"comment\"> * When a snapshot is taken, the link list of the max_tr is swapped</span>", 
"<span class=\"comment\"> * with the link list of the global_trace and the buffers are reset for</span>", 
"<span class=\"comment\"> * the global_trace so the tracing can continue.</span>", 
"<span class=\"comment\"> */</span>", 
"static struct <a class=\"id\" href=\"#trace_array\">trace_array</a><span class=\"ts\"/><a class=\"id\" href=\"#max_tr\">max_tr</a>;", 
"", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#trace_array_cpu\">trace_array_cpu</a>, <a class=\"id\" href=\"#max_tr_data\">max_tr_data</a>);", 
"", 
"<span class=\"comment\">/* tracer_enabled is used to toggle activation of a tracer */</span>", 
"static int<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tracer_enabled\">tracer_enabled</a> = 1;", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tracing_is_enabled - return tracer_enabled status</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This function is used by other tracers to know the status</span>", 
"<span class=\"comment\"> * of the tracer_enabled flag.  Tracers may use this function</span>", 
"<span class=\"comment\"> * to know if it should enable their features when starting</span>", 
"<span class=\"comment\"> * up. See irqsoff tracer for an example (start_irqsoff_tracer).</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#tracing_is_enabled\">tracing_is_enabled</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#tracer_enabled\">tracer_enabled</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * trace_buf_size is the size in bytes that is allocated</span>", 
"<span class=\"comment\"> * for a buffer. Note, the number of bytes is always rounded</span>", 
"<span class=\"comment\"> * to page size.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This number is purposely set to a low number of 16384.</span>", 
"<span class=\"comment\"> * If the dump on oops happens, it will be much appreciated</span>", 
"<span class=\"comment\"> * to not have to wait for all that output. Anyway this can be</span>", 
"<span class=\"comment\"> * boot time and run time configurable.</span>", 
"<span class=\"comment\"> */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#TRACE_BUF_SIZE_DEFAULT\">TRACE_BUF_SIZE_DEFAULT</a><span class=\"ts\"/>1441792UL <span class=\"comment\">/* 16384 * 88 (sizeof(entry)) */</span>", 
"", 
"static unsigned long<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_buf_size\">trace_buf_size</a> = <a class=\"id\" href=\"#TRACE_BUF_SIZE_DEFAULT\">TRACE_BUF_SIZE_DEFAULT</a>;", 
"", 
"<span class=\"comment\">/* trace_types holds a link list of available tracers. */</span>", 
"static struct <a class=\"id\" href=\"#tracer\">tracer</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#trace_types\">trace_types</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"<span class=\"comment\">/* current_trace points to the tracer that is currently active */</span>", 
"static struct <a class=\"id\" href=\"#tracer\">tracer</a><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#current_trace\">current_trace</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * trace_types_lock is used to protect the trace_types list.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#trace_types_lock\">trace_types_lock</a>);", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * serialize the access of the ring buffer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * ring buffer serializes readers, but it is low level protection.</span>", 
"<span class=\"comment\"> * The validity of the events (which returns by ring_buffer_peek() ..etc)</span>", 
"<span class=\"comment\"> * are not protected by ring buffer.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * The content of events may become garbage if we allow other process consumes</span>", 
"<span class=\"comment\"> * these events concurrently:</span>", 
"<span class=\"comment\"> *   A) the page of the consumed events may become a normal page</span>", 
"<span class=\"comment\"> *      (not reader page) in ring buffer, and this page will be rewrited</span>", 
"<span class=\"comment\"> *      by events producer.</span>", 
"<span class=\"comment\"> *   B) The page of the consumed events may become a page for splice_read,</span>", 
"<span class=\"comment\"> *      and this page will be returned to system.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * These primitives allow multi process access to different cpu ring buffer</span>", 
"<span class=\"comment\"> * concurrently.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * These primitives don't distinguish read-only and read-consume access.</span>", 
"<span class=\"comment\"> * Multi read-only access are also serialized.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_SMP\">CONFIG_SMP</a>", 
"static <a class=\"id\" href=\"#DECLARE_RWSEM\">DECLARE_RWSEM</a>(<a class=\"id\" href=\"#all_cpu_access_lock\">all_cpu_access_lock</a>);", 
"static <a class=\"id\" href=\"#DEFINE_PER_CPU\">DEFINE_PER_CPU</a>(struct <a class=\"id\" href=\"#mutex\">mutex</a>, <a class=\"id\" href=\"#cpu_access_lock\">cpu_access_lock</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#trace_access_lock\">trace_access_lock</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> == <a class=\"id\" href=\"#TRACE_PIPE_ALL_CPU\">TRACE_PIPE_ALL_CPU</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* gain it for accessing the whole ring buffer. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#down_write\">down_write</a>(&amp;<a class=\"id\" href=\"#all_cpu_access_lock\">all_cpu_access_lock</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* gain it for accessing a cpu ring buffer. */</span>", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Firstly block other trace_access_lock(TRACE_PIPE_ALL_CPU). */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#down_read\">down_read</a>(&amp;<a class=\"id\" href=\"#all_cpu_access_lock\">all_cpu_access_lock</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Secondly block other access to this @cpu ring buffer. */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_access_lock\">cpu_access_lock</a>, <a class=\"id\" href=\"#cpu\">cpu</a>));", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#trace_access_unlock\">trace_access_unlock</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cpu\">cpu</a> == <a class=\"id\" href=\"#TRACE_PIPE_ALL_CPU\">TRACE_PIPE_ALL_CPU</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_write\">up_write</a>(&amp;<a class=\"id\" href=\"#all_cpu_access_lock\">all_cpu_access_lock</a>);", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_access_lock\">cpu_access_lock</a>, <a class=\"id\" href=\"#cpu\">cpu</a>));", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#up_read\">up_read</a>(&amp;<a class=\"id\" href=\"#all_cpu_access_lock\">all_cpu_access_lock</a>);", 
"<span class=\"ts\"/>}", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#trace_access_lock_init\">trace_access_lock_init</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_possible_cpu\">for_each_possible_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#mutex_init\">mutex_init</a>(&amp;<a class=\"id\" href=\"#per_cpu\">per_cpu</a>(<a class=\"id\" href=\"#cpu_access_lock\">cpu_access_lock</a>, <a class=\"id\" href=\"#cpu\">cpu</a>));", 
"}", 
"", 
"#else", 
"", 
"static <a class=\"id\" href=\"#DEFINE_MUTEX\">DEFINE_MUTEX</a>(<a class=\"id\" href=\"#access_lock\">access_lock</a>);", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#trace_access_lock\">trace_access_lock</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>(void)<a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#access_lock\">access_lock</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#trace_access_unlock\">trace_access_unlock</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>(void)<a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#access_lock\">access_lock</a>);", 
"}", 
"", 
"static <a class=\"id\" href=\"#inline\">inline</a> void <a class=\"id\" href=\"#trace_access_lock_init\">trace_access_lock_init</a>(void)", 
"{", 
"}", 
"", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"comment\">/* trace_wait is a waitqueue for tasks blocked on trace_poll */</span>", 
"static <a class=\"id\" href=\"#DECLARE_WAIT_QUEUE_HEAD\">DECLARE_WAIT_QUEUE_HEAD</a>(<a class=\"id\" href=\"#trace_wait\">trace_wait</a>);", 
"", 
"<span class=\"comment\">/* trace_flags holds trace_options default values */</span>", 
"unsigned long <a class=\"id\" href=\"#trace_flags\">trace_flags</a> = <a class=\"id\" href=\"#TRACE_ITER_PRINT_PARENT\">TRACE_ITER_PRINT_PARENT</a> | <a class=\"id\" href=\"#TRACE_ITER_PRINTK\">TRACE_ITER_PRINTK</a> |", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TRACE_ITER_ANNOTATE\">TRACE_ITER_ANNOTATE</a> | <a class=\"id\" href=\"#TRACE_ITER_CONTEXT_INFO\">TRACE_ITER_CONTEXT_INFO</a> | <a class=\"id\" href=\"#TRACE_ITER_SLEEP_TIME\">TRACE_ITER_SLEEP_TIME</a> |", 
"<span class=\"ts\"/><a class=\"id\" href=\"#TRACE_ITER_GRAPH_TIME\">TRACE_ITER_GRAPH_TIME</a> | <a class=\"id\" href=\"#TRACE_ITER_RECORD_CMD\">TRACE_ITER_RECORD_CMD</a>;", 
"", 
"static int <a class=\"id\" href=\"#trace_stop_count\">trace_stop_count</a>;", 
"static <a class=\"id\" href=\"#DEFINE_SPINLOCK\">DEFINE_SPINLOCK</a>(<a class=\"id\" href=\"#tracing_start_lock\">tracing_start_lock</a>);", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * trace_wake_up - wake up tasks waiting for trace input</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Simply wakes up any task that is blocked on the trace_wait</span>", 
"<span class=\"comment\"> * queue. These is used with trace_poll for tasks polling the trace.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#trace_wake_up\">trace_wake_up</a>(void)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#trace_flags\">trace_flags</a> &amp; <a class=\"id\" href=\"#TRACE_ITER_BLOCK\">TRACE_ITER_BLOCK</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The runqueue_is_locked() can fail, but this is the best we</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * have for now:</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#get_cpu\">get_cpu</a>();", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#runqueue_is_locked\">runqueue_is_locked</a>(<a class=\"id\" href=\"#cpu\">cpu</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#wake_up\">wake_up</a>(&amp;<a class=\"id\" href=\"#trace_wait\">trace_wait</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#put_cpu\">put_cpu</a>();", 
"}", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#set_buf_size\">set_buf_size</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#buf_size\">buf_size</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#str\">str</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buf_size\">buf_size</a> = <a class=\"id\" href=\"#memparse\">memparse</a>(<a class=\"id\" href=\"#str\">str</a>, &amp;<a class=\"id\" href=\"#str\">str</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* nr_entries can not be zero */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buf_size\">buf_size</a> == 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_buf_size\">trace_buf_size</a> = <a class=\"id\" href=\"#buf_size\">buf_size</a>;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"trace_buf_size=\", <a class=\"id\" href=\"#set_buf_size\">set_buf_size</a>);", 
"", 
"static int <a class=\"id\" href=\"#__init\">__init</a> <a class=\"id\" href=\"#set_tracing_thresh\">set_tracing_thresh</a>(char *<a class=\"id\" href=\"#str\">str</a>)", 
"{", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#threshhold\">threshhold</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#str\">str</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#strict_strtoul\">strict_strtoul</a>(<a class=\"id\" href=\"#str\">str</a>, 0, &amp;<a class=\"id\" href=\"#threshhold\">threshhold</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> &lt; 0)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tracing_thresh\">tracing_thresh</a> = <a class=\"id\" href=\"#threshhold\">threshhold</a> * 1000;", 
"<span class=\"ts\"/>return 1;", 
"}", 
"<a class=\"id\" href=\"#__setup\">__setup</a>(\"tracing_thresh=\", <a class=\"id\" href=\"#set_tracing_thresh\">set_tracing_thresh</a>);", 
"", 
"unsigned long <a class=\"id\" href=\"#nsecs_to_usecs\">nsecs_to_usecs</a>(unsigned long <a class=\"id\" href=\"#nsecs\">nsecs</a>)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#nsecs\">nsecs</a> / 1000;", 
"}", 
"", 
"<span class=\"comment\">/* These must match the bit postions in trace_iterator_flags */</span>", 
"static const char *<a class=\"id\" href=\"#trace_options\">trace_options</a>[] = {", 
"<span class=\"ts\"/>\"print-parent\",", 
"<span class=\"ts\"/>\"sym-offset\",", 
"<span class=\"ts\"/>\"sym-addr\",", 
"<span class=\"ts\"/>\"verbose\",", 
"<span class=\"ts\"/>\"raw\",", 
"<span class=\"ts\"/>\"hex\",", 
"<span class=\"ts\"/>\"bin\",", 
"<span class=\"ts\"/>\"block\",", 
"<span class=\"ts\"/>\"stacktrace\",", 
"<span class=\"ts\"/>\"trace_printk\",", 
"<span class=\"ts\"/>\"ftrace_preempt\",", 
"<span class=\"ts\"/>\"branch\",", 
"<span class=\"ts\"/>\"annotate\",", 
"<span class=\"ts\"/>\"userstacktrace\",", 
"<span class=\"ts\"/>\"sym-userobj\",", 
"<span class=\"ts\"/>\"printk-msg-only\",", 
"<span class=\"ts\"/>\"context-info\",", 
"<span class=\"ts\"/>\"latency-format\",", 
"<span class=\"ts\"/>\"sleep-time\",", 
"<span class=\"ts\"/>\"graph-time\",", 
"<span class=\"ts\"/>\"record-cmd\",", 
"<span class=\"ts\"/><a class=\"id\" href=\"#NULL\">NULL</a>", 
"};", 
"", 
"static struct {", 
"<span class=\"ts\"/><a class=\"id\" href=\"#u64\">u64</a> (*<a class=\"id\" href=\"#func\">func</a>)(void);", 
"<span class=\"ts\"/>const char *<a class=\"id\" href=\"#name\">name</a>;", 
"} <a class=\"id\" href=\"#trace_clocks\">trace_clocks</a>[] = {", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#trace_clock_local\">trace_clock_local</a>,<span class=\"ts\"/>\"local\" },", 
"<span class=\"ts\"/>{ <a class=\"id\" href=\"#trace_clock_global\">trace_clock_global</a>,<span class=\"ts\"/>\"global\" },", 
"};", 
"", 
"int <a class=\"id\" href=\"#trace_clock_id\">trace_clock_id</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * trace_parser_get_init - gets the buffer for trace parser</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#trace_parser_get_init\">trace_parser_get_init</a>(struct <a class=\"id\" href=\"#trace_parser\">trace_parser</a> *<a class=\"id\" href=\"#parser\">parser</a>, int <a class=\"id\" href=\"#size\">size</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(<a class=\"id\" href=\"#parser\">parser</a>, 0, sizeof(*<a class=\"id\" href=\"#parser\">parser</a>));", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parser\">parser</a>-><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#kmalloc\">kmalloc</a>(<a class=\"id\" href=\"#size\">size</a>, <a class=\"id\" href=\"#GFP_KERNEL\">GFP_KERNEL</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#parser\">parser</a>-><a class=\"id\" href=\"#buffer\">buffer</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 1;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#parser\">parser</a>-><a class=\"id\" href=\"#size\">size</a> = <a class=\"id\" href=\"#size\">size</a>;", 
"<span class=\"ts\"/>return 0;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * trace_parser_put - frees the buffer for trace parser</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#trace_parser_put\">trace_parser_put</a>(struct <a class=\"id\" href=\"#trace_parser\">trace_parser</a> *<a class=\"id\" href=\"#parser\">parser</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#kfree\">kfree</a>(<a class=\"id\" href=\"#parser\">parser</a>-><a class=\"id\" href=\"#buffer\">buffer</a>);", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * trace_get_user - reads the user input string separated by  space</span>", 
"<span class=\"comment\"> * (matched by isspace(ch))</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * For each string found the 'struct trace_parser' is updated,</span>", 
"<span class=\"comment\"> * and the function returns.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Returns number of bytes read.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * See kernel/trace/trace.h for 'struct trace_parser' details.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#trace_get_user\">trace_get_user</a>(struct <a class=\"id\" href=\"#trace_parser\">trace_parser</a> *<a class=\"id\" href=\"#parser\">parser</a>, const char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#ubuf\">ubuf</a>,", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#cnt\">cnt</a>, <a class=\"id\" href=\"#loff_t\">loff_t</a> *<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"{", 
"<span class=\"ts\"/>char <a class=\"id\" href=\"#ch\">ch</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#read\">read</a> = 0;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (!*<a class=\"id\" href=\"#ppos\">ppos</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_parser_clear\">trace_parser_clear</a>(<a class=\"id\" href=\"#parser\">parser</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#ch\">ch</a>, <a class=\"id\" href=\"#ubuf\">ubuf</a>++);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#read\">read</a>++;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cnt\">cnt</a>--;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * The parser is not finished with the last write,</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * continue reading the user input without skipping spaces.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#parser\">parser</a>-><a class=\"id\" href=\"#cont\">cont</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* skip white space */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>while (<a class=\"id\" href=\"#cnt\">cnt</a> && <a class=\"id\" href=\"#isspace\">isspace</a>(<a class=\"id\" href=\"#ch\">ch</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#ch\">ch</a>, <a class=\"id\" href=\"#ubuf\">ubuf</a>++);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read\">read</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cnt\">cnt</a>--;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* only spaces were written */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#isspace\">isspace</a>(<a class=\"id\" href=\"#ch\">ch</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>*<a class=\"id\" href=\"#ppos\">ppos</a> += <a class=\"id\" href=\"#read\">read</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#read\">read</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parser\">parser</a>-><a class=\"id\" href=\"#idx\">idx</a> = 0;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* read the non-space input */</span>", 
"<span class=\"ts\"/>while (<a class=\"id\" href=\"#cnt\">cnt</a> && !<a class=\"id\" href=\"#isspace\">isspace</a>(<a class=\"id\" href=\"#ch\">ch</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#parser\">parser</a>-><a class=\"id\" href=\"#idx\">idx</a> &lt; <a class=\"id\" href=\"#parser\">parser</a>-><a class=\"id\" href=\"#size\">size</a> - 1)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parser\">parser</a>-><a class=\"id\" href=\"#buffer\">buffer</a>[<a class=\"id\" href=\"#parser\">parser</a>-><a class=\"id\" href=\"#idx\">idx</a>++] = <a class=\"id\" href=\"#ch\">ch</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>else {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -<a class=\"id\" href=\"#EINVAL\">EINVAL</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#get_user\">get_user</a>(<a class=\"id\" href=\"#ch\">ch</a>, <a class=\"id\" href=\"#ubuf\">ubuf</a>++);", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#read\">read</a>++;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cnt\">cnt</a>--;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* We either got finished input or we have to wait for another call. */</span>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#isspace\">isspace</a>(<a class=\"id\" href=\"#ch\">ch</a>)) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parser\">parser</a>-><a class=\"id\" href=\"#buffer\">buffer</a>[<a class=\"id\" href=\"#parser\">parser</a>-><a class=\"id\" href=\"#idx\">idx</a>] = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parser\">parser</a>-><a class=\"id\" href=\"#cont\">cont</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/>} else {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parser\">parser</a>-><a class=\"id\" href=\"#cont\">cont</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#parser\">parser</a>-><a class=\"id\" href=\"#buffer\">buffer</a>[<a class=\"id\" href=\"#parser\">parser</a>-><a class=\"id\" href=\"#idx\">idx</a>++] = <a class=\"id\" href=\"#ch\">ch</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#ppos\">ppos</a> += <a class=\"id\" href=\"#read\">read</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#read\">read</a>;", 
"", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"<a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#trace_seq_to_user\">trace_seq_to_user</a>(struct <a class=\"id\" href=\"#trace_seq\">trace_seq</a> *<a class=\"id\" href=\"#s\">s</a>, char <a class=\"id\" href=\"#__user\">__user</a> *<a class=\"id\" href=\"#ubuf\">ubuf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#cnt\">cnt</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#cnt\">cnt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return 0;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#len\">len</a> <= <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#readpos\">readpos</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#len\">len</a> - <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#readpos\">readpos</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cnt\">cnt</a> &gt; <a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cnt\">cnt</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#copy_to_user\">copy_to_user</a>(<a class=\"id\" href=\"#ubuf\">ubuf</a>, <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#buffer\">buffer</a> + <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#readpos\">readpos</a>, <a class=\"id\" href=\"#cnt\">cnt</a>);", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == <a class=\"id\" href=\"#cnt\">cnt</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cnt\">cnt</a> -= <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#readpos\">readpos</a> += <a class=\"id\" href=\"#cnt\">cnt</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cnt\">cnt</a>;", 
"}", 
"", 
"static <a class=\"id\" href=\"#ssize_t\">ssize_t</a> <a class=\"id\" href=\"#trace_seq_to_buffer\">trace_seq_to_buffer</a>(struct <a class=\"id\" href=\"#trace_seq\">trace_seq</a> *<a class=\"id\" href=\"#s\">s</a>, void *<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#size_t\">size_t</a> <a class=\"id\" href=\"#cnt\">cnt</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/>void *<a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#len\">len</a> <= <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#readpos\">readpos</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#len\">len</a> = <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#len\">len</a> - <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#readpos\">readpos</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#cnt\">cnt</a> &gt; <a class=\"id\" href=\"#len\">len</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#cnt\">cnt</a> = <a class=\"id\" href=\"#len\">len</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#buf\">buf</a>, <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#buffer\">buffer</a> + <a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#readpos\">readpos</a>, <a class=\"id\" href=\"#cnt\">cnt</a>);", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#ret\">ret</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return -<a class=\"id\" href=\"#EFAULT\">EFAULT</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#s\">s</a>-><a class=\"id\" href=\"#readpos\">readpos</a> += <a class=\"id\" href=\"#cnt\">cnt</a>;", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#cnt\">cnt</a>;", 
"}", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * ftrace_max_lock is used to protect the swapping of buffers</span>", 
"<span class=\"comment\"> * when taking a max snapshot. The buffers themselves are</span>", 
"<span class=\"comment\"> * protected by per_cpu spinlocks. But the action of the swap</span>", 
"<span class=\"comment\"> * needs its own lock.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This is defined as a arch_spinlock_t in order to help</span>", 
"<span class=\"comment\"> * with performance when lockdep debugging is enabled.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * It is also used in other places outside the update_max_tr</span>", 
"<span class=\"comment\"> * so it needs to be defined outside of the</span>", 
"<span class=\"comment\"> * CONFIG_TRACER_MAX_TRACE.</span>", 
"<span class=\"comment\"> */</span>", 
"static <a class=\"id\" href=\"#arch_spinlock_t\">arch_spinlock_t</a> <a class=\"id\" href=\"#ftrace_max_lock\">ftrace_max_lock</a> =", 
"<span class=\"ts\"/>(<a class=\"id\" href=\"#arch_spinlock_t\">arch_spinlock_t</a>)<a class=\"id\" href=\"#__ARCH_SPIN_LOCK_UNLOCKED\">__ARCH_SPIN_LOCK_UNLOCKED</a>;", 
"", 
"unsigned long <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a><span class=\"ts\"/><a class=\"id\" href=\"#tracing_thresh\">tracing_thresh</a>;", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_TRACER_MAX_TRACE\">CONFIG_TRACER_MAX_TRACE</a>", 
"unsigned long <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a><span class=\"ts\"/><a class=\"id\" href=\"#tracing_max_latency\">tracing_max_latency</a>;", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * Copy the new maximum trace into the separate maximum-trace</span>", 
"<span class=\"comment\"> * structure. (this way the maximum trace is permanently saved,</span>", 
"<span class=\"comment\"> * for later retrieval via /sys/kernel/debug/tracing/latency_trace)</span>", 
"<span class=\"comment\"> */</span>", 
"static void", 
"<a class=\"id\" href=\"#__update_max_tr\">__update_max_tr</a>(struct <a class=\"id\" href=\"#trace_array\">trace_array</a> *<a class=\"id\" href=\"#tr\">tr</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_array_cpu\">trace_array_cpu</a> *<a class=\"id\" href=\"#data\">data</a> = <a class=\"id\" href=\"#tr\">tr</a>-><a class=\"id\" href=\"#data\">data</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_array_cpu\">trace_array_cpu</a> *<a class=\"id\" href=\"#max_data\">max_data</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_tr\">max_tr</a>.<a class=\"id\" href=\"#cpu\">cpu</a> = <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_tr\">max_tr</a>.<a class=\"id\" href=\"#time_start\">time_start</a> = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#preempt_timestamp\">preempt_timestamp</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_data\">max_data</a> = <a class=\"id\" href=\"#max_tr\">max_tr</a>.<a class=\"id\" href=\"#data\">data</a>[<a class=\"id\" href=\"#cpu\">cpu</a>];", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_data\">max_data</a>-><a class=\"id\" href=\"#saved_latency\">saved_latency</a> = <a class=\"id\" href=\"#tracing_max_latency\">tracing_max_latency</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_data\">max_data</a>-><a class=\"id\" href=\"#critical_start\">critical_start</a> = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#critical_start\">critical_start</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_data\">max_data</a>-><a class=\"id\" href=\"#critical_end\">critical_end</a> = <a class=\"id\" href=\"#data\">data</a>-><a class=\"id\" href=\"#critical_end\">critical_end</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memcpy\">memcpy</a>(<a class=\"id\" href=\"#max_data\">max_data</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#comm\">comm</a>, <a class=\"id\" href=\"#TASK_COMM_LEN\">TASK_COMM_LEN</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_data\">max_data</a>-><a class=\"id\" href=\"#pid\">pid</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#pid\">pid</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_data\">max_data</a>-><a class=\"id\" href=\"#uid\">uid</a> = <a class=\"id\" href=\"#task_uid\">task_uid</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_data\">max_data</a>-><a class=\"id\" href=\"#nice\">nice</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#static_prio\">static_prio</a> - 20 - <a class=\"id\" href=\"#MAX_RT_PRIO\">MAX_RT_PRIO</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_data\">max_data</a>-><a class=\"id\" href=\"#policy\">policy</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#policy\">policy</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_data\">max_data</a>-><a class=\"id\" href=\"#rt_priority\">rt_priority</a> = <a class=\"id\" href=\"#tsk\">tsk</a>-><a class=\"id\" href=\"#rt_priority\">rt_priority</a>;", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* record this tasks comm */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tracing_record_cmdline\">tracing_record_cmdline</a>(<a class=\"id\" href=\"#tsk\">tsk</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * update_max_tr - snapshot all trace buffers from global_trace to max_tr</span>", 
"<span class=\"comment\"> * @tr: tracer</span>", 
"<span class=\"comment\"> * @tsk: the task with the latency</span>", 
"<span class=\"comment\"> * @cpu: The cpu that initiated the trace.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Flip the buffers between the @tr and the max_tr and record information</span>", 
"<span class=\"comment\"> * about which task was the cause of this latency.</span>", 
"<span class=\"comment\"> */</span>", 
"void", 
"<a class=\"id\" href=\"#update_max_tr\">update_max_tr</a>(struct <a class=\"id\" href=\"#trace_array\">trace_array</a> *<a class=\"id\" href=\"#tr\">tr</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buf\">buf</a> = <a class=\"id\" href=\"#tr\">tr</a>-><a class=\"id\" href=\"#buffer\">buffer</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#trace_stop_count\">trace_stop_count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(!<a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>());", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#current_trace\">current_trace</a>-><a class=\"id\" href=\"#use_max_tr\">use_max_tr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_spin_lock\">arch_spin_lock</a>(&amp;<a class=\"id\" href=\"#ftrace_max_lock\">ftrace_max_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tr\">tr</a>-><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#max_tr\">max_tr</a>.<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#max_tr\">max_tr</a>.<a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#buf\">buf</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__update_max_tr\">__update_max_tr</a>(<a class=\"id\" href=\"#tr\">tr</a>, <a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_spin_unlock\">arch_spin_unlock</a>(&amp;<a class=\"id\" href=\"#ftrace_max_lock\">ftrace_max_lock</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * update_max_tr_single - only copy one trace over, and reset the rest</span>", 
"<span class=\"comment\"> * @tr - tracer</span>", 
"<span class=\"comment\"> * @tsk - task with the latency</span>", 
"<span class=\"comment\"> * @cpu - the cpu of the buffer to copy.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Flip the trace of a single CPU buffer between the @tr and the max_tr.</span>", 
"<span class=\"comment\"> */</span>", 
"void", 
"<a class=\"id\" href=\"#update_max_tr_single\">update_max_tr_single</a>(struct <a class=\"id\" href=\"#trace_array\">trace_array</a> *<a class=\"id\" href=\"#tr\">tr</a>, struct <a class=\"id\" href=\"#task_struct\">task_struct</a> *<a class=\"id\" href=\"#tsk\">tsk</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#trace_stop_count\">trace_stop_count</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(!<a class=\"id\" href=\"#irqs_disabled\">irqs_disabled</a>());", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#current_trace\">current_trace</a>-><a class=\"id\" href=\"#use_max_tr\">use_max_tr</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_spin_lock\">arch_spin_lock</a>(&amp;<a class=\"id\" href=\"#ftrace_max_lock\">ftrace_max_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_disable_cpu\">ftrace_disable_cpu</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#ring_buffer_swap_cpu\">ring_buffer_swap_cpu</a>(<a class=\"id\" href=\"#max_tr\">max_tr</a>.<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#tr\">tr</a>-><a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> == -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * We failed to swap the buffer due to a commit taking</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * place on this CPU. We fail to record, but we reset</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * the max trace buffer (no one writes directly to it)</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * and flag that it failed.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_array_printk\">trace_array_printk</a>(&amp;<a class=\"id\" href=\"#max_tr\">max_tr</a>, <a class=\"id\" href=\"#_THIS_IP_\">_THIS_IP_</a>,", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>\"Failed to swap buffers due to commit in progress\\n\");", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_enable_cpu\">ftrace_enable_cpu</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(<a class=\"id\" href=\"#ret\">ret</a> && <a class=\"id\" href=\"#ret\">ret</a> != -<a class=\"id\" href=\"#EAGAIN\">EAGAIN</a> && <a class=\"id\" href=\"#ret\">ret</a> != -<a class=\"id\" href=\"#EBUSY\">EBUSY</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__update_max_tr\">__update_max_tr</a>(<a class=\"id\" href=\"#tr\">tr</a>, <a class=\"id\" href=\"#tsk\">tsk</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_spin_unlock\">arch_spin_unlock</a>(&amp;<a class=\"id\" href=\"#ftrace_max_lock\">ftrace_max_lock</a>);", 
"}", 
"#<a class=\"id\" href=\"#endif\">endif</a> <span class=\"comment\">/* CONFIG_TRACER_MAX_TRACE */</span>", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * register_tracer - register a tracer with the ftrace system.</span>", 
"<span class=\"comment\"> * @type - the plugin for the tracer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Register a new plugin tracer.</span>", 
"<span class=\"comment\"> */</span>", 
"int <a class=\"id\" href=\"#register_tracer\">register_tracer</a>(struct <a class=\"id\" href=\"#tracer\">tracer</a> *<a class=\"id\" href=\"#type\">type</a>)", 
"<a class=\"id\" href=\"#__releases\">__releases</a>(<a class=\"id\" href=\"#kernel_lock\">kernel_lock</a>)", 
"<a class=\"id\" href=\"#__acquires\">__acquires</a>(<a class=\"id\" href=\"#kernel_lock\">kernel_lock</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tracer\">tracer</a> *<a class=\"id\" href=\"#t\">t</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#ret\">ret</a> = 0;", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#name\">name</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Tracer must have a name\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strlen\">strlen</a>(<a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#name\">name</a>) >= <a class=\"id\" href=\"#MAX_TRACER_SIZE\">MAX_TRACER_SIZE</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Tracer has a name longer than %d\\n\", <a class=\"id\" href=\"#MAX_TRACER_SIZE\">MAX_TRACER_SIZE</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/>return -1;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#trace_types_lock\">trace_types_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tracing_selftest_running\">tracing_selftest_running</a> = <a class=\"id\" href=\"#true\">true</a>;", 
"", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#trace_types\">trace_types</a>; <a class=\"id\" href=\"#t\">t</a>; <a class=\"id\" href=\"#t\">t</a> = <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#strcmp\">strcmp</a>(<a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#t\">t</a>-><a class=\"id\" href=\"#name\">name</a>) == 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* already found */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Tracer %s already registered\\n\",", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = -1;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#set_flag\">set_flag</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#set_flag\">set_flag</a> = &amp;<a class=\"id\" href=\"#dummy_set_flag\">dummy_set_flag</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#flags\">flags</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#flags\">flags</a> = &amp;<a class=\"id\" href=\"#dummy_tracer_flags\">dummy_tracer_flags</a>;", 
"<span class=\"ts\"/>else", 
"<span class=\"ts\"/><span class=\"ts\"/>if (!<a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#flags\">flags</a>-><a class=\"id\" href=\"#opts\">opts</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#flags\">flags</a>-><a class=\"id\" href=\"#opts\">opts</a> = <a class=\"id\" href=\"#dummy_tracer_opt\">dummy_tracer_opt</a>;", 
"<span class=\"ts\"/>if (!<a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#wait_pipe\">wait_pipe</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#wait_pipe\">wait_pipe</a> = <a class=\"id\" href=\"#default_wait_pipe\">default_wait_pipe</a>;", 
"", 
"", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FTRACE_STARTUP_TEST\">CONFIG_FTRACE_STARTUP_TEST</a>", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#selftest\">selftest</a> && !<a class=\"id\" href=\"#tracing_selftest_disabled\">tracing_selftest_disabled</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#tracer\">tracer</a> *<a class=\"id\" href=\"#saved_tracer\">saved_tracer</a> = <a class=\"id\" href=\"#current_trace\">current_trace</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>struct <a class=\"id\" href=\"#trace_array\">trace_array</a> *<a class=\"id\" href=\"#tr\">tr</a> = &amp;<a class=\"id\" href=\"#global_trace\">global_trace</a>;", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Run a selftest on this tracer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * Here we reset the trace buffer, and set the current</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * tracer to be this tracer. The tracer can then run some</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * internal tracing to verify that everything is in order.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> * If we fail, we do not register this tracer.</span>", 
"<span class=\"comment\"><span class=\"ts\"/><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tracing_reset_online_cpus\">tracing_reset_online_cpus</a>(<a class=\"id\" href=\"#tr\">tr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current_trace\">current_trace</a> = <a class=\"id\" href=\"#type\">type</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* the test is responsible for initializing and enabling */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Testing tracer %s: \", <a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ret\">ret</a> = <a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#selftest\">selftest</a>(<a class=\"id\" href=\"#type\">type</a>, <a class=\"id\" href=\"#tr\">tr</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* the test is responsible for resetting too */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current_trace\">current_trace</a> = <a class=\"id\" href=\"#saved_tracer\">saved_tracer</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \"FAILED!\\n\");", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Only reset on passing, to avoid touching corrupted buffers */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tracing_reset_online_cpus\">tracing_reset_online_cpus</a>(<a class=\"id\" href=\"#tr\">tr</a>);", 
"", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_CONT\">KERN_CONT</a> \"PASSED\\n\");", 
"<span class=\"ts\"/>}", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#next\">next</a> = <a class=\"id\" href=\"#trace_types\">trace_types</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#trace_types\">trace_types</a> = <a class=\"id\" href=\"#type\">type</a>;", 
"", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tracing_selftest_running\">tracing_selftest_running</a> = <a class=\"id\" href=\"#false\">false</a>;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#trace_types_lock\">trace_types_lock</a>);", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#ret\">ret</a> || !<a class=\"id\" href=\"#default_bootup_tracer\">default_bootup_tracer</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#strncmp\">strncmp</a>(<a class=\"id\" href=\"#default_bootup_tracer\">default_bootup_tracer</a>, <a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#name\">name</a>, <a class=\"id\" href=\"#MAX_TRACER_SIZE\">MAX_TRACER_SIZE</a>))", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out_unlock\">out_unlock</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Starting tracer '%s'\\n\", <a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><span class=\"comment\">/* Do we want this tracer to start on bootup? */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tracing_set_tracer\">tracing_set_tracer</a>(<a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#default_bootup_tracer\">default_bootup_tracer</a> = <a class=\"id\" href=\"#NULL\">NULL</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/* disable other selftests, since this will break it. */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tracing_selftest_disabled\">tracing_selftest_disabled</a> = 1;", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_FTRACE_STARTUP_TEST\">CONFIG_FTRACE_STARTUP_TEST</a>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#printk\">printk</a>(<a class=\"id\" href=\"#KERN_INFO\">KERN_INFO</a> \"Disabling FTRACE selftests due to running tracer '%s'\\n\",", 
"<span class=\"ts\"/>       <a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
" <a class=\"id\" href=\"#out_unlock\">out_unlock</a>:", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#ret\">ret</a>;", 
"}", 
"", 
"void <a class=\"id\" href=\"#unregister_tracer\">unregister_tracer</a>(struct <a class=\"id\" href=\"#tracer\">tracer</a> *<a class=\"id\" href=\"#type\">type</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#tracer\">tracer</a> **<a class=\"id\" href=\"#t\">t</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_lock\">mutex_lock</a>(&amp;<a class=\"id\" href=\"#trace_types_lock\">trace_types_lock</a>);", 
"<span class=\"ts\"/>for (<a class=\"id\" href=\"#t\">t</a> = &amp;<a class=\"id\" href=\"#trace_types\">trace_types</a>; *<a class=\"id\" href=\"#t\">t</a>; <a class=\"id\" href=\"#t\">t</a> = &amp;(*<a class=\"id\" href=\"#t\">t</a>)-><a class=\"id\" href=\"#next\">next</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (*<a class=\"id\" href=\"#t\">t</a> == <a class=\"id\" href=\"#type\">type</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#found\">found</a>;", 
"<span class=\"ts\"/>}", 
"<span class=\"ts\"/><a class=\"id\" href=\"#pr_info\">pr_info</a>(\"Tracer %s not registered\\n\", <a class=\"id\" href=\"#type\">type</a>-><a class=\"id\" href=\"#name\">name</a>);", 
"<span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"", 
" <a class=\"id\" href=\"#found\">found</a>:", 
"<span class=\"ts\"/>*<a class=\"id\" href=\"#t\">t</a> = (*<a class=\"id\" href=\"#t\">t</a>)-><a class=\"id\" href=\"#next\">next</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#type\">type</a> == <a class=\"id\" href=\"#current_trace\">current_trace</a> && <a class=\"id\" href=\"#tracer_enabled\">tracer_enabled</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tracer_enabled\">tracer_enabled</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#tracing_stop\">tracing_stop</a>();", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#current_trace\">current_trace</a>-><a class=\"id\" href=\"#stop\">stop</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current_trace\">current_trace</a>-><a class=\"id\" href=\"#stop\">stop</a>(&amp;<a class=\"id\" href=\"#global_trace\">global_trace</a>);", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#current_trace\">current_trace</a> = &amp;<a class=\"id\" href=\"#nop_trace\">nop_trace</a>;", 
"<span class=\"ts\"/>}", 
"<a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#mutex_unlock\">mutex_unlock</a>(&amp;<a class=\"id\" href=\"#trace_types_lock\">trace_types_lock</a>);", 
"}", 
"", 
"static void <a class=\"id\" href=\"#__tracing_reset\">__tracing_reset</a>(struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_disable_cpu\">ftrace_disable_cpu</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ring_buffer_reset_cpu\">ring_buffer_reset_cpu</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_enable_cpu\">ftrace_enable_cpu</a>();", 
"}", 
"", 
"void <a class=\"id\" href=\"#tracing_reset\">tracing_reset</a>(struct <a class=\"id\" href=\"#trace_array\">trace_array</a> *<a class=\"id\" href=\"#tr\">tr</a>, int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#tr\">tr</a>-><a class=\"id\" href=\"#buffer\">buffer</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ring_buffer_record_disable\">ring_buffer_record_disable</a>(<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Make sure all commits have finished */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synchronize_sched\">synchronize_sched</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#__tracing_reset\">__tracing_reset</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ring_buffer_record_enable\">ring_buffer_record_enable</a>(<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#tracing_reset_online_cpus\">tracing_reset_online_cpus</a>(struct <a class=\"id\" href=\"#trace_array\">trace_array</a> *<a class=\"id\" href=\"#tr\">tr</a>)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#tr\">tr</a>-><a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/>int <a class=\"id\" href=\"#cpu\">cpu</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ring_buffer_record_disable\">ring_buffer_record_disable</a>(<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Make sure all commits have finished */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#synchronize_sched\">synchronize_sched</a>();", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tr\">tr</a>-><a class=\"id\" href=\"#time_start\">time_start</a> = <a class=\"id\" href=\"#ftrace_now\">ftrace_now</a>(<a class=\"id\" href=\"#tr\">tr</a>-><a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#for_each_online_cpu\">for_each_online_cpu</a>(<a class=\"id\" href=\"#cpu\">cpu</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#__tracing_reset\">__tracing_reset</a>(<a class=\"id\" href=\"#buffer\">buffer</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ring_buffer_record_enable\">ring_buffer_record_enable</a>(<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#tracing_reset_current\">tracing_reset_current</a>(int <a class=\"id\" href=\"#cpu\">cpu</a>)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tracing_reset\">tracing_reset</a>(&amp;<a class=\"id\" href=\"#global_trace\">global_trace</a>, <a class=\"id\" href=\"#cpu\">cpu</a>);", 
"}", 
"", 
"void <a class=\"id\" href=\"#tracing_reset_current_online_cpus\">tracing_reset_current_online_cpus</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tracing_reset_online_cpus\">tracing_reset_online_cpus</a>(&amp;<a class=\"id\" href=\"#global_trace\">global_trace</a>);", 
"}", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SAVED_CMDLINES\">SAVED_CMDLINES</a> 128", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#NO_CMDLINE_MAP\">NO_CMDLINE_MAP</a> <a class=\"id\" href=\"#UINT_MAX\">UINT_MAX</a>", 
"static unsigned <a class=\"id\" href=\"#map_pid_to_cmdline\">map_pid_to_cmdline</a>[<a class=\"id\" href=\"#PID_MAX_DEFAULT\">PID_MAX_DEFAULT</a>+1];", 
"static unsigned <a class=\"id\" href=\"#map_cmdline_to_pid\">map_cmdline_to_pid</a>[<a class=\"id\" href=\"#SAVED_CMDLINES\">SAVED_CMDLINES</a>];", 
"static char <a class=\"id\" href=\"#saved_cmdlines\">saved_cmdlines</a>[<a class=\"id\" href=\"#SAVED_CMDLINES\">SAVED_CMDLINES</a>][<a class=\"id\" href=\"#TASK_COMM_LEN\">TASK_COMM_LEN</a>];", 
"static int <a class=\"id\" href=\"#cmdline_idx\">cmdline_idx</a>;", 
"static <a class=\"id\" href=\"#arch_spinlock_t\">arch_spinlock_t</a> <a class=\"id\" href=\"#trace_cmdline_lock\">trace_cmdline_lock</a> = <a class=\"id\" href=\"#__ARCH_SPIN_LOCK_UNLOCKED\">__ARCH_SPIN_LOCK_UNLOCKED</a>;", 
"", 
"<span class=\"comment\">/* temporary disable recording */</span>", 
"static <a class=\"id\" href=\"#atomic_t\">atomic_t</a> <a class=\"id\" href=\"#trace_record_cmdline_disabled\">trace_record_cmdline_disabled</a> <a class=\"id\" href=\"#__read_mostly\">__read_mostly</a>;", 
"", 
"static void <a class=\"id\" href=\"#trace_init_cmdlines\">trace_init_cmdlines</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#map_pid_to_cmdline\">map_pid_to_cmdline</a>, <a class=\"id\" href=\"#NO_CMDLINE_MAP\">NO_CMDLINE_MAP</a>, sizeof(<a class=\"id\" href=\"#map_pid_to_cmdline\">map_pid_to_cmdline</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#memset\">memset</a>(&amp;<a class=\"id\" href=\"#map_cmdline_to_pid\">map_cmdline_to_pid</a>, <a class=\"id\" href=\"#NO_CMDLINE_MAP\">NO_CMDLINE_MAP</a>, sizeof(<a class=\"id\" href=\"#map_cmdline_to_pid\">map_cmdline_to_pid</a>));", 
"<span class=\"ts\"/><a class=\"id\" href=\"#cmdline_idx\">cmdline_idx</a> = 0;", 
"}", 
"", 
"int <a class=\"id\" href=\"#is_tracing_stopped\">is_tracing_stopped</a>(void)", 
"{", 
"<span class=\"ts\"/>return <a class=\"id\" href=\"#trace_stop_count\">trace_stop_count</a>;", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * ftrace_off_permanent - disable all ftrace code permanently</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * This should only be called when a serious anomally has</span>", 
"<span class=\"comment\"> * been detected.  This will turn off the function tracing,</span>", 
"<span class=\"comment\"> * ring buffers, and other tracing utilites. It takes no</span>", 
"<span class=\"comment\"> * locks and can be called from any context.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#ftrace_off_permanent\">ftrace_off_permanent</a>(void)", 
"{", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tracing_disabled\">tracing_disabled</a> = 1;", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_stop\">ftrace_stop</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#tracing_off_permanent\">tracing_off_permanent</a>();", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tracing_start - quick start of the tracer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * If tracing is enabled but was stopped by tracing_stop,</span>", 
"<span class=\"comment\"> * this will start the tracer back up.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#tracing_start\">tracing_start</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#tracing_disabled\">tracing_disabled</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/>return;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#tracing_start_lock\">tracing_start_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"<span class=\"ts\"/>if (--<a class=\"id\" href=\"#trace_stop_count\">trace_stop_count</a>) {", 
"<span class=\"ts\"/><span class=\"ts\"/>if (<a class=\"id\" href=\"#trace_stop_count\">trace_stop_count</a> &lt; 0) {", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><span class=\"comment\">/* Someone screwed up their debugging */</span>", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#WARN_ON_ONCE\">WARN_ON_ONCE</a>(1);", 
"<span class=\"ts\"/><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#trace_stop_count\">trace_stop_count</a> = 0;", 
"<span class=\"ts\"/><span class=\"ts\"/>}", 
"<span class=\"ts\"/><span class=\"ts\"/>goto <a class=\"id\" href=\"#out\">out</a>;", 
"<span class=\"ts\"/>}", 
"", 
"<span class=\"ts\"/><span class=\"comment\">/* Prevent the buffers from switching */</span>", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_spin_lock\">arch_spin_lock</a>(&amp;<a class=\"id\" href=\"#ftrace_max_lock\">ftrace_max_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#global_trace\">global_trace</a>.<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ring_buffer_record_enable\">ring_buffer_record_enable</a>(<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#buffer\">buffer</a> = <a class=\"id\" href=\"#max_tr\">max_tr</a>.<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/>if (<a class=\"id\" href=\"#buffer\">buffer</a>)", 
"<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ring_buffer_record_enable\">ring_buffer_record_enable</a>(<a class=\"id\" href=\"#buffer\">buffer</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#arch_spin_unlock\">arch_spin_unlock</a>(&amp;<a class=\"id\" href=\"#ftrace_max_lock\">ftrace_max_lock</a>);", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_start\">ftrace_start</a>();", 
" <a class=\"id\" href=\"#out\">out</a>:", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_unlock_irqrestore\">spin_unlock_irqrestore</a>(&amp;<a class=\"id\" href=\"#tracing_start_lock\">tracing_start_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
"}", 
"", 
"<span class=\"comment\">/**</span>", 
"<span class=\"comment\"> * tracing_stop - quick stop of the tracer</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Light weight way to stop tracing. Use in conjunction with</span>", 
"<span class=\"comment\"> * tracing_start.</span>", 
"<span class=\"comment\"> */</span>", 
"void <a class=\"id\" href=\"#tracing_stop\">tracing_stop</a>(void)", 
"{", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#ring_buffer\">ring_buffer</a> *<a class=\"id\" href=\"#buffer\">buffer</a>;", 
"<span class=\"ts\"/>unsigned long <a class=\"id\" href=\"#flags\">flags</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#ftrace_stop\">ftrace_stop</a>();", 
"<span class=\"ts\"/><a class=\"id\" href=\"#spin_lock_irqsave\">spin_lock_irqsave</a>(&amp;<a class=\"id\" href=\"#tracing_start_lock\">tracing_start_lock</a>, <a class=\"id\" href=\"#flags\">flags</a>);", 
];
xr_frag_insert('l/29/bb0336ee6246a200dceeae5994f536de29d90e.xr', __xr_tmp);
