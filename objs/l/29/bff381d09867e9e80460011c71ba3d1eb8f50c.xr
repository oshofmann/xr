var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#INFTREES_H\">INFTREES_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#INFTREES_H\">INFTREES_H</a>", 
"", 
"<span class=\"comment\">/* inftrees.h -- header to use inftrees.c</span>", 
"<span class=\"comment\"> * Copyright (C) 1995-2005 Mark Adler</span>", 
"<span class=\"comment\"> * For conditions of distribution and use, see copyright notice in zlib.h</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* WARNING: this file should *not* be used by applications. It is</span>", 
"<span class=\"comment\">   part of the implementation of the compression library and is</span>", 
"<span class=\"comment\">   subject to change. Applications should only use zlib.h.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* Structure for decoding tables.  Each entry provides either the</span>", 
"<span class=\"comment\">   information needed to do the operation requested by the code that</span>", 
"<span class=\"comment\">   indexed that table entry, or it provides a pointer to another</span>", 
"<span class=\"comment\">   table that indexes more bits of the code.  op indicates whether</span>", 
"<span class=\"comment\">   the entry is a pointer to another table, a literal, a length or</span>", 
"<span class=\"comment\">   distance, an end-of-block, or an invalid code.  For a table</span>", 
"<span class=\"comment\">   pointer, the low four bits of op is the number of index bits of</span>", 
"<span class=\"comment\">   that table.  For a length or distance, the low four bits of op</span>", 
"<span class=\"comment\">   is the number of extra bits to get after the code.  bits is</span>", 
"<span class=\"comment\">   the number of bits in this code or part of the code to drop off</span>", 
"<span class=\"comment\">   of the bit buffer.  val is the actual byte to output in the case</span>", 
"<span class=\"comment\">   of a literal, the base length or distance, or the offset from</span>", 
"<span class=\"comment\">   the current table to the next table.  Each entry is four bytes. */</span>", 
"typedef struct {", 
"    unsigned char <a class=\"id\" href=\"#op\">op</a>;           <span class=\"comment\">/* operation, extra bits, table bits */</span>", 
"    unsigned char <a class=\"id\" href=\"#bits\">bits</a>;         <span class=\"comment\">/* bits in this part of the code */</span>", 
"    unsigned short <a class=\"id\" href=\"#val\">val</a>;         <span class=\"comment\">/* offset in table or code value */</span>", 
"} <a class=\"id\" href=\"#code\">code</a>;", 
"", 
"<span class=\"comment\">/* op values as set by inflate_table():</span>", 
"<span class=\"comment\">    00000000 - literal</span>", 
"<span class=\"comment\">    0000tttt - table link, tttt != 0 is the number of table index bits</span>", 
"<span class=\"comment\">    0001eeee - length or distance, eeee is the number of extra bits</span>", 
"<span class=\"comment\">    01100000 - end of block</span>", 
"<span class=\"comment\">    01000000 - invalid code</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"<span class=\"comment\">/* Maximum size of dynamic tree.  The maximum found in a long but non-</span>", 
"<span class=\"comment\">   exhaustive search was 1444 code structures (852 for length/literals</span>", 
"<span class=\"comment\">   and 592 for distances, the latter actually the result of an</span>", 
"<span class=\"comment\">   exhaustive search).  The true maximum is not known, but the value</span>", 
"<span class=\"comment\">   below is more than safe. */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#ENOUGH\">ENOUGH</a> 2048", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#MAXD\">MAXD</a> 592", 
"", 
"<span class=\"comment\">/* Type of code to build for inftable() */</span>", 
"typedef enum {", 
"    <a class=\"id\" href=\"#CODES\">CODES</a>,", 
"    <a class=\"id\" href=\"#LENS\">LENS</a>,", 
"    <a class=\"id\" href=\"#DISTS\">DISTS</a>", 
"} <a class=\"id\" href=\"#codetype\">codetype</a>;", 
"", 
"extern int <a class=\"id\" href=\"#zlib_inflate_table\">zlib_inflate_table</a> (<a class=\"id\" href=\"#codetype\">codetype</a> <a class=\"id\" href=\"#type\">type</a>, unsigned short *<a class=\"id\" href=\"#lens\">lens</a>,", 
"                             unsigned <a class=\"id\" href=\"#codes\">codes</a>, <a class=\"id\" href=\"#code\">code</a> **<a class=\"id\" href=\"#table\">table</a>,", 
"                             unsigned *<a class=\"id\" href=\"#bits\">bits</a>, unsigned short *<a class=\"id\" href=\"#work\">work</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/29/bff381d09867e9e80460011c71ba3d1eb8f50c.xr', __xr_tmp);
