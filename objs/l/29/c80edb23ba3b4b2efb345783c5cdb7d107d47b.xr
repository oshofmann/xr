var __xr_tmp = [
"#<a class=\"id\" href=\"#ifndef\">ifndef</a> <a class=\"id\" href=\"#__NETNS_XFRM_H\">__NETNS_XFRM_H</a>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#__NETNS_XFRM_H\">__NETNS_XFRM_H</a>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#list\">list</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#wait\">wait</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#workqueue\">workqueue</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#xfrm\">xfrm</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#net\">net</a>/<a class=\"id\" href=\"#dst_ops\">dst_ops</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"struct <a class=\"id\" href=\"#ctl_table_header\">ctl_table_header</a>;", 
"", 
"struct <a class=\"id\" href=\"#xfrm_policy_hash\">xfrm_policy_hash</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a><span class=\"ts\"/>*<a class=\"id\" href=\"#table\">table</a>;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#hmask\">hmask</a>;", 
"};", 
"", 
"struct <a class=\"id\" href=\"#netns_xfrm\">netns_xfrm</a> {", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#state_all\">state_all</a>;", 
"<span class=\"ts\"/><span class=\"comment\">/*</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Hash table to find appropriate SA towards given target (endpoint of</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * tunnel or destination of transport mode) allowed by selector.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> *</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * Main use is finding SA after policy selected tunnel or transport</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * mode. Also, it can be used by ah/esp icmp error handler to find</span>", 
"<span class=\"comment\"><span class=\"ts\"/> * offending SA.</span>", 
"<span class=\"comment\"><span class=\"ts\"/> */</span>", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a><span class=\"ts\"/>*<a class=\"id\" href=\"#state_bydst\">state_bydst</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a><span class=\"ts\"/>*<a class=\"id\" href=\"#state_bysrc\">state_bysrc</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a><span class=\"ts\"/>*<a class=\"id\" href=\"#state_byspi\">state_byspi</a>;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state_hmask\">state_hmask</a>;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#state_num\">state_num</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a><span class=\"ts\"/><a class=\"id\" href=\"#state_hash_work\">state_hash_work</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a><span class=\"ts\"/><a class=\"id\" href=\"#state_gc_list\">state_gc_list</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a><span class=\"ts\"/><a class=\"id\" href=\"#state_gc_work\">state_gc_work</a>;", 
"", 
"<span class=\"ts\"/><a class=\"id\" href=\"#wait_queue_head_t\">wait_queue_head_t</a><span class=\"ts\"/><a class=\"id\" href=\"#km_waitq\">km_waitq</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#list_head\">list_head</a><span class=\"ts\"/><a class=\"id\" href=\"#policy_all\">policy_all</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a><span class=\"ts\"/>*<a class=\"id\" href=\"#policy_byidx\">policy_byidx</a>;", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#policy_idx_hmask\">policy_idx_hmask</a>;", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#hlist_head\">hlist_head</a><span class=\"ts\"/><a class=\"id\" href=\"#policy_inexact\">policy_inexact</a>[<a class=\"id\" href=\"#XFRM_POLICY_MAX\">XFRM_POLICY_MAX</a> * 2];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#xfrm_policy_hash\">xfrm_policy_hash</a><span class=\"ts\"/><a class=\"id\" href=\"#policy_bydst\">policy_bydst</a>[<a class=\"id\" href=\"#XFRM_POLICY_MAX\">XFRM_POLICY_MAX</a> * 2];", 
"<span class=\"ts\"/>unsigned int<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#policy_count\">policy_count</a>[<a class=\"id\" href=\"#XFRM_POLICY_MAX\">XFRM_POLICY_MAX</a> * 2];", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#work_struct\">work_struct</a><span class=\"ts\"/><a class=\"id\" href=\"#policy_hash_work\">policy_hash_work</a>;", 
"", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dst_ops\">dst_ops</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xfrm4_dst_ops\">xfrm4_dst_ops</a>;", 
"#if <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IPV6\">CONFIG_IPV6</a>) || <a class=\"id\" href=\"#defined\">defined</a>(<a class=\"id\" href=\"#CONFIG_IPV6_MODULE\">CONFIG_IPV6_MODULE</a>)", 
"<span class=\"ts\"/>struct <a class=\"id\" href=\"#dst_ops\">dst_ops</a><span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#xfrm6_dst_ops\">xfrm6_dst_ops</a>;", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
];
xr_frag_insert('l/29/c80edb23ba3b4b2efb345783c5cdb7d107d47b.xr', __xr_tmp);
