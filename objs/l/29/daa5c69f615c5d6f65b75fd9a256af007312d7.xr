var __xr_tmp = [
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * linux/ipc/sem.c</span>", 
"<span class=\"comment\"> * Copyright (C) 1992 Krishna Balasubramanian</span>", 
"<span class=\"comment\"> * Copyright (C) 1995 Eric Schenk, Bruno Haible</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * /proc/sysvipc/sem support (c) 1999 Dragos Acostachioaie &lt;dragos@iname.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * SMP-threaded, sysctl's added</span>", 
"<span class=\"comment\"> * (c) 1999 Manfred Spraul &lt;manfred@colorfullife.com&gt;</span>", 
"<span class=\"comment\"> * Enforced range limit on SEM_UNDO</span>", 
"<span class=\"comment\"> * (c) 2001 Red Hat Inc</span>", 
"<span class=\"comment\"> * Lockless wakeup</span>", 
"<span class=\"comment\"> * (c) 2003 Manfred Spraul &lt;manfred@colorfullife.com&gt;</span>", 
"<span class=\"comment\"> * Further wakeup optimizations, documentation</span>", 
"<span class=\"comment\"> * (c) 2010 Manfred Spraul &lt;manfred@colorfullife.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * support for audit of ipc object properties and permission changes</span>", 
"<span class=\"comment\"> * Dustin Kirkland &lt;dustin.kirkland@us.ibm.com&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * namespaces support</span>", 
"<span class=\"comment\"> * OpenVZ, SWsoft Inc.</span>", 
"<span class=\"comment\"> * Pavel Emelianov &lt;xemul@openvz.org&gt;</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Implementation notes: (May 2010)</span>", 
"<span class=\"comment\"> * This file implements System V semaphores.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * User space visible behavior:</span>", 
"<span class=\"comment\"> * - FIFO ordering for semop() operations (just FIFO, not starvation</span>", 
"<span class=\"comment\"> *   protection)</span>", 
"<span class=\"comment\"> * - multiple semaphore operations that alter the same semaphore in</span>", 
"<span class=\"comment\"> *   one semop() are handled.</span>", 
"<span class=\"comment\"> * - sem_ctime (time of last semctl()) is updated in the IPC_SET, SETVAL and</span>", 
"<span class=\"comment\"> *   SETALL calls.</span>", 
"<span class=\"comment\"> * - two Linux specific semctl() commands: SEM_STAT, SEM_INFO.</span>", 
"<span class=\"comment\"> * - undo adjustments at process exit are limited to 0..SEMVMX.</span>", 
"<span class=\"comment\"> * - namespace are supported.</span>", 
"<span class=\"comment\"> * - SEMMSL, SEMMNS, SEMOPM and SEMMNI can be configured at runtine by writing</span>", 
"<span class=\"comment\"> *   to /proc/sys/kernel/sem.</span>", 
"<span class=\"comment\"> * - statistics about the usage are reported in /proc/sysvipc/sem.</span>", 
"<span class=\"comment\"> *</span>", 
"<span class=\"comment\"> * Internals:</span>", 
"<span class=\"comment\"> * - scalability:</span>", 
"<span class=\"comment\"> *   - all global variables are read-mostly.</span>", 
"<span class=\"comment\"> *   - semop() calls and semctl(RMID) are synchronized by RCU.</span>", 
"<span class=\"comment\"> *   - most operations do write operations (actually: spin_lock calls) to</span>", 
"<span class=\"comment\"> *     the per-semaphore array structure.</span>", 
"<span class=\"comment\"> *   Thus: Perfect SMP scaling between independent semaphore arrays.</span>", 
"<span class=\"comment\"> *         If multiple semaphores in one array are used, then cache line</span>", 
"<span class=\"comment\"> *         trashing on the semaphore array spinlock will limit the scaling.</span>", 
"<span class=\"comment\"> * - semncnt and semzcnt are calculated on demand in count_semncnt() and</span>", 
"<span class=\"comment\"> *   count_semzcnt()</span>", 
"<span class=\"comment\"> * - the task that performs a successful semop() scans the list of all</span>", 
"<span class=\"comment\"> *   sleeping tasks and completes any pending operations that can be fulfilled.</span>", 
"<span class=\"comment\"> *   Semaphores are actively given to waiting tasks (necessary for FIFO).</span>", 
"<span class=\"comment\"> *   (see update_queue())</span>", 
"<span class=\"comment\"> * - To improve the scalability, the actual wake-up calls are performed after</span>", 
"<span class=\"comment\"> *   dropping all locks. (see wake_up_sem_queue_prepare(),</span>", 
"<span class=\"comment\"> *   wake_up_sem_queue_do())</span>", 
"<span class=\"comment\"> * - All work is done by the waker, the woken up task does not have to do</span>", 
"<span class=\"comment\"> *   anything - not even acquiring a lock or dropping a refcount.</span>", 
"<span class=\"comment\"> * - A woken up task may not even touch the semaphore array anymore, it may</span>", 
"<span class=\"comment\"> *   have been destroyed already by a semctl(RMID).</span>", 
"<span class=\"comment\"> * - The synchronizations between wake-ups due to a timeout/signal and a</span>", 
"<span class=\"comment\"> *   wake-up due to a completed semaphore operation is achieved by using an</span>", 
"<span class=\"comment\"> *   intermediate state (IN_WAKEUP).</span>", 
"<span class=\"comment\"> * - UNDO values are stored in an array (one per process and per</span>", 
"<span class=\"comment\"> *   semaphore array, lazily allocated). For backwards compatibility, multiple</span>", 
"<span class=\"comment\"> *   modes for the UNDO variables are supported (per process, per thread)</span>", 
"<span class=\"comment\"> *   (see copy_semundo, CLONE_SYSVSEM)</span>", 
"<span class=\"comment\"> * - There are two lists of the pending operations: a per-array list</span>", 
"<span class=\"comment\"> *   and per-semaphore list (stored in the array). This allows to achieve FIFO</span>", 
"<span class=\"comment\"> *   ordering without always scanning all pending operations.</span>", 
"<span class=\"comment\"> *   The worst-case behavior is nevertheless O(N^2) for N wakeups.</span>", 
"<span class=\"comment\"> */</span>", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#slab\">slab</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#spinlock\">spinlock</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#init\">init</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#proc_fs\">proc_fs</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#time\">time</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#security\">security</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#syscalls\">syscalls</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#audit\">audit</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#capability\">capability</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#seq_file\">seq_file</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#rwsem\">rwsem</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#nsproxy\">nsproxy</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#linux\">linux</a>/<a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"", 
"#<a class=\"id\" href=\"#include\">include</a> &lt;<a class=\"id\" href=\"#asm\">asm</a>/<a class=\"id\" href=\"#uaccess\">uaccess</a>.<a class=\"id\" href=\"#h\">h</a>&gt;", 
"#<a class=\"id\" href=\"#include\">include</a> \"util.h\"", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#sem_ids\">sem_ids</a>(<a class=\"id\" href=\"#ns\">ns</a>)<span class=\"ts\"/>((<a class=\"id\" href=\"#ns\">ns</a>)-><a class=\"id\" href=\"#ids\">ids</a>[<a class=\"id\" href=\"#IPC_SEM_IDS\">IPC_SEM_IDS</a>])", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#sem_unlock\">sem_unlock</a>(<a class=\"id\" href=\"#sma\">sma</a>)<span class=\"ts\"/><span class=\"ts\"/><a class=\"id\" href=\"#ipc_unlock\">ipc_unlock</a>(&amp;(<a class=\"id\" href=\"#sma\">sma</a>)-><a class=\"id\" href=\"#sem_perm\">sem_perm</a>)", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#sem_checkid\">sem_checkid</a>(<a class=\"id\" href=\"#sma\">sma</a>, <a class=\"id\" href=\"#semid\">semid</a>)<span class=\"ts\"/><a class=\"id\" href=\"#ipc_checkid\">ipc_checkid</a>(&amp;<a class=\"id\" href=\"#sma\">sma</a>-><a class=\"id\" href=\"#sem_perm\">sem_perm</a>, <a class=\"id\" href=\"#semid\">semid</a>)", 
"", 
"static int <a class=\"id\" href=\"#newary\">newary</a>(struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *, struct <a class=\"id\" href=\"#ipc_params\">ipc_params</a> *);", 
"static void <a class=\"id\" href=\"#freeary\">freeary</a>(struct <a class=\"id\" href=\"#ipc_namespace\">ipc_namespace</a> *, struct <a class=\"id\" href=\"#kern_ipc_perm\">kern_ipc_perm</a> *);", 
"#<a class=\"id\" href=\"#ifdef\">ifdef</a> <a class=\"id\" href=\"#CONFIG_PROC_FS\">CONFIG_PROC_FS</a>", 
"static int <a class=\"id\" href=\"#sysvipc_sem_proc_show\">sysvipc_sem_proc_show</a>(struct <a class=\"id\" href=\"#seq_file\">seq_file</a> *<a class=\"id\" href=\"#s\">s</a>, void *<a class=\"id\" href=\"#it\">it</a>);", 
"#<a class=\"id\" href=\"#endif\">endif</a>", 
"", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SEMMSL_FAST\">SEMMSL_FAST</a><span class=\"ts\"/>256 <span class=\"comment\">/* 512 bytes on stack */</span>", 
"#<a class=\"id\" href=\"#define\">define</a> <a class=\"id\" href=\"#SEMOPM_FAST\">SEMOPM_FAST</a><span class=\"ts\"/>64  <span class=\"comment\">/* ~ 372 bytes on stack */</span>", 
"", 
"<span class=\"comment\">/*</span>", 
"<span class=\"comment\"> * linked list protection:</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sem_undo.id_next,</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sem_array.sem_pending{,last},</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sem_array.sem_undo: sem_lock() for read/write</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/>sem_undo.proc_next: only \"current\" is allowed to read/write that field.</span>", 
"<span class=\"comment\"> *<span class=\"ts\"/></span>", 
];
xr_frag_insert('l/29/daa5c69f615c5d6f65b75fd9a256af007312d7.xr', __xr_tmp);
